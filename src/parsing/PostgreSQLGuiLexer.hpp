/** \file
 *  This C++ header file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -  From the grammar source file : PostgreSQLGuiLexer.g
 *     -                            On : 2016-04-22 15:15:02
 *     -                 for the lexer : PostgreSQLGuiLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
 * The lexer PostgreSQLGuiLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram. 
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_PostgreSQLGuiLexer_H
#define _PostgreSQLGuiLexer_H
/* =============================================================================
 * Standard antlr3 C++ runtime definitions
 */
#include <antlr3.hpp>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */


#include "UserGuiTraits.hpp"
#include <vector>




namespace  Antlr3GuiImpl  {

typedef PostgreSQLGuiLexerTraits PostgreSQLGuiLexerImplTraits;


class PostgreSQLGuiLexerTokens
{
public:
	/** Symbolic definitions of all the tokens that the lexer will work with.
	 *
	 * Antlr will define EOF, but we can't use that as it it is too common in
	 * in C header files and that would be confusing. There is no way to filter this out at the moment
	 * so we just undef it here for now. That isn't the value we get back from C recognizers
	 * anyway. We are looking for ANTLR_TOKEN_EOF.
	 */
	enum Tokens : ANTLR_UINT32
	{
		EOF_TOKEN = PostgreSQLGuiLexerImplTraits::CommonTokenType::TOKEN_EOF
		, ABORT = 4 
		, ABSOLUTE_KW = 5 
		, ACCESS = 6 
		, ACTION = 7 
		, ADD = 8 
		, ADMIN = 9 
		, AFTER = 10 
		, AGGREGATE = 11 
		, ALL = 12 
		, ALL_FIELDS = 13 
		, ALSO = 14 
		, ALTER = 15 
		, ALWAYS = 16 
		, ANALYSE = 17 
		, ANALYZE = 18 
		, AND = 19 
		, AND_SYM = 20 
		, ANY = 21 
		, ARRAY = 22 
		, ARROW = 23 
		, AS = 24 
		, ASC = 25 
		, ASSERTION = 26 
		, ASSIGNMENT = 27 
		, ASTERISK = 28 
		, ASYMMETRIC = 29 
		, AT = 30 
		, AUTHORIZATION = 31 
		, BACKWARD = 32 
		, BEFORE = 33 
		, BEGIN = 34 
		, BETWEEN = 35 
		, BIGINT = 36 
		, BINARY = 37 
		, BIND_VAR_WITH_PARAMS = 38 
		, BIT = 39 
		, BITAND = 40 
		, BOOLEAN = 41 
		, BOTH = 42 
		, BY = 43 
		, CACHE = 44 
		, CALLED = 45 
		, CASCADE = 46 
		, CASCADED = 47 
		, CASE = 48 
		, CAST = 49 
		, CATALOG = 50 
		, CHAIN = 51 
		, CHAR = 52 
		, CHARACTER = 53 
		, CHARACTERISTICS = 54 
		, CHARACTER_LITERAL = 55 
		, CHECK = 56 
		, CHECKPOINT = 57 
		, CLASS = 58 
		, CLOSE = 59 
		, CLUSTER = 60 
		, COALESCE = 61 
		, COLLATE = 62 
		, COLON = 63 
		, COLUMN = 64 
		, COMMA = 65 
		, COMMENT = 66 
		, COMMENTS = 67 
		, COMMENT_ML = 68 
		, COMMENT_SL = 69 
		, COMMIT = 70 
		, COMMITTED = 71 
		, CONCURRENTLY = 72 
		, CONFIGURATION = 73 
		, CONNECTION = 74 
		, CONSTRAINT = 75 
		, CONSTRAINTS = 76 
		, CONTENT = 77 
		, CONTINUE = 78 
		, CONVERSION = 79 
		, COPY = 80 
		, COST = 81 
		, CREATE = 82 
		, CREATEDB = 83 
		, CREATEROLE = 84 
		, CREATEUSER = 85 
		, CROSS = 86 
		, CSV = 87 
		, CURRENT = 88 
		, CURRENT_CATALOG = 89 
		, CURRENT_DATE = 90 
		, CURRENT_ROLE = 91 
		, CURRENT_SCHEMA = 92 
		, CURRENT_TIME = 93 
		, CURRENT_TIMESTAMP = 94 
		, CURRENT_USER = 95 
		, CURSOR = 96 
		, CYCLE = 97 
		, DATA = 98 
		, DATABASE = 99 
		, DAY = 100 
		, DEALLOCATE = 101 
		, DEC = 102 
		, DECIMAL = 103 
		, DECLARE = 104 
		, DEFAULT = 105 
		, DEFAULTS = 106 
		, DEFERRABLE = 107 
		, DEFERRED = 108 
		, DEFINER = 109 
		, DELETE_KW = 110 
		, DELIMITED_ID = 111 
		, DELIMITER = 112 
		, DELIMITERS = 113 
		, DESC = 114 
		, DICTIONARY = 115 
		, DISABLE = 116 
		, DISCARD = 117 
		, DISTINCT = 118 
		, DIVIDE = 119 
		, DO = 120 
		, DOCUMENT = 121 
		, DOMAIN_KW = 122 
		, DOT = 123 
		, DOUBLE = 124 
		, DOUBLE_COLON = 125 
		, DROP = 126 
		, EACH = 127 
		, ELSE = 128 
		, ENABLE = 129 
		, ENCODING = 130 
		, ENCRYPTED = 131 
		, END = 132 
		, ENUM = 133 
		, EQ_SYM = 134 
		, ESCAPE = 135 
		, EXCEPT = 136 
		, EXCLUDE = 137 
		, EXCLUDING = 138 
		, EXCLUSIVE = 139 
		, EXECUTE = 140 
		, EXISTS = 141 
		, EXPLAIN = 142 
		, EXTERNAL = 143 
		, EXTRACT = 144 
		, FALSE_KW = 145 
		, FAMILY = 146 
		, FETCH = 147 
		, FIRST = 148 
		, FLOAT = 149 
		, FOLLOWING = 150 
		, FOR = 151 
		, FORCE = 152 
		, FOREIGN = 153 
		, FORWARD = 154 
		, FREEZE = 155 
		, FROM = 156 
		, FULL = 157 
		, FUNCTION = 158 
		, FUNCTIONS = 159 
		, GET = 160 
		, GLOBAL = 161 
		, GRANT = 162 
		, GRANTED = 163 
		, GREATEST = 164 
		, GROUP = 165 
		, GTH = 166 
		, HANDLER = 167 
		, HAVING = 168 
		, HEADER = 169 
		, HOLD = 170 
		, HOUR = 171 
		, IDENTITY = 172 
		, IF = 173 
		, ILIKE = 174 
		, IMMEDIATE = 175 
		, IMMUTABLE = 176 
		, IMPLICIT = 177 
		, INCLUDING_KW = 178 
		, INCREMENT = 179 
		, INDEX = 180 
		, INDEXES = 181 
		, INHERIT = 182 
		, INHERITS = 183 
		, INITIALLY = 184 
		, INLINE = 185 
		, INNER = 186 
		, INOUT = 187 
		, INPUT = 188 
		, INSENSITIVE = 189 
		, INSERT = 190 
		, INSTEAD = 191 
		, INT = 192 
		, INTEGER = 193 
		, INTERSECT = 194 
		, INTERVAL = 195 
		, INTO = 196 
		, INVOKER = 197 
		, IN_KW = 198 
		, IS = 199 
		, ISNULL = 200 
		, ISOLATION = 201 
		, JOIN = 202 
		, KEY = 203 
		, KEYWORD = 204 
		, LANGUAGE = 205 
		, LARGE = 206 
		, LAST = 207 
		, LBRACK = 208 
		, LC_COLLATE_KW = 209 
		, LC_CTYPE_KW = 210 
		, LEADING = 211 
		, LEAST = 212 
		, LEFT = 213 
		, LET = 214 
		, LEVEL = 215 
		, LIKE = 216 
		, LIMIT = 217 
		, LINEEND = 218 
		, LISTEN = 219 
		, LOAD = 220 
		, LOCAL = 221 
		, LOCALTIME = 222 
		, LOCALTIMESTAMP = 223 
		, LOCATION = 224 
		, LOCK = 225 
		, LOGIN = 226 
		, LPAREN = 227 
		, LTH = 228 
		, MAPPING = 229 
		, MATCH = 230 
		, MAXVALUE = 231 
		, MINUS = 232 
		, MINUTE = 233 
		, MINVALUE = 234 
		, MODE = 235 
		, MOD_SYM = 236 
		, MONTH = 237 
		, MOVE = 238 
		, NAME = 239 
		, NAMES = 240 
		, NATIONAL = 241 
		, NATURAL = 242 
		, NCHAR = 243 
		, NEGATION = 244 
		, NEWLINE = 245 
		, NEXT = 246 
		, NO = 247 
		, NOCREATEDB = 248 
		, NOCREATEROLE = 249 
		, NOCREATEUSER = 250 
		, NOINHERIT = 251 
		, NOLOGIN = 252 
		, NONE = 253 
		, NOSUPERUSER = 254 
		, NOT = 255 
		, NOTHING = 256 
		, NOTIFY = 257 
		, NOTNULL = 258 
		, NOT_EQ = 259 
		, NOWAIT = 260 
		, NULLIF = 261 
		, NULLS = 262 
		, NULL_KW = 263 
		, NUMBER_LIT = 264 
		, NUMERIC = 265 
		, OBJECT = 266 
		, OF = 267 
		, OFF = 268 
		, OFFSET = 269 
		, OIDS = 270 
		, ON = 271 
		, ONLY = 272 
		, OPERATOR = 273 
		, OPERATOR_SYM = 274 
		, OPTION = 275 
		, OPTIONS = 276 
		, OR = 277 
		, ORDER = 278 
		, OR_SYM = 279 
		, OUTER = 280 
		, OUT_KW = 281 
		, OVER = 282 
		, OVERLAPS = 283 
		, OVERLAY = 284 
		, OWNED = 285 
		, OWNER = 286 
		, PARSER = 287 
		, PARTIAL = 288 
		, PARTITION = 289 
		, PASSWORD = 290 
		, PLACING = 291 
		, PLANS = 292 
		, PLUS = 293 
		, POSITION = 294 
		, POWER_OP = 295 
		, PRECEDING = 296 
		, PRECISION = 297 
		, PREPARE = 298 
		, PREPARED = 299 
		, PRESERVE = 300 
		, PRIMARY = 301 
		, PRIOR = 302 
		, PRIVILEGES = 303 
		, PROCEDURAL = 304 
		, PROCEDURE = 305 
		, QUOTE = 306 
		, RANGE = 307 
		, RBRACK = 308 
		, READ = 309 
		, REAL = 310 
		, REASSIGN = 311 
		, RECHECK = 312 
		, RECURSIVE = 313 
		, REFERENCES = 314 
		, REGULAR_ID = 315 
		, REINDEX = 316 
		, RELATIVE_KW = 317 
		, RELEASE = 318 
		, RENAME = 319 
		, REPEATABLE = 320 
		, REPLACE = 321 
		, REPLICA = 322 
		, RESET = 323 
		, RESTART = 324 
		, RESTRICT = 325 
		, RETURNING = 326 
		, RETURNS = 327 
		, REVOKE = 328 
		, RIGHT = 329 
		, ROLE = 330 
		, ROLLBACK = 331 
		, ROW = 332 
		, ROWS = 333 
		, RPAREN = 334 
		, RULE = 335 
		, SAVEPOINT = 336 
		, SCHEMA = 337 
		, SCROLL = 338 
		, SEARCH = 339 
		, SECOND = 340 
		, SECURITY = 341 
		, SELECT = 342 
		, SEMI = 343 
		, SEQUENCE = 344 
		, SEQUENCES = 345 
		, SERIALIZABLE = 346 
		, SERVER = 347 
		, SESSION = 348 
		, SESSION_USER = 349 
		, SET = 350 
		, SETOF = 351 
		, SET_VAR = 352 
		, SHARE = 353 
		, SHIFT_LEFT = 354 
		, SHIFT_RIGHT = 355 
		, SHOW = 356 
		, SIMILAR = 357 
		, SIMPLE = 358 
		, SMALLINT = 359 
		, SOME = 360 
		, SPACE = 361 
		, STABLE = 362 
		, STANDALONE = 363 
		, START = 364 
		, STATEMENT = 365 
		, STATISTICS = 366 
		, STDIN = 367 
		, STDOUT = 368 
		, STORAGE = 369 
		, STRICT_KW = 370 
		, STRIP = 371 
		, SUBSTRING = 372 
		, SUPERUSER = 373 
		, SYMMETRIC = 374 
		, SYSID = 375 
		, SYSTEM = 376 
		, TABLE = 377 
		, TABLES = 378 
		, TABLESPACE = 379 
		, TEMP = 380 
		, TEMPLATE = 381 
		, TEMPORARY = 382 
		, TEXT = 383 
		, THEN = 384 
		, TIME = 385 
		, TIMESTAMP = 386 
		, TO = 387 
		, TOKEN_FAILURE = 388 
		, TRAILING = 389 
		, TRANSACTION = 390 
		, TREAT = 391 
		, TRIGGER = 392 
		, TRIM = 393 
		, TRUE_KW = 394 
		, TRUNCATE = 395 
		, TRUSTED = 396 
		, TYPE = 397 
		, UNBOUNDED = 398 
		, UNCOMMITTED = 399 
		, UNENCRYPTED = 400 
		, UNION = 401 
		, UNIQUE = 402 
		, UNKNOWN = 403 
		, UNLISTEN = 404 
		, UNSIGNED_INTEGER = 405 
		, UNTIL = 406 
		, UPDATE = 407 
		, USER = 408 
		, USING = 409 
		, VACUUM = 410 
		, VALID = 411 
		, VALIDATOR = 412 
		, VALUE = 413 
		, VALUES = 414 
		, VARCHAR = 415 
		, VARIADIC = 416 
		, VARYING = 417 
		, VERBOSE = 418 
		, VERSION = 419 
		, VERTBAR = 420 
		, VIEW = 421 
		, VOLATILE = 422 
		, WHEN = 423 
		, WHERE = 424 
		, WHITESPACE = 425 
		, WINDOW = 426 
		, WITH = 427 
		, WITHOUT = 428 
		, WORK = 429 
		, WRAPPER = 430 
		, WRITE = 431 
		, XML = 432 
		, XMLATTRIBUTES = 433 
		, XMLCONCAT = 434 
		, XMLELEMENT = 435 
		, XMLFOREST = 436 
		, XMLPARSE = 437 
		, XMLPI = 438 
		, XMLROOT = 439 
		, XMLSERIALIZE = 440 
		, YEAR = 441 
		, YES = 442 
		, ZONE = 443 
	};
       static const ANTLR_UINT8* getTokenName(ANTLR_UINT32 index);

protected:
	static ANTLR_UINT8* TokenNames[];

};

/** Context tracking structure for PostgreSQLGuiLexer
 */
class PostgreSQLGuiLexer : public PostgreSQLGuiLexerImplTraits::BaseLexerType
    , public PostgreSQLGuiLexerTokens
{
public:
	typedef PostgreSQLGuiLexerImplTraits ImplTraits;
	typedef PostgreSQLGuiLexer ComponentType;
	typedef ComponentType::StreamType StreamType;
	typedef PostgreSQLGuiLexerImplTraits::BaseLexerType BaseType;
	typedef ImplTraits::RecognizerSharedStateType<StreamType> RecognizerSharedStateType;
	typedef StreamType InputType;
	static const bool IsFiltered = false;


private:	
public:
    PostgreSQLGuiLexer(InputType* instream);
    PostgreSQLGuiLexer(InputType* instream, RecognizerSharedStateType* state);

    void init(InputType* instream  );
    static ANTLR_UINT8** getTokenNames();


      void advanceInput();


    
    void  mKEYWORD( );
    void  mABORT( );
    void  mABSOLUTE_KW( );
    void  mACCESS( );
    void  mACTION( );
    void  mADD( );
    void  mADMIN( );
    void  mAFTER( );
    void  mAGGREGATE( );
    void  mALL( );
    void  mALSO( );
    void  mALTER( );
    void  mALWAYS( );
    void  mANALYSE( );
    void  mANALYZE( );
    void  mAND( );
    void  mANY( );
    void  mARRAY( );
    void  mAS( );
    void  mASC( );
    void  mASSERTION( );
    void  mASSIGNMENT( );
    void  mASYMMETRIC( );
    void  mAT( );
    void  mAUTHORIZATION( );
    void  mBACKWARD( );
    void  mBEFORE( );
    void  mBEGIN( );
    void  mBETWEEN( );
    void  mBIGINT( );
    void  mBINARY( );
    void  mBIT( );
    void  mBOOLEAN( );
    void  mBOTH( );
    void  mBY( );
    void  mCACHE( );
    void  mCALLED( );
    void  mCASCADE( );
    void  mCASCADED( );
    void  mCASE( );
    void  mCAST( );
    void  mCATALOG( );
    void  mCHAIN( );
    void  mCHAR( );
    void  mCHARACTER( );
    void  mCHARACTERISTICS( );
    void  mCHECK( );
    void  mCHECKPOINT( );
    void  mCLASS( );
    void  mCLOSE( );
    void  mCLUSTER( );
    void  mCOALESCE( );
    void  mCOLLATE( );
    void  mCOLUMN( );
    void  mCOMMENT( );
    void  mCOMMENTS( );
    void  mCOMMIT( );
    void  mCOMMITTED( );
    void  mCONCURRENTLY( );
    void  mCONFIGURATION( );
    void  mCONNECTION( );
    void  mCONSTRAINT( );
    void  mCONSTRAINTS( );
    void  mCONTENT( );
    void  mCONTINUE( );
    void  mCONVERSION( );
    void  mCOPY( );
    void  mCOST( );
    void  mCREATE( );
    void  mCREATEDB( );
    void  mCREATEROLE( );
    void  mCREATEUSER( );
    void  mCROSS( );
    void  mCSV( );
    void  mCURRENT( );
    void  mCURRENT_CATALOG( );
    void  mCURRENT_DATE( );
    void  mCURRENT_ROLE( );
    void  mCURRENT_SCHEMA( );
    void  mCURRENT_TIME( );
    void  mCURRENT_TIMESTAMP( );
    void  mCURRENT_USER( );
    void  mCURSOR( );
    void  mCYCLE( );
    void  mDATA( );
    void  mDATABASE( );
    void  mDAY( );
    void  mDEALLOCATE( );
    void  mDEC( );
    void  mDECIMAL( );
    void  mDECLARE( );
    void  mDEFAULT( );
    void  mDEFAULTS( );
    void  mDEFERRABLE( );
    void  mDEFERRED( );
    void  mDEFINER( );
    void  mDELETE_KW( );
    void  mDELIMITER( );
    void  mDELIMITERS( );
    void  mDESC( );
    void  mDICTIONARY( );
    void  mDISABLE( );
    void  mDISCARD( );
    void  mDISTINCT( );
    void  mDO( );
    void  mDOCUMENT( );
    void  mDOMAIN_KW( );
    void  mDOUBLE( );
    void  mDROP( );
    void  mEACH( );
    void  mELSE( );
    void  mENABLE( );
    void  mENCODING( );
    void  mENCRYPTED( );
    void  mEND( );
    void  mENUM( );
    void  mESCAPE( );
    void  mEXCEPT( );
    void  mEXCLUDE( );
    void  mEXCLUDING( );
    void  mEXCLUSIVE( );
    void  mEXECUTE( );
    void  mEXISTS( );
    void  mEXPLAIN( );
    void  mEXTERNAL( );
    void  mEXTRACT( );
    void  mFALSE_KW( );
    void  mFAMILY( );
    void  mFETCH( );
    void  mFIRST( );
    void  mFLOAT( );
    void  mFOLLOWING( );
    void  mFOR( );
    void  mFORCE( );
    void  mFOREIGN( );
    void  mFORWARD( );
    void  mFREEZE( );
    void  mFROM( );
    void  mFULL( );
    void  mFUNCTION( );
    void  mFUNCTIONS( );
    void  mGLOBAL( );
    void  mGRANT( );
    void  mGRANTED( );
    void  mGREATEST( );
    void  mGROUP( );
    void  mHANDLER( );
    void  mHAVING( );
    void  mHEADER( );
    void  mHOLD( );
    void  mHOUR( );
    void  mIDENTITY( );
    void  mIF( );
    void  mILIKE( );
    void  mIMMEDIATE( );
    void  mIMMUTABLE( );
    void  mIMPLICIT( );
    void  mIN_KW( );
    void  mINCLUDING_KW( );
    void  mINCREMENT( );
    void  mINDEX( );
    void  mINDEXES( );
    void  mINHERIT( );
    void  mINHERITS( );
    void  mINITIALLY( );
    void  mINLINE( );
    void  mINNER( );
    void  mINOUT( );
    void  mINPUT( );
    void  mINSENSITIVE( );
    void  mINSERT( );
    void  mINSTEAD( );
    void  mINT( );
    void  mINTEGER( );
    void  mINTERSECT( );
    void  mINTERVAL( );
    void  mINTO( );
    void  mINVOKER( );
    void  mIS( );
    void  mISNULL( );
    void  mISOLATION( );
    void  mJOIN( );
    void  mKEY( );
    void  mLANGUAGE( );
    void  mLARGE( );
    void  mLAST( );
    void  mLC_COLLATE_KW( );
    void  mLC_CTYPE_KW( );
    void  mLEADING( );
    void  mLEAST( );
    void  mLEFT( );
    void  mLEVEL( );
    void  mLIKE( );
    void  mLIMIT( );
    void  mLISTEN( );
    void  mLOAD( );
    void  mLOCAL( );
    void  mLOCALTIME( );
    void  mLOCALTIMESTAMP( );
    void  mLOCATION( );
    void  mLOCK( );
    void  mLOGIN( );
    void  mMAPPING( );
    void  mMATCH( );
    void  mMAXVALUE( );
    void  mMINUTE( );
    void  mMINVALUE( );
    void  mMODE( );
    void  mMONTH( );
    void  mMOVE( );
    void  mNAME( );
    void  mNAMES( );
    void  mNATIONAL( );
    void  mNATURAL( );
    void  mNCHAR( );
    void  mNEXT( );
    void  mNO( );
    void  mNOCREATEDB( );
    void  mNOCREATEROLE( );
    void  mNOCREATEUSER( );
    void  mNOINHERIT( );
    void  mNOLOGIN( );
    void  mNONE( );
    void  mNOSUPERUSER( );
    void  mNOT( );
    void  mNOTHING( );
    void  mNOTIFY( );
    void  mNOTNULL( );
    void  mNOWAIT( );
    void  mNULL_KW( );
    void  mNULLIF( );
    void  mNULLS( );
    void  mNUMERIC( );
    void  mOBJECT( );
    void  mOF( );
    void  mOFF( );
    void  mOFFSET( );
    void  mOIDS( );
    void  mON( );
    void  mONLY( );
    void  mOPERATOR( );
    void  mOPTION( );
    void  mOPTIONS( );
    void  mOR( );
    void  mORDER( );
    void  mOUT_KW( );
    void  mOUTER( );
    void  mOVER( );
    void  mOVERLAPS( );
    void  mOVERLAY( );
    void  mOWNED( );
    void  mOWNER( );
    void  mPARSER( );
    void  mPARTIAL( );
    void  mPARTITION( );
    void  mPASSWORD( );
    void  mPLACING( );
    void  mPLANS( );
    void  mPOSITION( );
    void  mPRECEDING( );
    void  mPRECISION( );
    void  mPRESERVE( );
    void  mPREPARE( );
    void  mPREPARED( );
    void  mPRIMARY( );
    void  mPRIOR( );
    void  mPRIVILEGES( );
    void  mPROCEDURAL( );
    void  mPROCEDURE( );
    void  mQUOTE( );
    void  mRANGE( );
    void  mREAD( );
    void  mREAL( );
    void  mREASSIGN( );
    void  mRECHECK( );
    void  mRECURSIVE( );
    void  mREFERENCES( );
    void  mREINDEX( );
    void  mRELATIVE_KW( );
    void  mRELEASE( );
    void  mRENAME( );
    void  mREPEATABLE( );
    void  mREPLACE( );
    void  mREPLICA( );
    void  mRESET( );
    void  mRESTART( );
    void  mRESTRICT( );
    void  mRETURNING( );
    void  mRETURNS( );
    void  mREVOKE( );
    void  mRIGHT( );
    void  mROLE( );
    void  mROLLBACK( );
    void  mROW( );
    void  mROWS( );
    void  mRULE( );
    void  mSAVEPOINT( );
    void  mSCHEMA( );
    void  mSCROLL( );
    void  mSEARCH( );
    void  mSECOND( );
    void  mSECURITY( );
    void  mSELECT( );
    void  mSEQUENCE( );
    void  mSEQUENCES( );
    void  mSERIALIZABLE( );
    void  mSERVER( );
    void  mSESSION( );
    void  mSESSION_USER( );
    void  mSET( );
    void  mSETOF( );
    void  mSHARE( );
    void  mSHOW( );
    void  mSIMILAR( );
    void  mSIMPLE( );
    void  mSMALLINT( );
    void  mSOME( );
    void  mSTABLE( );
    void  mSTANDALONE( );
    void  mSTART( );
    void  mSTATEMENT( );
    void  mSTATISTICS( );
    void  mSTDIN( );
    void  mSTDOUT( );
    void  mSTORAGE( );
    void  mSTRICT_KW( );
    void  mSTRIP( );
    void  mSUBSTRING( );
    void  mSUPERUSER( );
    void  mSYMMETRIC( );
    void  mSYSID( );
    void  mSYSTEM( );
    void  mTABLE( );
    void  mTABLES( );
    void  mTABLESPACE( );
    void  mTEMP( );
    void  mTEMPLATE( );
    void  mTEMPORARY( );
    void  mTEXT( );
    void  mTHEN( );
    void  mTIME( );
    void  mTIMESTAMP( );
    void  mTO( );
    void  mTRAILING( );
    void  mTRANSACTION( );
    void  mTREAT( );
    void  mTRIGGER( );
    void  mTRIM( );
    void  mTRUE_KW( );
    void  mTRUNCATE( );
    void  mTRUSTED( );
    void  mTYPE( );
    void  mUNBOUNDED( );
    void  mUNCOMMITTED( );
    void  mUNENCRYPTED( );
    void  mUNION( );
    void  mUNIQUE( );
    void  mUNKNOWN( );
    void  mUNLISTEN( );
    void  mUNTIL( );
    void  mUPDATE( );
    void  mUSER( );
    void  mUSING( );
    void  mVACUUM( );
    void  mVALID( );
    void  mVALIDATOR( );
    void  mVALUE( );
    void  mVALUES( );
    void  mVARCHAR( );
    void  mVARIADIC( );
    void  mVARYING( );
    void  mVERBOSE( );
    void  mVERSION( );
    void  mVIEW( );
    void  mVOLATILE( );
    void  mWHEN( );
    void  mWHERE( );
    void  mWHITESPACE( );
    void  mWINDOW( );
    void  mWITH( );
    void  mWITHOUT( );
    void  mWORK( );
    void  mWRAPPER( );
    void  mWRITE( );
    void  mXML( );
    void  mXMLATTRIBUTES( );
    void  mXMLCONCAT( );
    void  mXMLELEMENT( );
    void  mXMLFOREST( );
    void  mXMLPARSE( );
    void  mXMLPI( );
    void  mXMLROOT( );
    void  mXMLSERIALIZE( );
    void  mYEAR( );
    void  mYES( );
    void  mZONE( );
    void  mDIVIDE( );
    void  mMOD_SYM( );
    void  mOR_SYM( );
    void  mAND_SYM( );
    void  mARROW( );
    void  mEQ_SYM( );
    void  mNOT_EQ( );
    void  mLET( );
    void  mGET( );
    void  mSET_VAR( );
    void  mSHIFT_LEFT( );
    void  mSHIFT_RIGHT( );
    void  mALL_FIELDS( );
    void  mSEMI( );
    void  mDOT( );
    void  mCOMMA( );
    void  mASTERISK( );
    void  mRPAREN( );
    void  mLPAREN( );
    void  mRBRACK( );
    void  mLBRACK( );
    void  mPLUS( );
    void  mMINUS( );
    void  mNEGATION( );
    void  mVERTBAR( );
    void  mBITAND( );
    void  mPOWER_OP( );
    void  mGTH( );
    void  mLTH( );
    void  mCOLON( );
    void  mUNSIGNED_INTEGER( );
    void  mNUMBER_LIT( );
    void  mREGULAR_ID( );
    void  mCHARACTER_LITERAL( );
    void  mDELIMITED_ID( );
    void  mOPERATOR_SYM( );
    void  mNEWLINE( );
    void  mCOMMENT_SL( );
    void  mCOMMENT_ML( );
    void  mSPACE( );
    void  mLINEEND( );
    void  mTOKEN_FAILURE( );
    void  mTokens( );
    const char *    getGrammarFileName();
    void            reset();
    ~PostgreSQLGuiLexer();

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//

/* End of token definitions for PostgreSQLGuiLexer
 * =============================================================================
 */

}

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
