/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -  From the grammar source file : OracleDML.g
 *     -                            On : 2018-07-27 18:52:49
 *     -                for the parser : OracleDMLParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include "antlr3compilerwarning.hpp"
#include "OracleDML.hpp"

#include <memory>

/* ----------------------------------------- */

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

namespace  Antlr3BackendImpl  {
using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8* OracleDMLTokenNames[754+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "ADD_VK", //4
        (ANTLR_UINT8*) "AFTER_VK", //5
        (ANTLR_UINT8*) "AGENT_VK", //6
        (ANTLR_UINT8*) "AGGREGATE_VK", //7
        (ANTLR_UINT8*) "ALIAS", //8
        (ANTLR_UINT8*) "AMPERSAND", //9
        (ANTLR_UINT8*) "ANALYZE_VK", //10
        (ANTLR_UINT8*) "ANY_ELEMENT", //11
        (ANTLR_UINT8*) "ANY_MODE", //12
        (ANTLR_UINT8*) "APPROXIMATE_NUM_LIT", //13
        (ANTLR_UINT8*) "ARGUMENT", //14
        (ANTLR_UINT8*) "ARGUMENTS", //15
        (ANTLR_UINT8*) "ASSIGN", //16
        (ANTLR_UINT8*) "ASSIGN_OP", //17
        (ANTLR_UINT8*) "ASSOCIATE_VK", //18
        (ANTLR_UINT8*) "ASTERISK", //19
        (ANTLR_UINT8*) "ATTRIBUTE_NAME", //20
        (ANTLR_UINT8*) "AT_SIGN", //21
        (ANTLR_UINT8*) "AT_VK", //22
        (ANTLR_UINT8*) "AUDIT_VK", //23
        (ANTLR_UINT8*) "AUTHID_VK", //24
        (ANTLR_UINT8*) "AUTOMATIC_VK", //25
        (ANTLR_UINT8*) "AUTONOMOUS_TRANSACTION_VK", //26
        (ANTLR_UINT8*) "AUTO_VK", //27
        (ANTLR_UINT8*) "BATCH_VK", //28
        (ANTLR_UINT8*) "BEFORE_VK", //29
        (ANTLR_UINT8*) "BFILE_VK", //30
        (ANTLR_UINT8*) "BINARY_DOUBLE_VK", //31
        (ANTLR_UINT8*) "BINARY_FLOAT_VK", //32
        (ANTLR_UINT8*) "BINARY_INTEGER_VK", //33
        (ANTLR_UINT8*) "BINDVAR", //34
        (ANTLR_UINT8*) "BIT_STRING_LIT", //35
        (ANTLR_UINT8*) "BIT_VK", //36
        (ANTLR_UINT8*) "BLOB_VK", //37
        (ANTLR_UINT8*) "BLOCK_VK", //38
        (ANTLR_UINT8*) "BODY_VK", //39
        (ANTLR_UINT8*) "BOOLEAN_VK", //40
        (ANTLR_UINT8*) "BOTH_VK", //41
        (ANTLR_UINT8*) "BREADTH_VK", //42
        (ANTLR_UINT8*) "BULK_VK", //43
        (ANTLR_UINT8*) "BYTE_VK", //44
        (ANTLR_UINT8*) "CACHE_VK", //45
        (ANTLR_UINT8*) "CALL_VK", //46
        (ANTLR_UINT8*) "CANONICAL_VK", //47
        (ANTLR_UINT8*) "CARRET_OPERATOR_PART", //48
        (ANTLR_UINT8*) "CASCADE_VK", //49
        (ANTLR_UINT8*) "CASCATED_ELEMENT", //50
        (ANTLR_UINT8*) "CAST_VK", //51
        (ANTLR_UINT8*) "CHARACTER_VK", //52
        (ANTLR_UINT8*) "CHAR_CS_VK", //53
        (ANTLR_UINT8*) "CHAR_SET_NAME", //54
        (ANTLR_UINT8*) "CHAR_STRING", //55
        (ANTLR_UINT8*) "CHAR_STRING_PERL", //56
        (ANTLR_UINT8*) "CHAR_VK", //57
        (ANTLR_UINT8*) "CHR_VK", //58
        (ANTLR_UINT8*) "CLOB_VK", //59
        (ANTLR_UINT8*) "CLOSE_VK", //60
        (ANTLR_UINT8*) "CLUSTER_VK", //61
        (ANTLR_UINT8*) "COLLECTION_MODE", //62
        (ANTLR_UINT8*) "COLLECTION_NAME", //63
        (ANTLR_UINT8*) "COLLECT_VK", //64
        (ANTLR_UINT8*) "COLON", //65
        (ANTLR_UINT8*) "COLUMNS", //66
        (ANTLR_UINT8*) "COLUMN_NAME", //67
        (ANTLR_UINT8*) "COMMA", //68
        (ANTLR_UINT8*) "COMMENT", //69
        (ANTLR_UINT8*) "COMMENT_VK", //70
        (ANTLR_UINT8*) "COMMITTED_VK", //71
        (ANTLR_UINT8*) "COMMIT_VK", //72
        (ANTLR_UINT8*) "COMPATIBILITY_VK", //73
        (ANTLR_UINT8*) "COMPILE_VK", //74
        (ANTLR_UINT8*) "COMPOUND_VK", //75
        (ANTLR_UINT8*) "CONCATENATION_OP", //76
        (ANTLR_UINT8*) "CONDITIONAL_INSERT", //77
        (ANTLR_UINT8*) "CONSTANT_VK", //78
        (ANTLR_UINT8*) "CONSTRAINT_NAME", //79
        (ANTLR_UINT8*) "CONSTRUCTOR_VK", //80
        (ANTLR_UINT8*) "CONTENT_VK", //81
        (ANTLR_UINT8*) "CONTEXT_VK", //82
        (ANTLR_UINT8*) "CONTINUE_VK", //83
        (ANTLR_UINT8*) "CONVERT_VK", //84
        (ANTLR_UINT8*) "CORRUPT_XID_ALL_VK", //85
        (ANTLR_UINT8*) "CORRUPT_XID_VK", //86
        (ANTLR_UINT8*) "COST_CLASS_NAME", //87
        (ANTLR_UINT8*) "COST_VK", //88
        (ANTLR_UINT8*) "COUNT_VK", //89
        (ANTLR_UINT8*) "CROSS_VK", //90
        (ANTLR_UINT8*) "CUBE_VK", //91
        (ANTLR_UINT8*) "CURRENT_USER_VK", //92
        (ANTLR_UINT8*) "CURRENT_VK", //93
        (ANTLR_UINT8*) "CURSOR_NAME", //94
        (ANTLR_UINT8*) "CUSTOMDATUM_VK", //95
        (ANTLR_UINT8*) "CUSTOM_TYPE", //96
        (ANTLR_UINT8*) "CYCLE_VK", //97
        (ANTLR_UINT8*) "C_VK", //98
        (ANTLR_UINT8*) "DATABASE_VK", //99
        (ANTLR_UINT8*) "DATETIME_OP", //100
        (ANTLR_UINT8*) "DAY_VK", //101
        (ANTLR_UINT8*) "DBTIMEZONE_VK", //102
        (ANTLR_UINT8*) "DB_ROLE_CHANGE_VK", //103
        (ANTLR_UINT8*) "DDL_VK", //104
        (ANTLR_UINT8*) "DEBUG_VK", //105
        (ANTLR_UINT8*) "DECIMAL_VK", //106
        (ANTLR_UINT8*) "DECOMPOSE_VK", //107
        (ANTLR_UINT8*) "DECREMENT_VK", //108
        (ANTLR_UINT8*) "DEC_VK", //109
        (ANTLR_UINT8*) "DEFAULTS_VK", //110
        (ANTLR_UINT8*) "DEFERRED_VK", //111
        (ANTLR_UINT8*) "DEFINER_VK", //112
        (ANTLR_UINT8*) "DELIMITED_ID", //113
        (ANTLR_UINT8*) "DENSE_RANK_VK", //114
        (ANTLR_UINT8*) "DEPTH_VK", //115
        (ANTLR_UINT8*) "DETERMINISTIC_VK", //116
        (ANTLR_UINT8*) "DIMENSION_VK", //117
        (ANTLR_UINT8*) "DIRECT_MODE", //118
        (ANTLR_UINT8*) "DISABLE_VK", //119
        (ANTLR_UINT8*) "DISASSOCIATE_VK", //120
        (ANTLR_UINT8*) "DOCUMENT_VK", //121
        (ANTLR_UINT8*) "DOT_ASTERISK", //122
        (ANTLR_UINT8*) "DOUBLE_ASTERISK", //123
        (ANTLR_UINT8*) "DOUBLE_PERIOD", //124
        (ANTLR_UINT8*) "DOUBLE_VK", //125
        (ANTLR_UINT8*) "DSINTERVAL_UNCONSTRAINED_VK", //126
        (ANTLR_UINT8*) "ELEMENT", //127
        (ANTLR_UINT8*) "ELEMENTS_MODE", //128
        (ANTLR_UINT8*) "ENABLE_VK", //129
        (ANTLR_UINT8*) "ENCODING_VK", //130
        (ANTLR_UINT8*) "ENTITYESCAPING_VK", //131
        (ANTLR_UINT8*) "EQUALS_OP", //132
        (ANTLR_UINT8*) "EVALNAME_VK", //133
        (ANTLR_UINT8*) "EXACT_NUM_LIT", //134
        (ANTLR_UINT8*) "EXCEPTIONS_VK", //135
        (ANTLR_UINT8*) "EXCEPTION_INIT_VK", //136
        (ANTLR_UINT8*) "EXCEPTION_NAME", //137
        (ANTLR_UINT8*) "EXCLAMATION_OPERATOR_PART", //138
        (ANTLR_UINT8*) "EXCLUDE_VK", //139
        (ANTLR_UINT8*) "EXECUTE_VK", //140
        (ANTLR_UINT8*) "EXIT_VK", //141
        (ANTLR_UINT8*) "EXPLAIN_STATEMENT", //142
        (ANTLR_UINT8*) "EXPR", //143
        (ANTLR_UINT8*) "EXPR_LIST", //144
        (ANTLR_UINT8*) "EXTERNAL_VK", //145
        (ANTLR_UINT8*) "EXTRACT_VK", //146
        (ANTLR_UINT8*) "FACTORING", //147
        (ANTLR_UINT8*) "FINAL_VK", //148
        (ANTLR_UINT8*) "FIRST_VALUE_VK", //149
        (ANTLR_UINT8*) "FIRST_VK", //150
        (ANTLR_UINT8*) "FLOAT_VK", //151
        (ANTLR_UINT8*) "FOLLOWING_VK", //152
        (ANTLR_UINT8*) "FOLLOWS_VK", //153
        (ANTLR_UINT8*) "FORALL_VK", //154
        (ANTLR_UINT8*) "FORCE_VK", //155
        (ANTLR_UINT8*) "FOR_MULTI_COLUMN", //156
        (ANTLR_UINT8*) "FOR_NOTATION", //157
        (ANTLR_UINT8*) "FOR_SINGLE_COLUMN", //158
        (ANTLR_UINT8*) "FULL_VK", //159
        (ANTLR_UINT8*) "FUNCTION_ENABLING_OVER", //160
        (ANTLR_UINT8*) "FUNCTION_ENABLING_USING", //161
        (ANTLR_UINT8*) "FUNCTION_ENABLING_WITHIN_OR_OVER", //162
        (ANTLR_UINT8*) "FUNCTION_NAME", //163
        (ANTLR_UINT8*) "GREATER_THAN_OP", //164
        (ANTLR_UINT8*) "GREATER_THAN_OR_EQUALS_OP", //165
        (ANTLR_UINT8*) "GROUPING_VK", //166
        (ANTLR_UINT8*) "GROUPIN_SET", //167
        (ANTLR_UINT8*) "GROUP_BY_CLAUSE", //168
        (ANTLR_UINT8*) "GROUP_BY_ELEMENT", //169
        (ANTLR_UINT8*) "HASH_VK", //170
        (ANTLR_UINT8*) "HEX_STRING_LIT", //171
        (ANTLR_UINT8*) "HIDE_VK", //172
        (ANTLR_UINT8*) "HIERARCHICAL", //173
        (ANTLR_UINT8*) "HOSTED_VARIABLE", //174
        (ANTLR_UINT8*) "HOSTED_VARIABLE_NAME", //175
        (ANTLR_UINT8*) "HOSTED_VARIABLE_ROUTINE_CALL", //176
        (ANTLR_UINT8*) "HOUR_VK", //177
        (ANTLR_UINT8*) "ID", //178
        (ANTLR_UINT8*) "IGNORE_VK", //179
        (ANTLR_UINT8*) "IMMEDIATE_VK", //180
        (ANTLR_UINT8*) "IMPLEMENTATION_TYPE_NAME", //181
        (ANTLR_UINT8*) "INCLUDE_VK", //182
        (ANTLR_UINT8*) "INCLUDING_VK", //183
        (ANTLR_UINT8*) "INCREMENT_VK", //184
        (ANTLR_UINT8*) "INDENT_VK", //185
        (ANTLR_UINT8*) "INDEX_NAME", //186
        (ANTLR_UINT8*) "INLINE_VK", //187
        (ANTLR_UINT8*) "INNER_VK", //188
        (ANTLR_UINT8*) "INOUT_VK", //189
        (ANTLR_UINT8*) "INSTANTIABLE_VK", //190
        (ANTLR_UINT8*) "INSTEAD_VK", //191
        (ANTLR_UINT8*) "INTEGER_VK", //192
        (ANTLR_UINT8*) "INTERVAL_DATATYPE", //193
        (ANTLR_UINT8*) "INTRODUCER", //194
        (ANTLR_UINT8*) "INT_VK", //195
        (ANTLR_UINT8*) "INVALIDATE_VK", //196
        (ANTLR_UINT8*) "ISOLATION_VK", //197
        (ANTLR_UINT8*) "IS_A_SET", //198
        (ANTLR_UINT8*) "IS_EMPTY", //199
        (ANTLR_UINT8*) "IS_INFINITE", //200
        (ANTLR_UINT8*) "IS_NAN", //201
        (ANTLR_UINT8*) "IS_NOT_A_SET", //202
        (ANTLR_UINT8*) "IS_NOT_EMPTY", //203
        (ANTLR_UINT8*) "IS_NOT_INFINITE", //204
        (ANTLR_UINT8*) "IS_NOT_NAN", //205
        (ANTLR_UINT8*) "IS_NOT_NULL", //206
        (ANTLR_UINT8*) "IS_NOT_OF_TYPE", //207
        (ANTLR_UINT8*) "IS_NOT_PRESENT", //208
        (ANTLR_UINT8*) "IS_NULL", //209
        (ANTLR_UINT8*) "IS_OF_TYPE", //210
        (ANTLR_UINT8*) "IS_PRESENT", //211
        (ANTLR_UINT8*) "ITERATE_VK", //212
        (ANTLR_UINT8*) "JAVA_VK", //213
        (ANTLR_UINT8*) "JOIN_DEF", //214
        (ANTLR_UINT8*) "KEEP_VK", //215
        (ANTLR_UINT8*) "LABEL_NAME", //216
        (ANTLR_UINT8*) "LANGUAGE_VK", //217
        (ANTLR_UINT8*) "LAST_VALUE_VK", //218
        (ANTLR_UINT8*) "LAST_VK", //219
        (ANTLR_UINT8*) "LEADING_VK", //220
        (ANTLR_UINT8*) "LEFT_BRACKET", //221
        (ANTLR_UINT8*) "LEFT_PAREN", //222
        (ANTLR_UINT8*) "LEFT_VK", //223
        (ANTLR_UINT8*) "LESS_THAN_OP", //224
        (ANTLR_UINT8*) "LESS_THAN_OR_EQUALS_OP", //225
        (ANTLR_UINT8*) "LIBRARY_VK", //226
        (ANTLR_UINT8*) "LIKE2_VK", //227
        (ANTLR_UINT8*) "LIKE4_VK", //228
        (ANTLR_UINT8*) "LIKEC_VK", //229
        (ANTLR_UINT8*) "LIMIT_VK", //230
        (ANTLR_UINT8*) "LINK_NAME", //231
        (ANTLR_UINT8*) "LOCAL_VK", //232
        (ANTLR_UINT8*) "LOCK_TABLE_ELEMENT", //233
        (ANTLR_UINT8*) "LOGIC_EXPR", //234
        (ANTLR_UINT8*) "LOGOFF_VK", //235
        (ANTLR_UINT8*) "LOGON_VK", //236
        (ANTLR_UINT8*) "LOG_VK", //237
        (ANTLR_UINT8*) "LONG_VK", //238
        (ANTLR_UINT8*) "LOOP_VK", //239
        (ANTLR_UINT8*) "MAIN_MODEL", //240
        (ANTLR_UINT8*) "MAIN_MODEL_NAME", //241
        (ANTLR_UINT8*) "MAP_VK", //242
        (ANTLR_UINT8*) "MAXVALUE_VK", //243
        (ANTLR_UINT8*) "MEASURES_VK", //244
        (ANTLR_UINT8*) "MEMBER_VK", //245
        (ANTLR_UINT8*) "MERGE_INSERT", //246
        (ANTLR_UINT8*) "MERGE_UPDATE", //247
        (ANTLR_UINT8*) "MERGE_VK", //248
        (ANTLR_UINT8*) "MINUS_SIGN", //249
        (ANTLR_UINT8*) "MINUTE_VK", //250
        (ANTLR_UINT8*) "MINVALUE_VK", //251
        (ANTLR_UINT8*) "MLSLABEL_VK", //252
        (ANTLR_UINT8*) "MODEL_COLUMN", //253
        (ANTLR_UINT8*) "MODEL_COLUMNS", //254
        (ANTLR_UINT8*) "MODEL_EXPRESSION", //255
        (ANTLR_UINT8*) "MODEL_RULE", //256
        (ANTLR_UINT8*) "MODEL_RULES", //257
        (ANTLR_UINT8*) "MODIFY_VK", //258
        (ANTLR_UINT8*) "MONTH_VK", //259
        (ANTLR_UINT8*) "MULTI_TABLE_MODE", //260
        (ANTLR_UINT8*) "NAME_VK", //261
        (ANTLR_UINT8*) "NATIONAL_CHAR_STRING_LIT", //262
        (ANTLR_UINT8*) "NATIVE_DATATYPE", //263
        (ANTLR_UINT8*) "NATURALN_VK", //264
        (ANTLR_UINT8*) "NATURAL_VK", //265
        (ANTLR_UINT8*) "NAV_VK", //266
        (ANTLR_UINT8*) "NCHAR_CS_VK", //267
        (ANTLR_UINT8*) "NCHAR_VK", //268
        (ANTLR_UINT8*) "NCLOB_VK", //269
        (ANTLR_UINT8*) "NESTED_EXPR", //270
        (ANTLR_UINT8*) "NESTED_SUBQUERY", //271
        (ANTLR_UINT8*) "NESTED_VK", //272
        (ANTLR_UINT8*) "NEWLINE", //273
        (ANTLR_UINT8*) "NEW_VK", //274
        (ANTLR_UINT8*) "NOAUDIT_VK", //275
        (ANTLR_UINT8*) "NOCACHE_VK", //276
        (ANTLR_UINT8*) "NOCOPY_VK", //277
        (ANTLR_UINT8*) "NOCYCLE_VK", //278
        (ANTLR_UINT8*) "NOENTITYESCAPING_VK", //279
        (ANTLR_UINT8*) "NOMAXVALUE_VK", //280
        (ANTLR_UINT8*) "NOMINVALUE_VK", //281
        (ANTLR_UINT8*) "NOORDER_VK", //282
        (ANTLR_UINT8*) "NOSCHEMACHECK_VK", //283
        (ANTLR_UINT8*) "NOT_BETWEEN", //284
        (ANTLR_UINT8*) "NOT_EQUAL_OP", //285
        (ANTLR_UINT8*) "NOT_IN", //286
        (ANTLR_UINT8*) "NOT_LIKE", //287
        (ANTLR_UINT8*) "NO_VK", //288
        (ANTLR_UINT8*) "NULLS_VK", //289
        (ANTLR_UINT8*) "NUMBER_VK", //290
        (ANTLR_UINT8*) "NUMERIC_VK", //291
        (ANTLR_UINT8*) "NVARCHAR2_VK", //292
        (ANTLR_UINT8*) "OBJECT_VK", //293
        (ANTLR_UINT8*) "OFF_VK", //294
        (ANTLR_UINT8*) "OLD_VK", //295
        (ANTLR_UINT8*) "ONLY_VK", //296
        (ANTLR_UINT8*) "OPEN_VK", //297
        (ANTLR_UINT8*) "ORADATA_VK", //298
        (ANTLR_UINT8*) "ORDER_BY_ELEMENT", //299
        (ANTLR_UINT8*) "ORDER_BY_ELEMENTS", //300
        (ANTLR_UINT8*) "ORDINALITY_VK", //301
        (ANTLR_UINT8*) "OUT_VK", //302
        (ANTLR_UINT8*) "OVERRIDING_VK", //303
        (ANTLR_UINT8*) "OVER_VK", //304
        (ANTLR_UINT8*) "PACKAGE_NAME", //305
        (ANTLR_UINT8*) "PACKAGE_VK", //306
        (ANTLR_UINT8*) "PARALLEL_ENABLE_VK", //307
        (ANTLR_UINT8*) "PARAMETERS_VK", //308
        (ANTLR_UINT8*) "PARAMETER_NAME", //309
        (ANTLR_UINT8*) "PARENT_VK", //310
        (ANTLR_UINT8*) "PARTITION_VK", //311
        (ANTLR_UINT8*) "PASSING_VK", //312
        (ANTLR_UINT8*) "PERCENT", //313
        (ANTLR_UINT8*) "PERCENT_FOUND_VK", //314
        (ANTLR_UINT8*) "PERCENT_ISOPEN_VK", //315
        (ANTLR_UINT8*) "PERCENT_NOTFOUND_VK", //316
        (ANTLR_UINT8*) "PERCENT_ROWCOUNT_VK", //317
        (ANTLR_UINT8*) "PERCENT_ROWTYPE_VK", //318
        (ANTLR_UINT8*) "PERCENT_TYPE_VK", //319
        (ANTLR_UINT8*) "PERIOD", //320
        (ANTLR_UINT8*) "PIPELINED_VK", //321
        (ANTLR_UINT8*) "PIVOT_ALIAS", //322
        (ANTLR_UINT8*) "PIVOT_ELEMENT", //323
        (ANTLR_UINT8*) "PIVOT_IN_ELEMENT", //324
        (ANTLR_UINT8*) "PIVOT_VK", //325
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_CAST", //326
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", //327
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_ELSIF", //328
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_MODEL", //329
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_MULTISET", //330
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_PIVOT", //331
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_UNPIVOT", //332
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_USING", //333
        (ANTLR_UINT8*) "PLSQL_RESERVED_CLUSTERS", //334
        (ANTLR_UINT8*) "PLSQL_RESERVED_COLAUTH", //335
        (ANTLR_UINT8*) "PLSQL_RESERVED_COMPRESS", //336
        (ANTLR_UINT8*) "PLSQL_RESERVED_CRASH", //337
        (ANTLR_UINT8*) "PLSQL_RESERVED_EXCLUSIVE", //338
        (ANTLR_UINT8*) "PLSQL_RESERVED_IDENTIFIED", //339
        (ANTLR_UINT8*) "PLSQL_RESERVED_IF", //340
        (ANTLR_UINT8*) "PLSQL_RESERVED_INDEX", //341
        (ANTLR_UINT8*) "PLSQL_RESERVED_INDEXES", //342
        (ANTLR_UINT8*) "PLSQL_RESERVED_LOCK", //343
        (ANTLR_UINT8*) "PLSQL_RESERVED_MINUS", //344
        (ANTLR_UINT8*) "PLSQL_RESERVED_MODE", //345
        (ANTLR_UINT8*) "PLSQL_RESERVED_NOCOMPRESS", //346
        (ANTLR_UINT8*) "PLSQL_RESERVED_NOWAIT", //347
        (ANTLR_UINT8*) "PLSQL_RESERVED_RESOURCE", //348
        (ANTLR_UINT8*) "PLSQL_RESERVED_SHARE", //349
        (ANTLR_UINT8*) "PLSQL_RESERVED_START", //350
        (ANTLR_UINT8*) "PLSQL_RESERVED_TABAUTH", //351
        (ANTLR_UINT8*) "PLSQL_RESERVED_VIEWS", //352
        (ANTLR_UINT8*) "PLS_INTEGER_VK", //353
        (ANTLR_UINT8*) "PLUS_SIGN", //354
        (ANTLR_UINT8*) "POSITIVEN_VK", //355
        (ANTLR_UINT8*) "POSITIVE_VK", //356
        (ANTLR_UINT8*) "PRAGMA_VK", //357
        (ANTLR_UINT8*) "PRECEDING_VK", //358
        (ANTLR_UINT8*) "PRECISION", //359
        (ANTLR_UINT8*) "PRECISION_VK", //360
        (ANTLR_UINT8*) "PREDICTION_FUNCTION", //361
        (ANTLR_UINT8*) "PROCEDURE_NAME", //362
        (ANTLR_UINT8*) "PROMPT", //363
        (ANTLR_UINT8*) "QS_ANGLE", //364
        (ANTLR_UINT8*) "QS_BRACE", //365
        (ANTLR_UINT8*) "QS_BRACK", //366
        (ANTLR_UINT8*) "QS_OTHER", //367
        (ANTLR_UINT8*) "QS_OTHER_CH", //368
        (ANTLR_UINT8*) "QS_PAREN", //369
        (ANTLR_UINT8*) "QUERY_NAME", //370
        (ANTLR_UINT8*) "QUESTION_MARK", //371
        (ANTLR_UINT8*) "QUOTE", //372
        (ANTLR_UINT8*) "RAISE_VK", //373
        (ANTLR_UINT8*) "RANGE_VK", //374
        (ANTLR_UINT8*) "RAW_VK", //375
        (ANTLR_UINT8*) "READ_VK", //376
        (ANTLR_UINT8*) "REAL_VK", //377
        (ANTLR_UINT8*) "RECORD_NAME", //378
        (ANTLR_UINT8*) "REFERENCE_MODEL_NAME", //379
        (ANTLR_UINT8*) "REFERENCE_VK", //380
        (ANTLR_UINT8*) "REFERENCING_VK", //381
        (ANTLR_UINT8*) "REF_VK", //382
        (ANTLR_UINT8*) "REGULAR_ID", //383
        (ANTLR_UINT8*) "REJECT_VK", //384
        (ANTLR_UINT8*) "RELIES_ON_VK", //385
        (ANTLR_UINT8*) "RENAME_VK", //386
        (ANTLR_UINT8*) "REPLACE_VK", //387
        (ANTLR_UINT8*) "RESPECT_VK", //388
        (ANTLR_UINT8*) "RESTRICT_REFERENCES_VK", //389
        (ANTLR_UINT8*) "RESULT_CACHE_VK", //390
        (ANTLR_UINT8*) "RETURN_VK", //391
        (ANTLR_UINT8*) "REUSE_VK", //392
        (ANTLR_UINT8*) "REVERSE_VK", //393
        (ANTLR_UINT8*) "RIGHT_BRACKET", //394
        (ANTLR_UINT8*) "RIGHT_PAREN", //395
        (ANTLR_UINT8*) "RIGHT_VK", //396
        (ANTLR_UINT8*) "ROLLBACK_SEGMENT_NAME", //397
        (ANTLR_UINT8*) "ROLLBACK_VK", //398
        (ANTLR_UINT8*) "ROLLUP_VK", //399
        (ANTLR_UINT8*) "ROUTINE_CALL", //400
        (ANTLR_UINT8*) "ROUTINE_NAME", //401
        (ANTLR_UINT8*) "ROWID_VK", //402
        (ANTLR_UINT8*) "ROWS_VK", //403
        (ANTLR_UINT8*) "ROW_VK", //404
        (ANTLR_UINT8*) "RULES_VK", //405
        (ANTLR_UINT8*) "SAMPLE_VK", //406
        (ANTLR_UINT8*) "SAVEPOINT_NAME", //407
        (ANTLR_UINT8*) "SAVEPOINT_VK", //408
        (ANTLR_UINT8*) "SCHEMACHECK_VK", //409
        (ANTLR_UINT8*) "SCHEMA_NAME", //410
        (ANTLR_UINT8*) "SCHEMA_VK", //411
        (ANTLR_UINT8*) "SCN_VK", //412
        (ANTLR_UINT8*) "SEARCHED_CASE", //413
        (ANTLR_UINT8*) "SEARCH_VK", //414
        (ANTLR_UINT8*) "SECOND_VK", //415
        (ANTLR_UINT8*) "SEED_VK", //416
        (ANTLR_UINT8*) "SELECTED_TABLEVIEW", //417
        (ANTLR_UINT8*) "SELECT_ITEM", //418
        (ANTLR_UINT8*) "SELECT_LIST", //419
        (ANTLR_UINT8*) "SELECT_MODE", //420
        (ANTLR_UINT8*) "SELECT_STATEMENT", //421
        (ANTLR_UINT8*) "SELF_VK", //422
        (ANTLR_UINT8*) "SEMICOLON", //423
        (ANTLR_UINT8*) "SEPARATOR", //424
        (ANTLR_UINT8*) "SEQUENCE_NAME", //425
        (ANTLR_UINT8*) "SEQUENCE_VK", //426
        (ANTLR_UINT8*) "SEQUENTIAL_VK", //427
        (ANTLR_UINT8*) "SERIALIZABLE_VK", //428
        (ANTLR_UINT8*) "SERIALLY_REUSABLE_VK", //429
        (ANTLR_UINT8*) "SERVERERROR_VK", //430
        (ANTLR_UINT8*) "SESSIONTIMEZONE_VK", //431
        (ANTLR_UINT8*) "SET_VK", //432
        (ANTLR_UINT8*) "SHOW_VK", //433
        (ANTLR_UINT8*) "SHUTDOWN_VK", //434
        (ANTLR_UINT8*) "SIBLINGS_VK", //435
        (ANTLR_UINT8*) "SIGNTYPE_VK", //436
        (ANTLR_UINT8*) "SIMPLE_CASE", //437
        (ANTLR_UINT8*) "SIMPLE_INTEGER_VK", //438
        (ANTLR_UINT8*) "SIMPLE_LETTER", //439
        (ANTLR_UINT8*) "SINGLE_TABLE_MODE", //440
        (ANTLR_UINT8*) "SINGLE_VK", //441
        (ANTLR_UINT8*) "SKIP_VK", //442
        (ANTLR_UINT8*) "SMALLINT_VK", //443
        (ANTLR_UINT8*) "SOLIDUS", //444
        (ANTLR_UINT8*) "SOME_VK", //445
        (ANTLR_UINT8*) "SPACE", //446
        (ANTLR_UINT8*) "SPECIFICATION_VK", //447
        (ANTLR_UINT8*) "SQL92_RESERVED_ALL", //448
        (ANTLR_UINT8*) "SQL92_RESERVED_ALTER", //449
        (ANTLR_UINT8*) "SQL92_RESERVED_AND", //450
        (ANTLR_UINT8*) "SQL92_RESERVED_ANY", //451
        (ANTLR_UINT8*) "SQL92_RESERVED_AS", //452
        (ANTLR_UINT8*) "SQL92_RESERVED_ASC", //453
        (ANTLR_UINT8*) "SQL92_RESERVED_BEGIN", //454
        (ANTLR_UINT8*) "SQL92_RESERVED_BETWEEN", //455
        (ANTLR_UINT8*) "SQL92_RESERVED_BY", //456
        (ANTLR_UINT8*) "SQL92_RESERVED_CASE", //457
        (ANTLR_UINT8*) "SQL92_RESERVED_CHECK", //458
        (ANTLR_UINT8*) "SQL92_RESERVED_CONNECT", //459
        (ANTLR_UINT8*) "SQL92_RESERVED_CREATE", //460
        (ANTLR_UINT8*) "SQL92_RESERVED_CURRENT", //461
        (ANTLR_UINT8*) "SQL92_RESERVED_CURSOR", //462
        (ANTLR_UINT8*) "SQL92_RESERVED_DATE", //463
        (ANTLR_UINT8*) "SQL92_RESERVED_DECLARE", //464
        (ANTLR_UINT8*) "SQL92_RESERVED_DEFAULT", //465
        (ANTLR_UINT8*) "SQL92_RESERVED_DELETE", //466
        (ANTLR_UINT8*) "SQL92_RESERVED_DESC", //467
        (ANTLR_UINT8*) "SQL92_RESERVED_DISTINCT", //468
        (ANTLR_UINT8*) "SQL92_RESERVED_DROP", //469
        (ANTLR_UINT8*) "SQL92_RESERVED_ELSE", //470
        (ANTLR_UINT8*) "SQL92_RESERVED_END", //471
        (ANTLR_UINT8*) "SQL92_RESERVED_EXCEPTION", //472
        (ANTLR_UINT8*) "SQL92_RESERVED_EXISTS", //473
        (ANTLR_UINT8*) "SQL92_RESERVED_FALSE", //474
        (ANTLR_UINT8*) "SQL92_RESERVED_FETCH", //475
        (ANTLR_UINT8*) "SQL92_RESERVED_FOR", //476
        (ANTLR_UINT8*) "SQL92_RESERVED_FROM", //477
        (ANTLR_UINT8*) "SQL92_RESERVED_GOTO", //478
        (ANTLR_UINT8*) "SQL92_RESERVED_GRANT", //479
        (ANTLR_UINT8*) "SQL92_RESERVED_GROUP", //480
        (ANTLR_UINT8*) "SQL92_RESERVED_HAVING", //481
        (ANTLR_UINT8*) "SQL92_RESERVED_IN", //482
        (ANTLR_UINT8*) "SQL92_RESERVED_INSERT", //483
        (ANTLR_UINT8*) "SQL92_RESERVED_INTERSECT", //484
        (ANTLR_UINT8*) "SQL92_RESERVED_INTO", //485
        (ANTLR_UINT8*) "SQL92_RESERVED_IS", //486
        (ANTLR_UINT8*) "SQL92_RESERVED_LIKE", //487
        (ANTLR_UINT8*) "SQL92_RESERVED_NOT", //488
        (ANTLR_UINT8*) "SQL92_RESERVED_NULL", //489
        (ANTLR_UINT8*) "SQL92_RESERVED_OF", //490
        (ANTLR_UINT8*) "SQL92_RESERVED_ON", //491
        (ANTLR_UINT8*) "SQL92_RESERVED_OPTION", //492
        (ANTLR_UINT8*) "SQL92_RESERVED_OR", //493
        (ANTLR_UINT8*) "SQL92_RESERVED_ORDER", //494
        (ANTLR_UINT8*) "SQL92_RESERVED_OVERLAPS", //495
        (ANTLR_UINT8*) "SQL92_RESERVED_PRIOR", //496
        (ANTLR_UINT8*) "SQL92_RESERVED_PROCEDURE", //497
        (ANTLR_UINT8*) "SQL92_RESERVED_PUBLIC", //498
        (ANTLR_UINT8*) "SQL92_RESERVED_REVOKE", //499
        (ANTLR_UINT8*) "SQL92_RESERVED_SELECT", //500
        (ANTLR_UINT8*) "SQL92_RESERVED_SIZE", //501
        (ANTLR_UINT8*) "SQL92_RESERVED_TABLE", //502
        (ANTLR_UINT8*) "SQL92_RESERVED_THE", //503
        (ANTLR_UINT8*) "SQL92_RESERVED_THEN", //504
        (ANTLR_UINT8*) "SQL92_RESERVED_TO", //505
        (ANTLR_UINT8*) "SQL92_RESERVED_TRUE", //506
        (ANTLR_UINT8*) "SQL92_RESERVED_UNION", //507
        (ANTLR_UINT8*) "SQL92_RESERVED_UNIQUE", //508
        (ANTLR_UINT8*) "SQL92_RESERVED_UPDATE", //509
        (ANTLR_UINT8*) "SQL92_RESERVED_VALUES", //510
        (ANTLR_UINT8*) "SQL92_RESERVED_VIEW", //511
        (ANTLR_UINT8*) "SQL92_RESERVED_WHEN", //512
        (ANTLR_UINT8*) "SQL92_RESERVED_WHERE", //513
        (ANTLR_UINT8*) "SQL92_RESERVED_WITH", //514
        (ANTLR_UINT8*) "SQLDATA_VK", //515
        (ANTLR_UINT8*) "STANDALONE_VK", //516
        (ANTLR_UINT8*) "STANDARD_FUNCTION", //517
        (ANTLR_UINT8*) "STARTUP_VK", //518
        (ANTLR_UINT8*) "STATIC_RETURNING", //519
        (ANTLR_UINT8*) "STATIC_VK", //520
        (ANTLR_UINT8*) "STATISTICS_VK", //521
        (ANTLR_UINT8*) "STRING_VK", //522
        (ANTLR_UINT8*) "SUBMULTISET_VK", //523
        (ANTLR_UINT8*) "SUBPARTITION_VK", //524
        (ANTLR_UINT8*) "SUBQUERY", //525
        (ANTLR_UINT8*) "SUSPEND_VK", //526
        (ANTLR_UINT8*) "TABLEVIEW_NAME", //527
        (ANTLR_UINT8*) "TABLE_ELEMENT", //528
        (ANTLR_UINT8*) "TABLE_EXPRESSION", //529
        (ANTLR_UINT8*) "TABLE_REF", //530
        (ANTLR_UINT8*) "TABLE_REF_ELEMENT", //531
        (ANTLR_UINT8*) "TABLE_VAR_NAME", //532
        (ANTLR_UINT8*) "TILDE_OPERATOR_PART", //533
        (ANTLR_UINT8*) "TIMESTAMP_LTZ_UNCONSTRAINED_VK", //534
        (ANTLR_UINT8*) "TIMESTAMP_TZ_UNCONSTRAINED_VK", //535
        (ANTLR_UINT8*) "TIMESTAMP_UNCONSTRAINED_VK", //536
        (ANTLR_UINT8*) "TIMESTAMP_VK", //537
        (ANTLR_UINT8*) "TIMEZONE_ABBR_VK", //538
        (ANTLR_UINT8*) "TIMEZONE_HOUR_VK", //539
        (ANTLR_UINT8*) "TIMEZONE_MINUTE_VK", //540
        (ANTLR_UINT8*) "TIMEZONE_REGION_VK", //541
        (ANTLR_UINT8*) "TIME_VK", //542
        (ANTLR_UINT8*) "TRAILING_VK", //543
        (ANTLR_UINT8*) "TRANSLATE_VK", //544
        (ANTLR_UINT8*) "TREAT_VK", //545
        (ANTLR_UINT8*) "TRIGGER_NAME", //546
        (ANTLR_UINT8*) "TRIM_VK", //547
        (ANTLR_UINT8*) "TRUNCATE_VK", //548
        (ANTLR_UINT8*) "TYPE_NAME", //549
        (ANTLR_UINT8*) "TYPE_VK", //550
        (ANTLR_UINT8*) "T_BINDVAR_NAME", //551
        (ANTLR_UINT8*) "T_COLUMN_ALIAS", //552
        (ANTLR_UINT8*) "T_COLUMN_LIST", //553
        (ANTLR_UINT8*) "T_COLUMN_NAME", //554
        (ANTLR_UINT8*) "T_COND_AND", //555
        (ANTLR_UINT8*) "T_COND_AND_SEQ", //556
        (ANTLR_UINT8*) "T_COND_BETWEEN", //557
        (ANTLR_UINT8*) "T_COND_COMPARISON", //558
        (ANTLR_UINT8*) "T_COND_EQUALS_PATH", //559
        (ANTLR_UINT8*) "T_COND_EXISTS", //560
        (ANTLR_UINT8*) "T_COND_GROUP_COMPARISON", //561
        (ANTLR_UINT8*) "T_COND_IN", //562
        (ANTLR_UINT8*) "T_COND_IS", //563
        (ANTLR_UINT8*) "T_COND_IS_ANY", //564
        (ANTLR_UINT8*) "T_COND_IS_A_SET", //565
        (ANTLR_UINT8*) "T_COND_IS_EMPTY", //566
        (ANTLR_UINT8*) "T_COND_IS_OF_TYPE", //567
        (ANTLR_UINT8*) "T_COND_IS_PRESENT", //568
        (ANTLR_UINT8*) "T_COND_LIKE", //569
        (ANTLR_UINT8*) "T_COND_MEMEBER", //570
        (ANTLR_UINT8*) "T_COND_NOT", //571
        (ANTLR_UINT8*) "T_COND_OR", //572
        (ANTLR_UINT8*) "T_COND_OR_SEQ", //573
        (ANTLR_UINT8*) "T_COND_PAREN", //574
        (ANTLR_UINT8*) "T_COND_REGEXP_LIKE", //575
        (ANTLR_UINT8*) "T_COND_SUBMULTISET", //576
        (ANTLR_UINT8*) "T_COND_UNDER_PATH", //577
        (ANTLR_UINT8*) "T_DBLINK_NAME", //578
        (ANTLR_UINT8*) "T_DECL", //579
        (ANTLR_UINT8*) "T_FOR_UPDATE_CLAUSE", //580
        (ANTLR_UINT8*) "T_FROM", //581
        (ANTLR_UINT8*) "T_FUNCTION_NAME", //582
        (ANTLR_UINT8*) "T_GROUP_BY", //583
        (ANTLR_UINT8*) "T_HIERARCHICAL", //584
        (ANTLR_UINT8*) "T_IDENTIFIER", //585
        (ANTLR_UINT8*) "T_JOINING_CLAUSE", //586
        (ANTLR_UINT8*) "T_MODEL", //587
        (ANTLR_UINT8*) "T_OPERATOR_BINARY", //588
        (ANTLR_UINT8*) "T_OPERATOR_PART", //589
        (ANTLR_UINT8*) "T_OPERATOR_UNARY", //590
        (ANTLR_UINT8*) "T_ORDER_BY_CLAUSE", //591
        (ANTLR_UINT8*) "T_PACKAGE_NAME", //592
        (ANTLR_UINT8*) "T_RESERVED", //593
        (ANTLR_UINT8*) "T_SCHEMA_NAME", //594
        (ANTLR_UINT8*) "T_SELECT", //595
        (ANTLR_UINT8*) "T_SELECT_COLUMN", //596
        (ANTLR_UINT8*) "T_SUBQUERY", //597
        (ANTLR_UINT8*) "T_TABLE_ALIAS", //598
        (ANTLR_UINT8*) "T_TABLE_CAST", //599
        (ANTLR_UINT8*) "T_TABLE_NAME", //600
        (ANTLR_UINT8*) "T_TABLE_REF", //601
        (ANTLR_UINT8*) "T_UNION", //602
        (ANTLR_UINT8*) "T_UNKNOWN", //603
        (ANTLR_UINT8*) "T_USE", //604
        (ANTLR_UINT8*) "T_WHERE", //605
        (ANTLR_UINT8*) "T_WITH", //606
        (ANTLR_UINT8*) "UNARY_OPERATOR", //607
        (ANTLR_UINT8*) "UNBOUNDED_VK", //608
        (ANTLR_UINT8*) "UNDERSCORE", //609
        (ANTLR_UINT8*) "UNDER_VK", //610
        (ANTLR_UINT8*) "UNLIMITED_VK", //611
        (ANTLR_UINT8*) "UNPIVOT_IN_ELEMENT", //612
        (ANTLR_UINT8*) "UNPIVOT_VK", //613
        (ANTLR_UINT8*) "UNSIGNED_INTEGER", //614
        (ANTLR_UINT8*) "UNTIL_VK", //615
        (ANTLR_UINT8*) "UPDATED_VK", //616
        (ANTLR_UINT8*) "UPSERT_VK", //617
        (ANTLR_UINT8*) "UROWID_VK", //618
        (ANTLR_UINT8*) "VALIDATE_VK", //619
        (ANTLR_UINT8*) "VALUE_VK", //620
        (ANTLR_UINT8*) "VARCHAR2_VK", //621
        (ANTLR_UINT8*) "VARCHAR_VK", //622
        (ANTLR_UINT8*) "VARIABLE_NAME", //623
        (ANTLR_UINT8*) "VECTOR_EXPR", //624
        (ANTLR_UINT8*) "VERSIONS_VK", //625
        (ANTLR_UINT8*) "VERSION_VK", //626
        (ANTLR_UINT8*) "VERTICAL_BAR", //627
        (ANTLR_UINT8*) "WAIT_VK", //628
        (ANTLR_UINT8*) "WELLFORMED_VK", //629
        (ANTLR_UINT8*) "WITHIN_VK", //630
        (ANTLR_UINT8*) "WORK_VK", //631
        (ANTLR_UINT8*) "WRITE_VK", //632
        (ANTLR_UINT8*) "XMLAGG_VK", //633
        (ANTLR_UINT8*) "XMLATTRIBUTES_VK", //634
        (ANTLR_UINT8*) "XMLCAST_VK", //635
        (ANTLR_UINT8*) "XMLCOLATTVAL_VK", //636
        (ANTLR_UINT8*) "XMLELEMENT_VK", //637
        (ANTLR_UINT8*) "XMLEXISTS_VK", //638
        (ANTLR_UINT8*) "XMLFOREST_VK", //639
        (ANTLR_UINT8*) "XMLNAMESPACES_VK", //640
        (ANTLR_UINT8*) "XMLPARSE_VK", //641
        (ANTLR_UINT8*) "XMLPI_VK", //642
        (ANTLR_UINT8*) "XMLQUERY_VK", //643
        (ANTLR_UINT8*) "XMLROOT_VK", //644
        (ANTLR_UINT8*) "XMLSERIALIZE_VK", //645
        (ANTLR_UINT8*) "XMLTABLE_VK", //646
        (ANTLR_UINT8*) "XML_ALIAS", //647
        (ANTLR_UINT8*) "XML_COLUMN", //648
        (ANTLR_UINT8*) "XML_COLUMN_NAME", //649
        (ANTLR_UINT8*) "XML_ELEMENT", //650
        (ANTLR_UINT8*) "XML_VK", //651
        (ANTLR_UINT8*) "YEAR_VK", //652
        (ANTLR_UINT8*) "YES_VK", //653
        (ANTLR_UINT8*) "YMINTERVAL_UNCONSTRAINED_VK", //654
        (ANTLR_UINT8*) "ZV", //655
        (ANTLR_UINT8*) "CONJUNCTION", //666
        (ANTLR_UINT8*) "DISJUNCTION", //668
       };


//typedef CommonTreeAdaptor adaptor;
//TreeAdaptor adaptor = new CommonTreeAdaptor();

//void setTreeAdaptor(TreeAdaptor adaptor)
//{
//	this.adaptor = adaptor;
//	<grammar.directDelegates:{g|<g:delegateName()>.setTreeAdaptor(this.adaptor);}>
//}
//TreeAdaptor getTreeAdaptor()
//{
//	return adaptor;
//}
/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "OracleDML.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* OracleDML::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new OracleDML parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
OracleDML::OracleDML( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new OracleDML parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
OracleDML::OracleDML( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void OracleDML::init(StreamType* instream)
{
	/* Allocate TreeAdaptorType 
	 */
	this->get_psrstate()->set_treeAdaptor( new TreeAdaptorType() );
	// Initialize the lexers/parsers that we are going to delegate some
	// functions to.
	//
	m_gOracleDMLKeys = new OracleDML_OracleDMLKeys(instream, this->get_psrstate(), this);
	m_gOracleDMLCommons = new OracleDML_OracleDMLCommons(instream, this->get_psrstate(), this);
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( OracleDMLTokenNames );

}

void
OracleDML::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
OracleDML::~OracleDML()
{
	// Free the parsers that we delegated to functions to.
	// NULL the state so we only free it once.
	//
	m_gOracleDMLKeys->set_psrstate( NULL );
	         delete m_gOracleDMLKeys;
	m_gOracleDMLCommons->set_psrstate( NULL );
	         delete m_gOracleDMLCommons;
	/* Deallocate TreeAdaptorType 
	 */
	delete this->get_psrstate()->get_treeAdaptor();
}

/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
ANTLR_UINT8**	OracleDML::getTokenNames()
{
        return OracleDMLTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seq_of_statements_in_compilation_unit670_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000800000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2010000800040000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seq_of_statements_in_compilation_unit670( FOLLOW_seq_of_statements_in_compilation_unit670_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EOF_TOKEN_in_compilation_unit673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EOF_TOKEN_in_compilation_unit673( FOLLOW_EOF_TOKEN_in_compilation_unit673_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_seq_of_statements700_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_seq_of_statements700( FOLLOW_select_statement_in_seq_of_statements700_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_statement_in_seq_of_statements711_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_statement_in_seq_of_statements711( FOLLOW_update_statement_in_seq_of_statements711_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_delete_statement_in_seq_of_statements722_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_delete_statement_in_seq_of_statements722( FOLLOW_delete_statement_in_seq_of_statements722_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_statement_in_seq_of_statements733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_statement_in_seq_of_statements733( FOLLOW_insert_statement_in_seq_of_statements733_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_table_statement_in_seq_of_statements744_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_table_statement_in_seq_of_statements744( FOLLOW_lock_table_statement_in_seq_of_statements744_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_statement_in_seq_of_statements755_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_statement_in_seq_of_statements755( FOLLOW_merge_statement_in_seq_of_statements755_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_explain_statement_in_seq_of_statements766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_explain_statement_in_seq_of_statements766( FOLLOW_explain_statement_in_seq_of_statements766_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_in_seq_of_statements778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_in_seq_of_statements778( FOLLOW_set_in_seq_of_statements778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_explain_key_in_explain_statement809_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_explain_key_in_explain_statement809( FOLLOW_explain_key_in_explain_statement809_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_plan_key_in_explain_statement811_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_plan_key_in_explain_statement811( FOLLOW_plan_key_in_explain_statement811_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_explain_statement823_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_explain_statement823( FOLLOW_set_key_in_explain_statement823_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_statement_id_key_in_explain_statement825_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_statement_id_key_in_explain_statement825( FOLLOW_statement_id_key_in_explain_statement825_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_explain_statement827_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_explain_statement827( FOLLOW_EQUALS_OP_in_explain_statement827_bits, 5 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_quoted_string_in_explain_statement829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_quoted_string_in_explain_statement829( FOLLOW_quoted_string_in_explain_statement829_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_key_in_explain_statement843_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_key_in_explain_statement843( FOLLOW_into_key_in_explain_statement843_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_explain_statement845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_explain_statement845( FOLLOW_tableview_name_in_explain_statement845_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_explain_statement858_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2010000800040000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_explain_statement858( FOLLOW_for_key_in_explain_statement858_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_explain_statement871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_explain_statement871( FOLLOW_select_statement_in_explain_statement871_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_statement_in_explain_statement884_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_statement_in_explain_statement884( FOLLOW_update_statement_in_explain_statement884_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_delete_statement_in_explain_statement897_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_delete_statement_in_explain_statement897( FOLLOW_delete_statement_in_explain_statement897_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_statement_in_explain_statement910_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_statement_in_explain_statement910( FOLLOW_insert_statement_in_explain_statement910_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_statement_in_explain_statement923_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_statement_in_explain_statement923( FOLLOW_merge_statement_in_explain_statement923_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_factoring_clause_in_select_statement984_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_factoring_clause_in_select_statement984( FOLLOW_subquery_factoring_clause_in_select_statement984_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_select_statement995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_select_statement995( FOLLOW_subquery_in_select_statement995_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_update_clause_in_select_statement1006_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_update_clause_in_select_statement1006( FOLLOW_for_update_clause_in_select_statement1006_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_select_statement1018_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_select_statement1018( FOLLOW_order_by_clause_in_select_statement1018_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_subquery_factoring_clause1069_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_subquery_factoring_clause1069( FOLLOW_with_key_in_subquery_factoring_clause1069_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_factoring_element_in_subquery_factoring_clause1072_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_factoring_element_in_subquery_factoring_clause1072( FOLLOW_factoring_element_in_subquery_factoring_clause1072_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_subquery_factoring_clause1075_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_subquery_factoring_clause1075( FOLLOW_COMMA_in_subquery_factoring_clause1075_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_factoring_element_in_subquery_factoring_clause1078_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_factoring_element_in_subquery_factoring_clause1078( FOLLOW_factoring_element_in_subquery_factoring_clause1078_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_name_in_factoring_element1100_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_name_in_factoring_element1100( FOLLOW_query_name_in_factoring_element1100_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_factoring_element1103_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_factoring_element1103( FOLLOW_LEFT_PAREN_in_factoring_element1103_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_factoring_element1105_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_factoring_element1105( FOLLOW_column_name_in_factoring_element1105_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_factoring_element1108_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_factoring_element1108( FOLLOW_COMMA_in_factoring_element1108_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_factoring_element1110_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_factoring_element1110( FOLLOW_column_name_in_factoring_element1110_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_factoring_element1114_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_factoring_element1114( FOLLOW_RIGHT_PAREN_in_factoring_element1114_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_factoring_element1118_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_factoring_element1118( FOLLOW_as_key_in_factoring_element1118_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_factoring_element1120_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_factoring_element1120( FOLLOW_LEFT_PAREN_in_factoring_element1120_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_factoring_element1122_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_factoring_element1122( FOLLOW_subquery_in_factoring_element1122_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_factoring_element1124_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_factoring_element1124( FOLLOW_order_by_clause_in_factoring_element1124_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_factoring_element1127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_factoring_element1127( FOLLOW_RIGHT_PAREN_in_factoring_element1127_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_search_clause_in_factoring_element1138_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_search_clause_in_factoring_element1138( FOLLOW_search_clause_in_factoring_element1138_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cycle_clause_in_factoring_element1150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cycle_clause_in_factoring_element1150( FOLLOW_cycle_clause_in_factoring_element1150_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_search_key_in_search_clause1198_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_search_key_in_search_clause1198( FOLLOW_search_key_in_search_clause1198_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_depth_key_in_search_clause1202_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_depth_key_in_search_clause1202( FOLLOW_depth_key_in_search_clause1202_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_breadth_key_in_search_clause1206_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_breadth_key_in_search_clause1206( FOLLOW_breadth_key_in_search_clause1206_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_search_clause1210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_search_clause1210( FOLLOW_first_key_in_search_clause1210_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_search_clause1212_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_search_clause1212( FOLLOW_by_key_in_search_clause1212_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_search_clause1227_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080020) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_search_clause1227( FOLLOW_column_name_in_search_clause1227_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_asc_key_in_search_clause1229_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_asc_key_in_search_clause1229( FOLLOW_asc_key_in_search_clause1229_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_desc_key_in_search_clause1233_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_desc_key_in_search_clause1233( FOLLOW_desc_key_in_search_clause1233_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_search_clause1238_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_search_clause1238( FOLLOW_nulls_key_in_search_clause1238_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_search_clause1240_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_search_clause1240( FOLLOW_first_key_in_search_clause1240_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_search_clause1245_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_search_clause1245( FOLLOW_nulls_key_in_search_clause1245_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_last_key_in_search_clause1247_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_last_key_in_search_clause1247( FOLLOW_last_key_in_search_clause1247_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_search_clause1265_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_search_clause1265( FOLLOW_COMMA_in_search_clause1265_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_search_clause1267_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080020) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_search_clause1267( FOLLOW_column_name_in_search_clause1267_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_asc_key_in_search_clause1269_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_asc_key_in_search_clause1269( FOLLOW_asc_key_in_search_clause1269_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_desc_key_in_search_clause1273_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_desc_key_in_search_clause1273( FOLLOW_desc_key_in_search_clause1273_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_search_clause1278_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_search_clause1278( FOLLOW_nulls_key_in_search_clause1278_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_search_clause1280_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_search_clause1280( FOLLOW_first_key_in_search_clause1280_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_search_clause1285_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_search_clause1285( FOLLOW_nulls_key_in_search_clause1285_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_last_key_in_search_clause1287_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_last_key_in_search_clause1287( FOLLOW_last_key_in_search_clause1287_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_search_clause1307_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_search_clause1307( FOLLOW_set_key_in_search_clause1307_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_search_clause1309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_search_clause1309( FOLLOW_column_name_in_search_clause1309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cycle_key_in_cycle_clause1329_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cycle_key_in_cycle_clause1329( FOLLOW_cycle_key_in_cycle_clause1329_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_cycle_clause1331_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_cycle_clause1331( FOLLOW_column_name_in_cycle_clause1331_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_cycle_clause1335_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_cycle_clause1335( FOLLOW_COMMA_in_cycle_clause1335_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_cycle_clause1337_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_cycle_clause1337( FOLLOW_column_name_in_cycle_clause1337_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_cycle_clause1341_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_cycle_clause1341( FOLLOW_set_key_in_cycle_clause1341_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_cycle_clause1343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_cycle_clause1343( FOLLOW_column_name_in_cycle_clause1343_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_to_key_in_cycle_clause1345_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_to_key_in_cycle_clause1345( FOLLOW_to_key_in_cycle_clause1345_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_cycle_clause1347_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_cycle_clause1347( FOLLOW_expression_in_cycle_clause1347_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_default_key_in_cycle_clause1349_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_default_key_in_cycle_clause1349( FOLLOW_default_key_in_cycle_clause1349_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_cycle_clause1351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_cycle_clause1351( FOLLOW_expression_in_cycle_clause1351_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_basic_elements_in_subquery1371_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_basic_elements_in_subquery1371( FOLLOW_subquery_basic_elements_in_subquery1371_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_operation_part_in_subquery1373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_operation_part_in_subquery1373( FOLLOW_subquery_operation_part_in_subquery1373_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_union_key_in_subquery_operation_part1414_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_union_key_in_subquery_operation_part1414( FOLLOW_union_key_in_subquery_operation_part1414_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_subquery_operation_part1417_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_subquery_operation_part1417( FOLLOW_all_key_in_subquery_operation_part1417_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_intersect_key_in_subquery_operation_part1420_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_intersect_key_in_subquery_operation_part1420( FOLLOW_intersect_key_in_subquery_operation_part1420_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_minus_key_in_subquery_operation_part1423_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_minus_key_in_subquery_operation_part1423( FOLLOW_minus_key_in_subquery_operation_part1423_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_basic_elements_in_subquery_operation_part1427_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_basic_elements_in_subquery_operation_part1427( FOLLOW_subquery_basic_elements_in_subquery_operation_part1427_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_block_in_subquery_basic_elements1447_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_block_in_subquery_basic_elements1447( FOLLOW_query_block_in_subquery_basic_elements1447_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_subquery_basic_elements1458_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_subquery_basic_elements1458( FOLLOW_LEFT_PAREN_in_subquery_basic_elements1458_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_subquery_basic_elements1461_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_subquery_basic_elements1461( FOLLOW_subquery_in_subquery_basic_elements1461_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1463_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1463( FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1463_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_query_block1491_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x140103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_query_block1491( FOLLOW_select_key_in_query_block1491_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_query_block1512_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_query_block1512( FOLLOW_distinct_key_in_query_block1512_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_query_block1514_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_query_block1514( FOLLOW_unique_key_in_query_block1514_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_query_block1516_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_query_block1516( FOLLOW_all_key_in_query_block1516_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_query_block1530_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_query_block1530( FOLLOW_ASTERISK_in_query_block1530_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_selected_element_in_query_block1535_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_selected_element_in_query_block1535( FOLLOW_selected_element_in_query_block1535_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_query_block1538_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_query_block1538( FOLLOW_COMMA_in_query_block1538_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_selected_element_in_query_block1540_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_selected_element_in_query_block1540( FOLLOW_selected_element_in_query_block1540_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_clause_in_query_block1553_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_clause_in_query_block1553( FOLLOW_into_clause_in_query_block1553_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_clause_in_query_block1564_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000200), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000300000800), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_clause_in_query_block1564( FOLLOW_from_clause_in_query_block1564_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_query_block1575_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000200), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000300000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_query_block1575( FOLLOW_where_clause_in_query_block1575_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_hierarchical_query_clause_in_query_block1587_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000300000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_hierarchical_query_clause_in_query_block1587( FOLLOW_hierarchical_query_clause_in_query_block1587_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_clause_in_query_block1599_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_clause_in_query_block1599( FOLLOW_group_by_clause_in_query_block1599_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_clause_in_query_block1610_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_clause_in_query_block1610( FOLLOW_model_clause_in_query_block1610_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_list_elements_in_selected_element1754_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_list_elements_in_selected_element1754( FOLLOW_select_list_elements_in_selected_element1754_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_selected_element1756_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_selected_element1756( FOLLOW_column_alias_in_selected_element1756_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_from_clause1796_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_from_clause1796( FOLLOW_from_key_in_from_clause1796_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_list_in_from_clause1799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_list_in_from_clause1799( FOLLOW_table_ref_list_in_from_clause1799_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_select_list_elements1828_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_select_list_elements1828( FOLLOW_tableview_name_in_select_list_elements1828_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_select_list_elements1830_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_select_list_elements1830( FOLLOW_PERIOD_in_select_list_elements1830_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_select_list_elements1832_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_select_list_elements1832( FOLLOW_ASTERISK_in_select_list_elements1832_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_select_list_elements1858_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_select_list_elements1858( FOLLOW_expression_in_select_list_elements1858_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_in_table_ref_list1886_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_in_table_ref_list1886( FOLLOW_table_ref_in_table_ref_list1886_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_table_ref_list1889_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_table_ref_list1889( FOLLOW_COMMA_in_table_ref_list1889_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_in_table_ref_list1892_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_in_table_ref_list1892( FOLLOW_table_ref_in_table_ref_list1892_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_in_table_ref1918_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000001800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_in_table_ref1918( FOLLOW_table_ref_aux_in_table_ref1918_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_join_clause_in_table_ref1920_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000001800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_join_clause_in_table_ref1920( FOLLOW_join_clause_in_table_ref1920_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_clause_in_table_ref1924_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_clause_in_table_ref1924( FOLLOW_pivot_clause_in_table_ref1924_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_clause_in_table_ref1926_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_clause_in_table_ref1926( FOLLOW_unpivot_clause_in_table_ref1926_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_ver1_in_table_ref_aux2004_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_ver1_in_table_ref_aux2004( FOLLOW_table_ref_aux_ver1_in_table_ref_aux2004_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_ver2_in_table_ref_aux2021_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_ver2_in_table_ref_aux2021( FOLLOW_table_ref_aux_ver2_in_table_ref_aux2021_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_ver3_in_table_ref_aux2040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_ver3_in_table_ref_aux2040( FOLLOW_table_ref_aux_ver3_in_table_ref_aux2040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_ver4_in_table_ref_aux2051_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_ver4_in_table_ref_aux2051( FOLLOW_table_ref_aux_ver4_in_table_ref_aux2051_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver12094_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000001800), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver12094( FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver12094_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_clause_in_table_ref_aux_ver12105_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_clause_in_table_ref_aux_ver12105( FOLLOW_pivot_clause_in_table_ref_aux_ver12105_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_clause_in_table_ref_aux_ver12107_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_clause_in_table_ref_aux_ver12107( FOLLOW_unpivot_clause_in_table_ref_aux_ver12107_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_flashback_query_clause_in_table_ref_aux_ver12111_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_flashback_query_clause_in_table_ref_aux_ver12111( FOLLOW_flashback_query_clause_in_table_ref_aux_ver12111_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_table_ref_aux_ver12117_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_table_ref_aux_ver12117( FOLLOW_table_alias_in_table_ref_aux_ver12117_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_table_ref_aux_ver22178_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_table_ref_aux_ver22178( FOLLOW_LEFT_PAREN_in_table_ref_aux_ver22178_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_in_table_ref_aux_ver22180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_in_table_ref_aux_ver22180( FOLLOW_table_ref_in_table_ref_aux_ver22180_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_operation_part_in_table_ref_aux_ver22182_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_operation_part_in_table_ref_aux_ver22182( FOLLOW_subquery_operation_part_in_table_ref_aux_ver22182_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver22185_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000001800), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver22185( FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver22185_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_clause_in_table_ref_aux_ver22196_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_clause_in_table_ref_aux_ver22196( FOLLOW_pivot_clause_in_table_ref_aux_ver22196_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_clause_in_table_ref_aux_ver22198_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_clause_in_table_ref_aux_ver22198( FOLLOW_unpivot_clause_in_table_ref_aux_ver22198_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_flashback_query_clause_in_table_ref_aux_ver22202_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_flashback_query_clause_in_table_ref_aux_ver22202( FOLLOW_flashback_query_clause_in_table_ref_aux_ver22202_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_table_ref_aux_ver22208_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_table_ref_aux_ver22208( FOLLOW_table_alias_in_table_ref_aux_ver22208_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_table_ref_aux_ver32281_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_table_ref_aux_ver32281( FOLLOW_only_key_in_table_ref_aux_ver32281_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_table_ref_aux_ver32283_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_table_ref_aux_ver32283( FOLLOW_LEFT_PAREN_in_table_ref_aux_ver32283_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver32285_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver32285( FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver32285_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver32287_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver32287( FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver32287_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_flashback_query_clause_in_table_ref_aux_ver32297_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_flashback_query_clause_in_table_ref_aux_ver32297( FOLLOW_flashback_query_clause_in_table_ref_aux_ver32297_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_table_ref_aux_ver32303_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_table_ref_aux_ver32303( FOLLOW_table_alias_in_table_ref_aux_ver32303_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver42360_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000001800), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver42360( FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver42360_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_clause_in_table_ref_aux_ver42363_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_clause_in_table_ref_aux_ver42363( FOLLOW_pivot_clause_in_table_ref_aux_ver42363_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_clause_in_table_ref_aux_ver42365_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_clause_in_table_ref_aux_ver42365( FOLLOW_unpivot_clause_in_table_ref_aux_ver42365_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_flashback_query_clause_in_table_ref_aux_ver42377_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_flashback_query_clause_in_table_ref_aux_ver42377( FOLLOW_flashback_query_clause_in_table_ref_aux_ver42377_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_table_ref_aux_ver42383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_table_ref_aux_ver42383( FOLLOW_table_alias_in_table_ref_aux_ver42383_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_partition_clause_in_join_clause2434_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_partition_clause_in_join_clause2434( FOLLOW_query_partition_clause_in_join_clause2434_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cross_key_in_join_clause2446_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cross_key_in_join_clause2446( FOLLOW_cross_key_in_join_clause2446_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_natural_key_in_join_clause2448_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_natural_key_in_join_clause2448( FOLLOW_natural_key_in_join_clause2448_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_inner_key_in_join_clause2453_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_inner_key_in_join_clause2453( FOLLOW_inner_key_in_join_clause2453_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_outer_join_type_in_join_clause2455_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_outer_join_type_in_join_clause2455( FOLLOW_outer_join_type_in_join_clause2455_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_join_key_in_join_clause2459_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_join_key_in_join_clause2459( FOLLOW_join_key_in_join_clause2459_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_in_join_clause2469_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_in_join_clause2469( FOLLOW_table_ref_aux_in_join_clause2469_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_partition_clause_in_join_clause2481_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_partition_clause_in_join_clause2481( FOLLOW_query_partition_clause_in_join_clause2481_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_join_on_part_in_join_clause2493_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_join_on_part_in_join_clause2493( FOLLOW_join_on_part_in_join_clause2493_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_join_using_part_in_join_clause2504_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_join_using_part_in_join_clause2504( FOLLOW_join_using_part_in_join_clause2504_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_on_key_in_join_on_part2587_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_on_key_in_join_on_part2587( FOLLOW_on_key_in_join_on_part2587_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_join_on_part2589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_join_on_part2589( FOLLOW_condition_in_join_on_part2589_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_join_using_part2630_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_join_using_part2630( FOLLOW_using_key_in_join_using_part2630_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_join_using_part2633_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_join_using_part2633( FOLLOW_LEFT_PAREN_in_join_using_part2633_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_join_using_part2635_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_join_using_part2635( FOLLOW_column_name_in_join_using_part2635_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_join_using_part2638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_join_using_part2638( FOLLOW_COMMA_in_join_using_part2638_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_join_using_part2641_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_join_using_part2641( FOLLOW_column_name_in_join_using_part2641_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_join_using_part2645_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_join_using_part2645( FOLLOW_RIGHT_PAREN_in_join_using_part2645_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_full_key_in_outer_join_type2675_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_full_key_in_outer_join_type2675( FOLLOW_full_key_in_outer_join_type2675_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_left_key_in_outer_join_type2686_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_left_key_in_outer_join_type2686( FOLLOW_left_key_in_outer_join_type2686_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_right_key_in_outer_join_type2697_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_right_key_in_outer_join_type2697( FOLLOW_right_key_in_outer_join_type2697_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_outer_key_in_outer_join_type2713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_outer_key_in_outer_join_type2713( FOLLOW_outer_key_in_outer_join_type2713_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_partition_key_in_query_partition_clause2735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_partition_key_in_query_partition_clause2735( FOLLOW_partition_key_in_query_partition_clause2735_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_query_partition_clause2737_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_query_partition_clause2737( FOLLOW_by_key_in_query_partition_clause2737_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_query_partition_clause2760_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_query_partition_clause2760( FOLLOW_LEFT_PAREN_in_query_partition_clause2760_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_query_partition_clause2762_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_query_partition_clause2762( FOLLOW_subquery_in_query_partition_clause2762_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_query_partition_clause2764_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_query_partition_clause2764( FOLLOW_RIGHT_PAREN_in_query_partition_clause2764_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_query_partition_clause2780_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_query_partition_clause2780( FOLLOW_expression_list_in_query_partition_clause2780_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_query_partition_clause2791_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_query_partition_clause2791( FOLLOW_expression_in_query_partition_clause2791_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_query_partition_clause2794_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_query_partition_clause2794( FOLLOW_COMMA_in_query_partition_clause2794_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_query_partition_clause2796_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_query_partition_clause2796( FOLLOW_expression_in_query_partition_clause2796_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_versions_key_in_flashback_query_clause2857_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_versions_key_in_flashback_query_clause2857( FOLLOW_versions_key_in_flashback_query_clause2857_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_between_key_in_flashback_query_clause2859_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_between_key_in_flashback_query_clause2859( FOLLOW_between_key_in_flashback_query_clause2859_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_scn_key_in_flashback_query_clause2862_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_scn_key_in_flashback_query_clause2862( FOLLOW_scn_key_in_flashback_query_clause2862_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_timestamp_key_in_flashback_query_clause2864_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_timestamp_key_in_flashback_query_clause2864( FOLLOW_timestamp_key_in_flashback_query_clause2864_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_flashback_query_clause2867_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_flashback_query_clause2867( FOLLOW_expression_in_flashback_query_clause2867_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_flashback_query_clause2897_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000040000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_flashback_query_clause2897( FOLLOW_as_key_in_flashback_query_clause2897_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_of_key_in_flashback_query_clause2899_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_of_key_in_flashback_query_clause2899( FOLLOW_of_key_in_flashback_query_clause2899_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_scn_key_in_flashback_query_clause2902_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_scn_key_in_flashback_query_clause2902( FOLLOW_scn_key_in_flashback_query_clause2902_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_timestamp_key_in_flashback_query_clause2904_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_timestamp_key_in_flashback_query_clause2904( FOLLOW_timestamp_key_in_flashback_query_clause2904_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_snapshot_key_in_flashback_query_clause2906_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_snapshot_key_in_flashback_query_clause2906( FOLLOW_snapshot_key_in_flashback_query_clause2906_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_flashback_query_clause2909_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_flashback_query_clause2909( FOLLOW_expression_in_flashback_query_clause2909_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_key_in_pivot_clause2950_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_key_in_pivot_clause2950( FOLLOW_pivot_key_in_pivot_clause2950_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_key_in_pivot_clause2952_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_key_in_pivot_clause2952( FOLLOW_xml_key_in_pivot_clause2952_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_pivot_clause2963_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_pivot_clause2963( FOLLOW_LEFT_PAREN_in_pivot_clause2963_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_element_in_pivot_clause2977_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_element_in_pivot_clause2977( FOLLOW_pivot_element_in_pivot_clause2977_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pivot_clause2980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_pivot_clause2980( FOLLOW_COMMA_in_pivot_clause2980_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_element_in_pivot_clause2982_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_element_in_pivot_clause2982( FOLLOW_pivot_element_in_pivot_clause2982_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_for_clause_in_pivot_clause2998_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_for_clause_in_pivot_clause2998( FOLLOW_pivot_for_clause_in_pivot_clause2998_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_in_clause_in_pivot_clause3012_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_in_clause_in_pivot_clause3012( FOLLOW_pivot_in_clause_in_pivot_clause3012_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_pivot_clause3024_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_pivot_clause3024( FOLLOW_RIGHT_PAREN_in_pivot_clause3024_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_aggregate_function_name_in_pivot_element3072_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_aggregate_function_name_in_pivot_element3072( FOLLOW_aggregate_function_name_in_pivot_element3072_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_pivot_element3074_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_pivot_element3074( FOLLOW_LEFT_PAREN_in_pivot_element3074_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_pivot_element3076_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_pivot_element3076( FOLLOW_expression_in_pivot_element3076_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_pivot_element3078_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_pivot_element3078( FOLLOW_RIGHT_PAREN_in_pivot_element3078_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_pivot_element3080_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_pivot_element3080( FOLLOW_column_alias_in_pivot_element3080_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_pivot_for_clause3145_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_pivot_for_clause3145( FOLLOW_for_key_in_pivot_for_clause3145_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_pivot_for_clause3157_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_pivot_for_clause3157( FOLLOW_column_name_in_pivot_for_clause3157_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_pivot_for_clause3168_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_pivot_for_clause3168( FOLLOW_LEFT_PAREN_in_pivot_for_clause3168_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_pivot_for_clause3170_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_pivot_for_clause3170( FOLLOW_column_name_in_pivot_for_clause3170_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pivot_for_clause3173_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_pivot_for_clause3173( FOLLOW_COMMA_in_pivot_for_clause3173_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_pivot_for_clause3175_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_pivot_for_clause3175( FOLLOW_column_name_in_pivot_for_clause3175_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_pivot_for_clause3179_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_pivot_for_clause3179( FOLLOW_RIGHT_PAREN_in_pivot_for_clause3179_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_pivot_in_clause3234_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_pivot_in_clause3234( FOLLOW_in_key_in_pivot_in_clause3234_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_pivot_in_clause3244_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x041103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_pivot_in_clause3244( FOLLOW_LEFT_PAREN_in_pivot_in_clause3244_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_pivot_in_clause3268_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_pivot_in_clause3268( FOLLOW_subquery_in_pivot_in_clause3268_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_pivot_in_clause3294_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_pivot_in_clause3294( FOLLOW_any_key_in_pivot_in_clause3294_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pivot_in_clause3297_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_pivot_in_clause3297( FOLLOW_COMMA_in_pivot_in_clause3297_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_pivot_in_clause3299_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_pivot_in_clause3299( FOLLOW_any_key_in_pivot_in_clause3299_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_in_clause_element_in_pivot_in_clause3322_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_in_clause_element_in_pivot_in_clause3322( FOLLOW_pivot_in_clause_element_in_pivot_in_clause3322_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pivot_in_clause3325_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_pivot_in_clause3325( FOLLOW_COMMA_in_pivot_in_clause3325_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_in_clause_element_in_pivot_in_clause3327_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_in_clause_element_in_pivot_in_clause3327( FOLLOW_pivot_in_clause_element_in_pivot_in_clause3327_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_pivot_in_clause3353_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_pivot_in_clause3353( FOLLOW_RIGHT_PAREN_in_pivot_in_clause3353_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3433_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3433( FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3433_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_pivot_in_clause_element3435_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_pivot_in_clause_element3435( FOLLOW_column_alias_in_pivot_in_clause_element3435_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_pivot_in_clause_elements3475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_pivot_in_clause_elements3475( FOLLOW_expression_in_pivot_in_clause_elements3475_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_pivot_in_clause_elements3499_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_pivot_in_clause_elements3499( FOLLOW_expression_list_in_pivot_in_clause_elements3499_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_key_in_unpivot_clause3519_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_key_in_unpivot_clause3519( FOLLOW_unpivot_key_in_unpivot_clause3519_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_include_key_in_unpivot_clause3532_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_include_key_in_unpivot_clause3532( FOLLOW_include_key_in_unpivot_clause3532_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exclude_key_in_unpivot_clause3534_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exclude_key_in_unpivot_clause3534( FOLLOW_exclude_key_in_unpivot_clause3534_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_unpivot_clause3537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_unpivot_clause3537( FOLLOW_nulls_key_in_unpivot_clause3537_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_clause3549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_clause3549( FOLLOW_LEFT_PAREN_in_unpivot_clause3549_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_clause3568_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_clause3568( FOLLOW_column_name_in_unpivot_clause3568_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_clause3587_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_clause3587( FOLLOW_LEFT_PAREN_in_unpivot_clause3587_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_clause3589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_clause3589( FOLLOW_column_name_in_unpivot_clause3589_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_unpivot_clause3592_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_unpivot_clause3592( FOLLOW_COMMA_in_unpivot_clause3592_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_clause3594_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_clause3594( FOLLOW_column_name_in_unpivot_clause3594_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_clause3598_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_clause3598( FOLLOW_RIGHT_PAREN_in_unpivot_clause3598_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_for_clause_in_unpivot_clause3626_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_for_clause_in_unpivot_clause3626( FOLLOW_pivot_for_clause_in_unpivot_clause3626_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_in_clause_in_unpivot_clause3640_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_in_clause_in_unpivot_clause3640( FOLLOW_unpivot_in_clause_in_unpivot_clause3640_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_clause3650_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_clause3650( FOLLOW_RIGHT_PAREN_in_unpivot_clause3650_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_unpivot_in_clause3700_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_unpivot_in_clause3700( FOLLOW_in_key_in_unpivot_in_clause3700_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_in_clause3710_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_in_clause3710( FOLLOW_LEFT_PAREN_in_unpivot_in_clause3710_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_in_elements_in_unpivot_in_clause3724_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_in_elements_in_unpivot_in_clause3724( FOLLOW_unpivot_in_elements_in_unpivot_in_clause3724_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_unpivot_in_clause3727_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_unpivot_in_clause3727( FOLLOW_COMMA_in_unpivot_in_clause3727_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_in_elements_in_unpivot_in_clause3729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_in_elements_in_unpivot_in_clause3729( FOLLOW_unpivot_in_elements_in_unpivot_in_clause3729_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3741_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3741( FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3741_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_in_elements3786_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_in_elements3786( FOLLOW_column_name_in_unpivot_in_elements3786_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_in_elements3801_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_in_elements3801( FOLLOW_LEFT_PAREN_in_unpivot_in_elements3801_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_in_elements3803_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_in_elements3803( FOLLOW_column_name_in_unpivot_in_elements3803_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_unpivot_in_elements3806_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_unpivot_in_elements3806( FOLLOW_COMMA_in_unpivot_in_elements3806_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_in_elements3808_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_in_elements3808( FOLLOW_column_name_in_unpivot_in_elements3808_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3812_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3812( FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3812_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_unpivot_in_elements3837_bits[]	= { ANTLR_UINT64_LIT(0x0180000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_unpivot_in_elements3837( FOLLOW_as_key_in_unpivot_in_elements3837_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_unpivot_in_elements3852_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_unpivot_in_elements3852( FOLLOW_constant_in_unpivot_in_elements3852_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_in_elements3872_bits[]	= { ANTLR_UINT64_LIT(0x0180000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_in_elements3872( FOLLOW_LEFT_PAREN_in_unpivot_in_elements3872_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_unpivot_in_elements3874_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_unpivot_in_elements3874( FOLLOW_constant_in_unpivot_in_elements3874_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_unpivot_in_elements3877_bits[]	= { ANTLR_UINT64_LIT(0x0180000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_unpivot_in_elements3877( FOLLOW_COMMA_in_unpivot_in_elements3877_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_unpivot_in_elements3879_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_unpivot_in_elements3879( FOLLOW_constant_in_unpivot_in_elements3879_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3883_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3883( FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3883_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_connect_key_in_hierarchical_query_clause3945_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_connect_key_in_hierarchical_query_clause3945( FOLLOW_connect_key_in_hierarchical_query_clause3945_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_hierarchical_query_clause3947_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_hierarchical_query_clause3947( FOLLOW_by_key_in_hierarchical_query_clause3947_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nocycle_key_in_hierarchical_query_clause3949_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nocycle_key_in_hierarchical_query_clause3949( FOLLOW_nocycle_key_in_hierarchical_query_clause3949_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_hierarchical_query_clause3952_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_hierarchical_query_clause3952( FOLLOW_condition_in_hierarchical_query_clause3952_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_start_part_in_hierarchical_query_clause3954_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_start_part_in_hierarchical_query_clause3954( FOLLOW_start_part_in_hierarchical_query_clause3954_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_start_part_in_hierarchical_query_clause3996_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_start_part_in_hierarchical_query_clause3996( FOLLOW_start_part_in_hierarchical_query_clause3996_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_connect_key_in_hierarchical_query_clause3998_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_connect_key_in_hierarchical_query_clause3998( FOLLOW_connect_key_in_hierarchical_query_clause3998_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_hierarchical_query_clause4000_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_hierarchical_query_clause4000( FOLLOW_by_key_in_hierarchical_query_clause4000_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nocycle_key_in_hierarchical_query_clause4002_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nocycle_key_in_hierarchical_query_clause4002( FOLLOW_nocycle_key_in_hierarchical_query_clause4002_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_hierarchical_query_clause4005_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_hierarchical_query_clause4005( FOLLOW_condition_in_hierarchical_query_clause4005_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_start_key_in_start_part4055_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_start_key_in_start_part4055( FOLLOW_start_key_in_start_part4055_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_start_part4057_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_start_part4057( FOLLOW_with_key_in_start_part4057_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_start_part4059_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_start_part4059( FOLLOW_condition_in_start_part4059_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_key_in_group_by_clause4104_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_key_in_group_by_clause4104( FOLLOW_group_key_in_group_by_clause4104_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_group_by_clause4106_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_group_by_clause4106( FOLLOW_by_key_in_group_by_clause4106_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_group_by_clause4112_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_group_by_clause4112( FOLLOW_LEFT_PAREN_in_group_by_clause4112_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_group_by_clause4114_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000200000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_group_by_clause4114( FOLLOW_RIGHT_PAREN_in_group_by_clause4114_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_group_by_clause4121_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000200000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_group_by_clause4121( FOLLOW_group_by_elements_in_group_by_clause4121_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_group_by_clause4131_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_group_by_clause4131( FOLLOW_COMMA_in_group_by_clause4131_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_group_by_clause4133_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000200000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_group_by_clause4133( FOLLOW_group_by_elements_in_group_by_clause4133_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_having_clause_in_group_by_clause4144_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_having_clause_in_group_by_clause4144( FOLLOW_having_clause_in_group_by_clause4144_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_having_clause_in_group_by_clause4184_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000100000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_having_clause_in_group_by_clause4184( FOLLOW_having_clause_in_group_by_clause4184_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_key_in_group_by_clause4189_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_key_in_group_by_clause4189( FOLLOW_group_key_in_group_by_clause4189_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_group_by_clause4191_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_group_by_clause4191( FOLLOW_by_key_in_group_by_clause4191_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_group_by_clause4197_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_group_by_clause4197( FOLLOW_LEFT_PAREN_in_group_by_clause4197_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_group_by_clause4199_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_group_by_clause4199( FOLLOW_RIGHT_PAREN_in_group_by_clause4199_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_group_by_clause4206_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_group_by_clause4206( FOLLOW_group_by_elements_in_group_by_clause4206_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_group_by_clause4216_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_group_by_clause4216( FOLLOW_COMMA_in_group_by_clause4216_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_group_by_clause4218_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_group_by_clause4218( FOLLOW_group_by_elements_in_group_by_clause4218_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_clause_in_group_by_elements4273_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_clause_in_group_by_elements4273( FOLLOW_grouping_sets_clause_in_group_by_elements4273_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rollup_cube_clause_in_group_by_elements4284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rollup_cube_clause_in_group_by_elements4284( FOLLOW_rollup_cube_clause_in_group_by_elements4284_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_group_by_elements4296_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_group_by_elements4296( FOLLOW_expression_in_group_by_elements4296_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rollup_key_in_rollup_cube_clause4325_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rollup_key_in_rollup_cube_clause4325( FOLLOW_rollup_key_in_rollup_cube_clause4325_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cube_key_in_rollup_cube_clause4328_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cube_key_in_rollup_cube_clause4328( FOLLOW_cube_key_in_rollup_cube_clause4328_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_rollup_cube_clause4332_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_rollup_cube_clause4332( FOLLOW_LEFT_PAREN_in_rollup_cube_clause4332_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_elements_in_rollup_cube_clause4334_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_elements_in_rollup_cube_clause4334( FOLLOW_grouping_sets_elements_in_rollup_cube_clause4334_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_rollup_cube_clause4337_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_rollup_cube_clause4337( FOLLOW_COMMA_in_rollup_cube_clause4337_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_elements_in_rollup_cube_clause4340_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_elements_in_rollup_cube_clause4340( FOLLOW_grouping_sets_elements_in_rollup_cube_clause4340_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_rollup_cube_clause4344_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_rollup_cube_clause4344( FOLLOW_RIGHT_PAREN_in_rollup_cube_clause4344_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_key_in_grouping_sets_clause4365_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_key_in_grouping_sets_clause4365( FOLLOW_grouping_key_in_grouping_sets_clause4365_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_sets_key_in_grouping_sets_clause4367_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_sets_key_in_grouping_sets_clause4367( FOLLOW_sets_key_in_grouping_sets_clause4367_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_grouping_sets_clause4378_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_grouping_sets_clause4378( FOLLOW_LEFT_PAREN_in_grouping_sets_clause4378_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_elements_in_grouping_sets_clause4380_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_elements_in_grouping_sets_clause4380( FOLLOW_grouping_sets_elements_in_grouping_sets_clause4380_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_grouping_sets_clause4383_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_grouping_sets_clause4383( FOLLOW_COMMA_in_grouping_sets_clause4383_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_elements_in_grouping_sets_clause4385_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_elements_in_grouping_sets_clause4385( FOLLOW_grouping_sets_elements_in_grouping_sets_clause4385_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4389_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4389( FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4389_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rollup_cube_clause_in_grouping_sets_elements4437_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rollup_cube_clause_in_grouping_sets_elements4437( FOLLOW_rollup_cube_clause_in_grouping_sets_elements4437_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_grouping_sets_elements4453_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_grouping_sets_elements4453( FOLLOW_expression_list_in_grouping_sets_elements4453_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_grouping_sets_elements4464_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_grouping_sets_elements4464( FOLLOW_expression_in_grouping_sets_elements4464_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_having_key_in_having_clause4492_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_having_key_in_having_clause4492( FOLLOW_having_key_in_having_clause4492_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_having_clause4494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_having_clause4494( FOLLOW_condition_in_having_clause4494_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_key_in_model_clause4534_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_key_in_model_clause4534( FOLLOW_model_key_in_model_clause4534_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cell_reference_options_in_model_clause4536_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cell_reference_options_in_model_clause4536( FOLLOW_cell_reference_options_in_model_clause4536_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_return_rows_clause_in_model_clause4539_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_return_rows_clause_in_model_clause4539( FOLLOW_return_rows_clause_in_model_clause4539_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reference_model_in_model_clause4542_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reference_model_in_model_clause4542( FOLLOW_reference_model_in_model_clause4542_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_main_model_in_model_clause4545_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_main_model_in_model_clause4545( FOLLOW_main_model_in_model_clause4545_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ignore_key_in_cell_reference_options4591_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ignore_key_in_cell_reference_options4591( FOLLOW_ignore_key_in_cell_reference_options4591_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_keep_key_in_cell_reference_options4594_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_keep_key_in_cell_reference_options4594( FOLLOW_keep_key_in_cell_reference_options4594_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nav_key_in_cell_reference_options4598_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nav_key_in_cell_reference_options4598( FOLLOW_nav_key_in_cell_reference_options4598_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_cell_reference_options4609_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_cell_reference_options4609( FOLLOW_unique_key_in_cell_reference_options4609_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dimension_key_in_cell_reference_options4613_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dimension_key_in_cell_reference_options4613( FOLLOW_dimension_key_in_cell_reference_options4613_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_single_key_in_cell_reference_options4615_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_single_key_in_cell_reference_options4615( FOLLOW_single_key_in_cell_reference_options4615_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reference_key_in_cell_reference_options4617_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reference_key_in_cell_reference_options4617( FOLLOW_reference_key_in_cell_reference_options4617_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_return_key_in_return_rows_clause4638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_return_key_in_return_rows_clause4638( FOLLOW_return_key_in_return_rows_clause4638_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_updated_key_in_return_rows_clause4642_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_updated_key_in_return_rows_clause4642( FOLLOW_updated_key_in_return_rows_clause4642_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_return_rows_clause4644_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_return_rows_clause4644( FOLLOW_all_key_in_return_rows_clause4644_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rows_key_in_return_rows_clause4647_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rows_key_in_return_rows_clause4647( FOLLOW_rows_key_in_return_rows_clause4647_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reference_key_in_reference_model4668_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reference_key_in_reference_model4668( FOLLOW_reference_key_in_reference_model4668_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reference_model_name_in_reference_model4671_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reference_model_name_in_reference_model4671( FOLLOW_reference_model_name_in_reference_model4671_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_on_key_in_reference_model4673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_on_key_in_reference_model4673( FOLLOW_on_key_in_reference_model4673_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_reference_model4689_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_reference_model4689( FOLLOW_LEFT_PAREN_in_reference_model4689_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_reference_model4691_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_reference_model4691( FOLLOW_subquery_in_reference_model4691_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_reference_model4693_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_reference_model4693( FOLLOW_RIGHT_PAREN_in_reference_model4693_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_clauses_in_reference_model4695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_clauses_in_reference_model4695( FOLLOW_model_column_clauses_in_reference_model4695_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cell_reference_options_in_reference_model4710_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cell_reference_options_in_reference_model4710( FOLLOW_cell_reference_options_in_reference_model4710_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_main_key_in_main_model4732_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_main_key_in_main_model4732( FOLLOW_main_key_in_main_model4732_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_main_model_name_in_main_model4734_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_main_model_name_in_main_model4734( FOLLOW_main_model_name_in_main_model4734_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_clauses_in_main_model4738_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_clauses_in_main_model4738( FOLLOW_model_column_clauses_in_main_model4738_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cell_reference_options_in_main_model4740_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cell_reference_options_in_main_model4740( FOLLOW_cell_reference_options_in_main_model4740_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_rules_clause_in_main_model4743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_rules_clause_in_main_model4743( FOLLOW_model_rules_clause_in_main_model4743_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_partition_part_in_model_column_clauses4787_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_partition_part_in_model_column_clauses4787( FOLLOW_model_column_partition_part_in_model_column_clauses4787_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dimension_key_in_model_column_clauses4798_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dimension_key_in_model_column_clauses4798( FOLLOW_dimension_key_in_model_column_clauses4798_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_model_column_clauses4800_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_model_column_clauses4800( FOLLOW_by_key_in_model_column_clauses4800_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_list_in_model_column_clauses4802_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_list_in_model_column_clauses4802( FOLLOW_model_column_list_in_model_column_clauses4802_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_measures_key_in_model_column_clauses4804_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_measures_key_in_model_column_clauses4804( FOLLOW_measures_key_in_model_column_clauses4804_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_list_in_model_column_clauses4806_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_list_in_model_column_clauses4806( FOLLOW_model_column_list_in_model_column_clauses4806_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_partition_key_in_model_column_partition_part4855_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_partition_key_in_model_column_partition_part4855( FOLLOW_partition_key_in_model_column_partition_part4855_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_model_column_partition_part4858_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_model_column_partition_part4858( FOLLOW_by_key_in_model_column_partition_part4858_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_list_in_model_column_partition_part4861_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_list_in_model_column_partition_part4861( FOLLOW_model_column_list_in_model_column_partition_part4861_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_model_column_list4881_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_model_column_list4881( FOLLOW_LEFT_PAREN_in_model_column_list4881_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_in_model_column_list4883_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_in_model_column_list4883( FOLLOW_model_column_in_model_column_list4883_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_model_column_list4886_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_model_column_list4886( FOLLOW_COMMA_in_model_column_list4886_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_in_model_column_list4888_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_in_model_column_list4888( FOLLOW_model_column_in_model_column_list4888_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_model_column_list4893_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_model_column_list4893( FOLLOW_RIGHT_PAREN_in_model_column_list4893_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_model_column4930_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_model_column4930( FOLLOW_expression_in_model_column4930_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_model_column4932_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_model_column4932( FOLLOW_column_alias_in_model_column4932_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_rules_part_in_model_rules_clause4976_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_rules_part_in_model_rules_clause4976( FOLLOW_model_rules_part_in_model_rules_clause4976_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_model_rules_clause4979_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x2401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_model_rules_clause4979( FOLLOW_LEFT_PAREN_in_model_rules_clause4979_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_rules_element_in_model_rules_clause4982_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_rules_element_in_model_rules_clause4982( FOLLOW_model_rules_element_in_model_rules_clause4982_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_model_rules_clause4985_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_model_rules_clause4985( FOLLOW_COMMA_in_model_rules_clause4985_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_rules_element_in_model_rules_clause4987_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_rules_element_in_model_rules_clause4987( FOLLOW_model_rules_element_in_model_rules_clause4987_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_model_rules_clause4993_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_model_rules_clause4993( FOLLOW_RIGHT_PAREN_in_model_rules_clause4993_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rules_key_in_model_rules_part5033_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rules_key_in_model_rules_part5033( FOLLOW_rules_key_in_model_rules_part5033_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_model_rules_part5036_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_model_rules_part5036( FOLLOW_update_key_in_model_rules_part5036_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_upsert_key_in_model_rules_part5038_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_upsert_key_in_model_rules_part5038( FOLLOW_upsert_key_in_model_rules_part5038_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_model_rules_part5040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_model_rules_part5040( FOLLOW_all_key_in_model_rules_part5040_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_automatic_key_in_model_rules_part5047_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_automatic_key_in_model_rules_part5047( FOLLOW_automatic_key_in_model_rules_part5047_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_sequential_key_in_model_rules_part5049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_sequential_key_in_model_rules_part5049( FOLLOW_sequential_key_in_model_rules_part5049_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_key_in_model_rules_part5052_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_key_in_model_rules_part5052( FOLLOW_order_key_in_model_rules_part5052_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_iterate_clause_in_model_rules_part5056_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_iterate_clause_in_model_rules_part5056( FOLLOW_model_iterate_clause_in_model_rules_part5056_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_model_rules_element5110_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_model_rules_element5110( FOLLOW_update_key_in_model_rules_element5110_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_upsert_key_in_model_rules_element5112_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_upsert_key_in_model_rules_element5112( FOLLOW_upsert_key_in_model_rules_element5112_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_model_rules_element5120_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_model_rules_element5120( FOLLOW_all_key_in_model_rules_element5120_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cell_assignment_in_model_rules_element5134_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cell_assignment_in_model_rules_element5134( FOLLOW_cell_assignment_in_model_rules_element5134_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_model_rules_element5152_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_model_rules_element5152( FOLLOW_order_by_clause_in_model_rules_element5152_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_model_rules_element5167_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_model_rules_element5167( FOLLOW_EQUALS_OP_in_model_rules_element5167_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_model_rules_element5169_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_model_rules_element5169( FOLLOW_expression_in_model_rules_element5169_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_expression_in_cell_assignment5228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_expression_in_cell_assignment5228( FOLLOW_model_expression_in_cell_assignment5228_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_iterate_key_in_model_iterate_clause5248_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_iterate_key_in_model_iterate_clause5248( FOLLOW_iterate_key_in_model_iterate_clause5248_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_model_iterate_clause5250_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_model_iterate_clause5250( FOLLOW_LEFT_PAREN_in_model_iterate_clause5250_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_model_iterate_clause5252_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_model_iterate_clause5252( FOLLOW_expression_in_model_iterate_clause5252_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_model_iterate_clause5254_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_model_iterate_clause5254( FOLLOW_RIGHT_PAREN_in_model_iterate_clause5254_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_until_part_in_model_iterate_clause5256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_until_part_in_model_iterate_clause5256( FOLLOW_until_part_in_model_iterate_clause5256_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_until_key_in_until_part5299_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_until_key_in_until_part5299( FOLLOW_until_key_in_until_part5299_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_until_part5301_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_until_part5301( FOLLOW_LEFT_PAREN_in_until_part5301_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_until_part5303_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_until_part5303( FOLLOW_condition_in_until_part5303_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_until_part5305_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_until_part5305( FOLLOW_RIGHT_PAREN_in_until_part5305_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_key_in_order_by_clause5345_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_key_in_order_by_clause5345( FOLLOW_order_key_in_order_by_clause5345_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_siblings_key_in_order_by_clause5347_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_siblings_key_in_order_by_clause5347( FOLLOW_siblings_key_in_order_by_clause5347_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_order_by_clause5350_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_order_by_clause5350( FOLLOW_by_key_in_order_by_clause5350_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_elements_in_order_by_clause5352_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_elements_in_order_by_clause5352( FOLLOW_order_by_elements_in_order_by_clause5352_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_order_by_clause5355_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_order_by_clause5355( FOLLOW_COMMA_in_order_by_clause5355_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_elements_in_order_by_clause5357_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_elements_in_order_by_clause5357( FOLLOW_order_by_elements_in_order_by_clause5357_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_order_by_elements5403_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080020) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_order_by_elements5403( FOLLOW_expression_in_order_by_elements5403_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_asc_key_in_order_by_elements5406_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_asc_key_in_order_by_elements5406( FOLLOW_asc_key_in_order_by_elements5406_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_desc_key_in_order_by_elements5408_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_desc_key_in_order_by_elements5408( FOLLOW_desc_key_in_order_by_elements5408_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_order_by_elements5413_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_order_by_elements5413( FOLLOW_nulls_key_in_order_by_elements5413_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_order_by_elements5416_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_order_by_elements5416( FOLLOW_first_key_in_order_by_elements5416_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_last_key_in_order_by_elements5418_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_last_key_in_order_by_elements5418( FOLLOW_last_key_in_order_by_elements5418_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_for_update_clause5476_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_for_update_clause5476( FOLLOW_for_key_in_for_update_clause5476_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_for_update_clause5478_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000008000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000040000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_for_update_clause5478( FOLLOW_update_key_in_for_update_clause5478_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_update_of_part_in_for_update_clause5480_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000008000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_update_of_part_in_for_update_clause5480( FOLLOW_for_update_of_part_in_for_update_clause5480_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_update_options_in_for_update_clause5483_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_update_options_in_for_update_clause5483( FOLLOW_for_update_options_in_for_update_clause5483_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_of_key_in_for_update_of_part5526_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_of_key_in_for_update_of_part5526( FOLLOW_of_key_in_for_update_of_part5526_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_for_update_of_part5529_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_for_update_of_part5529( FOLLOW_column_name_in_for_update_of_part5529_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_for_update_of_part5532_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_for_update_of_part5532( FOLLOW_COMMA_in_for_update_of_part5532_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_for_update_of_part5535_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_for_update_of_part5535( FOLLOW_column_name_in_for_update_of_part5535_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_skip_key_in_for_update_options5557_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_skip_key_in_for_update_options5557( FOLLOW_skip_key_in_for_update_options5557_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_locked_key_in_for_update_options5559_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_locked_key_in_for_update_options5559( FOLLOW_locked_key_in_for_update_options5559_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nowait_key_in_for_update_options5571_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nowait_key_in_for_update_options5571( FOLLOW_nowait_key_in_for_update_options5571_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_wait_key_in_for_update_options5582_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_wait_key_in_for_update_options5582( FOLLOW_wait_key_in_for_update_options5582_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_for_update_options5584_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_for_update_options5584( FOLLOW_expression_in_for_update_options5584_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_update_statement5618_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_update_statement5618( FOLLOW_update_key_in_update_statement5618_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_table_ref_in_update_statement5621_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_table_ref_in_update_statement5621( FOLLOW_general_table_ref_in_update_statement5621_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_set_clause_in_update_statement5631_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_set_clause_in_update_statement5631( FOLLOW_update_set_clause_in_update_statement5631_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_update_statement5641_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_update_statement5641( FOLLOW_where_clause_in_update_statement5641_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_static_returning_clause_in_update_statement5644_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_static_returning_clause_in_update_statement5644( FOLLOW_static_returning_clause_in_update_statement5644_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_update_statement5647_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_update_statement5647( FOLLOW_error_logging_clause_in_update_statement5647_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_update_set_clause5677_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_update_set_clause5677( FOLLOW_set_key_in_update_set_clause5677_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_based_update_set_clause_in_update_set_clause5688_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_based_update_set_clause_in_update_set_clause5688( FOLLOW_column_based_update_set_clause_in_update_set_clause5688_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_update_set_clause5691_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_update_set_clause5691( FOLLOW_COMMA_in_update_set_clause5691_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_based_update_set_clause_in_update_set_clause5693_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_based_update_set_clause_in_update_set_clause5693( FOLLOW_column_based_update_set_clause_in_update_set_clause5693_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_value_key_in_update_set_clause5706_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_value_key_in_update_set_clause5706( FOLLOW_value_key_in_update_set_clause5706_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_update_set_clause5708_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_update_set_clause5708( FOLLOW_LEFT_PAREN_in_update_set_clause5708_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_id_in_update_set_clause5710_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_id_in_update_set_clause5710( FOLLOW_id_in_update_set_clause5710_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_update_set_clause5713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_update_set_clause5713( FOLLOW_RIGHT_PAREN_in_update_set_clause5713_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_update_set_clause5715_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_update_set_clause5715( FOLLOW_EQUALS_OP_in_update_set_clause5715_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_update_set_clause5717_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_update_set_clause5717( FOLLOW_expression_in_update_set_clause5717_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_column_based_update_set_clause5789_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_column_based_update_set_clause5789( FOLLOW_column_name_in_column_based_update_set_clause5789_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_column_based_update_set_clause5791_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_column_based_update_set_clause5791( FOLLOW_EQUALS_OP_in_column_based_update_set_clause5791_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_column_based_update_set_clause5793_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_column_based_update_set_clause5793( FOLLOW_expression_in_column_based_update_set_clause5793_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5819_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5819( FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5819_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_column_based_update_set_clause5821_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_column_based_update_set_clause5821( FOLLOW_column_name_in_column_based_update_set_clause5821_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_column_based_update_set_clause5824_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_column_based_update_set_clause5824( FOLLOW_COMMA_in_column_based_update_set_clause5824_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_column_based_update_set_clause5826_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_column_based_update_set_clause5826( FOLLOW_column_name_in_column_based_update_set_clause5826_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5830_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5830( FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5830_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_column_based_update_set_clause5832_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_column_based_update_set_clause5832( FOLLOW_EQUALS_OP_in_column_based_update_set_clause5832_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_column_based_update_set_clause5834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_column_based_update_set_clause5834( FOLLOW_subquery_in_column_based_update_set_clause5834_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_delete_key_in_delete_statement5868_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_delete_key_in_delete_statement5868( FOLLOW_delete_key_in_delete_statement5868_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_delete_statement5871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_delete_statement5871( FOLLOW_from_key_in_delete_statement5871_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_table_ref_in_delete_statement5883_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_table_ref_in_delete_statement5883( FOLLOW_general_table_ref_in_delete_statement5883_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_delete_statement5893_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_delete_statement5893( FOLLOW_where_clause_in_delete_statement5893_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_static_returning_clause_in_delete_statement5896_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_static_returning_clause_in_delete_statement5896( FOLLOW_static_returning_clause_in_delete_statement5896_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_delete_statement5899_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_delete_statement5899( FOLLOW_error_logging_clause_in_delete_statement5899_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_key_in_insert_statement5920_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000001), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_key_in_insert_statement5920( FOLLOW_insert_key_in_insert_statement5920_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_single_table_insert_in_insert_statement5932_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_single_table_insert_in_insert_statement5932( FOLLOW_single_table_insert_in_insert_statement5932_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_table_insert_in_insert_statement5943_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_table_insert_in_insert_statement5943( FOLLOW_multi_table_insert_in_insert_statement5943_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_into_clause_in_single_table_insert5971_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_into_clause_in_single_table_insert5971( FOLLOW_insert_into_clause_in_single_table_insert5971_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_clause_in_single_table_insert5982_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_clause_in_single_table_insert5982( FOLLOW_values_clause_in_single_table_insert5982_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_static_returning_clause_in_single_table_insert5984_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_static_returning_clause_in_single_table_insert5984( FOLLOW_static_returning_clause_in_single_table_insert5984_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_single_table_insert5996_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_single_table_insert5996( FOLLOW_select_statement_in_single_table_insert5996_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_single_table_insert6012_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_single_table_insert6012( FOLLOW_error_logging_clause_in_single_table_insert6012_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_multi_table_insert6071_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_multi_table_insert6071( FOLLOW_all_key_in_multi_table_insert6071_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_table_element_in_multi_table_insert6073_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010002000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_table_element_in_multi_table_insert6073( FOLLOW_multi_table_element_in_multi_table_insert6073_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_conditional_insert_clause_in_multi_table_insert6085_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_conditional_insert_clause_in_multi_table_insert6085( FOLLOW_conditional_insert_clause_in_multi_table_insert6085_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_multi_table_insert6101_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_multi_table_insert6101( FOLLOW_select_statement_in_multi_table_insert6101_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_into_clause_in_multi_table_element6143_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_into_clause_in_multi_table_element6143( FOLLOW_insert_into_clause_in_multi_table_element6143_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_clause_in_multi_table_element6145_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_clause_in_multi_table_element6145( FOLLOW_values_clause_in_multi_table_element6145_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_multi_table_element6148_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_multi_table_element6148( FOLLOW_error_logging_clause_in_multi_table_element6148_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_conditional_insert_clause6192_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_conditional_insert_clause6192( FOLLOW_all_key_in_conditional_insert_clause6192_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_conditional_insert_clause6194_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_conditional_insert_clause6194( FOLLOW_first_key_in_conditional_insert_clause6194_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_conditional_insert_when_part_in_conditional_insert_clause6206_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000400000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_conditional_insert_when_part_in_conditional_insert_clause6206( FOLLOW_conditional_insert_when_part_in_conditional_insert_clause6206_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_conditional_insert_else_part_in_conditional_insert_clause6209_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_conditional_insert_else_part_in_conditional_insert_clause6209( FOLLOW_conditional_insert_else_part_in_conditional_insert_clause6209_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_conditional_insert_when_part6257_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_conditional_insert_when_part6257( FOLLOW_when_key_in_conditional_insert_when_part6257_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_conditional_insert_when_part6259_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_conditional_insert_when_part6259( FOLLOW_condition_in_conditional_insert_when_part6259_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_conditional_insert_when_part6261_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_conditional_insert_when_part6261( FOLLOW_then_key_in_conditional_insert_when_part6261_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_table_element_in_conditional_insert_when_part6263_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_table_element_in_conditional_insert_when_part6263( FOLLOW_multi_table_element_in_conditional_insert_when_part6263_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_else_key_in_conditional_insert_else_part6307_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_else_key_in_conditional_insert_else_part6307( FOLLOW_else_key_in_conditional_insert_else_part6307_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_table_element_in_conditional_insert_else_part6310_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_table_element_in_conditional_insert_else_part6310( FOLLOW_multi_table_element_in_conditional_insert_else_part6310_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_key_in_insert_into_clause6331_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_key_in_insert_into_clause6331( FOLLOW_into_key_in_insert_into_clause6331_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_table_ref_in_insert_into_clause6333_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_table_ref_in_insert_into_clause6333( FOLLOW_general_table_ref_in_insert_into_clause6333_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_insert_into_clause6345_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_insert_into_clause6345( FOLLOW_LEFT_PAREN_in_insert_into_clause6345_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_insert_into_clause6347_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_insert_into_clause6347( FOLLOW_column_name_in_insert_into_clause6347_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_insert_into_clause6350_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_insert_into_clause6350( FOLLOW_COMMA_in_insert_into_clause6350_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_insert_into_clause6352_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_insert_into_clause6352( FOLLOW_column_name_in_insert_into_clause6352_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_insert_into_clause6356_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_insert_into_clause6356( FOLLOW_RIGHT_PAREN_in_insert_into_clause6356_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_key_in_values_clause6401_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_key_in_values_clause6401( FOLLOW_values_key_in_values_clause6401_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_values_clause6405_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_values_clause6405( FOLLOW_expression_list_in_values_clause6405_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_record_name_in_values_clause6409_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_record_name_in_values_clause6409( FOLLOW_record_name_in_values_clause6409_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_key_in_merge_statement6431_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_key_in_merge_statement6431( FOLLOW_merge_key_in_merge_statement6431_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_key_in_merge_statement6433_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_key_in_merge_statement6433( FOLLOW_into_key_in_merge_statement6433_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_merge_statement6435_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000002000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_merge_statement6435( FOLLOW_tableview_name_in_merge_statement6435_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_merge_statement6437_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_merge_statement6437( FOLLOW_table_alias_in_merge_statement6437_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_merge_statement6448_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_merge_statement6448( FOLLOW_using_key_in_merge_statement6448_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_selected_tableview_in_merge_statement6450_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_selected_tableview_in_merge_statement6450( FOLLOW_selected_tableview_in_merge_statement6450_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_on_key_in_merge_statement6452_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_on_key_in_merge_statement6452( FOLLOW_on_key_in_merge_statement6452_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_merge_statement6454_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_merge_statement6454( FOLLOW_LEFT_PAREN_in_merge_statement6454_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_merge_statement6456_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_merge_statement6456( FOLLOW_condition_in_merge_statement6456_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_merge_statement6458_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_merge_statement6458( FOLLOW_RIGHT_PAREN_in_merge_statement6458_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_update_insert_seq_in_merge_statement6490_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_update_insert_seq_in_merge_statement6490( FOLLOW_merge_update_insert_seq_in_merge_statement6490_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_insert_update_seq_in_merge_statement6524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_insert_update_seq_in_merge_statement6524( FOLLOW_merge_insert_update_seq_in_merge_statement6524_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_merge_statement6545_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_merge_statement6545( FOLLOW_error_logging_clause_in_merge_statement6545_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_update_clause_in_merge_update_insert_seq6628_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_update_clause_in_merge_update_insert_seq6628( FOLLOW_merge_update_clause_in_merge_update_insert_seq6628_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_insert_clause_in_merge_update_insert_seq6630_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_insert_clause_in_merge_update_insert_seq6630( FOLLOW_merge_insert_clause_in_merge_update_insert_seq6630_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_insert_clause_in_merge_insert_update_seq6648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_insert_clause_in_merge_insert_update_seq6648( FOLLOW_merge_insert_clause_in_merge_insert_update_seq6648_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_update_clause_in_merge_insert_update_seq6650_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_update_clause_in_merge_insert_update_seq6650( FOLLOW_merge_update_clause_in_merge_insert_update_seq6650_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_merge_update_clause6671_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_merge_update_clause6671( FOLLOW_when_key_in_merge_update_clause6671_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_matched_key_in_merge_update_clause6673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_matched_key_in_merge_update_clause6673( FOLLOW_matched_key_in_merge_update_clause6673_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_merge_update_clause6675_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_merge_update_clause6675( FOLLOW_then_key_in_merge_update_clause6675_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_merge_update_clause6677_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_merge_update_clause6677( FOLLOW_update_key_in_merge_update_clause6677_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_merge_update_clause6679_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_merge_update_clause6679( FOLLOW_set_key_in_merge_update_clause6679_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_element_in_merge_update_clause6690_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_element_in_merge_update_clause6690( FOLLOW_merge_element_in_merge_update_clause6690_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_merge_update_clause6693_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_merge_update_clause6693( FOLLOW_COMMA_in_merge_update_clause6693_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_element_in_merge_update_clause6695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_element_in_merge_update_clause6695( FOLLOW_merge_element_in_merge_update_clause6695_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_merge_update_clause6707_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_merge_update_clause6707( FOLLOW_where_clause_in_merge_update_clause6707_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_update_delete_part_in_merge_update_clause6710_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_update_delete_part_in_merge_update_clause6710( FOLLOW_merge_update_delete_part_in_merge_update_clause6710_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_merge_element6762_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_merge_element6762( FOLLOW_column_name_in_merge_element6762_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_merge_element6764_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_merge_element6764( FOLLOW_EQUALS_OP_in_merge_element6764_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_merge_element6766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_merge_element6766( FOLLOW_expression_in_merge_element6766_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_delete_key_in_merge_update_delete_part6809_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_delete_key_in_merge_update_delete_part6809( FOLLOW_delete_key_in_merge_update_delete_part6809_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_merge_update_delete_part6812_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_merge_update_delete_part6812( FOLLOW_where_clause_in_merge_update_delete_part6812_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_merge_insert_clause6832_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000010000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_merge_insert_clause6832( FOLLOW_when_key_in_merge_insert_clause6832_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_merge_insert_clause6834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_merge_insert_clause6834( FOLLOW_not_key_in_merge_insert_clause6834_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_matched_key_in_merge_insert_clause6836_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_matched_key_in_merge_insert_clause6836( FOLLOW_matched_key_in_merge_insert_clause6836_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_merge_insert_clause6838_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000800000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_merge_insert_clause6838( FOLLOW_then_key_in_merge_insert_clause6838_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_key_in_merge_insert_clause6840_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_key_in_merge_insert_clause6840( FOLLOW_insert_key_in_merge_insert_clause6840_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_merge_insert_clause6852_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_merge_insert_clause6852( FOLLOW_LEFT_PAREN_in_merge_insert_clause6852_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_merge_insert_clause6854_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_merge_insert_clause6854( FOLLOW_column_name_in_merge_insert_clause6854_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_merge_insert_clause6857_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_merge_insert_clause6857( FOLLOW_COMMA_in_merge_insert_clause6857_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_merge_insert_clause6859_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_merge_insert_clause6859( FOLLOW_column_name_in_merge_insert_clause6859_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_merge_insert_clause6863_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_merge_insert_clause6863( FOLLOW_RIGHT_PAREN_in_merge_insert_clause6863_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_key_in_merge_insert_clause6875_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_key_in_merge_insert_clause6875( FOLLOW_values_key_in_merge_insert_clause6875_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_merge_insert_clause6877_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_merge_insert_clause6877( FOLLOW_expression_list_in_merge_insert_clause6877_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_merge_insert_clause6879_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_merge_insert_clause6879( FOLLOW_where_clause_in_merge_insert_clause6879_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_selected_tableview6940_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_selected_tableview6940( FOLLOW_tableview_name_in_selected_tableview6940_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_selected_tableview6944_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_selected_tableview6944( FOLLOW_LEFT_PAREN_in_selected_tableview6944_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_selected_tableview6946_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_selected_tableview6946( FOLLOW_select_statement_in_selected_tableview6946_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_selected_tableview6948_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_selected_tableview6948( FOLLOW_RIGHT_PAREN_in_selected_tableview6948_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_selected_tableview6951_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_selected_tableview6951( FOLLOW_table_alias_in_selected_tableview6951_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_key_in_lock_table_statement6997_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0040000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_key_in_lock_table_statement6997( FOLLOW_lock_key_in_lock_table_statement6997_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_key_in_lock_table_statement6999_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_key_in_lock_table_statement6999( FOLLOW_table_key_in_lock_table_statement6999_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_table_element_in_lock_table_statement7010_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_table_element_in_lock_table_statement7010( FOLLOW_lock_table_element_in_lock_table_statement7010_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_lock_table_statement7013_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_lock_table_statement7013( FOLLOW_COMMA_in_lock_table_statement7013_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_table_element_in_lock_table_statement7015_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_table_element_in_lock_table_statement7015( FOLLOW_lock_table_element_in_lock_table_statement7015_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_lock_table_statement7028_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000020040000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_lock_table_statement7028( FOLLOW_in_key_in_lock_table_statement7028_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_mode_in_lock_table_statement7030_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000002000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_mode_in_lock_table_statement7030( FOLLOW_lock_mode_in_lock_table_statement7030_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_mode_key_in_lock_table_statement7032_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000008000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_mode_key_in_lock_table_statement7032( FOLLOW_mode_key_in_lock_table_statement7032_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_wait_nowait_part_in_lock_table_statement7034_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_wait_nowait_part_in_lock_table_statement7034( FOLLOW_wait_nowait_part_in_lock_table_statement7034_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_wait_key_in_wait_nowait_part7077_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_wait_key_in_wait_nowait_part7077( FOLLOW_wait_key_in_wait_nowait_part7077_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_wait_nowait_part7079_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_wait_nowait_part7079( FOLLOW_expression_in_wait_nowait_part7079_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nowait_key_in_wait_nowait_part7102_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nowait_key_in_wait_nowait_part7102( FOLLOW_nowait_key_in_wait_nowait_part7102_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_lock_table_element7124_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_lock_table_element7124( FOLLOW_tableview_name_in_lock_table_element7124_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_partition_extension_clause_in_lock_table_element7126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_partition_extension_clause_in_lock_table_element7126( FOLLOW_partition_extension_clause_in_lock_table_element7126_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_row_key_in_lock_mode7166_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_row_key_in_lock_mode7166( FOLLOW_row_key_in_lock_mode7166_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_share_key_in_lock_mode7168_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_share_key_in_lock_mode7168( FOLLOW_share_key_in_lock_mode7168_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_row_key_in_lock_mode7179_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_row_key_in_lock_mode7179( FOLLOW_row_key_in_lock_mode7179_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exclusive_key_in_lock_mode7181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exclusive_key_in_lock_mode7181( FOLLOW_exclusive_key_in_lock_mode7181_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_share_key_in_lock_mode7192_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_share_key_in_lock_mode7192( FOLLOW_share_key_in_lock_mode7192_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_lock_mode7194_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_lock_mode7194( FOLLOW_update_key_in_lock_mode7194_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_share_key_in_lock_mode7206_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_share_key_in_lock_mode7206( FOLLOW_share_key_in_lock_mode7206_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_row_key_in_lock_mode7208_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_row_key_in_lock_mode7208( FOLLOW_row_key_in_lock_mode7208_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exclusive_key_in_lock_mode7210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exclusive_key_in_lock_mode7210( FOLLOW_exclusive_key_in_lock_mode7210_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exclusive_key_in_lock_mode7221_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exclusive_key_in_lock_mode7221( FOLLOW_exclusive_key_in_lock_mode7221_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_general_table_ref7249_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_general_table_ref7249( FOLLOW_dml_table_expression_clause_in_general_table_ref7249_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_general_table_ref7264_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_general_table_ref7264( FOLLOW_only_key_in_general_table_ref7264_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_general_table_ref7266_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_general_table_ref7266( FOLLOW_LEFT_PAREN_in_general_table_ref7266_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_general_table_ref7268_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_general_table_ref7268( FOLLOW_dml_table_expression_clause_in_general_table_ref7268_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_general_table_ref7270_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_general_table_ref7270( FOLLOW_RIGHT_PAREN_in_general_table_ref7270_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_general_table_ref7285_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_general_table_ref7285( FOLLOW_table_alias_in_general_table_ref7285_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_returning_key_in_static_returning_clause7329_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_returning_key_in_static_returning_clause7329( FOLLOW_returning_key_in_static_returning_clause7329_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_return_key_in_static_returning_clause7331_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_return_key_in_static_returning_clause7331( FOLLOW_return_key_in_static_returning_clause7331_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_static_returning_clause7334_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_static_returning_clause7334( FOLLOW_expression_in_static_returning_clause7334_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_static_returning_clause7337_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_static_returning_clause7337( FOLLOW_COMMA_in_static_returning_clause7337_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_static_returning_clause7339_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_static_returning_clause7339( FOLLOW_expression_in_static_returning_clause7339_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_clause_in_static_returning_clause7352_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_clause_in_static_returning_clause7352( FOLLOW_into_clause_in_static_returning_clause7352_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_log_key_in_error_logging_clause7395_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_log_key_in_error_logging_clause7395( FOLLOW_log_key_in_error_logging_clause7395_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_errors_key_in_error_logging_clause7397_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002002), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103200612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_errors_key_in_error_logging_clause7397( FOLLOW_errors_key_in_error_logging_clause7397_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_into_part_in_error_logging_clause7408_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002002), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_into_part_in_error_logging_clause7408( FOLLOW_error_logging_into_part_in_error_logging_clause7408_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_error_logging_clause7425_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_error_logging_clause7425( FOLLOW_expression_wrapper_in_error_logging_clause7425_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_reject_part_in_error_logging_clause7437_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_reject_part_in_error_logging_clause7437( FOLLOW_error_logging_reject_part_in_error_logging_clause7437_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_key_in_error_logging_into_part7481_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_key_in_error_logging_into_part7481( FOLLOW_into_key_in_error_logging_into_part7481_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_error_logging_into_part7484_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_error_logging_into_part7484( FOLLOW_tableview_name_in_error_logging_into_part7484_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reject_key_in_error_logging_reject_part7504_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reject_key_in_error_logging_reject_part7504( FOLLOW_reject_key_in_error_logging_reject_part7504_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_limit_key_in_error_logging_reject_part7507_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_limit_key_in_error_logging_reject_part7507( FOLLOW_limit_key_in_error_logging_reject_part7507_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unlimited_key_in_error_logging_reject_part7515_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unlimited_key_in_error_logging_reject_part7515( FOLLOW_unlimited_key_in_error_logging_reject_part7515_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_error_logging_reject_part7517_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_error_logging_reject_part7517( FOLLOW_expression_wrapper_in_error_logging_reject_part7517_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_collection_expression_in_dml_table_expression_clause7538_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_collection_expression_in_dml_table_expression_clause7538( FOLLOW_table_collection_expression_in_dml_table_expression_clause7538_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7561_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7561( FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7561_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_dml_table_expression_clause7563_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_dml_table_expression_clause7563( FOLLOW_select_statement_in_dml_table_expression_clause7563_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7565_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7565( FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7565_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7568_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7568( FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7568_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_dml_table_expression_clause7610_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_dml_table_expression_clause7610( FOLLOW_tableview_name_in_dml_table_expression_clause7610_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_sample_clause_in_dml_table_expression_clause7612_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_sample_clause_in_dml_table_expression_clause7612( FOLLOW_sample_clause_in_dml_table_expression_clause7612_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_key_in_table_collection_expression7650_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_key_in_table_collection_expression7650( FOLLOW_table_key_in_table_collection_expression7650_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_the_key_in_table_collection_expression7654_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_the_key_in_table_collection_expression7654( FOLLOW_the_key_in_table_collection_expression7654_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_table_collection_expression7682_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_table_collection_expression7682( FOLLOW_LEFT_PAREN_in_table_collection_expression7682_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_table_collection_expression7684_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_table_collection_expression7684( FOLLOW_subquery_in_table_collection_expression7684_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_table_collection_expression7686_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_table_collection_expression7686( FOLLOW_RIGHT_PAREN_in_table_collection_expression7686_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_table_collection_expression7699_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_table_collection_expression7699( FOLLOW_LEFT_PAREN_in_table_collection_expression7699_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_table_collection_expression7701_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_table_collection_expression7701( FOLLOW_expression_in_table_collection_expression7701_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_table_collection_expression7703_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_table_collection_expression7703( FOLLOW_RIGHT_PAREN_in_table_collection_expression7703_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_subquery_restriction_clause7756_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_subquery_restriction_clause7756( FOLLOW_with_key_in_subquery_restriction_clause7756_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_read_key_in_subquery_restriction_clause7767_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_read_key_in_subquery_restriction_clause7767( FOLLOW_read_key_in_subquery_restriction_clause7767_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_subquery_restriction_clause7769_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_subquery_restriction_clause7769( FOLLOW_only_key_in_subquery_restriction_clause7769_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_check_key_in_subquery_restriction_clause7780_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000100000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_check_key_in_subquery_restriction_clause7780( FOLLOW_check_key_in_subquery_restriction_clause7780_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_option_key_in_subquery_restriction_clause7782_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_option_key_in_subquery_restriction_clause7782( FOLLOW_option_key_in_subquery_restriction_clause7782_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constraint_key_in_subquery_restriction_clause7785_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constraint_key_in_subquery_restriction_clause7785( FOLLOW_constraint_key_in_subquery_restriction_clause7785_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constraint_name_in_subquery_restriction_clause7787_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constraint_name_in_subquery_restriction_clause7787( FOLLOW_constraint_name_in_subquery_restriction_clause7787_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_sample_key_in_sample_clause7838_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_sample_key_in_sample_clause7838( FOLLOW_sample_key_in_sample_clause7838_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_block_key_in_sample_clause7840_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_block_key_in_sample_clause7840( FOLLOW_block_key_in_sample_clause7840_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_sample_clause7852_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_sample_clause7852( FOLLOW_LEFT_PAREN_in_sample_clause7852_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_sample_clause7856_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_sample_clause7856( FOLLOW_expression_in_sample_clause7856_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_sample_clause7859_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_sample_clause7859( FOLLOW_COMMA_in_sample_clause7859_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_sample_clause7863_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_sample_clause7863( FOLLOW_expression_in_sample_clause7863_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_sample_clause7867_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_sample_clause7867( FOLLOW_RIGHT_PAREN_in_sample_clause7867_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seed_part_in_sample_clause7877_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seed_part_in_sample_clause7877( FOLLOW_seed_part_in_sample_clause7877_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seed_key_in_seed_part7933_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seed_key_in_seed_part7933( FOLLOW_seed_key_in_seed_part7933_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_seed_part7935_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_seed_part7935( FOLLOW_LEFT_PAREN_in_seed_part7935_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_seed_part7937_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_seed_part7937( FOLLOW_expression_in_seed_part7937_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_seed_part7939_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_seed_part7939( FOLLOW_RIGHT_PAREN_in_seed_part7939_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cursor_key_in_cursor_expression7986_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cursor_key_in_cursor_expression7986( FOLLOW_cursor_key_in_cursor_expression7986_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_cursor_expression7988_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_cursor_expression7988( FOLLOW_LEFT_PAREN_in_cursor_expression7988_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_cursor_expression7990_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_cursor_expression7990( FOLLOW_subquery_in_cursor_expression7990_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_cursor_expression7992_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_cursor_expression7992( FOLLOW_RIGHT_PAREN_in_cursor_expression7992_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_expression_list8012_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000012), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_expression_list8012( FOLLOW_LEFT_PAREN_in_expression_list8012_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_list8014_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_expression_list8014( FOLLOW_expression_in_expression_list8014_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_expression_list8018_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_expression_list8018( FOLLOW_COMMA_in_expression_list8018_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_list8020_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_expression_list8020( FOLLOW_expression_in_expression_list8020_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_expression_list8024_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_expression_list8024( FOLLOW_RIGHT_PAREN_in_expression_list8024_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_condition8069_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_condition8069( FOLLOW_expression_in_condition8069_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_condition_wrapper8089_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_condition_wrapper8089( FOLLOW_expression_in_condition_wrapper8089_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_or_key_in_logical_or_expression_seq8123_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401030006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_or_key_in_logical_or_expression_seq8123( FOLLOW_or_key_in_logical_or_expression_seq8123_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_logical_and_expression_in_logical_or_expression_seq8126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_logical_and_expression_in_logical_or_expression_seq8126( FOLLOW_logical_and_expression_in_logical_or_expression_seq8126_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cursor_expression_in_expression8169_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cursor_expression_in_expression8169( FOLLOW_cursor_expression_in_expression8169_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_logical_and_expression_in_expression8184_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000200000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_logical_and_expression_in_expression8184( FOLLOW_logical_and_expression_in_expression8184_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_logical_or_expression_seq_in_expression8188_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000200000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_logical_or_expression_seq_in_expression8188( FOLLOW_logical_or_expression_seq_in_expression8188_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_wrapper8246_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_expression_wrapper8246( FOLLOW_expression_in_expression_wrapper8246_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_and_key_in_logical_and_expression_seq8283_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401030006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_and_key_in_logical_and_expression_seq8283( FOLLOW_and_key_in_logical_and_expression_seq8283_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_negated_expression_in_logical_and_expression_seq8286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_negated_expression_in_logical_and_expression_seq8286( FOLLOW_negated_expression_in_logical_and_expression_seq8286_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_negated_expression_in_logical_and_expression8315_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_negated_expression_in_logical_and_expression8315( FOLLOW_negated_expression_in_logical_and_expression8315_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_logical_and_expression_seq_in_logical_and_expression8318_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_logical_and_expression_seq_in_logical_and_expression8318( FOLLOW_logical_and_expression_seq_in_logical_and_expression8318_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_negated_expression8378_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401030006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_negated_expression8378( FOLLOW_not_key_in_negated_expression8378_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_negated_expression_in_negated_expression8381_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_negated_expression_in_negated_expression8381( FOLLOW_negated_expression_in_negated_expression8381_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_equality_expression_in_negated_expression8392_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_equality_expression_in_negated_expression8392( FOLLOW_equality_expression_in_negated_expression8392_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_comparsion_in_equality_expression8421_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_comparsion_in_equality_expression8421( FOLLOW_multiset_comparsion_in_equality_expression8421_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_is_key_in_equality_expression8437_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000070000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_is_key_in_equality_expression8437( FOLLOW_is_key_in_equality_expression8437_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_equality_expression8440_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000060000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_equality_expression8440( FOLLOW_not_key_in_equality_expression8440_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_null_key_in_equality_expression8459_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_null_key_in_equality_expression8459( FOLLOW_null_key_in_equality_expression8459_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nan_key_in_equality_expression8526_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nan_key_in_equality_expression8526( FOLLOW_nan_key_in_equality_expression8526_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_present_key_in_equality_expression8593_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_present_key_in_equality_expression8593( FOLLOW_present_key_in_equality_expression8593_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_infinite_key_in_equality_expression8660_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_infinite_key_in_equality_expression8660( FOLLOW_infinite_key_in_equality_expression8660_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_a_key_in_equality_expression8727_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_a_key_in_equality_expression8727( FOLLOW_a_key_in_equality_expression8727_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_equality_expression8729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_equality_expression8729( FOLLOW_set_key_in_equality_expression8729_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_empty_key_in_equality_expression8796_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_empty_key_in_equality_expression8796( FOLLOW_empty_key_in_equality_expression8796_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_of_key_in_equality_expression8863_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_of_key_in_equality_expression8863( FOLLOW_of_key_in_equality_expression8863_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_key_in_equality_expression8865_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_key_in_equality_expression8865( FOLLOW_type_key_in_equality_expression8865_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_equality_expression8868_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_equality_expression8868( FOLLOW_LEFT_PAREN_in_equality_expression8868_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_equality_expression8870_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_equality_expression8870( FOLLOW_only_key_in_equality_expression8870_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_equality_expression8873_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_equality_expression8873( FOLLOW_type_spec_in_equality_expression8873_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_equality_expression8876_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_equality_expression8876( FOLLOW_COMMA_in_equality_expression8876_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_equality_expression8878_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_equality_expression8878( FOLLOW_type_spec_in_equality_expression8878_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_equality_expression8882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_equality_expression8882( FOLLOW_RIGHT_PAREN_in_equality_expression8882_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_relational_expression_in_multiset_comparsion8979_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_relational_expression_in_multiset_comparsion8979( FOLLOW_relational_expression_in_multiset_comparsion8979_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_type_in_multiset_comparsion8995_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401060006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_type_in_multiset_comparsion8995( FOLLOW_multiset_type_in_multiset_comparsion8995_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_of_key_in_multiset_comparsion8997_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_of_key_in_multiset_comparsion8997( FOLLOW_of_key_in_multiset_comparsion8997_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_multiset_comparsion9000_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_multiset_comparsion9000( FOLLOW_concatenation_in_multiset_comparsion9000_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_member_key_in_multiset_type9045_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_member_key_in_multiset_type9045( FOLLOW_member_key_in_multiset_type9045_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_submultiset_key_in_multiset_type9056_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_submultiset_key_in_multiset_type9056( FOLLOW_submultiset_key_in_multiset_type9056_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_compound_expression_in_relational_expression9076_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000003000000410), ANTLR_UINT64_LIT(0x0000000300000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_compound_expression_in_relational_expression9076( FOLLOW_compound_expression_in_relational_expression9076_bits, 5 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_relational_expression9086_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_relational_expression9086( FOLLOW_EQUALS_OP_in_relational_expression9086_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_equal_op_in_relational_expression9091_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_equal_op_in_relational_expression9091( FOLLOW_not_equal_op_in_relational_expression9091_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LESS_THAN_OP_in_relational_expression9096_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LESS_THAN_OP_in_relational_expression9096( FOLLOW_LESS_THAN_OP_in_relational_expression9096_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_GREATER_THAN_OP_in_relational_expression9101_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_GREATER_THAN_OP_in_relational_expression9101( FOLLOW_GREATER_THAN_OP_in_relational_expression9101_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_less_than_or_equals_op_in_relational_expression9106_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_less_than_or_equals_op_in_relational_expression9106( FOLLOW_less_than_or_equals_op_in_relational_expression9106_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_greater_than_or_equals_op_in_relational_expression9111_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_greater_than_or_equals_op_in_relational_expression9111( FOLLOW_greater_than_or_equals_op_in_relational_expression9111_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_compound_expression_in_relational_expression9116_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000003000000410), ANTLR_UINT64_LIT(0x0000000300000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_compound_expression_in_relational_expression9116( FOLLOW_compound_expression_in_relational_expression9116_bits, 5 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_compound_expression9147_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000018400000080) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_compound_expression9147( FOLLOW_concatenation_in_compound_expression9147_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_compound_expression9164_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008400000080) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_compound_expression9164( FOLLOW_not_key_in_compound_expression9164_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_compound_expression9184_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_compound_expression9184( FOLLOW_in_key_in_compound_expression9184_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_elements_in_compound_expression9186_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_elements_in_compound_expression9186( FOLLOW_in_elements_in_compound_expression9186_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_between_key_in_compound_expression9257_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_between_key_in_compound_expression9257( FOLLOW_between_key_in_compound_expression9257_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_between_elements_in_compound_expression9259_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_between_elements_in_compound_expression9259( FOLLOW_between_elements_in_compound_expression9259_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like_type_in_compound_expression9330_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like_type_in_compound_expression9330( FOLLOW_like_type_in_compound_expression9330_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_compound_expression9332_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_compound_expression9332( FOLLOW_concatenation_in_compound_expression9332_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like_escape_part_in_compound_expression9334_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like_escape_part_in_compound_expression9334( FOLLOW_like_escape_part_in_compound_expression9334_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like_key_in_like_type9443_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like_key_in_like_type9443( FOLLOW_like_key_in_like_type9443_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_likec_key_in_like_type9454_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_likec_key_in_like_type9454( FOLLOW_likec_key_in_like_type9454_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like2_key_in_like_type9465_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like2_key_in_like_type9465( FOLLOW_like2_key_in_like_type9465_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like4_key_in_like_type9476_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like4_key_in_like_type9476( FOLLOW_like4_key_in_like_type9476_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_escape_key_in_like_escape_part9496_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_escape_key_in_like_escape_part9496( FOLLOW_escape_key_in_like_escape_part9496_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_like_escape_part9498_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_like_escape_part9498( FOLLOW_concatenation_in_like_escape_part9498_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_in_elements9556_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_in_elements9556( FOLLOW_LEFT_PAREN_in_in_elements9556_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_in_elements9558_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_in_elements9558( FOLLOW_subquery_in_in_elements9558_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_in_elements9560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_in_elements9560( FOLLOW_RIGHT_PAREN_in_in_elements9560_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_in_elements9591_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_in_elements9591( FOLLOW_LEFT_PAREN_in_in_elements9591_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_in_elements9593_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_in_elements9593( FOLLOW_concatenation_wrapper_in_in_elements9593_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_in_elements9596_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_in_elements9596( FOLLOW_COMMA_in_in_elements9596_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_in_elements9598_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_in_elements9598( FOLLOW_concatenation_wrapper_in_in_elements9598_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_in_elements9602_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_in_elements9602( FOLLOW_RIGHT_PAREN_in_in_elements9602_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_in_elements9634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_in_elements9634( FOLLOW_constant_in_in_elements9634_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_bind_variable_in_in_elements9662_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_bind_variable_in_in_elements9662( FOLLOW_bind_variable_in_in_elements9662_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_in_in_elements9690_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_in_in_elements9690( FOLLOW_general_element_in_in_elements9690_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_between_elements9729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_between_elements9729( FOLLOW_concatenation_in_between_elements9729_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_and_key_in_between_elements9731_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_and_key_in_between_elements9731( FOLLOW_and_key_in_between_elements9731_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_between_elements9735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_between_elements9735( FOLLOW_concatenation_in_between_elements9735_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_additive_expression_in_concatenation9780_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0008000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_additive_expression_in_concatenation9780( FOLLOW_additive_expression_in_concatenation9780_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_op_in_concatenation9783_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_op_in_concatenation9783( FOLLOW_concatenation_op_in_concatenation9783_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_additive_expression_in_concatenation9786_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0008000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_additive_expression_in_concatenation9786( FOLLOW_additive_expression_in_concatenation9786_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_concatenation_wrapper9808_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_concatenation_wrapper9808( FOLLOW_concatenation_in_concatenation_wrapper9808_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiply_expression_in_additive_expression9844_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiply_expression_in_additive_expression9844( FOLLOW_multiply_expression_in_additive_expression9844_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PLUS_SIGN_in_additive_expression9850_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PLUS_SIGN_in_additive_expression9850( FOLLOW_PLUS_SIGN_in_additive_expression9850_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_MINUS_SIGN_in_additive_expression9855_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_MINUS_SIGN_in_additive_expression9855( FOLLOW_MINUS_SIGN_in_additive_expression9855_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiply_expression_in_additive_expression9860_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiply_expression_in_additive_expression9860( FOLLOW_multiply_expression_in_additive_expression9860_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_datetime_expression_in_multiply_expression9882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_datetime_expression_in_multiply_expression9882( FOLLOW_datetime_expression_in_multiply_expression9882_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_multiply_expression9888_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_multiply_expression9888( FOLLOW_ASTERISK_in_multiply_expression9888_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_SOLIDUS_in_multiply_expression9893_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_SOLIDUS_in_multiply_expression9893( FOLLOW_SOLIDUS_in_multiply_expression9893_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_datetime_expression_in_multiply_expression9898_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_datetime_expression_in_multiply_expression9898( FOLLOW_datetime_expression_in_multiply_expression9898_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_expression_in_datetime_expression9921_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_expression_in_datetime_expression9921( FOLLOW_model_expression_in_datetime_expression9921_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_at_key_in_datetime_expression9937_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_at_key_in_datetime_expression9937( FOLLOW_at_key_in_datetime_expression9937_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_local_key_in_datetime_expression9940_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_local_key_in_datetime_expression9940( FOLLOW_local_key_in_datetime_expression9940_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_time_key_in_datetime_expression9942_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_time_key_in_datetime_expression9942( FOLLOW_time_key_in_datetime_expression9942_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_zone_key_in_datetime_expression9944_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_zone_key_in_datetime_expression9944( FOLLOW_zone_key_in_datetime_expression9944_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_datetime_expression9946_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_datetime_expression9946( FOLLOW_concatenation_wrapper_in_datetime_expression9946_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_interval_expression_in_datetime_expression9996_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_interval_expression_in_datetime_expression9996( FOLLOW_interval_expression_in_datetime_expression9996_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_day_key_in_interval_expression10046_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_day_key_in_interval_expression10046( FOLLOW_day_key_in_interval_expression10046_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_interval_expression10050_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_interval_expression10050( FOLLOW_LEFT_PAREN_in_interval_expression10050_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_interval_expression10054_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_interval_expression10054( FOLLOW_concatenation_wrapper_in_interval_expression10054_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_interval_expression10056_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_interval_expression10056( FOLLOW_RIGHT_PAREN_in_interval_expression10056_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_to_key_in_interval_expression10060_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_to_key_in_interval_expression10060( FOLLOW_to_key_in_interval_expression10060_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_second_key_in_interval_expression10062_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_second_key_in_interval_expression10062( FOLLOW_second_key_in_interval_expression10062_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_interval_expression10065_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_interval_expression10065( FOLLOW_LEFT_PAREN_in_interval_expression10065_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_interval_expression10069_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_interval_expression10069( FOLLOW_concatenation_wrapper_in_interval_expression10069_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_interval_expression10071_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_interval_expression10071( FOLLOW_RIGHT_PAREN_in_interval_expression10071_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_year_key_in_interval_expression10110_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_year_key_in_interval_expression10110( FOLLOW_year_key_in_interval_expression10110_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_interval_expression10113_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_interval_expression10113( FOLLOW_LEFT_PAREN_in_interval_expression10113_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_interval_expression10115_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_interval_expression10115( FOLLOW_concatenation_wrapper_in_interval_expression10115_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_interval_expression10117_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_interval_expression10117( FOLLOW_RIGHT_PAREN_in_interval_expression10117_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_to_key_in_interval_expression10121_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_to_key_in_interval_expression10121( FOLLOW_to_key_in_interval_expression10121_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_month_key_in_interval_expression10123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_month_key_in_interval_expression10123( FOLLOW_month_key_in_interval_expression10123_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_expression_in_model_expression10164_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_expression_in_model_expression10164( FOLLOW_multiset_expression_in_model_expression10164_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_BRACKET_in_model_expression10180_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103001612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_BRACKET_in_model_expression10180( FOLLOW_LEFT_BRACKET_in_model_expression10180_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_expression_element_in_model_expression10182_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_expression_element_in_model_expression10182( FOLLOW_model_expression_element_in_model_expression10182_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_BRACKET_in_model_expression10184_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_BRACKET_in_model_expression10184( FOLLOW_RIGHT_BRACKET_in_model_expression10184_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_model_expression_element10236_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_model_expression_element10236( FOLLOW_any_key_in_model_expression_element10236_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_wrapper_in_model_expression_element10238_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_wrapper_in_model_expression_element10238( FOLLOW_condition_wrapper_in_model_expression_element10238_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_model_expression_element10242_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_model_expression_element10242( FOLLOW_COMMA_in_model_expression_element10242_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_model_expression_element10251_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_model_expression_element10251( FOLLOW_any_key_in_model_expression_element10251_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_wrapper_in_model_expression_element10253_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_wrapper_in_model_expression_element10253( FOLLOW_condition_wrapper_in_model_expression_element10253_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_single_column_for_loop_in_model_expression_element10267_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_single_column_for_loop_in_model_expression_element10267( FOLLOW_single_column_for_loop_in_model_expression_element10267_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_model_expression_element10270_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_model_expression_element10270( FOLLOW_COMMA_in_model_expression_element10270_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_single_column_for_loop_in_model_expression_element10273_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_single_column_for_loop_in_model_expression_element10273( FOLLOW_single_column_for_loop_in_model_expression_element10273_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_column_for_loop_in_model_expression_element10286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_column_for_loop_in_model_expression_element10286( FOLLOW_multi_column_for_loop_in_model_expression_element10286_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_single_column_for_loop10314_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_single_column_for_loop10314( FOLLOW_for_key_in_single_column_for_loop10314_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_single_column_for_loop10316_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008420000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_single_column_for_loop10316( FOLLOW_column_name_in_single_column_for_loop10316_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_single_column_for_loop10328_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_single_column_for_loop10328( FOLLOW_in_key_in_single_column_for_loop10328_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_single_column_for_loop10330_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_single_column_for_loop10330( FOLLOW_expression_list_in_single_column_for_loop10330_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_like_part_in_single_column_for_loop10343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_like_part_in_single_column_for_loop10343( FOLLOW_for_like_part_in_single_column_for_loop10343_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_single_column_for_loop10346_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_single_column_for_loop10346( FOLLOW_from_key_in_single_column_for_loop10346_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_single_column_for_loop10350_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_single_column_for_loop10350( FOLLOW_expression_in_single_column_for_loop10350_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_to_key_in_single_column_for_loop10364_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_to_key_in_single_column_for_loop10364( FOLLOW_to_key_in_single_column_for_loop10364_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_single_column_for_loop10368_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_single_column_for_loop10368( FOLLOW_expression_in_single_column_for_loop10368_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_increment_decrement_type_in_single_column_for_loop10370_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_increment_decrement_type_in_single_column_for_loop10370( FOLLOW_for_increment_decrement_type_in_single_column_for_loop10370_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_single_column_for_loop10374_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_single_column_for_loop10374( FOLLOW_expression_in_single_column_for_loop10374_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like_key_in_for_like_part10483_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like_key_in_for_like_part10483( FOLLOW_like_key_in_for_like_part10483_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_for_like_part10485_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_for_like_part10485( FOLLOW_expression_in_for_like_part10485_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_increment_key_in_for_increment_decrement_type10525_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_increment_key_in_for_increment_decrement_type10525( FOLLOW_increment_key_in_for_increment_decrement_type10525_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_decrement_key_in_for_increment_decrement_type10536_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_decrement_key_in_for_increment_decrement_type10536( FOLLOW_decrement_key_in_for_increment_decrement_type10536_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_multi_column_for_loop10556_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_multi_column_for_loop10556( FOLLOW_for_key_in_multi_column_for_loop10556_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_multi_column_for_loop10558_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_multi_column_for_loop10558( FOLLOW_LEFT_PAREN_in_multi_column_for_loop10558_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_multi_column_for_loop10560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_multi_column_for_loop10560( FOLLOW_column_name_in_multi_column_for_loop10560_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multi_column_for_loop10563_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_multi_column_for_loop10563( FOLLOW_COMMA_in_multi_column_for_loop10563_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_multi_column_for_loop10565_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_multi_column_for_loop10565( FOLLOW_column_name_in_multi_column_for_loop10565_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10569_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10569( FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10569_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_multi_column_for_loop10571_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_multi_column_for_loop10571( FOLLOW_in_key_in_multi_column_for_loop10571_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_multi_column_for_loop10581_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_multi_column_for_loop10581( FOLLOW_LEFT_PAREN_in_multi_column_for_loop10581_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_multi_column_for_loop10605_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_multi_column_for_loop10605( FOLLOW_subquery_in_multi_column_for_loop10605_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_multi_column_for_loop10629_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_multi_column_for_loop10629( FOLLOW_LEFT_PAREN_in_multi_column_for_loop10629_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_multi_column_for_loop10631_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_multi_column_for_loop10631( FOLLOW_expression_list_in_multi_column_for_loop10631_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multi_column_for_loop10634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_multi_column_for_loop10634( FOLLOW_COMMA_in_multi_column_for_loop10634_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_multi_column_for_loop10636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_multi_column_for_loop10636( FOLLOW_expression_list_in_multi_column_for_loop10636_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10640_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10640( FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10640_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10664_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10664( FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10664_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_multiset_expression10712_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_multiset_expression10712( FOLLOW_unary_expression_in_multiset_expression10712_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_op_in_multiset_expression10725_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_op_in_multiset_expression10725( FOLLOW_multiset_op_in_multiset_expression10725_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_multiset_expression10728_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_multiset_expression10728( FOLLOW_unary_expression_in_multiset_expression10728_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_MINUS_SIGN_in_unary_expression10760_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_MINUS_SIGN_in_unary_expression10760( FOLLOW_MINUS_SIGN_in_unary_expression10760_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10762_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10762( FOLLOW_unary_expression_in_unary_expression10762_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PLUS_SIGN_in_unary_expression10782_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PLUS_SIGN_in_unary_expression10782( FOLLOW_PLUS_SIGN_in_unary_expression10782_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10784_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10784( FOLLOW_unary_expression_in_unary_expression10784_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_prior_key_in_unary_expression10804_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_prior_key_in_unary_expression10804( FOLLOW_prior_key_in_unary_expression10804_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10807_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10807( FOLLOW_unary_expression_in_unary_expression10807_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_connect_by_root_key_in_unary_expression10818_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_connect_by_root_key_in_unary_expression10818( FOLLOW_connect_by_root_key_in_unary_expression10818_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10821_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10821( FOLLOW_unary_expression_in_unary_expression10821_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_new_key_in_unary_expression10835_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_new_key_in_unary_expression10835( FOLLOW_new_key_in_unary_expression10835_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10838_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10838( FOLLOW_unary_expression_in_unary_expression10838_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_unary_expression10849_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_unary_expression10849( FOLLOW_distinct_key_in_unary_expression10849_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10852_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10852( FOLLOW_unary_expression_in_unary_expression10852_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_unary_expression10863_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_unary_expression10863( FOLLOW_all_key_in_unary_expression10863_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10866_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10866( FOLLOW_unary_expression_in_unary_expression10866_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_statement_in_unary_expression10879_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_statement_in_unary_expression10879( FOLLOW_case_statement_in_unary_expression10879_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_quantified_expression_in_unary_expression10891_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_quantified_expression_in_unary_expression10891( FOLLOW_quantified_expression_in_unary_expression10891_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_standard_function_in_unary_expression10902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_standard_function_in_unary_expression10902( FOLLOW_standard_function_in_unary_expression10902_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_atom_in_unary_expression10921_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_atom_in_unary_expression10921( FOLLOW_atom_in_unary_expression10921_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_searched_case_statement_in_case_statement10968_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_searched_case_statement_in_case_statement10968( FOLLOW_searched_case_statement_in_case_statement10968_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_simple_case_statement_in_case_statement10979_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_simple_case_statement_in_case_statement10979( FOLLOW_simple_case_statement_in_case_statement10979_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_simple_case_statement11003_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_simple_case_statement11003( FOLLOW_label_name_in_simple_case_statement11003_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_simple_case_statement11009_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_simple_case_statement11009( FOLLOW_case_key_in_simple_case_statement11009_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_atom_in_simple_case_statement11011_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_atom_in_simple_case_statement11011( FOLLOW_atom_in_simple_case_statement11011_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_simple_case_when_part_in_simple_case_statement11021_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000C00000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_simple_case_when_part_in_simple_case_statement11021( FOLLOW_simple_case_when_part_in_simple_case_statement11021_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_else_part_in_simple_case_statement11033_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000800000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_else_part_in_simple_case_statement11033( FOLLOW_case_else_part_in_simple_case_statement11033_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_end_key_in_simple_case_statement11044_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_end_key_in_simple_case_statement11044( FOLLOW_end_key_in_simple_case_statement11044_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_simple_case_statement11049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_simple_case_statement11049( FOLLOW_case_key_in_simple_case_statement11049_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_simple_case_statement11051_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_simple_case_statement11051( FOLLOW_label_name_in_simple_case_statement11051_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_simple_case_when_part11108_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_simple_case_when_part11108( FOLLOW_when_key_in_simple_case_when_part11108_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_simple_case_when_part11113_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_simple_case_when_part11113( FOLLOW_expression_wrapper_in_simple_case_when_part11113_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_simple_case_when_part11115_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004008000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x241103080616C209), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_simple_case_when_part11115( FOLLOW_then_key_in_simple_case_when_part11115_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seq_of_statements_in_simple_case_when_part11121_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seq_of_statements_in_simple_case_when_part11121( FOLLOW_seq_of_statements_in_simple_case_when_part11121_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_simple_case_when_part11127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_simple_case_when_part11127( FOLLOW_expression_wrapper_in_simple_case_when_part11127_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_searched_case_statement11150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_searched_case_statement11150( FOLLOW_label_name_in_searched_case_statement11150_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_searched_case_statement11156_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_searched_case_statement11156( FOLLOW_case_key_in_searched_case_statement11156_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_searched_case_when_part_in_searched_case_statement11166_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000C00000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_searched_case_when_part_in_searched_case_statement11166( FOLLOW_searched_case_when_part_in_searched_case_statement11166_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_else_part_in_searched_case_statement11177_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000800000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_else_part_in_searched_case_statement11177( FOLLOW_case_else_part_in_searched_case_statement11177_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_end_key_in_searched_case_statement11188_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_end_key_in_searched_case_statement11188( FOLLOW_end_key_in_searched_case_statement11188_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_searched_case_statement11193_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_searched_case_statement11193( FOLLOW_case_key_in_searched_case_statement11193_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_searched_case_statement11195_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_searched_case_statement11195( FOLLOW_label_name_in_searched_case_statement11195_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_searched_case_when_part11246_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_searched_case_when_part11246( FOLLOW_when_key_in_searched_case_when_part11246_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_wrapper_in_searched_case_when_part11249_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_wrapper_in_searched_case_when_part11249( FOLLOW_condition_wrapper_in_searched_case_when_part11249_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_searched_case_when_part11251_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004008000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x241103080616C209), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_searched_case_when_part11251( FOLLOW_then_key_in_searched_case_when_part11251_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seq_of_statements_in_searched_case_when_part11257_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seq_of_statements_in_searched_case_when_part11257( FOLLOW_seq_of_statements_in_searched_case_when_part11257_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_searched_case_when_part11261_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_searched_case_when_part11261( FOLLOW_expression_wrapper_in_searched_case_when_part11261_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_else_key_in_case_else_part11282_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004008000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x241103080616C209), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_else_key_in_case_else_part11282( FOLLOW_else_key_in_case_else_part11282_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seq_of_statements_in_case_else_part11288_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seq_of_statements_in_case_else_part11288( FOLLOW_seq_of_statements_in_case_else_part11288_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_case_else_part11292_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_case_else_part11292( FOLLOW_expression_wrapper_in_case_else_part11292_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_element_in_atom11339_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_element_in_atom11339( FOLLOW_table_element_in_atom11339_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_outer_join_sign_in_atom11341_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_outer_join_sign_in_atom11341( FOLLOW_outer_join_sign_in_atom11341_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_bind_variable_in_atom11352_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_bind_variable_in_atom11352( FOLLOW_bind_variable_in_atom11352_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_atom11363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_atom11363( FOLLOW_constant_in_atom11363_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_in_atom11374_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_in_atom11374( FOLLOW_general_element_in_atom11374_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_atom11385_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x041103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_atom11385( FOLLOW_LEFT_PAREN_in_atom11385_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_atom11422_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_atom11422( FOLLOW_subquery_in_atom11422_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_atom11424_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_atom11424( FOLLOW_RIGHT_PAREN_in_atom11424_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_operation_part_in_atom11426_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_operation_part_in_atom11426( FOLLOW_subquery_operation_part_in_atom11426_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_or_vector_in_atom11447_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_or_vector_in_atom11447( FOLLOW_expression_or_vector_in_atom11447_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_atom11449_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_atom11449( FOLLOW_RIGHT_PAREN_in_atom11449_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_or_vector11550_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_expression_or_vector11550( FOLLOW_expression_in_expression_or_vector11550_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_vector_expr_in_expression_or_vector11553_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_vector_expr_in_expression_or_vector11553( FOLLOW_vector_expr_in_expression_or_vector11553_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_vector_expr11613_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_vector_expr11613( FOLLOW_COMMA_in_vector_expr11613_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_vector_expr11615_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_vector_expr11615( FOLLOW_expression_in_vector_expr11615_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_vector_expr11618_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_vector_expr11618( FOLLOW_COMMA_in_vector_expr11618_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_vector_expr11620_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_vector_expr11620( FOLLOW_expression_in_vector_expr11620_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_some_key_in_quantified_expression11669_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_some_key_in_quantified_expression11669( FOLLOW_some_key_in_quantified_expression11669_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exists_key_in_quantified_expression11673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exists_key_in_quantified_expression11673( FOLLOW_exists_key_in_quantified_expression11673_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_quantified_expression11677_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_quantified_expression11677( FOLLOW_all_key_in_quantified_expression11677_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_quantified_expression11681_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_quantified_expression11681( FOLLOW_any_key_in_quantified_expression11681_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_quantified_expression11708_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_quantified_expression11708( FOLLOW_LEFT_PAREN_in_quantified_expression11708_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_quantified_expression11710_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_quantified_expression11710( FOLLOW_subquery_in_quantified_expression11710_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_quantified_expression11712_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_quantified_expression11712( FOLLOW_RIGHT_PAREN_in_quantified_expression11712_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_quantified_expression11729_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_quantified_expression11729( FOLLOW_LEFT_PAREN_in_quantified_expression11729_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_quantified_expression11731_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_quantified_expression11731( FOLLOW_expression_wrapper_in_quantified_expression11731_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_quantified_expression11733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_quantified_expression11733( FOLLOW_RIGHT_PAREN_in_quantified_expression11733_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_stantard_function_enabling_over_in_standard_function11869_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_stantard_function_enabling_over_in_standard_function11869( FOLLOW_stantard_function_enabling_over_in_standard_function11869_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_function_argument_analytic_in_standard_function11872_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_function_argument_analytic_in_standard_function11872( FOLLOW_function_argument_analytic_in_standard_function11872_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_clause_in_standard_function11874_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_clause_in_standard_function11874( FOLLOW_over_clause_in_standard_function11874_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_stantard_function_enabling_using_in_standard_function11886_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_stantard_function_enabling_using_in_standard_function11886( FOLLOW_stantard_function_enabling_using_in_standard_function11886_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_function_argument_modeling_in_standard_function11889_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_function_argument_modeling_in_standard_function11889( FOLLOW_function_argument_modeling_in_standard_function11889_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_clause_in_standard_function11891_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_clause_in_standard_function11891( FOLLOW_using_clause_in_standard_function11891_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_count_key_in_standard_function11903_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_count_key_in_standard_function11903( FOLLOW_count_key_in_standard_function11903_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function11918_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function11918( FOLLOW_LEFT_PAREN_in_standard_function11918_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_standard_function11938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_standard_function11938( FOLLOW_ASTERISK_in_standard_function11938_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_standard_function11943_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_standard_function11943( FOLLOW_distinct_key_in_standard_function11943_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_standard_function11945_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_standard_function11945( FOLLOW_unique_key_in_standard_function11945_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_standard_function11947_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_standard_function11947( FOLLOW_all_key_in_standard_function11947_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function11951_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function11951( FOLLOW_concatenation_wrapper_in_standard_function11951_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function11967_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function11967( FOLLOW_RIGHT_PAREN_in_standard_function11967_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_clause_in_standard_function11969_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_clause_in_standard_function11969( FOLLOW_over_clause_in_standard_function11969_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cast_key_in_standard_function11982_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cast_key_in_standard_function11982( FOLLOW_cast_key_in_standard_function11982_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlcast_key_in_standard_function11985_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlcast_key_in_standard_function11985( FOLLOW_xmlcast_key_in_standard_function11985_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12002_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000004C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12002( FOLLOW_LEFT_PAREN_in_standard_function12002_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_key_in_standard_function12034_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_key_in_standard_function12034( FOLLOW_multiset_key_in_standard_function12034_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12037_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12037( FOLLOW_LEFT_PAREN_in_standard_function12037_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_standard_function12039_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_standard_function12039( FOLLOW_subquery_in_standard_function12039_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_standard_function12041_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_standard_function12041( FOLLOW_order_by_clause_in_standard_function12041_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12044_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12044( FOLLOW_RIGHT_PAREN_in_standard_function12044_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_standard_function12062_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_standard_function12062( FOLLOW_as_key_in_standard_function12062_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_standard_function12065_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_standard_function12065( FOLLOW_type_spec_in_standard_function12065_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12083_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12083( FOLLOW_concatenation_wrapper_in_standard_function12083_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_standard_function12085_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_standard_function12085( FOLLOW_as_key_in_standard_function12085_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_standard_function12088_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_standard_function12088( FOLLOW_type_spec_in_standard_function12088_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12116_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12116( FOLLOW_RIGHT_PAREN_in_standard_function12116_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_chr_key_in_standard_function12127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_chr_key_in_standard_function12127( FOLLOW_chr_key_in_standard_function12127_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12142_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12142( FOLLOW_LEFT_PAREN_in_standard_function12142_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12161( FOLLOW_concatenation_wrapper_in_standard_function12161_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_standard_function12163_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_standard_function12163( FOLLOW_using_key_in_standard_function12163_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nchar_cs_key_in_standard_function12166_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nchar_cs_key_in_standard_function12166( FOLLOW_nchar_cs_key_in_standard_function12166_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12181( FOLLOW_RIGHT_PAREN_in_standard_function12181_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_collect_key_in_standard_function12192_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_collect_key_in_standard_function12192( FOLLOW_collect_key_in_standard_function12192_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12207_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12207( FOLLOW_LEFT_PAREN_in_standard_function12207_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_standard_function12227_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_standard_function12227( FOLLOW_distinct_key_in_standard_function12227_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_standard_function12229_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_standard_function12229( FOLLOW_unique_key_in_standard_function12229_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12233_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12233( FOLLOW_concatenation_wrapper_in_standard_function12233_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_collect_order_by_part_in_standard_function12235_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_collect_order_by_part_in_standard_function12235( FOLLOW_collect_order_by_part_in_standard_function12235_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12250_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12250( FOLLOW_RIGHT_PAREN_in_standard_function12250_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_stantard_function_enabling_within_or_over_in_standard_function12261_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_stantard_function_enabling_within_or_over_in_standard_function12261( FOLLOW_stantard_function_enabling_within_or_over_in_standard_function12261_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_function_argument_in_standard_function12277_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_function_argument_in_standard_function12277( FOLLOW_function_argument_in_standard_function12277_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_within_or_over_part_in_standard_function12279_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_within_or_over_part_in_standard_function12279( FOLLOW_within_or_over_part_in_standard_function12279_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_decompose_key_in_standard_function12291_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_decompose_key_in_standard_function12291( FOLLOW_decompose_key_in_standard_function12291_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12306_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12306( FOLLOW_LEFT_PAREN_in_standard_function12306_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12325_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12325( FOLLOW_concatenation_wrapper_in_standard_function12325_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_canonical_key_in_standard_function12328_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_canonical_key_in_standard_function12328( FOLLOW_canonical_key_in_standard_function12328_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_compatibility_key_in_standard_function12330_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_compatibility_key_in_standard_function12330( FOLLOW_compatibility_key_in_standard_function12330_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12347_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12347( FOLLOW_RIGHT_PAREN_in_standard_function12347_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_extract_key_in_standard_function12358_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_extract_key_in_standard_function12358( FOLLOW_extract_key_in_standard_function12358_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12373( FOLLOW_LEFT_PAREN_in_standard_function12373_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_standard_function12391_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_standard_function12391( FOLLOW_REGULAR_ID_in_standard_function12391_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_standard_function12393_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_standard_function12393( FOLLOW_from_key_in_standard_function12393_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12396_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12396( FOLLOW_concatenation_wrapper_in_standard_function12396_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12411_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12411( FOLLOW_RIGHT_PAREN_in_standard_function12411_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_value_key_in_standard_function12423_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_value_key_in_standard_function12423( FOLLOW_first_value_key_in_standard_function12423_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_last_value_key_in_standard_function12426_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_last_value_key_in_standard_function12426( FOLLOW_last_value_key_in_standard_function12426_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_function_argument_analytic_in_standard_function12430_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_function_argument_analytic_in_standard_function12430( FOLLOW_function_argument_analytic_in_standard_function12430_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_respect_or_ignore_nulls_in_standard_function12445_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_respect_or_ignore_nulls_in_standard_function12445( FOLLOW_respect_or_ignore_nulls_in_standard_function12445_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_clause_in_standard_function12448_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_clause_in_standard_function12448( FOLLOW_over_clause_in_standard_function12448_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_stantard_function_pedictions_in_standard_function12459_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_stantard_function_pedictions_in_standard_function12459( FOLLOW_stantard_function_pedictions_in_standard_function12459_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12474_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12474( FOLLOW_LEFT_PAREN_in_standard_function12474_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12492_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000002000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12492( FOLLOW_expression_wrapper_in_standard_function12492_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function12495_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function12495( FOLLOW_COMMA_in_standard_function12495_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12497_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000002000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12497( FOLLOW_expression_wrapper_in_standard_function12497_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cost_matrix_clause_in_standard_function12501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cost_matrix_clause_in_standard_function12501( FOLLOW_cost_matrix_clause_in_standard_function12501_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_clause_in_standard_function12504_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_clause_in_standard_function12504( FOLLOW_using_clause_in_standard_function12504_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12520_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12520( FOLLOW_RIGHT_PAREN_in_standard_function12520_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_translate_key_in_standard_function12531_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_translate_key_in_standard_function12531( FOLLOW_translate_key_in_standard_function12531_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12546_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12546( FOLLOW_LEFT_PAREN_in_standard_function12546_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12565_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12565( FOLLOW_expression_wrapper_in_standard_function12565_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_standard_function12568_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_standard_function12568( FOLLOW_using_key_in_standard_function12568_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_char_cs_key_in_standard_function12572_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_char_cs_key_in_standard_function12572( FOLLOW_char_cs_key_in_standard_function12572_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nchar_cs_key_in_standard_function12574_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nchar_cs_key_in_standard_function12574( FOLLOW_nchar_cs_key_in_standard_function12574_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function12601_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function12601( FOLLOW_COMMA_in_standard_function12601_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12603_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12603( FOLLOW_expression_wrapper_in_standard_function12603_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12620_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12620( FOLLOW_RIGHT_PAREN_in_standard_function12620_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_treat_key_in_standard_function12631_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_treat_key_in_standard_function12631( FOLLOW_treat_key_in_standard_function12631_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12646_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12646( FOLLOW_LEFT_PAREN_in_standard_function12646_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12664_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12664( FOLLOW_expression_wrapper_in_standard_function12664_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_standard_function12666_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_standard_function12666( FOLLOW_as_key_in_standard_function12666_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ref_key_in_standard_function12669_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ref_key_in_standard_function12669( FOLLOW_ref_key_in_standard_function12669_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_standard_function12672_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_standard_function12672( FOLLOW_type_spec_in_standard_function12672_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12687_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12687( FOLLOW_RIGHT_PAREN_in_standard_function12687_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_trim_key_in_standard_function12698_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_trim_key_in_standard_function12698( FOLLOW_trim_key_in_standard_function12698_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12713_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020026128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12713( FOLLOW_LEFT_PAREN_in_standard_function12713_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_leading_key_in_standard_function12733_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_leading_key_in_standard_function12733( FOLLOW_leading_key_in_standard_function12733_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_trailing_key_in_standard_function12735_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_trailing_key_in_standard_function12735( FOLLOW_trailing_key_in_standard_function12735_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_both_key_in_standard_function12737_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_both_key_in_standard_function12737( FOLLOW_both_key_in_standard_function12737_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_quoted_string_in_standard_function12741_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_quoted_string_in_standard_function12741( FOLLOW_quoted_string_in_standard_function12741_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_standard_function12744_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_standard_function12744( FOLLOW_from_key_in_standard_function12744_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12764_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12764( FOLLOW_concatenation_wrapper_in_standard_function12764_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12778( FOLLOW_RIGHT_PAREN_in_standard_function12778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlagg_key_in_standard_function12789_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlagg_key_in_standard_function12789( FOLLOW_xmlagg_key_in_standard_function12789_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12804_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12804( FOLLOW_LEFT_PAREN_in_standard_function12804_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12823_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12823( FOLLOW_expression_wrapper_in_standard_function12823_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_standard_function12825_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_standard_function12825( FOLLOW_order_by_clause_in_standard_function12825_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12841_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12841( FOLLOW_RIGHT_PAREN_in_standard_function12841_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function12856_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function12856( FOLLOW_PERIOD_in_standard_function12856_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function12858_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function12858( FOLLOW_general_element_part_in_standard_function12858_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlcolattval_key_in_standard_function12872_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlcolattval_key_in_standard_function12872( FOLLOW_xmlcolattval_key_in_standard_function12872_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlforest_key_in_standard_function12875_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlforest_key_in_standard_function12875( FOLLOW_xmlforest_key_in_standard_function12875_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12892_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12892( FOLLOW_LEFT_PAREN_in_standard_function12892_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_multiuse_expression_element_in_standard_function12910_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_multiuse_expression_element_in_standard_function12910( FOLLOW_xml_multiuse_expression_element_in_standard_function12910_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function12913_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function12913( FOLLOW_COMMA_in_standard_function12913_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_multiuse_expression_element_in_standard_function12916_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_multiuse_expression_element_in_standard_function12916( FOLLOW_xml_multiuse_expression_element_in_standard_function12916_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12932_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12932( FOLLOW_RIGHT_PAREN_in_standard_function12932_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function12947_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function12947( FOLLOW_PERIOD_in_standard_function12947_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function12949_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function12949( FOLLOW_general_element_part_in_standard_function12949_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlelement_key_in_standard_function12962_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlelement_key_in_standard_function12962( FOLLOW_xmlelement_key_in_standard_function12962_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12977_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12977( FOLLOW_LEFT_PAREN_in_standard_function12977_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_entityescaping_key_in_standard_function12996_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_entityescaping_key_in_standard_function12996( FOLLOW_entityescaping_key_in_standard_function12996_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_noentityescaping_key_in_standard_function12998_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_noentityescaping_key_in_standard_function12998( FOLLOW_noentityescaping_key_in_standard_function12998_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_name_key_in_standard_function13019_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_name_key_in_standard_function13019( FOLLOW_name_key_in_standard_function13019_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_evalname_key_in_standard_function13021_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_evalname_key_in_standard_function13021( FOLLOW_evalname_key_in_standard_function13021_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function13025_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function13025( FOLLOW_expression_wrapper_in_standard_function13025_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13046_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13046( FOLLOW_COMMA_in_standard_function13046_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_attributes_clause_in_standard_function13049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_attributes_clause_in_standard_function13049( FOLLOW_xml_attributes_clause_in_standard_function13049_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13070_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13070( FOLLOW_COMMA_in_standard_function13070_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function13073_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function13073( FOLLOW_expression_wrapper_in_standard_function13073_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_standard_function13075_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_standard_function13075( FOLLOW_column_alias_in_standard_function13075_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13092_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13092( FOLLOW_RIGHT_PAREN_in_standard_function13092_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13107_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13107( FOLLOW_PERIOD_in_standard_function13107_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13109_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13109( FOLLOW_general_element_part_in_standard_function13109_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlexists_key_in_standard_function13122_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlexists_key_in_standard_function13122( FOLLOW_xmlexists_key_in_standard_function13122_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13137_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13137( FOLLOW_LEFT_PAREN_in_standard_function13137_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function13155_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function13155( FOLLOW_expression_wrapper_in_standard_function13155_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_passing_clause_in_standard_function13173_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_passing_clause_in_standard_function13173( FOLLOW_xml_passing_clause_in_standard_function13173_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13188_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13188( FOLLOW_RIGHT_PAREN_in_standard_function13188_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlparse_key_in_standard_function13199_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlparse_key_in_standard_function13199( FOLLOW_xmlparse_key_in_standard_function13199_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13214_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13214( FOLLOW_LEFT_PAREN_in_standard_function13214_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_document_key_in_standard_function13234_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_document_key_in_standard_function13234( FOLLOW_document_key_in_standard_function13234_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_content_key_in_standard_function13236_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_content_key_in_standard_function13236( FOLLOW_content_key_in_standard_function13236_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13239_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13239( FOLLOW_concatenation_wrapper_in_standard_function13239_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_wellformed_key_in_standard_function13241_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_wellformed_key_in_standard_function13241( FOLLOW_wellformed_key_in_standard_function13241_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13256( FOLLOW_RIGHT_PAREN_in_standard_function13256_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13271_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13271( FOLLOW_PERIOD_in_standard_function13271_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13273_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13273( FOLLOW_general_element_part_in_standard_function13273_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlpi_key_in_standard_function13286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlpi_key_in_standard_function13286( FOLLOW_xmlpi_key_in_standard_function13286_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13301_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13301( FOLLOW_LEFT_PAREN_in_standard_function13301_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_name_key_in_standard_function13325_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_name_key_in_standard_function13325( FOLLOW_name_key_in_standard_function13325_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_id_in_standard_function13327_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_id_in_standard_function13327( FOLLOW_id_in_standard_function13327_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_evalname_key_in_standard_function13351_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_evalname_key_in_standard_function13351( FOLLOW_evalname_key_in_standard_function13351_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13353_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13353( FOLLOW_concatenation_wrapper_in_standard_function13353_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13390_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13390( FOLLOW_COMMA_in_standard_function13390_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13393_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13393( FOLLOW_concatenation_wrapper_in_standard_function13393_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13409_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13409( FOLLOW_RIGHT_PAREN_in_standard_function13409_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13424_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13424( FOLLOW_PERIOD_in_standard_function13424_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13426_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13426( FOLLOW_general_element_part_in_standard_function13426_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlquery_key_in_standard_function13439_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlquery_key_in_standard_function13439( FOLLOW_xmlquery_key_in_standard_function13439_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13454_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13454( FOLLOW_LEFT_PAREN_in_standard_function13454_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13473_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13473( FOLLOW_concatenation_wrapper_in_standard_function13473_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_passing_clause_in_standard_function13475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_passing_clause_in_standard_function13475( FOLLOW_xml_passing_clause_in_standard_function13475_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_returning_key_in_standard_function13494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_returning_key_in_standard_function13494( FOLLOW_returning_key_in_standard_function13494_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_content_key_in_standard_function13497_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000020000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_content_key_in_standard_function13497( FOLLOW_content_key_in_standard_function13497_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_null_key_in_standard_function13501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_null_key_in_standard_function13501( FOLLOW_null_key_in_standard_function13501_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_on_key_in_standard_function13503_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_on_key_in_standard_function13503( FOLLOW_on_key_in_standard_function13503_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_empty_key_in_standard_function13506_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_empty_key_in_standard_function13506( FOLLOW_empty_key_in_standard_function13506_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13523_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13523( FOLLOW_RIGHT_PAREN_in_standard_function13523_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13538_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13538( FOLLOW_PERIOD_in_standard_function13538_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13540_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13540( FOLLOW_general_element_part_in_standard_function13540_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlroot_key_in_standard_function13553_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlroot_key_in_standard_function13553( FOLLOW_xmlroot_key_in_standard_function13553_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13568_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13568( FOLLOW_LEFT_PAREN_in_standard_function13568_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13586_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13586( FOLLOW_concatenation_wrapper_in_standard_function13586_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlroot_param_version_part_in_standard_function13608_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlroot_param_version_part_in_standard_function13608( FOLLOW_xmlroot_param_version_part_in_standard_function13608_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13631_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13631( FOLLOW_COMMA_in_standard_function13631_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlroot_param_standalone_part_in_standard_function13634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlroot_param_standalone_part_in_standard_function13634( FOLLOW_xmlroot_param_standalone_part_in_standard_function13634_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13650_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13650( FOLLOW_RIGHT_PAREN_in_standard_function13650_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13665_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13665( FOLLOW_PERIOD_in_standard_function13665_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13667_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13667( FOLLOW_general_element_part_in_standard_function13667_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlserialize_key_in_standard_function13680_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlserialize_key_in_standard_function13680( FOLLOW_xmlserialize_key_in_standard_function13680_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13695( FOLLOW_LEFT_PAREN_in_standard_function13695_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_document_key_in_standard_function13714_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_document_key_in_standard_function13714( FOLLOW_document_key_in_standard_function13714_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_content_key_in_standard_function13716_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_content_key_in_standard_function13716( FOLLOW_content_key_in_standard_function13716_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13735( FOLLOW_concatenation_wrapper_in_standard_function13735_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_standard_function13738_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_standard_function13738( FOLLOW_as_key_in_standard_function13738_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_standard_function13741_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_standard_function13741( FOLLOW_type_spec_in_standard_function13741_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlserialize_param_enconding_part_in_standard_function13761_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlserialize_param_enconding_part_in_standard_function13761( FOLLOW_xmlserialize_param_enconding_part_in_standard_function13761_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlserialize_param_version_part_in_standard_function13780_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlserialize_param_version_part_in_standard_function13780( FOLLOW_xmlserialize_param_version_part_in_standard_function13780_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlserialize_param_ident_part_in_standard_function13799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlserialize_param_ident_part_in_standard_function13799( FOLLOW_xmlserialize_param_ident_part_in_standard_function13799_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_hide_key_in_standard_function13820_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_hide_key_in_standard_function13820( FOLLOW_hide_key_in_standard_function13820_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_show_key_in_standard_function13822_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_show_key_in_standard_function13822( FOLLOW_show_key_in_standard_function13822_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_defaults_key_in_standard_function13825_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_defaults_key_in_standard_function13825( FOLLOW_defaults_key_in_standard_function13825_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13841_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13841( FOLLOW_RIGHT_PAREN_in_standard_function13841_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13856_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13856( FOLLOW_PERIOD_in_standard_function13856_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13858_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13858( FOLLOW_general_element_part_in_standard_function13858_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmltable_key_in_standard_function13871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmltable_key_in_standard_function13871( FOLLOW_xmltable_key_in_standard_function13871_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13886_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13886( FOLLOW_LEFT_PAREN_in_standard_function13886_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_namespaces_clause_in_standard_function13904_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_namespaces_clause_in_standard_function13904( FOLLOW_xml_namespaces_clause_in_standard_function13904_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13923_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13923( FOLLOW_concatenation_wrapper_in_standard_function13923_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_passing_clause_in_standard_function13941_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_passing_clause_in_standard_function13941( FOLLOW_xml_passing_clause_in_standard_function13941_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_columns_key_in_standard_function13961_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_columns_key_in_standard_function13961( FOLLOW_columns_key_in_standard_function13961_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_table_column_in_standard_function13964_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_table_column_in_standard_function13964( FOLLOW_xml_table_column_in_standard_function13964_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13967_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13967( FOLLOW_COMMA_in_standard_function13967_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_table_column_in_standard_function13970_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_table_column_in_standard_function13970( FOLLOW_xml_table_column_in_standard_function13970_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13987_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13987( FOLLOW_RIGHT_PAREN_in_standard_function13987_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function14002_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function14002( FOLLOW_PERIOD_in_standard_function14002_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function14004_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function14004( FOLLOW_general_element_part_in_standard_function14004_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_stantard_function_enabling_over14029_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_stantard_function_enabling_over14029( FOLLOW_REGULAR_ID_in_stantard_function_enabling_over14029_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_stantard_function_enabling_using14057_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_stantard_function_enabling_using14057( FOLLOW_REGULAR_ID_in_stantard_function_enabling_using14057_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over14085_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over14085( FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over14085_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_stantard_function_pedictions14113_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_stantard_function_pedictions14113( FOLLOW_REGULAR_ID_in_stantard_function_pedictions14113_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_key_in_over_clause14138_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_key_in_over_clause14138( FOLLOW_over_key_in_over_clause14138_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_over_clause14149_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_over_clause14149( FOLLOW_LEFT_PAREN_in_over_clause14149_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_partition_clause_in_over_clause14163_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_partition_clause_in_over_clause14163( FOLLOW_query_partition_clause_in_over_clause14163_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_over_clause14179_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_over_clause14179( FOLLOW_order_by_clause_in_over_clause14179_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_clause_in_over_clause14181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_clause_in_over_clause14181( FOLLOW_windowing_clause_in_over_clause14181_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_over_clause14194_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_over_clause14194( FOLLOW_RIGHT_PAREN_in_over_clause14194_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_type_in_windowing_clause14222_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040102000612A289), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_type_in_windowing_clause14222( FOLLOW_windowing_type_in_windowing_clause14222_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_between_key_in_windowing_clause14233_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040102000612A209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_between_key_in_windowing_clause14233( FOLLOW_between_key_in_windowing_clause14233_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_elements_in_windowing_clause14235_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_elements_in_windowing_clause14235( FOLLOW_windowing_elements_in_windowing_clause14235_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_and_key_in_windowing_clause14237_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040102000612A209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_and_key_in_windowing_clause14237( FOLLOW_and_key_in_windowing_clause14237_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_elements_in_windowing_clause14239_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_elements_in_windowing_clause14239( FOLLOW_windowing_elements_in_windowing_clause14239_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_elements_in_windowing_clause14252_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_elements_in_windowing_clause14252( FOLLOW_windowing_elements_in_windowing_clause14252_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rows_key_in_windowing_type14311_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rows_key_in_windowing_type14311( FOLLOW_rows_key_in_windowing_type14311_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_range_key_in_windowing_type14322_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_range_key_in_windowing_type14322( FOLLOW_range_key_in_windowing_type14322_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unbounded_key_in_windowing_elements14342_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unbounded_key_in_windowing_elements14342( FOLLOW_unbounded_key_in_windowing_elements14342_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_preceding_key_in_windowing_elements14345_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_preceding_key_in_windowing_elements14345( FOLLOW_preceding_key_in_windowing_elements14345_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_current_key_in_windowing_elements14356_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_current_key_in_windowing_elements14356( FOLLOW_current_key_in_windowing_elements14356_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_row_key_in_windowing_elements14359_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_row_key_in_windowing_elements14359( FOLLOW_row_key_in_windowing_elements14359_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_windowing_elements14370_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_windowing_elements14370( FOLLOW_concatenation_wrapper_in_windowing_elements14370_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_preceding_key_in_windowing_elements14373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_preceding_key_in_windowing_elements14373( FOLLOW_preceding_key_in_windowing_elements14373_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_following_key_in_windowing_elements14376_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_following_key_in_windowing_elements14376( FOLLOW_following_key_in_windowing_elements14376_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_using_clause14398_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103040612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_using_clause14398( FOLLOW_using_key_in_using_clause14398_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_using_clause14410_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_using_clause14410( FOLLOW_ASTERISK_in_using_clause14410_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_element_in_using_clause14421_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_element_in_using_clause14421( FOLLOW_using_element_in_using_clause14421_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_using_clause14424_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103040612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_using_clause14424( FOLLOW_COMMA_in_using_clause14424_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_element_in_using_clause14427_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_element_in_using_clause14427( FOLLOW_using_element_in_using_clause14427_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_using_element14456_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_using_element14456( FOLLOW_in_key_in_using_element14456_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_out_key_in_using_element14458_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_out_key_in_using_element14458( FOLLOW_out_key_in_using_element14458_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_out_key_in_using_element14461_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_out_key_in_using_element14461( FOLLOW_out_key_in_using_element14461_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_list_elements_in_using_element14465_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_list_elements_in_using_element14465( FOLLOW_select_list_elements_in_using_element14465_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_using_element14467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_using_element14467( FOLLOW_column_alias_in_using_element14467_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_key_in_collect_order_by_part14513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_key_in_collect_order_by_part14513( FOLLOW_order_key_in_collect_order_by_part14513_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_collect_order_by_part14516_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_collect_order_by_part14516( FOLLOW_by_key_in_collect_order_by_part14516_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_collect_order_by_part14519_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_collect_order_by_part14519( FOLLOW_concatenation_wrapper_in_collect_order_by_part14519_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_within_key_in_within_or_over_part14539_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000100000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_within_key_in_within_or_over_part14539( FOLLOW_within_key_in_within_or_over_part14539_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_key_in_within_or_over_part14542_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_key_in_within_or_over_part14542( FOLLOW_group_key_in_within_or_over_part14542_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_within_or_over_part14545_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_within_or_over_part14545( FOLLOW_LEFT_PAREN_in_within_or_over_part14545_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_within_or_over_part14547_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_within_or_over_part14547( FOLLOW_order_by_clause_in_within_or_over_part14547_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_within_or_over_part14549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_within_or_over_part14549( FOLLOW_RIGHT_PAREN_in_within_or_over_part14549_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_clause_in_within_or_over_part14560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_clause_in_within_or_over_part14560( FOLLOW_over_clause_in_within_or_over_part14560_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cost_key_in_cost_matrix_clause14580_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cost_key_in_cost_matrix_clause14580( FOLLOW_cost_key_in_cost_matrix_clause14580_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_key_in_cost_matrix_clause14592_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_key_in_cost_matrix_clause14592( FOLLOW_model_key_in_cost_matrix_clause14592_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_auto_key_in_cost_matrix_clause14594_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_auto_key_in_cost_matrix_clause14594( FOLLOW_auto_key_in_cost_matrix_clause14594_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_cost_matrix_clause14606_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_cost_matrix_clause14606( FOLLOW_LEFT_PAREN_in_cost_matrix_clause14606_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cost_class_name_in_cost_matrix_clause14608_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cost_class_name_in_cost_matrix_clause14608( FOLLOW_cost_class_name_in_cost_matrix_clause14608_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_cost_matrix_clause14611_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_cost_matrix_clause14611( FOLLOW_COMMA_in_cost_matrix_clause14611_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cost_class_name_in_cost_matrix_clause14614_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cost_class_name_in_cost_matrix_clause14614( FOLLOW_cost_class_name_in_cost_matrix_clause14614_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14618_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14618( FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14618_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_key_in_cost_matrix_clause14620_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_key_in_cost_matrix_clause14620( FOLLOW_values_key_in_cost_matrix_clause14620_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_cost_matrix_clause14636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_cost_matrix_clause14636( FOLLOW_expression_list_in_cost_matrix_clause14636_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_passing_key_in_xml_passing_clause14662_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C309), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_passing_key_in_xml_passing_clause14662( FOLLOW_passing_key_in_xml_passing_clause14662_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_xml_passing_clause14666_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_xml_passing_clause14666( FOLLOW_by_key_in_xml_passing_clause14666_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_value_key_in_xml_passing_clause14669_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_value_key_in_xml_passing_clause14669( FOLLOW_value_key_in_xml_passing_clause14669_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_xml_passing_clause14685_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_xml_passing_clause14685( FOLLOW_expression_wrapper_in_xml_passing_clause14685_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_xml_passing_clause14687_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_xml_passing_clause14687( FOLLOW_column_alias_in_xml_passing_clause14687_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_xml_passing_clause14691_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_xml_passing_clause14691( FOLLOW_COMMA_in_xml_passing_clause14691_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_xml_passing_clause14694_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_xml_passing_clause14694( FOLLOW_expression_wrapper_in_xml_passing_clause14694_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_xml_passing_clause14696_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_xml_passing_clause14696( FOLLOW_column_alias_in_xml_passing_clause14696_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlattributes_key_in_xml_attributes_clause14718_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlattributes_key_in_xml_attributes_clause14718( FOLLOW_xmlattributes_key_in_xml_attributes_clause14718_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_xml_attributes_clause14729_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_xml_attributes_clause14729( FOLLOW_LEFT_PAREN_in_xml_attributes_clause14729_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_entityescaping_key_in_xml_attributes_clause14744_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_entityescaping_key_in_xml_attributes_clause14744( FOLLOW_entityescaping_key_in_xml_attributes_clause14744_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_noentityescaping_key_in_xml_attributes_clause14746_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_noentityescaping_key_in_xml_attributes_clause14746( FOLLOW_noentityescaping_key_in_xml_attributes_clause14746_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_schemacheck_key_in_xml_attributes_clause14763_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_schemacheck_key_in_xml_attributes_clause14763( FOLLOW_schemacheck_key_in_xml_attributes_clause14763_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_noschemacheck_key_in_xml_attributes_clause14765_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_noschemacheck_key_in_xml_attributes_clause14765( FOLLOW_noschemacheck_key_in_xml_attributes_clause14765_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14781_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14781( FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14781_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_xml_attributes_clause14784_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_xml_attributes_clause14784( FOLLOW_COMMA_in_xml_attributes_clause14784_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14787_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14787( FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14787_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14799( FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14799_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14819_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14819( FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14819_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14830_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000012), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14830( FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14830_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14845_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14845( FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14845_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_xml_namespaces_clause14847_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_xml_namespaces_clause14847( FOLLOW_column_alias_in_xml_namespaces_clause14847_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_xml_namespaces_clause14868_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_xml_namespaces_clause14868( FOLLOW_COMMA_in_xml_namespaces_clause14868_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14871_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14871( FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14871_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_xml_namespaces_clause14873_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_xml_namespaces_clause14873( FOLLOW_column_alias_in_xml_namespaces_clause14873_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_general_default_part_in_xml_namespaces_clause14895_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_general_default_part_in_xml_namespaces_clause14895( FOLLOW_xml_general_default_part_in_xml_namespaces_clause14895_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause14907_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause14907( FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause14907_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_column_name_in_xml_table_column14927_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_column_name_in_xml_table_column14927( FOLLOW_xml_column_name_in_xml_table_column14927_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_xml_table_column14938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_xml_table_column14938( FOLLOW_for_key_in_xml_table_column14938_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ordinality_key_in_xml_table_column14940_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ordinality_key_in_xml_table_column14940( FOLLOW_ordinality_key_in_xml_table_column14940_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_xml_table_column14951_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_xml_table_column14951( FOLLOW_type_spec_in_xml_table_column14951_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_path_key_in_xml_table_column14954_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_path_key_in_xml_table_column14954( FOLLOW_path_key_in_xml_table_column14954_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xml_table_column14956_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xml_table_column14956( FOLLOW_concatenation_wrapper_in_xml_table_column14956_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_general_default_part_in_xml_table_column14966_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_general_default_part_in_xml_table_column14966( FOLLOW_xml_general_default_part_in_xml_table_column14966_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_default_key_in_xml_general_default_part15022_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_default_key_in_xml_general_default_part15022( FOLLOW_default_key_in_xml_general_default_part15022_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xml_general_default_part15025_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xml_general_default_part15025( FOLLOW_concatenation_wrapper_in_xml_general_default_part15025_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_xml_multiuse_expression_element15053_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_xml_multiuse_expression_element15053( FOLLOW_expression_in_xml_multiuse_expression_element15053_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_xml_multiuse_expression_element15056_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_xml_multiuse_expression_element15056( FOLLOW_as_key_in_xml_multiuse_expression_element15056_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_id_expression_in_xml_multiuse_expression_element15059_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_id_expression_in_xml_multiuse_expression_element15059( FOLLOW_id_expression_in_xml_multiuse_expression_element15059_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_evalname_key_in_xml_multiuse_expression_element15064_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_evalname_key_in_xml_multiuse_expression_element15064( FOLLOW_evalname_key_in_xml_multiuse_expression_element15064_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_xml_multiuse_expression_element15066_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_xml_multiuse_expression_element15066( FOLLOW_concatenation_in_xml_multiuse_expression_element15066_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_version_key_in_xmlroot_param_version_part15177_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_version_key_in_xmlroot_param_version_part15177( FOLLOW_version_key_in_xmlroot_param_version_part15177_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_no_key_in_xmlroot_param_version_part15181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_no_key_in_xmlroot_param_version_part15181( FOLLOW_no_key_in_xmlroot_param_version_part15181_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_value_key_in_xmlroot_param_version_part15183_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_value_key_in_xmlroot_param_version_part15183( FOLLOW_value_key_in_xmlroot_param_version_part15183_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_xmlroot_param_version_part15185_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_xmlroot_param_version_part15185( FOLLOW_expression_wrapper_in_xmlroot_param_version_part15185_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_standalone_key_in_xmlroot_param_standalone_part15206_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_standalone_key_in_xmlroot_param_standalone_part15206( FOLLOW_standalone_key_in_xmlroot_param_standalone_part15206_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_yes_key_in_xmlroot_param_standalone_part15210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_yes_key_in_xmlroot_param_standalone_part15210( FOLLOW_yes_key_in_xmlroot_param_standalone_part15210_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_no_key_in_xmlroot_param_standalone_part15212_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_no_key_in_xmlroot_param_standalone_part15212( FOLLOW_no_key_in_xmlroot_param_standalone_part15212_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_value_key_in_xmlroot_param_standalone_part15214_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_value_key_in_xmlroot_param_standalone_part15214( FOLLOW_value_key_in_xmlroot_param_standalone_part15214_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_encoding_key_in_xmlserialize_param_enconding_part15236_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_encoding_key_in_xmlserialize_param_enconding_part15236( FOLLOW_encoding_key_in_xmlserialize_param_enconding_part15236_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part15239_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part15239( FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part15239_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_version_key_in_xmlserialize_param_version_part15259_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_version_key_in_xmlserialize_param_version_part15259( FOLLOW_version_key_in_xmlserialize_param_version_part15259_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part15262_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part15262( FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part15262_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_no_key_in_xmlserialize_param_ident_part15282_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_no_key_in_xmlserialize_param_ident_part15282( FOLLOW_no_key_in_xmlserialize_param_ident_part15282_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_indent_key_in_xmlserialize_param_ident_part15284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_indent_key_in_xmlserialize_param_ident_part15284( FOLLOW_indent_key_in_xmlserialize_param_ident_part15284_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_indent_key_in_xmlserialize_param_ident_part15295_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0020000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_indent_key_in_xmlserialize_param_ident_part15295( FOLLOW_indent_key_in_xmlserialize_param_ident_part15295_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_size_key_in_xmlserialize_param_ident_part15299_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_size_key_in_xmlserialize_param_ident_part15299( FOLLOW_size_key_in_xmlserialize_param_ident_part15299_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part15302_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part15302( FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part15302_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part15305_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part15305( FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part15305_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_key_in_synpred1_OracleDML1009_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_key_in_synpred1_OracleDML1009( FOLLOW_order_key_in_synpred1_OracleDML1009_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_siblings_key_in_synpred1_OracleDML1011_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_siblings_key_in_synpred1_OracleDML1011( FOLLOW_siblings_key_in_synpred1_OracleDML1011_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_synpred1_OracleDML1014_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_synpred1_OracleDML1014( FOLLOW_by_key_in_synpred1_OracleDML1014_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_synpred2_OracleDML1503_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_synpred2_OracleDML1503( FOLLOW_distinct_key_in_synpred2_OracleDML1503_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_synpred2_OracleDML1505_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_synpred2_OracleDML1505( FOLLOW_unique_key_in_synpred2_OracleDML1505_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_synpred2_OracleDML1507_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_synpred2_OracleDML1507( FOLLOW_all_key_in_synpred2_OracleDML1507_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_synpred3_OracleDML1820_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_synpred3_OracleDML1820( FOLLOW_tableview_name_in_synpred3_OracleDML1820_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_synpred3_OracleDML1822_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_synpred3_OracleDML1822( FOLLOW_PERIOD_in_synpred3_OracleDML1822_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_synpred3_OracleDML1824_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_synpred3_OracleDML1824( FOLLOW_ASTERISK_in_synpred3_OracleDML1824_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred4_OracleDML1993_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred4_OracleDML1993( FOLLOW_LEFT_PAREN_in_synpred4_OracleDML1993_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred4_OracleDML1996_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred4_OracleDML1996( FOLLOW_select_key_in_synpred4_OracleDML1996_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred4_OracleDML1998_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred4_OracleDML1998( FOLLOW_with_key_in_synpred4_OracleDML1998_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred5_OracleDML2016_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred5_OracleDML2016( FOLLOW_LEFT_PAREN_in_synpred5_OracleDML2016_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_synpred6_OracleDML2033_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_synpred6_OracleDML2033( FOLLOW_only_key_in_synpred6_OracleDML2033_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred6_OracleDML2035_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred6_OracleDML2035( FOLLOW_LEFT_PAREN_in_synpred6_OracleDML2035_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred10_OracleDML2749_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred10_OracleDML2749( FOLLOW_LEFT_PAREN_in_synpred10_OracleDML2749_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred10_OracleDML2752_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred10_OracleDML2752( FOLLOW_select_key_in_synpred10_OracleDML2752_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred10_OracleDML2754_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred10_OracleDML2754( FOLLOW_with_key_in_synpred10_OracleDML2754_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred11_OracleDML2776_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred11_OracleDML2776( FOLLOW_LEFT_PAREN_in_synpred11_OracleDML2776_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred12_OracleDML3264_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred12_OracleDML3264( FOLLOW_select_key_in_synpred12_OracleDML3264_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_synpred13_OracleDML3290_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_synpred13_OracleDML3290( FOLLOW_any_key_in_synpred13_OracleDML3290_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred14_OracleDML3495_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred14_OracleDML3495( FOLLOW_LEFT_PAREN_in_synpred14_OracleDML3495_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred15_OracleDML3868_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred15_OracleDML3868( FOLLOW_LEFT_PAREN_in_synpred15_OracleDML3868_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_key_in_synpred16_OracleDML4099_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_key_in_synpred16_OracleDML4099( FOLLOW_group_key_in_synpred16_OracleDML4099_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_synpred17_OracleDML4125_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_synpred17_OracleDML4125( FOLLOW_COMMA_in_synpred17_OracleDML4125_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_synpred17_OracleDML4127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_synpred17_OracleDML4127( FOLLOW_group_by_elements_in_synpred17_OracleDML4127_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_having_key_in_synpred18_OracleDML4179_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_having_key_in_synpred18_OracleDML4179( FOLLOW_having_key_in_synpred18_OracleDML4179_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_synpred19_OracleDML4210_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_synpred19_OracleDML4210( FOLLOW_COMMA_in_synpred19_OracleDML4210_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_synpred19_OracleDML4212_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_synpred19_OracleDML4212( FOLLOW_group_by_elements_in_synpred19_OracleDML4212_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rollup_key_in_synpred20_OracleDML4431_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rollup_key_in_synpred20_OracleDML4431( FOLLOW_rollup_key_in_synpred20_OracleDML4431_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cube_key_in_synpred20_OracleDML4433_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cube_key_in_synpred20_OracleDML4433( FOLLOW_cube_key_in_synpred20_OracleDML4433_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred21_OracleDML4449_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred21_OracleDML4449( FOLLOW_LEFT_PAREN_in_synpred21_OracleDML4449_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_synpred22_OracleDML5116_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_synpred22_OracleDML5116( FOLLOW_all_key_in_synpred22_OracleDML5116_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_synpred23_OracleDML6483_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_synpred23_OracleDML6483( FOLLOW_when_key_in_synpred23_OracleDML6483_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_matched_key_in_synpred23_OracleDML6485_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_matched_key_in_synpred23_OracleDML6485( FOLLOW_matched_key_in_synpred23_OracleDML6485_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_synpred24_OracleDML6515_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000010000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_synpred24_OracleDML6515( FOLLOW_when_key_in_synpred24_OracleDML6515_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_synpred24_OracleDML6517_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_synpred24_OracleDML6517( FOLLOW_not_key_in_synpred24_OracleDML6517_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_matched_key_in_synpred24_OracleDML6519_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_matched_key_in_synpred24_OracleDML6519( FOLLOW_matched_key_in_synpred24_OracleDML6519_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred25_OracleDML7421_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred25_OracleDML7421( FOLLOW_LEFT_PAREN_in_synpred25_OracleDML7421_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unlimited_key_in_synpred26_OracleDML7512_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unlimited_key_in_synpred26_OracleDML7512( FOLLOW_unlimited_key_in_synpred26_OracleDML7512_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred27_OracleDML7669_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred27_OracleDML7669( FOLLOW_LEFT_PAREN_in_synpred27_OracleDML7669_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred27_OracleDML7672_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred27_OracleDML7672( FOLLOW_select_key_in_synpred27_OracleDML7672_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred27_OracleDML7676_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred27_OracleDML7676( FOLLOW_with_key_in_synpred27_OracleDML7676_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cursor_key_in_synpred28_OracleDML8156_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cursor_key_in_synpred28_OracleDML8156( FOLLOW_cursor_key_in_synpred28_OracleDML8156_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred28_OracleDML8158_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred28_OracleDML8158( FOLLOW_LEFT_PAREN_in_synpred28_OracleDML8158_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred28_OracleDML8161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred28_OracleDML8161( FOLLOW_select_key_in_synpred28_OracleDML8161_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred28_OracleDML8163_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred28_OracleDML8163( FOLLOW_with_key_in_synpred28_OracleDML8163_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred29_OracleDML9543_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred29_OracleDML9543( FOLLOW_LEFT_PAREN_in_synpred29_OracleDML9543_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred29_OracleDML9547_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred29_OracleDML9547( FOLLOW_select_key_in_synpred29_OracleDML9547_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred29_OracleDML9549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred29_OracleDML9549( FOLLOW_with_key_in_synpred29_OracleDML9549_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_interval_expression_in_synpred30_OracleDML9992_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_interval_expression_in_synpred30_OracleDML9992( FOLLOW_interval_expression_in_synpred30_OracleDML9992_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_synpred31_OracleDML10232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_synpred31_OracleDML10232( FOLLOW_any_key_in_synpred31_OracleDML10232_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_synpred32_OracleDML10247_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_synpred32_OracleDML10247( FOLLOW_any_key_in_synpred32_OracleDML10247_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred33_OracleDML10601_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred33_OracleDML10601( FOLLOW_select_key_in_synpred33_OracleDML10601_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred34_OracleDML10625_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred34_OracleDML10625( FOLLOW_LEFT_PAREN_in_synpred34_OracleDML10625_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_new_key_in_synpred39_OracleDML10835_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_new_key_in_synpred39_OracleDML10835( FOLLOW_new_key_in_synpred39_OracleDML10835_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_synpred39_OracleDML10838_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_synpred39_OracleDML10838( FOLLOW_unary_expression_in_synpred39_OracleDML10838_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_synpred41_OracleDML10863_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_synpred41_OracleDML10863( FOLLOW_all_key_in_synpred41_OracleDML10863_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_synpred41_OracleDML10866_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_synpred41_OracleDML10866( FOLLOW_unary_expression_in_synpred41_OracleDML10866_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_statement_in_synpred42_OracleDML10879_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_statement_in_synpred42_OracleDML10879( FOLLOW_case_statement_in_synpred42_OracleDML10879_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_quantified_expression_in_synpred43_OracleDML10891_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_quantified_expression_in_synpred43_OracleDML10891( FOLLOW_quantified_expression_in_synpred43_OracleDML10891_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_standard_function_in_synpred44_OracleDML10902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_standard_function_in_synpred44_OracleDML10902( FOLLOW_standard_function_in_synpred44_OracleDML10902_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_synpred45_OracleDML10959_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_synpred45_OracleDML10959( FOLLOW_label_name_in_synpred45_OracleDML10959_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_synpred45_OracleDML10962_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_synpred45_OracleDML10962( FOLLOW_case_key_in_synpred45_OracleDML10962_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_synpred45_OracleDML10964_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_synpred45_OracleDML10964( FOLLOW_when_key_in_synpred45_OracleDML10964_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_element_in_synpred46_OracleDML11332_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_element_in_synpred46_OracleDML11332( FOLLOW_table_element_in_synpred46_OracleDML11332_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_outer_join_sign_in_synpred46_OracleDML11334_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_outer_join_sign_in_synpred46_OracleDML11334( FOLLOW_outer_join_sign_in_synpred46_OracleDML11334_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_synpred48_OracleDML11363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_synpred48_OracleDML11363( FOLLOW_constant_in_synpred48_OracleDML11363_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_in_synpred49_OracleDML11374_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_in_synpred49_OracleDML11374( FOLLOW_general_element_in_synpred49_OracleDML11374_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred50_OracleDML11414_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred50_OracleDML11414( FOLLOW_select_key_in_synpred50_OracleDML11414_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred50_OracleDML11418_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred50_OracleDML11418( FOLLOW_with_key_in_synpred50_OracleDML11418_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred51_OracleDML11697_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred51_OracleDML11697( FOLLOW_LEFT_PAREN_in_synpred51_OracleDML11697_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred51_OracleDML11700_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred51_OracleDML11700( FOLLOW_select_key_in_synpred51_OracleDML11700_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred51_OracleDML11702_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred51_OracleDML11702( FOLLOW_with_key_in_synpred51_OracleDML11702_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_key_in_synpred52_OracleDML12019_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_key_in_synpred52_OracleDML12019( FOLLOW_multiset_key_in_synpred52_OracleDML12019_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred52_OracleDML12021_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred52_OracleDML12021( FOLLOW_LEFT_PAREN_in_synpred52_OracleDML12021_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred52_OracleDML12025_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred52_OracleDML12025( FOLLOW_select_key_in_synpred52_OracleDML12025_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred52_OracleDML12027_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred52_OracleDML12027( FOLLOW_with_key_in_synpred52_OracleDML12027_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_default_key_in_synpred53_OracleDML14891_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_default_key_in_synpred53_OracleDML14891( FOLLOW_default_key_in_synpred53_OracleDML14891_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_default_key_in_synpred54_OracleDML14962_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_default_key_in_synpred54_OracleDML14962( FOLLOW_default_key_in_synpred54_OracleDML14962_bits, 1 );



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    174:70: ( nulls_key last_key )?
 */
static const ANTLR_INT32 dfa18_eot[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa18_eof[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa18_min[54] =
    {
	68, 113, -1, 68, -1, 113, 113, 113, 68, 68, 113, 68, 68, 113, 113, -1, 
	113, 113, 113, 113, 113, 113, 113, 68, 68, 113, 68, 68, 113, 68, 68, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 113, 68, 68, 113, 68, 68, 113, 
	113, 113, 113, 113, 113, 68, 68
    };
static const ANTLR_INT32 dfa18_max[54] =
    {
	383, 383, -1, 500, -1, 383, 383, 383, 467, 467, 383, 500, 500, 383, 383, 
	-1, 383, 383, 383, 383, 383, 383, 383, 500, 500, 383, 505, 505, 383, 452, 
	452, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 500, 500, 383, 505, 
	505, 383, 383, 383, 383, 383, 383, 505, 505
    };
static const ANTLR_INT32 dfa18_accept[54] =
    {
	-1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa18_special[54] =
    {
	40, 14, -1, 37, -1, 49, 19, 2, 39, 22, 8, 26, 16, 28, 24, -1, 11, 1, 25, 
	4, 34, 18, 36, 7, 10, 9, 29, 13, 46, 45, 48, 44, 47, 30, 33, 6, 12, 3, 
	27, 35, 42, 21, 23, 38, 20, 41, 43, 31, 32, 5, 50, 0, 15, 17
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa18_T_empty	 =   NULL;

static const ANTLR_INT32 dfa18_T0[] =
    {
	30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	29
    };

static const ANTLR_INT32 dfa18_T1[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };

static const ANTLR_INT32 dfa18_T2[] =
    {
	14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	13
    };

static const ANTLR_INT32 dfa18_T3[] =
    {
	27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	26
    };

static const ANTLR_INT32 dfa18_T4[] =
    {
	27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	26
    };

static const ANTLR_INT32 dfa18_T5[] =
    {
	53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	52
    };

static const ANTLR_INT32 dfa18_T6[] =
    {
	42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	41
    };

static const ANTLR_INT32 dfa18_T7[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15
    };

static const ANTLR_INT32 dfa18_T8[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	16
    };

static const ANTLR_INT32 dfa18_T9[] =
    {
	37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	36
    };

static const ANTLR_INT32 dfa18_T10[] =
    {
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa18_T11[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3
    };

static const ANTLR_INT32 dfa18_T12[] =
    {
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa18_T13[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15
    };

static const ANTLR_INT32 dfa18_T14[] =
    {
	32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	31
    };

static const ANTLR_INT32 dfa18_T15[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };

static const ANTLR_INT32 dfa18_T16[] =
    {
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 4, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 15
    };

static const ANTLR_INT32 dfa18_T17[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8
    };

static const ANTLR_INT32 dfa18_T18[] =
    {
	24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	23
    };

static const ANTLR_INT32 dfa18_T19[] =
    {
	45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	44
    };

static const ANTLR_INT32 dfa18_T20[] =
    {
	30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	29
    };

static const ANTLR_INT32 dfa18_T21[] =
    {
	34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	33
    };

static const ANTLR_INT32 dfa18_T22[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4
    };

static const ANTLR_INT32 dfa18_T23[] =
    {
	48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	47
    };

static const ANTLR_INT32 dfa18_T24[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };

static const ANTLR_INT32 dfa18_T25[] =
    {
	51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	50
    };

static const ANTLR_INT32 dfa18_T26[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 15
    };

static const ANTLR_INT32 dfa18_T27[] =
    {
	40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	39
    };

static const ANTLR_INT32 dfa18_T28[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa18_transitions[] =
{
    dfa18_T24, dfa18_T11, NULL, dfa18_T22, NULL, dfa18_T28, dfa18_T15, dfa18_T2, 
    dfa18_T16, dfa18_T16, dfa18_T8, dfa18_T13, dfa18_T13, dfa18_T17, dfa18_T17, 
    NULL, dfa18_T1, dfa18_T1, dfa18_T18, dfa18_T4, dfa18_T20, dfa18_T14, 
    dfa18_T21, dfa18_T7, dfa18_T7, dfa18_T9, dfa18_T10, dfa18_T10, dfa18_T27, 
    dfa18_T26, dfa18_T26, dfa18_T17, dfa18_T17, dfa18_T1, dfa18_T1, dfa18_T6, 
    dfa18_T3, dfa18_T3, dfa18_T19, dfa18_T0, dfa18_T0, dfa18_T7, dfa18_T7, 
    dfa18_T23, dfa18_T12, dfa18_T12, dfa18_T25, dfa18_T3, dfa18_T3, dfa18_T5, 
    dfa18_T0, dfa18_T0, dfa18_T12, dfa18_T12
};


/* Declare tracking structure for Cyclic DFA 18
 */
class OracleDMLCyclicDFA18 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA18( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA18_51;

	    		    ANTLR_MARKER index18_51;


	    		    LA18_51 = ctx->LA(1);

	    		     
	    		        index18_51 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_51 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_51 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    		    else if ( (LA18_51 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    			 
	    				ctx->seek(index18_51);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA18_17;

	    		    ANTLR_MARKER index18_17;


	    		    LA18_17 = ctx->LA(1);

	    		     
	    		        index18_17 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_17 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    		    else if ( (LA18_17 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_17 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index18_17);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA18_7;

	    		    ANTLR_MARKER index18_7;


	    		    LA18_7 = ctx->LA(1);

	    		     
	    		        index18_7 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_7 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 13;
	    		    }

	    		    else if ( (LA18_7 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 14;
	    		    }

	    			 
	    				ctx->seek(index18_7);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 3:

	    		{
	    		    ANTLR_UINT32 LA18_37;

	    		    ANTLR_MARKER index18_37;


	    		    LA18_37 = ctx->LA(1);

	    		     
	    		        index18_37 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_37 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    		    else if ( (LA18_37 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_37 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    			 
	    				ctx->seek(index18_37);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 4:

	    		{
	    		    ANTLR_UINT32 LA18_19;

	    		    ANTLR_MARKER index18_19;


	    		    LA18_19 = ctx->LA(1);

	    		     
	    		        index18_19 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_19 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA18_19 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_19 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    			 
	    				ctx->seek(index18_19);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 5:

	    		{
	    		    ANTLR_UINT32 LA18_49;

	    		    ANTLR_MARKER index18_49;


	    		    LA18_49 = ctx->LA(1);

	    		     
	    		        index18_49 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_49 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 52;
	    		    }

	    		    else if ( (LA18_49 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 53;
	    		    }

	    			 
	    				ctx->seek(index18_49);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 6:

	    		{
	    		    ANTLR_UINT32 LA18_35;

	    		    ANTLR_MARKER index18_35;


	    		    LA18_35 = ctx->LA(1);

	    		     
	    		        index18_35 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_35 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 41;
	    		    }

	    		    else if ( (LA18_35 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 42;
	    		    }

	    			 
	    				ctx->seek(index18_35);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 7:

	    		{
	    		    ANTLR_UINT32 LA18_23;

	    		    ANTLR_MARKER index18_23;


	    		    LA18_23 = ctx->LA(1);

	    		     
	    		        index18_23 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_23 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    		    else if ( (LA18_23 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_23 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_23 == LEFT_PAREN || LA18_23 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    			 
	    				ctx->seek(index18_23);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 8:

	    		{
	    		    ANTLR_UINT32 LA18_10;

	    		    ANTLR_MARKER index18_10;


	    		    LA18_10 = ctx->LA(1);

	    		     
	    		        index18_10 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_10 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA18_10 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    			 
	    				ctx->seek(index18_10);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 9:

	    		{
	    		    ANTLR_UINT32 LA18_25;

	    		    ANTLR_MARKER index18_25;


	    		    LA18_25 = ctx->LA(1);

	    		     
	    		        index18_25 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_25 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 36;
	    		    }

	    		    else if ( (LA18_25 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 37;
	    		    }

	    			 
	    				ctx->seek(index18_25);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 10:

	    		{
	    		    ANTLR_UINT32 LA18_24;

	    		    ANTLR_MARKER index18_24;


	    		    LA18_24 = ctx->LA(1);

	    		     
	    		        index18_24 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_24 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    		    else if ( (LA18_24 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_24 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_24 == LEFT_PAREN || LA18_24 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    			 
	    				ctx->seek(index18_24);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 11:

	    		{
	    		    ANTLR_UINT32 LA18_16;

	    		    ANTLR_MARKER index18_16;


	    		    LA18_16 = ctx->LA(1);

	    		     
	    		        index18_16 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_16 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    		    else if ( (LA18_16 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_16 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index18_16);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 12:

	    		{
	    		    ANTLR_UINT32 LA18_36;

	    		    ANTLR_MARKER index18_36;


	    		    LA18_36 = ctx->LA(1);

	    		     
	    		        index18_36 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_36 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    		    else if ( (LA18_36 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_36 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    			 
	    				ctx->seek(index18_36);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 13:

	    		{
	    		    ANTLR_UINT32 LA18_27;

	    		    ANTLR_MARKER index18_27;


	    		    LA18_27 = ctx->LA(1);

	    		     
	    		        index18_27 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_27 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 38;
	    		    }

	    		    else if ( (LA18_27 == COMMA || LA18_27 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_27 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_27);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 14:

	    		{
	    		    ANTLR_UINT32 LA18_1;

	    		    ANTLR_MARKER index18_1;


	    		    LA18_1 = ctx->LA(1);

	    		     
	    		        index18_1 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA18_1 == DELIMITED_ID || LA18_1 == INTRODUCER) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_1);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 15:

	    		{
	    		    ANTLR_UINT32 LA18_52;

	    		    ANTLR_MARKER index18_52;


	    		    LA18_52 = ctx->LA(1);

	    		     
	    		        index18_52 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_52 == COMMA || LA18_52 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_52 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA18_52 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_52);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 16:

	    		{
	    		    ANTLR_UINT32 LA18_12;

	    		    ANTLR_MARKER index18_12;


	    		    LA18_12 = ctx->LA(1);

	    		     
	    		        index18_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_12 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA18_12 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_12 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_12 == LEFT_PAREN || LA18_12 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    			 
	    				ctx->seek(index18_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 17:

	    		{
	    		    ANTLR_UINT32 LA18_53;

	    		    ANTLR_MARKER index18_53;


	    		    LA18_53 = ctx->LA(1);

	    		     
	    		        index18_53 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_53 == COMMA || LA18_53 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_53 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA18_53 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_53);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 18:

	    		{
	    		    ANTLR_UINT32 LA18_21;

	    		    ANTLR_MARKER index18_21;


	    		    LA18_21 = ctx->LA(1);

	    		     
	    		        index18_21 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_21 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 31;
	    		    }

	    		    else if ( (LA18_21 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 32;
	    		    }

	    			 
	    				ctx->seek(index18_21);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 19:

	    		{
	    		    ANTLR_UINT32 LA18_6;

	    		    ANTLR_MARKER index18_6;


	    		    LA18_6 = ctx->LA(1);

	    		     
	    		        index18_6 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_6 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA18_6 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_6 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index18_6);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 20:

	    		{
	    		    ANTLR_UINT32 LA18_44;

	    		    ANTLR_MARKER index18_44;


	    		    LA18_44 = ctx->LA(1);

	    		     
	    		        index18_44 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_44 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA18_44 == COMMA || LA18_44 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_44 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_44);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 21:

	    		{
	    		    ANTLR_UINT32 LA18_41;

	    		    ANTLR_MARKER index18_41;


	    		    LA18_41 = ctx->LA(1);

	    		     
	    		        index18_41 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_41 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_41 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_41 == LEFT_PAREN || LA18_41 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_41 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    			 
	    				ctx->seek(index18_41);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 22:

	    		{
	    		    ANTLR_UINT32 LA18_9;

	    		    ANTLR_MARKER index18_9;


	    		    LA18_9 = ctx->LA(1);

	    		     
	    		        index18_9 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_9 == COMMA || LA18_9 == PERIOD || LA18_9 == REGULAR_ID || LA18_9 == SQL92_RESERVED_ASC || LA18_9 == SQL92_RESERVED_DESC) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_9 == LEFT_PAREN || LA18_9 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_9);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 23:

	    		{
	    		    ANTLR_UINT32 LA18_42;

	    		    ANTLR_MARKER index18_42;


	    		    LA18_42 = ctx->LA(1);

	    		     
	    		        index18_42 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_42 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_42 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_42 == LEFT_PAREN || LA18_42 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_42 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    			 
	    				ctx->seek(index18_42);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 24:

	    		{
	    		    ANTLR_UINT32 LA18_14;

	    		    ANTLR_MARKER index18_14;


	    		    LA18_14 = ctx->LA(1);

	    		     
	    		        index18_14 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_14 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    		    else if ( (LA18_14 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_14 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index18_14);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 25:

	    		{
	    		    ANTLR_UINT32 LA18_18;

	    		    ANTLR_MARKER index18_18;


	    		    LA18_18 = ctx->LA(1);

	    		     
	    		        index18_18 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_18 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 23;
	    		    }

	    		    else if ( (LA18_18 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 24;
	    		    }

	    			 
	    				ctx->seek(index18_18);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 26:

	    		{
	    		    ANTLR_UINT32 LA18_11;

	    		    ANTLR_MARKER index18_11;


	    		    LA18_11 = ctx->LA(1);

	    		     
	    		        index18_11 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_11 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA18_11 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_11 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_11 == LEFT_PAREN || LA18_11 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    			 
	    				ctx->seek(index18_11);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 27:

	    		{
	    		    ANTLR_UINT32 LA18_38;

	    		    ANTLR_MARKER index18_38;


	    		    LA18_38 = ctx->LA(1);

	    		     
	    		        index18_38 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_38 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 44;
	    		    }

	    		    else if ( (LA18_38 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 45;
	    		    }

	    			 
	    				ctx->seek(index18_38);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 28:

	    		{
	    		    ANTLR_UINT32 LA18_13;

	    		    ANTLR_MARKER index18_13;


	    		    LA18_13 = ctx->LA(1);

	    		     
	    		        index18_13 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_13 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    		    else if ( (LA18_13 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_13 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index18_13);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 29:

	    		{
	    		    ANTLR_UINT32 LA18_26;

	    		    ANTLR_MARKER index18_26;


	    		    LA18_26 = ctx->LA(1);

	    		     
	    		        index18_26 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_26 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 38;
	    		    }

	    		    else if ( (LA18_26 == COMMA || LA18_26 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_26 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_26);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 30:

	    		{
	    		    ANTLR_UINT32 LA18_33;

	    		    ANTLR_MARKER index18_33;


	    		    LA18_33 = ctx->LA(1);

	    		     
	    		        index18_33 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_33 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_33 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA18_33 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    			 
	    				ctx->seek(index18_33);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 31:

	    		{
	    		    ANTLR_UINT32 LA18_47;

	    		    ANTLR_MARKER index18_47;


	    		    LA18_47 = ctx->LA(1);

	    		     
	    		        index18_47 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_47 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_47 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    		    else if ( (LA18_47 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    			 
	    				ctx->seek(index18_47);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 32:

	    		{
	    		    ANTLR_UINT32 LA18_48;

	    		    ANTLR_MARKER index18_48;


	    		    LA18_48 = ctx->LA(1);

	    		     
	    		        index18_48 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_48 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_48 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    		    else if ( (LA18_48 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    			 
	    				ctx->seek(index18_48);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 33:

	    		{
	    		    ANTLR_UINT32 LA18_34;

	    		    ANTLR_MARKER index18_34;


	    		    LA18_34 = ctx->LA(1);

	    		     
	    		        index18_34 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_34 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_34 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA18_34 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    			 
	    				ctx->seek(index18_34);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 34:

	    		{
	    		    ANTLR_UINT32 LA18_20;

	    		    ANTLR_MARKER index18_20;


	    		    LA18_20 = ctx->LA(1);

	    		     
	    		        index18_20 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_20 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA18_20 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_20 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index18_20);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 35:

	    		{
	    		    ANTLR_UINT32 LA18_39;

	    		    ANTLR_MARKER index18_39;


	    		    LA18_39 = ctx->LA(1);

	    		     
	    		        index18_39 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_39 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    		    else if ( (LA18_39 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_39 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index18_39);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 36:

	    		{
	    		    ANTLR_UINT32 LA18_22;

	    		    ANTLR_MARKER index18_22;


	    		    LA18_22 = ctx->LA(1);

	    		     
	    		        index18_22 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_22 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    		    else if ( (LA18_22 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 34;
	    		    }

	    			 
	    				ctx->seek(index18_22);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 37:

	    		{
	    		    ANTLR_UINT32 LA18_3;

	    		    ANTLR_MARKER index18_3;


	    		    LA18_3 = ctx->LA(1);

	    		     
	    		        index18_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_3 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 5;
	    		    }

	    		    else if ( (LA18_3 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (LA18_3 == LEFT_PAREN || LA18_3 == PERIOD || LA18_3 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 38:

	    		{
	    		    ANTLR_UINT32 LA18_43;

	    		    ANTLR_MARKER index18_43;


	    		    LA18_43 = ctx->LA(1);

	    		     
	    		        index18_43 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_43 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 47;
	    		    }

	    		    else if ( (LA18_43 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 48;
	    		    }

	    			 
	    				ctx->seek(index18_43);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 39:

	    		{
	    		    ANTLR_UINT32 LA18_8;

	    		    ANTLR_MARKER index18_8;


	    		    LA18_8 = ctx->LA(1);

	    		     
	    		        index18_8 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_8 == COMMA || LA18_8 == PERIOD || LA18_8 == REGULAR_ID || LA18_8 == SQL92_RESERVED_ASC || LA18_8 == SQL92_RESERVED_DESC) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_8 == LEFT_PAREN || LA18_8 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_8);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 40:

	    		{
	    		    ANTLR_UINT32 LA18_0;

	    		    ANTLR_MARKER index18_0;


	    		    LA18_0 = ctx->LA(1);

	    		     
	    		        index18_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 1;
	    		    }

	    		    else if ( (LA18_0 == COMMA)  )
	    		    {
	    		        s = 2;
	    		    }

	    			 
	    				ctx->seek(index18_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 41:

	    		{
	    		    ANTLR_UINT32 LA18_45;

	    		    ANTLR_MARKER index18_45;


	    		    LA18_45 = ctx->LA(1);

	    		     
	    		        index18_45 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_45 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA18_45 == COMMA || LA18_45 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_45 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_45);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 42:

	    		{
	    		    ANTLR_UINT32 LA18_40;

	    		    ANTLR_MARKER index18_40;


	    		    LA18_40 = ctx->LA(1);

	    		     
	    		        index18_40 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_40 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    		    else if ( (LA18_40 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_40 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index18_40);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 43:

	    		{
	    		    ANTLR_UINT32 LA18_46;

	    		    ANTLR_MARKER index18_46;


	    		    LA18_46 = ctx->LA(1);

	    		     
	    		        index18_46 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_46 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 50;
	    		    }

	    		    else if ( (LA18_46 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 51;
	    		    }

	    			 
	    				ctx->seek(index18_46);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 44:

	    		{
	    		    ANTLR_UINT32 LA18_31;

	    		    ANTLR_MARKER index18_31;


	    		    LA18_31 = ctx->LA(1);

	    		     
	    		        index18_31 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_31 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_31 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA18_31 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    			 
	    				ctx->seek(index18_31);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 45:

	    		{
	    		    ANTLR_UINT32 LA18_29;

	    		    ANTLR_MARKER index18_29;


	    		    LA18_29 = ctx->LA(1);

	    		     
	    		        index18_29 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_29 == LEFT_PAREN || LA18_29 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_29 == COMMA || LA18_29 == PERIOD || LA18_29 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_29);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 46:

	    		{
	    		    ANTLR_UINT32 LA18_28;

	    		    ANTLR_MARKER index18_28;


	    		    LA18_28 = ctx->LA(1);

	    		     
	    		        index18_28 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_28 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 39;
	    		    }

	    		    else if ( (LA18_28 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 40;
	    		    }

	    			 
	    				ctx->seek(index18_28);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 47:

	    		{
	    		    ANTLR_UINT32 LA18_32;

	    		    ANTLR_MARKER index18_32;


	    		    LA18_32 = ctx->LA(1);

	    		     
	    		        index18_32 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_32 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_32 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA18_32 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    			 
	    				ctx->seek(index18_32);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 48:

	    		{
	    		    ANTLR_UINT32 LA18_30;

	    		    ANTLR_MARKER index18_30;


	    		    LA18_30 = ctx->LA(1);

	    		     
	    		        index18_30 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_30 == LEFT_PAREN || LA18_30 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_30 == COMMA || LA18_30 == PERIOD || LA18_30 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_30);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 49:

	    		{
	    		    ANTLR_UINT32 LA18_5;

	    		    ANTLR_MARKER index18_5;


	    		    LA18_5 = ctx->LA(1);

	    		     
	    		        index18_5 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_5 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 7;
	    		    }

	    		    else if ( (LA18_5 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_5 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index18_5);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 50:

	    		{
	    		    ANTLR_UINT32 LA18_50;

	    		    ANTLR_MARKER index18_50;


	    		    LA18_50 = ctx->LA(1);

	    		     
	    		        index18_50 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_50 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_50 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    		    else if ( (LA18_50 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    			 
	    				ctx->seek(index18_50);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "174:70: ( nulls_key last_key )?" );
	    ex->set_decisionNum( 18 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA18  cdfa18(
	    18,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"174:70: ( nulls_key last_key )?",
	    dfa18_eot,	    /* EOT table			    */
	    dfa18_eof,	    /* EOF table			    */
	    dfa18_min,	    /* Minimum tokens for each state    */
	    dfa18_max,	    /* Maximum tokens for each state    */
	    dfa18_accept,	/* Accept table			    */
	    dfa18_special,	/* Special transition states	    */
	    dfa18_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 18
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    175:77: ( nulls_key last_key )?
 */
static const ANTLR_INT32 dfa22_eot[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa22_eof[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa22_min[54] =
    {
	68, 113, -1, 68, -1, 113, 113, 113, 68, 68, 113, 68, 68, 113, 113, 113, 
	113, 113, -1, 113, 113, 113, 68, 68, 113, 68, 68, 113, 68, 68, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 113, 68, 68, 113, 68, 68, 113, 
	113, 113, 113, 113, 113, 68, 68
    };
static const ANTLR_INT32 dfa22_max[54] =
    {
	383, 383, -1, 500, -1, 383, 383, 383, 500, 500, 383, 467, 467, 383, 383, 
	383, 383, 383, -1, 383, 383, 383, 500, 500, 383, 505, 505, 383, 452, 452, 
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 500, 500, 383, 505, 
	505, 383, 383, 383, 383, 383, 383, 505, 505
    };
static const ANTLR_INT32 dfa22_accept[54] =
    {
	-1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa22_special[54] =
    {
	34, 1, -1, 43, -1, 18, 49, 9, 26, 16, 3, 39, 22, 12, 2, 25, 5, 35, -1, 
	28, 24, 37, 8, 11, 10, 29, 14, 46, 45, 48, 19, 30, 33, 7, 13, 4, 27, 36, 
	41, 44, 47, 21, 23, 38, 20, 40, 42, 31, 32, 6, 50, 0, 15, 17
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa22_T_empty	 =   NULL;

static const ANTLR_INT32 dfa22_T0[] =
    {
	29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	28
    };

static const ANTLR_INT32 dfa22_T1[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3
    };

static const ANTLR_INT32 dfa22_T2[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8
    };

static const ANTLR_INT32 dfa22_T3[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	19
    };

static const ANTLR_INT32 dfa22_T4[] =
    {
	26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	25
    };

static const ANTLR_INT32 dfa22_T5[] =
    {
	26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	25
    };

static const ANTLR_INT32 dfa22_T6[] =
    {
	53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	52
    };

static const ANTLR_INT32 dfa22_T7[] =
    {
	42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	41
    };

static const ANTLR_INT32 dfa22_T8[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	18
    };

static const ANTLR_INT32 dfa22_T9[] =
    {
	14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	13
    };

static const ANTLR_INT32 dfa22_T10[] =
    {
	35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	34
    };

static const ANTLR_INT32 dfa22_T11[] =
    {
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa22_T12[] =
    {
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa22_T13[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	18
    };

static const ANTLR_INT32 dfa22_T14[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8
    };

static const ANTLR_INT32 dfa22_T15[] =
    {
	40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	39
    };

static const ANTLR_INT32 dfa22_T16[] =
    {
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 4, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 18
    };

static const ANTLR_INT32 dfa22_T17[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };

static const ANTLR_INT32 dfa22_T18[] =
    {
	23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	22
    };

static const ANTLR_INT32 dfa22_T19[] =
    {
	45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	44
    };

static const ANTLR_INT32 dfa22_T20[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };

static const ANTLR_INT32 dfa22_T21[] =
    {
	29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	28
    };

static const ANTLR_INT32 dfa22_T22[] =
    {
	32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	31
    };

static const ANTLR_INT32 dfa22_T23[] =
    {
	48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	47
    };

static const ANTLR_INT32 dfa22_T24[] =
    {
	51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	50
    };

static const ANTLR_INT32 dfa22_T25[] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4
    };

static const ANTLR_INT32 dfa22_T26[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 18
    };

static const ANTLR_INT32 dfa22_T27[] =
    {
	38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	37
    };

static const ANTLR_INT32 dfa22_T28[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa22_transitions[] =
{
    dfa22_T20, dfa22_T1, NULL, dfa22_T25, NULL, dfa22_T14, dfa22_T28, dfa22_T9, 
    dfa22_T13, dfa22_T13, dfa22_T3, dfa22_T16, dfa22_T16, dfa22_T2, dfa22_T2, 
    dfa22_T18, dfa22_T5, dfa22_T21, NULL, dfa22_T17, dfa22_T17, dfa22_T22, 
    dfa22_T8, dfa22_T8, dfa22_T10, dfa22_T11, dfa22_T11, dfa22_T27, dfa22_T26, 
    dfa22_T26, dfa22_T15, dfa22_T2, dfa22_T2, dfa22_T7, dfa22_T4, dfa22_T4, 
    dfa22_T19, dfa22_T0, dfa22_T0, dfa22_T17, dfa22_T17, dfa22_T8, dfa22_T8, 
    dfa22_T23, dfa22_T12, dfa22_T12, dfa22_T24, dfa22_T4, dfa22_T4, dfa22_T6, 
    dfa22_T0, dfa22_T0, dfa22_T12, dfa22_T12
};


/* Declare tracking structure for Cyclic DFA 22
 */
class OracleDMLCyclicDFA22 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA22( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA22_51;

	    		    ANTLR_MARKER index22_51;


	    		    LA22_51 = ctx->LA(1);

	    		     
	    		        index22_51 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_51 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_51 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA22_51 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    			 
	    				ctx->seek(index22_51);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA22_1;

	    		    ANTLR_MARKER index22_1;


	    		    LA22_1 = ctx->LA(1);

	    		     
	    		        index22_1 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA22_1 == DELIMITED_ID || LA22_1 == INTRODUCER) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_1);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA22_14;

	    		    ANTLR_MARKER index22_14;


	    		    LA22_14 = ctx->LA(1);

	    		     
	    		        index22_14 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_14 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    		    else if ( (LA22_14 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_14 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index22_14);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 3:

	    		{
	    		    ANTLR_UINT32 LA22_10;

	    		    ANTLR_MARKER index22_10;


	    		    LA22_10 = ctx->LA(1);

	    		     
	    		        index22_10 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_10 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA22_10 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    			 
	    				ctx->seek(index22_10);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 4:

	    		{
	    		    ANTLR_UINT32 LA22_35;

	    		    ANTLR_MARKER index22_35;


	    		    LA22_35 = ctx->LA(1);

	    		     
	    		        index22_35 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_35 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    		    else if ( (LA22_35 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_35 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    			 
	    				ctx->seek(index22_35);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 5:

	    		{
	    		    ANTLR_UINT32 LA22_16;

	    		    ANTLR_MARKER index22_16;


	    		    LA22_16 = ctx->LA(1);

	    		     
	    		        index22_16 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_16 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 24;
	    		    }

	    		    else if ( (LA22_16 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_16 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    			 
	    				ctx->seek(index22_16);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 6:

	    		{
	    		    ANTLR_UINT32 LA22_49;

	    		    ANTLR_MARKER index22_49;


	    		    LA22_49 = ctx->LA(1);

	    		     
	    		        index22_49 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_49 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 52;
	    		    }

	    		    else if ( (LA22_49 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 53;
	    		    }

	    			 
	    				ctx->seek(index22_49);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 7:

	    		{
	    		    ANTLR_UINT32 LA22_33;

	    		    ANTLR_MARKER index22_33;


	    		    LA22_33 = ctx->LA(1);

	    		     
	    		        index22_33 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_33 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 41;
	    		    }

	    		    else if ( (LA22_33 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 42;
	    		    }

	    			 
	    				ctx->seek(index22_33);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 8:

	    		{
	    		    ANTLR_UINT32 LA22_22;

	    		    ANTLR_MARKER index22_22;


	    		    LA22_22 = ctx->LA(1);

	    		     
	    		        index22_22 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_22 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    		    else if ( (LA22_22 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_22 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_22 == LEFT_PAREN || LA22_22 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    			 
	    				ctx->seek(index22_22);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 9:

	    		{
	    		    ANTLR_UINT32 LA22_7;

	    		    ANTLR_MARKER index22_7;


	    		    LA22_7 = ctx->LA(1);

	    		     
	    		        index22_7 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_7 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 13;
	    		    }

	    		    else if ( (LA22_7 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 14;
	    		    }

	    			 
	    				ctx->seek(index22_7);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 10:

	    		{
	    		    ANTLR_UINT32 LA22_24;

	    		    ANTLR_MARKER index22_24;


	    		    LA22_24 = ctx->LA(1);

	    		     
	    		        index22_24 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_24 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 34;
	    		    }

	    		    else if ( (LA22_24 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    			 
	    				ctx->seek(index22_24);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 11:

	    		{
	    		    ANTLR_UINT32 LA22_23;

	    		    ANTLR_MARKER index22_23;


	    		    LA22_23 = ctx->LA(1);

	    		     
	    		        index22_23 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_23 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    		    else if ( (LA22_23 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_23 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_23 == LEFT_PAREN || LA22_23 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    			 
	    				ctx->seek(index22_23);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 12:

	    		{
	    		    ANTLR_UINT32 LA22_13;

	    		    ANTLR_MARKER index22_13;


	    		    LA22_13 = ctx->LA(1);

	    		     
	    		        index22_13 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_13 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    		    else if ( (LA22_13 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_13 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index22_13);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 13:

	    		{
	    		    ANTLR_UINT32 LA22_34;

	    		    ANTLR_MARKER index22_34;


	    		    LA22_34 = ctx->LA(1);

	    		     
	    		        index22_34 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_34 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    		    else if ( (LA22_34 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_34 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    			 
	    				ctx->seek(index22_34);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 14:

	    		{
	    		    ANTLR_UINT32 LA22_26;

	    		    ANTLR_MARKER index22_26;


	    		    LA22_26 = ctx->LA(1);

	    		     
	    		        index22_26 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_26 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 36;
	    		    }

	    		    else if ( (LA22_26 == COMMA || LA22_26 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_26 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_26);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 15:

	    		{
	    		    ANTLR_UINT32 LA22_52;

	    		    ANTLR_MARKER index22_52;


	    		    LA22_52 = ctx->LA(1);

	    		     
	    		        index22_52 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_52 == COMMA || LA22_52 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_52 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA22_52 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_52);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 16:

	    		{
	    		    ANTLR_UINT32 LA22_9;

	    		    ANTLR_MARKER index22_9;


	    		    LA22_9 = ctx->LA(1);

	    		     
	    		        index22_9 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_9 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA22_9 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_9 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_9 == LEFT_PAREN || LA22_9 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    			 
	    				ctx->seek(index22_9);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 17:

	    		{
	    		    ANTLR_UINT32 LA22_53;

	    		    ANTLR_MARKER index22_53;


	    		    LA22_53 = ctx->LA(1);

	    		     
	    		        index22_53 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_53 == COMMA || LA22_53 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_53 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA22_53 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_53);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 18:

	    		{
	    		    ANTLR_UINT32 LA22_5;

	    		    ANTLR_MARKER index22_5;


	    		    LA22_5 = ctx->LA(1);

	    		     
	    		        index22_5 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_5 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 7;
	    		    }

	    		    else if ( (LA22_5 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_5 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index22_5);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 19:

	    		{
	    		    ANTLR_UINT32 LA22_30;

	    		    ANTLR_MARKER index22_30;


	    		    LA22_30 = ctx->LA(1);

	    		     
	    		        index22_30 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_30 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 39;
	    		    }

	    		    else if ( (LA22_30 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 40;
	    		    }

	    			 
	    				ctx->seek(index22_30);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 20:

	    		{
	    		    ANTLR_UINT32 LA22_44;

	    		    ANTLR_MARKER index22_44;


	    		    LA22_44 = ctx->LA(1);

	    		     
	    		        index22_44 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_44 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA22_44 == COMMA || LA22_44 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_44 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_44);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 21:

	    		{
	    		    ANTLR_UINT32 LA22_41;

	    		    ANTLR_MARKER index22_41;


	    		    LA22_41 = ctx->LA(1);

	    		     
	    		        index22_41 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_41 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_41 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_41 == LEFT_PAREN || LA22_41 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_41 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    			 
	    				ctx->seek(index22_41);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 22:

	    		{
	    		    ANTLR_UINT32 LA22_12;

	    		    ANTLR_MARKER index22_12;


	    		    LA22_12 = ctx->LA(1);

	    		     
	    		        index22_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_12 == COMMA || LA22_12 == PERIOD || LA22_12 == REGULAR_ID || LA22_12 == SQL92_RESERVED_ASC || LA22_12 == SQL92_RESERVED_DESC) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_12 == LEFT_PAREN || LA22_12 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 23:

	    		{
	    		    ANTLR_UINT32 LA22_42;

	    		    ANTLR_MARKER index22_42;


	    		    LA22_42 = ctx->LA(1);

	    		     
	    		        index22_42 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_42 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_42 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_42 == LEFT_PAREN || LA22_42 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_42 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    			 
	    				ctx->seek(index22_42);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 24:

	    		{
	    		    ANTLR_UINT32 LA22_20;

	    		    ANTLR_MARKER index22_20;


	    		    LA22_20 = ctx->LA(1);

	    		     
	    		        index22_20 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_20 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    		    else if ( (LA22_20 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_20 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index22_20);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 25:

	    		{
	    		    ANTLR_UINT32 LA22_15;

	    		    ANTLR_MARKER index22_15;


	    		    LA22_15 = ctx->LA(1);

	    		     
	    		        index22_15 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_15 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    		    else if ( (LA22_15 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 23;
	    		    }

	    			 
	    				ctx->seek(index22_15);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 26:

	    		{
	    		    ANTLR_UINT32 LA22_8;

	    		    ANTLR_MARKER index22_8;


	    		    LA22_8 = ctx->LA(1);

	    		     
	    		        index22_8 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_8 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA22_8 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_8 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_8 == LEFT_PAREN || LA22_8 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    			 
	    				ctx->seek(index22_8);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 27:

	    		{
	    		    ANTLR_UINT32 LA22_36;

	    		    ANTLR_MARKER index22_36;


	    		    LA22_36 = ctx->LA(1);

	    		     
	    		        index22_36 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_36 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 44;
	    		    }

	    		    else if ( (LA22_36 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 45;
	    		    }

	    			 
	    				ctx->seek(index22_36);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 28:

	    		{
	    		    ANTLR_UINT32 LA22_19;

	    		    ANTLR_MARKER index22_19;


	    		    LA22_19 = ctx->LA(1);

	    		     
	    		        index22_19 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_19 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    		    else if ( (LA22_19 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_19 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index22_19);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 29:

	    		{
	    		    ANTLR_UINT32 LA22_25;

	    		    ANTLR_MARKER index22_25;


	    		    LA22_25 = ctx->LA(1);

	    		     
	    		        index22_25 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_25 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 36;
	    		    }

	    		    else if ( (LA22_25 == COMMA || LA22_25 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_25 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_25);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 30:

	    		{
	    		    ANTLR_UINT32 LA22_31;

	    		    ANTLR_MARKER index22_31;


	    		    LA22_31 = ctx->LA(1);

	    		     
	    		        index22_31 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_31 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_31 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA22_31 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    			 
	    				ctx->seek(index22_31);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 31:

	    		{
	    		    ANTLR_UINT32 LA22_47;

	    		    ANTLR_MARKER index22_47;


	    		    LA22_47 = ctx->LA(1);

	    		     
	    		        index22_47 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_47 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_47 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA22_47 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    			 
	    				ctx->seek(index22_47);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 32:

	    		{
	    		    ANTLR_UINT32 LA22_48;

	    		    ANTLR_MARKER index22_48;


	    		    LA22_48 = ctx->LA(1);

	    		     
	    		        index22_48 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_48 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_48 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA22_48 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    			 
	    				ctx->seek(index22_48);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 33:

	    		{
	    		    ANTLR_UINT32 LA22_32;

	    		    ANTLR_MARKER index22_32;


	    		    LA22_32 = ctx->LA(1);

	    		     
	    		        index22_32 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_32 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_32 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA22_32 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    			 
	    				ctx->seek(index22_32);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 34:

	    		{
	    		    ANTLR_UINT32 LA22_0;

	    		    ANTLR_MARKER index22_0;


	    		    LA22_0 = ctx->LA(1);

	    		     
	    		        index22_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 1;
	    		    }

	    		    else if ( (LA22_0 == COMMA)  )
	    		    {
	    		        s = 2;
	    		    }

	    			 
	    				ctx->seek(index22_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 35:

	    		{
	    		    ANTLR_UINT32 LA22_17;

	    		    ANTLR_MARKER index22_17;


	    		    LA22_17 = ctx->LA(1);

	    		     
	    		        index22_17 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_17 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    		    else if ( (LA22_17 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_17 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    			 
	    				ctx->seek(index22_17);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 36:

	    		{
	    		    ANTLR_UINT32 LA22_37;

	    		    ANTLR_MARKER index22_37;


	    		    LA22_37 = ctx->LA(1);

	    		     
	    		        index22_37 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_37 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    		    else if ( (LA22_37 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_37 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    			 
	    				ctx->seek(index22_37);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 37:

	    		{
	    		    ANTLR_UINT32 LA22_21;

	    		    ANTLR_MARKER index22_21;


	    		    LA22_21 = ctx->LA(1);

	    		     
	    		        index22_21 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_21 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 31;
	    		    }

	    		    else if ( (LA22_21 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 32;
	    		    }

	    			 
	    				ctx->seek(index22_21);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 38:

	    		{
	    		    ANTLR_UINT32 LA22_43;

	    		    ANTLR_MARKER index22_43;


	    		    LA22_43 = ctx->LA(1);

	    		     
	    		        index22_43 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_43 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 47;
	    		    }

	    		    else if ( (LA22_43 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 48;
	    		    }

	    			 
	    				ctx->seek(index22_43);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 39:

	    		{
	    		    ANTLR_UINT32 LA22_11;

	    		    ANTLR_MARKER index22_11;


	    		    LA22_11 = ctx->LA(1);

	    		     
	    		        index22_11 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_11 == COMMA || LA22_11 == PERIOD || LA22_11 == REGULAR_ID || LA22_11 == SQL92_RESERVED_ASC || LA22_11 == SQL92_RESERVED_DESC) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_11 == LEFT_PAREN || LA22_11 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_11);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 40:

	    		{
	    		    ANTLR_UINT32 LA22_45;

	    		    ANTLR_MARKER index22_45;


	    		    LA22_45 = ctx->LA(1);

	    		     
	    		        index22_45 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_45 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA22_45 == COMMA || LA22_45 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_45 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_45);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 41:

	    		{
	    		    ANTLR_UINT32 LA22_38;

	    		    ANTLR_MARKER index22_38;


	    		    LA22_38 = ctx->LA(1);

	    		     
	    		        index22_38 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_38 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    		    else if ( (LA22_38 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_38 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    			 
	    				ctx->seek(index22_38);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 42:

	    		{
	    		    ANTLR_UINT32 LA22_46;

	    		    ANTLR_MARKER index22_46;


	    		    LA22_46 = ctx->LA(1);

	    		     
	    		        index22_46 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_46 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 50;
	    		    }

	    		    else if ( (LA22_46 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 51;
	    		    }

	    			 
	    				ctx->seek(index22_46);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 43:

	    		{
	    		    ANTLR_UINT32 LA22_3;

	    		    ANTLR_MARKER index22_3;


	    		    LA22_3 = ctx->LA(1);

	    		     
	    		        index22_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_3 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 5;
	    		    }

	    		    else if ( (LA22_3 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (LA22_3 == LEFT_PAREN || LA22_3 == PERIOD || LA22_3 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 44:

	    		{
	    		    ANTLR_UINT32 LA22_39;

	    		    ANTLR_MARKER index22_39;


	    		    LA22_39 = ctx->LA(1);

	    		     
	    		        index22_39 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_39 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_39 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA22_39 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index22_39);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 45:

	    		{
	    		    ANTLR_UINT32 LA22_28;

	    		    ANTLR_MARKER index22_28;


	    		    LA22_28 = ctx->LA(1);

	    		     
	    		        index22_28 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_28 == LEFT_PAREN || LA22_28 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_28 == COMMA || LA22_28 == PERIOD || LA22_28 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_28);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 46:

	    		{
	    		    ANTLR_UINT32 LA22_27;

	    		    ANTLR_MARKER index22_27;


	    		    LA22_27 = ctx->LA(1);

	    		     
	    		        index22_27 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_27 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 37;
	    		    }

	    		    else if ( (LA22_27 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 38;
	    		    }

	    			 
	    				ctx->seek(index22_27);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 47:

	    		{
	    		    ANTLR_UINT32 LA22_40;

	    		    ANTLR_MARKER index22_40;


	    		    LA22_40 = ctx->LA(1);

	    		     
	    		        index22_40 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_40 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_40 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA22_40 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index22_40);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 48:

	    		{
	    		    ANTLR_UINT32 LA22_29;

	    		    ANTLR_MARKER index22_29;


	    		    LA22_29 = ctx->LA(1);

	    		     
	    		        index22_29 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_29 == LEFT_PAREN || LA22_29 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_29 == COMMA || LA22_29 == PERIOD || LA22_29 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_29);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 49:

	    		{
	    		    ANTLR_UINT32 LA22_6;

	    		    ANTLR_MARKER index22_6;


	    		    LA22_6 = ctx->LA(1);

	    		     
	    		        index22_6 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_6 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA22_6 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_6 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index22_6);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 50:

	    		{
	    		    ANTLR_UINT32 LA22_50;

	    		    ANTLR_MARKER index22_50;


	    		    LA22_50 = ctx->LA(1);

	    		     
	    		        index22_50 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_50 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_50 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA22_50 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    			 
	    				ctx->seek(index22_50);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "175:77: ( nulls_key last_key )?" );
	    ex->set_decisionNum( 22 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA22  cdfa22(
	    22,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"175:77: ( nulls_key last_key )?",
	    dfa22_eot,	    /* EOT table			    */
	    dfa22_eof,	    /* EOF table			    */
	    dfa22_min,	    /* Minimum tokens for each state    */
	    dfa22_max,	    /* Maximum tokens for each state    */
	    dfa22_accept,	/* Accept table			    */
	    dfa22_special,	/* Special transition states	    */
	    dfa22_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 22
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 471:64: ( reference_model )*
 */
static const ANTLR_INT32 dfa107_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa107_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa107_min[13] =
    {
	383, 113, 113, 383, 383, -1, 113, 113, -1, -1, 113, 113, 113
    };
static const ANTLR_INT32 dfa107_max[13] =
    {
	383, 456, 383, 491, 491, -1, 383, 383, -1, -1, 383, 383, 383
    };
static const ANTLR_INT32 dfa107_accept[13] =
    {
	-1, -1, -1, -1, -1, 2, -1, -1, 2, 1, -1, -1, -1
    };
static const ANTLR_INT32 dfa107_special[13] =
    {
	7, 4, 5, 2, 1, -1, 0, 3, -1, -1, 9, 6, 8
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa107_T_empty	 =   NULL;

static const ANTLR_INT32 dfa107_T0[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3
    };

static const ANTLR_INT32 dfa107_T1[] =
    {
	8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9
    };

static const ANTLR_INT32 dfa107_T2[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5
    };

static const ANTLR_INT32 dfa107_T3[] =
    {
	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	6
    };

static const ANTLR_INT32 dfa107_T4[] =
    {
	1
    };

static const ANTLR_INT32 dfa107_T5[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa107_transitions[] =
{
    dfa107_T4, dfa107_T2, dfa107_T3, dfa107_T1, dfa107_T1, NULL, dfa107_T0, 
    dfa107_T0, NULL, NULL, dfa107_T5, dfa107_T0, dfa107_T0
};


/* Declare tracking structure for Cyclic DFA 107
 */
class OracleDMLCyclicDFA107 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA107( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA107_6;

	    		    ANTLR_MARKER index107_6;


	    		    LA107_6 = ctx->LA(1);

	    		     
	    		        index107_6 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA107_6 == PERIOD) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA107_6 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA107_6 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index107_6);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA107_4;

	    		    ANTLR_MARKER index107_4;


	    		    LA107_4 = ctx->LA(1);

	    		     
	    		        index107_4 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA107_4 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "MAIN")) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA107_4 == SQL92_RESERVED_ON) && ((toUpper(LT(1)->getText()) == "REFERENCE")) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index107_4);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA107_3;

	    		    ANTLR_MARKER index107_3;


	    		    LA107_3 = ctx->LA(1);

	    		     
	    		        index107_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA107_3 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "MAIN")) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA107_3 == SQL92_RESERVED_ON) && ((toUpper(LT(1)->getText()) == "REFERENCE")) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index107_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 3:

	    		{
	    		    ANTLR_UINT32 LA107_7;

	    		    ANTLR_MARKER index107_7;


	    		    LA107_7 = ctx->LA(1);

	    		     
	    		        index107_7 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA107_7 == PERIOD) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA107_7 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA107_7 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index107_7);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 4:

	    		{
	    		    ANTLR_UINT32 LA107_1;

	    		    ANTLR_MARKER index107_1;


	    		    LA107_1 = ctx->LA(1);

	    		     
	    		        index107_1 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA107_1 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 2;
	    		    }

	    		    else if ( (LA107_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA107_1 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA107_1 == SQL92_RESERVED_BY) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "PARTITION")))) )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index107_1);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 5:

	    		{
	    		    ANTLR_UINT32 LA107_2;

	    		    ANTLR_MARKER index107_2;


	    		    LA107_2 = ctx->LA(1);

	    		     
	    		        index107_2 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA107_2 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (LA107_2 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 7;
	    		    }

	    			 
	    				ctx->seek(index107_2);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 6:

	    		{
	    		    ANTLR_UINT32 LA107_11;

	    		    ANTLR_MARKER index107_11;


	    		    LA107_11 = ctx->LA(1);

	    		     
	    		        index107_11 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA107_11 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA107_11 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA107_11 == PERIOD) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 10;
	    		    }

	    			 
	    				ctx->seek(index107_11);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 7:

	    		{
	    		    ANTLR_UINT32 LA107_0;

	    		    ANTLR_MARKER index107_0;


	    		    LA107_0 = ctx->LA(1);

	    		     
	    		        index107_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA107_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 1;
	    		    }

	    			 
	    				ctx->seek(index107_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 8:

	    		{
	    		    ANTLR_UINT32 LA107_12;

	    		    ANTLR_MARKER index107_12;


	    		    LA107_12 = ctx->LA(1);

	    		     
	    		        index107_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA107_12 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA107_12 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA107_12 == PERIOD) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 10;
	    		    }

	    			 
	    				ctx->seek(index107_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 9:

	    		{
	    		    ANTLR_UINT32 LA107_10;

	    		    ANTLR_MARKER index107_10;


	    		    LA107_10 = ctx->LA(1);

	    		     
	    		        index107_10 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA107_10 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA107_10 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index107_10);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "()* loopback of 471:64: ( reference_model )*" );
	    ex->set_decisionNum( 107 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA107  cdfa107(
	    107,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"()* loopback of 471:64: ( reference_model )*",
	    dfa107_eot,	    /* EOT table			    */
	    dfa107_eof,	    /* EOF table			    */
	    dfa107_min,	    /* Minimum tokens for each state    */
	    dfa107_max,	    /* Maximum tokens for each state    */
	    dfa107_accept,	/* Accept table			    */
	    dfa107_special,	/* Special transition states	    */
	    dfa107_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 107
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    760:9: ( error_logging_into_part )?
 */
static const ANTLR_INT32 dfa189_eot[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa189_eof[12] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa189_min[12] =
    {
	13, 113, -1, 113, -1, -1, 113, 113, 113, -1, 113, 113
    };
static const ANTLR_INT32 dfa189_max[12] =
    {
	614, 503, -1, 383, -1, -1, 383, 383, 383, -1, 383, 383
    };
static const ANTLR_INT32 dfa189_accept[12] =
    {
	-1, -1, 2, -1, 1, 1, -1, -1, -1, 1, -1, -1
    };
static const ANTLR_INT32 dfa189_special[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa189_T_empty	 =   NULL;

static const ANTLR_INT32 dfa189_T0[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9
    };

static const ANTLR_INT32 dfa189_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, -1, -1, 2, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, 2, -1, -1, 
	2, -1, 2, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	2, -1, -1, -1, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

static const ANTLR_INT32 dfa189_T2[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2
    };

static const ANTLR_INT32 dfa189_T3[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10
    };

static const ANTLR_INT32 dfa189_T4[] =
    {
	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	6
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa189_transitions[] =
{
    dfa189_T1, dfa189_T2, NULL, dfa189_T4, NULL, NULL, dfa189_T0, dfa189_T0, 
    dfa189_T3, NULL, dfa189_T0, dfa189_T0
};


/* Declare tracking structure for Cyclic DFA 189
 */
class OracleDMLCyclicDFA189 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	OracleDMLCyclicDFA189( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static OracleDMLCyclicDFA189  cdfa189(
	    189,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"760:9: ( error_logging_into_part )?",
	    dfa189_eot,	    /* EOT table			    */
	    dfa189_eof,	    /* EOF table			    */
	    dfa189_min,	    /* Minimum tokens for each state    */
	    dfa189_max,	    /* Maximum tokens for each state    */
	    dfa189_accept,	/* Accept table			    */
	    dfa189_special,	/* Special transition states	    */
	    dfa189_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 189
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1096:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) );
 */
static const ANTLR_INT32 dfa268_eot[27] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa268_eof[27] =
    {
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, 11, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11
    };
static const ANTLR_INT32 dfa268_min[27] =
    {
	13, 113, 222, 19, -1, -1, -1, 113, 113, -1, -1, -1, 113, 13, 113, 19, 19, 
	19, 13, 113, 113, 13, 113, -1, 13, 19, 19
    };
static const ANTLR_INT32 dfa268_max[27] =
    {
	614, 383, 320, 627, -1, -1, -1, 383, 383, -1, -1, -1, 383, 614, 383, 627, 
	627, 627, 614, 383, 383, 614, 383, -1, 614, 627, 627
    };
static const ANTLR_INT32 dfa268_accept[27] =
    {
	-1, -1, -1, -1, 2, 3, 5, -1, -1, 1, 1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1
    };
static const ANTLR_INT32 dfa268_special[27] =
    {
	-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	1, -1, -1, -1, -1, -1, 2, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa268_T_empty	 =   NULL;

static const ANTLR_INT32 dfa268_T0[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	16
    };

static const ANTLR_INT32 dfa268_T1[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, 21, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, 11, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 
	-1, 11, 11, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 11, 11, -1, 
	-1, 11, 11, -1, -1, -1, -1, 11, 11, -1, -1, 11, 11, 11, -1, 11, 11, 11, 
	11, 11, -1, -1, 11, -1, 11, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, 11, 
	11, -1, 11, -1, -1, -1, -1, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa268_T2[] =
    {
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15
    };

static const ANTLR_INT32 dfa268_T3[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 11, 
	11, -1, 11, -1, -1, 11, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa268_T4[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, 13, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, 11, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 
	-1, 11, 11, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 11, 11, -1, 
	-1, 11, 11, -1, -1, -1, -1, 11, 11, -1, -1, 11, 11, 11, -1, 11, 11, 11, 
	11, 11, -1, -1, 11, -1, 11, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, 11, 
	11, -1, 11, -1, -1, -1, -1, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa268_T5[] =
    {
	26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	25
    };

static const ANTLR_INT32 dfa268_T6[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 11, 
	11, -1, 11, -1, -1, 11, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa268_T7[] =
    {
	10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9
    };

static const ANTLR_INT32 dfa268_T8[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	19
    };

static const ANTLR_INT32 dfa268_T9[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 
	11, -1, 11, -1, -1, 11, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa268_T10[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
	-1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 5
    };

static const ANTLR_INT32 dfa268_T11[] =
    {
	8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	7
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa268_transitions[] =
{
    dfa268_T10, dfa268_T11, dfa268_T7, dfa268_T4, NULL, NULL, NULL, dfa268_T2, 
    dfa268_T2, NULL, NULL, NULL, dfa268_T0, dfa268_T3, dfa268_T8, dfa268_T4, 
    dfa268_T1, dfa268_T1, dfa268_T9, dfa268_T2, dfa268_T2, dfa268_T6, dfa268_T5, 
    NULL, dfa268_T9, dfa268_T1, dfa268_T1
};


/* Declare tracking structure for Cyclic DFA 268
 */
class OracleDMLCyclicDFA268 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA268( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA268_2;

	    		    ANTLR_MARKER index268_2;


	    		    LA268_2 = ctx->LA(1);

	    		     
	    		        index268_2 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA268_2 == PERIOD) && (this->msynpred( antlr3::ClassForwarder<synpred46_OracleDML>() )) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA268_2 == LEFT_PAREN) && (this->msynpred( antlr3::ClassForwarder<synpred46_OracleDML>() )) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (( ((((toUpper(LT(1)->getText()) == "INTERVAL"))||((toUpper(LT(1)->getText()) == "MINVALUE"))||((toUpper(LT(1)->getText()) == "SESSIONTIMEZONE"))||((toUpper(LT(1)->getText()) == "TIMESTAMP"))||((toUpper(LT(1)->getText()) == "MAXVALUE"))||((toUpper(LT(1)->getText()) == "DBTIMEZONE")))) && (this->msynpred( antlr3::ClassForwarder<synpred48_OracleDML>() )) ))  )
	    		    {
	    		        s = 5;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred49_OracleDML>() ))  )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index268_2);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA268_18;

	    		    ANTLR_MARKER index268_18;


	    		    LA268_18 = ctx->LA(1);

	    		     
	    		        index268_18 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA268_18 == RIGHT_PAREN) && (this->msynpred( antlr3::ClassForwarder<synpred46_OracleDML>() )) )
	    		    {
	    		        s = 23;
	    		    }

	    		    else if ( (LA268_18 == APPROXIMATE_NUM_LIT || LA268_18 == BINDVAR || ((LA268_18 >= CHAR_STRING) && (LA268_18 <= CHAR_STRING_PERL)) || LA268_18 == COLON || LA268_18 == DELIMITED_ID || LA268_18 == EXACT_NUM_LIT || LA268_18 == INTRODUCER || LA268_18 == LEFT_PAREN || LA268_18 == MINUS_SIGN || LA268_18 == NATIONAL_CHAR_STRING_LIT || ((LA268_18 >= PLSQL_NON_RESERVED_CAST) && (LA268_18 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA268_18 == PLUS_SIGN || LA268_18 == REGULAR_ID || LA268_18 == SQL92_RESERVED_ALL || LA268_18 == SQL92_RESERVED_ANY || LA268_18 == SQL92_RESERVED_CASE || LA268_18 == SQL92_RESERVED_DATE || LA268_18 == SQL92_RESERVED_DEFAULT || LA268_18 == SQL92_RESERVED_DISTINCT || ((LA268_18 >= SQL92_RESERVED_EXISTS) && (LA268_18 <= SQL92_RESERVED_FALSE)) || LA268_18 == SQL92_RESERVED_NULL || LA268_18 == SQL92_RESERVED_PRIOR || LA268_18 == SQL92_RESERVED_TRUE || LA268_18 == UNSIGNED_INTEGER)  )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index268_18);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA268_24;

	    		    ANTLR_MARKER index268_24;


	    		    LA268_24 = ctx->LA(1);

	    		     
	    		        index268_24 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA268_24 == RIGHT_PAREN) && (this->msynpred( antlr3::ClassForwarder<synpred46_OracleDML>() )) )
	    		    {
	    		        s = 23;
	    		    }

	    		    else if ( (LA268_24 == APPROXIMATE_NUM_LIT || LA268_24 == BINDVAR || ((LA268_24 >= CHAR_STRING) && (LA268_24 <= CHAR_STRING_PERL)) || LA268_24 == COLON || LA268_24 == DELIMITED_ID || LA268_24 == EXACT_NUM_LIT || LA268_24 == INTRODUCER || LA268_24 == LEFT_PAREN || LA268_24 == MINUS_SIGN || LA268_24 == NATIONAL_CHAR_STRING_LIT || ((LA268_24 >= PLSQL_NON_RESERVED_CAST) && (LA268_24 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA268_24 == PLUS_SIGN || LA268_24 == REGULAR_ID || LA268_24 == SQL92_RESERVED_ALL || LA268_24 == SQL92_RESERVED_ANY || LA268_24 == SQL92_RESERVED_CASE || LA268_24 == SQL92_RESERVED_DATE || LA268_24 == SQL92_RESERVED_DEFAULT || LA268_24 == SQL92_RESERVED_DISTINCT || ((LA268_24 >= SQL92_RESERVED_EXISTS) && (LA268_24 <= SQL92_RESERVED_FALSE)) || LA268_24 == SQL92_RESERVED_NULL || LA268_24 == SQL92_RESERVED_PRIOR || LA268_24 == SQL92_RESERVED_TRUE || LA268_24 == UNSIGNED_INTEGER)  )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index268_24);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "1096:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) );" );
	    ex->set_decisionNum( 268 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA268  cdfa268(
	    268,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1096:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) );",
	    dfa268_eot,	    /* EOT table			    */
	    dfa268_eof,	    /* EOF table			    */
	    dfa268_min,	    /* Minimum tokens for each state    */
	    dfa268_max,	    /* Maximum tokens for each state    */
	    dfa268_accept,	/* Accept table			    */
	    dfa268_special,	/* Special transition states	    */
	    dfa268_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 268
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1219:17: ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper )
 */
static const ANTLR_INT32 dfa313_eot[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa313_eof[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa313_min[14] =
    {
	383, 13, 113, 0, 0, -1, 113, 113, -1, 113, 0, 0, 113, 113
    };
static const ANTLR_INT32 dfa313_max[14] =
    {
	383, 614, 383, 0, 0, -1, 383, 383, -1, 383, 0, 0, 383, 383
    };
static const ANTLR_INT32 dfa313_accept[14] =
    {
	-1, -1, -1, -1, -1, 2, -1, -1, 1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa313_special[14] =
    {
	9, 4, 0, 2, 10, -1, 7, 3, -1, 8, 6, 11, 5, 1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa313_T_empty	 =   NULL;

static const ANTLR_INT32 dfa313_T0[] =
    {
	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	6
    };

static const ANTLR_INT32 dfa313_T1[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10
    };

static const ANTLR_INT32 dfa313_T2[] =
    {
	-1
    };

static const ANTLR_INT32 dfa313_T3[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	5, -1, -1, 5, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 5, -1, 5, -1, 
	-1, 5, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 5, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5
    };

static const ANTLR_INT32 dfa313_T4[] =
    {
	13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	12
    };

static const ANTLR_INT32 dfa313_T5[] =
    {
	1
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa313_transitions[] =
{
    dfa313_T5, dfa313_T3, dfa313_T0, dfa313_T2, dfa313_T2, NULL, dfa313_T1, 
    dfa313_T1, NULL, dfa313_T4, dfa313_T2, dfa313_T2, dfa313_T1, dfa313_T1
};


/* Declare tracking structure for Cyclic DFA 313
 */
class OracleDMLCyclicDFA313 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA313( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA313_2;

	    		    ANTLR_MARKER index313_2;


	    		    LA313_2 = ctx->LA(1);

	    		     
	    		        index313_2 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA313_2 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (LA313_2 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 7;
	    		    }

	    			 
	    				ctx->seek(index313_2);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA313_13;

	    		    ANTLR_MARKER index313_13;


	    		    LA313_13 = ctx->LA(1);

	    		     
	    		        index313_13 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA313_13 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA313_13 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA313_13 == PERIOD) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index313_13);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA313_3;

	    		    ANTLR_MARKER index313_3;


	    		    LA313_3 = ctx->LA(1);

	    		     
	    		        index313_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((toUpper(LT(1)->getText()) == "NAME"))  )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME"))  )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index313_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 3:

	    		{
	    		    ANTLR_UINT32 LA313_7;

	    		    ANTLR_MARKER index313_7;


	    		    LA313_7 = ctx->LA(1);

	    		     
	    		        index313_7 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA313_7 == PERIOD) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA313_7 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA313_7 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index313_7);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 4:

	    		{
	    		    ANTLR_UINT32 LA313_1;

	    		    ANTLR_MARKER index313_1;


	    		    LA313_1 = ctx->LA(1);

	    		     
	    		        index313_1 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA313_1 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 2;
	    		    }

	    		    else if ( (LA313_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA313_1 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA313_1 == APPROXIMATE_NUM_LIT || LA313_1 == BINDVAR || ((LA313_1 >= CHAR_STRING) && (LA313_1 <= CHAR_STRING_PERL)) || LA313_1 == COLON || LA313_1 == EXACT_NUM_LIT || LA313_1 == LEFT_PAREN || LA313_1 == MINUS_SIGN || LA313_1 == NATIONAL_CHAR_STRING_LIT || ((LA313_1 >= PLSQL_NON_RESERVED_CAST) && (LA313_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA313_1 == PLUS_SIGN || LA313_1 == SQL92_RESERVED_ALL || LA313_1 == SQL92_RESERVED_ANY || LA313_1 == SQL92_RESERVED_CASE || LA313_1 == SQL92_RESERVED_DATE || LA313_1 == SQL92_RESERVED_DEFAULT || LA313_1 == SQL92_RESERVED_DISTINCT || ((LA313_1 >= SQL92_RESERVED_EXISTS) && (LA313_1 <= SQL92_RESERVED_FALSE)) || LA313_1 == SQL92_RESERVED_NULL || LA313_1 == SQL92_RESERVED_PRIOR || LA313_1 == SQL92_RESERVED_TRUE || LA313_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "EVALNAME")) )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index313_1);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 5:

	    		{
	    		    ANTLR_UINT32 LA313_12;

	    		    ANTLR_MARKER index313_12;


	    		    LA313_12 = ctx->LA(1);

	    		     
	    		        index313_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA313_12 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA313_12 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA313_12 == PERIOD) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index313_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 6:

	    		{
	    		    ANTLR_UINT32 LA313_10;

	    		    ANTLR_MARKER index313_10;


	    		    LA313_10 = ctx->LA(1);

	    		     
	    		        index313_10 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((toUpper(LT(1)->getText()) == "NAME"))  )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME"))  )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index313_10);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 7:

	    		{
	    		    ANTLR_UINT32 LA313_6;

	    		    ANTLR_MARKER index313_6;


	    		    LA313_6 = ctx->LA(1);

	    		     
	    		        index313_6 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA313_6 == PERIOD) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA313_6 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA313_6 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index313_6);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 8:

	    		{
	    		    ANTLR_UINT32 LA313_9;

	    		    ANTLR_MARKER index313_9;


	    		    LA313_9 = ctx->LA(1);

	    		     
	    		        index313_9 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA313_9 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA313_9 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 13;
	    		    }

	    			 
	    				ctx->seek(index313_9);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 9:

	    		{
	    		    ANTLR_UINT32 LA313_0;

	    		    ANTLR_MARKER index313_0;


	    		    LA313_0 = ctx->LA(1);

	    		     
	    		        index313_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA313_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 1;
	    		    }

	    			 
	    				ctx->seek(index313_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 10:

	    		{
	    		    ANTLR_UINT32 LA313_4;

	    		    ANTLR_MARKER index313_4;


	    		    LA313_4 = ctx->LA(1);

	    		     
	    		        index313_4 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((toUpper(LT(1)->getText()) == "NAME"))  )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME"))  )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index313_4);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 11:

	    		{
	    		    ANTLR_UINT32 LA313_11;

	    		    ANTLR_MARKER index313_11;


	    		    LA313_11 = ctx->LA(1);

	    		     
	    		        index313_11 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((toUpper(LT(1)->getText()) == "NAME"))  )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME"))  )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index313_11);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "1219:17: ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper )" );
	    ex->set_decisionNum( 313 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA313  cdfa313(
	    313,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1219:17: ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper )",
	    dfa313_eot,	    /* EOT table			    */
	    dfa313_eof,	    /* EOF table			    */
	    dfa313_min,	    /* Minimum tokens for each state    */
	    dfa313_max,	    /* Maximum tokens for each state    */
	    dfa313_accept,	/* Accept table			    */
	    dfa313_special,	/* Special transition states	    */
	    dfa313_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 313
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start compilation_unit
 * OracleDML.g:121:1: compilation_unit : ( seq_of_statements )* EOF ;
 */
OracleDML::compilation_unit_return
OracleDML::compilation_unit()
{
    OracleDML::compilation_unit_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EOF2 = NULL;
    OracleDML::seq_of_statements_return seq_of_statements1;
    ImplTraits::TreeTypePtr::pointer seq_of_statements1_last = NULL;
    ImplTraits::TreeTypePtr EOF2_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:122:5: ( ( seq_of_statements )* EOF )
        // OracleDML.g:122:11: ( seq_of_statements )* EOF
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:122:11: ( seq_of_statements )*

            for (;;)
            {
                ANTLR_UINT32 alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    ANTLR_UINT32 LA1_0 = this->LA(1);
                    if ( (LA1_0 == LEFT_PAREN || LA1_0 == PLSQL_RESERVED_LOCK || LA1_0 == SQL92_RESERVED_DELETE || LA1_0 == SQL92_RESERVED_INSERT || LA1_0 == SQL92_RESERVED_SELECT || LA1_0 == SQL92_RESERVED_UPDATE || LA1_0 == SQL92_RESERVED_WITH))
                    {
                        alt1=1;
                    }
                    else if ( (LA1_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))))
                    {
                        alt1=1;
                    }

                }
                switch (alt1)
                {
            	case 1:
            	    // OracleDML.g:122:11: seq_of_statements
            	    {
            	        this->followPush(FOLLOW_seq_of_statements_in_compilation_unit670);
            	        seq_of_statements1=seq_of_statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecompilation_unitEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, seq_of_statements1.tree);


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


            EOF2 =  this->matchToken(EOF_TOKEN, &FOLLOW_EOF_TOKEN_in_compilation_unit673);
            if  (this->hasException())
            {
                goto rulecompilation_unitEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            EOF2_tree = std::move(get_psrstate()->get_treeAdaptor()->create(EOF2));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, EOF2_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecompilation_unitEx; /* Prevent compiler warnings */
    rulecompilation_unitEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end compilation_unit */

/**
 * $ANTLR start seq_of_statements
 * OracleDML.g:126:1: seq_of_statements : ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement ) ( SEMICOLON | EOF ) ;
 */
OracleDML::seq_of_statements_return
OracleDML::seq_of_statements()
{
    OracleDML::seq_of_statements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* set10 = NULL;
    OracleDML::select_statement_return select_statement3;
    ImplTraits::TreeTypePtr::pointer select_statement3_last = NULL;
    OracleDML::update_statement_return update_statement4;
    ImplTraits::TreeTypePtr::pointer update_statement4_last = NULL;
    OracleDML::delete_statement_return delete_statement5;
    ImplTraits::TreeTypePtr::pointer delete_statement5_last = NULL;
    OracleDML::insert_statement_return insert_statement6;
    ImplTraits::TreeTypePtr::pointer insert_statement6_last = NULL;
    OracleDML::lock_table_statement_return lock_table_statement7;
    ImplTraits::TreeTypePtr::pointer lock_table_statement7_last = NULL;
    OracleDML::merge_statement_return merge_statement8;
    ImplTraits::TreeTypePtr::pointer merge_statement8_last = NULL;
    OracleDML::explain_statement_return explain_statement9;
    ImplTraits::TreeTypePtr::pointer explain_statement9_last = NULL;
    ImplTraits::TreeTypePtr set10_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:127:5: ( ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement ) ( SEMICOLON | EOF ) )
        // OracleDML.g:128:5: ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement ) ( SEMICOLON | EOF )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:128:5: ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement )
            {
                ANTLR_UINT32 alt2=7;
                {
                    ANTLR_UINT32 LA2_0 = this->LA(1);
                    if ( (LA2_0 == LEFT_PAREN || LA2_0 == SQL92_RESERVED_SELECT || LA2_0 == SQL92_RESERVED_WITH))
                    {
                        alt2=1;
                    }
                    else if ( (LA2_0 == SQL92_RESERVED_UPDATE))
                    {
                        alt2=2;
                    }
                    else if ( (LA2_0 == SQL92_RESERVED_DELETE))
                    {
                        alt2=3;
                    }
                    else if ( (LA2_0 == SQL92_RESERVED_INSERT))
                    {
                        alt2=4;
                    }
                    else if ( (LA2_0 == PLSQL_RESERVED_LOCK))
                    {
                        alt2=5;
                    }
                    else if ( (LA2_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))))
                    {
                        {
                            ANTLR_UINT32 LA2_6 = this->LA(2);
                            if ( (LA2_6 == SQL92_RESERVED_INTO) && ((toUpper(LT(1)->getText()) == "MERGE")))
                            {
                                alt2=6;
                            }
                            else if ( (LA2_6 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "EXPLAIN")))
                            {
                                alt2=7;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 2 );
                                ex->set_state( 6 );


                                goto ruleseq_of_statementsEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 2 );
                        ex->set_state( 0 );


                        goto ruleseq_of_statementsEx;

                    }
                }
                switch (alt2)
                {
            	case 1:
            	    // OracleDML.g:128:10: select_statement
            	    {
            	        this->followPush(FOLLOW_select_statement_in_seq_of_statements700);
            	        select_statement3=select_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, select_statement3.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:129:10: update_statement
            	    {
            	        this->followPush(FOLLOW_update_statement_in_seq_of_statements711);
            	        update_statement4=update_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, update_statement4.tree);


            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:130:10: delete_statement
            	    {
            	        this->followPush(FOLLOW_delete_statement_in_seq_of_statements722);
            	        delete_statement5=delete_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, delete_statement5.tree);


            	    }
            	    break;
            	case 4:
            	    // OracleDML.g:131:10: insert_statement
            	    {
            	        this->followPush(FOLLOW_insert_statement_in_seq_of_statements733);
            	        insert_statement6=insert_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, insert_statement6.tree);


            	    }
            	    break;
            	case 5:
            	    // OracleDML.g:132:10: lock_table_statement
            	    {
            	        this->followPush(FOLLOW_lock_table_statement_in_seq_of_statements744);
            	        lock_table_statement7=lock_table_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, lock_table_statement7.tree);


            	    }
            	    break;
            	case 6:
            	    // OracleDML.g:133:10: merge_statement
            	    {
            	        this->followPush(FOLLOW_merge_statement_in_seq_of_statements755);
            	        merge_statement8=merge_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_statement8.tree);


            	    }
            	    break;
            	case 7:
            	    // OracleDML.g:134:10: explain_statement
            	    {
            	        this->followPush(FOLLOW_explain_statement_in_seq_of_statements766);
            	        explain_statement9=explain_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, explain_statement9.tree);


            	    }
            	    break;

                }
            }

            set10=(ImplTraits::CommonTokenType const*) this->LT(1);

            if ( this->LA(1) == EOF_TOKEN || this->LA(1) == SEMICOLON )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(set10));
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< OracleDMLImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleseq_of_statementsEx;
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleseq_of_statementsEx; /* Prevent compiler warnings */
    ruleseq_of_statementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end seq_of_statements */

/**
 * $ANTLR start explain_statement
 * OracleDML.g:139:1: explain_statement : explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement ) -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? ) ;
 */
OracleDML::explain_statement_return
OracleDML::explain_statement()
{
    OracleDML::explain_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP15 = NULL;
    OracleDML_OracleDMLKeys::explain_key_return explain_key11;
    ImplTraits::TreeTypePtr::pointer explain_key11_last = NULL;
    OracleDML_OracleDMLKeys::plan_key_return plan_key12;
    ImplTraits::TreeTypePtr::pointer plan_key12_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key13;
    ImplTraits::TreeTypePtr::pointer set_key13_last = NULL;
    OracleDML_OracleDMLKeys::statement_id_key_return statement_id_key14;
    ImplTraits::TreeTypePtr::pointer statement_id_key14_last = NULL;
    OracleDML_OracleDMLCommons::quoted_string_return quoted_string16;
    ImplTraits::TreeTypePtr::pointer quoted_string16_last = NULL;
    OracleDML_OracleDMLKeys::into_key_return into_key17;
    ImplTraits::TreeTypePtr::pointer into_key17_last = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name18;
    ImplTraits::TreeTypePtr::pointer tableview_name18_last = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key19;
    ImplTraits::TreeTypePtr::pointer for_key19_last = NULL;
    OracleDML::select_statement_return select_statement20;
    ImplTraits::TreeTypePtr::pointer select_statement20_last = NULL;
    OracleDML::update_statement_return update_statement21;
    ImplTraits::TreeTypePtr::pointer update_statement21_last = NULL;
    OracleDML::delete_statement_return delete_statement22;
    ImplTraits::TreeTypePtr::pointer delete_statement22_last = NULL;
    OracleDML::insert_statement_return insert_statement23;
    ImplTraits::TreeTypePtr::pointer insert_statement23_last = NULL;
    OracleDML::merge_statement_return merge_statement24;
    ImplTraits::TreeTypePtr::pointer merge_statement24_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP15_tree;
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_delete_statement(get_psrstate()->get_treeAdaptor(), "rule delete_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_quoted_string(get_psrstate()->get_treeAdaptor(), "rule quoted_string");
    RewriteRuleSubtreeStream<ImplTraits> stream_plan_key(get_psrstate()->get_treeAdaptor(), "rule plan_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_key(get_psrstate()->get_treeAdaptor(), "rule into_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_statement_id_key(get_psrstate()->get_treeAdaptor(), "rule statement_id_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_explain_key(get_psrstate()->get_treeAdaptor(), "rule explain_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_statement(get_psrstate()->get_treeAdaptor(), "rule merge_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_statement(get_psrstate()->get_treeAdaptor(), "rule update_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_set_key(get_psrstate()->get_treeAdaptor(), "rule set_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_insert_statement(get_psrstate()->get_treeAdaptor(), "rule insert_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:140:5: ( explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement ) -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? ) )
        // OracleDML.g:140:10: explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement )
        {
            this->followPush(FOLLOW_explain_key_in_explain_statement809);
            explain_key11=explain_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexplain_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                explain_key11_last = explain_key11.tree.get();
                stream_explain_key.add(explain_key11.tree);
            }

            this->followPush(FOLLOW_plan_key_in_explain_statement811);
            plan_key12=plan_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexplain_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                plan_key12_last = plan_key12.tree.get();
                stream_plan_key.add(plan_key12.tree);
            }

            // OracleDML.g:141:10: ( set_key statement_id_key EQUALS_OP quoted_string )?
            {
                ANTLR_UINT32 alt3=2;
                {
                    ANTLR_UINT32 LA3_0 = this->LA(1);
                    if ( (LA3_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")))
                    {
                        alt3=1;
                    }
                }
                switch (alt3)
                {
            	case 1:
            	    // OracleDML.g:141:11: set_key statement_id_key EQUALS_OP quoted_string
            	    {
            	        this->followPush(FOLLOW_set_key_in_explain_statement823);
            	        set_key13=set_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            set_key13_last = set_key13.tree.get();
            	            stream_set_key.add(set_key13.tree);
            	        }

            	        this->followPush(FOLLOW_statement_id_key_in_explain_statement825);
            	        statement_id_key14=statement_id_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            statement_id_key14_last = statement_id_key14.tree.get();
            	            stream_statement_id_key.add(statement_id_key14.tree);
            	        }

            	        EQUALS_OP15 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_explain_statement827);
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP15);


            	        this->followPush(FOLLOW_quoted_string_in_explain_statement829);
            	        quoted_string16=quoted_string();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            quoted_string16_last = quoted_string16.tree.get();
            	            stream_quoted_string.add(quoted_string16.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:142:10: ( into_key tableview_name )?
            {
                ANTLR_UINT32 alt4=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_INTO:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // OracleDML.g:142:11: into_key tableview_name
            	    {
            	        this->followPush(FOLLOW_into_key_in_explain_statement843);
            	        into_key17=into_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            into_key17_last = into_key17.tree.get();
            	            stream_into_key.add(into_key17.tree);
            	        }

            	        this->followPush(FOLLOW_tableview_name_in_explain_statement845);
            	        tableview_name18=tableview_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            tableview_name18_last = tableview_name18.tree.get();
            	            stream_tableview_name.add(tableview_name18.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_for_key_in_explain_statement858);
            for_key19=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexplain_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key19_last = for_key19.tree.get();
                stream_for_key.add(for_key19.tree);
            }

            // OracleDML.g:144:10: ( select_statement | update_statement | delete_statement | insert_statement | merge_statement )
            {
                ANTLR_UINT32 alt5=5;
                {
                    ANTLR_UINT32 LA5_0 = this->LA(1);
                    if ( (LA5_0 == LEFT_PAREN || LA5_0 == SQL92_RESERVED_SELECT || LA5_0 == SQL92_RESERVED_WITH))
                    {
                        alt5=1;
                    }
                    else if ( (LA5_0 == SQL92_RESERVED_UPDATE))
                    {
                        alt5=2;
                    }
                    else if ( (LA5_0 == SQL92_RESERVED_DELETE))
                    {
                        alt5=3;
                    }
                    else if ( (LA5_0 == SQL92_RESERVED_INSERT))
                    {
                        alt5=4;
                    }
                    else if ( (LA5_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "MERGE")))
                    {
                        alt5=5;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 5 );
                        ex->set_state( 0 );


                        goto ruleexplain_statementEx;

                    }
                }
                switch (alt5)
                {
            	case 1:
            	    // OracleDML.g:144:12: select_statement
            	    {
            	        this->followPush(FOLLOW_select_statement_in_explain_statement871);
            	        select_statement20=select_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            select_statement20_last = select_statement20.tree.get();
            	            stream_select_statement.add(select_statement20.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:145:12: update_statement
            	    {
            	        this->followPush(FOLLOW_update_statement_in_explain_statement884);
            	        update_statement21=update_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            update_statement21_last = update_statement21.tree.get();
            	            stream_update_statement.add(update_statement21.tree);
            	        }

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:146:12: delete_statement
            	    {
            	        this->followPush(FOLLOW_delete_statement_in_explain_statement897);
            	        delete_statement22=delete_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            delete_statement22_last = delete_statement22.tree.get();
            	            stream_delete_statement.add(delete_statement22.tree);
            	        }

            	    }
            	    break;
            	case 4:
            	    // OracleDML.g:147:12: insert_statement
            	    {
            	        this->followPush(FOLLOW_insert_statement_in_explain_statement910);
            	        insert_statement23=insert_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            insert_statement23_last = insert_statement23.tree.get();
            	            stream_insert_statement.add(insert_statement23.tree);
            	        }

            	    }
            	    break;
            	case 5:
            	    // OracleDML.g:148:12: merge_statement
            	    {
            	        this->followPush(FOLLOW_merge_statement_in_explain_statement923);
            	        merge_statement24=merge_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_statement24_last = merge_statement24.tree.get();
            	            stream_merge_statement.add(merge_statement24.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: select_statement, update_statement, delete_statement, merge_statement, insert_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 150:10: -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? )
            {
            	// OracleDML.g:150:13: ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPLAIN_STATEMENT, "EXPLAIN_STATEMENT"), root_1);
            	// OracleDML.g:150:33: ( select_statement )?
            	if ( stream_select_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_statement.nextTree());
            	}
            	stream_select_statement.reset();

            	// OracleDML.g:150:51: ( update_statement )?
            	if ( stream_update_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_statement.nextTree());
            	}
            	stream_update_statement.reset();

            	// OracleDML.g:150:69: ( delete_statement )?
            	if ( stream_delete_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_delete_statement.nextTree());
            	}
            	stream_delete_statement.reset();

            	// OracleDML.g:150:87: ( insert_statement )?
            	if ( stream_insert_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_insert_statement.nextTree());
            	}
            	stream_insert_statement.reset();

            	// OracleDML.g:150:105: ( merge_statement )?
            	if ( stream_merge_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_statement.nextTree());
            	}
            	stream_merge_statement.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleexplain_statementEx; /* Prevent compiler warnings */
    ruleexplain_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end explain_statement */

/**
 * $ANTLR start select_statement
 * OracleDML.g:153:1: select_statement : ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )* -> ^( SELECT_STATEMENT[(ToraType)T_SELECT] ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) ;
 */
OracleDML::select_statement_return
OracleDML::select_statement()
{
    OracleDML::select_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::subquery_factoring_clause_return subquery_factoring_clause25;
    ImplTraits::TreeTypePtr::pointer subquery_factoring_clause25_last = NULL;
    OracleDML::subquery_return subquery26;
    ImplTraits::TreeTypePtr::pointer subquery26_last = NULL;
    OracleDML::for_update_clause_return for_update_clause27;
    ImplTraits::TreeTypePtr::pointer for_update_clause27_last = NULL;
    OracleDML::order_by_clause_return order_by_clause28;
    ImplTraits::TreeTypePtr::pointer order_by_clause28_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_factoring_clause(get_psrstate()->get_treeAdaptor(), "rule subquery_factoring_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_by_clause(get_psrstate()->get_treeAdaptor(), "rule order_by_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_update_clause(get_psrstate()->get_treeAdaptor(), "rule for_update_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:154:5: ( ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )* -> ^( SELECT_STATEMENT[(ToraType)T_SELECT] ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) )
        // OracleDML.g:154:10: ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )*
        {
            // OracleDML.g:154:10: ( subquery_factoring_clause )?
            {
                ANTLR_UINT32 alt6=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WITH:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6)
                {
            	case 1:
            	    // OracleDML.g:154:10: subquery_factoring_clause
            	    {
            	        this->followPush(FOLLOW_subquery_factoring_clause_in_select_statement984);
            	        subquery_factoring_clause25=subquery_factoring_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselect_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery_factoring_clause25_last = subquery_factoring_clause25.tree.get();
            	            stream_subquery_factoring_clause.add(subquery_factoring_clause25.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_subquery_in_select_statement995);
            subquery26=subquery();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleselect_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                subquery26_last = subquery26.tree.get();
                stream_subquery.add(subquery26.tree);
            }

            // OracleDML.g:156:9: ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt7=3;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    ANTLR_UINT32 LA7_0 = this->LA(1);
                    if ( (LA7_0 == SQL92_RESERVED_FOR))
                    {
                        alt7=1;
                    }
                    else if ( (LA7_0 == SQL92_RESERVED_ORDER) && (this->msynpred( antlr3::ClassForwarder<synpred1_OracleDML>() )))
                    {
                        alt7=2;
                    }

                }
                switch (alt7)
                {
            	case 1:
            	    // OracleDML.g:156:10: for_update_clause
            	    {
            	        this->followPush(FOLLOW_for_update_clause_in_select_statement1006);
            	        for_update_clause27=for_update_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselect_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_update_clause27_last = for_update_clause27.tree.get();
            	            stream_for_update_clause.add(for_update_clause27.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:156:28: ( order_key ( siblings_key )? by_key )=> order_by_clause
            	    {
            	        this->followPush(FOLLOW_order_by_clause_in_select_statement1018);
            	        order_by_clause28=order_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselect_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_by_clause28_last = order_by_clause28.tree.get();
            	            stream_order_by_clause.add(order_by_clause28.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: for_update_clause, subquery_factoring_clause, order_by_clause, subquery
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 157:9: -> ^( SELECT_STATEMENT[(ToraType)T_SELECT] ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
            {
            	// OracleDML.g:157:12: ^( SELECT_STATEMENT[(ToraType)T_SELECT] ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_STATEMENT, (ToraType)T_SELECT), root_1);
            	// OracleDML.g:157:51: ( subquery_factoring_clause )?
            	if ( stream_subquery_factoring_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_factoring_clause.nextTree());
            	}
            	stream_subquery_factoring_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	// OracleDML.g:157:87: ( for_update_clause )*
            	while ( stream_for_update_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_for_update_clause.nextTree());
            	}
            	stream_for_update_clause.reset();

            	// OracleDML.g:157:106: ( order_by_clause )*
            	while ( stream_order_by_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_order_by_clause.nextTree());
            	}
            	stream_order_by_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleselect_statementEx; /* Prevent compiler warnings */
    ruleselect_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end select_statement */

/**
 * $ANTLR start subquery_factoring_clause
 * OracleDML.g:161:1: subquery_factoring_clause : with_key ^ factoring_element ( COMMA ! factoring_element )* ;
 */
OracleDML::subquery_factoring_clause_return
OracleDML::subquery_factoring_clause()
{
    OracleDML::subquery_factoring_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA31 = NULL;
    OracleDML_OracleDMLKeys::with_key_return with_key29;
    ImplTraits::TreeTypePtr::pointer with_key29_last = NULL;
    OracleDML::factoring_element_return factoring_element30;
    ImplTraits::TreeTypePtr::pointer factoring_element30_last = NULL;
    OracleDML::factoring_element_return factoring_element32;
    ImplTraits::TreeTypePtr::pointer factoring_element32_last = NULL;
    ImplTraits::TreeTypePtr COMMA31_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:162:5: ( with_key ^ factoring_element ( COMMA ! factoring_element )* )
        // OracleDML.g:162:10: with_key ^ factoring_element ( COMMA ! factoring_element )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_with_key_in_subquery_factoring_clause1069);
            with_key29=with_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubquery_factoring_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(with_key29.tree, root_0);

            this->followPush(FOLLOW_factoring_element_in_subquery_factoring_clause1072);
            factoring_element30=factoring_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubquery_factoring_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, factoring_element30.tree);


            // OracleDML.g:162:38: ( COMMA ! factoring_element )*

            for (;;)
            {
                ANTLR_UINT32 alt8=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8)
                {
            	case 1:
            	    // OracleDML.g:162:39: COMMA ! factoring_element
            	    {
            	        COMMA31 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_subquery_factoring_clause1075);
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_factoring_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_factoring_element_in_subquery_factoring_clause1078);
            	        factoring_element32=factoring_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_factoring_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, factoring_element32.tree);


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesubquery_factoring_clauseEx; /* Prevent compiler warnings */
    rulesubquery_factoring_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery_factoring_clause */

/**
 * $ANTLR start factoring_element
 * OracleDML.g:165:1: factoring_element : query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )? -> ^( FACTORING query_name ( column_name )* subquery ( search_clause )? ( cycle_clause )? ) ;
 */
OracleDML::factoring_element_return
OracleDML::factoring_element()
{
    OracleDML::factoring_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN34 = NULL;
    ImplTraits::CommonTokenType const* COMMA36 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN38 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN40 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN43 = NULL;
    OracleDML_OracleDMLCommons::query_name_return query_name33;
    ImplTraits::TreeTypePtr::pointer query_name33_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name35;
    ImplTraits::TreeTypePtr::pointer column_name35_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name37;
    ImplTraits::TreeTypePtr::pointer column_name37_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key39;
    ImplTraits::TreeTypePtr::pointer as_key39_last = NULL;
    OracleDML::subquery_return subquery41;
    ImplTraits::TreeTypePtr::pointer subquery41_last = NULL;
    OracleDML::order_by_clause_return order_by_clause42;
    ImplTraits::TreeTypePtr::pointer order_by_clause42_last = NULL;
    OracleDML::search_clause_return search_clause44;
    ImplTraits::TreeTypePtr::pointer search_clause44_last = NULL;
    OracleDML::cycle_clause_return cycle_clause45;
    ImplTraits::TreeTypePtr::pointer cycle_clause45_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN34_tree;
    ImplTraits::TreeTypePtr COMMA36_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN38_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN40_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN43_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_by_clause(get_psrstate()->get_treeAdaptor(), "rule order_by_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_cycle_clause(get_psrstate()->get_treeAdaptor(), "rule cycle_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_search_clause(get_psrstate()->get_treeAdaptor(), "rule search_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_as_key(get_psrstate()->get_treeAdaptor(), "rule as_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_query_name(get_psrstate()->get_treeAdaptor(), "rule query_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:166:5: ( query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )? -> ^( FACTORING query_name ( column_name )* subquery ( search_clause )? ( cycle_clause )? ) )
        // OracleDML.g:166:10: query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )?
        {
            this->followPush(FOLLOW_query_name_in_factoring_element1100);
            query_name33=query_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                query_name33_last = query_name33.tree.get();
                stream_query_name.add(query_name33.tree);
            }

            // OracleDML.g:166:21: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            {
                ANTLR_UINT32 alt10=2;
                switch ( this->LA(1) )
                {
                    case LEFT_PAREN:
                    	{
                    		alt10=1;
                    	}
                        break;
                }

                switch (alt10)
                {
            	case 1:
            	    // OracleDML.g:166:22: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN34 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_factoring_element1103);
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN34);


            	        this->followPush(FOLLOW_column_name_in_factoring_element1105);
            	        column_name35=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name35_last = column_name35.tree.get();
            	            stream_column_name.add(column_name35.tree);
            	        }

            	        // OracleDML.g:166:45: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt9=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt9=1;
            	            	}
            	                break;

            	            }

            	            switch (alt9)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:166:46: COMMA column_name
            	        	    {
            	        	        COMMA36 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_factoring_element1108);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulefactoring_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA36);


            	        	        this->followPush(FOLLOW_column_name_in_factoring_element1110);
            	        	        column_name37=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulefactoring_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name37_last = column_name37.tree.get();
            	        	            stream_column_name.add(column_name37.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop9;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop9: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN38 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_factoring_element1114);
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN38);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_as_key_in_factoring_element1118);
            as_key39=as_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                as_key39_last = as_key39.tree.get();
                stream_as_key.add(as_key39.tree);
            }

            LEFT_PAREN40 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_factoring_element1120);
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN40);


            this->followPush(FOLLOW_subquery_in_factoring_element1122);
            subquery41=subquery();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                subquery41_last = subquery41.tree.get();
                stream_subquery.add(subquery41.tree);
            }

            // OracleDML.g:166:107: ( order_by_clause )?
            {
                ANTLR_UINT32 alt11=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ORDER:
                    	{
                    		alt11=1;
                    	}
                        break;
                }

                switch (alt11)
                {
            	case 1:
            	    // OracleDML.g:166:107: order_by_clause
            	    {
            	        this->followPush(FOLLOW_order_by_clause_in_factoring_element1124);
            	        order_by_clause42=order_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_by_clause42_last = order_by_clause42.tree.get();
            	            stream_order_by_clause.add(order_by_clause42.tree);
            	        }

            	    }
            	    break;

                }
            }

            RIGHT_PAREN43 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_factoring_element1127);
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN43);


            // OracleDML.g:167:10: ( search_clause )?
            {
                ANTLR_UINT32 alt12=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case REGULAR_ID:
                    		    	{
                    		    		switch ( this->LA(3) )
                    		    		{
                    		    		    case REGULAR_ID:
                    		    		    	{
                    		    		    		switch ( this->LA(4) )
                    		    		    		{
                    		    		    		    case SQL92_RESERVED_BY:
                    		    		    		    	{
                    		    		    		    		alt12=1;
                    		    		    		    	}
                    		    		    		        break;
                    		    		    		}

                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt12)
                {
            	case 1:
            	    // OracleDML.g:167:10: search_clause
            	    {
            	        this->followPush(FOLLOW_search_clause_in_factoring_element1138);
            	        search_clause44=search_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            search_clause44_last = search_clause44.tree.get();
            	            stream_search_clause.add(search_clause44.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:168:10: ( cycle_clause )?
            {
                ANTLR_UINT32 alt13=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		alt13=1;
                    	}
                        break;
                }

                switch (alt13)
                {
            	case 1:
            	    // OracleDML.g:168:10: cycle_clause
            	    {
            	        this->followPush(FOLLOW_cycle_clause_in_factoring_element1150);
            	        cycle_clause45=cycle_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            cycle_clause45_last = cycle_clause45.tree.get();
            	            stream_cycle_clause.add(cycle_clause45.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: cycle_clause, subquery, column_name, query_name, search_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 169:9: -> ^( FACTORING query_name ( column_name )* subquery ( search_clause )? ( cycle_clause )? )
            {
            	// OracleDML.g:169:12: ^( FACTORING query_name ( column_name )* subquery ( search_clause )? ( cycle_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(FACTORING, "FACTORING"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_query_name.nextTree());
            	// OracleDML.g:169:35: ( column_name )*
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	// OracleDML.g:169:57: ( search_clause )?
            	if ( stream_search_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_search_clause.nextTree());
            	}
            	stream_search_clause.reset();

            	// OracleDML.g:169:72: ( cycle_clause )?
            	if ( stream_cycle_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cycle_clause.nextTree());
            	}
            	stream_cycle_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefactoring_elementEx; /* Prevent compiler warnings */
    rulefactoring_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end factoring_element */

/**
 * $ANTLR start search_clause
 * OracleDML.g:172:1: search_clause : search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name ;
 */
OracleDML::search_clause_return
OracleDML::search_clause()
{
    OracleDML::search_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA58 = NULL;
    OracleDML_OracleDMLKeys::search_key_return search_key46;
    ImplTraits::TreeTypePtr::pointer search_key46_last = NULL;
    OracleDML_OracleDMLKeys::depth_key_return depth_key47;
    ImplTraits::TreeTypePtr::pointer depth_key47_last = NULL;
    OracleDML_OracleDMLKeys::breadth_key_return breadth_key48;
    ImplTraits::TreeTypePtr::pointer breadth_key48_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key49;
    ImplTraits::TreeTypePtr::pointer first_key49_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key50;
    ImplTraits::TreeTypePtr::pointer by_key50_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name51;
    ImplTraits::TreeTypePtr::pointer column_name51_last = NULL;
    OracleDML_OracleDMLKeys::asc_key_return asc_key52;
    ImplTraits::TreeTypePtr::pointer asc_key52_last = NULL;
    OracleDML_OracleDMLKeys::desc_key_return desc_key53;
    ImplTraits::TreeTypePtr::pointer desc_key53_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key54;
    ImplTraits::TreeTypePtr::pointer nulls_key54_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key55;
    ImplTraits::TreeTypePtr::pointer first_key55_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key56;
    ImplTraits::TreeTypePtr::pointer nulls_key56_last = NULL;
    OracleDML_OracleDMLKeys::last_key_return last_key57;
    ImplTraits::TreeTypePtr::pointer last_key57_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name59;
    ImplTraits::TreeTypePtr::pointer column_name59_last = NULL;
    OracleDML_OracleDMLKeys::asc_key_return asc_key60;
    ImplTraits::TreeTypePtr::pointer asc_key60_last = NULL;
    OracleDML_OracleDMLKeys::desc_key_return desc_key61;
    ImplTraits::TreeTypePtr::pointer desc_key61_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key62;
    ImplTraits::TreeTypePtr::pointer nulls_key62_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key63;
    ImplTraits::TreeTypePtr::pointer first_key63_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key64;
    ImplTraits::TreeTypePtr::pointer nulls_key64_last = NULL;
    OracleDML_OracleDMLKeys::last_key_return last_key65;
    ImplTraits::TreeTypePtr::pointer last_key65_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key66;
    ImplTraits::TreeTypePtr::pointer set_key66_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name67;
    ImplTraits::TreeTypePtr::pointer column_name67_last = NULL;
    ImplTraits::TreeTypePtr COMMA58_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:173:5: ( search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name )
        // OracleDML.g:173:10: search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_search_key_in_search_clause1198);
            search_key46=search_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, search_key46.tree);


            // OracleDML.g:173:21: ( depth_key | breadth_key )
            {
                ANTLR_UINT32 alt14=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA14_1 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "DEPTH")))
                		    {
                		        alt14=1;
                		    }
                		    else if ( ((toUpper(LT(1)->getText()) == "BREADTH")))
                		    {
                		        alt14=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 14 );
                		        ex->set_state( 1 );


                		        goto rulesearch_clauseEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 14 );
                    ex->set_state( 0 );


                    goto rulesearch_clauseEx;

                }

                switch (alt14)
                {
            	case 1:
            	    // OracleDML.g:173:23: depth_key
            	    {
            	        this->followPush(FOLLOW_depth_key_in_search_clause1202);
            	        depth_key47=depth_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, depth_key47.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:173:35: breadth_key
            	    {
            	        this->followPush(FOLLOW_breadth_key_in_search_clause1206);
            	        breadth_key48=breadth_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, breadth_key48.tree);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_first_key_in_search_clause1210);
            first_key49=first_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, first_key49.tree);


            this->followPush(FOLLOW_by_key_in_search_clause1212);
            by_key50=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, by_key50.tree);


            this->followPush(FOLLOW_column_name_in_search_clause1227);
            column_name51=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name51.tree);


            // OracleDML.g:174:26: ( asc_key )?
            {
                ANTLR_UINT32 alt15=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ASC:
                    	{
                    		alt15=1;
                    	}
                        break;
                }

                switch (alt15)
                {
            	case 1:
            	    // OracleDML.g:174:26: asc_key
            	    {
            	        this->followPush(FOLLOW_asc_key_in_search_clause1229);
            	        asc_key52=asc_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, asc_key52.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:174:36: ( desc_key )?
            {
                ANTLR_UINT32 alt16=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_DESC:
                    	{
                    		alt16=1;
                    	}
                        break;
                }

                switch (alt16)
                {
            	case 1:
            	    // OracleDML.g:174:36: desc_key
            	    {
            	        this->followPush(FOLLOW_desc_key_in_search_clause1233);
            	        desc_key53=desc_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, desc_key53.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:174:47: ( nulls_key first_key )?
            {
                ANTLR_UINT32 alt17=2;
                {
                    ANTLR_UINT32 LA17_0 = this->LA(1);
                    if ( (LA17_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))))
                    {
                        {
                            ANTLR_UINT32 LA17_1 = this->LA(2);
                            if ( (LA17_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))))
                            {
                                {
                                    ANTLR_UINT32 LA17_3 = this->LA(3);
                                    if ( ((toUpper(LT(1)->getText()) == "NULLS")))
                                    {
                                        alt17=1;
                                    }
                                }
                            }
                        }
                    }
                }
                switch (alt17)
                {
            	case 1:
            	    // OracleDML.g:174:48: nulls_key first_key
            	    {
            	        this->followPush(FOLLOW_nulls_key_in_search_clause1238);
            	        nulls_key54=nulls_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nulls_key54.tree);


            	        this->followPush(FOLLOW_first_key_in_search_clause1240);
            	        first_key55=first_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, first_key55.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:174:70: ( nulls_key last_key )?
            {
                ANTLR_UINT32 alt18=2;
                alt18 = cdfa18.predict(this, this->get_rec(), this->get_istream(), cdfa18 );
                if  (this->hasException())
                {
                    goto rulesearch_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                switch (alt18)
                {
            	case 1:
            	    // OracleDML.g:174:71: nulls_key last_key
            	    {
            	        this->followPush(FOLLOW_nulls_key_in_search_clause1245);
            	        nulls_key56=nulls_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nulls_key56.tree);


            	        this->followPush(FOLLOW_last_key_in_search_clause1247);
            	        last_key57=last_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, last_key57.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:175:14: ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )*

            for (;;)
            {
                ANTLR_UINT32 alt23=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt23=1;
                	}
                    break;

                }

                switch (alt23)
                {
            	case 1:
            	    // OracleDML.g:175:15: COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )?
            	    {
            	        COMMA58 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_search_clause1265);
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        COMMA58_tree = std::move(get_psrstate()->get_treeAdaptor()->create(COMMA58));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, COMMA58_tree);
            	        }


            	        this->followPush(FOLLOW_column_name_in_search_clause1267);
            	        column_name59=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name59.tree);


            	        // OracleDML.g:175:33: ( asc_key )?
            	        {
            	            ANTLR_UINT32 alt19=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_ASC:
            	                	{
            	                		alt19=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt19)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:175:33: asc_key
            	        	    {
            	        	        this->followPush(FOLLOW_asc_key_in_search_clause1269);
            	        	        asc_key60=asc_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, asc_key60.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:175:43: ( desc_key )?
            	        {
            	            ANTLR_UINT32 alt20=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_DESC:
            	                	{
            	                		alt20=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt20)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:175:43: desc_key
            	        	    {
            	        	        this->followPush(FOLLOW_desc_key_in_search_clause1273);
            	        	        desc_key61=desc_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, desc_key61.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:175:54: ( nulls_key first_key )?
            	        {
            	            ANTLR_UINT32 alt21=2;
            	            {
            	                ANTLR_UINT32 LA21_0 = this->LA(1);
            	                if ( (LA21_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA21_1 = this->LA(2);
            	                        if ( (LA21_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))))
            	                        {
            	                            {
            	                                ANTLR_UINT32 LA21_3 = this->LA(3);
            	                                if ( ((toUpper(LT(1)->getText()) == "NULLS")))
            	                                {
            	                                    alt21=1;
            	                                }
            	                            }
            	                        }
            	                    }
            	                }
            	            }
            	            switch (alt21)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:175:55: nulls_key first_key
            	        	    {
            	        	        this->followPush(FOLLOW_nulls_key_in_search_clause1278);
            	        	        nulls_key62=nulls_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nulls_key62.tree);


            	        	        this->followPush(FOLLOW_first_key_in_search_clause1280);
            	        	        first_key63=first_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, first_key63.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:175:77: ( nulls_key last_key )?
            	        {
            	            ANTLR_UINT32 alt22=2;
            	            alt22 = cdfa22.predict(this, this->get_rec(), this->get_istream(), cdfa22 );
            	            if  (this->hasException())
            	            {
            	                goto rulesearch_clauseEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            switch (alt22)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:175:78: nulls_key last_key
            	        	    {
            	        	        this->followPush(FOLLOW_nulls_key_in_search_clause1285);
            	        	        nulls_key64=nulls_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nulls_key64.tree);


            	        	        this->followPush(FOLLOW_last_key_in_search_clause1287);
            	        	        last_key65=last_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, last_key65.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop23;	/* break out of the loop */
            	    break;
                }
            }
            loop23: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_set_key_in_search_clause1307);
            set_key66=set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, set_key66.tree);


            this->followPush(FOLLOW_column_name_in_search_clause1309);
            column_name67=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name67.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesearch_clauseEx; /* Prevent compiler warnings */
    rulesearch_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end search_clause */

/**
 * $ANTLR start cycle_clause
 * OracleDML.g:179:1: cycle_clause : cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression ;
 */
OracleDML::cycle_clause_return
OracleDML::cycle_clause()
{
    OracleDML::cycle_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA70 = NULL;
    OracleDML_OracleDMLKeys::cycle_key_return cycle_key68;
    ImplTraits::TreeTypePtr::pointer cycle_key68_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name69;
    ImplTraits::TreeTypePtr::pointer column_name69_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name71;
    ImplTraits::TreeTypePtr::pointer column_name71_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key72;
    ImplTraits::TreeTypePtr::pointer set_key72_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name73;
    ImplTraits::TreeTypePtr::pointer column_name73_last = NULL;
    OracleDML_OracleDMLKeys::to_key_return to_key74;
    ImplTraits::TreeTypePtr::pointer to_key74_last = NULL;
    OracleDML::expression_return expression75;
    ImplTraits::TreeTypePtr::pointer expression75_last = NULL;
    OracleDML_OracleDMLKeys::default_key_return default_key76;
    ImplTraits::TreeTypePtr::pointer default_key76_last = NULL;
    OracleDML::expression_return expression77;
    ImplTraits::TreeTypePtr::pointer expression77_last = NULL;
    ImplTraits::TreeTypePtr COMMA70_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:180:5: ( cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression )
        // OracleDML.g:180:10: cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_cycle_key_in_cycle_clause1329);
            cycle_key68=cycle_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cycle_key68.tree);


            this->followPush(FOLLOW_column_name_in_cycle_clause1331);
            column_name69=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name69.tree);


            // OracleDML.g:180:32: ( COMMA column_name )*

            for (;;)
            {
                ANTLR_UINT32 alt24=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt24=1;
                	}
                    break;

                }

                switch (alt24)
                {
            	case 1:
            	    // OracleDML.g:180:34: COMMA column_name
            	    {
            	        COMMA70 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_cycle_clause1335);
            	        if  (this->hasException())
            	        {
            	            goto rulecycle_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        COMMA70_tree = std::move(get_psrstate()->get_treeAdaptor()->create(COMMA70));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, COMMA70_tree);
            	        }


            	        this->followPush(FOLLOW_column_name_in_cycle_clause1337);
            	        column_name71=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecycle_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name71.tree);


            	    }
            	    break;

            	default:
            	    goto loop24;	/* break out of the loop */
            	    break;
                }
            }
            loop24: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_set_key_in_cycle_clause1341);
            set_key72=set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, set_key72.tree);


            this->followPush(FOLLOW_column_name_in_cycle_clause1343);
            column_name73=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name73.tree);


            this->followPush(FOLLOW_to_key_in_cycle_clause1345);
            to_key74=to_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, to_key74.tree);


            this->followPush(FOLLOW_expression_in_cycle_clause1347);
            expression75=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression75.tree);


            this->followPush(FOLLOW_default_key_in_cycle_clause1349);
            default_key76=default_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, default_key76.tree);


            this->followPush(FOLLOW_expression_in_cycle_clause1351);
            expression77=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression77.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecycle_clauseEx; /* Prevent compiler warnings */
    rulecycle_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cycle_clause */

/**
 * $ANTLR start subquery
 * OracleDML.g:183:1: subquery : subquery_basic_elements ( subquery_operation_part )* -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) ;
 */
OracleDML::subquery_return
OracleDML::subquery()
{
    OracleDML::subquery_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::subquery_basic_elements_return subquery_basic_elements78;
    ImplTraits::TreeTypePtr::pointer subquery_basic_elements78_last = NULL;
    OracleDML::subquery_operation_part_return subquery_operation_part79;
    ImplTraits::TreeTypePtr::pointer subquery_operation_part79_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_operation_part(get_psrstate()->get_treeAdaptor(), "rule subquery_operation_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_basic_elements(get_psrstate()->get_treeAdaptor(), "rule subquery_basic_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:184:5: ( subquery_basic_elements ( subquery_operation_part )* -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) )
        // OracleDML.g:184:10: subquery_basic_elements ( subquery_operation_part )*
        {
            this->followPush(FOLLOW_subquery_basic_elements_in_subquery1371);
            subquery_basic_elements78=subquery_basic_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubqueryEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                subquery_basic_elements78_last = subquery_basic_elements78.tree.get();
                stream_subquery_basic_elements.add(subquery_basic_elements78.tree);
            }

            // OracleDML.g:184:34: ( subquery_operation_part )*

            for (;;)
            {
                ANTLR_UINT32 alt25=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_MINUS:
                case SQL92_RESERVED_INTERSECT:
                case SQL92_RESERVED_UNION:
                	{
                		alt25=1;
                	}
                    break;

                }

                switch (alt25)
                {
            	case 1:
            	    // OracleDML.g:184:34: subquery_operation_part
            	    {
            	        this->followPush(FOLLOW_subquery_operation_part_in_subquery1373);
            	        subquery_operation_part79=subquery_operation_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubqueryEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery_operation_part79_last = subquery_operation_part79.tree.get();
            	            stream_subquery_operation_part.add(subquery_operation_part79.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop25;	/* break out of the loop */
            	    break;
                }
            }
            loop25: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: subquery_basic_elements, subquery_operation_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 185:9: -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
            {
            	// OracleDML.g:185:12: ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SUBQUERY, "SUBQUERY"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_basic_elements.nextTree());
            	// OracleDML.g:185:47: ( subquery_operation_part )*
            	while ( stream_subquery_operation_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_operation_part.nextTree());
            	}
            	stream_subquery_operation_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesubqueryEx; /* Prevent compiler warnings */
    rulesubqueryEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery */

/**
 * $ANTLR start subquery_operation_part
 * OracleDML.g:188:1: subquery_operation_part : ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^) subquery_basic_elements ;
 */
OracleDML::subquery_operation_part_return
OracleDML::subquery_operation_part()
{
    OracleDML::subquery_operation_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::union_key_return union_key80;
    ImplTraits::TreeTypePtr::pointer union_key80_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key81;
    ImplTraits::TreeTypePtr::pointer all_key81_last = NULL;
    OracleDML_OracleDMLKeys::intersect_key_return intersect_key82;
    ImplTraits::TreeTypePtr::pointer intersect_key82_last = NULL;
    OracleDML_OracleDMLKeys::minus_key_return minus_key83;
    ImplTraits::TreeTypePtr::pointer minus_key83_last = NULL;
    OracleDML::subquery_basic_elements_return subquery_basic_elements84;
    ImplTraits::TreeTypePtr::pointer subquery_basic_elements84_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:189:5: ( ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^) subquery_basic_elements )
        // OracleDML.g:189:10: ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^) subquery_basic_elements
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:189:10: ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^)
            {
                ANTLR_UINT32 alt27=3;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_UNION:
                	{
                		alt27=1;
                	}
                    break;
                case SQL92_RESERVED_INTERSECT:
                	{
                		alt27=2;
                	}
                    break;
                case PLSQL_RESERVED_MINUS:
                	{
                		alt27=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 27 );
                    ex->set_state( 0 );


                    goto rulesubquery_operation_partEx;

                }

                switch (alt27)
                {
            	case 1:
            	    // OracleDML.g:189:11: union_key ^ ( all_key )?
            	    {
            	        this->followPush(FOLLOW_union_key_in_subquery_operation_part1414);
            	        union_key80=union_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_operation_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(union_key80.tree, root_0);

            	        // OracleDML.g:189:22: ( all_key )?
            	        {
            	            ANTLR_UINT32 alt26=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_ALL:
            	                	{
            	                		alt26=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt26)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:189:22: all_key
            	        	    {
            	        	        this->followPush(FOLLOW_all_key_in_subquery_operation_part1417);
            	        	        all_key81=all_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesubquery_operation_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, all_key81.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:189:31: intersect_key ^
            	    {
            	        this->followPush(FOLLOW_intersect_key_in_subquery_operation_part1420);
            	        intersect_key82=intersect_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_operation_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(intersect_key82.tree, root_0);

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:189:46: minus_key ^
            	    {
            	        this->followPush(FOLLOW_minus_key_in_subquery_operation_part1423);
            	        minus_key83=minus_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_operation_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(minus_key83.tree, root_0);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_subquery_basic_elements_in_subquery_operation_part1427);
            subquery_basic_elements84=subquery_basic_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubquery_operation_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery_basic_elements84.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesubquery_operation_partEx; /* Prevent compiler warnings */
    rulesubquery_operation_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery_operation_part */

/**
 * $ANTLR start subquery_basic_elements
 * OracleDML.g:192:1: subquery_basic_elements : ( query_block | LEFT_PAREN ^ subquery RIGHT_PAREN );
 */
OracleDML::subquery_basic_elements_return
OracleDML::subquery_basic_elements()
{
    OracleDML::subquery_basic_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN86 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN88 = NULL;
    OracleDML::query_block_return query_block85;
    ImplTraits::TreeTypePtr::pointer query_block85_last = NULL;
    OracleDML::subquery_return subquery87;
    ImplTraits::TreeTypePtr::pointer subquery87_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN86_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN88_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:193:5: ( query_block | LEFT_PAREN ^ subquery RIGHT_PAREN )

            ANTLR_UINT32 alt28;

            alt28=2;

            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt28=1;
            	}
                break;
            case LEFT_PAREN:
            	{
            		alt28=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 28 );
                ex->set_state( 0 );


                goto rulesubquery_basic_elementsEx;

            }

            switch (alt28)
            {
        	case 1:
        	    // OracleDML.g:193:10: query_block
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_query_block_in_subquery_basic_elements1447);
        	        query_block85=query_block();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesubquery_basic_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, query_block85.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:194:10: LEFT_PAREN ^ subquery RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        LEFT_PAREN86 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_subquery_basic_elements1458);
        	        if  (this->hasException())
        	        {
        	            goto rulesubquery_basic_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN86_tree = get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN86);
        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(LEFT_PAREN86_tree, root_0);
        	        }


        	        this->followPush(FOLLOW_subquery_in_subquery_basic_elements1461);
        	        subquery87=subquery();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesubquery_basic_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery87.tree);


        	        RIGHT_PAREN88 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1463);
        	        if  (this->hasException())
        	        {
        	            goto rulesubquery_basic_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN88_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN88));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN88_tree);
        	        }


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulesubquery_basic_elementsEx; /* Prevent compiler warnings */
    rulesubquery_basic_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery_basic_elements */

/**
 * $ANTLR start query_block
 * OracleDML.g:197:1: query_block : select_key ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( COMMA selected_element )* ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? -> {mode == 1}? ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) ;
 */
OracleDML::query_block_return
OracleDML::query_block()
{
    OracleDML::query_block_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* ASTERISK93 = NULL;
    ImplTraits::CommonTokenType const* COMMA95 = NULL;
    OracleDML_OracleDMLKeys::select_key_return select_key89;
    ImplTraits::TreeTypePtr::pointer select_key89_last = NULL;
    OracleDML_OracleDMLKeys::distinct_key_return distinct_key90;
    ImplTraits::TreeTypePtr::pointer distinct_key90_last = NULL;
    OracleDML_OracleDMLKeys::unique_key_return unique_key91;
    ImplTraits::TreeTypePtr::pointer unique_key91_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key92;
    ImplTraits::TreeTypePtr::pointer all_key92_last = NULL;
    OracleDML::selected_element_return selected_element94;
    ImplTraits::TreeTypePtr::pointer selected_element94_last = NULL;
    OracleDML::selected_element_return selected_element96;
    ImplTraits::TreeTypePtr::pointer selected_element96_last = NULL;
    OracleDML_OracleDMLCommons::into_clause_return into_clause97;
    ImplTraits::TreeTypePtr::pointer into_clause97_last = NULL;
    OracleDML::from_clause_return from_clause98;
    ImplTraits::TreeTypePtr::pointer from_clause98_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause99;
    ImplTraits::TreeTypePtr::pointer where_clause99_last = NULL;
    OracleDML::hierarchical_query_clause_return hierarchical_query_clause100;
    ImplTraits::TreeTypePtr::pointer hierarchical_query_clause100_last = NULL;
    OracleDML::group_by_clause_return group_by_clause101;
    ImplTraits::TreeTypePtr::pointer group_by_clause101_last = NULL;
    OracleDML::model_clause_return model_clause102;
    ImplTraits::TreeTypePtr::pointer model_clause102_last = NULL;
    ImplTraits::TreeTypePtr ASTERISK93_tree;
    ImplTraits::TreeTypePtr COMMA95_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleTokenStream<ImplTraits> stream_ASTERISK(get_psrstate()->get_treeAdaptor(), "token ASTERISK");
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_from_clause(get_psrstate()->get_treeAdaptor(), "rule from_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_where_clause(get_psrstate()->get_treeAdaptor(), "rule where_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_clause(get_psrstate()->get_treeAdaptor(), "rule into_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_distinct_key(get_psrstate()->get_treeAdaptor(), "rule distinct_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_group_by_clause(get_psrstate()->get_treeAdaptor(), "rule group_by_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_selected_element(get_psrstate()->get_treeAdaptor(), "rule selected_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_unique_key(get_psrstate()->get_treeAdaptor(), "rule unique_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_clause(get_psrstate()->get_treeAdaptor(), "rule model_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_key(get_psrstate()->get_treeAdaptor(), "rule select_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_hierarchical_query_clause(get_psrstate()->get_treeAdaptor(), "rule hierarchical_query_clause");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:199:5: ( select_key ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( COMMA selected_element )* ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? -> {mode == 1}? ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) )
        // OracleDML.g:199:10: select_key ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( COMMA selected_element )* ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )?
        {
            this->followPush(FOLLOW_select_key_in_query_block1491);
            select_key89=select_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_blockEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_key89_last = select_key89.tree.get();
                stream_select_key.add(select_key89.tree);
            }

            // OracleDML.g:200:9: ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )?
            {
                ANTLR_UINT32 alt30=2;
                {
                    ANTLR_UINT32 LA30_0 = this->LA(1);
                    if ( (LA30_0 == SQL92_RESERVED_DISTINCT))
                    {
                        {
                            ANTLR_UINT32 LA30_1 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred2_OracleDML>() )))
                            {
                                alt30=1;
                            }
                        }
                    }
                    else if ( (LA30_0 == SQL92_RESERVED_UNIQUE) && (this->msynpred( antlr3::ClassForwarder<synpred2_OracleDML>() )))
                    {
                        alt30=1;
                    }
                    else if ( (LA30_0 == SQL92_RESERVED_ALL))
                    {
                        {
                            ANTLR_UINT32 LA30_3 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred2_OracleDML>() )))
                            {
                                alt30=1;
                            }
                        }
                    }
                }
                switch (alt30)
                {
            	case 1:
            	    // OracleDML.g:200:10: ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key )
            	    {
            	        // OracleDML.g:200:46: ( distinct_key | unique_key | all_key )
            	        {
            	            ANTLR_UINT32 alt29=3;
            	            switch ( this->LA(1) )
            	            {
            	            case SQL92_RESERVED_DISTINCT:
            	            	{
            	            		alt29=1;
            	            	}
            	                break;
            	            case SQL92_RESERVED_UNIQUE:
            	            	{
            	            		alt29=2;
            	            	}
            	                break;
            	            case SQL92_RESERVED_ALL:
            	            	{
            	            		alt29=3;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 29 );
            	                ex->set_state( 0 );


            	                goto rulequery_blockEx;

            	            }

            	            switch (alt29)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:200:47: distinct_key
            	        	    {
            	        	        this->followPush(FOLLOW_distinct_key_in_query_block1512);
            	        	        distinct_key90=distinct_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_blockEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            distinct_key90_last = distinct_key90.tree.get();
            	        	            stream_distinct_key.add(distinct_key90.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:200:60: unique_key
            	        	    {
            	        	        this->followPush(FOLLOW_unique_key_in_query_block1514);
            	        	        unique_key91=unique_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_blockEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            unique_key91_last = unique_key91.tree.get();
            	        	            stream_unique_key.add(unique_key91.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // OracleDML.g:200:71: all_key
            	        	    {
            	        	        this->followPush(FOLLOW_all_key_in_query_block1516);
            	        	        all_key92=all_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_blockEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            all_key92_last = all_key92.tree.get();
            	        	            stream_all_key.add(all_key92.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:201:9: ( ASTERISK | selected_element ( COMMA selected_element )* )
            {
                ANTLR_UINT32 alt32=2;
                switch ( this->LA(1) )
                {
                case ASTERISK:
                	{
                		alt32=1;
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case REGULAR_ID:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt32=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 32 );
                    ex->set_state( 0 );


                    goto rulequery_blockEx;

                }

                switch (alt32)
                {
            	case 1:
            	    // OracleDML.g:201:10: ASTERISK
            	    {
            	        ASTERISK93 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_query_block1530);
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_ASTERISK.add(ASTERISK93);


            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:201:32: selected_element ( COMMA selected_element )*
            	    {
            	        this->followPush(FOLLOW_selected_element_in_query_block1535);
            	        selected_element94=selected_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            selected_element94_last = selected_element94.tree.get();
            	            stream_selected_element.add(selected_element94.tree);
            	        }

            	        // OracleDML.g:201:49: ( COMMA selected_element )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt31=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt31=1;
            	            	}
            	                break;

            	            }

            	            switch (alt31)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:201:50: COMMA selected_element
            	        	    {
            	        	        COMMA95 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_query_block1538);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_blockEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA95);


            	        	        this->followPush(FOLLOW_selected_element_in_query_block1540);
            	        	        selected_element96=selected_element();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_blockEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            selected_element96_last = selected_element96.tree.get();
            	        	            stream_selected_element.add(selected_element96.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop31;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop31: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // OracleDML.g:202:9: ( into_clause )?
            {
                ANTLR_UINT32 alt33=2;
                {
                    ANTLR_UINT32 LA33_0 = this->LA(1);
                    if ( (LA33_0 == SQL92_RESERVED_INTO))
                    {
                        alt33=1;
                    }
                    else if ( (LA33_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "BULK")))
                    {
                        alt33=1;
                    }
                }
                switch (alt33)
                {
            	case 1:
            	    // OracleDML.g:202:9: into_clause
            	    {
            	        this->followPush(FOLLOW_into_clause_in_query_block1553);
            	        into_clause97=into_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            into_clause97_last = into_clause97.tree.get();
            	            stream_into_clause.add(into_clause97.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_from_clause_in_query_block1564);
            from_clause98=from_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_blockEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                from_clause98_last = from_clause98.tree.get();
                stream_from_clause.add(from_clause98.tree);
            }

            // OracleDML.g:204:9: ( where_clause )?
            {
                ANTLR_UINT32 alt34=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt34=1;
                    	}
                        break;
                }

                switch (alt34)
                {
            	case 1:
            	    // OracleDML.g:204:9: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_query_block1575);
            	        where_clause99=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            where_clause99_last = where_clause99.tree.get();
            	            stream_where_clause.add(where_clause99.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:205:9: ( hierarchical_query_clause )?
            {
                ANTLR_UINT32 alt35=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_CONNECT:
                    	{
                    		alt35=1;
                    	}
                        break;
                    case PLSQL_RESERVED_START:
                    	{
                    		alt35=1;
                    	}
                        break;
                }

                switch (alt35)
                {
            	case 1:
            	    // OracleDML.g:205:9: hierarchical_query_clause
            	    {
            	        this->followPush(FOLLOW_hierarchical_query_clause_in_query_block1587);
            	        hierarchical_query_clause100=hierarchical_query_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            hierarchical_query_clause100_last = hierarchical_query_clause100.tree.get();
            	            stream_hierarchical_query_clause.add(hierarchical_query_clause100.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:206:9: ( group_by_clause )?
            {
                ANTLR_UINT32 alt36=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_GROUP:
                    	{
                    		alt36=1;
                    	}
                        break;
                    case SQL92_RESERVED_HAVING:
                    	{
                    		alt36=1;
                    	}
                        break;
                }

                switch (alt36)
                {
            	case 1:
            	    // OracleDML.g:206:9: group_by_clause
            	    {
            	        this->followPush(FOLLOW_group_by_clause_in_query_block1599);
            	        group_by_clause101=group_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            group_by_clause101_last = group_by_clause101.tree.get();
            	            stream_group_by_clause.add(group_by_clause101.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:207:9: ( model_clause )?
            {
                ANTLR_UINT32 alt37=2;
                switch ( this->LA(1) )
                {
                    case PLSQL_NON_RESERVED_MODEL:
                    	{
                    		alt37=1;
                    	}
                        break;
                }

                switch (alt37)
                {
            	case 1:
            	    // OracleDML.g:207:9: model_clause
            	    {
            	        this->followPush(FOLLOW_model_clause_in_query_block1610);
            	        model_clause102=model_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_clause102_last = model_clause102.tree.get();
            	            stream_model_clause.add(model_clause102.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: where_clause, hierarchical_query_clause, hierarchical_query_clause, all_key, distinct_key, where_clause, all_key, model_clause, into_clause, into_clause, group_by_clause, from_clause, model_clause, distinct_key, from_clause, unique_key, selected_element, select_key, select_key, unique_key, ASTERISK, group_by_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 208:9: -> {mode == 1}? ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            if (mode == 1) {
            	// OracleDML.g:208:25: ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_select_key.nextNode(), root_1);
            	// OracleDML.g:208:38: ( distinct_key )?
            	if ( stream_distinct_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_distinct_key.nextTree());
            	}
            	stream_distinct_key.reset();

            	// OracleDML.g:208:52: ( unique_key )?
            	if ( stream_unique_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unique_key.nextTree());
            	}
            	stream_unique_key.reset();

            	// OracleDML.g:208:64: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_ASTERISK.nextNode());
            	// OracleDML.g:209:17: ( into_clause )?
            	if ( stream_into_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_into_clause.nextTree());
            	}
            	stream_into_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_from_clause.nextTree());
            	// OracleDML.g:209:42: ( where_clause )?
            	if ( stream_where_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_where_clause.nextTree());
            	}
            	stream_where_clause.reset();

            	// OracleDML.g:209:56: ( hierarchical_query_clause )?
            	if ( stream_hierarchical_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_hierarchical_query_clause.nextTree());
            	}
            	stream_hierarchical_query_clause.reset();

            	// OracleDML.g:209:83: ( group_by_clause )?
            	if ( stream_group_by_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_group_by_clause.nextTree());
            	}
            	stream_group_by_clause.reset();

            	// OracleDML.g:209:100: ( model_clause )?
            	if ( stream_model_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_clause.nextTree());
            	}
            	stream_model_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 210:9: -> ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            {
            	// OracleDML.g:210:12: ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_select_key.nextNode(), root_1);
            	// OracleDML.g:210:25: ( distinct_key )?
            	if ( stream_distinct_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_distinct_key.nextTree());
            	}
            	stream_distinct_key.reset();

            	// OracleDML.g:210:39: ( unique_key )?
            	if ( stream_unique_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unique_key.nextTree());
            	}
            	stream_unique_key.reset();

            	// OracleDML.g:210:51: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:210:60: ^( SELECT_LIST ( selected_element )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_LIST, "SELECT_LIST"), root_2);
            	if ( !(stream_selected_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "selected_element empty" );
            		goto rulequery_blockEx;
            	}
            	while ( stream_selected_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_selected_element.nextTree());
            	}
            	stream_selected_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:211:17: ( into_clause )?
            	if ( stream_into_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_into_clause.nextTree());
            	}
            	stream_into_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_from_clause.nextTree());
            	// OracleDML.g:211:42: ( where_clause )?
            	if ( stream_where_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_where_clause.nextTree());
            	}
            	stream_where_clause.reset();

            	// OracleDML.g:211:56: ( hierarchical_query_clause )?
            	if ( stream_hierarchical_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_hierarchical_query_clause.nextTree());
            	}
            	stream_hierarchical_query_clause.reset();

            	// OracleDML.g:211:83: ( group_by_clause )?
            	if ( stream_group_by_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_group_by_clause.nextTree());
            	}
            	stream_group_by_clause.reset();

            	// OracleDML.g:211:100: ( model_clause )?
            	if ( stream_model_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_clause.nextTree());
            	}
            	stream_model_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulequery_blockEx; /* Prevent compiler warnings */
    rulequery_blockEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end query_block */

/**
 * $ANTLR start selected_element
 * OracleDML.g:214:1: selected_element : select_list_elements ( column_alias )? -> ^( SELECT_ITEM select_list_elements ( column_alias )? ) ;
 */
OracleDML::selected_element_return
OracleDML::selected_element()
{
    OracleDML::selected_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::select_list_elements_return select_list_elements103;
    ImplTraits::TreeTypePtr::pointer select_list_elements103_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias104;
    ImplTraits::TreeTypePtr::pointer column_alias104_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_list_elements(get_psrstate()->get_treeAdaptor(), "rule select_list_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:215:5: ( select_list_elements ( column_alias )? -> ^( SELECT_ITEM select_list_elements ( column_alias )? ) )
        // OracleDML.g:215:10: select_list_elements ( column_alias )?
        {
            this->followPush(FOLLOW_select_list_elements_in_selected_element1754);
            select_list_elements103=select_list_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleselected_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_list_elements103_last = select_list_elements103.tree.get();
                stream_select_list_elements.add(select_list_elements103.tree);
            }

            // OracleDML.g:215:31: ( column_alias )?
            {
                ANTLR_UINT32 alt38=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt38=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case COMMA:
                    		    case SQL92_RESERVED_FROM:
                    		    case SQL92_RESERVED_INTO:
                    		    	{
                    		    		alt38=1;
                    		    	}
                    		        break;
                    		    case REGULAR_ID:
                    		    	{
                    		    		switch ( this->LA(3) )
                    		    		{
                    		    		    case REGULAR_ID:
                    		    		    	{
                    		    		    		alt38=1;
                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt38)
                {
            	case 1:
            	    // OracleDML.g:215:31: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_selected_element1756);
            	        column_alias104=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias104_last = column_alias104.tree.get();
            	            stream_column_alias.add(column_alias104.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: select_list_elements, column_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 216:9: -> ^( SELECT_ITEM select_list_elements ( column_alias )? )
            {
            	// OracleDML.g:216:12: ^( SELECT_ITEM select_list_elements ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_ITEM, "SELECT_ITEM"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_list_elements.nextTree());
            	// OracleDML.g:216:47: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleselected_elementEx; /* Prevent compiler warnings */
    ruleselected_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end selected_element */

/**
 * $ANTLR start from_clause
 * OracleDML.g:219:1: from_clause : from_key ^ table_ref_list ;
 */
OracleDML::from_clause_return
OracleDML::from_clause()
{
    OracleDML::from_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::from_key_return from_key105;
    ImplTraits::TreeTypePtr::pointer from_key105_last = NULL;
    OracleDML::table_ref_list_return table_ref_list106;
    ImplTraits::TreeTypePtr::pointer table_ref_list106_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:220:5: ( from_key ^ table_ref_list )
        // OracleDML.g:220:10: from_key ^ table_ref_list
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_from_key_in_from_clause1796);
            from_key105=from_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefrom_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(from_key105.tree, root_0);

            this->followPush(FOLLOW_table_ref_list_in_from_clause1799);
            table_ref_list106=table_ref_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefrom_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref_list106.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefrom_clauseEx; /* Prevent compiler warnings */
    rulefrom_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end from_clause */

/**
 * $ANTLR start select_list_elements
 * OracleDML.g:223:1: select_list_elements : ( ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) ) | expression -> ^( EXPR expression ) );
 */
OracleDML::select_list_elements_return
OracleDML::select_list_elements()
{
    OracleDML::select_list_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* PERIOD108 = NULL;
    ImplTraits::CommonTokenType const* ASTERISK109 = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name107;
    ImplTraits::TreeTypePtr::pointer tableview_name107_last = NULL;
    OracleDML::expression_return expression110;
    ImplTraits::TreeTypePtr::pointer expression110_last = NULL;
    ImplTraits::TreeTypePtr PERIOD108_tree;
    ImplTraits::TreeTypePtr ASTERISK109_tree;
    RewriteRuleTokenStream<ImplTraits> stream_PERIOD(get_psrstate()->get_treeAdaptor(), "token PERIOD");
    RewriteRuleTokenStream<ImplTraits> stream_ASTERISK(get_psrstate()->get_treeAdaptor(), "token ASTERISK");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:224:5: ( ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) ) | expression -> ^( EXPR expression ) )

            ANTLR_UINT32 alt39;

            alt39=2;

            switch ( this->LA(1) )
            {
            case INTRODUCER:
            	{
            		{
            		    ANTLR_UINT32 LA39_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_OracleDML>() )))
            		    {
            		        alt39=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt39=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 39 );
            		        ex->set_state( 1 );


            		        goto ruleselect_list_elementsEx;

            		    }
            		}
            	}
                break;
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA39_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_OracleDML>() )))
            		    {
            		        alt39=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt39=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 39 );
            		        ex->set_state( 2 );


            		        goto ruleselect_list_elementsEx;

            		    }
            		}
            	}
                break;
            case DELIMITED_ID:
            	{
            		{
            		    ANTLR_UINT32 LA39_3 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_OracleDML>() )))
            		    {
            		        alt39=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt39=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 39 );
            		        ex->set_state( 3 );


            		        goto ruleselect_list_elementsEx;

            		    }
            		}
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case EXACT_NUM_LIT:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt39=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 39 );
                ex->set_state( 0 );


                goto ruleselect_list_elementsEx;

            }

            switch (alt39)
            {
        	case 1:
        	    // OracleDML.g:224:10: ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK
        	    {
        	        this->followPush(FOLLOW_tableview_name_in_select_list_elements1828);
        	        tableview_name107=tableview_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_list_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            tableview_name107_last = tableview_name107.tree.get();
        	            stream_tableview_name.add(tableview_name107.tree);
        	        }

        	        PERIOD108 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_select_list_elements1830);
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_list_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_PERIOD.add(PERIOD108);


        	        ASTERISK109 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_select_list_elements1832);
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_list_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_ASTERISK.add(ASTERISK109);


        	        // AST REWRITE
        	        // elements: tableview_name
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 224:76: -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) )
        	        {
        	        	// OracleDML.g:224:79: ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	// OracleDML.g:224:86: ^( DOT_ASTERISK[$ASTERISK] tableview_name )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DOT_ASTERISK, ASTERISK109), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_tableview_name.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:225:10: expression
        	    {
        	        this->followPush(FOLLOW_expression_in_select_list_elements1858);
        	        expression110=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_list_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression110_last = expression110.tree.get();
        	            stream_expression.add(expression110.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 225:21: -> ^( EXPR expression )
        	        {
        	        	// OracleDML.g:225:24: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleselect_list_elementsEx; /* Prevent compiler warnings */
    ruleselect_list_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end select_list_elements */

/**
 * $ANTLR start table_ref_list
 * OracleDML.g:228:1: table_ref_list : table_ref ( COMMA ! table_ref )* ;
 */
OracleDML::table_ref_list_return
OracleDML::table_ref_list()
{
    OracleDML::table_ref_list_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA112 = NULL;
    OracleDML::table_ref_return table_ref111;
    ImplTraits::TreeTypePtr::pointer table_ref111_last = NULL;
    OracleDML::table_ref_return table_ref113;
    ImplTraits::TreeTypePtr::pointer table_ref113_last = NULL;
    ImplTraits::TreeTypePtr COMMA112_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:229:5: ( table_ref ( COMMA ! table_ref )* )
        // OracleDML.g:229:10: table_ref ( COMMA ! table_ref )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_table_ref_in_table_ref_list1886);
            table_ref111=table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref111.tree);


            // OracleDML.g:229:20: ( COMMA ! table_ref )*

            for (;;)
            {
                ANTLR_UINT32 alt40=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt40=1;
                	}
                    break;

                }

                switch (alt40)
                {
            	case 1:
            	    // OracleDML.g:229:21: COMMA ! table_ref
            	    {
            	        COMMA112 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_table_ref_list1889);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_table_ref_in_table_ref_list1892);
            	        table_ref113=table_ref();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref113.tree);


            	    }
            	    break;

            	default:
            	    goto loop40;	/* break out of the loop */
            	    break;
                }
            }
            loop40: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_listEx; /* Prevent compiler warnings */
    ruletable_ref_listEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_list */

/**
 * $ANTLR start table_ref
 * OracleDML.g:236:1: table_ref : table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )? -> ^( TABLE_REF[ToraType(T_TABLE_REF)] table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? ) ;
 */
OracleDML::table_ref_return
OracleDML::table_ref()
{
    OracleDML::table_ref_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::table_ref_aux_return table_ref_aux114;
    ImplTraits::TreeTypePtr::pointer table_ref_aux114_last = NULL;
    OracleDML::join_clause_return join_clause115;
    ImplTraits::TreeTypePtr::pointer join_clause115_last = NULL;
    OracleDML::pivot_clause_return pivot_clause116;
    ImplTraits::TreeTypePtr::pointer pivot_clause116_last = NULL;
    OracleDML::unpivot_clause_return unpivot_clause117;
    ImplTraits::TreeTypePtr::pointer unpivot_clause117_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_join_clause(get_psrstate()->get_treeAdaptor(), "rule join_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_ref_aux(get_psrstate()->get_treeAdaptor(), "rule table_ref_aux");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:237:5: ( table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )? -> ^( TABLE_REF[ToraType(T_TABLE_REF)] table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? ) )
        // OracleDML.g:237:10: table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )?
        {
            this->followPush(FOLLOW_table_ref_aux_in_table_ref1918);
            table_ref_aux114=table_ref_aux();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_refEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_ref_aux114_last = table_ref_aux114.tree.get();
                stream_table_ref_aux.add(table_ref_aux114.tree);
            }

            // OracleDML.g:237:24: ( join_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt41=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    ANTLR_UINT32 LA41_2 = this->LA(2);
                		    if ( ((((toUpper(LT(1)->getText()) == "NATURAL"))||((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "CROSS"))||((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT"))||((toUpper(LT(1)->getText()) == "INNER")))))
                		    {
                		        alt41=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt41)
                {
            	case 1:
            	    // OracleDML.g:237:24: join_clause
            	    {
            	        this->followPush(FOLLOW_join_clause_in_table_ref1920);
            	        join_clause115=join_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            join_clause115_last = join_clause115.tree.get();
            	            stream_join_clause.add(join_clause115.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:237:37: ( pivot_clause | unpivot_clause )?
            {
                ANTLR_UINT32 alt42=3;
                switch ( this->LA(1) )
                {
                    case PLSQL_NON_RESERVED_PIVOT:
                    	{
                    		alt42=1;
                    	}
                        break;
                    case PLSQL_NON_RESERVED_UNPIVOT:
                    	{
                    		alt42=2;
                    	}
                        break;
                }

                switch (alt42)
                {
            	case 1:
            	    // OracleDML.g:237:38: pivot_clause
            	    {
            	        this->followPush(FOLLOW_pivot_clause_in_table_ref1924);
            	        pivot_clause116=pivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_clause116_last = pivot_clause116.tree.get();
            	            stream_pivot_clause.add(pivot_clause116.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:237:51: unpivot_clause
            	    {
            	        this->followPush(FOLLOW_unpivot_clause_in_table_ref1926);
            	        unpivot_clause117=unpivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            unpivot_clause117_last = unpivot_clause117.tree.get();
            	            stream_unpivot_clause.add(unpivot_clause117.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: pivot_clause, table_ref_aux, join_clause, unpivot_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 238:9: -> ^( TABLE_REF[ToraType(T_TABLE_REF)] table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? )
            {
            	// OracleDML.g:238:12: ^( TABLE_REF[ToraType(T_TABLE_REF)] table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF, ToraType(T_TABLE_REF)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_ref_aux.nextTree());
            	// OracleDML.g:238:61: ( join_clause )*
            	while ( stream_join_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_join_clause.nextTree());
            	}
            	stream_join_clause.reset();

            	// OracleDML.g:238:74: ( pivot_clause )?
            	if ( stream_pivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_clause.nextTree());
            	}
            	stream_pivot_clause.reset();

            	// OracleDML.g:238:88: ( unpivot_clause )?
            	if ( stream_unpivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_clause.nextTree());
            	}
            	stream_unpivot_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_refEx; /* Prevent compiler warnings */
    ruletable_refEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref */

/**
 * $ANTLR start table_ref_aux
 * OracleDML.g:253:1: table_ref_aux : ( ( LEFT_PAREN ( select_key | with_key ) )=> table_ref_aux_ver1 | ( LEFT_PAREN )=> table_ref_aux_ver2 | ( only_key LEFT_PAREN )=> table_ref_aux_ver3 | table_ref_aux_ver4 ) ;
 */
OracleDML::table_ref_aux_return
OracleDML::table_ref_aux()
{
    OracleDML::table_ref_aux_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::table_ref_aux_ver1_return table_ref_aux_ver1118;
    ImplTraits::TreeTypePtr::pointer table_ref_aux_ver1118_last = NULL;
    OracleDML::table_ref_aux_ver2_return table_ref_aux_ver2119;
    ImplTraits::TreeTypePtr::pointer table_ref_aux_ver2119_last = NULL;
    OracleDML::table_ref_aux_ver3_return table_ref_aux_ver3120;
    ImplTraits::TreeTypePtr::pointer table_ref_aux_ver3120_last = NULL;
    OracleDML::table_ref_aux_ver4_return table_ref_aux_ver4121;
    ImplTraits::TreeTypePtr::pointer table_ref_aux_ver4121_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:254:5: ( ( ( LEFT_PAREN ( select_key | with_key ) )=> table_ref_aux_ver1 | ( LEFT_PAREN )=> table_ref_aux_ver2 | ( only_key LEFT_PAREN )=> table_ref_aux_ver3 | table_ref_aux_ver4 ) )
        // OracleDML.g:255:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> table_ref_aux_ver1 | ( LEFT_PAREN )=> table_ref_aux_ver2 | ( only_key LEFT_PAREN )=> table_ref_aux_ver3 | table_ref_aux_ver4 )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:255:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> table_ref_aux_ver1 | ( LEFT_PAREN )=> table_ref_aux_ver2 | ( only_key LEFT_PAREN )=> table_ref_aux_ver3 | table_ref_aux_ver4 )
            {
                ANTLR_UINT32 alt43=4;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_TABLE:
                	{
                		{
                		    ANTLR_UINT32 LA43_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt43=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt43=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 43 );
                		        ex->set_state( 1 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case SQL92_RESERVED_THE:
                	{
                		{
                		    ANTLR_UINT32 LA43_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt43=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt43=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 43 );
                		        ex->set_state( 2 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA43_3 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt43=1;
                		    }
                		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_OracleDML>() )))
                		    {
                		        alt43=2;
                		    }
                		    else if ( (true))
                		    {
                		        alt43=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 43 );
                		        ex->set_state( 3 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case INTRODUCER:
                	{
                		{
                		    ANTLR_UINT32 LA43_4 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt43=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt43=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 43 );
                		        ex->set_state( 4 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA43_5 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt43=1;
                		    }
                		    else if ( (( (this->msynpred( antlr3::ClassForwarder<synpred6_OracleDML>() )) && ((toUpper(LT(1)->getText()) == "ONLY")) )))
                		    {
                		        alt43=3;
                		    }
                		    else if ( (true))
                		    {
                		        alt43=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 43 );
                		        ex->set_state( 5 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case DELIMITED_ID:
                	{
                		{
                		    ANTLR_UINT32 LA43_6 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt43=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt43=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 43 );
                		        ex->set_state( 6 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 43 );
                    ex->set_state( 0 );


                    goto ruletable_ref_auxEx;

                }

                switch (alt43)
                {
            	case 1:
            	    // OracleDML.g:255:10: ( LEFT_PAREN ( select_key | with_key ) )=> table_ref_aux_ver1
            	    {
            	        this->followPush(FOLLOW_table_ref_aux_ver1_in_table_ref_aux2004);
            	        table_ref_aux_ver1118=table_ref_aux_ver1();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref_aux_ver1118.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:256:10: ( LEFT_PAREN )=> table_ref_aux_ver2
            	    {
            	        this->followPush(FOLLOW_table_ref_aux_ver2_in_table_ref_aux2021);
            	        table_ref_aux_ver2119=table_ref_aux_ver2();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref_aux_ver2119.tree);


            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:257:10: ( only_key LEFT_PAREN )=> table_ref_aux_ver3
            	    {
            	        this->followPush(FOLLOW_table_ref_aux_ver3_in_table_ref_aux2040);
            	        table_ref_aux_ver3120=table_ref_aux_ver3();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref_aux_ver3120.tree);


            	    }
            	    break;
            	case 4:
            	    // OracleDML.g:258:10: table_ref_aux_ver4
            	    {
            	        this->followPush(FOLLOW_table_ref_aux_ver4_in_table_ref_aux2051);
            	        table_ref_aux_ver4121=table_ref_aux_ver4();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref_aux_ver4121.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_auxEx; /* Prevent compiler warnings */
    ruletable_ref_auxEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_aux */

/**
 * $ANTLR start table_ref_aux_ver1
 * OracleDML.g:262:1: table_ref_aux_ver1 : ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) ;
 */
OracleDML::table_ref_aux_ver1_return
OracleDML::table_ref_aux_ver1()
{
    OracleDML::table_ref_aux_ver1_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::dml_table_expression_clause_return dml_table_expression_clause122;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause122_last = NULL;
    OracleDML::pivot_clause_return pivot_clause123;
    ImplTraits::TreeTypePtr::pointer pivot_clause123_last = NULL;
    OracleDML::unpivot_clause_return unpivot_clause124;
    ImplTraits::TreeTypePtr::pointer unpivot_clause124_last = NULL;
    OracleDML::flashback_query_clause_return flashback_query_clause125;
    ImplTraits::TreeTypePtr::pointer flashback_query_clause125_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias126;
    ImplTraits::TreeTypePtr::pointer table_alias126_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_dml_table_expression_clause(get_psrstate()->get_treeAdaptor(), "rule dml_table_expression_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_flashback_query_clause(get_psrstate()->get_treeAdaptor(), "rule flashback_query_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:263:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) )
        // OracleDML.g:264:9: ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )?
        {
            this->followPush(FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver12094);
            dml_table_expression_clause122=dml_table_expression_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver1Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                dml_table_expression_clause122_last = dml_table_expression_clause122.tree.get();
                stream_dml_table_expression_clause.add(dml_table_expression_clause122.tree);
            }

            // OracleDML.g:265:9: ( pivot_clause | unpivot_clause )?
            {
                ANTLR_UINT32 alt44=3;
                switch ( this->LA(1) )
                {
                    case PLSQL_NON_RESERVED_PIVOT:
                    	{
                    		alt44=1;
                    	}
                        break;
                    case PLSQL_NON_RESERVED_UNPIVOT:
                    	{
                    		alt44=2;
                    	}
                        break;
                }

                switch (alt44)
                {
            	case 1:
            	    // OracleDML.g:265:10: pivot_clause
            	    {
            	        this->followPush(FOLLOW_pivot_clause_in_table_ref_aux_ver12105);
            	        pivot_clause123=pivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver1Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_clause123_last = pivot_clause123.tree.get();
            	            stream_pivot_clause.add(pivot_clause123.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:265:23: unpivot_clause
            	    {
            	        this->followPush(FOLLOW_unpivot_clause_in_table_ref_aux_ver12107);
            	        unpivot_clause124=unpivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver1Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            unpivot_clause124_last = unpivot_clause124.tree.get();
            	            stream_unpivot_clause.add(unpivot_clause124.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:265:40: ( flashback_query_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt45=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    ANTLR_UINT32 LA45_2 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "VERSIONS")))
                		    {
                		        alt45=1;
                		    }

                		}
                	}
                    break;
                case SQL92_RESERVED_AS:
                	{
                		alt45=1;
                	}
                    break;

                }

                switch (alt45)
                {
            	case 1:
            	    // OracleDML.g:265:40: flashback_query_clause
            	    {
            	        this->followPush(FOLLOW_flashback_query_clause_in_table_ref_aux_ver12111);
            	        flashback_query_clause125=flashback_query_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver1Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            flashback_query_clause125_last = flashback_query_clause125.tree.get();
            	            stream_flashback_query_clause.add(flashback_query_clause125.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop45;	/* break out of the loop */
            	    break;
                }
            }
            loop45: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:265:64: ({...}? table_alias )?
            {
                ANTLR_UINT32 alt46=2;
                switch ( this->LA(1) )
                {
                    case INTRODUCER:
                    	{
                    		{
                    		    ANTLR_UINT32 LA46_1 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt46=1;
                    		    }
                    		}
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA46_2 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt46=1;
                    		    }
                    		}
                    	}
                        break;
                    case DELIMITED_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA46_3 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt46=1;
                    		    }
                    		}
                    	}
                        break;
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		{
                    		    ANTLR_UINT32 LA46_4 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt46=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt46)
                {
            	case 1:
            	    // OracleDML.g:265:65: {...}? table_alias
            	    {
            	        if ( !((isTableAlias(LT(1), LT(2)))) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "isTableAlias(LT(1), LT(2))" );
            	                ex->set_ruleName( "table_ref_aux_ver1" );


            	        }

            	        this->followPush(FOLLOW_table_alias_in_table_ref_aux_ver12117);
            	        table_alias126=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver1Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias126_last = table_alias126.tree.get();
            	            stream_table_alias.add(table_alias126.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: unpivot_clause, flashback_query_clause, pivot_clause, dml_table_expression_clause, table_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 266:9: -> ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            {
            	// OracleDML.g:266:12: ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, "TABLE_REF_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_dml_table_expression_clause.nextTree());
            	// OracleDML.g:266:60: ( pivot_clause )?
            	if ( stream_pivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_clause.nextTree());
            	}
            	stream_pivot_clause.reset();

            	// OracleDML.g:266:74: ( unpivot_clause )?
            	if ( stream_unpivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_clause.nextTree());
            	}
            	stream_unpivot_clause.reset();

            	// OracleDML.g:266:90: ( flashback_query_clause )*
            	while ( stream_flashback_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_flashback_query_clause.nextTree());
            	}
            	stream_flashback_query_clause.reset();

            	// OracleDML.g:266:114: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_aux_ver1Ex; /* Prevent compiler warnings */
    ruletable_ref_aux_ver1Ex: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_aux_ver1 */

/**
 * $ANTLR start table_ref_aux_ver2
 * OracleDML.g:269:1: table_ref_aux_ver2 : ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT ^( TABLE_REF_ELEMENT[$LEFT_PAREN] table_ref ( subquery_operation_part )* RIGHT_PAREN ) ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) ;
 */
OracleDML::table_ref_aux_ver2_return
OracleDML::table_ref_aux_ver2()
{
    OracleDML::table_ref_aux_ver2_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN127 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN130 = NULL;
    OracleDML::table_ref_return table_ref128;
    ImplTraits::TreeTypePtr::pointer table_ref128_last = NULL;
    OracleDML::subquery_operation_part_return subquery_operation_part129;
    ImplTraits::TreeTypePtr::pointer subquery_operation_part129_last = NULL;
    OracleDML::pivot_clause_return pivot_clause131;
    ImplTraits::TreeTypePtr::pointer pivot_clause131_last = NULL;
    OracleDML::unpivot_clause_return unpivot_clause132;
    ImplTraits::TreeTypePtr::pointer unpivot_clause132_last = NULL;
    OracleDML::flashback_query_clause_return flashback_query_clause133;
    ImplTraits::TreeTypePtr::pointer flashback_query_clause133_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias134;
    ImplTraits::TreeTypePtr::pointer table_alias134_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN127_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN130_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_operation_part(get_psrstate()->get_treeAdaptor(), "rule subquery_operation_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_ref(get_psrstate()->get_treeAdaptor(), "rule table_ref");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_flashback_query_clause(get_psrstate()->get_treeAdaptor(), "rule flashback_query_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:270:5: ( ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT ^( TABLE_REF_ELEMENT[$LEFT_PAREN] table_ref ( subquery_operation_part )* RIGHT_PAREN ) ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) )
        // OracleDML.g:271:9: ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )?
        {
            LEFT_PAREN127 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_table_ref_aux_ver22178);
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver2Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN127);


            this->followPush(FOLLOW_table_ref_in_table_ref_aux_ver22180);
            table_ref128=table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver2Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_ref128_last = table_ref128.tree.get();
                stream_table_ref.add(table_ref128.tree);
            }

            // OracleDML.g:271:46: ( subquery_operation_part )*

            for (;;)
            {
                ANTLR_UINT32 alt47=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_MINUS:
                case SQL92_RESERVED_INTERSECT:
                case SQL92_RESERVED_UNION:
                	{
                		alt47=1;
                	}
                    break;

                }

                switch (alt47)
                {
            	case 1:
            	    // OracleDML.g:271:46: subquery_operation_part
            	    {
            	        this->followPush(FOLLOW_subquery_operation_part_in_table_ref_aux_ver22182);
            	        subquery_operation_part129=subquery_operation_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver2Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery_operation_part129_last = subquery_operation_part129.tree.get();
            	            stream_subquery_operation_part.add(subquery_operation_part129.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop47;	/* break out of the loop */
            	    break;
                }
            }
            loop47: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN130 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver22185);
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver2Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN130);


            // OracleDML.g:272:9: ( pivot_clause | unpivot_clause )?
            {
                ANTLR_UINT32 alt48=3;
                switch ( this->LA(1) )
                {
                    case PLSQL_NON_RESERVED_PIVOT:
                    	{
                    		alt48=1;
                    	}
                        break;
                    case PLSQL_NON_RESERVED_UNPIVOT:
                    	{
                    		alt48=2;
                    	}
                        break;
                }

                switch (alt48)
                {
            	case 1:
            	    // OracleDML.g:272:10: pivot_clause
            	    {
            	        this->followPush(FOLLOW_pivot_clause_in_table_ref_aux_ver22196);
            	        pivot_clause131=pivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver2Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_clause131_last = pivot_clause131.tree.get();
            	            stream_pivot_clause.add(pivot_clause131.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:272:23: unpivot_clause
            	    {
            	        this->followPush(FOLLOW_unpivot_clause_in_table_ref_aux_ver22198);
            	        unpivot_clause132=unpivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver2Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            unpivot_clause132_last = unpivot_clause132.tree.get();
            	            stream_unpivot_clause.add(unpivot_clause132.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:272:40: ( flashback_query_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt49=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    ANTLR_UINT32 LA49_2 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "VERSIONS")))
                		    {
                		        alt49=1;
                		    }

                		}
                	}
                    break;
                case SQL92_RESERVED_AS:
                	{
                		alt49=1;
                	}
                    break;

                }

                switch (alt49)
                {
            	case 1:
            	    // OracleDML.g:272:40: flashback_query_clause
            	    {
            	        this->followPush(FOLLOW_flashback_query_clause_in_table_ref_aux_ver22202);
            	        flashback_query_clause133=flashback_query_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver2Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            flashback_query_clause133_last = flashback_query_clause133.tree.get();
            	            stream_flashback_query_clause.add(flashback_query_clause133.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop49;	/* break out of the loop */
            	    break;
                }
            }
            loop49: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:272:64: ({...}? table_alias )?
            {
                ANTLR_UINT32 alt50=2;
                switch ( this->LA(1) )
                {
                    case INTRODUCER:
                    	{
                    		{
                    		    ANTLR_UINT32 LA50_1 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt50=1;
                    		    }
                    		}
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA50_2 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt50=1;
                    		    }
                    		}
                    	}
                        break;
                    case DELIMITED_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA50_3 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt50=1;
                    		    }
                    		}
                    	}
                        break;
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		{
                    		    ANTLR_UINT32 LA50_4 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt50=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt50)
                {
            	case 1:
            	    // OracleDML.g:272:65: {...}? table_alias
            	    {
            	        if ( !((isTableAlias(LT(1), LT(2)))) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "isTableAlias(LT(1), LT(2))" );
            	                ex->set_ruleName( "table_ref_aux_ver2" );


            	        }

            	        this->followPush(FOLLOW_table_alias_in_table_ref_aux_ver22208);
            	        table_alias134=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver2Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias134_last = table_alias134.tree.get();
            	            stream_table_alias.add(table_alias134.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: flashback_query_clause, unpivot_clause, table_ref, pivot_clause, subquery_operation_part, table_alias, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 273:9: -> ^( TABLE_REF_ELEMENT ^( TABLE_REF_ELEMENT[$LEFT_PAREN] table_ref ( subquery_operation_part )* RIGHT_PAREN ) ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            {
            	// OracleDML.g:273:12: ^( TABLE_REF_ELEMENT ^( TABLE_REF_ELEMENT[$LEFT_PAREN] table_ref ( subquery_operation_part )* RIGHT_PAREN ) ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, "TABLE_REF_ELEMENT"), root_1);
            	// OracleDML.g:273:32: ^( TABLE_REF_ELEMENT[$LEFT_PAREN] table_ref ( subquery_operation_part )* RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, LEFT_PAREN127), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_table_ref.nextTree());
            	// OracleDML.g:273:75: ( subquery_operation_part )*
            	while ( stream_subquery_operation_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_subquery_operation_part.nextTree());
            	}
            	stream_subquery_operation_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:273:113: ( pivot_clause )?
            	if ( stream_pivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_clause.nextTree());
            	}
            	stream_pivot_clause.reset();

            	// OracleDML.g:273:127: ( unpivot_clause )?
            	if ( stream_unpivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_clause.nextTree());
            	}
            	stream_unpivot_clause.reset();

            	// OracleDML.g:273:143: ( flashback_query_clause )*
            	while ( stream_flashback_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_flashback_query_clause.nextTree());
            	}
            	stream_flashback_query_clause.reset();

            	// OracleDML.g:273:167: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_aux_ver2Ex; /* Prevent compiler warnings */
    ruletable_ref_aux_ver2Ex: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_aux_ver2 */

/**
 * $ANTLR start table_ref_aux_ver3
 * OracleDML.g:276:1: table_ref_aux_ver3 : ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT[$only_key.start] ^( TABLE_REF_ELEMENT[$LEFT_PAREN] dml_table_expression_clause RIGHT_PAREN ) ( flashback_query_clause )* ( table_alias )? ) ;
 */
OracleDML::table_ref_aux_ver3_return
OracleDML::table_ref_aux_ver3()
{
    OracleDML::table_ref_aux_ver3_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN136 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN138 = NULL;
    OracleDML_OracleDMLKeys::only_key_return only_key135;
    ImplTraits::TreeTypePtr::pointer only_key135_last = NULL;
    OracleDML::dml_table_expression_clause_return dml_table_expression_clause137;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause137_last = NULL;
    OracleDML::flashback_query_clause_return flashback_query_clause139;
    ImplTraits::TreeTypePtr::pointer flashback_query_clause139_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias140;
    ImplTraits::TreeTypePtr::pointer table_alias140_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN136_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN138_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_dml_table_expression_clause(get_psrstate()->get_treeAdaptor(), "rule dml_table_expression_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_only_key(get_psrstate()->get_treeAdaptor(), "rule only_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_flashback_query_clause(get_psrstate()->get_treeAdaptor(), "rule flashback_query_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:277:5: ( ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT[$only_key.start] ^( TABLE_REF_ELEMENT[$LEFT_PAREN] dml_table_expression_clause RIGHT_PAREN ) ( flashback_query_clause )* ( table_alias )? ) )
        // OracleDML.g:278:9: ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ( flashback_query_clause )* ({...}? table_alias )?
        {
            this->followPush(FOLLOW_only_key_in_table_ref_aux_ver32281);
            only_key135=only_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver3Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                only_key135_last = only_key135.tree.get();
                stream_only_key.add(only_key135.tree);
            }

            LEFT_PAREN136 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_table_ref_aux_ver32283);
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver3Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN136);


            this->followPush(FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver32285);
            dml_table_expression_clause137=dml_table_expression_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver3Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                dml_table_expression_clause137_last = dml_table_expression_clause137.tree.get();
                stream_dml_table_expression_clause.add(dml_table_expression_clause137.tree);
            }

            RIGHT_PAREN138 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver32287);
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver3Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN138);


            // OracleDML.g:279:9: ( flashback_query_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt51=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    ANTLR_UINT32 LA51_2 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "VERSIONS")))
                		    {
                		        alt51=1;
                		    }

                		}
                	}
                    break;
                case SQL92_RESERVED_AS:
                	{
                		alt51=1;
                	}
                    break;

                }

                switch (alt51)
                {
            	case 1:
            	    // OracleDML.g:279:9: flashback_query_clause
            	    {
            	        this->followPush(FOLLOW_flashback_query_clause_in_table_ref_aux_ver32297);
            	        flashback_query_clause139=flashback_query_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver3Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            flashback_query_clause139_last = flashback_query_clause139.tree.get();
            	            stream_flashback_query_clause.add(flashback_query_clause139.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop51;	/* break out of the loop */
            	    break;
                }
            }
            loop51: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:279:33: ({...}? table_alias )?
            {
                ANTLR_UINT32 alt52=2;
                switch ( this->LA(1) )
                {
                    case INTRODUCER:
                    	{
                    		{
                    		    ANTLR_UINT32 LA52_1 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt52=1;
                    		    }
                    		}
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA52_2 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt52=1;
                    		    }
                    		}
                    	}
                        break;
                    case DELIMITED_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA52_3 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt52=1;
                    		    }
                    		}
                    	}
                        break;
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		{
                    		    ANTLR_UINT32 LA52_4 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt52=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt52)
                {
            	case 1:
            	    // OracleDML.g:279:34: {...}? table_alias
            	    {
            	        if ( !((isTableAlias(LT(1), LT(2)))) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "isTableAlias(LT(1), LT(2))" );
            	                ex->set_ruleName( "table_ref_aux_ver3" );


            	        }

            	        this->followPush(FOLLOW_table_alias_in_table_ref_aux_ver32303);
            	        table_alias140=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver3Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias140_last = table_alias140.tree.get();
            	            stream_table_alias.add(table_alias140.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: dml_table_expression_clause, table_alias, flashback_query_clause, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 280:9: -> ^( TABLE_REF_ELEMENT[$only_key.start] ^( TABLE_REF_ELEMENT[$LEFT_PAREN] dml_table_expression_clause RIGHT_PAREN ) ( flashback_query_clause )* ( table_alias )? )
            {
            	// OracleDML.g:280:12: ^( TABLE_REF_ELEMENT[$only_key.start] ^( TABLE_REF_ELEMENT[$LEFT_PAREN] dml_table_expression_clause RIGHT_PAREN ) ( flashback_query_clause )* ( table_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, (only_key135.start)), root_1);
            	// OracleDML.g:280:49: ^( TABLE_REF_ELEMENT[$LEFT_PAREN] dml_table_expression_clause RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, LEFT_PAREN136), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_dml_table_expression_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:280:123: ( flashback_query_clause )*
            	while ( stream_flashback_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_flashback_query_clause.nextTree());
            	}
            	stream_flashback_query_clause.reset();

            	// OracleDML.g:280:147: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_aux_ver3Ex; /* Prevent compiler warnings */
    ruletable_ref_aux_ver3Ex: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_aux_ver3 */

/**
 * $ANTLR start table_ref_aux_ver4
 * OracleDML.g:283:1: table_ref_aux_ver4 : dml_table_expression_clause ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) ;
 */
OracleDML::table_ref_aux_ver4_return
OracleDML::table_ref_aux_ver4()
{
    OracleDML::table_ref_aux_ver4_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::dml_table_expression_clause_return dml_table_expression_clause141;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause141_last = NULL;
    OracleDML::pivot_clause_return pivot_clause142;
    ImplTraits::TreeTypePtr::pointer pivot_clause142_last = NULL;
    OracleDML::unpivot_clause_return unpivot_clause143;
    ImplTraits::TreeTypePtr::pointer unpivot_clause143_last = NULL;
    OracleDML::flashback_query_clause_return flashback_query_clause144;
    ImplTraits::TreeTypePtr::pointer flashback_query_clause144_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias145;
    ImplTraits::TreeTypePtr::pointer table_alias145_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_dml_table_expression_clause(get_psrstate()->get_treeAdaptor(), "rule dml_table_expression_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_flashback_query_clause(get_psrstate()->get_treeAdaptor(), "rule flashback_query_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:284:5: ( dml_table_expression_clause ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) )
        // OracleDML.g:285:9: dml_table_expression_clause ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )?
        {
            this->followPush(FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver42360);
            dml_table_expression_clause141=dml_table_expression_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver4Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                dml_table_expression_clause141_last = dml_table_expression_clause141.tree.get();
                stream_dml_table_expression_clause.add(dml_table_expression_clause141.tree);
            }

            // OracleDML.g:285:37: ( pivot_clause | unpivot_clause )?
            {
                ANTLR_UINT32 alt53=3;
                switch ( this->LA(1) )
                {
                    case PLSQL_NON_RESERVED_PIVOT:
                    	{
                    		alt53=1;
                    	}
                        break;
                    case PLSQL_NON_RESERVED_UNPIVOT:
                    	{
                    		alt53=2;
                    	}
                        break;
                }

                switch (alt53)
                {
            	case 1:
            	    // OracleDML.g:285:38: pivot_clause
            	    {
            	        this->followPush(FOLLOW_pivot_clause_in_table_ref_aux_ver42363);
            	        pivot_clause142=pivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver4Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_clause142_last = pivot_clause142.tree.get();
            	            stream_pivot_clause.add(pivot_clause142.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:285:51: unpivot_clause
            	    {
            	        this->followPush(FOLLOW_unpivot_clause_in_table_ref_aux_ver42365);
            	        unpivot_clause143=unpivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver4Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            unpivot_clause143_last = unpivot_clause143.tree.get();
            	            stream_unpivot_clause.add(unpivot_clause143.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:286:9: ( flashback_query_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt54=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    ANTLR_UINT32 LA54_2 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "VERSIONS")))
                		    {
                		        alt54=1;
                		    }

                		}
                	}
                    break;
                case SQL92_RESERVED_AS:
                	{
                		alt54=1;
                	}
                    break;

                }

                switch (alt54)
                {
            	case 1:
            	    // OracleDML.g:286:9: flashback_query_clause
            	    {
            	        this->followPush(FOLLOW_flashback_query_clause_in_table_ref_aux_ver42377);
            	        flashback_query_clause144=flashback_query_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver4Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            flashback_query_clause144_last = flashback_query_clause144.tree.get();
            	            stream_flashback_query_clause.add(flashback_query_clause144.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop54;	/* break out of the loop */
            	    break;
                }
            }
            loop54: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:286:33: ({...}? table_alias )?
            {
                ANTLR_UINT32 alt55=2;
                switch ( this->LA(1) )
                {
                    case INTRODUCER:
                    	{
                    		{
                    		    ANTLR_UINT32 LA55_1 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt55=1;
                    		    }
                    		}
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA55_2 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt55=1;
                    		    }
                    		}
                    	}
                        break;
                    case DELIMITED_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA55_3 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt55=1;
                    		    }
                    		}
                    	}
                        break;
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		{
                    		    ANTLR_UINT32 LA55_4 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt55=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt55)
                {
            	case 1:
            	    // OracleDML.g:286:34: {...}? table_alias
            	    {
            	        if ( !((isTableAlias(LT(1), LT(2)))) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "isTableAlias(LT(1), LT(2))" );
            	                ex->set_ruleName( "table_ref_aux_ver4" );


            	        }

            	        this->followPush(FOLLOW_table_alias_in_table_ref_aux_ver42383);
            	        table_alias145=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver4Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias145_last = table_alias145.tree.get();
            	            stream_table_alias.add(table_alias145.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: dml_table_expression_clause, unpivot_clause, table_alias, pivot_clause, flashback_query_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 287:9: -> ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            {
            	// OracleDML.g:287:12: ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, "TABLE_REF_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_dml_table_expression_clause.nextTree());
            	// OracleDML.g:287:60: ( pivot_clause )?
            	if ( stream_pivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_clause.nextTree());
            	}
            	stream_pivot_clause.reset();

            	// OracleDML.g:287:74: ( unpivot_clause )?
            	if ( stream_unpivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_clause.nextTree());
            	}
            	stream_unpivot_clause.reset();

            	// OracleDML.g:287:90: ( flashback_query_clause )*
            	while ( stream_flashback_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_flashback_query_clause.nextTree());
            	}
            	stream_flashback_query_clause.reset();

            	// OracleDML.g:287:114: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_aux_ver4Ex; /* Prevent compiler warnings */
    ruletable_ref_aux_ver4Ex: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_aux_ver4 */

/**
 * $ANTLR start join_clause
 * OracleDML.g:290:1: join_clause : (qpc1= query_partition_clause )? ( cross_key | natural_key )? ( inner_key | outer_join_type )? join_key table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )* -> ^( JOIN_DEF[$join_key.start] ( $qpc1)? table_ref_aux ( $qpc2)? ( join_on_part )* ( join_using_part )* ) ;
 */
OracleDML::join_clause_return
OracleDML::join_clause()
{
    OracleDML::join_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::query_partition_clause_return qpc1;
    ImplTraits::TreeTypePtr::pointer qpc1_last = NULL;
    OracleDML::query_partition_clause_return qpc2;
    ImplTraits::TreeTypePtr::pointer qpc2_last = NULL;
    OracleDML_OracleDMLKeys::cross_key_return cross_key146;
    ImplTraits::TreeTypePtr::pointer cross_key146_last = NULL;
    OracleDML_OracleDMLKeys::natural_key_return natural_key147;
    ImplTraits::TreeTypePtr::pointer natural_key147_last = NULL;
    OracleDML_OracleDMLKeys::inner_key_return inner_key148;
    ImplTraits::TreeTypePtr::pointer inner_key148_last = NULL;
    OracleDML::outer_join_type_return outer_join_type149;
    ImplTraits::TreeTypePtr::pointer outer_join_type149_last = NULL;
    OracleDML_OracleDMLKeys::join_key_return join_key150;
    ImplTraits::TreeTypePtr::pointer join_key150_last = NULL;
    OracleDML::table_ref_aux_return table_ref_aux151;
    ImplTraits::TreeTypePtr::pointer table_ref_aux151_last = NULL;
    OracleDML::join_on_part_return join_on_part152;
    ImplTraits::TreeTypePtr::pointer join_on_part152_last = NULL;
    OracleDML::join_using_part_return join_using_part153;
    ImplTraits::TreeTypePtr::pointer join_using_part153_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_inner_key(get_psrstate()->get_treeAdaptor(), "rule inner_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_join_using_part(get_psrstate()->get_treeAdaptor(), "rule join_using_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_join_on_part(get_psrstate()->get_treeAdaptor(), "rule join_on_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_join_key(get_psrstate()->get_treeAdaptor(), "rule join_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_outer_join_type(get_psrstate()->get_treeAdaptor(), "rule outer_join_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_query_partition_clause(get_psrstate()->get_treeAdaptor(), "rule query_partition_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_cross_key(get_psrstate()->get_treeAdaptor(), "rule cross_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_natural_key(get_psrstate()->get_treeAdaptor(), "rule natural_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_ref_aux(get_psrstate()->get_treeAdaptor(), "rule table_ref_aux");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:291:5: ( (qpc1= query_partition_clause )? ( cross_key | natural_key )? ( inner_key | outer_join_type )? join_key table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )* -> ^( JOIN_DEF[$join_key.start] ( $qpc1)? table_ref_aux ( $qpc2)? ( join_on_part )* ( join_using_part )* ) )
        // OracleDML.g:291:9: (qpc1= query_partition_clause )? ( cross_key | natural_key )? ( inner_key | outer_join_type )? join_key table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )*
        {
            // OracleDML.g:291:13: (qpc1= query_partition_clause )?
            {
                ANTLR_UINT32 alt56=2;
                {
                    ANTLR_UINT32 LA56_0 = this->LA(1);
                    if ( (LA56_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "NATURAL"))||((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "CROSS"))||((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT"))||((toUpper(LT(1)->getText()) == "INNER")))))
                    {
                        {
                            ANTLR_UINT32 LA56_1 = this->LA(2);
                            if ( (LA56_1 == SQL92_RESERVED_BY) && ((toUpper(LT(1)->getText()) == "PARTITION")))
                            {
                                alt56=1;
                            }
                        }
                    }
                }
                switch (alt56)
                {
            	case 1:
            	    // OracleDML.g:291:13: qpc1= query_partition_clause
            	    {
            	        this->followPush(FOLLOW_query_partition_clause_in_join_clause2434);
            	        qpc1=query_partition_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            qpc1_last = qpc1.tree.get();
            	            stream_query_partition_clause.add(qpc1.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:292:9: ( cross_key | natural_key )?
            {
                ANTLR_UINT32 alt57=3;
                {
                    ANTLR_UINT32 LA57_0 = this->LA(1);
                    if ( (LA57_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "NATURAL"))||((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "CROSS"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT"))||((toUpper(LT(1)->getText()) == "INNER")))))
                    {
                        {
                            ANTLR_UINT32 LA57_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "CROSS")))
                            {
                                alt57=1;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "NATURAL")))
                            {
                                alt57=2;
                            }
                        }
                    }
                }
                switch (alt57)
                {
            	case 1:
            	    // OracleDML.g:292:10: cross_key
            	    {
            	        this->followPush(FOLLOW_cross_key_in_join_clause2446);
            	        cross_key146=cross_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            cross_key146_last = cross_key146.tree.get();
            	            stream_cross_key.add(cross_key146.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:292:20: natural_key
            	    {
            	        this->followPush(FOLLOW_natural_key_in_join_clause2448);
            	        natural_key147=natural_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            natural_key147_last = natural_key147.tree.get();
            	            stream_natural_key.add(natural_key147.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:292:34: ( inner_key | outer_join_type )?
            {
                ANTLR_UINT32 alt58=3;
                {
                    ANTLR_UINT32 LA58_0 = this->LA(1);
                    if ( (LA58_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT"))||((toUpper(LT(1)->getText()) == "INNER")))))
                    {
                        {
                            ANTLR_UINT32 LA58_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "INNER")))
                            {
                                alt58=1;
                            }
                            else if ( ((((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT")))))
                            {
                                alt58=2;
                            }
                        }
                    }
                }
                switch (alt58)
                {
            	case 1:
            	    // OracleDML.g:292:35: inner_key
            	    {
            	        this->followPush(FOLLOW_inner_key_in_join_clause2453);
            	        inner_key148=inner_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            inner_key148_last = inner_key148.tree.get();
            	            stream_inner_key.add(inner_key148.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:292:45: outer_join_type
            	    {
            	        this->followPush(FOLLOW_outer_join_type_in_join_clause2455);
            	        outer_join_type149=outer_join_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            outer_join_type149_last = outer_join_type149.tree.get();
            	            stream_outer_join_type.add(outer_join_type149.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_join_key_in_join_clause2459);
            join_key150=join_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                join_key150_last = join_key150.tree.get();
                stream_join_key.add(join_key150.tree);
            }

            this->followPush(FOLLOW_table_ref_aux_in_join_clause2469);
            table_ref_aux151=table_ref_aux();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_ref_aux151_last = table_ref_aux151.tree.get();
                stream_table_ref_aux.add(table_ref_aux151.tree);
            }

            // OracleDML.g:294:13: (qpc2= query_partition_clause )?
            {
                ANTLR_UINT32 alt59=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA59_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "PARTITION")))
                    		    {
                    		        alt59=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt59)
                {
            	case 1:
            	    // OracleDML.g:294:13: qpc2= query_partition_clause
            	    {
            	        this->followPush(FOLLOW_query_partition_clause_in_join_clause2481);
            	        qpc2=query_partition_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            qpc2_last = qpc2.tree.get();
            	            stream_query_partition_clause.add(qpc2.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:295:5: ( join_on_part | join_using_part )*

            for (;;)
            {
                ANTLR_UINT32 alt60=3;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_ON:
                	{
                		alt60=1;
                	}
                    break;
                case PLSQL_NON_RESERVED_USING:
                	{
                		alt60=2;
                	}
                    break;

                }

                switch (alt60)
                {
            	case 1:
            	    // OracleDML.g:295:10: join_on_part
            	    {
            	        this->followPush(FOLLOW_join_on_part_in_join_clause2493);
            	        join_on_part152=join_on_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            join_on_part152_last = join_on_part152.tree.get();
            	            stream_join_on_part.add(join_on_part152.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:296:10: join_using_part
            	    {
            	        this->followPush(FOLLOW_join_using_part_in_join_clause2504);
            	        join_using_part153=join_using_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            join_using_part153_last = join_using_part153.tree.get();
            	            stream_join_using_part.add(join_using_part153.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop60;	/* break out of the loop */
            	    break;
                }
            }
            loop60: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: qpc1, table_ref_aux, join_on_part, qpc2, join_using_part
            // token labels: 
            // rule labels: retval, qpc1, qpc2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
            RewriteRuleSubtreeStream<ImplTraits> stream_qpc1(get_psrstate()->get_treeAdaptor(), "rule qpc1",qpc1_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_qpc2(get_psrstate()->get_treeAdaptor(), "rule qpc2",qpc2_last); // rewrite alias

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 298:9: -> ^( JOIN_DEF[$join_key.start] ( $qpc1)? table_ref_aux ( $qpc2)? ( join_on_part )* ( join_using_part )* )
            {
            	// OracleDML.g:298:12: ^( JOIN_DEF[$join_key.start] ( $qpc1)? table_ref_aux ( $qpc2)? ( join_on_part )* ( join_using_part )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(JOIN_DEF, (join_key150.start)), root_1);
            	// OracleDML.g:298:41: ( $qpc1)?
            	if ( stream_qpc1.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_qpc1.nextTree());
            	}
            	stream_qpc1.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_ref_aux.nextTree());
            	// OracleDML.g:300:28: ( $qpc2)?
            	if ( stream_qpc2.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_qpc2.nextTree());
            	}
            	stream_qpc2.reset();

            	// OracleDML.g:300:34: ( join_on_part )*
            	while ( stream_join_on_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_join_on_part.nextTree());
            	}
            	stream_join_on_part.reset();

            	// OracleDML.g:300:48: ( join_using_part )*
            	while ( stream_join_using_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_join_using_part.nextTree());
            	}
            	stream_join_using_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulejoin_clauseEx; /* Prevent compiler warnings */
    rulejoin_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end join_clause */

/**
 * $ANTLR start join_on_part
 * OracleDML.g:303:1: join_on_part : on_key condition -> ^( on_key ^( LOGIC_EXPR condition ) ) ;
 */
OracleDML::join_on_part_return
OracleDML::join_on_part()
{
    OracleDML::join_on_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::on_key_return on_key154;
    ImplTraits::TreeTypePtr::pointer on_key154_last = NULL;
    OracleDML::condition_return condition155;
    ImplTraits::TreeTypePtr::pointer condition155_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");
    RewriteRuleSubtreeStream<ImplTraits> stream_on_key(get_psrstate()->get_treeAdaptor(), "rule on_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:304:5: ( on_key condition -> ^( on_key ^( LOGIC_EXPR condition ) ) )
        // OracleDML.g:304:10: on_key condition
        {
            this->followPush(FOLLOW_on_key_in_join_on_part2587);
            on_key154=on_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_on_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                on_key154_last = on_key154.tree.get();
                stream_on_key.add(on_key154.tree);
            }

            this->followPush(FOLLOW_condition_in_join_on_part2589);
            condition155=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_on_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition155_last = condition155.tree.get();
                stream_condition.add(condition155.tree);
            }

            // AST REWRITE
            // elements: condition, on_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 305:9: -> ^( on_key ^( LOGIC_EXPR condition ) )
            {
            	// OracleDML.g:305:12: ^( on_key ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_on_key.nextNode(), root_1);
            	// OracleDML.g:305:21: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulejoin_on_partEx; /* Prevent compiler warnings */
    rulejoin_on_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end join_on_part */

/**
 * $ANTLR start join_using_part
 * OracleDML.g:308:1: join_using_part : using_key ^ LEFT_PAREN column_name ( COMMA ! column_name )* RIGHT_PAREN ;
 */
OracleDML::join_using_part_return
OracleDML::join_using_part()
{
    OracleDML::join_using_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN157 = NULL;
    ImplTraits::CommonTokenType const* COMMA159 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN161 = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key156;
    ImplTraits::TreeTypePtr::pointer using_key156_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name158;
    ImplTraits::TreeTypePtr::pointer column_name158_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name160;
    ImplTraits::TreeTypePtr::pointer column_name160_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN157_tree;
    ImplTraits::TreeTypePtr COMMA159_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN161_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:309:5: ( using_key ^ LEFT_PAREN column_name ( COMMA ! column_name )* RIGHT_PAREN )
        // OracleDML.g:309:10: using_key ^ LEFT_PAREN column_name ( COMMA ! column_name )* RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_using_key_in_join_using_part2630);
            using_key156=using_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_using_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(using_key156.tree, root_0);

            LEFT_PAREN157 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_join_using_part2633);
            if  (this->hasException())
            {
                goto rulejoin_using_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN157_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN157));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN157_tree);
            }


            this->followPush(FOLLOW_column_name_in_join_using_part2635);
            column_name158=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_using_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name158.tree);


            // OracleDML.g:309:44: ( COMMA ! column_name )*

            for (;;)
            {
                ANTLR_UINT32 alt61=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt61=1;
                	}
                    break;

                }

                switch (alt61)
                {
            	case 1:
            	    // OracleDML.g:309:45: COMMA ! column_name
            	    {
            	        COMMA159 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_join_using_part2638);
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_using_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_column_name_in_join_using_part2641);
            	        column_name160=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_using_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name160.tree);


            	    }
            	    break;

            	default:
            	    goto loop61;	/* break out of the loop */
            	    break;
                }
            }
            loop61: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN161 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_join_using_part2645);
            if  (this->hasException())
            {
                goto rulejoin_using_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN161_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN161));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN161_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulejoin_using_partEx; /* Prevent compiler warnings */
    rulejoin_using_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end join_using_part */

/**
 * $ANTLR start outer_join_type
 * OracleDML.g:312:1: outer_join_type : ( full_key | left_key | right_key ) ( outer_key !)? ;
 */
OracleDML::outer_join_type_return
OracleDML::outer_join_type()
{
    OracleDML::outer_join_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::full_key_return full_key162;
    ImplTraits::TreeTypePtr::pointer full_key162_last = NULL;
    OracleDML_OracleDMLKeys::left_key_return left_key163;
    ImplTraits::TreeTypePtr::pointer left_key163_last = NULL;
    OracleDML_OracleDMLKeys::right_key_return right_key164;
    ImplTraits::TreeTypePtr::pointer right_key164_last = NULL;
    OracleDML_OracleDMLKeys::outer_key_return outer_key165;
    ImplTraits::TreeTypePtr::pointer outer_key165_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:313:5: ( ( full_key | left_key | right_key ) ( outer_key !)? )
        // OracleDML.g:314:5: ( full_key | left_key | right_key ) ( outer_key !)?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:314:5: ( full_key | left_key | right_key )
            {
                ANTLR_UINT32 alt62=3;
                {
                    ANTLR_UINT32 LA62_0 = this->LA(1);
                    if ( (LA62_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT")))))
                    {
                        {
                            ANTLR_UINT32 LA62_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "FULL")))
                            {
                                alt62=1;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "LEFT")))
                            {
                                alt62=2;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "RIGHT")))
                            {
                                alt62=3;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 62 );
                                ex->set_state( 1 );


                                goto ruleouter_join_typeEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 62 );
                        ex->set_state( 0 );


                        goto ruleouter_join_typeEx;

                    }
                }
                switch (alt62)
                {
            	case 1:
            	    // OracleDML.g:314:10: full_key
            	    {
            	        this->followPush(FOLLOW_full_key_in_outer_join_type2675);
            	        full_key162=full_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleouter_join_typeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, full_key162.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:315:10: left_key
            	    {
            	        this->followPush(FOLLOW_left_key_in_outer_join_type2686);
            	        left_key163=left_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleouter_join_typeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, left_key163.tree);


            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:316:10: right_key
            	    {
            	        this->followPush(FOLLOW_right_key_in_outer_join_type2697);
            	        right_key164=right_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleouter_join_typeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, right_key164.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:318:18: ( outer_key !)?
            {
                ANTLR_UINT32 alt63=2;
                {
                    ANTLR_UINT32 LA63_0 = this->LA(1);
                    if ( (LA63_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "OUTER")))))
                    {
                        {
                            ANTLR_UINT32 LA63_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "OUTER")))
                            {
                                alt63=1;
                            }
                        }
                    }
                }
                switch (alt63)
                {
            	case 1:
            	    // OracleDML.g:318:18: outer_key !
            	    {
            	        this->followPush(FOLLOW_outer_key_in_outer_join_type2713);
            	        outer_key165=outer_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleouter_join_typeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleouter_join_typeEx; /* Prevent compiler warnings */
    ruleouter_join_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end outer_join_type */

/**
 * $ANTLR start query_partition_clause
 * OracleDML.g:321:1: query_partition_clause : partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* ) -> ^( partition_key ( LEFT_PAREN )? ( subquery )? ( expression_list )? ( EXPR expression )* ( RIGHT_PAREN )? ) ;
 */
OracleDML::query_partition_clause_return
OracleDML::query_partition_clause()
{
    OracleDML::query_partition_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN168 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN170 = NULL;
    ImplTraits::CommonTokenType const* COMMA173 = NULL;
    OracleDML_OracleDMLKeys::partition_key_return partition_key166;
    ImplTraits::TreeTypePtr::pointer partition_key166_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key167;
    ImplTraits::TreeTypePtr::pointer by_key167_last = NULL;
    OracleDML::subquery_return subquery169;
    ImplTraits::TreeTypePtr::pointer subquery169_last = NULL;
    OracleDML::expression_list_return expression_list171;
    ImplTraits::TreeTypePtr::pointer expression_list171_last = NULL;
    OracleDML::expression_return expression172;
    ImplTraits::TreeTypePtr::pointer expression172_last = NULL;
    OracleDML::expression_return expression174;
    ImplTraits::TreeTypePtr::pointer expression174_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN168_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN170_tree;
    ImplTraits::TreeTypePtr COMMA173_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_list(get_psrstate()->get_treeAdaptor(), "rule expression_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_partition_key(get_psrstate()->get_treeAdaptor(), "rule partition_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:322:5: ( partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* ) -> ^( partition_key ( LEFT_PAREN )? ( subquery )? ( expression_list )? ( EXPR expression )* ( RIGHT_PAREN )? ) )
        // OracleDML.g:322:10: partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* )
        {
            this->followPush(FOLLOW_partition_key_in_query_partition_clause2735);
            partition_key166=partition_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_partition_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                partition_key166_last = partition_key166.tree.get();
                stream_partition_key.add(partition_key166.tree);
            }

            this->followPush(FOLLOW_by_key_in_query_partition_clause2737);
            by_key167=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_partition_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                by_key167_last = by_key167.tree.get();
                stream_by_key.add(by_key167.tree);
            }

            // OracleDML.g:323:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* )
            {
                ANTLR_UINT32 alt65=3;
                switch ( this->LA(1) )
                {
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA65_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred10_OracleDML>() )))
                		    {
                		        alt65=1;
                		    }
                		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred11_OracleDML>() )))
                		    {
                		        alt65=2;
                		    }
                		    else if ( (true))
                		    {
                		        alt65=3;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 65 );
                		        ex->set_state( 1 );


                		        goto rulequery_partition_clauseEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case REGULAR_ID:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt65=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 65 );
                    ex->set_state( 0 );


                    goto rulequery_partition_clauseEx;

                }

                switch (alt65)
                {
            	case 1:
            	    // OracleDML.g:323:10: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
            	    {
            	        LEFT_PAREN168 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_query_partition_clause2760);
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN168);


            	        this->followPush(FOLLOW_subquery_in_query_partition_clause2762);
            	        subquery169=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery169_last = subquery169.tree.get();
            	            stream_subquery.add(subquery169.tree);
            	        }

            	        RIGHT_PAREN170 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_query_partition_clause2764);
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN170);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:324:10: ( LEFT_PAREN )=> expression_list
            	    {
            	        this->followPush(FOLLOW_expression_list_in_query_partition_clause2780);
            	        expression_list171=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_list171_last = expression_list171.tree.get();
            	            stream_expression_list.add(expression_list171.tree);
            	        }

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:325:10: expression ( COMMA expression )*
            	    {
            	        this->followPush(FOLLOW_expression_in_query_partition_clause2791);
            	        expression172=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression172_last = expression172.tree.get();
            	            stream_expression.add(expression172.tree);
            	        }

            	        // OracleDML.g:325:21: ( COMMA expression )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt64=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt64=1;
            	            	}
            	                break;

            	            }

            	            switch (alt64)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:325:22: COMMA expression
            	        	    {
            	        	        COMMA173 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_query_partition_clause2794);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_partition_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA173);


            	        	        this->followPush(FOLLOW_expression_in_query_partition_clause2796);
            	        	        expression174=expression();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_partition_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            expression174_last = expression174.tree.get();
            	        	            stream_expression.add(expression174.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop64;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop64: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: partition_key, expression_list, expression, RIGHT_PAREN, LEFT_PAREN, subquery
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 327:9: -> ^( partition_key ( LEFT_PAREN )? ( subquery )? ( expression_list )? ( EXPR expression )* ( RIGHT_PAREN )? )
            {
            	// OracleDML.g:327:12: ^( partition_key ( LEFT_PAREN )? ( subquery )? ( expression_list )? ( EXPR expression )* ( RIGHT_PAREN )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_partition_key.nextNode(), root_1);
            	// OracleDML.g:327:28: ( LEFT_PAREN )?
            	if ( stream_LEFT_PAREN.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
            	}
            	stream_LEFT_PAREN.reset();

            	// OracleDML.g:327:40: ( subquery )?
            	if ( stream_subquery.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	}
            	stream_subquery.reset();

            	// OracleDML.g:327:50: ( expression_list )?
            	if ( stream_expression_list.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_list.nextTree());
            	}
            	stream_expression_list.reset();

            	// OracleDML.g:327:67: ( EXPR expression )*
            	while ( stream_expression.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"));
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            	}
            	stream_expression.reset();

            	// OracleDML.g:327:86: ( RIGHT_PAREN )?
            	if ( stream_RIGHT_PAREN.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	}
            	stream_RIGHT_PAREN.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulequery_partition_clauseEx; /* Prevent compiler warnings */
    rulequery_partition_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end query_partition_clause */

/**
 * $ANTLR start flashback_query_clause
 * OracleDML.g:330:1: flashback_query_clause : ( versions_key between_key ( scn_key | timestamp_key ) expression -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) ) | as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) ) );
 */
OracleDML::flashback_query_clause_return
OracleDML::flashback_query_clause()
{
    OracleDML::flashback_query_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::versions_key_return versions_key175;
    ImplTraits::TreeTypePtr::pointer versions_key175_last = NULL;
    OracleDML_OracleDMLKeys::between_key_return between_key176;
    ImplTraits::TreeTypePtr::pointer between_key176_last = NULL;
    OracleDML_OracleDMLKeys::scn_key_return scn_key177;
    ImplTraits::TreeTypePtr::pointer scn_key177_last = NULL;
    OracleDML_OracleDMLKeys::timestamp_key_return timestamp_key178;
    ImplTraits::TreeTypePtr::pointer timestamp_key178_last = NULL;
    OracleDML::expression_return expression179;
    ImplTraits::TreeTypePtr::pointer expression179_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key180;
    ImplTraits::TreeTypePtr::pointer as_key180_last = NULL;
    OracleDML_OracleDMLKeys::of_key_return of_key181;
    ImplTraits::TreeTypePtr::pointer of_key181_last = NULL;
    OracleDML_OracleDMLKeys::scn_key_return scn_key182;
    ImplTraits::TreeTypePtr::pointer scn_key182_last = NULL;
    OracleDML_OracleDMLKeys::timestamp_key_return timestamp_key183;
    ImplTraits::TreeTypePtr::pointer timestamp_key183_last = NULL;
    OracleDML_OracleDMLKeys::snapshot_key_return snapshot_key184;
    ImplTraits::TreeTypePtr::pointer snapshot_key184_last = NULL;
    OracleDML::expression_return expression185;
    ImplTraits::TreeTypePtr::pointer expression185_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_snapshot_key(get_psrstate()->get_treeAdaptor(), "rule snapshot_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_scn_key(get_psrstate()->get_treeAdaptor(), "rule scn_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_versions_key(get_psrstate()->get_treeAdaptor(), "rule versions_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_between_key(get_psrstate()->get_treeAdaptor(), "rule between_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_as_key(get_psrstate()->get_treeAdaptor(), "rule as_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_timestamp_key(get_psrstate()->get_treeAdaptor(), "rule timestamp_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_of_key(get_psrstate()->get_treeAdaptor(), "rule of_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:331:5: ( versions_key between_key ( scn_key | timestamp_key ) expression -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) ) | as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) ) )

            ANTLR_UINT32 alt68;

            alt68=2;

            {
                ANTLR_UINT32 LA68_0 = this->LA(1);
                if ( (LA68_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "VERSIONS")))
                {
                    alt68=1;
                }
                else if ( (LA68_0 == SQL92_RESERVED_AS))
                {
                    alt68=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 68 );
                    ex->set_state( 0 );


                    goto ruleflashback_query_clauseEx;

                }
            }
            switch (alt68)
            {
        	case 1:
        	    // OracleDML.g:331:10: versions_key between_key ( scn_key | timestamp_key ) expression
        	    {
        	        this->followPush(FOLLOW_versions_key_in_flashback_query_clause2857);
        	        versions_key175=versions_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            versions_key175_last = versions_key175.tree.get();
        	            stream_versions_key.add(versions_key175.tree);
        	        }

        	        this->followPush(FOLLOW_between_key_in_flashback_query_clause2859);
        	        between_key176=between_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            between_key176_last = between_key176.tree.get();
        	            stream_between_key.add(between_key176.tree);
        	        }

        	        // OracleDML.g:331:35: ( scn_key | timestamp_key )
        	        {
        	            ANTLR_UINT32 alt66=2;
        	            switch ( this->LA(1) )
        	            {
        	            case REGULAR_ID:
        	            	{
        	            		{
        	            		    ANTLR_UINT32 LA66_1 = this->LA(2);
        	            		    if ( ((toUpper(LT(1)->getText()) == "SCN")))
        	            		    {
        	            		        alt66=1;
        	            		    }
        	            		    else if ( ((toUpper(LT(1)->getText()) == "TIMESTAMP")))
        	            		    {
        	            		        alt66=2;
        	            		    }
        	            		    else
        	            		    {
        	            		        if (this->get_backtracking()>0)
        	            		        {
        	            		            this->set_failedflag( true );
        	            		            return retval;
        	            		        }


        	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		        ex->set_decisionNum( 66 );
        	            		        ex->set_state( 1 );


        	            		        goto ruleflashback_query_clauseEx;

        	            		    }
        	            		}
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 66 );
        	                ex->set_state( 0 );


        	                goto ruleflashback_query_clauseEx;

        	            }

        	            switch (alt66)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:331:36: scn_key
        	        	    {
        	        	        this->followPush(FOLLOW_scn_key_in_flashback_query_clause2862);
        	        	        scn_key177=scn_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            scn_key177_last = scn_key177.tree.get();
        	        	            stream_scn_key.add(scn_key177.tree);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:331:44: timestamp_key
        	        	    {
        	        	        this->followPush(FOLLOW_timestamp_key_in_flashback_query_clause2864);
        	        	        timestamp_key178=timestamp_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            timestamp_key178_last = timestamp_key178.tree.get();
        	        	            stream_timestamp_key.add(timestamp_key178.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_expression_in_flashback_query_clause2867);
        	        expression179=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression179_last = expression179.tree.get();
        	            stream_expression.add(expression179.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression, scn_key, versions_key, timestamp_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 331:70: -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:331:73: ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_versions_key.nextNode(), root_1);
        	        	// OracleDML.g:331:88: ( scn_key )?
        	        	if ( stream_scn_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_scn_key.nextTree());
        	        	}
        	        	stream_scn_key.reset();

        	        	// OracleDML.g:331:97: ( timestamp_key )?
        	        	if ( stream_timestamp_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_timestamp_key.nextTree());
        	        	}
        	        	stream_timestamp_key.reset();

        	        	// OracleDML.g:331:112: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:332:10: as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression
        	    {
        	        this->followPush(FOLLOW_as_key_in_flashback_query_clause2897);
        	        as_key180=as_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            as_key180_last = as_key180.tree.get();
        	            stream_as_key.add(as_key180.tree);
        	        }

        	        this->followPush(FOLLOW_of_key_in_flashback_query_clause2899);
        	        of_key181=of_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            of_key181_last = of_key181.tree.get();
        	            stream_of_key.add(of_key181.tree);
        	        }

        	        // OracleDML.g:332:24: ( scn_key | timestamp_key | snapshot_key )
        	        {
        	            ANTLR_UINT32 alt67=3;
        	            switch ( this->LA(1) )
        	            {
        	            case REGULAR_ID:
        	            	{
        	            		{
        	            		    ANTLR_UINT32 LA67_1 = this->LA(2);
        	            		    if ( ((toUpper(LT(1)->getText()) == "SCN")))
        	            		    {
        	            		        alt67=1;
        	            		    }
        	            		    else if ( ((toUpper(LT(1)->getText()) == "TIMESTAMP")))
        	            		    {
        	            		        alt67=2;
        	            		    }
        	            		    else if ( ((toUpper(LT(1)->getText()) == "SNAPSHOT")))
        	            		    {
        	            		        alt67=3;
        	            		    }
        	            		    else
        	            		    {
        	            		        if (this->get_backtracking()>0)
        	            		        {
        	            		            this->set_failedflag( true );
        	            		            return retval;
        	            		        }


        	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		        ex->set_decisionNum( 67 );
        	            		        ex->set_state( 1 );


        	            		        goto ruleflashback_query_clauseEx;

        	            		    }
        	            		}
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 67 );
        	                ex->set_state( 0 );


        	                goto ruleflashback_query_clauseEx;

        	            }

        	            switch (alt67)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:332:25: scn_key
        	        	    {
        	        	        this->followPush(FOLLOW_scn_key_in_flashback_query_clause2902);
        	        	        scn_key182=scn_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            scn_key182_last = scn_key182.tree.get();
        	        	            stream_scn_key.add(scn_key182.tree);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:332:33: timestamp_key
        	        	    {
        	        	        this->followPush(FOLLOW_timestamp_key_in_flashback_query_clause2904);
        	        	        timestamp_key183=timestamp_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            timestamp_key183_last = timestamp_key183.tree.get();
        	        	            stream_timestamp_key.add(timestamp_key183.tree);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // OracleDML.g:332:47: snapshot_key
        	        	    {
        	        	        this->followPush(FOLLOW_snapshot_key_in_flashback_query_clause2906);
        	        	        snapshot_key184=snapshot_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            snapshot_key184_last = snapshot_key184.tree.get();
        	        	            stream_snapshot_key.add(snapshot_key184.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_expression_in_flashback_query_clause2909);
        	        expression185=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression185_last = expression185.tree.get();
        	            stream_expression.add(expression185.tree);
        	        }

        	        // AST REWRITE
        	        // elements: snapshot_key, timestamp_key, expression, scn_key, as_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 332:72: -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:332:75: ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_as_key.nextNode(), root_1);
        	        	// OracleDML.g:332:84: ( scn_key )?
        	        	if ( stream_scn_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_scn_key.nextTree());
        	        	}
        	        	stream_scn_key.reset();

        	        	// OracleDML.g:332:93: ( timestamp_key )?
        	        	if ( stream_timestamp_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_timestamp_key.nextTree());
        	        	}
        	        	stream_timestamp_key.reset();

        	        	// OracleDML.g:332:108: ( snapshot_key )?
        	        	if ( stream_snapshot_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_snapshot_key.nextTree());
        	        	}
        	        	stream_snapshot_key.reset();

        	        	// OracleDML.g:332:122: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleflashback_query_clauseEx; /* Prevent compiler warnings */
    ruleflashback_query_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end flashback_query_clause */

/**
 * $ANTLR start pivot_clause
 * OracleDML.g:335:1: pivot_clause : pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN -> ^( pivot_key ( xml_key )? LEFT_PAREN ( pivot_element )+ pivot_for_clause pivot_in_clause RIGHT_PAREN ) ;
 */
OracleDML::pivot_clause_return
OracleDML::pivot_clause()
{
    OracleDML::pivot_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN188 = NULL;
    ImplTraits::CommonTokenType const* COMMA190 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN194 = NULL;
    OracleDML_OracleDMLKeys::pivot_key_return pivot_key186;
    ImplTraits::TreeTypePtr::pointer pivot_key186_last = NULL;
    OracleDML_OracleDMLKeys::xml_key_return xml_key187;
    ImplTraits::TreeTypePtr::pointer xml_key187_last = NULL;
    OracleDML::pivot_element_return pivot_element189;
    ImplTraits::TreeTypePtr::pointer pivot_element189_last = NULL;
    OracleDML::pivot_element_return pivot_element191;
    ImplTraits::TreeTypePtr::pointer pivot_element191_last = NULL;
    OracleDML::pivot_for_clause_return pivot_for_clause192;
    ImplTraits::TreeTypePtr::pointer pivot_for_clause192_last = NULL;
    OracleDML::pivot_in_clause_return pivot_in_clause193;
    ImplTraits::TreeTypePtr::pointer pivot_in_clause193_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN188_tree;
    ImplTraits::TreeTypePtr COMMA190_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN194_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_in_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_in_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_element(get_psrstate()->get_treeAdaptor(), "rule pivot_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_key(get_psrstate()->get_treeAdaptor(), "rule pivot_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_for_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_for_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_xml_key(get_psrstate()->get_treeAdaptor(), "rule xml_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:336:5: ( pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN -> ^( pivot_key ( xml_key )? LEFT_PAREN ( pivot_element )+ pivot_for_clause pivot_in_clause RIGHT_PAREN ) )
        // OracleDML.g:336:10: pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN
        {
            this->followPush(FOLLOW_pivot_key_in_pivot_clause2950);
            pivot_key186=pivot_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_key186_last = pivot_key186.tree.get();
                stream_pivot_key.add(pivot_key186.tree);
            }

            // OracleDML.g:336:20: ( xml_key )?
            {
                ANTLR_UINT32 alt69=2;
                {
                    ANTLR_UINT32 LA69_0 = this->LA(1);
                    if ( (LA69_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "XML")))
                    {
                        alt69=1;
                    }
                }
                switch (alt69)
                {
            	case 1:
            	    // OracleDML.g:336:20: xml_key
            	    {
            	        this->followPush(FOLLOW_xml_key_in_pivot_clause2952);
            	        xml_key187=xml_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            xml_key187_last = xml_key187.tree.get();
            	            stream_xml_key.add(xml_key187.tree);
            	        }

            	    }
            	    break;

                }
            }

            LEFT_PAREN188 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_pivot_clause2963);
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN188);


            this->followPush(FOLLOW_pivot_element_in_pivot_clause2977);
            pivot_element189=pivot_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_element189_last = pivot_element189.tree.get();
                stream_pivot_element.add(pivot_element189.tree);
            }

            // OracleDML.g:338:27: ( COMMA pivot_element )*

            for (;;)
            {
                ANTLR_UINT32 alt70=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt70=1;
                	}
                    break;

                }

                switch (alt70)
                {
            	case 1:
            	    // OracleDML.g:338:28: COMMA pivot_element
            	    {
            	        COMMA190 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_pivot_clause2980);
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA190);


            	        this->followPush(FOLLOW_pivot_element_in_pivot_clause2982);
            	        pivot_element191=pivot_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_element191_last = pivot_element191.tree.get();
            	            stream_pivot_element.add(pivot_element191.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop70;	/* break out of the loop */
            	    break;
                }
            }
            loop70: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_pivot_for_clause_in_pivot_clause2998);
            pivot_for_clause192=pivot_for_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_for_clause192_last = pivot_for_clause192.tree.get();
                stream_pivot_for_clause.add(pivot_for_clause192.tree);
            }

            this->followPush(FOLLOW_pivot_in_clause_in_pivot_clause3012);
            pivot_in_clause193=pivot_in_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_in_clause193_last = pivot_in_clause193.tree.get();
                stream_pivot_in_clause.add(pivot_in_clause193.tree);
            }

            RIGHT_PAREN194 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_pivot_clause3024);
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN194);


            // AST REWRITE
            // elements: LEFT_PAREN, xml_key, RIGHT_PAREN, pivot_element, pivot_in_clause, pivot_for_clause, pivot_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 342:9: -> ^( pivot_key ( xml_key )? LEFT_PAREN ( pivot_element )+ pivot_for_clause pivot_in_clause RIGHT_PAREN )
            {
            	// OracleDML.g:342:12: ^( pivot_key ( xml_key )? LEFT_PAREN ( pivot_element )+ pivot_for_clause pivot_in_clause RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_pivot_key.nextNode(), root_1);
            	// OracleDML.g:342:24: ( xml_key )?
            	if ( stream_xml_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_xml_key.nextTree());
            	}
            	stream_xml_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
            	if ( !(stream_pivot_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "pivot_element empty" );
            		goto rulepivot_clauseEx;
            	}
            	while ( stream_pivot_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_element.nextTree());
            	}
            	stream_pivot_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_for_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_in_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_clauseEx; /* Prevent compiler warnings */
    rulepivot_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_clause */

/**
 * $ANTLR start pivot_element
 * OracleDML.g:345:1: pivot_element : aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )? -> ^( PIVOT_ELEMENT ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN ) ) ) ( column_alias )? ) ;
 */
OracleDML::pivot_element_return
OracleDML::pivot_element()
{
    OracleDML::pivot_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN196 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN198 = NULL;
    OracleDML_OracleDMLCommons::aggregate_function_name_return aggregate_function_name195;
    ImplTraits::TreeTypePtr::pointer aggregate_function_name195_last = NULL;
    OracleDML::expression_return expression197;
    ImplTraits::TreeTypePtr::pointer expression197_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias199;
    ImplTraits::TreeTypePtr::pointer column_alias199_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN196_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN198_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_aggregate_function_name(get_psrstate()->get_treeAdaptor(), "rule aggregate_function_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:346:5: ( aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )? -> ^( PIVOT_ELEMENT ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN ) ) ) ( column_alias )? ) )
        // OracleDML.g:346:10: aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )?
        {
            this->followPush(FOLLOW_aggregate_function_name_in_pivot_element3072);
            aggregate_function_name195=aggregate_function_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                aggregate_function_name195_last = aggregate_function_name195.tree.get();
                stream_aggregate_function_name.add(aggregate_function_name195.tree);
            }

            LEFT_PAREN196 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_pivot_element3074);
            if  (this->hasException())
            {
                goto rulepivot_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN196);


            this->followPush(FOLLOW_expression_in_pivot_element3076);
            expression197=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression197_last = expression197.tree.get();
                stream_expression.add(expression197.tree);
            }

            RIGHT_PAREN198 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_pivot_element3078);
            if  (this->hasException())
            {
                goto rulepivot_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN198);


            // OracleDML.g:346:68: ( column_alias )?
            {
                ANTLR_UINT32 alt71=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt71=1;
                    	}
                        break;
                }

                switch (alt71)
                {
            	case 1:
            	    // OracleDML.g:346:68: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_pivot_element3080);
            	        column_alias199=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias199_last = column_alias199.tree.get();
            	            stream_column_alias.add(column_alias199.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_alias, RIGHT_PAREN, expression, aggregate_function_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 347:9: -> ^( PIVOT_ELEMENT ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN ) ) ) ( column_alias )? )
            {
            	// OracleDML.g:347:12: ^( PIVOT_ELEMENT ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN ) ) ) ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(PIVOT_ELEMENT, "PIVOT_ELEMENT"), root_1);
            	// OracleDML.g:347:28: ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN ) ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	// OracleDML.g:347:35: ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN ) )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ROUTINE_CALL, "ROUTINE_CALL"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_aggregate_function_name.nextTree());
            	// OracleDML.g:347:74: ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_4 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_4 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ARGUMENTS, LEFT_PAREN196), root_4);
            	// OracleDML.g:347:99: ^( ARGUMENT ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_5 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_5 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ARGUMENT, "ARGUMENT"), root_5);
            	// OracleDML.g:347:110: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_6 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_6 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_6);
            	get_psrstate()->get_treeAdaptor()->addChild(root_6, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_5, root_6);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_4, root_5);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_4, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, root_4);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:347:145: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_elementEx; /* Prevent compiler warnings */
    rulepivot_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_element */

/**
 * $ANTLR start pivot_for_clause
 * OracleDML.g:350:1: pivot_for_clause : for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) -> ^( for_key LEFT_PAREN ( column_name )+ RIGHT_PAREN ) ;
 */
OracleDML::pivot_for_clause_return
OracleDML::pivot_for_clause()
{
    OracleDML::pivot_for_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN202 = NULL;
    ImplTraits::CommonTokenType const* COMMA204 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN206 = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key200;
    ImplTraits::TreeTypePtr::pointer for_key200_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name201;
    ImplTraits::TreeTypePtr::pointer column_name201_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name203;
    ImplTraits::TreeTypePtr::pointer column_name203_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name205;
    ImplTraits::TreeTypePtr::pointer column_name205_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN202_tree;
    ImplTraits::TreeTypePtr COMMA204_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN206_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:351:5: ( for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) -> ^( for_key LEFT_PAREN ( column_name )+ RIGHT_PAREN ) )
        // OracleDML.g:351:10: for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
        {
            this->followPush(FOLLOW_for_key_in_pivot_for_clause3145);
            for_key200=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_for_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key200_last = for_key200.tree.get();
                stream_for_key.add(for_key200.tree);
            }

            // OracleDML.g:352:5: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            {
                ANTLR_UINT32 alt73=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt73=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt73=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 73 );
                    ex->set_state( 0 );


                    goto rulepivot_for_clauseEx;

                }

                switch (alt73)
                {
            	case 1:
            	    // OracleDML.g:352:10: column_name
            	    {
            	        this->followPush(FOLLOW_column_name_in_pivot_for_clause3157);
            	        column_name201=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_for_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name201_last = column_name201.tree.get();
            	            stream_column_name.add(column_name201.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:353:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN202 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_pivot_for_clause3168);
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_for_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN202);


            	        this->followPush(FOLLOW_column_name_in_pivot_for_clause3170);
            	        column_name203=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_for_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name203_last = column_name203.tree.get();
            	            stream_column_name.add(column_name203.tree);
            	        }

            	        // OracleDML.g:353:33: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt72=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt72=1;
            	            	}
            	                break;

            	            }

            	            switch (alt72)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:353:34: COMMA column_name
            	        	    {
            	        	        COMMA204 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_pivot_for_clause3173);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_for_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA204);


            	        	        this->followPush(FOLLOW_column_name_in_pivot_for_clause3175);
            	        	        column_name205=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_for_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name205_last = column_name205.tree.get();
            	        	            stream_column_name.add(column_name205.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop72;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop72: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN206 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_pivot_for_clause3179);
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_for_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN206);


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: LEFT_PAREN, column_name, RIGHT_PAREN, for_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 355:9: -> ^( for_key LEFT_PAREN ( column_name )+ RIGHT_PAREN )
            {
            	// OracleDML.g:355:12: ^( for_key LEFT_PAREN ( column_name )+ RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_for_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
            	if ( !(stream_column_name.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
            		goto rulepivot_for_clauseEx;
            	}
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_for_clauseEx; /* Prevent compiler warnings */
    rulepivot_for_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_for_clause */

/**
 * $ANTLR start pivot_in_clause
 * OracleDML.g:358:1: pivot_in_clause : in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN -> {mode == 1}? ^( in_key subquery ) -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) ) -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ;
 */
OracleDML::pivot_in_clause_return
OracleDML::pivot_in_clause()
{
    OracleDML::pivot_in_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN208 = NULL;
    ImplTraits::CommonTokenType const* COMMA211 = NULL;
    ImplTraits::CommonTokenType const* COMMA214 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN216 = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key207;
    ImplTraits::TreeTypePtr::pointer in_key207_last = NULL;
    OracleDML::subquery_return subquery209;
    ImplTraits::TreeTypePtr::pointer subquery209_last = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key210;
    ImplTraits::TreeTypePtr::pointer any_key210_last = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key212;
    ImplTraits::TreeTypePtr::pointer any_key212_last = NULL;
    OracleDML::pivot_in_clause_element_return pivot_in_clause_element213;
    ImplTraits::TreeTypePtr::pointer pivot_in_clause_element213_last = NULL;
    OracleDML::pivot_in_clause_element_return pivot_in_clause_element215;
    ImplTraits::TreeTypePtr::pointer pivot_in_clause_element215_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN208_tree;
    ImplTraits::TreeTypePtr COMMA211_tree;
    ImplTraits::TreeTypePtr COMMA214_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN216_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_any_key(get_psrstate()->get_treeAdaptor(), "rule any_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_in_clause_element(get_psrstate()->get_treeAdaptor(), "rule pivot_in_clause_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:360:5: ( in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN -> {mode == 1}? ^( in_key subquery ) -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) ) -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
        // OracleDML.g:360:10: in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN
        {
            this->followPush(FOLLOW_in_key_in_pivot_in_clause3234);
            in_key207=in_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                in_key207_last = in_key207.tree.get();
                stream_in_key.add(in_key207.tree);
            }

            LEFT_PAREN208 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_pivot_in_clause3244);
            if  (this->hasException())
            {
                goto rulepivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN208);


            // OracleDML.g:362:13: ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* )
            {
                ANTLR_UINT32 alt76=3;
                {
                    ANTLR_UINT32 LA76_0 = this->LA(1);
                    if ( (LA76_0 == SQL92_RESERVED_SELECT) && (this->msynpred( antlr3::ClassForwarder<synpred12_OracleDML>() )))
                    {
                        alt76=1;
                    }
                    else if ( (LA76_0 == LEFT_PAREN))
                    {
                        {
                            ANTLR_UINT32 LA76_2 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred12_OracleDML>() )))
                            {
                                alt76=1;
                            }
                            else if ( (true))
                            {
                                alt76=3;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 76 );
                                ex->set_state( 2 );


                                goto rulepivot_in_clauseEx;

                            }
                        }
                    }
                    else if ( (LA76_0 == SQL92_RESERVED_ANY))
                    {
                        {
                            ANTLR_UINT32 LA76_3 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred13_OracleDML>() )))
                            {
                                alt76=2;
                            }
                            else if ( (true))
                            {
                                alt76=3;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 76 );
                                ex->set_state( 3 );


                                goto rulepivot_in_clauseEx;

                            }
                        }
                    }
                    else if ( (LA76_0 == APPROXIMATE_NUM_LIT || LA76_0 == BINDVAR || ((LA76_0 >= CHAR_STRING) && (LA76_0 <= CHAR_STRING_PERL)) || LA76_0 == COLON || LA76_0 == DELIMITED_ID || LA76_0 == EXACT_NUM_LIT || LA76_0 == INTRODUCER || LA76_0 == MINUS_SIGN || LA76_0 == NATIONAL_CHAR_STRING_LIT || ((LA76_0 >= PLSQL_NON_RESERVED_CAST) && (LA76_0 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA76_0 == PLUS_SIGN || LA76_0 == REGULAR_ID || LA76_0 == SQL92_RESERVED_ALL || LA76_0 == SQL92_RESERVED_CASE || ((LA76_0 >= SQL92_RESERVED_CURSOR) && (LA76_0 <= SQL92_RESERVED_DATE)) || LA76_0 == SQL92_RESERVED_DEFAULT || LA76_0 == SQL92_RESERVED_DISTINCT || ((LA76_0 >= SQL92_RESERVED_EXISTS) && (LA76_0 <= SQL92_RESERVED_FALSE)) || ((LA76_0 >= SQL92_RESERVED_NOT) && (LA76_0 <= SQL92_RESERVED_NULL)) || LA76_0 == SQL92_RESERVED_PRIOR || LA76_0 == SQL92_RESERVED_TRUE || LA76_0 == UNSIGNED_INTEGER))
                    {
                        alt76=3;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 76 );
                        ex->set_state( 0 );


                        goto rulepivot_in_clauseEx;

                    }
                }
                switch (alt76)
                {
            	case 1:
            	    // OracleDML.g:362:18: ( select_key )=> subquery
            	    {
            	        this->followPush(FOLLOW_subquery_in_pivot_in_clause3268);
            	        subquery209=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery209_last = subquery209.tree.get();
            	            stream_subquery.add(subquery209.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:363:18: ( any_key )=> any_key ( COMMA any_key )*
            	    {
            	        this->followPush(FOLLOW_any_key_in_pivot_in_clause3294);
            	        any_key210=any_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            any_key210_last = any_key210.tree.get();
            	            stream_any_key.add(any_key210.tree);
            	        }

            	        // OracleDML.g:363:38: ( COMMA any_key )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt74=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt74=1;
            	            	}
            	                break;

            	            }

            	            switch (alt74)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:363:39: COMMA any_key
            	        	    {
            	        	        COMMA211 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_pivot_in_clause3297);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_in_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA211);


            	        	        this->followPush(FOLLOW_any_key_in_pivot_in_clause3299);
            	        	        any_key212=any_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_in_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            any_key212_last = any_key212.tree.get();
            	        	            stream_any_key.add(any_key212.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop74;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop74: ; /* Jump out to here if this rule does not match */


            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 2;
            	        }


            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:364:18: pivot_in_clause_element ( COMMA pivot_in_clause_element )*
            	    {
            	        this->followPush(FOLLOW_pivot_in_clause_element_in_pivot_in_clause3322);
            	        pivot_in_clause_element213=pivot_in_clause_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_in_clause_element213_last = pivot_in_clause_element213.tree.get();
            	            stream_pivot_in_clause_element.add(pivot_in_clause_element213.tree);
            	        }

            	        // OracleDML.g:364:42: ( COMMA pivot_in_clause_element )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt75=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt75=1;
            	            	}
            	                break;

            	            }

            	            switch (alt75)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:364:43: COMMA pivot_in_clause_element
            	        	    {
            	        	        COMMA214 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_pivot_in_clause3325);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_in_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA214);


            	        	        this->followPush(FOLLOW_pivot_in_clause_element_in_pivot_in_clause3327);
            	        	        pivot_in_clause_element215=pivot_in_clause_element();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_in_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            pivot_in_clause_element215_last = pivot_in_clause_element215.tree.get();
            	        	            stream_pivot_in_clause_element.add(pivot_in_clause_element215.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop75;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop75: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            RIGHT_PAREN216 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_pivot_in_clause3353);
            if  (this->hasException())
            {
                goto rulepivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN216);


            // AST REWRITE
            // elements: in_key, pivot_in_clause_element, in_key, subquery, in_key, any_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 367:9: -> {mode == 1}? ^( in_key subquery )
            if (mode == 1) {
            	// OracleDML.g:367:24: ^( in_key subquery )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 368:9: -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) )
            if (mode == 2) {
            	// OracleDML.g:368:24: ^( in_key ^( ANY_MODE ( any_key )+ ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	// OracleDML.g:368:33: ^( ANY_MODE ( any_key )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ANY_MODE, "ANY_MODE"), root_2);
            	if ( !(stream_any_key.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "any_key empty" );
            		goto rulepivot_in_clauseEx;
            	}
            	while ( stream_any_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_any_key.nextTree());
            	}
            	stream_any_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 369:9: -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
            {
            	// OracleDML.g:369:12: ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	// OracleDML.g:369:21: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ELEMENTS_MODE, "ELEMENTS_MODE"), root_2);
            	if ( !(stream_pivot_in_clause_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "pivot_in_clause_element empty" );
            		goto rulepivot_in_clauseEx;
            	}
            	while ( stream_pivot_in_clause_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_pivot_in_clause_element.nextTree());
            	}
            	stream_pivot_in_clause_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_in_clauseEx; /* Prevent compiler warnings */
    rulepivot_in_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_in_clause */

/**
 * $ANTLR start pivot_in_clause_element
 * OracleDML.g:372:1: pivot_in_clause_element : pivot_in_clause_elements ( column_alias )? -> ^( PIVOT_IN_ELEMENT pivot_in_clause_elements ( column_alias )? ) ;
 */
OracleDML::pivot_in_clause_element_return
OracleDML::pivot_in_clause_element()
{
    OracleDML::pivot_in_clause_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::pivot_in_clause_elements_return pivot_in_clause_elements217;
    ImplTraits::TreeTypePtr::pointer pivot_in_clause_elements217_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias218;
    ImplTraits::TreeTypePtr::pointer column_alias218_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_in_clause_elements(get_psrstate()->get_treeAdaptor(), "rule pivot_in_clause_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:373:5: ( pivot_in_clause_elements ( column_alias )? -> ^( PIVOT_IN_ELEMENT pivot_in_clause_elements ( column_alias )? ) )
        // OracleDML.g:373:10: pivot_in_clause_elements ( column_alias )?
        {
            this->followPush(FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3433);
            pivot_in_clause_elements217=pivot_in_clause_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_in_clause_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_in_clause_elements217_last = pivot_in_clause_elements217.tree.get();
                stream_pivot_in_clause_elements.add(pivot_in_clause_elements217.tree);
            }

            // OracleDML.g:373:35: ( column_alias )?
            {
                ANTLR_UINT32 alt77=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt77=1;
                    	}
                        break;
                }

                switch (alt77)
                {
            	case 1:
            	    // OracleDML.g:373:35: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_pivot_in_clause_element3435);
            	        column_alias218=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_in_clause_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias218_last = column_alias218.tree.get();
            	            stream_column_alias.add(column_alias218.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_alias, pivot_in_clause_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 374:9: -> ^( PIVOT_IN_ELEMENT pivot_in_clause_elements ( column_alias )? )
            {
            	// OracleDML.g:374:12: ^( PIVOT_IN_ELEMENT pivot_in_clause_elements ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(PIVOT_IN_ELEMENT, "PIVOT_IN_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_in_clause_elements.nextTree());
            	// OracleDML.g:374:56: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_in_clause_elementEx; /* Prevent compiler warnings */
    rulepivot_in_clause_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_in_clause_element */

/**
 * $ANTLR start pivot_in_clause_elements
 * OracleDML.g:377:1: pivot_in_clause_elements : ( expression -> ^( EXPR expression ) | ( LEFT_PAREN )=> expression_list );
 */
OracleDML::pivot_in_clause_elements_return
OracleDML::pivot_in_clause_elements()
{
    OracleDML::pivot_in_clause_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression219;
    ImplTraits::TreeTypePtr::pointer expression219_last = NULL;
    OracleDML::expression_list_return expression_list220;
    ImplTraits::TreeTypePtr::pointer expression_list220_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:378:5: ( expression -> ^( EXPR expression ) | ( LEFT_PAREN )=> expression_list )

            ANTLR_UINT32 alt78;

            alt78=2;

            switch ( this->LA(1) )
            {
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case REGULAR_ID:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt78=1;
            	}
                break;
            case LEFT_PAREN:
            	{
            		{
            		    ANTLR_UINT32 LA78_25 = this->LA(2);
            		    if ( (true))
            		    {
            		        alt78=1;
            		    }
            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred14_OracleDML>() )))
            		    {
            		        alt78=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 78 );
            		        ex->set_state( 25 );


            		        goto rulepivot_in_clause_elementsEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 78 );
                ex->set_state( 0 );


                goto rulepivot_in_clause_elementsEx;

            }

            switch (alt78)
            {
        	case 1:
        	    // OracleDML.g:378:10: expression
        	    {
        	        this->followPush(FOLLOW_expression_in_pivot_in_clause_elements3475);
        	        expression219=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepivot_in_clause_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression219_last = expression219.tree.get();
        	            stream_expression.add(expression219.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 378:21: -> ^( EXPR expression )
        	        {
        	        	// OracleDML.g:378:24: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:379:10: ( LEFT_PAREN )=> expression_list
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_expression_list_in_pivot_in_clause_elements3499);
        	        expression_list220=expression_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepivot_in_clause_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_list220.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_in_clause_elementsEx; /* Prevent compiler warnings */
    rulepivot_in_clause_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_in_clause_elements */

/**
 * $ANTLR start unpivot_clause
 * OracleDML.g:382:1: unpivot_clause : unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause ) ;
 */
OracleDML::unpivot_clause_return
OracleDML::unpivot_clause()
{
    OracleDML::unpivot_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN225 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN227 = NULL;
    ImplTraits::CommonTokenType const* COMMA229 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN231 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN234 = NULL;
    OracleDML_OracleDMLKeys::unpivot_key_return unpivot_key221;
    ImplTraits::TreeTypePtr::pointer unpivot_key221_last = NULL;
    OracleDML_OracleDMLKeys::include_key_return include_key222;
    ImplTraits::TreeTypePtr::pointer include_key222_last = NULL;
    OracleDML_OracleDMLKeys::exclude_key_return exclude_key223;
    ImplTraits::TreeTypePtr::pointer exclude_key223_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key224;
    ImplTraits::TreeTypePtr::pointer nulls_key224_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name226;
    ImplTraits::TreeTypePtr::pointer column_name226_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name228;
    ImplTraits::TreeTypePtr::pointer column_name228_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name230;
    ImplTraits::TreeTypePtr::pointer column_name230_last = NULL;
    OracleDML::pivot_for_clause_return pivot_for_clause232;
    ImplTraits::TreeTypePtr::pointer pivot_for_clause232_last = NULL;
    OracleDML::unpivot_in_clause_return unpivot_in_clause233;
    ImplTraits::TreeTypePtr::pointer unpivot_in_clause233_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN225_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN227_tree;
    ImplTraits::TreeTypePtr COMMA229_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN231_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN234_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_nulls_key(get_psrstate()->get_treeAdaptor(), "rule nulls_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_exclude_key(get_psrstate()->get_treeAdaptor(), "rule exclude_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_include_key(get_psrstate()->get_treeAdaptor(), "rule include_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_key(get_psrstate()->get_treeAdaptor(), "rule unpivot_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_for_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_for_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_in_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_in_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:383:5: ( unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause ) )
        // OracleDML.g:383:10: unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN
        {
            this->followPush(FOLLOW_unpivot_key_in_unpivot_clause3519);
            unpivot_key221=unpivot_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                unpivot_key221_last = unpivot_key221.tree.get();
                stream_unpivot_key.add(unpivot_key221.tree);
            }

            // OracleDML.g:384:9: ( ( include_key | exclude_key ) nulls_key )?
            {
                ANTLR_UINT32 alt80=2;
                {
                    ANTLR_UINT32 LA80_0 = this->LA(1);
                    if ( (LA80_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INCLUDE"))||((toUpper(LT(1)->getText()) == "EXCLUDE")))))
                    {
                        alt80=1;
                    }
                }
                switch (alt80)
                {
            	case 1:
            	    // OracleDML.g:384:10: ( include_key | exclude_key ) nulls_key
            	    {
            	        // OracleDML.g:384:10: ( include_key | exclude_key )
            	        {
            	            ANTLR_UINT32 alt79=2;
            	            {
            	                ANTLR_UINT32 LA79_0 = this->LA(1);
            	                if ( (LA79_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INCLUDE"))||((toUpper(LT(1)->getText()) == "EXCLUDE")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA79_1 = this->LA(2);
            	                        if ( ((toUpper(LT(1)->getText()) == "INCLUDE")))
            	                        {
            	                            alt79=1;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "EXCLUDE")))
            	                        {
            	                            alt79=2;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return retval;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 79 );
            	                            ex->set_state( 1 );


            	                            goto ruleunpivot_clauseEx;

            	                        }
            	                    }
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 79 );
            	                    ex->set_state( 0 );


            	                    goto ruleunpivot_clauseEx;

            	                }
            	            }
            	            switch (alt79)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:384:11: include_key
            	        	    {
            	        	        this->followPush(FOLLOW_include_key_in_unpivot_clause3532);
            	        	        include_key222=include_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            include_key222_last = include_key222.tree.get();
            	        	            stream_include_key.add(include_key222.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:384:23: exclude_key
            	        	    {
            	        	        this->followPush(FOLLOW_exclude_key_in_unpivot_clause3534);
            	        	        exclude_key223=exclude_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            exclude_key223_last = exclude_key223.tree.get();
            	        	            stream_exclude_key.add(exclude_key223.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_nulls_key_in_unpivot_clause3537);
            	        nulls_key224=nulls_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            nulls_key224_last = nulls_key224.tree.get();
            	            stream_nulls_key.add(nulls_key224.tree);
            	        }

            	    }
            	    break;

                }
            }

            LEFT_PAREN225 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_clause3549);
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN225);


            // OracleDML.g:386:13: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            {
                ANTLR_UINT32 alt82=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt82=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt82=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 82 );
                    ex->set_state( 0 );


                    goto ruleunpivot_clauseEx;

                }

                switch (alt82)
                {
            	case 1:
            	    // OracleDML.g:386:18: column_name
            	    {
            	        this->followPush(FOLLOW_column_name_in_unpivot_clause3568);
            	        column_name226=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name226_last = column_name226.tree.get();
            	            stream_column_name.add(column_name226.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:387:18: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN227 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_clause3587);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN227);


            	        this->followPush(FOLLOW_column_name_in_unpivot_clause3589);
            	        column_name228=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name228_last = column_name228.tree.get();
            	            stream_column_name.add(column_name228.tree);
            	        }

            	        // OracleDML.g:387:41: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt81=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt81=1;
            	            	}
            	                break;

            	            }

            	            switch (alt81)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:387:42: COMMA column_name
            	        	    {
            	        	        COMMA229 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_unpivot_clause3592);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA229);


            	        	        this->followPush(FOLLOW_column_name_in_unpivot_clause3594);
            	        	        column_name230=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name230_last = column_name230.tree.get();
            	        	            stream_column_name.add(column_name230.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop81;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop81: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN231 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_clause3598);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN231);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_pivot_for_clause_in_unpivot_clause3626);
            pivot_for_clause232=pivot_for_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_for_clause232_last = pivot_for_clause232.tree.get();
                stream_pivot_for_clause.add(pivot_for_clause232.tree);
            }

            this->followPush(FOLLOW_unpivot_in_clause_in_unpivot_clause3640);
            unpivot_in_clause233=unpivot_in_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                unpivot_in_clause233_last = unpivot_in_clause233.tree.get();
                stream_unpivot_in_clause.add(unpivot_in_clause233.tree);
            }

            RIGHT_PAREN234 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_clause3650);
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN234);


            // AST REWRITE
            // elements: nulls_key, pivot_for_clause, unpivot_key, unpivot_in_clause, exclude_key, include_key, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 392:9: -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause )
            {
            	// OracleDML.g:392:12: ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_unpivot_key.nextNode(), root_1);
            	// OracleDML.g:392:26: ( include_key )?
            	if ( stream_include_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_include_key.nextTree());
            	}
            	stream_include_key.reset();

            	// OracleDML.g:392:39: ( exclude_key )?
            	if ( stream_exclude_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_exclude_key.nextTree());
            	}
            	stream_exclude_key.reset();

            	// OracleDML.g:392:52: ( nulls_key )?
            	if ( stream_nulls_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_nulls_key.nextTree());
            	}
            	stream_nulls_key.reset();

            	if ( !(stream_column_name.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
            		goto ruleunpivot_clauseEx;
            	}
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_for_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_in_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleunpivot_clauseEx; /* Prevent compiler warnings */
    ruleunpivot_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end unpivot_clause */

/**
 * $ANTLR start unpivot_in_clause
 * OracleDML.g:395:1: unpivot_in_clause : in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ ) ;
 */
OracleDML::unpivot_in_clause_return
OracleDML::unpivot_in_clause()
{
    OracleDML::unpivot_in_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN236 = NULL;
    ImplTraits::CommonTokenType const* COMMA238 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN240 = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key235;
    ImplTraits::TreeTypePtr::pointer in_key235_last = NULL;
    OracleDML::unpivot_in_elements_return unpivot_in_elements237;
    ImplTraits::TreeTypePtr::pointer unpivot_in_elements237_last = NULL;
    OracleDML::unpivot_in_elements_return unpivot_in_elements239;
    ImplTraits::TreeTypePtr::pointer unpivot_in_elements239_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN236_tree;
    ImplTraits::TreeTypePtr COMMA238_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN240_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_in_elements(get_psrstate()->get_treeAdaptor(), "rule unpivot_in_elements");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:396:5: ( in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ ) )
        // OracleDML.g:396:10: in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN
        {
            this->followPush(FOLLOW_in_key_in_unpivot_in_clause3700);
            in_key235=in_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                in_key235_last = in_key235.tree.get();
                stream_in_key.add(in_key235.tree);
            }

            LEFT_PAREN236 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_in_clause3710);
            if  (this->hasException())
            {
                goto ruleunpivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN236);


            this->followPush(FOLLOW_unpivot_in_elements_in_unpivot_in_clause3724);
            unpivot_in_elements237=unpivot_in_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                unpivot_in_elements237_last = unpivot_in_elements237.tree.get();
                stream_unpivot_in_elements.add(unpivot_in_elements237.tree);
            }

            // OracleDML.g:398:33: ( COMMA unpivot_in_elements )*

            for (;;)
            {
                ANTLR_UINT32 alt83=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt83=1;
                	}
                    break;

                }

                switch (alt83)
                {
            	case 1:
            	    // OracleDML.g:398:34: COMMA unpivot_in_elements
            	    {
            	        COMMA238 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_unpivot_in_clause3727);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA238);


            	        this->followPush(FOLLOW_unpivot_in_elements_in_unpivot_in_clause3729);
            	        unpivot_in_elements239=unpivot_in_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            unpivot_in_elements239_last = unpivot_in_elements239.tree.get();
            	            stream_unpivot_in_elements.add(unpivot_in_elements239.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop83;	/* break out of the loop */
            	    break;
                }
            }
            loop83: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN240 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3741);
            if  (this->hasException())
            {
                goto ruleunpivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN240);


            // AST REWRITE
            // elements: unpivot_in_elements, in_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 400:9: -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ )
            {
            	// OracleDML.g:400:12: ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	if ( !(stream_unpivot_in_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "unpivot_in_elements empty" );
            		goto ruleunpivot_in_clauseEx;
            	}
            	while ( stream_unpivot_in_elements.hasNext() ) {
            		// OracleDML.g:400:21: ^( UNPIVOT_IN_ELEMENT unpivot_in_elements )
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(UNPIVOT_IN_ELEMENT, "UNPIVOT_IN_ELEMENT"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_unpivot_in_elements.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_unpivot_in_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleunpivot_in_clauseEx; /* Prevent compiler warnings */
    ruleunpivot_in_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end unpivot_in_clause */

/**
 * $ANTLR start unpivot_in_elements
 * OracleDML.g:403:1: unpivot_in_elements : ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )? -> ( column_name )+ ( ^( PIVOT_ALIAS ( constant )+ ) )? ;
 */
OracleDML::unpivot_in_elements_return
OracleDML::unpivot_in_elements()
{
    OracleDML::unpivot_in_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN242 = NULL;
    ImplTraits::CommonTokenType const* COMMA244 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN246 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN249 = NULL;
    ImplTraits::CommonTokenType const* COMMA251 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN253 = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name241;
    ImplTraits::TreeTypePtr::pointer column_name241_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name243;
    ImplTraits::TreeTypePtr::pointer column_name243_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name245;
    ImplTraits::TreeTypePtr::pointer column_name245_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key247;
    ImplTraits::TreeTypePtr::pointer as_key247_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant248;
    ImplTraits::TreeTypePtr::pointer constant248_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant250;
    ImplTraits::TreeTypePtr::pointer constant250_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant252;
    ImplTraits::TreeTypePtr::pointer constant252_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN242_tree;
    ImplTraits::TreeTypePtr COMMA244_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN246_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN249_tree;
    ImplTraits::TreeTypePtr COMMA251_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN253_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_constant(get_psrstate()->get_treeAdaptor(), "rule constant");
    RewriteRuleSubtreeStream<ImplTraits> stream_as_key(get_psrstate()->get_treeAdaptor(), "rule as_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:404:5: ( ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )? -> ( column_name )+ ( ^( PIVOT_ALIAS ( constant )+ ) )? )
        // OracleDML.g:404:9: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )?
        {
            // OracleDML.g:404:9: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            {
                ANTLR_UINT32 alt85=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt85=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt85=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 85 );
                    ex->set_state( 0 );


                    goto ruleunpivot_in_elementsEx;

                }

                switch (alt85)
                {
            	case 1:
            	    // OracleDML.g:404:14: column_name
            	    {
            	        this->followPush(FOLLOW_column_name_in_unpivot_in_elements3786);
            	        column_name241=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name241_last = column_name241.tree.get();
            	            stream_column_name.add(column_name241.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:405:14: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN242 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_in_elements3801);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN242);


            	        this->followPush(FOLLOW_column_name_in_unpivot_in_elements3803);
            	        column_name243=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name243_last = column_name243.tree.get();
            	            stream_column_name.add(column_name243.tree);
            	        }

            	        // OracleDML.g:405:37: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt84=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt84=1;
            	            	}
            	                break;

            	            }

            	            switch (alt84)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:405:38: COMMA column_name
            	        	    {
            	        	        COMMA244 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_unpivot_in_elements3806);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA244);


            	        	        this->followPush(FOLLOW_column_name_in_unpivot_in_elements3808);
            	        	        column_name245=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name245_last = column_name245.tree.get();
            	        	            stream_column_name.add(column_name245.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop84;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop84: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN246 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3812);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN246);


            	    }
            	    break;

                }
            }

            // OracleDML.g:407:9: ( as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )?
            {
                ANTLR_UINT32 alt88=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_AS:
                    	{
                    		alt88=1;
                    	}
                        break;
                }

                switch (alt88)
                {
            	case 1:
            	    // OracleDML.g:407:14: as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN )
            	    {
            	        this->followPush(FOLLOW_as_key_in_unpivot_in_elements3837);
            	        as_key247=as_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            as_key247_last = as_key247.tree.get();
            	            stream_as_key.add(as_key247.tree);
            	        }

            	        // OracleDML.g:408:9: ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN )
            	        {
            	            ANTLR_UINT32 alt87=2;
            	            {
            	                ANTLR_UINT32 LA87_0 = this->LA(1);
            	                if ( (LA87_0 == APPROXIMATE_NUM_LIT || ((LA87_0 >= CHAR_STRING) && (LA87_0 <= CHAR_STRING_PERL)) || LA87_0 == EXACT_NUM_LIT || LA87_0 == NATIONAL_CHAR_STRING_LIT || LA87_0 == REGULAR_ID || LA87_0 == SQL92_RESERVED_DATE || LA87_0 == SQL92_RESERVED_DEFAULT || LA87_0 == SQL92_RESERVED_FALSE || LA87_0 == SQL92_RESERVED_NULL || LA87_0 == SQL92_RESERVED_TRUE || LA87_0 == UNSIGNED_INTEGER))
            	                {
            	                    alt87=1;
            	                }
            	                else if ( (LA87_0 == LEFT_PAREN) && (this->msynpred( antlr3::ClassForwarder<synpred15_OracleDML>() )))
            	                {
            	                    alt87=2;
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 87 );
            	                    ex->set_state( 0 );


            	                    goto ruleunpivot_in_elementsEx;

            	                }
            	            }
            	            switch (alt87)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:408:14: constant
            	        	    {
            	        	        this->followPush(FOLLOW_constant_in_unpivot_in_elements3852);
            	        	        constant248=constant();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            constant248_last = constant248.tree.get();
            	        	            stream_constant.add(constant248.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:409:14: ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN
            	        	    {
            	        	        LEFT_PAREN249 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_in_elements3872);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN249);


            	        	        this->followPush(FOLLOW_constant_in_unpivot_in_elements3874);
            	        	        constant250=constant();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            constant250_last = constant250.tree.get();
            	        	            stream_constant.add(constant250.tree);
            	        	        }

            	        	        // OracleDML.g:409:49: ( COMMA constant )*

            	        	        for (;;)
            	        	        {
            	        	            ANTLR_UINT32 alt86=2;
            	        	            switch ( this->LA(1) )
            	        	            {
            	        	            case COMMA:
            	        	            	{
            	        	            		alt86=1;
            	        	            	}
            	        	                break;

            	        	            }

            	        	            switch (alt86)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:409:50: COMMA constant
            	        	        	    {
            	        	        	        COMMA251 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_unpivot_in_elements3877);
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleunpivot_in_elementsEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }
            	        	        	         
            	        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA251);


            	        	        	        this->followPush(FOLLOW_constant_in_unpivot_in_elements3879);
            	        	        	        constant252=constant();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleunpivot_in_elementsEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            constant252_last = constant252.tree.get();
            	        	        	            stream_constant.add(constant252.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop86;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop86: ; /* Jump out to here if this rule does not match */


            	        	        RIGHT_PAREN253 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3883);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN253);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: constant, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 412:9: -> ( column_name )+ ( ^( PIVOT_ALIAS ( constant )+ ) )?
            {
            	if ( !(stream_column_name.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
            		goto ruleunpivot_in_elementsEx;
            	}
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	// OracleDML.g:412:25: ( ^( PIVOT_ALIAS ( constant )+ ) )?
            	if ( stream_constant.hasNext() ) {
            		// OracleDML.g:412:25: ^( PIVOT_ALIAS ( constant )+ )
            		{
            		ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(PIVOT_ALIAS, "PIVOT_ALIAS"), root_1);
            		if ( !(stream_constant.hasNext()) ) {
            			ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "constant empty" );
            			goto ruleunpivot_in_elementsEx;
            		}
            		while ( stream_constant.hasNext() ) {
            			get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_constant.nextTree());
            		}
            		stream_constant.reset();

            		get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            		}
            	}
            	stream_constant.reset();

            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleunpivot_in_elementsEx; /* Prevent compiler warnings */
    ruleunpivot_in_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end unpivot_in_elements */

/**
 * $ANTLR start hierarchical_query_clause
 * OracleDML.g:415:1: hierarchical_query_clause : ( connect_key by_key ( nocycle_key )? condition ( start_part )? -> ^( HIERARCHICAL ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ( start_part )? ) | start_part connect_key by_key ( nocycle_key )? condition -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) );
 */
OracleDML::hierarchical_query_clause_return
OracleDML::hierarchical_query_clause()
{
    OracleDML::hierarchical_query_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::connect_key_return connect_key254;
    ImplTraits::TreeTypePtr::pointer connect_key254_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key255;
    ImplTraits::TreeTypePtr::pointer by_key255_last = NULL;
    OracleDML_OracleDMLKeys::nocycle_key_return nocycle_key256;
    ImplTraits::TreeTypePtr::pointer nocycle_key256_last = NULL;
    OracleDML::condition_return condition257;
    ImplTraits::TreeTypePtr::pointer condition257_last = NULL;
    OracleDML::start_part_return start_part258;
    ImplTraits::TreeTypePtr::pointer start_part258_last = NULL;
    OracleDML::start_part_return start_part259;
    ImplTraits::TreeTypePtr::pointer start_part259_last = NULL;
    OracleDML_OracleDMLKeys::connect_key_return connect_key260;
    ImplTraits::TreeTypePtr::pointer connect_key260_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key261;
    ImplTraits::TreeTypePtr::pointer by_key261_last = NULL;
    OracleDML_OracleDMLKeys::nocycle_key_return nocycle_key262;
    ImplTraits::TreeTypePtr::pointer nocycle_key262_last = NULL;
    OracleDML::condition_return condition263;
    ImplTraits::TreeTypePtr::pointer condition263_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_connect_key(get_psrstate()->get_treeAdaptor(), "rule connect_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");
    RewriteRuleSubtreeStream<ImplTraits> stream_start_part(get_psrstate()->get_treeAdaptor(), "rule start_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_nocycle_key(get_psrstate()->get_treeAdaptor(), "rule nocycle_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:416:5: ( connect_key by_key ( nocycle_key )? condition ( start_part )? -> ^( HIERARCHICAL ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ( start_part )? ) | start_part connect_key by_key ( nocycle_key )? condition -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) )

            ANTLR_UINT32 alt92;

            alt92=2;

            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_CONNECT:
            	{
            		alt92=1;
            	}
                break;
            case PLSQL_RESERVED_START:
            	{
            		alt92=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 92 );
                ex->set_state( 0 );


                goto rulehierarchical_query_clauseEx;

            }

            switch (alt92)
            {
        	case 1:
        	    // OracleDML.g:416:10: connect_key by_key ( nocycle_key )? condition ( start_part )?
        	    {
        	        this->followPush(FOLLOW_connect_key_in_hierarchical_query_clause3945);
        	        connect_key254=connect_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            connect_key254_last = connect_key254.tree.get();
        	            stream_connect_key.add(connect_key254.tree);
        	        }

        	        this->followPush(FOLLOW_by_key_in_hierarchical_query_clause3947);
        	        by_key255=by_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            by_key255_last = by_key255.tree.get();
        	            stream_by_key.add(by_key255.tree);
        	        }

        	        // OracleDML.g:416:29: ( nocycle_key )?
        	        {
        	            ANTLR_UINT32 alt89=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA89_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "NOCYCLE")))
        	                		    {
        	                		        alt89=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt89)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:416:29: nocycle_key
        	        	    {
        	        	        this->followPush(FOLLOW_nocycle_key_in_hierarchical_query_clause3949);
        	        	        nocycle_key256=nocycle_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulehierarchical_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            nocycle_key256_last = nocycle_key256.tree.get();
        	        	            stream_nocycle_key.add(nocycle_key256.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_condition_in_hierarchical_query_clause3952);
        	        condition257=condition();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            condition257_last = condition257.tree.get();
        	            stream_condition.add(condition257.tree);
        	        }

        	        // OracleDML.g:416:52: ( start_part )?
        	        {
        	            ANTLR_UINT32 alt90=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PLSQL_RESERVED_START:
        	                	{
        	                		alt90=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt90)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:416:52: start_part
        	        	    {
        	        	        this->followPush(FOLLOW_start_part_in_hierarchical_query_clause3954);
        	        	        start_part258=start_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulehierarchical_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            start_part258_last = start_part258.tree.get();
        	        	            stream_start_part.add(start_part258.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: nocycle_key, start_part, connect_key, condition
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 417:9: -> ^( HIERARCHICAL ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ( start_part )? )
        	        {
        	        	// OracleDML.g:417:12: ^( HIERARCHICAL ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ( start_part )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(HIERARCHICAL, "HIERARCHICAL"), root_1);
        	        	// OracleDML.g:417:27: ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_connect_key.nextNode(), root_2);
        	        	// OracleDML.g:417:41: ( nocycle_key )?
        	        	if ( stream_nocycle_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_nocycle_key.nextTree());
        	        	}
        	        	stream_nocycle_key.reset();

        	        	// OracleDML.g:417:54: ^( LOGIC_EXPR condition )
        	        	{
        	        	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_condition.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	// OracleDML.g:417:79: ( start_part )?
        	        	if ( stream_start_part.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_start_part.nextTree());
        	        	}
        	        	stream_start_part.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:418:10: start_part connect_key by_key ( nocycle_key )? condition
        	    {
        	        this->followPush(FOLLOW_start_part_in_hierarchical_query_clause3996);
        	        start_part259=start_part();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            start_part259_last = start_part259.tree.get();
        	            stream_start_part.add(start_part259.tree);
        	        }

        	        this->followPush(FOLLOW_connect_key_in_hierarchical_query_clause3998);
        	        connect_key260=connect_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            connect_key260_last = connect_key260.tree.get();
        	            stream_connect_key.add(connect_key260.tree);
        	        }

        	        this->followPush(FOLLOW_by_key_in_hierarchical_query_clause4000);
        	        by_key261=by_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            by_key261_last = by_key261.tree.get();
        	            stream_by_key.add(by_key261.tree);
        	        }

        	        // OracleDML.g:418:40: ( nocycle_key )?
        	        {
        	            ANTLR_UINT32 alt91=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA91_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "NOCYCLE")))
        	                		    {
        	                		        alt91=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt91)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:418:40: nocycle_key
        	        	    {
        	        	        this->followPush(FOLLOW_nocycle_key_in_hierarchical_query_clause4002);
        	        	        nocycle_key262=nocycle_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulehierarchical_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            nocycle_key262_last = nocycle_key262.tree.get();
        	        	            stream_nocycle_key.add(nocycle_key262.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_condition_in_hierarchical_query_clause4005);
        	        condition263=condition();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            condition263_last = condition263.tree.get();
        	            stream_condition.add(condition263.tree);
        	        }

        	        // AST REWRITE
        	        // elements: nocycle_key, start_part, condition, connect_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 419:9: -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
        	        {
        	        	// OracleDML.g:419:12: ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(HIERARCHICAL, "HIERARCHICAL"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_start_part.nextTree());
        	        	// OracleDML.g:419:39: ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_connect_key.nextNode(), root_2);
        	        	// OracleDML.g:419:53: ( nocycle_key )?
        	        	if ( stream_nocycle_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_nocycle_key.nextTree());
        	        	}
        	        	stream_nocycle_key.reset();

        	        	// OracleDML.g:419:66: ^( LOGIC_EXPR condition )
        	        	{
        	        	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_condition.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulehierarchical_query_clauseEx; /* Prevent compiler warnings */
    rulehierarchical_query_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end hierarchical_query_clause */

/**
 * $ANTLR start start_part
 * OracleDML.g:422:1: start_part : start_key with_key condition -> ^( start_key ^( LOGIC_EXPR condition ) ) ;
 */
OracleDML::start_part_return
OracleDML::start_part()
{
    OracleDML::start_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::start_key_return start_key264;
    ImplTraits::TreeTypePtr::pointer start_key264_last = NULL;
    OracleDML_OracleDMLKeys::with_key_return with_key265;
    ImplTraits::TreeTypePtr::pointer with_key265_last = NULL;
    OracleDML::condition_return condition266;
    ImplTraits::TreeTypePtr::pointer condition266_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_start_key(get_psrstate()->get_treeAdaptor(), "rule start_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_with_key(get_psrstate()->get_treeAdaptor(), "rule with_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:423:5: ( start_key with_key condition -> ^( start_key ^( LOGIC_EXPR condition ) ) )
        // OracleDML.g:423:10: start_key with_key condition
        {
            this->followPush(FOLLOW_start_key_in_start_part4055);
            start_key264=start_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestart_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                start_key264_last = start_key264.tree.get();
                stream_start_key.add(start_key264.tree);
            }

            this->followPush(FOLLOW_with_key_in_start_part4057);
            with_key265=with_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestart_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                with_key265_last = with_key265.tree.get();
                stream_with_key.add(with_key265.tree);
            }

            this->followPush(FOLLOW_condition_in_start_part4059);
            condition266=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestart_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition266_last = condition266.tree.get();
                stream_condition.add(condition266.tree);
            }

            // AST REWRITE
            // elements: condition, start_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 424:9: -> ^( start_key ^( LOGIC_EXPR condition ) )
            {
            	// OracleDML.g:424:12: ^( start_key ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_start_key.nextNode(), root_1);
            	// OracleDML.g:424:24: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestart_partEx; /* Prevent compiler warnings */
    rulestart_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end start_part */

/**
 * $ANTLR start group_by_clause
 * OracleDML.g:427:1: group_by_clause : ( ( group_key )=> group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) ( having_clause )? -> ^( GROUP_BY_CLAUSE[$group_key.start] ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) ( having_clause )? ) | ( having_key )=> having_clause ( group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) )? -> ^( GROUP_BY_CLAUSE[$having_clause.start] having_clause ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )? ) );
 */
OracleDML::group_by_clause_return
OracleDML::group_by_clause()
{
    OracleDML::group_by_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN269 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN270 = NULL;
    ImplTraits::CommonTokenType const* COMMA272 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN278 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN279 = NULL;
    ImplTraits::CommonTokenType const* COMMA281 = NULL;
    OracleDML_OracleDMLKeys::group_key_return group_key267;
    ImplTraits::TreeTypePtr::pointer group_key267_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key268;
    ImplTraits::TreeTypePtr::pointer by_key268_last = NULL;
    OracleDML::group_by_elements_return group_by_elements271;
    ImplTraits::TreeTypePtr::pointer group_by_elements271_last = NULL;
    OracleDML::group_by_elements_return group_by_elements273;
    ImplTraits::TreeTypePtr::pointer group_by_elements273_last = NULL;
    OracleDML::having_clause_return having_clause274;
    ImplTraits::TreeTypePtr::pointer having_clause274_last = NULL;
    OracleDML::having_clause_return having_clause275;
    ImplTraits::TreeTypePtr::pointer having_clause275_last = NULL;
    OracleDML_OracleDMLKeys::group_key_return group_key276;
    ImplTraits::TreeTypePtr::pointer group_key276_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key277;
    ImplTraits::TreeTypePtr::pointer by_key277_last = NULL;
    OracleDML::group_by_elements_return group_by_elements280;
    ImplTraits::TreeTypePtr::pointer group_by_elements280_last = NULL;
    OracleDML::group_by_elements_return group_by_elements282;
    ImplTraits::TreeTypePtr::pointer group_by_elements282_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN269_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN270_tree;
    ImplTraits::TreeTypePtr COMMA272_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN278_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN279_tree;
    ImplTraits::TreeTypePtr COMMA281_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_having_clause(get_psrstate()->get_treeAdaptor(), "rule having_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_group_key(get_psrstate()->get_treeAdaptor(), "rule group_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_group_by_elements(get_psrstate()->get_treeAdaptor(), "rule group_by_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:428:5: ( ( group_key )=> group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) ( having_clause )? -> ^( GROUP_BY_CLAUSE[$group_key.start] ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) ( having_clause )? ) | ( having_key )=> having_clause ( group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) )? -> ^( GROUP_BY_CLAUSE[$having_clause.start] having_clause ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )? ) )

            ANTLR_UINT32 alt99;

            alt99=2;

            {
                ANTLR_UINT32 LA99_0 = this->LA(1);
                if ( (LA99_0 == SQL92_RESERVED_GROUP) && (this->msynpred( antlr3::ClassForwarder<synpred16_OracleDML>() )))
                {
                    alt99=1;
                }
                else if ( (LA99_0 == SQL92_RESERVED_HAVING) && (this->msynpred( antlr3::ClassForwarder<synpred18_OracleDML>() )))
                {
                    alt99=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 99 );
                    ex->set_state( 0 );


                    goto rulegroup_by_clauseEx;

                }
            }
            switch (alt99)
            {
        	case 1:
        	    // OracleDML.g:428:9: ( group_key )=> group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) ( having_clause )?
        	    {
        	        this->followPush(FOLLOW_group_key_in_group_by_clause4104);
        	        group_key267=group_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            group_key267_last = group_key267.tree.get();
        	            stream_group_key.add(group_key267.tree);
        	        }

        	        this->followPush(FOLLOW_by_key_in_group_by_clause4106);
        	        by_key268=by_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            by_key268_last = by_key268.tree.get();
        	            stream_by_key.add(by_key268.tree);
        	        }

        	        // OracleDML.g:429:4: ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )
        	        {
        	            ANTLR_UINT32 alt94=2;
        	            switch ( this->LA(1) )
        	            {
        	            case LEFT_PAREN:
        	            	{
        	            		switch ( this->LA(2) )
        	            		{
        	            		case RIGHT_PAREN:
        	            			{
        	            				alt94=1;
        	            			}
        	            		    break;
        	            		case APPROXIMATE_NUM_LIT:
        	            		case BINDVAR:
        	            		case CHAR_STRING:
        	            		case CHAR_STRING_PERL:
        	            		case COLON:
        	            		case DELIMITED_ID:
        	            		case EXACT_NUM_LIT:
        	            		case INTRODUCER:
        	            		case LEFT_PAREN:
        	            		case MINUS_SIGN:
        	            		case NATIONAL_CHAR_STRING_LIT:
        	            		case PLSQL_NON_RESERVED_CAST:
        	            		case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	            		case PLUS_SIGN:
        	            		case REGULAR_ID:
        	            		case SQL92_RESERVED_ALL:
        	            		case SQL92_RESERVED_ANY:
        	            		case SQL92_RESERVED_CASE:
        	            		case SQL92_RESERVED_CURSOR:
        	            		case SQL92_RESERVED_DATE:
        	            		case SQL92_RESERVED_DEFAULT:
        	            		case SQL92_RESERVED_DISTINCT:
        	            		case SQL92_RESERVED_EXISTS:
        	            		case SQL92_RESERVED_FALSE:
        	            		case SQL92_RESERVED_NOT:
        	            		case SQL92_RESERVED_NULL:
        	            		case SQL92_RESERVED_PRIOR:
        	            		case SQL92_RESERVED_SELECT:
        	            		case SQL92_RESERVED_TRUE:
        	            		case UNSIGNED_INTEGER:
        	            			{
        	            				alt94=2;
        	            			}
        	            		    break;

        	            		default:
        	            		    if (this->get_backtracking()>0)
        	            		    {
        	            		        this->set_failedflag( true );
        	            		        return retval;
        	            		    }

        	            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		    ex->set_decisionNum( 94 );
        	            		    ex->set_state( 1 );


        	            		    goto rulegroup_by_clauseEx;

        	            		}

        	            	}
        	                break;
        	            case APPROXIMATE_NUM_LIT:
        	            case BINDVAR:
        	            case CHAR_STRING:
        	            case CHAR_STRING_PERL:
        	            case COLON:
        	            case DELIMITED_ID:
        	            case EXACT_NUM_LIT:
        	            case INTRODUCER:
        	            case MINUS_SIGN:
        	            case NATIONAL_CHAR_STRING_LIT:
        	            case PLSQL_NON_RESERVED_CAST:
        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	            case PLUS_SIGN:
        	            case REGULAR_ID:
        	            case SQL92_RESERVED_ALL:
        	            case SQL92_RESERVED_ANY:
        	            case SQL92_RESERVED_CASE:
        	            case SQL92_RESERVED_CURSOR:
        	            case SQL92_RESERVED_DATE:
        	            case SQL92_RESERVED_DEFAULT:
        	            case SQL92_RESERVED_DISTINCT:
        	            case SQL92_RESERVED_EXISTS:
        	            case SQL92_RESERVED_FALSE:
        	            case SQL92_RESERVED_NOT:
        	            case SQL92_RESERVED_NULL:
        	            case SQL92_RESERVED_PRIOR:
        	            case SQL92_RESERVED_TRUE:
        	            case UNSIGNED_INTEGER:
        	            	{
        	            		alt94=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 94 );
        	                ex->set_state( 0 );


        	                goto rulegroup_by_clauseEx;

        	            }

        	            switch (alt94)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:429:5: LEFT_PAREN RIGHT_PAREN
        	        	    {
        	        	        LEFT_PAREN269 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_group_by_clause4112);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN269);


        	        	        RIGHT_PAREN270 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_group_by_clause4114);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN270);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:430:6: group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
        	        	    {
        	        	        this->followPush(FOLLOW_group_by_elements_in_group_by_clause4121);
        	        	        group_by_elements271=group_by_elements();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            group_by_elements271_last = group_by_elements271.tree.get();
        	        	            stream_group_by_elements.add(group_by_elements271.tree);
        	        	        }

        	        	        // OracleDML.g:430:24: ( ( COMMA group_by_elements )=> COMMA group_by_elements )*

        	        	        for (;;)
        	        	        {
        	        	            ANTLR_UINT32 alt93=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case COMMA:
        	        	            	{
        	        	            		{
        	        	            		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	            		    */
        	        	            		    ANTLR_UINT32 LA93_2 = this->LA(2);
        	        	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred17_OracleDML>() )))
        	        	            		    {
        	        	            		        alt93=1;
        	        	            		    }

        	        	            		}
        	        	            	}
        	        	                break;

        	        	            }

        	        	            switch (alt93)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:430:25: ( COMMA group_by_elements )=> COMMA group_by_elements
        	        	        	    {
        	        	        	        COMMA272 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_group_by_clause4131);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA272);


        	        	        	        this->followPush(FOLLOW_group_by_elements_in_group_by_clause4133);
        	        	        	        group_by_elements273=group_by_elements();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) 
        	        	        	        {
        	        	        	            group_by_elements273_last = group_by_elements273.tree.get();
        	        	        	            stream_group_by_elements.add(group_by_elements273.tree);
        	        	        	        }

        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop93;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop93: ; /* Jump out to here if this rule does not match */


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:432:3: ( having_clause )?
        	        {
        	            ANTLR_UINT32 alt95=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_HAVING:
        	                	{
        	                		alt95=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt95)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:432:3: having_clause
        	        	    {
        	        	        this->followPush(FOLLOW_having_clause_in_group_by_clause4144);
        	        	        having_clause274=having_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            having_clause274_last = having_clause274.tree.get();
        	        	            stream_having_clause.add(having_clause274.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: group_by_elements, having_clause, group_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 433:3: -> ^( GROUP_BY_CLAUSE[$group_key.start] ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) ( having_clause )? )
        	        {
        	        	// OracleDML.g:433:6: ^( GROUP_BY_CLAUSE[$group_key.start] ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) ( having_clause )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUP_BY_CLAUSE, (group_key267.start)), root_1);
        	        	// OracleDML.g:433:42: ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_group_key.nextNode(), root_2);
        	        	// OracleDML.g:433:54: ( ^( GROUP_BY_ELEMENT group_by_elements ) )*
        	        	while ( stream_group_by_elements.hasNext() ) {
        	        		// OracleDML.g:433:54: ^( GROUP_BY_ELEMENT group_by_elements )
        	        		{
        	        		ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        		root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUP_BY_ELEMENT, "GROUP_BY_ELEMENT"), root_3);
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_group_by_elements.nextTree());
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        		}
        	        	}
        	        	stream_group_by_elements.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	// OracleDML.g:433:94: ( having_clause )?
        	        	if ( stream_having_clause.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_having_clause.nextTree());
        	        	}
        	        	stream_having_clause.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:434:9: ( having_key )=> having_clause ( group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) )?
        	    {
        	        this->followPush(FOLLOW_having_clause_in_group_by_clause4184);
        	        having_clause275=having_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            having_clause275_last = having_clause275.tree.get();
        	            stream_having_clause.add(having_clause275.tree);
        	        }

        	        // OracleDML.g:435:3: ( group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) )?
        	        {
        	            ANTLR_UINT32 alt98=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_GROUP:
        	                	{
        	                		alt98=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt98)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:435:4: group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )
        	        	    {
        	        	        this->followPush(FOLLOW_group_key_in_group_by_clause4189);
        	        	        group_key276=group_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            group_key276_last = group_key276.tree.get();
        	        	            stream_group_key.add(group_key276.tree);
        	        	        }

        	        	        this->followPush(FOLLOW_by_key_in_group_by_clause4191);
        	        	        by_key277=by_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            by_key277_last = by_key277.tree.get();
        	        	            stream_by_key.add(by_key277.tree);
        	        	        }

        	        	        // OracleDML.g:436:4: ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )
        	        	        {
        	        	            ANTLR_UINT32 alt97=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case LEFT_PAREN:
        	        	            	{
        	        	            		switch ( this->LA(2) )
        	        	            		{
        	        	            		case RIGHT_PAREN:
        	        	            			{
        	        	            				alt97=1;
        	        	            			}
        	        	            		    break;
        	        	            		case APPROXIMATE_NUM_LIT:
        	        	            		case BINDVAR:
        	        	            		case CHAR_STRING:
        	        	            		case CHAR_STRING_PERL:
        	        	            		case COLON:
        	        	            		case DELIMITED_ID:
        	        	            		case EXACT_NUM_LIT:
        	        	            		case INTRODUCER:
        	        	            		case LEFT_PAREN:
        	        	            		case MINUS_SIGN:
        	        	            		case NATIONAL_CHAR_STRING_LIT:
        	        	            		case PLSQL_NON_RESERVED_CAST:
        	        	            		case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	        	            		case PLUS_SIGN:
        	        	            		case REGULAR_ID:
        	        	            		case SQL92_RESERVED_ALL:
        	        	            		case SQL92_RESERVED_ANY:
        	        	            		case SQL92_RESERVED_CASE:
        	        	            		case SQL92_RESERVED_CURSOR:
        	        	            		case SQL92_RESERVED_DATE:
        	        	            		case SQL92_RESERVED_DEFAULT:
        	        	            		case SQL92_RESERVED_DISTINCT:
        	        	            		case SQL92_RESERVED_EXISTS:
        	        	            		case SQL92_RESERVED_FALSE:
        	        	            		case SQL92_RESERVED_NOT:
        	        	            		case SQL92_RESERVED_NULL:
        	        	            		case SQL92_RESERVED_PRIOR:
        	        	            		case SQL92_RESERVED_SELECT:
        	        	            		case SQL92_RESERVED_TRUE:
        	        	            		case UNSIGNED_INTEGER:
        	        	            			{
        	        	            				alt97=2;
        	        	            			}
        	        	            		    break;

        	        	            		default:
        	        	            		    if (this->get_backtracking()>0)
        	        	            		    {
        	        	            		        this->set_failedflag( true );
        	        	            		        return retval;
        	        	            		    }

        	        	            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	            		    ex->set_decisionNum( 97 );
        	        	            		    ex->set_state( 1 );


        	        	            		    goto rulegroup_by_clauseEx;

        	        	            		}

        	        	            	}
        	        	                break;
        	        	            case APPROXIMATE_NUM_LIT:
        	        	            case BINDVAR:
        	        	            case CHAR_STRING:
        	        	            case CHAR_STRING_PERL:
        	        	            case COLON:
        	        	            case DELIMITED_ID:
        	        	            case EXACT_NUM_LIT:
        	        	            case INTRODUCER:
        	        	            case MINUS_SIGN:
        	        	            case NATIONAL_CHAR_STRING_LIT:
        	        	            case PLSQL_NON_RESERVED_CAST:
        	        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	        	            case PLUS_SIGN:
        	        	            case REGULAR_ID:
        	        	            case SQL92_RESERVED_ALL:
        	        	            case SQL92_RESERVED_ANY:
        	        	            case SQL92_RESERVED_CASE:
        	        	            case SQL92_RESERVED_CURSOR:
        	        	            case SQL92_RESERVED_DATE:
        	        	            case SQL92_RESERVED_DEFAULT:
        	        	            case SQL92_RESERVED_DISTINCT:
        	        	            case SQL92_RESERVED_EXISTS:
        	        	            case SQL92_RESERVED_FALSE:
        	        	            case SQL92_RESERVED_NOT:
        	        	            case SQL92_RESERVED_NULL:
        	        	            case SQL92_RESERVED_PRIOR:
        	        	            case SQL92_RESERVED_TRUE:
        	        	            case UNSIGNED_INTEGER:
        	        	            	{
        	        	            		alt97=2;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                if (this->get_backtracking()>0)
        	        	                {
        	        	                    this->set_failedflag( true );
        	        	                    return retval;
        	        	                }

        	        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                ex->set_decisionNum( 97 );
        	        	                ex->set_state( 0 );


        	        	                goto rulegroup_by_clauseEx;

        	        	            }

        	        	            switch (alt97)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:436:5: LEFT_PAREN RIGHT_PAREN
        	        	        	    {
        	        	        	        LEFT_PAREN278 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_group_by_clause4197);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN278);


        	        	        	        RIGHT_PAREN279 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_group_by_clause4199);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN279);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:437:6: group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_group_by_elements_in_group_by_clause4206);
        	        	        	        group_by_elements280=group_by_elements();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) 
        	        	        	        {
        	        	        	            group_by_elements280_last = group_by_elements280.tree.get();
        	        	        	            stream_group_by_elements.add(group_by_elements280.tree);
        	        	        	        }

        	        	        	        // OracleDML.g:437:24: ( ( COMMA group_by_elements )=> COMMA group_by_elements )*

        	        	        	        for (;;)
        	        	        	        {
        	        	        	            ANTLR_UINT32 alt96=2;
        	        	        	            switch ( this->LA(1) )
        	        	        	            {
        	        	        	            case COMMA:
        	        	        	            	{
        	        	        	            		{
        	        	        	            		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	        	            		    */
        	        	        	            		    ANTLR_UINT32 LA96_2 = this->LA(2);
        	        	        	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_OracleDML>() )))
        	        	        	            		    {
        	        	        	            		        alt96=1;
        	        	        	            		    }

        	        	        	            		}
        	        	        	            	}
        	        	        	                break;

        	        	        	            }

        	        	        	            switch (alt96)
        	        	        	            {
        	        	        	        	case 1:
        	        	        	        	    // OracleDML.g:437:25: ( COMMA group_by_elements )=> COMMA group_by_elements
        	        	        	        	    {
        	        	        	        	        COMMA281 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_group_by_clause4216);
        	        	        	        	        if  (this->hasException())
        	        	        	        	        {
        	        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        	        }
        	        	        	        	        if (this->hasFailed())
        	        	        	        	        {
        	        	        	        	            return retval;
        	        	        	        	        }
        	        	        	        	         
        	        	        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA281);


        	        	        	        	        this->followPush(FOLLOW_group_by_elements_in_group_by_clause4218);
        	        	        	        	        group_by_elements282=group_by_elements();

        	        	        	        	        this->followPop();
        	        	        	        	        if  (this->hasException())
        	        	        	        	        {
        	        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        	        }
        	        	        	        	        if (this->hasFailed())
        	        	        	        	        {
        	        	        	        	            return retval;
        	        	        	        	        }

        	        	        	        	        if ( this->get_backtracking()==0 ) 
        	        	        	        	        {
        	        	        	        	            group_by_elements282_last = group_by_elements282.tree.get();
        	        	        	        	            stream_group_by_elements.add(group_by_elements282.tree);
        	        	        	        	        }

        	        	        	        	    }
        	        	        	        	    break;

        	        	        	        	default:
        	        	        	        	    goto loop96;	/* break out of the loop */
        	        	        	        	    break;
        	        	        	            }
        	        	        	        }
        	        	        	        loop96: ; /* Jump out to here if this rule does not match */


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: having_clause, group_key, group_by_elements
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 440:3: -> ^( GROUP_BY_CLAUSE[$having_clause.start] having_clause ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )? )
        	        {
        	        	// OracleDML.g:440:6: ^( GROUP_BY_CLAUSE[$having_clause.start] having_clause ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUP_BY_CLAUSE, (having_clause275.start)), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_having_clause.nextTree());
        	        	// OracleDML.g:440:60: ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )?
        	        	if ( stream_group_key.hasNext()||stream_group_by_elements.hasNext() ) {
        	        		// OracleDML.g:440:60: ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* )
        	        		{
        	        		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_group_key.nextNode(), root_2);
        	        		// OracleDML.g:440:72: ( ^( GROUP_BY_ELEMENT group_by_elements ) )*
        	        		while ( stream_group_by_elements.hasNext() ) {
        	        			// OracleDML.g:440:72: ^( GROUP_BY_ELEMENT group_by_elements )
        	        			{
        	        			ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        			root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUP_BY_ELEMENT, "GROUP_BY_ELEMENT"), root_3);
        	        			get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_group_by_elements.nextTree());
        	        			get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        			}
        	        		}
        	        		stream_group_by_elements.reset();

        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        		}
        	        	}
        	        	stream_group_key.reset();
        	        	stream_group_by_elements.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulegroup_by_clauseEx; /* Prevent compiler warnings */
    rulegroup_by_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end group_by_clause */

/**
 * $ANTLR start group_by_elements
 * OracleDML.g:443:1: group_by_elements : ( grouping_sets_clause | rollup_cube_clause | expression -> ^( EXPR expression ) );
 */
OracleDML::group_by_elements_return
OracleDML::group_by_elements()
{
    OracleDML::group_by_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::grouping_sets_clause_return grouping_sets_clause283;
    ImplTraits::TreeTypePtr::pointer grouping_sets_clause283_last = NULL;
    OracleDML::rollup_cube_clause_return rollup_cube_clause284;
    ImplTraits::TreeTypePtr::pointer rollup_cube_clause284_last = NULL;
    OracleDML::expression_return expression285;
    ImplTraits::TreeTypePtr::pointer expression285_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:444:5: ( grouping_sets_clause | rollup_cube_clause | expression -> ^( EXPR expression ) )

            ANTLR_UINT32 alt100;

            alt100=3;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA100_1 = this->LA(2);
            		    if ( ((toUpper(LT(1)->getText()) == "GROUPING")))
            		    {
            		        alt100=1;
            		    }
            		    else if ( ((((toUpper(LT(1)->getText()) == "ROLLUP"))||((toUpper(LT(1)->getText()) == "CUBE")))))
            		    {
            		        alt100=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt100=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 100 );
            		        ex->set_state( 1 );


            		        goto rulegroup_by_elementsEx;

            		    }
            		}
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt100=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 100 );
                ex->set_state( 0 );


                goto rulegroup_by_elementsEx;

            }

            switch (alt100)
            {
        	case 1:
        	    // OracleDML.g:444:10: grouping_sets_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_grouping_sets_clause_in_group_by_elements4273);
        	        grouping_sets_clause283=grouping_sets_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, grouping_sets_clause283.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:445:10: rollup_cube_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_rollup_cube_clause_in_group_by_elements4284);
        	        rollup_cube_clause284=rollup_cube_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, rollup_cube_clause284.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:446:10: expression
        	    {
        	        this->followPush(FOLLOW_expression_in_group_by_elements4296);
        	        expression285=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression285_last = expression285.tree.get();
        	            stream_expression.add(expression285.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 446:21: -> ^( EXPR expression )
        	        {
        	        	// OracleDML.g:446:24: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulegroup_by_elementsEx; /* Prevent compiler warnings */
    rulegroup_by_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end group_by_elements */

/**
 * $ANTLR start rollup_cube_clause
 * OracleDML.g:449:1: rollup_cube_clause : ( rollup_key ^| cube_key ^) LEFT_PAREN grouping_sets_elements ( COMMA ! grouping_sets_elements )* RIGHT_PAREN ;
 */
OracleDML::rollup_cube_clause_return
OracleDML::rollup_cube_clause()
{
    OracleDML::rollup_cube_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN288 = NULL;
    ImplTraits::CommonTokenType const* COMMA290 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN292 = NULL;
    OracleDML_OracleDMLKeys::rollup_key_return rollup_key286;
    ImplTraits::TreeTypePtr::pointer rollup_key286_last = NULL;
    OracleDML_OracleDMLKeys::cube_key_return cube_key287;
    ImplTraits::TreeTypePtr::pointer cube_key287_last = NULL;
    OracleDML::grouping_sets_elements_return grouping_sets_elements289;
    ImplTraits::TreeTypePtr::pointer grouping_sets_elements289_last = NULL;
    OracleDML::grouping_sets_elements_return grouping_sets_elements291;
    ImplTraits::TreeTypePtr::pointer grouping_sets_elements291_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN288_tree;
    ImplTraits::TreeTypePtr COMMA290_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN292_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:450:5: ( ( rollup_key ^| cube_key ^) LEFT_PAREN grouping_sets_elements ( COMMA ! grouping_sets_elements )* RIGHT_PAREN )
        // OracleDML.g:450:10: ( rollup_key ^| cube_key ^) LEFT_PAREN grouping_sets_elements ( COMMA ! grouping_sets_elements )* RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:450:10: ( rollup_key ^| cube_key ^)
            {
                ANTLR_UINT32 alt101=2;
                {
                    ANTLR_UINT32 LA101_0 = this->LA(1);
                    if ( (LA101_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "ROLLUP"))||((toUpper(LT(1)->getText()) == "CUBE")))))
                    {
                        {
                            ANTLR_UINT32 LA101_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "ROLLUP")))
                            {
                                alt101=1;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "CUBE")))
                            {
                                alt101=2;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 101 );
                                ex->set_state( 1 );


                                goto rulerollup_cube_clauseEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 101 );
                        ex->set_state( 0 );


                        goto rulerollup_cube_clauseEx;

                    }
                }
                switch (alt101)
                {
            	case 1:
            	    // OracleDML.g:450:11: rollup_key ^
            	    {
            	        this->followPush(FOLLOW_rollup_key_in_rollup_cube_clause4325);
            	        rollup_key286=rollup_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerollup_cube_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(rollup_key286.tree, root_0);

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:450:23: cube_key ^
            	    {
            	        this->followPush(FOLLOW_cube_key_in_rollup_cube_clause4328);
            	        cube_key287=cube_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerollup_cube_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(cube_key287.tree, root_0);

            	    }
            	    break;

                }
            }

            LEFT_PAREN288 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_rollup_cube_clause4332);
            if  (this->hasException())
            {
                goto rulerollup_cube_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN288_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN288));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN288_tree);
            }


            this->followPush(FOLLOW_grouping_sets_elements_in_rollup_cube_clause4334);
            grouping_sets_elements289=grouping_sets_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerollup_cube_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, grouping_sets_elements289.tree);


            // OracleDML.g:450:68: ( COMMA ! grouping_sets_elements )*

            for (;;)
            {
                ANTLR_UINT32 alt102=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt102=1;
                	}
                    break;

                }

                switch (alt102)
                {
            	case 1:
            	    // OracleDML.g:450:69: COMMA ! grouping_sets_elements
            	    {
            	        COMMA290 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_rollup_cube_clause4337);
            	        if  (this->hasException())
            	        {
            	            goto rulerollup_cube_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_grouping_sets_elements_in_rollup_cube_clause4340);
            	        grouping_sets_elements291=grouping_sets_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerollup_cube_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, grouping_sets_elements291.tree);


            	    }
            	    break;

            	default:
            	    goto loop102;	/* break out of the loop */
            	    break;
                }
            }
            loop102: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN292 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_rollup_cube_clause4344);
            if  (this->hasException())
            {
                goto rulerollup_cube_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN292_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN292));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN292_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulerollup_cube_clauseEx; /* Prevent compiler warnings */
    rulerollup_cube_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end rollup_cube_clause */

/**
 * $ANTLR start grouping_sets_clause
 * OracleDML.g:453:1: grouping_sets_clause : grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ ) ;
 */
OracleDML::grouping_sets_clause_return
OracleDML::grouping_sets_clause()
{
    OracleDML::grouping_sets_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN295 = NULL;
    ImplTraits::CommonTokenType const* COMMA297 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN299 = NULL;
    OracleDML_OracleDMLKeys::grouping_key_return grouping_key293;
    ImplTraits::TreeTypePtr::pointer grouping_key293_last = NULL;
    OracleDML_OracleDMLKeys::sets_key_return sets_key294;
    ImplTraits::TreeTypePtr::pointer sets_key294_last = NULL;
    OracleDML::grouping_sets_elements_return grouping_sets_elements296;
    ImplTraits::TreeTypePtr::pointer grouping_sets_elements296_last = NULL;
    OracleDML::grouping_sets_elements_return grouping_sets_elements298;
    ImplTraits::TreeTypePtr::pointer grouping_sets_elements298_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN295_tree;
    ImplTraits::TreeTypePtr COMMA297_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN299_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_grouping_key(get_psrstate()->get_treeAdaptor(), "rule grouping_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_sets_key(get_psrstate()->get_treeAdaptor(), "rule sets_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_grouping_sets_elements(get_psrstate()->get_treeAdaptor(), "rule grouping_sets_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:454:5: ( grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ ) )
        // OracleDML.g:454:10: grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN
        {
            this->followPush(FOLLOW_grouping_key_in_grouping_sets_clause4365);
            grouping_key293=grouping_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                grouping_key293_last = grouping_key293.tree.get();
                stream_grouping_key.add(grouping_key293.tree);
            }

            this->followPush(FOLLOW_sets_key_in_grouping_sets_clause4367);
            sets_key294=sets_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                sets_key294_last = sets_key294.tree.get();
                stream_sets_key.add(sets_key294.tree);
            }

            LEFT_PAREN295 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_grouping_sets_clause4378);
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN295);


            this->followPush(FOLLOW_grouping_sets_elements_in_grouping_sets_clause4380);
            grouping_sets_elements296=grouping_sets_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                grouping_sets_elements296_last = grouping_sets_elements296.tree.get();
                stream_grouping_sets_elements.add(grouping_sets_elements296.tree);
            }

            // OracleDML.g:455:43: ( COMMA grouping_sets_elements )*

            for (;;)
            {
                ANTLR_UINT32 alt103=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt103=1;
                	}
                    break;

                }

                switch (alt103)
                {
            	case 1:
            	    // OracleDML.g:455:44: COMMA grouping_sets_elements
            	    {
            	        COMMA297 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_grouping_sets_clause4383);
            	        if  (this->hasException())
            	        {
            	            goto rulegrouping_sets_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA297);


            	        this->followPush(FOLLOW_grouping_sets_elements_in_grouping_sets_clause4385);
            	        grouping_sets_elements298=grouping_sets_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegrouping_sets_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            grouping_sets_elements298_last = grouping_sets_elements298.tree.get();
            	            stream_grouping_sets_elements.add(grouping_sets_elements298.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop103;	/* break out of the loop */
            	    break;
                }
            }
            loop103: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN299 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4389);
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN299);


            // AST REWRITE
            // elements: grouping_sets_elements, grouping_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 456:9: -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ )
            {
            	// OracleDML.g:456:12: ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_grouping_key.nextNode(), root_1);
            	if ( !(stream_grouping_sets_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "grouping_sets_elements empty" );
            		goto rulegrouping_sets_clauseEx;
            	}
            	while ( stream_grouping_sets_elements.hasNext() ) {
            		// OracleDML.g:456:27: ^( GROUPIN_SET grouping_sets_elements )
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUPIN_SET, "GROUPIN_SET"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_grouping_sets_elements.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_grouping_sets_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulegrouping_sets_clauseEx; /* Prevent compiler warnings */
    rulegrouping_sets_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end grouping_sets_clause */

/**
 * $ANTLR start grouping_sets_elements
 * OracleDML.g:459:1: grouping_sets_elements : ( ( rollup_key | cube_key )=> rollup_cube_clause | ( LEFT_PAREN )=> expression_list | expression -> ^( EXPR expression ) );
 */
OracleDML::grouping_sets_elements_return
OracleDML::grouping_sets_elements()
{
    OracleDML::grouping_sets_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::rollup_cube_clause_return rollup_cube_clause300;
    ImplTraits::TreeTypePtr::pointer rollup_cube_clause300_last = NULL;
    OracleDML::expression_list_return expression_list301;
    ImplTraits::TreeTypePtr::pointer expression_list301_last = NULL;
    OracleDML::expression_return expression302;
    ImplTraits::TreeTypePtr::pointer expression302_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:460:5: ( ( rollup_key | cube_key )=> rollup_cube_clause | ( LEFT_PAREN )=> expression_list | expression -> ^( EXPR expression ) )

            ANTLR_UINT32 alt104;

            alt104=3;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA104_1 = this->LA(2);
            		    if ( (( ((((toUpper(LT(1)->getText()) == "ROLLUP"))||((toUpper(LT(1)->getText()) == "CUBE")))) && (this->msynpred( antlr3::ClassForwarder<synpred20_OracleDML>() )) )))
            		    {
            		        alt104=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt104=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 104 );
            		        ex->set_state( 1 );


            		        goto rulegrouping_sets_elementsEx;

            		    }
            		}
            	}
                break;
            case LEFT_PAREN:
            	{
            		{
            		    ANTLR_UINT32 LA104_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred21_OracleDML>() )))
            		    {
            		        alt104=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt104=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 104 );
            		        ex->set_state( 2 );


            		        goto rulegrouping_sets_elementsEx;

            		    }
            		}
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt104=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 104 );
                ex->set_state( 0 );


                goto rulegrouping_sets_elementsEx;

            }

            switch (alt104)
            {
        	case 1:
        	    // OracleDML.g:460:10: ( rollup_key | cube_key )=> rollup_cube_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_rollup_cube_clause_in_grouping_sets_elements4437);
        	        rollup_cube_clause300=rollup_cube_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegrouping_sets_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, rollup_cube_clause300.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:461:10: ( LEFT_PAREN )=> expression_list
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_expression_list_in_grouping_sets_elements4453);
        	        expression_list301=expression_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegrouping_sets_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_list301.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:462:10: expression
        	    {
        	        this->followPush(FOLLOW_expression_in_grouping_sets_elements4464);
        	        expression302=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegrouping_sets_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression302_last = expression302.tree.get();
        	            stream_expression.add(expression302.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 462:21: -> ^( EXPR expression )
        	        {
        	        	// OracleDML.g:462:24: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulegrouping_sets_elementsEx; /* Prevent compiler warnings */
    rulegrouping_sets_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end grouping_sets_elements */

/**
 * $ANTLR start having_clause
 * OracleDML.g:465:1: having_clause : having_key condition -> ^( having_key ^( LOGIC_EXPR condition ) ) ;
 */
OracleDML::having_clause_return
OracleDML::having_clause()
{
    OracleDML::having_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::having_key_return having_key303;
    ImplTraits::TreeTypePtr::pointer having_key303_last = NULL;
    OracleDML::condition_return condition304;
    ImplTraits::TreeTypePtr::pointer condition304_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_having_key(get_psrstate()->get_treeAdaptor(), "rule having_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:466:5: ( having_key condition -> ^( having_key ^( LOGIC_EXPR condition ) ) )
        // OracleDML.g:466:10: having_key condition
        {
            this->followPush(FOLLOW_having_key_in_having_clause4492);
            having_key303=having_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulehaving_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                having_key303_last = having_key303.tree.get();
                stream_having_key.add(having_key303.tree);
            }

            this->followPush(FOLLOW_condition_in_having_clause4494);
            condition304=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto rulehaving_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition304_last = condition304.tree.get();
                stream_condition.add(condition304.tree);
            }

            // AST REWRITE
            // elements: having_key, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 467:9: -> ^( having_key ^( LOGIC_EXPR condition ) )
            {
            	// OracleDML.g:467:12: ^( having_key ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_having_key.nextNode(), root_1);
            	// OracleDML.g:467:25: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulehaving_clauseEx; /* Prevent compiler warnings */
    rulehaving_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end having_clause */

/**
 * $ANTLR start model_clause
 * OracleDML.g:470:1: model_clause : model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model -> ^( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model ) ;
 */
OracleDML::model_clause_return
OracleDML::model_clause()
{
    OracleDML::model_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::model_key_return model_key305;
    ImplTraits::TreeTypePtr::pointer model_key305_last = NULL;
    OracleDML::cell_reference_options_return cell_reference_options306;
    ImplTraits::TreeTypePtr::pointer cell_reference_options306_last = NULL;
    OracleDML::return_rows_clause_return return_rows_clause307;
    ImplTraits::TreeTypePtr::pointer return_rows_clause307_last = NULL;
    OracleDML::reference_model_return reference_model308;
    ImplTraits::TreeTypePtr::pointer reference_model308_last = NULL;
    OracleDML::main_model_return main_model309;
    ImplTraits::TreeTypePtr::pointer main_model309_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_return_rows_clause(get_psrstate()->get_treeAdaptor(), "rule return_rows_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_key(get_psrstate()->get_treeAdaptor(), "rule model_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_cell_reference_options(get_psrstate()->get_treeAdaptor(), "rule cell_reference_options");
    RewriteRuleSubtreeStream<ImplTraits> stream_reference_model(get_psrstate()->get_treeAdaptor(), "rule reference_model");
    RewriteRuleSubtreeStream<ImplTraits> stream_main_model(get_psrstate()->get_treeAdaptor(), "rule main_model");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:471:5: ( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model -> ^( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model ) )
        // OracleDML.g:471:10: model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model
        {
            this->followPush(FOLLOW_model_key_in_model_clause4534);
            model_key305=model_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_key305_last = model_key305.tree.get();
                stream_model_key.add(model_key305.tree);
            }

            // OracleDML.g:471:20: ( cell_reference_options )*

            for (;;)
            {
                ANTLR_UINT32 alt105=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		switch ( this->LA(2) )
                		{
                		case REGULAR_ID:
                			{
                				{
                				   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                				    */
                				    ANTLR_UINT32 LA105_3 = this->LA(3);
                				    if ( ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                				    {
                				        alt105=1;
                				    }

                				}
                			}
                		    break;

                		}

                	}
                    break;
                case SQL92_RESERVED_UNIQUE:
                	{
                		alt105=1;
                	}
                    break;

                }

                switch (alt105)
                {
            	case 1:
            	    // OracleDML.g:471:20: cell_reference_options
            	    {
            	        this->followPush(FOLLOW_cell_reference_options_in_model_clause4536);
            	        cell_reference_options306=cell_reference_options();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            cell_reference_options306_last = cell_reference_options306.tree.get();
            	            stream_cell_reference_options.add(cell_reference_options306.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop105;	/* break out of the loop */
            	    break;
                }
            }
            loop105: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:471:44: ( return_rows_clause )?
            {
                ANTLR_UINT32 alt106=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case REGULAR_ID:
                    		    	{
                    		    		switch ( this->LA(3) )
                    		    		{
                    		    		    case REGULAR_ID:
                    		    		    	{
                    		    		    		switch ( this->LA(4) )
                    		    		    		{
                    		    		    		    case REGULAR_ID:
                    		    		    		    	{
                    		    		    		    		alt106=1;
                    		    		    		    	}
                    		    		    		        break;
                    		    		    		}

                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		    case SQL92_RESERVED_ALL:
                    		    	{
                    		    		alt106=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt106)
                {
            	case 1:
            	    // OracleDML.g:471:44: return_rows_clause
            	    {
            	        this->followPush(FOLLOW_return_rows_clause_in_model_clause4539);
            	        return_rows_clause307=return_rows_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            return_rows_clause307_last = return_rows_clause307.tree.get();
            	            stream_return_rows_clause.add(return_rows_clause307.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:471:64: ( reference_model )*

            for (;;)
            {
                ANTLR_UINT32 alt107=2;
                alt107 = cdfa107.predict(this, this->get_rec(), this->get_istream(), cdfa107 );
                if  (this->hasException())
                {
                    goto rulemodel_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                switch (alt107)
                {
            	case 1:
            	    // OracleDML.g:471:64: reference_model
            	    {
            	        this->followPush(FOLLOW_reference_model_in_model_clause4542);
            	        reference_model308=reference_model();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            reference_model308_last = reference_model308.tree.get();
            	            stream_reference_model.add(reference_model308.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop107;	/* break out of the loop */
            	    break;
                }
            }
            loop107: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_main_model_in_model_clause4545);
            main_model309=main_model();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                main_model309_last = main_model309.tree.get();
                stream_main_model.add(main_model309.tree);
            }

            // AST REWRITE
            // elements: reference_model, main_model, return_rows_clause, model_key, cell_reference_options
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 472:9: -> ^( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model )
            {
            	// OracleDML.g:472:12: ^( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_model_key.nextNode(), root_1);
            	// OracleDML.g:472:24: ( cell_reference_options )*
            	while ( stream_cell_reference_options.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cell_reference_options.nextTree());
            	}
            	stream_cell_reference_options.reset();

            	// OracleDML.g:472:48: ( return_rows_clause )?
            	if ( stream_return_rows_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_return_rows_clause.nextTree());
            	}
            	stream_return_rows_clause.reset();

            	// OracleDML.g:472:68: ( reference_model )*
            	while ( stream_reference_model.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_reference_model.nextTree());
            	}
            	stream_reference_model.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_main_model.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_clauseEx; /* Prevent compiler warnings */
    rulemodel_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_clause */

/**
 * $ANTLR start cell_reference_options
 * OracleDML.g:475:1: cell_reference_options : ( ( ignore_key ^| keep_key ^) nav_key | unique_key ^ ( dimension_key | single_key reference_key ) );
 */
OracleDML::cell_reference_options_return
OracleDML::cell_reference_options()
{
    OracleDML::cell_reference_options_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::ignore_key_return ignore_key310;
    ImplTraits::TreeTypePtr::pointer ignore_key310_last = NULL;
    OracleDML_OracleDMLKeys::keep_key_return keep_key311;
    ImplTraits::TreeTypePtr::pointer keep_key311_last = NULL;
    OracleDML_OracleDMLKeys::nav_key_return nav_key312;
    ImplTraits::TreeTypePtr::pointer nav_key312_last = NULL;
    OracleDML_OracleDMLKeys::unique_key_return unique_key313;
    ImplTraits::TreeTypePtr::pointer unique_key313_last = NULL;
    OracleDML_OracleDMLKeys::dimension_key_return dimension_key314;
    ImplTraits::TreeTypePtr::pointer dimension_key314_last = NULL;
    OracleDML_OracleDMLKeys::single_key_return single_key315;
    ImplTraits::TreeTypePtr::pointer single_key315_last = NULL;
    OracleDML_OracleDMLKeys::reference_key_return reference_key316;
    ImplTraits::TreeTypePtr::pointer reference_key316_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:476:5: ( ( ignore_key ^| keep_key ^) nav_key | unique_key ^ ( dimension_key | single_key reference_key ) )

            ANTLR_UINT32 alt110;

            alt110=2;

            {
                ANTLR_UINT32 LA110_0 = this->LA(1);
                if ( (LA110_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                {
                    alt110=1;
                }
                else if ( (LA110_0 == SQL92_RESERVED_UNIQUE))
                {
                    alt110=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 110 );
                    ex->set_state( 0 );


                    goto rulecell_reference_optionsEx;

                }
            }
            switch (alt110)
            {
        	case 1:
        	    // OracleDML.g:476:10: ( ignore_key ^| keep_key ^) nav_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:476:10: ( ignore_key ^| keep_key ^)
        	        {
        	            ANTLR_UINT32 alt108=2;
        	            {
        	                ANTLR_UINT32 LA108_0 = this->LA(1);
        	                if ( (LA108_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA108_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "IGNORE")))
        	                        {
        	                            alt108=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "KEEP")))
        	                        {
        	                            alt108=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 108 );
        	                            ex->set_state( 1 );


        	                            goto rulecell_reference_optionsEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 108 );
        	                    ex->set_state( 0 );


        	                    goto rulecell_reference_optionsEx;

        	                }
        	            }
        	            switch (alt108)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:476:11: ignore_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_ignore_key_in_cell_reference_options4591);
        	        	        ignore_key310=ignore_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(ignore_key310.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:476:23: keep_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_keep_key_in_cell_reference_options4594);
        	        	        keep_key311=keep_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(keep_key311.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_nav_key_in_cell_reference_options4598);
        	        nav_key312=nav_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecell_reference_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nav_key312.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:477:10: unique_key ^ ( dimension_key | single_key reference_key )
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_unique_key_in_cell_reference_options4609);
        	        unique_key313=unique_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecell_reference_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(unique_key313.tree, root_0);

        	        // OracleDML.g:477:22: ( dimension_key | single_key reference_key )
        	        {
        	            ANTLR_UINT32 alt109=2;
        	            {
        	                ANTLR_UINT32 LA109_0 = this->LA(1);
        	                if ( (LA109_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "SINGLE")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA109_1 = this->LA(2);
        	                        if ( (LA109_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "SINGLE")))))
        	                        {
        	                            {
        	                                ANTLR_UINT32 LA109_2 = this->LA(3);
        	                                if ( ((toUpper(LT(1)->getText()) == "DIMENSION")))
        	                                {
        	                                    alt109=1;
        	                                }
        	                                else if ( ((toUpper(LT(1)->getText()) == "SINGLE")))
        	                                {
        	                                    alt109=2;
        	                                }
        	                                else
        	                                {
        	                                    if (this->get_backtracking()>0)
        	                                    {
        	                                        this->set_failedflag( true );
        	                                        return retval;
        	                                    }


        	                                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                                    ex->set_decisionNum( 109 );
        	                                    ex->set_state( 2 );


        	                                    goto rulecell_reference_optionsEx;

        	                                }
        	                            }
        	                        }
        	                        else if ( (LA109_1 == LEFT_PAREN || LA109_1 == SQL92_RESERVED_UNIQUE) && ((toUpper(LT(1)->getText()) == "DIMENSION")))
        	                        {
        	                            alt109=1;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 109 );
        	                            ex->set_state( 1 );


        	                            goto rulecell_reference_optionsEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 109 );
        	                    ex->set_state( 0 );


        	                    goto rulecell_reference_optionsEx;

        	                }
        	            }
        	            switch (alt109)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:477:23: dimension_key
        	        	    {
        	        	        this->followPush(FOLLOW_dimension_key_in_cell_reference_options4613);
        	        	        dimension_key314=dimension_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, dimension_key314.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:477:37: single_key reference_key
        	        	    {
        	        	        this->followPush(FOLLOW_single_key_in_cell_reference_options4615);
        	        	        single_key315=single_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, single_key315.tree);


        	        	        this->followPush(FOLLOW_reference_key_in_cell_reference_options4617);
        	        	        reference_key316=reference_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, reference_key316.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulecell_reference_optionsEx; /* Prevent compiler warnings */
    rulecell_reference_optionsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cell_reference_options */

/**
 * $ANTLR start return_rows_clause
 * OracleDML.g:480:1: return_rows_clause : return_key ^ ( updated_key | all_key ) rows_key !;
 */
OracleDML::return_rows_clause_return
OracleDML::return_rows_clause()
{
    OracleDML::return_rows_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::return_key_return return_key317;
    ImplTraits::TreeTypePtr::pointer return_key317_last = NULL;
    OracleDML_OracleDMLKeys::updated_key_return updated_key318;
    ImplTraits::TreeTypePtr::pointer updated_key318_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key319;
    ImplTraits::TreeTypePtr::pointer all_key319_last = NULL;
    OracleDML_OracleDMLKeys::rows_key_return rows_key320;
    ImplTraits::TreeTypePtr::pointer rows_key320_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:481:5: ( return_key ^ ( updated_key | all_key ) rows_key !)
        // OracleDML.g:481:10: return_key ^ ( updated_key | all_key ) rows_key !
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_return_key_in_return_rows_clause4638);
            return_key317=return_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereturn_rows_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(return_key317.tree, root_0);

            // OracleDML.g:481:22: ( updated_key | all_key )
            {
                ANTLR_UINT32 alt111=2;
                {
                    ANTLR_UINT32 LA111_0 = this->LA(1);
                    if ( (LA111_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "UPDATED")))
                    {
                        alt111=1;
                    }
                    else if ( (LA111_0 == SQL92_RESERVED_ALL))
                    {
                        alt111=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 111 );
                        ex->set_state( 0 );


                        goto rulereturn_rows_clauseEx;

                    }
                }
                switch (alt111)
                {
            	case 1:
            	    // OracleDML.g:481:23: updated_key
            	    {
            	        this->followPush(FOLLOW_updated_key_in_return_rows_clause4642);
            	        updated_key318=updated_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulereturn_rows_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, updated_key318.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:481:35: all_key
            	    {
            	        this->followPush(FOLLOW_all_key_in_return_rows_clause4644);
            	        all_key319=all_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulereturn_rows_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, all_key319.tree);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_rows_key_in_return_rows_clause4647);
            rows_key320=rows_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereturn_rows_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulereturn_rows_clauseEx; /* Prevent compiler warnings */
    rulereturn_rows_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end return_rows_clause */

/**
 * $ANTLR start reference_model
 * OracleDML.g:484:1: reference_model : reference_key ^ reference_model_name on_key ! LEFT_PAREN subquery RIGHT_PAREN model_column_clauses ( cell_reference_options )* ;
 */
OracleDML::reference_model_return
OracleDML::reference_model()
{
    OracleDML::reference_model_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN324 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN326 = NULL;
    OracleDML_OracleDMLKeys::reference_key_return reference_key321;
    ImplTraits::TreeTypePtr::pointer reference_key321_last = NULL;
    OracleDML_OracleDMLCommons::reference_model_name_return reference_model_name322;
    ImplTraits::TreeTypePtr::pointer reference_model_name322_last = NULL;
    OracleDML_OracleDMLKeys::on_key_return on_key323;
    ImplTraits::TreeTypePtr::pointer on_key323_last = NULL;
    OracleDML::subquery_return subquery325;
    ImplTraits::TreeTypePtr::pointer subquery325_last = NULL;
    OracleDML::model_column_clauses_return model_column_clauses327;
    ImplTraits::TreeTypePtr::pointer model_column_clauses327_last = NULL;
    OracleDML::cell_reference_options_return cell_reference_options328;
    ImplTraits::TreeTypePtr::pointer cell_reference_options328_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN324_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN326_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:485:5: ( reference_key ^ reference_model_name on_key ! LEFT_PAREN subquery RIGHT_PAREN model_column_clauses ( cell_reference_options )* )
        // OracleDML.g:485:10: reference_key ^ reference_model_name on_key ! LEFT_PAREN subquery RIGHT_PAREN model_column_clauses ( cell_reference_options )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_reference_key_in_reference_model4668);
            reference_key321=reference_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(reference_key321.tree, root_0);

            this->followPush(FOLLOW_reference_model_name_in_reference_model4671);
            reference_model_name322=reference_model_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, reference_model_name322.tree);


            this->followPush(FOLLOW_on_key_in_reference_model4673);
            on_key323=on_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            LEFT_PAREN324 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_reference_model4689);
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN324_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN324));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN324_tree);
            }


            this->followPush(FOLLOW_subquery_in_reference_model4691);
            subquery325=subquery();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery325.tree);


            RIGHT_PAREN326 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_reference_model4693);
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN326_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN326));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN326_tree);
            }


            this->followPush(FOLLOW_model_column_clauses_in_reference_model4695);
            model_column_clauses327=model_column_clauses();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, model_column_clauses327.tree);


            // OracleDML.g:487:13: ( cell_reference_options )*

            for (;;)
            {
                ANTLR_UINT32 alt112=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    ANTLR_UINT32 LA112_0 = this->LA(1);
                    if ( (LA112_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "IGNORE"))||((toUpper(LT(1)->getText()) == "REFERENCE")))))
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            ANTLR_UINT32 LA112_1 = this->LA(2);
                            if ( (LA112_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "IGNORE"))||((toUpper(LT(1)->getText()) == "REFERENCE")))))
                            {
                                {
                                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                                    */
                                    ANTLR_UINT32 LA112_4 = this->LA(3);
                                    if ( ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                                    {
                                        alt112=1;
                                    }

                                }
                            }

                        }
                    }
                    else if ( (LA112_0 == SQL92_RESERVED_UNIQUE))
                    {
                        alt112=1;
                    }

                }
                switch (alt112)
                {
            	case 1:
            	    // OracleDML.g:487:13: cell_reference_options
            	    {
            	        this->followPush(FOLLOW_cell_reference_options_in_reference_model4710);
            	        cell_reference_options328=cell_reference_options();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulereference_modelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cell_reference_options328.tree);


            	    }
            	    break;

            	default:
            	    goto loop112;	/* break out of the loop */
            	    break;
                }
            }
            loop112: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulereference_modelEx; /* Prevent compiler warnings */
    rulereference_modelEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end reference_model */

/**
 * $ANTLR start main_model
 * OracleDML.g:490:1: main_model : ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause ) ;
 */
OracleDML::main_model_return
OracleDML::main_model()
{
    OracleDML::main_model_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::main_key_return main_key329;
    ImplTraits::TreeTypePtr::pointer main_key329_last = NULL;
    OracleDML_OracleDMLCommons::main_model_name_return main_model_name330;
    ImplTraits::TreeTypePtr::pointer main_model_name330_last = NULL;
    OracleDML::model_column_clauses_return model_column_clauses331;
    ImplTraits::TreeTypePtr::pointer model_column_clauses331_last = NULL;
    OracleDML::cell_reference_options_return cell_reference_options332;
    ImplTraits::TreeTypePtr::pointer cell_reference_options332_last = NULL;
    OracleDML::model_rules_clause_return model_rules_clause333;
    ImplTraits::TreeTypePtr::pointer model_rules_clause333_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_main_key(get_psrstate()->get_treeAdaptor(), "rule main_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_main_model_name(get_psrstate()->get_treeAdaptor(), "rule main_model_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_column_clauses(get_psrstate()->get_treeAdaptor(), "rule model_column_clauses");
    RewriteRuleSubtreeStream<ImplTraits> stream_cell_reference_options(get_psrstate()->get_treeAdaptor(), "rule cell_reference_options");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_rules_clause(get_psrstate()->get_treeAdaptor(), "rule model_rules_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:491:5: ( ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause ) )
        // OracleDML.g:491:10: ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause
        {
            // OracleDML.g:491:10: ( main_key main_model_name )?
            {
                ANTLR_UINT32 alt113=2;
                {
                    ANTLR_UINT32 LA113_0 = this->LA(1);
                    if ( (LA113_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "PARTITION")))))
                    {
                        {
                            ANTLR_UINT32 LA113_1 = this->LA(2);
                            if ( (LA113_1 == DELIMITED_ID || LA113_1 == INTRODUCER || LA113_1 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "MAIN")))
                            {
                                alt113=1;
                            }
                        }
                    }
                }
                switch (alt113)
                {
            	case 1:
            	    // OracleDML.g:491:11: main_key main_model_name
            	    {
            	        this->followPush(FOLLOW_main_key_in_main_model4732);
            	        main_key329=main_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemain_modelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            main_key329_last = main_key329.tree.get();
            	            stream_main_key.add(main_key329.tree);
            	        }

            	        this->followPush(FOLLOW_main_model_name_in_main_model4734);
            	        main_model_name330=main_model_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemain_modelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            main_model_name330_last = main_model_name330.tree.get();
            	            stream_main_model_name.add(main_model_name330.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_model_column_clauses_in_main_model4738);
            model_column_clauses331=model_column_clauses();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemain_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_column_clauses331_last = model_column_clauses331.tree.get();
                stream_model_column_clauses.add(model_column_clauses331.tree);
            }

            // OracleDML.g:491:59: ( cell_reference_options )*

            for (;;)
            {
                ANTLR_UINT32 alt114=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    ANTLR_UINT32 LA114_0 = this->LA(1);
                    if ( (LA114_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "RULES"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            ANTLR_UINT32 LA114_1 = this->LA(2);
                            if ( (LA114_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "RULES"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                            {
                                {
                                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                                    */
                                    ANTLR_UINT32 LA114_5 = this->LA(3);
                                    if ( ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                                    {
                                        alt114=1;
                                    }

                                }
                            }

                        }
                    }
                    else if ( (LA114_0 == SQL92_RESERVED_UNIQUE))
                    {
                        alt114=1;
                    }

                }
                switch (alt114)
                {
            	case 1:
            	    // OracleDML.g:491:59: cell_reference_options
            	    {
            	        this->followPush(FOLLOW_cell_reference_options_in_main_model4740);
            	        cell_reference_options332=cell_reference_options();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemain_modelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            cell_reference_options332_last = cell_reference_options332.tree.get();
            	            stream_cell_reference_options.add(cell_reference_options332.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop114;	/* break out of the loop */
            	    break;
                }
            }
            loop114: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_model_rules_clause_in_main_model4743);
            model_rules_clause333=model_rules_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemain_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_rules_clause333_last = model_rules_clause333.tree.get();
                stream_model_rules_clause.add(model_rules_clause333.tree);
            }

            // AST REWRITE
            // elements: cell_reference_options, main_model_name, model_column_clauses, model_rules_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 492:9: -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause )
            {
            	// OracleDML.g:492:12: ^( MAIN_MODEL ( main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MAIN_MODEL, "MAIN_MODEL"), root_1);
            	// OracleDML.g:492:25: ( main_model_name )?
            	if ( stream_main_model_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_main_model_name.nextTree());
            	}
            	stream_main_model_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_column_clauses.nextTree());
            	// OracleDML.g:492:63: ( cell_reference_options )*
            	while ( stream_cell_reference_options.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cell_reference_options.nextTree());
            	}
            	stream_cell_reference_options.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_rules_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemain_modelEx; /* Prevent compiler warnings */
    rulemain_modelEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end main_model */

/**
 * $ANTLR start model_column_clauses
 * OracleDML.g:495:1: model_column_clauses : ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list -> ^( MODEL_COLUMN ( model_column_partition_part )? ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ) ;
 */
OracleDML::model_column_clauses_return
OracleDML::model_column_clauses()
{
    OracleDML::model_column_clauses_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::model_column_partition_part_return model_column_partition_part334;
    ImplTraits::TreeTypePtr::pointer model_column_partition_part334_last = NULL;
    OracleDML_OracleDMLKeys::dimension_key_return dimension_key335;
    ImplTraits::TreeTypePtr::pointer dimension_key335_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key336;
    ImplTraits::TreeTypePtr::pointer by_key336_last = NULL;
    OracleDML::model_column_list_return model_column_list337;
    ImplTraits::TreeTypePtr::pointer model_column_list337_last = NULL;
    OracleDML_OracleDMLKeys::measures_key_return measures_key338;
    ImplTraits::TreeTypePtr::pointer measures_key338_last = NULL;
    OracleDML::model_column_list_return model_column_list339;
    ImplTraits::TreeTypePtr::pointer model_column_list339_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_model_column_list(get_psrstate()->get_treeAdaptor(), "rule model_column_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_dimension_key(get_psrstate()->get_treeAdaptor(), "rule dimension_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_column_partition_part(get_psrstate()->get_treeAdaptor(), "rule model_column_partition_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_measures_key(get_psrstate()->get_treeAdaptor(), "rule measures_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:496:5: ( ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list -> ^( MODEL_COLUMN ( model_column_partition_part )? ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ) )
        // OracleDML.g:496:10: ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list
        {
            // OracleDML.g:496:10: ( model_column_partition_part )?
            {
                ANTLR_UINT32 alt115=2;
                {
                    ANTLR_UINT32 LA115_0 = this->LA(1);
                    if ( (LA115_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "PARTITION")))))
                    {
                        {
                            ANTLR_UINT32 LA115_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "PARTITION")))
                            {
                                alt115=1;
                            }
                        }
                    }
                }
                switch (alt115)
                {
            	case 1:
            	    // OracleDML.g:496:10: model_column_partition_part
            	    {
            	        this->followPush(FOLLOW_model_column_partition_part_in_model_column_clauses4787);
            	        model_column_partition_part334=model_column_partition_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_column_clausesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_column_partition_part334_last = model_column_partition_part334.tree.get();
            	            stream_model_column_partition_part.add(model_column_partition_part334.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_dimension_key_in_model_column_clauses4798);
            dimension_key335=dimension_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                dimension_key335_last = dimension_key335.tree.get();
                stream_dimension_key.add(dimension_key335.tree);
            }

            this->followPush(FOLLOW_by_key_in_model_column_clauses4800);
            by_key336=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                by_key336_last = by_key336.tree.get();
                stream_by_key.add(by_key336.tree);
            }

            this->followPush(FOLLOW_model_column_list_in_model_column_clauses4802);
            model_column_list337=model_column_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_column_list337_last = model_column_list337.tree.get();
                stream_model_column_list.add(model_column_list337.tree);
            }

            this->followPush(FOLLOW_measures_key_in_model_column_clauses4804);
            measures_key338=measures_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                measures_key338_last = measures_key338.tree.get();
                stream_measures_key.add(measures_key338.tree);
            }

            this->followPush(FOLLOW_model_column_list_in_model_column_clauses4806);
            model_column_list339=model_column_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_column_list339_last = model_column_list339.tree.get();
                stream_model_column_list.add(model_column_list339.tree);
            }

            // AST REWRITE
            // elements: model_column_list, dimension_key, measures_key, model_column_list, model_column_partition_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 498:9: -> ^( MODEL_COLUMN ( model_column_partition_part )? ^( dimension_key model_column_list ) ^( measures_key model_column_list ) )
            {
            	// OracleDML.g:498:12: ^( MODEL_COLUMN ( model_column_partition_part )? ^( dimension_key model_column_list ) ^( measures_key model_column_list ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_COLUMN, "MODEL_COLUMN"), root_1);
            	// OracleDML.g:498:27: ( model_column_partition_part )?
            	if ( stream_model_column_partition_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_column_partition_part.nextTree());
            	}
            	stream_model_column_partition_part.reset();

            	// OracleDML.g:498:56: ^( dimension_key model_column_list )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_dimension_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_model_column_list.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:498:91: ^( measures_key model_column_list )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_measures_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_model_column_list.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_column_clausesEx; /* Prevent compiler warnings */
    rulemodel_column_clausesEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_column_clauses */

/**
 * $ANTLR start model_column_partition_part
 * OracleDML.g:501:1: model_column_partition_part : partition_key ^ by_key ! model_column_list ;
 */
OracleDML::model_column_partition_part_return
OracleDML::model_column_partition_part()
{
    OracleDML::model_column_partition_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::partition_key_return partition_key340;
    ImplTraits::TreeTypePtr::pointer partition_key340_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key341;
    ImplTraits::TreeTypePtr::pointer by_key341_last = NULL;
    OracleDML::model_column_list_return model_column_list342;
    ImplTraits::TreeTypePtr::pointer model_column_list342_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:502:5: ( partition_key ^ by_key ! model_column_list )
        // OracleDML.g:502:10: partition_key ^ by_key ! model_column_list
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_partition_key_in_model_column_partition_part4855);
            partition_key340=partition_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_partition_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(partition_key340.tree, root_0);

            this->followPush(FOLLOW_by_key_in_model_column_partition_part4858);
            by_key341=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_partition_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_model_column_list_in_model_column_partition_part4861);
            model_column_list342=model_column_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_partition_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, model_column_list342.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_column_partition_partEx; /* Prevent compiler warnings */
    rulemodel_column_partition_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_column_partition_part */

/**
 * $ANTLR start model_column_list
 * OracleDML.g:505:1: model_column_list : LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN -> ^( MODEL_COLUMNS ( model_column )+ ) ;
 */
OracleDML::model_column_list_return
OracleDML::model_column_list()
{
    OracleDML::model_column_list_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN343 = NULL;
    ImplTraits::CommonTokenType const* COMMA345 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN347 = NULL;
    OracleDML::model_column_return model_column344;
    ImplTraits::TreeTypePtr::pointer model_column344_last = NULL;
    OracleDML::model_column_return model_column346;
    ImplTraits::TreeTypePtr::pointer model_column346_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN343_tree;
    ImplTraits::TreeTypePtr COMMA345_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN347_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_column(get_psrstate()->get_treeAdaptor(), "rule model_column");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:506:5: ( LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN -> ^( MODEL_COLUMNS ( model_column )+ ) )
        // OracleDML.g:506:10: LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN
        {
            LEFT_PAREN343 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_model_column_list4881);
            if  (this->hasException())
            {
                goto rulemodel_column_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN343);


            this->followPush(FOLLOW_model_column_in_model_column_list4883);
            model_column344=model_column();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_column344_last = model_column344.tree.get();
                stream_model_column.add(model_column344.tree);
            }

            // OracleDML.g:506:34: ( COMMA model_column )*

            for (;;)
            {
                ANTLR_UINT32 alt116=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt116=1;
                	}
                    break;

                }

                switch (alt116)
                {
            	case 1:
            	    // OracleDML.g:506:35: COMMA model_column
            	    {
            	        COMMA345 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_model_column_list4886);
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_column_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA345);


            	        this->followPush(FOLLOW_model_column_in_model_column_list4888);
            	        model_column346=model_column();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_column_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_column346_last = model_column346.tree.get();
            	            stream_model_column.add(model_column346.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop116;	/* break out of the loop */
            	    break;
                }
            }
            loop116: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN347 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_model_column_list4893);
            if  (this->hasException())
            {
                goto rulemodel_column_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN347);


            // AST REWRITE
            // elements: model_column
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 507:9: -> ^( MODEL_COLUMNS ( model_column )+ )
            {
            	// OracleDML.g:507:12: ^( MODEL_COLUMNS ( model_column )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_COLUMNS, "MODEL_COLUMNS"), root_1);
            	if ( !(stream_model_column.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "model_column empty" );
            		goto rulemodel_column_listEx;
            	}
            	while ( stream_model_column.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_column.nextTree());
            	}
            	stream_model_column.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_column_listEx; /* Prevent compiler warnings */
    rulemodel_column_listEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_column_list */

/**
 * $ANTLR start model_column
 * OracleDML.g:510:1: model_column : expression ( column_alias )? -> ^( MODEL_COLUMN ^( EXPR expression ) ( column_alias )? ) ;
 */
OracleDML::model_column_return
OracleDML::model_column()
{
    OracleDML::model_column_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression348;
    ImplTraits::TreeTypePtr::pointer expression348_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias349;
    ImplTraits::TreeTypePtr::pointer column_alias349_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:511:5: ( expression ( column_alias )? -> ^( MODEL_COLUMN ^( EXPR expression ) ( column_alias )? ) )
        // OracleDML.g:511:10: expression ( column_alias )?
        {
            this->followPush(FOLLOW_expression_in_model_column4930);
            expression348=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_columnEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression348_last = expression348.tree.get();
                stream_expression.add(expression348.tree);
            }

            // OracleDML.g:511:21: ( column_alias )?
            {
                ANTLR_UINT32 alt117=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt117=1;
                    	}
                        break;
                }

                switch (alt117)
                {
            	case 1:
            	    // OracleDML.g:511:21: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_model_column4932);
            	        column_alias349=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_columnEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias349_last = column_alias349.tree.get();
            	            stream_column_alias.add(column_alias349.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_alias, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 512:9: -> ^( MODEL_COLUMN ^( EXPR expression ) ( column_alias )? )
            {
            	// OracleDML.g:512:12: ^( MODEL_COLUMN ^( EXPR expression ) ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_COLUMN, "MODEL_COLUMN"), root_1);
            	// OracleDML.g:512:27: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:512:46: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_columnEx; /* Prevent compiler warnings */
    rulemodel_columnEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_column */

/**
 * $ANTLR start model_rules_clause
 * OracleDML.g:515:1: model_rules_clause : ( model_rules_part )? LEFT_PAREN ( model_rules_element ( COMMA model_rules_element )* )? RIGHT_PAREN -> ^( MODEL_RULES ( model_rules_part )? ( model_rules_element )* ) ;
 */
OracleDML::model_rules_clause_return
OracleDML::model_rules_clause()
{
    OracleDML::model_rules_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN351 = NULL;
    ImplTraits::CommonTokenType const* COMMA353 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN355 = NULL;
    OracleDML::model_rules_part_return model_rules_part350;
    ImplTraits::TreeTypePtr::pointer model_rules_part350_last = NULL;
    OracleDML::model_rules_element_return model_rules_element352;
    ImplTraits::TreeTypePtr::pointer model_rules_element352_last = NULL;
    OracleDML::model_rules_element_return model_rules_element354;
    ImplTraits::TreeTypePtr::pointer model_rules_element354_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN351_tree;
    ImplTraits::TreeTypePtr COMMA353_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN355_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_rules_element(get_psrstate()->get_treeAdaptor(), "rule model_rules_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_rules_part(get_psrstate()->get_treeAdaptor(), "rule model_rules_part");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:516:5: ( ( model_rules_part )? LEFT_PAREN ( model_rules_element ( COMMA model_rules_element )* )? RIGHT_PAREN -> ^( MODEL_RULES ( model_rules_part )? ( model_rules_element )* ) )
        // OracleDML.g:516:10: ( model_rules_part )? LEFT_PAREN ( model_rules_element ( COMMA model_rules_element )* )? RIGHT_PAREN
        {
            // OracleDML.g:516:10: ( model_rules_part )?
            {
                ANTLR_UINT32 alt118=2;
                {
                    ANTLR_UINT32 LA118_0 = this->LA(1);
                    if ( (LA118_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "RULES")))
                    {
                        alt118=1;
                    }
                }
                switch (alt118)
                {
            	case 1:
            	    // OracleDML.g:516:10: model_rules_part
            	    {
            	        this->followPush(FOLLOW_model_rules_part_in_model_rules_clause4976);
            	        model_rules_part350=model_rules_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_rules_part350_last = model_rules_part350.tree.get();
            	            stream_model_rules_part.add(model_rules_part350.tree);
            	        }

            	    }
            	    break;

                }
            }

            LEFT_PAREN351 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_model_rules_clause4979);
            if  (this->hasException())
            {
                goto rulemodel_rules_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN351);


            // OracleDML.g:516:39: ( model_rules_element ( COMMA model_rules_element )* )?
            {
                ANTLR_UINT32 alt120=2;
                switch ( this->LA(1) )
                {
                    case APPROXIMATE_NUM_LIT:
                    case BINDVAR:
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case COLON:
                    case DELIMITED_ID:
                    case EXACT_NUM_LIT:
                    case INTRODUCER:
                    case LEFT_PAREN:
                    case MINUS_SIGN:
                    case NATIONAL_CHAR_STRING_LIT:
                    case PLSQL_NON_RESERVED_CAST:
                    case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                    case PLUS_SIGN:
                    case REGULAR_ID:
                    case SQL92_RESERVED_ALL:
                    case SQL92_RESERVED_ANY:
                    case SQL92_RESERVED_CASE:
                    case SQL92_RESERVED_DATE:
                    case SQL92_RESERVED_DEFAULT:
                    case SQL92_RESERVED_DISTINCT:
                    case SQL92_RESERVED_EXISTS:
                    case SQL92_RESERVED_FALSE:
                    case SQL92_RESERVED_NULL:
                    case SQL92_RESERVED_PRIOR:
                    case SQL92_RESERVED_TRUE:
                    case SQL92_RESERVED_UPDATE:
                    case UNSIGNED_INTEGER:
                    	{
                    		alt120=1;
                    	}
                        break;
                }

                switch (alt120)
                {
            	case 1:
            	    // OracleDML.g:516:40: model_rules_element ( COMMA model_rules_element )*
            	    {
            	        this->followPush(FOLLOW_model_rules_element_in_model_rules_clause4982);
            	        model_rules_element352=model_rules_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_rules_element352_last = model_rules_element352.tree.get();
            	            stream_model_rules_element.add(model_rules_element352.tree);
            	        }

            	        // OracleDML.g:516:60: ( COMMA model_rules_element )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt119=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt119=1;
            	            	}
            	                break;

            	            }

            	            switch (alt119)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:516:61: COMMA model_rules_element
            	        	    {
            	        	        COMMA353 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_model_rules_clause4985);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA353);


            	        	        this->followPush(FOLLOW_model_rules_element_in_model_rules_clause4987);
            	        	        model_rules_element354=model_rules_element();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            model_rules_element354_last = model_rules_element354.tree.get();
            	        	            stream_model_rules_element.add(model_rules_element354.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop119;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop119: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            RIGHT_PAREN355 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_model_rules_clause4993);
            if  (this->hasException())
            {
                goto rulemodel_rules_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN355);


            // AST REWRITE
            // elements: model_rules_element, model_rules_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 517:9: -> ^( MODEL_RULES ( model_rules_part )? ( model_rules_element )* )
            {
            	// OracleDML.g:517:12: ^( MODEL_RULES ( model_rules_part )? ( model_rules_element )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_RULES, "MODEL_RULES"), root_1);
            	// OracleDML.g:517:26: ( model_rules_part )?
            	if ( stream_model_rules_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_rules_part.nextTree());
            	}
            	stream_model_rules_part.reset();

            	// OracleDML.g:517:44: ( model_rules_element )*
            	while ( stream_model_rules_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_rules_element.nextTree());
            	}
            	stream_model_rules_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_rules_clauseEx; /* Prevent compiler warnings */
    rulemodel_rules_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_rules_clause */

/**
 * $ANTLR start model_rules_part
 * OracleDML.g:520:1: model_rules_part : rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )? -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? ) ;
 */
OracleDML::model_rules_part_return
OracleDML::model_rules_part()
{
    OracleDML::model_rules_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::rules_key_return rules_key356;
    ImplTraits::TreeTypePtr::pointer rules_key356_last = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key357;
    ImplTraits::TreeTypePtr::pointer update_key357_last = NULL;
    OracleDML_OracleDMLKeys::upsert_key_return upsert_key358;
    ImplTraits::TreeTypePtr::pointer upsert_key358_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key359;
    ImplTraits::TreeTypePtr::pointer all_key359_last = NULL;
    OracleDML_OracleDMLKeys::automatic_key_return automatic_key360;
    ImplTraits::TreeTypePtr::pointer automatic_key360_last = NULL;
    OracleDML_OracleDMLKeys::sequential_key_return sequential_key361;
    ImplTraits::TreeTypePtr::pointer sequential_key361_last = NULL;
    OracleDML_OracleDMLKeys::order_key_return order_key362;
    ImplTraits::TreeTypePtr::pointer order_key362_last = NULL;
    OracleDML::model_iterate_clause_return model_iterate_clause363;
    ImplTraits::TreeTypePtr::pointer model_iterate_clause363_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_sequential_key(get_psrstate()->get_treeAdaptor(), "rule sequential_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_key(get_psrstate()->get_treeAdaptor(), "rule order_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_rules_key(get_psrstate()->get_treeAdaptor(), "rule rules_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_iterate_clause(get_psrstate()->get_treeAdaptor(), "rule model_iterate_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_key(get_psrstate()->get_treeAdaptor(), "rule update_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_automatic_key(get_psrstate()->get_treeAdaptor(), "rule automatic_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_upsert_key(get_psrstate()->get_treeAdaptor(), "rule upsert_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:521:5: ( rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )? -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? ) )
        // OracleDML.g:521:10: rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )?
        {
            this->followPush(FOLLOW_rules_key_in_model_rules_part5033);
            rules_key356=rules_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_rules_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                rules_key356_last = rules_key356.tree.get();
                stream_rules_key.add(rules_key356.tree);
            }

            // OracleDML.g:521:20: ( update_key | upsert_key ( all_key )? )?
            {
                ANTLR_UINT32 alt122=3;
                {
                    ANTLR_UINT32 LA122_0 = this->LA(1);
                    if ( (LA122_0 == SQL92_RESERVED_UPDATE))
                    {
                        alt122=1;
                    }
                    else if ( (LA122_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "ITERATE"))||((toUpper(LT(1)->getText()) == "UPSERT"))||((toUpper(LT(1)->getText()) == "SEQUENTIAL"))||((toUpper(LT(1)->getText()) == "AUTOMATIC")))))
                    {
                        {
                            ANTLR_UINT32 LA122_2 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "UPSERT")))
                            {
                                alt122=2;
                            }
                        }
                    }
                }
                switch (alt122)
                {
            	case 1:
            	    // OracleDML.g:521:21: update_key
            	    {
            	        this->followPush(FOLLOW_update_key_in_model_rules_part5036);
            	        update_key357=update_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            update_key357_last = update_key357.tree.get();
            	            stream_update_key.add(update_key357.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:521:32: upsert_key ( all_key )?
            	    {
            	        this->followPush(FOLLOW_upsert_key_in_model_rules_part5038);
            	        upsert_key358=upsert_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            upsert_key358_last = upsert_key358.tree.get();
            	            stream_upsert_key.add(upsert_key358.tree);
            	        }

            	        // OracleDML.g:521:43: ( all_key )?
            	        {
            	            ANTLR_UINT32 alt121=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_ALL:
            	                	{
            	                		alt121=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt121)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:521:43: all_key
            	        	    {
            	        	        this->followPush(FOLLOW_all_key_in_model_rules_part5040);
            	        	        all_key359=all_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            all_key359_last = all_key359.tree.get();
            	        	            stream_all_key.add(all_key359.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:521:54: ( ( automatic_key | sequential_key ) order_key )?
            {
                ANTLR_UINT32 alt124=2;
                {
                    ANTLR_UINT32 LA124_0 = this->LA(1);
                    if ( (LA124_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "ITERATE"))||((toUpper(LT(1)->getText()) == "SEQUENTIAL"))||((toUpper(LT(1)->getText()) == "AUTOMATIC")))))
                    {
                        {
                            ANTLR_UINT32 LA124_1 = this->LA(2);
                            if ( (LA124_1 == SQL92_RESERVED_ORDER) && ((((toUpper(LT(1)->getText()) == "SEQUENTIAL"))||((toUpper(LT(1)->getText()) == "AUTOMATIC")))))
                            {
                                alt124=1;
                            }
                        }
                    }
                }
                switch (alt124)
                {
            	case 1:
            	    // OracleDML.g:521:55: ( automatic_key | sequential_key ) order_key
            	    {
            	        // OracleDML.g:521:55: ( automatic_key | sequential_key )
            	        {
            	            ANTLR_UINT32 alt123=2;
            	            {
            	                ANTLR_UINT32 LA123_0 = this->LA(1);
            	                if ( (LA123_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SEQUENTIAL"))||((toUpper(LT(1)->getText()) == "AUTOMATIC")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA123_1 = this->LA(2);
            	                        if ( ((toUpper(LT(1)->getText()) == "AUTOMATIC")))
            	                        {
            	                            alt123=1;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "SEQUENTIAL")))
            	                        {
            	                            alt123=2;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return retval;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 123 );
            	                            ex->set_state( 1 );


            	                            goto rulemodel_rules_partEx;

            	                        }
            	                    }
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 123 );
            	                    ex->set_state( 0 );


            	                    goto rulemodel_rules_partEx;

            	                }
            	            }
            	            switch (alt123)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:521:56: automatic_key
            	        	    {
            	        	        this->followPush(FOLLOW_automatic_key_in_model_rules_part5047);
            	        	        automatic_key360=automatic_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            automatic_key360_last = automatic_key360.tree.get();
            	        	            stream_automatic_key.add(automatic_key360.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:521:70: sequential_key
            	        	    {
            	        	        this->followPush(FOLLOW_sequential_key_in_model_rules_part5049);
            	        	        sequential_key361=sequential_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            sequential_key361_last = sequential_key361.tree.get();
            	        	            stream_sequential_key.add(sequential_key361.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_order_key_in_model_rules_part5052);
            	        order_key362=order_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_key362_last = order_key362.tree.get();
            	            stream_order_key.add(order_key362.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:521:98: ( model_iterate_clause )?
            {
                ANTLR_UINT32 alt125=2;
                {
                    ANTLR_UINT32 LA125_0 = this->LA(1);
                    if ( (LA125_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "ITERATE")))
                    {
                        alt125=1;
                    }
                }
                switch (alt125)
                {
            	case 1:
            	    // OracleDML.g:521:98: model_iterate_clause
            	    {
            	        this->followPush(FOLLOW_model_iterate_clause_in_model_rules_part5056);
            	        model_iterate_clause363=model_iterate_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_iterate_clause363_last = model_iterate_clause363.tree.get();
            	            stream_model_iterate_clause.add(model_iterate_clause363.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: automatic_key, all_key, rules_key, update_key, sequential_key, upsert_key, model_iterate_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 522:9: -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? )
            {
            	// OracleDML.g:522:12: ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_rules_key.nextNode(), root_1);
            	// OracleDML.g:522:24: ( update_key )?
            	if ( stream_update_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_key.nextTree());
            	}
            	stream_update_key.reset();

            	// OracleDML.g:522:36: ( upsert_key )?
            	if ( stream_upsert_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_upsert_key.nextTree());
            	}
            	stream_upsert_key.reset();

            	// OracleDML.g:522:48: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:522:57: ( automatic_key )?
            	if ( stream_automatic_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_automatic_key.nextTree());
            	}
            	stream_automatic_key.reset();

            	// OracleDML.g:522:72: ( sequential_key )?
            	if ( stream_sequential_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_sequential_key.nextTree());
            	}
            	stream_sequential_key.reset();

            	// OracleDML.g:522:88: ( model_iterate_clause )?
            	if ( stream_model_iterate_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_iterate_clause.nextTree());
            	}
            	stream_model_iterate_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_rules_partEx; /* Prevent compiler warnings */
    rulemodel_rules_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_rules_part */

/**
 * $ANTLR start model_rules_element
 * OracleDML.g:525:1: model_rules_element : ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? ) ;
 */
OracleDML::model_rules_element_return
OracleDML::model_rules_element()
{
    OracleDML::model_rules_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP369 = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key364;
    ImplTraits::TreeTypePtr::pointer update_key364_last = NULL;
    OracleDML_OracleDMLKeys::upsert_key_return upsert_key365;
    ImplTraits::TreeTypePtr::pointer upsert_key365_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key366;
    ImplTraits::TreeTypePtr::pointer all_key366_last = NULL;
    OracleDML::cell_assignment_return cell_assignment367;
    ImplTraits::TreeTypePtr::pointer cell_assignment367_last = NULL;
    OracleDML::order_by_clause_return order_by_clause368;
    ImplTraits::TreeTypePtr::pointer order_by_clause368_last = NULL;
    OracleDML::expression_return expression370;
    ImplTraits::TreeTypePtr::pointer expression370_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP369_tree;
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_by_clause(get_psrstate()->get_treeAdaptor(), "rule order_by_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_key(get_psrstate()->get_treeAdaptor(), "rule update_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_cell_assignment(get_psrstate()->get_treeAdaptor(), "rule cell_assignment");
    RewriteRuleSubtreeStream<ImplTraits> stream_upsert_key(get_psrstate()->get_treeAdaptor(), "rule upsert_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:526:5: ( ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? ) )
        // OracleDML.g:526:10: ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression
        {
            // OracleDML.g:526:10: ( update_key | upsert_key ( ( all_key )=> all_key )? )?
            {
                ANTLR_UINT32 alt127=3;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_UPDATE:
                    	{
                    		alt127=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA127_2 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "UPSERT")))
                    		    {
                    		        alt127=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt127)
                {
            	case 1:
            	    // OracleDML.g:526:11: update_key
            	    {
            	        this->followPush(FOLLOW_update_key_in_model_rules_element5110);
            	        update_key364=update_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            update_key364_last = update_key364.tree.get();
            	            stream_update_key.add(update_key364.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:526:22: upsert_key ( ( all_key )=> all_key )?
            	    {
            	        this->followPush(FOLLOW_upsert_key_in_model_rules_element5112);
            	        upsert_key365=upsert_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            upsert_key365_last = upsert_key365.tree.get();
            	            stream_upsert_key.add(upsert_key365.tree);
            	        }

            	        // OracleDML.g:526:33: ( ( all_key )=> all_key )?
            	        {
            	            ANTLR_UINT32 alt126=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_ALL:
            	                	{
            	                		{
            	                		    ANTLR_UINT32 LA126_1 = this->LA(2);
            	                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
            	                		    {
            	                		        alt126=1;
            	                		    }
            	                		}
            	                	}
            	                    break;
            	            }

            	            switch (alt126)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:526:34: ( all_key )=> all_key
            	        	    {
            	        	        this->followPush(FOLLOW_all_key_in_model_rules_element5120);
            	        	        all_key366=all_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            all_key366_last = all_key366.tree.get();
            	        	            stream_all_key.add(all_key366.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_cell_assignment_in_model_rules_element5134);
            cell_assignment367=cell_assignment();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_rules_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                cell_assignment367_last = cell_assignment367.tree.get();
                stream_cell_assignment.add(cell_assignment367.tree);
            }

            // OracleDML.g:528:17: ( order_by_clause )?
            {
                ANTLR_UINT32 alt128=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ORDER:
                    	{
                    		alt128=1;
                    	}
                        break;
                }

                switch (alt128)
                {
            	case 1:
            	    // OracleDML.g:528:17: order_by_clause
            	    {
            	        this->followPush(FOLLOW_order_by_clause_in_model_rules_element5152);
            	        order_by_clause368=order_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_by_clause368_last = order_by_clause368.tree.get();
            	            stream_order_by_clause.add(order_by_clause368.tree);
            	        }

            	    }
            	    break;

                }
            }

            EQUALS_OP369 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_model_rules_element5167);
            if  (this->hasException())
            {
                goto rulemodel_rules_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP369);


            this->followPush(FOLLOW_expression_in_model_rules_element5169);
            expression370=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_rules_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression370_last = expression370.tree.get();
                stream_expression.add(expression370.tree);
            }

            // AST REWRITE
            // elements: all_key, order_by_clause, cell_assignment, expression, upsert_key, update_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 530:9: -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? )
            {
            	// OracleDML.g:530:12: ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_RULE, "MODEL_RULE"), root_1);
            	// OracleDML.g:530:25: ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ASSIGN, EQUALS_OP369), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_cell_assignment.nextTree());
            	// OracleDML.g:530:62: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:530:82: ( update_key )?
            	if ( stream_update_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_key.nextTree());
            	}
            	stream_update_key.reset();

            	// OracleDML.g:530:94: ( upsert_key )?
            	if ( stream_upsert_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_upsert_key.nextTree());
            	}
            	stream_upsert_key.reset();

            	// OracleDML.g:530:106: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:530:115: ( order_by_clause )?
            	if ( stream_order_by_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_order_by_clause.nextTree());
            	}
            	stream_order_by_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_rules_elementEx; /* Prevent compiler warnings */
    rulemodel_rules_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_rules_element */

/**
 * $ANTLR start cell_assignment
 * OracleDML.g:533:1: cell_assignment : model_expression ;
 */
OracleDML::cell_assignment_return
OracleDML::cell_assignment()
{
    OracleDML::cell_assignment_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::model_expression_return model_expression371;
    ImplTraits::TreeTypePtr::pointer model_expression371_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:534:5: ( model_expression )
        // OracleDML.g:534:10: model_expression
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_model_expression_in_cell_assignment5228);
            model_expression371=model_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecell_assignmentEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, model_expression371.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecell_assignmentEx; /* Prevent compiler warnings */
    rulecell_assignmentEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cell_assignment */

/**
 * $ANTLR start model_iterate_clause
 * OracleDML.g:537:1: model_iterate_clause : iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )? -> ^( iterate_key ^( EXPR expression ) ( until_part )? ) ;
 */
OracleDML::model_iterate_clause_return
OracleDML::model_iterate_clause()
{
    OracleDML::model_iterate_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN373 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN375 = NULL;
    OracleDML_OracleDMLKeys::iterate_key_return iterate_key372;
    ImplTraits::TreeTypePtr::pointer iterate_key372_last = NULL;
    OracleDML::expression_return expression374;
    ImplTraits::TreeTypePtr::pointer expression374_last = NULL;
    OracleDML::until_part_return until_part376;
    ImplTraits::TreeTypePtr::pointer until_part376_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN373_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN375_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_iterate_key(get_psrstate()->get_treeAdaptor(), "rule iterate_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_until_part(get_psrstate()->get_treeAdaptor(), "rule until_part");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:538:5: ( iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )? -> ^( iterate_key ^( EXPR expression ) ( until_part )? ) )
        // OracleDML.g:538:10: iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )?
        {
            this->followPush(FOLLOW_iterate_key_in_model_iterate_clause5248);
            iterate_key372=iterate_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_iterate_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                iterate_key372_last = iterate_key372.tree.get();
                stream_iterate_key.add(iterate_key372.tree);
            }

            LEFT_PAREN373 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_model_iterate_clause5250);
            if  (this->hasException())
            {
                goto rulemodel_iterate_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN373);


            this->followPush(FOLLOW_expression_in_model_iterate_clause5252);
            expression374=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_iterate_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression374_last = expression374.tree.get();
                stream_expression.add(expression374.tree);
            }

            RIGHT_PAREN375 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_model_iterate_clause5254);
            if  (this->hasException())
            {
                goto rulemodel_iterate_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN375);


            // OracleDML.g:538:56: ( until_part )?
            {
                ANTLR_UINT32 alt129=2;
                {
                    ANTLR_UINT32 LA129_0 = this->LA(1);
                    if ( (LA129_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "UNTIL")))
                    {
                        alt129=1;
                    }
                }
                switch (alt129)
                {
            	case 1:
            	    // OracleDML.g:538:56: until_part
            	    {
            	        this->followPush(FOLLOW_until_part_in_model_iterate_clause5256);
            	        until_part376=until_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_iterate_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            until_part376_last = until_part376.tree.get();
            	            stream_until_part.add(until_part376.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: until_part, iterate_key, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 539:9: -> ^( iterate_key ^( EXPR expression ) ( until_part )? )
            {
            	// OracleDML.g:539:11: ^( iterate_key ^( EXPR expression ) ( until_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_iterate_key.nextNode(), root_1);
            	// OracleDML.g:539:25: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:539:44: ( until_part )?
            	if ( stream_until_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_until_part.nextTree());
            	}
            	stream_until_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_iterate_clauseEx; /* Prevent compiler warnings */
    rulemodel_iterate_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_iterate_clause */

/**
 * $ANTLR start until_part
 * OracleDML.g:542:1: until_part : until_key LEFT_PAREN condition RIGHT_PAREN -> ^( until_key ^( LOGIC_EXPR condition ) ) ;
 */
OracleDML::until_part_return
OracleDML::until_part()
{
    OracleDML::until_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN378 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN380 = NULL;
    OracleDML_OracleDMLKeys::until_key_return until_key377;
    ImplTraits::TreeTypePtr::pointer until_key377_last = NULL;
    OracleDML::condition_return condition379;
    ImplTraits::TreeTypePtr::pointer condition379_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN378_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN380_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_until_key(get_psrstate()->get_treeAdaptor(), "rule until_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:543:5: ( until_key LEFT_PAREN condition RIGHT_PAREN -> ^( until_key ^( LOGIC_EXPR condition ) ) )
        // OracleDML.g:543:10: until_key LEFT_PAREN condition RIGHT_PAREN
        {
            this->followPush(FOLLOW_until_key_in_until_part5299);
            until_key377=until_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuntil_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                until_key377_last = until_key377.tree.get();
                stream_until_key.add(until_key377.tree);
            }

            LEFT_PAREN378 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_until_part5301);
            if  (this->hasException())
            {
                goto ruleuntil_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN378);


            this->followPush(FOLLOW_condition_in_until_part5303);
            condition379=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuntil_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition379_last = condition379.tree.get();
                stream_condition.add(condition379.tree);
            }

            RIGHT_PAREN380 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_until_part5305);
            if  (this->hasException())
            {
                goto ruleuntil_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN380);


            // AST REWRITE
            // elements: until_key, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 544:9: -> ^( until_key ^( LOGIC_EXPR condition ) )
            {
            	// OracleDML.g:544:12: ^( until_key ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_until_key.nextNode(), root_1);
            	// OracleDML.g:544:24: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleuntil_partEx; /* Prevent compiler warnings */
    ruleuntil_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end until_part */

/**
 * $ANTLR start order_by_clause
 * OracleDML.g:547:1: order_by_clause : order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )* -> ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) ;
 */
OracleDML::order_by_clause_return
OracleDML::order_by_clause()
{
    OracleDML::order_by_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA385 = NULL;
    OracleDML_OracleDMLKeys::order_key_return order_key381;
    ImplTraits::TreeTypePtr::pointer order_key381_last = NULL;
    OracleDML_OracleDMLKeys::siblings_key_return siblings_key382;
    ImplTraits::TreeTypePtr::pointer siblings_key382_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key383;
    ImplTraits::TreeTypePtr::pointer by_key383_last = NULL;
    OracleDML::order_by_elements_return order_by_elements384;
    ImplTraits::TreeTypePtr::pointer order_by_elements384_last = NULL;
    OracleDML::order_by_elements_return order_by_elements386;
    ImplTraits::TreeTypePtr::pointer order_by_elements386_last = NULL;
    ImplTraits::TreeTypePtr COMMA385_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_key(get_psrstate()->get_treeAdaptor(), "rule order_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_siblings_key(get_psrstate()->get_treeAdaptor(), "rule siblings_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_by_elements(get_psrstate()->get_treeAdaptor(), "rule order_by_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:548:5: ( order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )* -> ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) )
        // OracleDML.g:548:10: order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )*
        {
            this->followPush(FOLLOW_order_key_in_order_by_clause5345);
            order_key381=order_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorder_by_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                order_key381_last = order_key381.tree.get();
                stream_order_key.add(order_key381.tree);
            }

            // OracleDML.g:548:20: ( siblings_key )?
            {
                ANTLR_UINT32 alt130=2;
                {
                    ANTLR_UINT32 LA130_0 = this->LA(1);
                    if ( (LA130_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SIBLINGS")))
                    {
                        alt130=1;
                    }
                }
                switch (alt130)
                {
            	case 1:
            	    // OracleDML.g:548:20: siblings_key
            	    {
            	        this->followPush(FOLLOW_siblings_key_in_order_by_clause5347);
            	        siblings_key382=siblings_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            siblings_key382_last = siblings_key382.tree.get();
            	            stream_siblings_key.add(siblings_key382.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_by_key_in_order_by_clause5350);
            by_key383=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorder_by_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                by_key383_last = by_key383.tree.get();
                stream_by_key.add(by_key383.tree);
            }

            this->followPush(FOLLOW_order_by_elements_in_order_by_clause5352);
            order_by_elements384=order_by_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorder_by_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                order_by_elements384_last = order_by_elements384.tree.get();
                stream_order_by_elements.add(order_by_elements384.tree);
            }

            // OracleDML.g:548:59: ( COMMA order_by_elements )*

            for (;;)
            {
                ANTLR_UINT32 alt131=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt131=1;
                	}
                    break;

                }

                switch (alt131)
                {
            	case 1:
            	    // OracleDML.g:548:60: COMMA order_by_elements
            	    {
            	        COMMA385 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_order_by_clause5355);
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA385);


            	        this->followPush(FOLLOW_order_by_elements_in_order_by_clause5357);
            	        order_by_elements386=order_by_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_by_elements386_last = order_by_elements386.tree.get();
            	            stream_order_by_elements.add(order_by_elements386.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop131;	/* break out of the loop */
            	    break;
                }
            }
            loop131: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: order_by_elements, siblings_key, order_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 549:9: -> ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
            {
            	// OracleDML.g:549:12: ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_order_key.nextNode(), root_1);
            	// OracleDML.g:549:24: ( siblings_key )?
            	if ( stream_siblings_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_siblings_key.nextTree());
            	}
            	stream_siblings_key.reset();

            	// OracleDML.g:549:38: ^( ORDER_BY_ELEMENTS ( order_by_elements )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ORDER_BY_ELEMENTS, "ORDER_BY_ELEMENTS"), root_2);
            	if ( !(stream_order_by_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "order_by_elements empty" );
            		goto ruleorder_by_clauseEx;
            	}
            	while ( stream_order_by_elements.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_order_by_elements.nextTree());
            	}
            	stream_order_by_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleorder_by_clauseEx; /* Prevent compiler warnings */
    ruleorder_by_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end order_by_clause */

/**
 * $ANTLR start order_by_elements
 * OracleDML.g:552:1: order_by_elements : expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )? -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? ) ;
 */
OracleDML::order_by_elements_return
OracleDML::order_by_elements()
{
    OracleDML::order_by_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression387;
    ImplTraits::TreeTypePtr::pointer expression387_last = NULL;
    OracleDML_OracleDMLKeys::asc_key_return asc_key388;
    ImplTraits::TreeTypePtr::pointer asc_key388_last = NULL;
    OracleDML_OracleDMLKeys::desc_key_return desc_key389;
    ImplTraits::TreeTypePtr::pointer desc_key389_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key390;
    ImplTraits::TreeTypePtr::pointer nulls_key390_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key391;
    ImplTraits::TreeTypePtr::pointer first_key391_last = NULL;
    OracleDML_OracleDMLKeys::last_key_return last_key392;
    ImplTraits::TreeTypePtr::pointer last_key392_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_desc_key(get_psrstate()->get_treeAdaptor(), "rule desc_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_nulls_key(get_psrstate()->get_treeAdaptor(), "rule nulls_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_last_key(get_psrstate()->get_treeAdaptor(), "rule last_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_asc_key(get_psrstate()->get_treeAdaptor(), "rule asc_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_first_key(get_psrstate()->get_treeAdaptor(), "rule first_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:553:5: ( expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )? -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? ) )
        // OracleDML.g:553:10: expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )?
        {
            this->followPush(FOLLOW_expression_in_order_by_elements5403);
            expression387=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorder_by_elementsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression387_last = expression387.tree.get();
                stream_expression.add(expression387.tree);
            }

            // OracleDML.g:553:21: ( asc_key | desc_key )?
            {
                ANTLR_UINT32 alt132=3;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ASC:
                    	{
                    		alt132=1;
                    	}
                        break;
                    case SQL92_RESERVED_DESC:
                    	{
                    		alt132=2;
                    	}
                        break;
                }

                switch (alt132)
                {
            	case 1:
            	    // OracleDML.g:553:22: asc_key
            	    {
            	        this->followPush(FOLLOW_asc_key_in_order_by_elements5406);
            	        asc_key388=asc_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            asc_key388_last = asc_key388.tree.get();
            	            stream_asc_key.add(asc_key388.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:553:30: desc_key
            	    {
            	        this->followPush(FOLLOW_desc_key_in_order_by_elements5408);
            	        desc_key389=desc_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            desc_key389_last = desc_key389.tree.get();
            	            stream_desc_key.add(desc_key389.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:553:41: ( nulls_key ( first_key | last_key ) )?
            {
                ANTLR_UINT32 alt134=2;
                {
                    ANTLR_UINT32 LA134_0 = this->LA(1);
                    if ( (LA134_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "RANGE"))||((toUpper(LT(1)->getText()) == "ROWS"))||((toUpper(LT(1)->getText()) == "LOG"))||((toUpper(LT(1)->getText()) == "NULLS")))))
                    {
                        {
                            ANTLR_UINT32 LA134_1 = this->LA(2);
                            if ( (LA134_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "RANGE"))||((toUpper(LT(1)->getText()) == "ROWS"))||((toUpper(LT(1)->getText()) == "LOG"))||((toUpper(LT(1)->getText()) == "NULLS")))))
                            {
                                {
                                    ANTLR_UINT32 LA134_3 = this->LA(3);
                                    if ( ((toUpper(LT(1)->getText()) == "NULLS")))
                                    {
                                        alt134=1;
                                    }
                                }
                            }
                        }
                    }
                }
                switch (alt134)
                {
            	case 1:
            	    // OracleDML.g:553:42: nulls_key ( first_key | last_key )
            	    {
            	        this->followPush(FOLLOW_nulls_key_in_order_by_elements5413);
            	        nulls_key390=nulls_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            nulls_key390_last = nulls_key390.tree.get();
            	            stream_nulls_key.add(nulls_key390.tree);
            	        }

            	        // OracleDML.g:553:52: ( first_key | last_key )
            	        {
            	            ANTLR_UINT32 alt133=2;
            	            {
            	                ANTLR_UINT32 LA133_0 = this->LA(1);
            	                if ( (LA133_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "FIRST"))||((toUpper(LT(1)->getText()) == "LAST")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA133_1 = this->LA(2);
            	                        if ( ((toUpper(LT(1)->getText()) == "FIRST")))
            	                        {
            	                            alt133=1;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "LAST")))
            	                        {
            	                            alt133=2;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return retval;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 133 );
            	                            ex->set_state( 1 );


            	                            goto ruleorder_by_elementsEx;

            	                        }
            	                    }
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 133 );
            	                    ex->set_state( 0 );


            	                    goto ruleorder_by_elementsEx;

            	                }
            	            }
            	            switch (alt133)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:553:53: first_key
            	        	    {
            	        	        this->followPush(FOLLOW_first_key_in_order_by_elements5416);
            	        	        first_key391=first_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleorder_by_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            first_key391_last = first_key391.tree.get();
            	        	            stream_first_key.add(first_key391.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:553:63: last_key
            	        	    {
            	        	        this->followPush(FOLLOW_last_key_in_order_by_elements5418);
            	        	        last_key392=last_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleorder_by_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            last_key392_last = last_key392.tree.get();
            	        	            stream_last_key.add(last_key392.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression, nulls_key, desc_key, last_key, first_key, asc_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 554:9: -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? )
            {
            	// OracleDML.g:554:12: ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ORDER_BY_ELEMENT, "ORDER_BY_ELEMENT"), root_1);
            	// OracleDML.g:554:31: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:554:50: ( asc_key )?
            	if ( stream_asc_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_asc_key.nextTree());
            	}
            	stream_asc_key.reset();

            	// OracleDML.g:554:59: ( desc_key )?
            	if ( stream_desc_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_desc_key.nextTree());
            	}
            	stream_desc_key.reset();

            	// OracleDML.g:554:69: ( nulls_key )?
            	if ( stream_nulls_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_nulls_key.nextTree());
            	}
            	stream_nulls_key.reset();

            	// OracleDML.g:554:80: ( first_key )?
            	if ( stream_first_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_first_key.nextTree());
            	}
            	stream_first_key.reset();

            	// OracleDML.g:554:91: ( last_key )?
            	if ( stream_last_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_last_key.nextTree());
            	}
            	stream_last_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleorder_by_elementsEx; /* Prevent compiler warnings */
    ruleorder_by_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end order_by_elements */

/**
 * $ANTLR start for_update_clause
 * OracleDML.g:557:1: for_update_clause : for_key update_key ( for_update_of_part )? ( for_update_options )? -> ^( for_key update_key ( for_update_of_part )? ( for_update_options )? ) ;
 */
OracleDML::for_update_clause_return
OracleDML::for_update_clause()
{
    OracleDML::for_update_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::for_key_return for_key393;
    ImplTraits::TreeTypePtr::pointer for_key393_last = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key394;
    ImplTraits::TreeTypePtr::pointer update_key394_last = NULL;
    OracleDML::for_update_of_part_return for_update_of_part395;
    ImplTraits::TreeTypePtr::pointer for_update_of_part395_last = NULL;
    OracleDML::for_update_options_return for_update_options396;
    ImplTraits::TreeTypePtr::pointer for_update_options396_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_for_update_of_part(get_psrstate()->get_treeAdaptor(), "rule for_update_of_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_update_options(get_psrstate()->get_treeAdaptor(), "rule for_update_options");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_key(get_psrstate()->get_treeAdaptor(), "rule update_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:558:5: ( for_key update_key ( for_update_of_part )? ( for_update_options )? -> ^( for_key update_key ( for_update_of_part )? ( for_update_options )? ) )
        // OracleDML.g:558:10: for_key update_key ( for_update_of_part )? ( for_update_options )?
        {
            this->followPush(FOLLOW_for_key_in_for_update_clause5476);
            for_key393=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key393_last = for_key393.tree.get();
                stream_for_key.add(for_key393.tree);
            }

            this->followPush(FOLLOW_update_key_in_for_update_clause5478);
            update_key394=update_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                update_key394_last = update_key394.tree.get();
                stream_update_key.add(update_key394.tree);
            }

            // OracleDML.g:558:29: ( for_update_of_part )?
            {
                ANTLR_UINT32 alt135=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_OF:
                    	{
                    		alt135=1;
                    	}
                        break;
                }

                switch (alt135)
                {
            	case 1:
            	    // OracleDML.g:558:29: for_update_of_part
            	    {
            	        this->followPush(FOLLOW_for_update_of_part_in_for_update_clause5480);
            	        for_update_of_part395=for_update_of_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefor_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_update_of_part395_last = for_update_of_part395.tree.get();
            	            stream_for_update_of_part.add(for_update_of_part395.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:558:49: ( for_update_options )?
            {
                ANTLR_UINT32 alt136=2;
                {
                    ANTLR_UINT32 LA136_0 = this->LA(1);
                    if ( (LA136_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT"))||((toUpper(LT(1)->getText()) == "LOG")))))
                    {
                        {
                            ANTLR_UINT32 LA136_1 = this->LA(2);
                            if ( (LA136_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT"))||((toUpper(LT(1)->getText()) == "LOG")))))
                            {
                                {
                                    ANTLR_UINT32 LA136_4 = this->LA(3);
                                    if ( ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT")))))
                                    {
                                        alt136=1;
                                    }
                                }
                            }
                            else if ( (LA136_1 == APPROXIMATE_NUM_LIT || LA136_1 == BINDVAR || ((LA136_1 >= CHAR_STRING) && (LA136_1 <= CHAR_STRING_PERL)) || LA136_1 == COLON || LA136_1 == DELIMITED_ID || LA136_1 == EXACT_NUM_LIT || LA136_1 == INTRODUCER || LA136_1 == LEFT_PAREN || LA136_1 == MINUS_SIGN || LA136_1 == NATIONAL_CHAR_STRING_LIT || ((LA136_1 >= PLSQL_NON_RESERVED_CAST) && (LA136_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA136_1 == PLUS_SIGN || LA136_1 == SQL92_RESERVED_ALL || LA136_1 == SQL92_RESERVED_ANY || LA136_1 == SQL92_RESERVED_CASE || ((LA136_1 >= SQL92_RESERVED_CURSOR) && (LA136_1 <= SQL92_RESERVED_DATE)) || LA136_1 == SQL92_RESERVED_DEFAULT || LA136_1 == SQL92_RESERVED_DISTINCT || ((LA136_1 >= SQL92_RESERVED_EXISTS) && (LA136_1 <= SQL92_RESERVED_FALSE)) || ((LA136_1 >= SQL92_RESERVED_NOT) && (LA136_1 <= SQL92_RESERVED_NULL)) || LA136_1 == SQL92_RESERVED_PRIOR || LA136_1 == SQL92_RESERVED_TRUE || LA136_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "WAIT")))
                            {
                                alt136=1;
                            }
                        }
                    }
                    else if ( (LA136_0 == PLSQL_RESERVED_NOWAIT))
                    {
                        alt136=1;
                    }
                }
                switch (alt136)
                {
            	case 1:
            	    // OracleDML.g:558:49: for_update_options
            	    {
            	        this->followPush(FOLLOW_for_update_options_in_for_update_clause5483);
            	        for_update_options396=for_update_options();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefor_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_update_options396_last = for_update_options396.tree.get();
            	            stream_for_update_options.add(for_update_options396.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: for_update_options, for_update_of_part, update_key, for_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 559:9: -> ^( for_key update_key ( for_update_of_part )? ( for_update_options )? )
            {
            	// OracleDML.g:559:12: ^( for_key update_key ( for_update_of_part )? ( for_update_options )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_for_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_key.nextTree());
            	// OracleDML.g:559:33: ( for_update_of_part )?
            	if ( stream_for_update_of_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_for_update_of_part.nextTree());
            	}
            	stream_for_update_of_part.reset();

            	// OracleDML.g:559:53: ( for_update_options )?
            	if ( stream_for_update_options.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_for_update_options.nextTree());
            	}
            	stream_for_update_options.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_update_clauseEx; /* Prevent compiler warnings */
    rulefor_update_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_update_clause */

/**
 * $ANTLR start for_update_of_part
 * OracleDML.g:562:1: for_update_of_part : of_key ^ column_name ( COMMA ! column_name )* ;
 */
OracleDML::for_update_of_part_return
OracleDML::for_update_of_part()
{
    OracleDML::for_update_of_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA399 = NULL;
    OracleDML_OracleDMLKeys::of_key_return of_key397;
    ImplTraits::TreeTypePtr::pointer of_key397_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name398;
    ImplTraits::TreeTypePtr::pointer column_name398_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name400;
    ImplTraits::TreeTypePtr::pointer column_name400_last = NULL;
    ImplTraits::TreeTypePtr COMMA399_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:563:5: ( of_key ^ column_name ( COMMA ! column_name )* )
        // OracleDML.g:563:10: of_key ^ column_name ( COMMA ! column_name )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_of_key_in_for_update_of_part5526);
            of_key397=of_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_update_of_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(of_key397.tree, root_0);

            this->followPush(FOLLOW_column_name_in_for_update_of_part5529);
            column_name398=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_update_of_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name398.tree);


            // OracleDML.g:563:30: ( COMMA ! column_name )*

            for (;;)
            {
                ANTLR_UINT32 alt137=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt137=1;
                	}
                    break;

                }

                switch (alt137)
                {
            	case 1:
            	    // OracleDML.g:563:31: COMMA ! column_name
            	    {
            	        COMMA399 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_for_update_of_part5532);
            	        if  (this->hasException())
            	        {
            	            goto rulefor_update_of_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_column_name_in_for_update_of_part5535);
            	        column_name400=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefor_update_of_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name400.tree);


            	    }
            	    break;

            	default:
            	    goto loop137;	/* break out of the loop */
            	    break;
                }
            }
            loop137: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_update_of_partEx; /* Prevent compiler warnings */
    rulefor_update_of_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_update_of_part */

/**
 * $ANTLR start for_update_options
 * OracleDML.g:566:1: for_update_options : ( skip_key locked_key !| nowait_key | wait_key expression -> ^( wait_key ^( EXPR expression ) ) );
 */
OracleDML::for_update_options_return
OracleDML::for_update_options()
{
    OracleDML::for_update_options_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::skip_key_return skip_key401;
    ImplTraits::TreeTypePtr::pointer skip_key401_last = NULL;
    OracleDML_OracleDMLKeys::locked_key_return locked_key402;
    ImplTraits::TreeTypePtr::pointer locked_key402_last = NULL;
    OracleDML_OracleDMLKeys::nowait_key_return nowait_key403;
    ImplTraits::TreeTypePtr::pointer nowait_key403_last = NULL;
    OracleDML_OracleDMLKeys::wait_key_return wait_key404;
    ImplTraits::TreeTypePtr::pointer wait_key404_last = NULL;
    OracleDML::expression_return expression405;
    ImplTraits::TreeTypePtr::pointer expression405_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_wait_key(get_psrstate()->get_treeAdaptor(), "rule wait_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:567:5: ( skip_key locked_key !| nowait_key | wait_key expression -> ^( wait_key ^( EXPR expression ) ) )

            ANTLR_UINT32 alt138;

            alt138=3;

            {
                ANTLR_UINT32 LA138_0 = this->LA(1);
                if ( (LA138_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT")))))
                {
                    {
                        ANTLR_UINT32 LA138_1 = this->LA(2);
                        if ( (LA138_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT")))))
                        {
                            {
                                ANTLR_UINT32 LA138_3 = this->LA(3);
                                if ( ((toUpper(LT(1)->getText()) == "SKIP")))
                                {
                                    alt138=1;
                                }
                                else if ( ((toUpper(LT(1)->getText()) == "WAIT")))
                                {
                                    alt138=3;
                                }
                                else
                                {
                                    if (this->get_backtracking()>0)
                                    {
                                        this->set_failedflag( true );
                                        return retval;
                                    }


                                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                    ex->set_decisionNum( 138 );
                                    ex->set_state( 3 );


                                    goto rulefor_update_optionsEx;

                                }
                            }
                        }
                        else if ( (LA138_1 == APPROXIMATE_NUM_LIT || LA138_1 == BINDVAR || ((LA138_1 >= CHAR_STRING) && (LA138_1 <= CHAR_STRING_PERL)) || LA138_1 == COLON || LA138_1 == DELIMITED_ID || LA138_1 == EXACT_NUM_LIT || LA138_1 == INTRODUCER || LA138_1 == LEFT_PAREN || LA138_1 == MINUS_SIGN || LA138_1 == NATIONAL_CHAR_STRING_LIT || ((LA138_1 >= PLSQL_NON_RESERVED_CAST) && (LA138_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA138_1 == PLUS_SIGN || LA138_1 == SQL92_RESERVED_ALL || LA138_1 == SQL92_RESERVED_ANY || LA138_1 == SQL92_RESERVED_CASE || ((LA138_1 >= SQL92_RESERVED_CURSOR) && (LA138_1 <= SQL92_RESERVED_DATE)) || LA138_1 == SQL92_RESERVED_DEFAULT || LA138_1 == SQL92_RESERVED_DISTINCT || ((LA138_1 >= SQL92_RESERVED_EXISTS) && (LA138_1 <= SQL92_RESERVED_FALSE)) || ((LA138_1 >= SQL92_RESERVED_NOT) && (LA138_1 <= SQL92_RESERVED_NULL)) || LA138_1 == SQL92_RESERVED_PRIOR || LA138_1 == SQL92_RESERVED_TRUE || LA138_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "WAIT")))
                        {
                            alt138=3;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 138 );
                            ex->set_state( 1 );


                            goto rulefor_update_optionsEx;

                        }
                    }
                }
                else if ( (LA138_0 == PLSQL_RESERVED_NOWAIT))
                {
                    alt138=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 138 );
                    ex->set_state( 0 );


                    goto rulefor_update_optionsEx;

                }
            }
            switch (alt138)
            {
        	case 1:
        	    // OracleDML.g:567:10: skip_key locked_key !
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_skip_key_in_for_update_options5557);
        	        skip_key401=skip_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, skip_key401.tree);


        	        this->followPush(FOLLOW_locked_key_in_for_update_options5559);
        	        locked_key402=locked_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:568:10: nowait_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_nowait_key_in_for_update_options5571);
        	        nowait_key403=nowait_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nowait_key403.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:569:10: wait_key expression
        	    {
        	        this->followPush(FOLLOW_wait_key_in_for_update_options5582);
        	        wait_key404=wait_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            wait_key404_last = wait_key404.tree.get();
        	            stream_wait_key.add(wait_key404.tree);
        	        }

        	        this->followPush(FOLLOW_expression_in_for_update_options5584);
        	        expression405=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression405_last = expression405.tree.get();
        	            stream_expression.add(expression405.tree);
        	        }

        	        // AST REWRITE
        	        // elements: wait_key, expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 569:30: -> ^( wait_key ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:569:33: ^( wait_key ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_wait_key.nextNode(), root_1);
        	        	// OracleDML.g:569:44: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_update_optionsEx; /* Prevent compiler warnings */
    rulefor_update_optionsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_update_options */

/**
 * $ANTLR start update_statement
 * OracleDML.g:574:1: update_statement : update_key ^ general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ;
 */
OracleDML::update_statement_return
OracleDML::update_statement()
{
    OracleDML::update_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::update_key_return update_key406;
    ImplTraits::TreeTypePtr::pointer update_key406_last = NULL;
    OracleDML::general_table_ref_return general_table_ref407;
    ImplTraits::TreeTypePtr::pointer general_table_ref407_last = NULL;
    OracleDML::update_set_clause_return update_set_clause408;
    ImplTraits::TreeTypePtr::pointer update_set_clause408_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause409;
    ImplTraits::TreeTypePtr::pointer where_clause409_last = NULL;
    OracleDML::static_returning_clause_return static_returning_clause410;
    ImplTraits::TreeTypePtr::pointer static_returning_clause410_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause411;
    ImplTraits::TreeTypePtr::pointer error_logging_clause411_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:575:5: ( update_key ^ general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
        // OracleDML.g:575:10: update_key ^ general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_update_key_in_update_statement5618);
            update_key406=update_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleupdate_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(update_key406.tree, root_0);

            this->followPush(FOLLOW_general_table_ref_in_update_statement5621);
            general_table_ref407=general_table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleupdate_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_table_ref407.tree);


            this->followPush(FOLLOW_update_set_clause_in_update_statement5631);
            update_set_clause408=update_set_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleupdate_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, update_set_clause408.tree);


            // OracleDML.g:577:9: ( where_clause )?
            {
                ANTLR_UINT32 alt139=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt139=1;
                    	}
                        break;
                }

                switch (alt139)
                {
            	case 1:
            	    // OracleDML.g:577:9: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_update_statement5641);
            	        where_clause409=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, where_clause409.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:577:23: ( static_returning_clause )?
            {
                ANTLR_UINT32 alt140=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA140_1 = this->LA(2);
                    		    if ( ((((toUpper(LT(1)->getText()) == "RETURN"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
                    		    {
                    		        alt140=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt140)
                {
            	case 1:
            	    // OracleDML.g:577:23: static_returning_clause
            	    {
            	        this->followPush(FOLLOW_static_returning_clause_in_update_statement5644);
            	        static_returning_clause410=static_returning_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, static_returning_clause410.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:577:48: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt141=2;
                {
                    ANTLR_UINT32 LA141_0 = this->LA(1);
                    if ( (LA141_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt141=1;
                    }
                }
                switch (alt141)
                {
            	case 1:
            	    // OracleDML.g:577:48: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_update_statement5647);
            	        error_logging_clause411=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, error_logging_clause411.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleupdate_statementEx; /* Prevent compiler warnings */
    ruleupdate_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end update_statement */

/**
 * $ANTLR start update_set_clause
 * OracleDML.g:581:1: update_set_clause : set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression ) -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ ) -> ^( set_key ^( value_key id ^( EXPR expression ) ) ) ;
 */
OracleDML::update_set_clause_return
OracleDML::update_set_clause()
{
    OracleDML::update_set_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA414 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN417 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN419 = NULL;
    ImplTraits::CommonTokenType const* EQUALS_OP420 = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key412;
    ImplTraits::TreeTypePtr::pointer set_key412_last = NULL;
    OracleDML::column_based_update_set_clause_return column_based_update_set_clause413;
    ImplTraits::TreeTypePtr::pointer column_based_update_set_clause413_last = NULL;
    OracleDML::column_based_update_set_clause_return column_based_update_set_clause415;
    ImplTraits::TreeTypePtr::pointer column_based_update_set_clause415_last = NULL;
    OracleDML_OracleDMLKeys::value_key_return value_key416;
    ImplTraits::TreeTypePtr::pointer value_key416_last = NULL;
    OracleDML_OracleDMLCommons::id_return id418;
    ImplTraits::TreeTypePtr::pointer id418_last = NULL;
    OracleDML::expression_return expression421;
    ImplTraits::TreeTypePtr::pointer expression421_last = NULL;
    ImplTraits::TreeTypePtr COMMA414_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN417_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN419_tree;
    ImplTraits::TreeTypePtr EQUALS_OP420_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_id(get_psrstate()->get_treeAdaptor(), "rule id");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_value_key(get_psrstate()->get_treeAdaptor(), "rule value_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_based_update_set_clause(get_psrstate()->get_treeAdaptor(), "rule column_based_update_set_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_set_key(get_psrstate()->get_treeAdaptor(), "rule set_key");

    /* Initialize rule variables
     */

        int mode = 1;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:583:5: ( set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression ) -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ ) -> ^( set_key ^( value_key id ^( EXPR expression ) ) ) )
        // OracleDML.g:583:10: set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression )
        {
            this->followPush(FOLLOW_set_key_in_update_set_clause5677);
            set_key412=set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleupdate_set_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                set_key412_last = set_key412.tree.get();
                stream_set_key.add(set_key412.tree);
            }

            // OracleDML.g:584:5: ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression )
            {
                ANTLR_UINT32 alt143=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case LEFT_PAREN:
                	{
                		alt143=1;
                	}
                    break;
                case REGULAR_ID:
                	{
                		switch ( this->LA(2) )
                		{
                		case EQUALS_OP:
                		case PERIOD:
                			{
                				alt143=1;
                			}
                		    break;
                		case LEFT_PAREN:
                			{
                				alt143=2;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return retval;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 143 );
                		    ex->set_state( 2 );


                		    goto ruleupdate_set_clauseEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 143 );
                    ex->set_state( 0 );


                    goto ruleupdate_set_clauseEx;

                }

                switch (alt143)
                {
            	case 1:
            	    // OracleDML.g:584:10: column_based_update_set_clause ( COMMA column_based_update_set_clause )*
            	    {
            	        this->followPush(FOLLOW_column_based_update_set_clause_in_update_set_clause5688);
            	        column_based_update_set_clause413=column_based_update_set_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_based_update_set_clause413_last = column_based_update_set_clause413.tree.get();
            	            stream_column_based_update_set_clause.add(column_based_update_set_clause413.tree);
            	        }

            	        // OracleDML.g:584:41: ( COMMA column_based_update_set_clause )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt142=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt142=1;
            	            	}
            	                break;

            	            }

            	            switch (alt142)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:584:42: COMMA column_based_update_set_clause
            	        	    {
            	        	        COMMA414 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_update_set_clause5691);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleupdate_set_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA414);


            	        	        this->followPush(FOLLOW_column_based_update_set_clause_in_update_set_clause5693);
            	        	        column_based_update_set_clause415=column_based_update_set_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleupdate_set_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_based_update_set_clause415_last = column_based_update_set_clause415.tree.get();
            	        	            stream_column_based_update_set_clause.add(column_based_update_set_clause415.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop142;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop142: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:585:10: value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression
            	    {
            	        this->followPush(FOLLOW_value_key_in_update_set_clause5706);
            	        value_key416=value_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            value_key416_last = value_key416.tree.get();
            	            stream_value_key.add(value_key416.tree);
            	        }

            	        LEFT_PAREN417 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_update_set_clause5708);
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN417);


            	        this->followPush(FOLLOW_id_in_update_set_clause5710);
            	        id418=id(T_UNKNOWN, T_USE);

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            id418_last = id418.tree.get();
            	            stream_id.add(id418.tree);
            	        }

            	        RIGHT_PAREN419 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_update_set_clause5713);
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN419);


            	        EQUALS_OP420 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_update_set_clause5715);
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP420);


            	        this->followPush(FOLLOW_expression_in_update_set_clause5717);
            	        expression421=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression421_last = expression421.tree.get();
            	            stream_expression.add(expression421.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 0;
            	        }


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression, column_based_update_set_clause, set_key, id, value_key, set_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 587:9: -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ )
            if (mode == 1) {
            	// OracleDML.g:587:24: ^( set_key ( column_based_update_set_clause )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_set_key.nextNode(), root_1);
            	if ( !(stream_column_based_update_set_clause.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_based_update_set_clause empty" );
            		goto ruleupdate_set_clauseEx;
            	}
            	while ( stream_column_based_update_set_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_based_update_set_clause.nextTree());
            	}
            	stream_column_based_update_set_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 588:9: -> ^( set_key ^( value_key id ^( EXPR expression ) ) )
            {
            	// OracleDML.g:588:12: ^( set_key ^( value_key id ^( EXPR expression ) ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_set_key.nextNode(), root_1);
            	// OracleDML.g:588:22: ^( value_key id ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_value_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_id.nextTree());
            	// OracleDML.g:588:37: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleupdate_set_clauseEx; /* Prevent compiler warnings */
    ruleupdate_set_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end update_set_clause */

/**
 * $ANTLR start column_based_update_set_clause
 * OracleDML.g:591:1: column_based_update_set_clause : ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery ) );
 */
OracleDML::column_based_update_set_clause_return
OracleDML::column_based_update_set_clause()
{
    OracleDML::column_based_update_set_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP423 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN425 = NULL;
    ImplTraits::CommonTokenType const* COMMA427 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN429 = NULL;
    ImplTraits::CommonTokenType const* EQUALS_OP430 = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name422;
    ImplTraits::TreeTypePtr::pointer column_name422_last = NULL;
    OracleDML::expression_return expression424;
    ImplTraits::TreeTypePtr::pointer expression424_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name426;
    ImplTraits::TreeTypePtr::pointer column_name426_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name428;
    ImplTraits::TreeTypePtr::pointer column_name428_last = NULL;
    OracleDML::subquery_return subquery431;
    ImplTraits::TreeTypePtr::pointer subquery431_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP423_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN425_tree;
    ImplTraits::TreeTypePtr COMMA427_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN429_tree;
    ImplTraits::TreeTypePtr EQUALS_OP430_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:592:5: ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery ) )

            ANTLR_UINT32 alt145;

            alt145=2;

            switch ( this->LA(1) )
            {
            case DELIMITED_ID:
            case INTRODUCER:
            case REGULAR_ID:
            	{
            		alt145=1;
            	}
                break;
            case LEFT_PAREN:
            	{
            		alt145=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 145 );
                ex->set_state( 0 );


                goto rulecolumn_based_update_set_clauseEx;

            }

            switch (alt145)
            {
        	case 1:
        	    // OracleDML.g:592:10: column_name EQUALS_OP expression
        	    {
        	        this->followPush(FOLLOW_column_name_in_column_based_update_set_clause5789);
        	        column_name422=column_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            column_name422_last = column_name422.tree.get();
        	            stream_column_name.add(column_name422.tree);
        	        }

        	        EQUALS_OP423 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_column_based_update_set_clause5791);
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP423);


        	        this->followPush(FOLLOW_expression_in_column_based_update_set_clause5793);
        	        expression424=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression424_last = expression424.tree.get();
        	            stream_expression.add(expression424.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression, column_name
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 592:43: -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:592:46: ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ASSIGN, EQUALS_OP423), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
        	        	// OracleDML.g:592:79: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:593:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery
        	    {
        	        LEFT_PAREN425 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5819);
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN425);


        	        this->followPush(FOLLOW_column_name_in_column_based_update_set_clause5821);
        	        column_name426=column_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            column_name426_last = column_name426.tree.get();
        	            stream_column_name.add(column_name426.tree);
        	        }

        	        // OracleDML.g:593:33: ( COMMA column_name )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt144=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt144=1;
        	            	}
        	                break;

        	            }

        	            switch (alt144)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:593:34: COMMA column_name
        	        	    {
        	        	        COMMA427 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_column_based_update_set_clause5824);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecolumn_based_update_set_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA427);


        	        	        this->followPush(FOLLOW_column_name_in_column_based_update_set_clause5826);
        	        	        column_name428=column_name();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecolumn_based_update_set_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            column_name428_last = column_name428.tree.get();
        	        	            stream_column_name.add(column_name428.tree);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop144;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop144: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN429 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5830);
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN429);


        	        EQUALS_OP430 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_column_based_update_set_clause5832);
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP430);


        	        this->followPush(FOLLOW_subquery_in_column_based_update_set_clause5834);
        	        subquery431=subquery();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            subquery431_last = subquery431.tree.get();
        	            stream_subquery.add(subquery431.tree);
        	        }

        	        // AST REWRITE
        	        // elements: subquery, column_name
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 593:85: -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery )
        	        {
        	        	// OracleDML.g:593:88: ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ASSIGN, EQUALS_OP430), root_1);
        	        	if ( !(stream_column_name.hasNext()) ) {
        	        		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
        	        		goto rulecolumn_based_update_set_clauseEx;
        	        	}
        	        	while ( stream_column_name.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
        	        	}
        	        	stream_column_name.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulecolumn_based_update_set_clauseEx; /* Prevent compiler warnings */
    rulecolumn_based_update_set_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end column_based_update_set_clause */

/**
 * $ANTLR start delete_statement
 * OracleDML.g:598:1: delete_statement : delete_key ^ ( from_key !)? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ;
 */
OracleDML::delete_statement_return
OracleDML::delete_statement()
{
    OracleDML::delete_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::delete_key_return delete_key432;
    ImplTraits::TreeTypePtr::pointer delete_key432_last = NULL;
    OracleDML_OracleDMLKeys::from_key_return from_key433;
    ImplTraits::TreeTypePtr::pointer from_key433_last = NULL;
    OracleDML::general_table_ref_return general_table_ref434;
    ImplTraits::TreeTypePtr::pointer general_table_ref434_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause435;
    ImplTraits::TreeTypePtr::pointer where_clause435_last = NULL;
    OracleDML::static_returning_clause_return static_returning_clause436;
    ImplTraits::TreeTypePtr::pointer static_returning_clause436_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause437;
    ImplTraits::TreeTypePtr::pointer error_logging_clause437_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:599:5: ( delete_key ^ ( from_key !)? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
        // OracleDML.g:599:10: delete_key ^ ( from_key !)? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_delete_key_in_delete_statement5868);
            delete_key432=delete_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledelete_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(delete_key432.tree, root_0);

            // OracleDML.g:599:30: ( from_key !)?
            {
                ANTLR_UINT32 alt146=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_FROM:
                    	{
                    		alt146=1;
                    	}
                        break;
                }

                switch (alt146)
                {
            	case 1:
            	    // OracleDML.g:599:30: from_key !
            	    {
            	        this->followPush(FOLLOW_from_key_in_delete_statement5871);
            	        from_key433=from_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelete_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_general_table_ref_in_delete_statement5883);
            general_table_ref434=general_table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledelete_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_table_ref434.tree);


            // OracleDML.g:601:9: ( where_clause )?
            {
                ANTLR_UINT32 alt147=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt147=1;
                    	}
                        break;
                }

                switch (alt147)
                {
            	case 1:
            	    // OracleDML.g:601:9: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_delete_statement5893);
            	        where_clause435=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelete_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, where_clause435.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:601:23: ( static_returning_clause )?
            {
                ANTLR_UINT32 alt148=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA148_1 = this->LA(2);
                    		    if ( ((((toUpper(LT(1)->getText()) == "RETURN"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
                    		    {
                    		        alt148=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt148)
                {
            	case 1:
            	    // OracleDML.g:601:23: static_returning_clause
            	    {
            	        this->followPush(FOLLOW_static_returning_clause_in_delete_statement5896);
            	        static_returning_clause436=static_returning_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelete_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, static_returning_clause436.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:601:48: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt149=2;
                {
                    ANTLR_UINT32 LA149_0 = this->LA(1);
                    if ( (LA149_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt149=1;
                    }
                }
                switch (alt149)
                {
            	case 1:
            	    // OracleDML.g:601:48: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_delete_statement5899);
            	        error_logging_clause437=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelete_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, error_logging_clause437.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruledelete_statementEx; /* Prevent compiler warnings */
    ruledelete_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end delete_statement */

/**
 * $ANTLR start insert_statement
 * OracleDML.g:604:1: insert_statement : insert_key ^ ( single_table_insert | multi_table_insert ) ;
 */
OracleDML::insert_statement_return
OracleDML::insert_statement()
{
    OracleDML::insert_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::insert_key_return insert_key438;
    ImplTraits::TreeTypePtr::pointer insert_key438_last = NULL;
    OracleDML::single_table_insert_return single_table_insert439;
    ImplTraits::TreeTypePtr::pointer single_table_insert439_last = NULL;
    OracleDML::multi_table_insert_return multi_table_insert440;
    ImplTraits::TreeTypePtr::pointer multi_table_insert440_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:605:5: ( insert_key ^ ( single_table_insert | multi_table_insert ) )
        // OracleDML.g:605:10: insert_key ^ ( single_table_insert | multi_table_insert )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_insert_key_in_insert_statement5920);
            insert_key438=insert_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinsert_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(insert_key438.tree, root_0);

            // OracleDML.g:606:5: ( single_table_insert | multi_table_insert )
            {
                ANTLR_UINT32 alt150=2;
                {
                    ANTLR_UINT32 LA150_0 = this->LA(1);
                    if ( (LA150_0 == SQL92_RESERVED_INTO))
                    {
                        alt150=1;
                    }
                    else if ( (LA150_0 == SQL92_RESERVED_ALL))
                    {
                        alt150=2;
                    }
                    else if ( (LA150_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "FIRST")))
                    {
                        alt150=2;
                    }
                    else if ( (LA150_0 == SQL92_RESERVED_WHEN))
                    {
                        alt150=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 150 );
                        ex->set_state( 0 );


                        goto ruleinsert_statementEx;

                    }
                }
                switch (alt150)
                {
            	case 1:
            	    // OracleDML.g:606:10: single_table_insert
            	    {
            	        this->followPush(FOLLOW_single_table_insert_in_insert_statement5932);
            	        single_table_insert439=single_table_insert();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, single_table_insert439.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:607:10: multi_table_insert
            	    {
            	        this->followPush(FOLLOW_multi_table_insert_in_insert_statement5943);
            	        multi_table_insert440=multi_table_insert();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multi_table_insert440.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleinsert_statementEx; /* Prevent compiler warnings */
    ruleinsert_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end insert_statement */

/**
 * $ANTLR start single_table_insert
 * OracleDML.g:613:1: single_table_insert : insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? ) ;
 */
OracleDML::single_table_insert_return
OracleDML::single_table_insert()
{
    OracleDML::single_table_insert_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::insert_into_clause_return insert_into_clause441;
    ImplTraits::TreeTypePtr::pointer insert_into_clause441_last = NULL;
    OracleDML::values_clause_return values_clause442;
    ImplTraits::TreeTypePtr::pointer values_clause442_last = NULL;
    OracleDML::static_returning_clause_return static_returning_clause443;
    ImplTraits::TreeTypePtr::pointer static_returning_clause443_last = NULL;
    OracleDML::select_statement_return select_statement444;
    ImplTraits::TreeTypePtr::pointer select_statement444_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause445;
    ImplTraits::TreeTypePtr::pointer error_logging_clause445_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_static_returning_clause(get_psrstate()->get_treeAdaptor(), "rule static_returning_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_values_clause(get_psrstate()->get_treeAdaptor(), "rule values_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_insert_into_clause(get_psrstate()->get_treeAdaptor(), "rule insert_into_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_clause(get_psrstate()->get_treeAdaptor(), "rule error_logging_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:614:5: ( insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? ) )
        // OracleDML.g:614:10: insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )?
        {
            this->followPush(FOLLOW_insert_into_clause_in_single_table_insert5971);
            insert_into_clause441=insert_into_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesingle_table_insertEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                insert_into_clause441_last = insert_into_clause441.tree.get();
                stream_insert_into_clause.add(insert_into_clause441.tree);
            }

            // OracleDML.g:615:5: ( values_clause ( static_returning_clause )? | select_statement )
            {
                ANTLR_UINT32 alt152=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_VALUES:
                	{
                		alt152=1;
                	}
                    break;
                case LEFT_PAREN:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_WITH:
                	{
                		alt152=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 152 );
                    ex->set_state( 0 );


                    goto rulesingle_table_insertEx;

                }

                switch (alt152)
                {
            	case 1:
            	    // OracleDML.g:615:10: values_clause ( static_returning_clause )?
            	    {
            	        this->followPush(FOLLOW_values_clause_in_single_table_insert5982);
            	        values_clause442=values_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            values_clause442_last = values_clause442.tree.get();
            	            stream_values_clause.add(values_clause442.tree);
            	        }

            	        // OracleDML.g:615:24: ( static_returning_clause )?
            	        {
            	            ANTLR_UINT32 alt151=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		{
            	                		    ANTLR_UINT32 LA151_1 = this->LA(2);
            	                		    if ( ((((toUpper(LT(1)->getText()) == "RETURN"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
            	                		    {
            	                		        alt151=1;
            	                		    }
            	                		}
            	                	}
            	                    break;
            	            }

            	            switch (alt151)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:615:24: static_returning_clause
            	        	    {
            	        	        this->followPush(FOLLOW_static_returning_clause_in_single_table_insert5984);
            	        	        static_returning_clause443=static_returning_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesingle_table_insertEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            static_returning_clause443_last = static_returning_clause443.tree.get();
            	        	            stream_static_returning_clause.add(static_returning_clause443.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:616:10: select_statement
            	    {
            	        this->followPush(FOLLOW_select_statement_in_single_table_insert5996);
            	        select_statement444=select_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            select_statement444_last = select_statement444.tree.get();
            	            stream_select_statement.add(select_statement444.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:618:9: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt153=2;
                {
                    ANTLR_UINT32 LA153_0 = this->LA(1);
                    if ( (LA153_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt153=1;
                    }
                }
                switch (alt153)
                {
            	case 1:
            	    // OracleDML.g:618:9: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_single_table_insert6012);
            	        error_logging_clause445=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_clause445_last = error_logging_clause445.tree.get();
            	            stream_error_logging_clause.add(error_logging_clause445.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: static_returning_clause, error_logging_clause, values_clause, select_statement, insert_into_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 619:9: -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? )
            {
            	// OracleDML.g:619:12: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SINGLE_TABLE_MODE, "SINGLE_TABLE_MODE"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_insert_into_clause.nextTree());
            	// OracleDML.g:619:51: ( values_clause )?
            	if ( stream_values_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_values_clause.nextTree());
            	}
            	stream_values_clause.reset();

            	// OracleDML.g:619:66: ( static_returning_clause )?
            	if ( stream_static_returning_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_static_returning_clause.nextTree());
            	}
            	stream_static_returning_clause.reset();

            	// OracleDML.g:619:91: ( select_statement )?
            	if ( stream_select_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_statement.nextTree());
            	}
            	stream_select_statement.reset();

            	// OracleDML.g:619:109: ( error_logging_clause )?
            	if ( stream_error_logging_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_clause.nextTree());
            	}
            	stream_error_logging_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesingle_table_insertEx; /* Prevent compiler warnings */
    rulesingle_table_insertEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end single_table_insert */

/**
 * $ANTLR start multi_table_insert
 * OracleDML.g:622:1: multi_table_insert : ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement -> ^( MULTI_TABLE_MODE ( multi_table_element )* ( conditional_insert_clause )? select_statement ) ;
 */
OracleDML::multi_table_insert_return
OracleDML::multi_table_insert()
{
    OracleDML::multi_table_insert_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::all_key_return all_key446;
    ImplTraits::TreeTypePtr::pointer all_key446_last = NULL;
    OracleDML::multi_table_element_return multi_table_element447;
    ImplTraits::TreeTypePtr::pointer multi_table_element447_last = NULL;
    OracleDML::conditional_insert_clause_return conditional_insert_clause448;
    ImplTraits::TreeTypePtr::pointer conditional_insert_clause448_last = NULL;
    OracleDML::select_statement_return select_statement449;
    ImplTraits::TreeTypePtr::pointer select_statement449_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_multi_table_element(get_psrstate()->get_treeAdaptor(), "rule multi_table_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_conditional_insert_clause(get_psrstate()->get_treeAdaptor(), "rule conditional_insert_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:623:5: ( ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement -> ^( MULTI_TABLE_MODE ( multi_table_element )* ( conditional_insert_clause )? select_statement ) )
        // OracleDML.g:624:5: ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement
        {
            // OracleDML.g:624:5: ( all_key ( multi_table_element )+ | conditional_insert_clause )
            {
                ANTLR_UINT32 alt155=2;
                {
                    ANTLR_UINT32 LA155_0 = this->LA(1);
                    if ( (LA155_0 == SQL92_RESERVED_ALL))
                    {
                        switch ( this->LA(2) )
                        {
                        case SQL92_RESERVED_INTO:
                        	{
                        		alt155=1;
                        	}
                            break;
                        case SQL92_RESERVED_WHEN:
                        	{
                        		alt155=2;
                        	}
                            break;

                        default:
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }

                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 155 );
                            ex->set_state( 1 );


                            goto rulemulti_table_insertEx;

                        }

                    }
                    else if ( (LA155_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "FIRST")))
                    {
                        alt155=2;
                    }
                    else if ( (LA155_0 == SQL92_RESERVED_WHEN))
                    {
                        alt155=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 155 );
                        ex->set_state( 0 );


                        goto rulemulti_table_insertEx;

                    }
                }
                switch (alt155)
                {
            	case 1:
            	    // OracleDML.g:624:10: all_key ( multi_table_element )+
            	    {
            	        this->followPush(FOLLOW_all_key_in_multi_table_insert6071);
            	        all_key446=all_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            all_key446_last = all_key446.tree.get();
            	            stream_all_key.add(all_key446.tree);
            	        }

            	        // OracleDML.g:624:18: ( multi_table_element )+
            	        {
            	            int cnt154=0;

            	            for (;;)
            	            {
            	                ANTLR_UINT32 alt154=2;
            	        	switch ( this->LA(1) )
            	        	{
            	        	case SQL92_RESERVED_INTO:
            	        		{
            	        			alt154=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt154)
            	        	{
            	        	    case 1:
            	        	        // OracleDML.g:624:18: multi_table_element
            	        	        {
            	        	            this->followPush(FOLLOW_multi_table_element_in_multi_table_insert6073);
            	        	            multi_table_element447=multi_table_element();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulemulti_table_insertEx;
            	        	            }
            	        	            if (this->hasFailed())
            	        	            {
            	        	                return retval;
            	        	            }

            	        	            if ( this->get_backtracking()==0 ) 
            	        	            {
            	        	                multi_table_element447_last = multi_table_element447.tree.get();
            	        	                stream_multi_table_element.add(multi_table_element447.tree);
            	        	            }

            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt154 >= 1 )
            	        		{
            	        		    goto loop154;
            	        		}
            	        		if (this->get_backtracking()>0)
            	        		{
            	        		    this->set_failedflag( true );
            	        		    return retval;
            	        		}

            	        		/* mismatchedSetEx()
            	        		 */
            	        		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	        		goto rulemulti_table_insertEx;
            	        	}
            	        	cnt154++;
            	            }
            	            loop154: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:625:10: conditional_insert_clause
            	    {
            	        this->followPush(FOLLOW_conditional_insert_clause_in_multi_table_insert6085);
            	        conditional_insert_clause448=conditional_insert_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            conditional_insert_clause448_last = conditional_insert_clause448.tree.get();
            	            stream_conditional_insert_clause.add(conditional_insert_clause448.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_select_statement_in_multi_table_insert6101);
            select_statement449=select_statement();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_table_insertEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_statement449_last = select_statement449.tree.get();
                stream_select_statement.add(select_statement449.tree);
            }

            // AST REWRITE
            // elements: select_statement, multi_table_element, conditional_insert_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 628:9: -> ^( MULTI_TABLE_MODE ( multi_table_element )* ( conditional_insert_clause )? select_statement )
            {
            	// OracleDML.g:628:12: ^( MULTI_TABLE_MODE ( multi_table_element )* ( conditional_insert_clause )? select_statement )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MULTI_TABLE_MODE, "MULTI_TABLE_MODE"), root_1);
            	// OracleDML.g:628:31: ( multi_table_element )*
            	while ( stream_multi_table_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_multi_table_element.nextTree());
            	}
            	stream_multi_table_element.reset();

            	// OracleDML.g:628:52: ( conditional_insert_clause )?
            	if ( stream_conditional_insert_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_conditional_insert_clause.nextTree());
            	}
            	stream_conditional_insert_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_statement.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemulti_table_insertEx; /* Prevent compiler warnings */
    rulemulti_table_insertEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multi_table_insert */

/**
 * $ANTLR start multi_table_element
 * OracleDML.g:631:1: multi_table_element : insert_into_clause ( values_clause )? ( error_logging_clause )? -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) ;
 */
OracleDML::multi_table_element_return
OracleDML::multi_table_element()
{
    OracleDML::multi_table_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::insert_into_clause_return insert_into_clause450;
    ImplTraits::TreeTypePtr::pointer insert_into_clause450_last = NULL;
    OracleDML::values_clause_return values_clause451;
    ImplTraits::TreeTypePtr::pointer values_clause451_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause452;
    ImplTraits::TreeTypePtr::pointer error_logging_clause452_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_values_clause(get_psrstate()->get_treeAdaptor(), "rule values_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_insert_into_clause(get_psrstate()->get_treeAdaptor(), "rule insert_into_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_clause(get_psrstate()->get_treeAdaptor(), "rule error_logging_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:632:5: ( insert_into_clause ( values_clause )? ( error_logging_clause )? -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) )
        // OracleDML.g:632:10: insert_into_clause ( values_clause )? ( error_logging_clause )?
        {
            this->followPush(FOLLOW_insert_into_clause_in_multi_table_element6143);
            insert_into_clause450=insert_into_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_table_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                insert_into_clause450_last = insert_into_clause450.tree.get();
                stream_insert_into_clause.add(insert_into_clause450.tree);
            }

            // OracleDML.g:632:29: ( values_clause )?
            {
                ANTLR_UINT32 alt156=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_VALUES:
                    	{
                    		alt156=1;
                    	}
                        break;
                }

                switch (alt156)
                {
            	case 1:
            	    // OracleDML.g:632:29: values_clause
            	    {
            	        this->followPush(FOLLOW_values_clause_in_multi_table_element6145);
            	        values_clause451=values_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_table_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            values_clause451_last = values_clause451.tree.get();
            	            stream_values_clause.add(values_clause451.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:632:44: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt157=2;
                {
                    ANTLR_UINT32 LA157_0 = this->LA(1);
                    if ( (LA157_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt157=1;
                    }
                }
                switch (alt157)
                {
            	case 1:
            	    // OracleDML.g:632:44: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_multi_table_element6148);
            	        error_logging_clause452=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_table_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_clause452_last = error_logging_clause452.tree.get();
            	            stream_error_logging_clause.add(error_logging_clause452.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: values_clause, error_logging_clause, insert_into_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 633:9: -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
            {
            	// OracleDML.g:633:12: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_ELEMENT, "TABLE_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_insert_into_clause.nextTree());
            	// OracleDML.g:633:47: ( values_clause )?
            	if ( stream_values_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_values_clause.nextTree());
            	}
            	stream_values_clause.reset();

            	// OracleDML.g:633:62: ( error_logging_clause )?
            	if ( stream_error_logging_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_clause.nextTree());
            	}
            	stream_error_logging_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemulti_table_elementEx; /* Prevent compiler warnings */
    rulemulti_table_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multi_table_element */

/**
 * $ANTLR start conditional_insert_clause
 * OracleDML.g:636:1: conditional_insert_clause : ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) ;
 */
OracleDML::conditional_insert_clause_return
OracleDML::conditional_insert_clause()
{
    OracleDML::conditional_insert_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::all_key_return all_key453;
    ImplTraits::TreeTypePtr::pointer all_key453_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key454;
    ImplTraits::TreeTypePtr::pointer first_key454_last = NULL;
    OracleDML::conditional_insert_when_part_return conditional_insert_when_part455;
    ImplTraits::TreeTypePtr::pointer conditional_insert_when_part455_last = NULL;
    OracleDML::conditional_insert_else_part_return conditional_insert_else_part456;
    ImplTraits::TreeTypePtr::pointer conditional_insert_else_part456_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_conditional_insert_when_part(get_psrstate()->get_treeAdaptor(), "rule conditional_insert_when_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_conditional_insert_else_part(get_psrstate()->get_treeAdaptor(), "rule conditional_insert_else_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_first_key(get_psrstate()->get_treeAdaptor(), "rule first_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:637:5: ( ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) )
        // OracleDML.g:637:10: ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )?
        {
            // OracleDML.g:637:10: ( all_key | first_key )?
            {
                ANTLR_UINT32 alt158=3;
                {
                    ANTLR_UINT32 LA158_0 = this->LA(1);
                    if ( (LA158_0 == SQL92_RESERVED_ALL))
                    {
                        alt158=1;
                    }
                    else if ( (LA158_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "FIRST")))
                    {
                        alt158=2;
                    }
                }
                switch (alt158)
                {
            	case 1:
            	    // OracleDML.g:637:11: all_key
            	    {
            	        this->followPush(FOLLOW_all_key_in_conditional_insert_clause6192);
            	        all_key453=all_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            all_key453_last = all_key453.tree.get();
            	            stream_all_key.add(all_key453.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:637:19: first_key
            	    {
            	        this->followPush(FOLLOW_first_key_in_conditional_insert_clause6194);
            	        first_key454=first_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            first_key454_last = first_key454.tree.get();
            	            stream_first_key.add(first_key454.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:638:9: ( conditional_insert_when_part )+
            {
                int cnt159=0;

                for (;;)
                {
                    ANTLR_UINT32 alt159=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_WHEN:
            		{
            			alt159=1;
            		}
            	    break;

            	}

            	switch (alt159)
            	{
            	    case 1:
            	        // OracleDML.g:638:9: conditional_insert_when_part
            	        {
            	            this->followPush(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause6206);
            	            conditional_insert_when_part455=conditional_insert_when_part();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleconditional_insert_clauseEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) 
            	            {
            	                conditional_insert_when_part455_last = conditional_insert_when_part455.tree.get();
            	                stream_conditional_insert_when_part.add(conditional_insert_when_part455.tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt159 >= 1 )
            		{
            		    goto loop159;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleconditional_insert_clauseEx;
            	}
            	cnt159++;
                }
                loop159: ;	/* Jump to here if this rule does not match */
            }

            // OracleDML.g:638:39: ( conditional_insert_else_part )?
            {
                ANTLR_UINT32 alt160=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ELSE:
                    	{
                    		alt160=1;
                    	}
                        break;
                }

                switch (alt160)
                {
            	case 1:
            	    // OracleDML.g:638:39: conditional_insert_else_part
            	    {
            	        this->followPush(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause6209);
            	        conditional_insert_else_part456=conditional_insert_else_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            conditional_insert_else_part456_last = conditional_insert_else_part456.tree.get();
            	            stream_conditional_insert_else_part.add(conditional_insert_else_part456.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: all_key, conditional_insert_else_part, first_key, conditional_insert_when_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 639:9: -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
            {
            	// OracleDML.g:639:12: ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(CONDITIONAL_INSERT, "CONDITIONAL_INSERT"), root_1);
            	// OracleDML.g:639:33: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:639:42: ( first_key )?
            	if ( stream_first_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_first_key.nextTree());
            	}
            	stream_first_key.reset();

            	if ( !(stream_conditional_insert_when_part.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "conditional_insert_when_part empty" );
            		goto ruleconditional_insert_clauseEx;
            	}
            	while ( stream_conditional_insert_when_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_conditional_insert_when_part.nextTree());
            	}
            	stream_conditional_insert_when_part.reset();

            	// OracleDML.g:639:83: ( conditional_insert_else_part )?
            	if ( stream_conditional_insert_else_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_conditional_insert_else_part.nextTree());
            	}
            	stream_conditional_insert_else_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconditional_insert_clauseEx; /* Prevent compiler warnings */
    ruleconditional_insert_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end conditional_insert_clause */

/**
 * $ANTLR start conditional_insert_when_part
 * OracleDML.g:642:1: conditional_insert_when_part : when_key condition then_key ( multi_table_element )+ -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ ) ;
 */
OracleDML::conditional_insert_when_part_return
OracleDML::conditional_insert_when_part()
{
    OracleDML::conditional_insert_when_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::when_key_return when_key457;
    ImplTraits::TreeTypePtr::pointer when_key457_last = NULL;
    OracleDML::condition_return condition458;
    ImplTraits::TreeTypePtr::pointer condition458_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key459;
    ImplTraits::TreeTypePtr::pointer then_key459_last = NULL;
    OracleDML::multi_table_element_return multi_table_element460;
    ImplTraits::TreeTypePtr::pointer multi_table_element460_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_then_key(get_psrstate()->get_treeAdaptor(), "rule then_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");
    RewriteRuleSubtreeStream<ImplTraits> stream_multi_table_element(get_psrstate()->get_treeAdaptor(), "rule multi_table_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_when_key(get_psrstate()->get_treeAdaptor(), "rule when_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:643:5: ( when_key condition then_key ( multi_table_element )+ -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ ) )
        // OracleDML.g:643:10: when_key condition then_key ( multi_table_element )+
        {
            this->followPush(FOLLOW_when_key_in_conditional_insert_when_part6257);
            when_key457=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_insert_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                when_key457_last = when_key457.tree.get();
                stream_when_key.add(when_key457.tree);
            }

            this->followPush(FOLLOW_condition_in_conditional_insert_when_part6259);
            condition458=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_insert_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition458_last = condition458.tree.get();
                stream_condition.add(condition458.tree);
            }

            this->followPush(FOLLOW_then_key_in_conditional_insert_when_part6261);
            then_key459=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_insert_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                then_key459_last = then_key459.tree.get();
                stream_then_key.add(then_key459.tree);
            }

            // OracleDML.g:643:38: ( multi_table_element )+
            {
                int cnt161=0;

                for (;;)
                {
                    ANTLR_UINT32 alt161=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_INTO:
            		{
            			alt161=1;
            		}
            	    break;

            	}

            	switch (alt161)
            	{
            	    case 1:
            	        // OracleDML.g:643:38: multi_table_element
            	        {
            	            this->followPush(FOLLOW_multi_table_element_in_conditional_insert_when_part6263);
            	            multi_table_element460=multi_table_element();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleconditional_insert_when_partEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) 
            	            {
            	                multi_table_element460_last = multi_table_element460.tree.get();
            	                stream_multi_table_element.add(multi_table_element460.tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt161 >= 1 )
            		{
            		    goto loop161;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleconditional_insert_when_partEx;
            	}
            	cnt161++;
                }
                loop161: ;	/* Jump to here if this rule does not match */
            }

            // AST REWRITE
            // elements: condition, when_key, multi_table_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 644:9: -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ )
            {
            	// OracleDML.g:644:12: ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_when_key.nextNode(), root_1);
            	// OracleDML.g:644:23: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	if ( !(stream_multi_table_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "multi_table_element empty" );
            		goto ruleconditional_insert_when_partEx;
            	}
            	while ( stream_multi_table_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_multi_table_element.nextTree());
            	}
            	stream_multi_table_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconditional_insert_when_partEx; /* Prevent compiler warnings */
    ruleconditional_insert_when_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end conditional_insert_when_part */

/**
 * $ANTLR start conditional_insert_else_part
 * OracleDML.g:647:1: conditional_insert_else_part : else_key ^ ( multi_table_element )+ ;
 */
OracleDML::conditional_insert_else_part_return
OracleDML::conditional_insert_else_part()
{
    OracleDML::conditional_insert_else_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::else_key_return else_key461;
    ImplTraits::TreeTypePtr::pointer else_key461_last = NULL;
    OracleDML::multi_table_element_return multi_table_element462;
    ImplTraits::TreeTypePtr::pointer multi_table_element462_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:648:5: ( else_key ^ ( multi_table_element )+ )
        // OracleDML.g:648:10: else_key ^ ( multi_table_element )+
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_else_key_in_conditional_insert_else_part6307);
            else_key461=else_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_insert_else_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(else_key461.tree, root_0);

            // OracleDML.g:648:20: ( multi_table_element )+
            {
                int cnt162=0;

                for (;;)
                {
                    ANTLR_UINT32 alt162=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_INTO:
            		{
            			alt162=1;
            		}
            	    break;

            	}

            	switch (alt162)
            	{
            	    case 1:
            	        // OracleDML.g:648:20: multi_table_element
            	        {
            	            this->followPush(FOLLOW_multi_table_element_in_conditional_insert_else_part6310);
            	            multi_table_element462=multi_table_element();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleconditional_insert_else_partEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multi_table_element462.tree);


            	        }
            	        break;

            	    default:

            		if ( cnt162 >= 1 )
            		{
            		    goto loop162;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleconditional_insert_else_partEx;
            	}
            	cnt162++;
                }
                loop162: ;	/* Jump to here if this rule does not match */
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconditional_insert_else_partEx; /* Prevent compiler warnings */
    ruleconditional_insert_else_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end conditional_insert_else_part */

/**
 * $ANTLR start insert_into_clause
 * OracleDML.g:651:1: insert_into_clause : into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) ) ;
 */
OracleDML::insert_into_clause_return
OracleDML::insert_into_clause()
{
    OracleDML::insert_into_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN465 = NULL;
    ImplTraits::CommonTokenType const* COMMA467 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN469 = NULL;
    OracleDML_OracleDMLKeys::into_key_return into_key463;
    ImplTraits::TreeTypePtr::pointer into_key463_last = NULL;
    OracleDML::general_table_ref_return general_table_ref464;
    ImplTraits::TreeTypePtr::pointer general_table_ref464_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name466;
    ImplTraits::TreeTypePtr::pointer column_name466_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name468;
    ImplTraits::TreeTypePtr::pointer column_name468_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN465_tree;
    ImplTraits::TreeTypePtr COMMA467_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN469_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_general_table_ref(get_psrstate()->get_treeAdaptor(), "rule general_table_ref");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_key(get_psrstate()->get_treeAdaptor(), "rule into_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:652:5: ( into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) ) )
        // OracleDML.g:652:10: into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
        {
            this->followPush(FOLLOW_into_key_in_insert_into_clause6331);
            into_key463=into_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinsert_into_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                into_key463_last = into_key463.tree.get();
                stream_into_key.add(into_key463.tree);
            }

            this->followPush(FOLLOW_general_table_ref_in_insert_into_clause6333);
            general_table_ref464=general_table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinsert_into_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                general_table_ref464_last = general_table_ref464.tree.get();
                stream_general_table_ref.add(general_table_ref464.tree);
            }

            // OracleDML.g:653:9: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            {
                ANTLR_UINT32 alt164=2;
                switch ( this->LA(1) )
                {
                    case LEFT_PAREN:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case DELIMITED_ID:
                    		    case INTRODUCER:
                    		    case REGULAR_ID:
                    		    	{
                    		    		alt164=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt164)
                {
            	case 1:
            	    // OracleDML.g:653:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN465 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_insert_into_clause6345);
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_into_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN465);


            	        this->followPush(FOLLOW_column_name_in_insert_into_clause6347);
            	        column_name466=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_into_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name466_last = column_name466.tree.get();
            	            stream_column_name.add(column_name466.tree);
            	        }

            	        // OracleDML.g:653:33: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt163=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt163=1;
            	            	}
            	                break;

            	            }

            	            switch (alt163)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:653:34: COMMA column_name
            	        	    {
            	        	        COMMA467 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_insert_into_clause6350);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinsert_into_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA467);


            	        	        this->followPush(FOLLOW_column_name_in_insert_into_clause6352);
            	        	        column_name468=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinsert_into_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name468_last = column_name468.tree.get();
            	        	            stream_column_name.add(column_name468.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop163;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop163: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN469 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_insert_into_clause6356);
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_into_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN469);


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: general_table_ref, column_name, into_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 654:9: -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) )
            {
            	// OracleDML.g:654:12: ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_into_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_general_table_ref.nextTree());
            	// OracleDML.g:654:41: ^( COLUMNS ( column_name )* )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(COLUMNS, "COLUMNS"), root_2);
            	// OracleDML.g:654:51: ( column_name )*
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleinsert_into_clauseEx; /* Prevent compiler warnings */
    ruleinsert_into_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end insert_into_clause */

/**
 * $ANTLR start values_clause
 * OracleDML.g:657:1: values_clause : values_key ^ ( expression_list | record_name ) ;
 */
OracleDML::values_clause_return
OracleDML::values_clause()
{
    OracleDML::values_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::values_key_return values_key470;
    ImplTraits::TreeTypePtr::pointer values_key470_last = NULL;
    OracleDML::expression_list_return expression_list471;
    ImplTraits::TreeTypePtr::pointer expression_list471_last = NULL;
    OracleDML_OracleDMLCommons::record_name_return record_name472;
    ImplTraits::TreeTypePtr::pointer record_name472_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:658:5: ( values_key ^ ( expression_list | record_name ) )
        // OracleDML.g:658:10: values_key ^ ( expression_list | record_name )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_values_key_in_values_clause6401);
            values_key470=values_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevalues_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(values_key470.tree, root_0);

            // OracleDML.g:658:22: ( expression_list | record_name )
            {
                ANTLR_UINT32 alt165=2;
                switch ( this->LA(1) )
                {
                case LEFT_PAREN:
                	{
                		alt165=1;
                	}
                    break;
                case BINDVAR:
                case COLON:
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt165=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 165 );
                    ex->set_state( 0 );


                    goto rulevalues_clauseEx;

                }

                switch (alt165)
                {
            	case 1:
            	    // OracleDML.g:658:23: expression_list
            	    {
            	        this->followPush(FOLLOW_expression_list_in_values_clause6405);
            	        expression_list471=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevalues_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_list471.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:658:41: record_name
            	    {
            	        this->followPush(FOLLOW_record_name_in_values_clause6409);
            	        record_name472=record_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevalues_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, record_name472.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulevalues_clauseEx; /* Prevent compiler warnings */
    rulevalues_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end values_clause */

/**
 * $ANTLR start merge_statement
 * OracleDML.g:662:1: merge_statement : merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_insert_seq | ( when_key not_key matched_key )=> merge_insert_update_seq )? ( error_logging_clause )? -> ^( merge_key tableview_name ( table_alias )? ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_insert_seq )? ( merge_insert_update_seq )? ( error_logging_clause )? ) ;
 */
OracleDML::merge_statement_return
OracleDML::merge_statement()
{
    OracleDML::merge_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN480 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN482 = NULL;
    OracleDML_OracleDMLKeys::merge_key_return merge_key473;
    ImplTraits::TreeTypePtr::pointer merge_key473_last = NULL;
    OracleDML_OracleDMLKeys::into_key_return into_key474;
    ImplTraits::TreeTypePtr::pointer into_key474_last = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name475;
    ImplTraits::TreeTypePtr::pointer tableview_name475_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias476;
    ImplTraits::TreeTypePtr::pointer table_alias476_last = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key477;
    ImplTraits::TreeTypePtr::pointer using_key477_last = NULL;
    OracleDML::selected_tableview_return selected_tableview478;
    ImplTraits::TreeTypePtr::pointer selected_tableview478_last = NULL;
    OracleDML_OracleDMLKeys::on_key_return on_key479;
    ImplTraits::TreeTypePtr::pointer on_key479_last = NULL;
    OracleDML::condition_return condition481;
    ImplTraits::TreeTypePtr::pointer condition481_last = NULL;
    OracleDML::merge_update_insert_seq_return merge_update_insert_seq483;
    ImplTraits::TreeTypePtr::pointer merge_update_insert_seq483_last = NULL;
    OracleDML::merge_insert_update_seq_return merge_insert_update_seq484;
    ImplTraits::TreeTypePtr::pointer merge_insert_update_seq484_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause485;
    ImplTraits::TreeTypePtr::pointer error_logging_clause485_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN480_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN482_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_using_key(get_psrstate()->get_treeAdaptor(), "rule using_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_key(get_psrstate()->get_treeAdaptor(), "rule into_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_insert_update_seq(get_psrstate()->get_treeAdaptor(), "rule merge_insert_update_seq");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_key(get_psrstate()->get_treeAdaptor(), "rule merge_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_clause(get_psrstate()->get_treeAdaptor(), "rule error_logging_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_selected_tableview(get_psrstate()->get_treeAdaptor(), "rule selected_tableview");
    RewriteRuleSubtreeStream<ImplTraits> stream_on_key(get_psrstate()->get_treeAdaptor(), "rule on_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_update_insert_seq(get_psrstate()->get_treeAdaptor(), "rule merge_update_insert_seq");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:663:5: ( merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_insert_seq | ( when_key not_key matched_key )=> merge_insert_update_seq )? ( error_logging_clause )? -> ^( merge_key tableview_name ( table_alias )? ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_insert_seq )? ( merge_insert_update_seq )? ( error_logging_clause )? ) )
        // OracleDML.g:663:10: merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_insert_seq | ( when_key not_key matched_key )=> merge_insert_update_seq )? ( error_logging_clause )?
        {
            this->followPush(FOLLOW_merge_key_in_merge_statement6431);
            merge_key473=merge_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                merge_key473_last = merge_key473.tree.get();
                stream_merge_key.add(merge_key473.tree);
            }

            this->followPush(FOLLOW_into_key_in_merge_statement6433);
            into_key474=into_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                into_key474_last = into_key474.tree.get();
                stream_into_key.add(into_key474.tree);
            }

            this->followPush(FOLLOW_tableview_name_in_merge_statement6435);
            tableview_name475=tableview_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                tableview_name475_last = tableview_name475.tree.get();
                stream_tableview_name.add(tableview_name475.tree);
            }

            // OracleDML.g:663:44: ( table_alias )?
            {
                ANTLR_UINT32 alt166=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    	{
                    		alt166=1;
                    	}
                        break;
                }

                switch (alt166)
                {
            	case 1:
            	    // OracleDML.g:663:44: table_alias
            	    {
            	        this->followPush(FOLLOW_table_alias_in_merge_statement6437);
            	        table_alias476=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias476_last = table_alias476.tree.get();
            	            stream_table_alias.add(table_alias476.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_using_key_in_merge_statement6448);
            using_key477=using_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                using_key477_last = using_key477.tree.get();
                stream_using_key.add(using_key477.tree);
            }

            this->followPush(FOLLOW_selected_tableview_in_merge_statement6450);
            selected_tableview478=selected_tableview();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                selected_tableview478_last = selected_tableview478.tree.get();
                stream_selected_tableview.add(selected_tableview478.tree);
            }

            this->followPush(FOLLOW_on_key_in_merge_statement6452);
            on_key479=on_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                on_key479_last = on_key479.tree.get();
                stream_on_key.add(on_key479.tree);
            }

            LEFT_PAREN480 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_merge_statement6454);
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN480);


            this->followPush(FOLLOW_condition_in_merge_statement6456);
            condition481=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition481_last = condition481.tree.get();
                stream_condition.add(condition481.tree);
            }

            RIGHT_PAREN482 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_merge_statement6458);
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN482);


            // OracleDML.g:665:9: ( ( when_key matched_key )=> merge_update_insert_seq | ( when_key not_key matched_key )=> merge_insert_update_seq )?
            {
                ANTLR_UINT32 alt167=3;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHEN:
                    	{
                    		{
                    		    ANTLR_UINT32 LA167_1 = this->LA(2);
                    		    if ( (LA167_1 == REGULAR_ID) && (this->msynpred( antlr3::ClassForwarder<synpred23_OracleDML>() )))
                    		    {
                    		        alt167=1;
                    		    }
                    		    else if ( (LA167_1 == SQL92_RESERVED_NOT) && (this->msynpred( antlr3::ClassForwarder<synpred24_OracleDML>() )))
                    		    {
                    		        alt167=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt167)
                {
            	case 1:
            	    // OracleDML.g:666:13: ( when_key matched_key )=> merge_update_insert_seq
            	    {
            	        this->followPush(FOLLOW_merge_update_insert_seq_in_merge_statement6490);
            	        merge_update_insert_seq483=merge_update_insert_seq();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_update_insert_seq483_last = merge_update_insert_seq483.tree.get();
            	            stream_merge_update_insert_seq.add(merge_update_insert_seq483.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:668:13: ( when_key not_key matched_key )=> merge_insert_update_seq
            	    {
            	        this->followPush(FOLLOW_merge_insert_update_seq_in_merge_statement6524);
            	        merge_insert_update_seq484=merge_insert_update_seq();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_insert_update_seq484_last = merge_insert_update_seq484.tree.get();
            	            stream_merge_insert_update_seq.add(merge_insert_update_seq484.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:670:9: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt168=2;
                {
                    ANTLR_UINT32 LA168_0 = this->LA(1);
                    if ( (LA168_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt168=1;
                    }
                }
                switch (alt168)
                {
            	case 1:
            	    // OracleDML.g:670:9: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_merge_statement6545);
            	        error_logging_clause485=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_clause485_last = error_logging_clause485.tree.get();
            	            stream_error_logging_clause.add(error_logging_clause485.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: merge_insert_update_seq, condition, merge_update_insert_seq, selected_tableview, error_logging_clause, merge_key, using_key, table_alias, tableview_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 671:9: -> ^( merge_key tableview_name ( table_alias )? ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_insert_seq )? ( merge_insert_update_seq )? ( error_logging_clause )? )
            {
            	// OracleDML.g:671:12: ^( merge_key tableview_name ( table_alias )? ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_insert_seq )? ( merge_insert_update_seq )? ( error_logging_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_merge_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_tableview_name.nextTree());
            	// OracleDML.g:671:39: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	// OracleDML.g:671:52: ^( using_key selected_tableview ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_using_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_selected_tableview.nextTree());
            	// OracleDML.g:671:83: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:672:13: ( merge_update_insert_seq )?
            	if ( stream_merge_update_insert_seq.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_update_insert_seq.nextTree());
            	}
            	stream_merge_update_insert_seq.reset();

            	// OracleDML.g:672:38: ( merge_insert_update_seq )?
            	if ( stream_merge_insert_update_seq.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_insert_update_seq.nextTree());
            	}
            	stream_merge_insert_update_seq.reset();

            	// OracleDML.g:673:13: ( error_logging_clause )?
            	if ( stream_error_logging_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_clause.nextTree());
            	}
            	stream_error_logging_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_statementEx; /* Prevent compiler warnings */
    rulemerge_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_statement */

/**
 * $ANTLR start merge_update_insert_seq
 * OracleDML.g:677:1: merge_update_insert_seq : merge_update_clause ( merge_insert_clause )? ;
 */
OracleDML::merge_update_insert_seq_return
OracleDML::merge_update_insert_seq()
{
    OracleDML::merge_update_insert_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::merge_update_clause_return merge_update_clause486;
    ImplTraits::TreeTypePtr::pointer merge_update_clause486_last = NULL;
    OracleDML::merge_insert_clause_return merge_insert_clause487;
    ImplTraits::TreeTypePtr::pointer merge_insert_clause487_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:678:5: ( merge_update_clause ( merge_insert_clause )? )
        // OracleDML.g:678:7: merge_update_clause ( merge_insert_clause )?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_merge_update_clause_in_merge_update_insert_seq6628);
            merge_update_clause486=merge_update_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_insert_seqEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_update_clause486.tree);


            // OracleDML.g:678:27: ( merge_insert_clause )?
            {
                ANTLR_UINT32 alt169=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHEN:
                    	{
                    		alt169=1;
                    	}
                        break;
                }

                switch (alt169)
                {
            	case 1:
            	    // OracleDML.g:678:27: merge_insert_clause
            	    {
            	        this->followPush(FOLLOW_merge_insert_clause_in_merge_update_insert_seq6630);
            	        merge_insert_clause487=merge_insert_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_insert_seqEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_insert_clause487.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_update_insert_seqEx; /* Prevent compiler warnings */
    rulemerge_update_insert_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_update_insert_seq */

/**
 * $ANTLR start merge_insert_update_seq
 * OracleDML.g:681:1: merge_insert_update_seq : merge_insert_clause ( merge_update_clause )? ;
 */
OracleDML::merge_insert_update_seq_return
OracleDML::merge_insert_update_seq()
{
    OracleDML::merge_insert_update_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::merge_insert_clause_return merge_insert_clause488;
    ImplTraits::TreeTypePtr::pointer merge_insert_clause488_last = NULL;
    OracleDML::merge_update_clause_return merge_update_clause489;
    ImplTraits::TreeTypePtr::pointer merge_update_clause489_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:682:5: ( merge_insert_clause ( merge_update_clause )? )
        // OracleDML.g:682:7: merge_insert_clause ( merge_update_clause )?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_merge_insert_clause_in_merge_insert_update_seq6648);
            merge_insert_clause488=merge_insert_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_update_seqEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_insert_clause488.tree);


            // OracleDML.g:682:27: ( merge_update_clause )?
            {
                ANTLR_UINT32 alt170=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHEN:
                    	{
                    		alt170=1;
                    	}
                        break;
                }

                switch (alt170)
                {
            	case 1:
            	    // OracleDML.g:682:27: merge_update_clause
            	    {
            	        this->followPush(FOLLOW_merge_update_clause_in_merge_insert_update_seq6650);
            	        merge_update_clause489=merge_update_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_update_seqEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_update_clause489.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_insert_update_seqEx; /* Prevent compiler warnings */
    rulemerge_insert_update_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_insert_update_seq */

/**
 * $ANTLR start merge_update_clause
 * OracleDML.g:685:1: merge_update_clause : when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )? -> ^( MERGE_UPDATE[$when_key.start] matched_key then_key update_key set_key ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) ;
 */
OracleDML::merge_update_clause_return
OracleDML::merge_update_clause()
{
    OracleDML::merge_update_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA496 = NULL;
    OracleDML_OracleDMLKeys::when_key_return when_key490;
    ImplTraits::TreeTypePtr::pointer when_key490_last = NULL;
    OracleDML_OracleDMLKeys::matched_key_return matched_key491;
    ImplTraits::TreeTypePtr::pointer matched_key491_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key492;
    ImplTraits::TreeTypePtr::pointer then_key492_last = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key493;
    ImplTraits::TreeTypePtr::pointer update_key493_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key494;
    ImplTraits::TreeTypePtr::pointer set_key494_last = NULL;
    OracleDML::merge_element_return merge_element495;
    ImplTraits::TreeTypePtr::pointer merge_element495_last = NULL;
    OracleDML::merge_element_return merge_element497;
    ImplTraits::TreeTypePtr::pointer merge_element497_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause498;
    ImplTraits::TreeTypePtr::pointer where_clause498_last = NULL;
    OracleDML::merge_update_delete_part_return merge_update_delete_part499;
    ImplTraits::TreeTypePtr::pointer merge_update_delete_part499_last = NULL;
    ImplTraits::TreeTypePtr COMMA496_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_then_key(get_psrstate()->get_treeAdaptor(), "rule then_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_update_delete_part(get_psrstate()->get_treeAdaptor(), "rule merge_update_delete_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_element(get_psrstate()->get_treeAdaptor(), "rule merge_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_where_clause(get_psrstate()->get_treeAdaptor(), "rule where_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_set_key(get_psrstate()->get_treeAdaptor(), "rule set_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_key(get_psrstate()->get_treeAdaptor(), "rule update_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_when_key(get_psrstate()->get_treeAdaptor(), "rule when_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_matched_key(get_psrstate()->get_treeAdaptor(), "rule matched_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:686:5: ( when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )? -> ^( MERGE_UPDATE[$when_key.start] matched_key then_key update_key set_key ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) )
        // OracleDML.g:686:10: when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )?
        {
            this->followPush(FOLLOW_when_key_in_merge_update_clause6671);
            when_key490=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                when_key490_last = when_key490.tree.get();
                stream_when_key.add(when_key490.tree);
            }

            this->followPush(FOLLOW_matched_key_in_merge_update_clause6673);
            matched_key491=matched_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                matched_key491_last = matched_key491.tree.get();
                stream_matched_key.add(matched_key491.tree);
            }

            this->followPush(FOLLOW_then_key_in_merge_update_clause6675);
            then_key492=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                then_key492_last = then_key492.tree.get();
                stream_then_key.add(then_key492.tree);
            }

            this->followPush(FOLLOW_update_key_in_merge_update_clause6677);
            update_key493=update_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                update_key493_last = update_key493.tree.get();
                stream_update_key.add(update_key493.tree);
            }

            this->followPush(FOLLOW_set_key_in_merge_update_clause6679);
            set_key494=set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                set_key494_last = set_key494.tree.get();
                stream_set_key.add(set_key494.tree);
            }

            this->followPush(FOLLOW_merge_element_in_merge_update_clause6690);
            merge_element495=merge_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                merge_element495_last = merge_element495.tree.get();
                stream_merge_element.add(merge_element495.tree);
            }

            // OracleDML.g:687:23: ( COMMA merge_element )*

            for (;;)
            {
                ANTLR_UINT32 alt171=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt171=1;
                	}
                    break;

                }

                switch (alt171)
                {
            	case 1:
            	    // OracleDML.g:687:24: COMMA merge_element
            	    {
            	        COMMA496 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_merge_update_clause6693);
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA496);


            	        this->followPush(FOLLOW_merge_element_in_merge_update_clause6695);
            	        merge_element497=merge_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_element497_last = merge_element497.tree.get();
            	            stream_merge_element.add(merge_element497.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop171;	/* break out of the loop */
            	    break;
                }
            }
            loop171: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:688:9: ( where_clause )?
            {
                ANTLR_UINT32 alt172=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt172=1;
                    	}
                        break;
                }

                switch (alt172)
                {
            	case 1:
            	    // OracleDML.g:688:9: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_merge_update_clause6707);
            	        where_clause498=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            where_clause498_last = where_clause498.tree.get();
            	            stream_where_clause.add(where_clause498.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:688:23: ( merge_update_delete_part )?
            {
                ANTLR_UINT32 alt173=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_DELETE:
                    	{
                    		alt173=1;
                    	}
                        break;
                }

                switch (alt173)
                {
            	case 1:
            	    // OracleDML.g:688:23: merge_update_delete_part
            	    {
            	        this->followPush(FOLLOW_merge_update_delete_part_in_merge_update_clause6710);
            	        merge_update_delete_part499=merge_update_delete_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_update_delete_part499_last = merge_update_delete_part499.tree.get();
            	            stream_merge_update_delete_part.add(merge_update_delete_part499.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: then_key, where_clause, merge_element, set_key, update_key, matched_key, merge_update_delete_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 689:9: -> ^( MERGE_UPDATE[$when_key.start] matched_key then_key update_key set_key ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
            {
            	// OracleDML.g:689:11: ^( MERGE_UPDATE[$when_key.start] matched_key then_key update_key set_key ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MERGE_UPDATE, (when_key490.start)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_matched_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_then_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_set_key.nextTree());
            	if ( !(stream_merge_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "merge_element empty" );
            		goto rulemerge_update_clauseEx;
            	}
            	while ( stream_merge_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_element.nextTree());
            	}
            	stream_merge_element.reset();

            	// OracleDML.g:689:98: ( where_clause )?
            	if ( stream_where_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_where_clause.nextTree());
            	}
            	stream_where_clause.reset();

            	// OracleDML.g:689:112: ( merge_update_delete_part )?
            	if ( stream_merge_update_delete_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_update_delete_part.nextTree());
            	}
            	stream_merge_update_delete_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_update_clauseEx; /* Prevent compiler warnings */
    rulemerge_update_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_update_clause */

/**
 * $ANTLR start merge_element
 * OracleDML.g:692:1: merge_element : column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) ;
 */
OracleDML::merge_element_return
OracleDML::merge_element()
{
    OracleDML::merge_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP501 = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name500;
    ImplTraits::TreeTypePtr::pointer column_name500_last = NULL;
    OracleDML::expression_return expression502;
    ImplTraits::TreeTypePtr::pointer expression502_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP501_tree;
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:693:5: ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) )
        // OracleDML.g:693:10: column_name EQUALS_OP expression
        {
            this->followPush(FOLLOW_column_name_in_merge_element6762);
            column_name500=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                column_name500_last = column_name500.tree.get();
                stream_column_name.add(column_name500.tree);
            }

            EQUALS_OP501 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_merge_element6764);
            if  (this->hasException())
            {
                goto rulemerge_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP501);


            this->followPush(FOLLOW_expression_in_merge_element6766);
            expression502=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression502_last = expression502.tree.get();
                stream_expression.add(expression502.tree);
            }

            // AST REWRITE
            // elements: column_name, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 694:9: -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
            {
            	// OracleDML.g:694:12: ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ASSIGN, EQUALS_OP501), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	// OracleDML.g:694:45: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_elementEx; /* Prevent compiler warnings */
    rulemerge_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_element */

/**
 * $ANTLR start merge_update_delete_part
 * OracleDML.g:697:1: merge_update_delete_part : delete_key ^ where_clause ;
 */
OracleDML::merge_update_delete_part_return
OracleDML::merge_update_delete_part()
{
    OracleDML::merge_update_delete_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::delete_key_return delete_key503;
    ImplTraits::TreeTypePtr::pointer delete_key503_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause504;
    ImplTraits::TreeTypePtr::pointer where_clause504_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:698:5: ( delete_key ^ where_clause )
        // OracleDML.g:698:10: delete_key ^ where_clause
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_delete_key_in_merge_update_delete_part6809);
            delete_key503=delete_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_delete_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(delete_key503.tree, root_0);

            this->followPush(FOLLOW_where_clause_in_merge_update_delete_part6812);
            where_clause504=where_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_delete_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, where_clause504.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_update_delete_partEx; /* Prevent compiler warnings */
    rulemerge_update_delete_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_update_delete_part */

/**
 * $ANTLR start merge_insert_clause
 * OracleDML.g:701:1: merge_insert_clause : when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )? -> ^( MERGE_INSERT[$when_key.start] not_key matched_key then_key insert_key ^( COLUMNS ( column_name )* ) values_key expression_list ( where_clause )? ) ;
 */
OracleDML::merge_insert_clause_return
OracleDML::merge_insert_clause()
{
    OracleDML::merge_insert_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN510 = NULL;
    ImplTraits::CommonTokenType const* COMMA512 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN514 = NULL;
    OracleDML_OracleDMLKeys::when_key_return when_key505;
    ImplTraits::TreeTypePtr::pointer when_key505_last = NULL;
    OracleDML_OracleDMLKeys::not_key_return not_key506;
    ImplTraits::TreeTypePtr::pointer not_key506_last = NULL;
    OracleDML_OracleDMLKeys::matched_key_return matched_key507;
    ImplTraits::TreeTypePtr::pointer matched_key507_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key508;
    ImplTraits::TreeTypePtr::pointer then_key508_last = NULL;
    OracleDML_OracleDMLKeys::insert_key_return insert_key509;
    ImplTraits::TreeTypePtr::pointer insert_key509_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name511;
    ImplTraits::TreeTypePtr::pointer column_name511_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name513;
    ImplTraits::TreeTypePtr::pointer column_name513_last = NULL;
    OracleDML_OracleDMLKeys::values_key_return values_key515;
    ImplTraits::TreeTypePtr::pointer values_key515_last = NULL;
    OracleDML::expression_list_return expression_list516;
    ImplTraits::TreeTypePtr::pointer expression_list516_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause517;
    ImplTraits::TreeTypePtr::pointer where_clause517_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN510_tree;
    ImplTraits::TreeTypePtr COMMA512_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN514_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_then_key(get_psrstate()->get_treeAdaptor(), "rule then_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_list(get_psrstate()->get_treeAdaptor(), "rule expression_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_insert_key(get_psrstate()->get_treeAdaptor(), "rule insert_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_values_key(get_psrstate()->get_treeAdaptor(), "rule values_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_where_clause(get_psrstate()->get_treeAdaptor(), "rule where_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_not_key(get_psrstate()->get_treeAdaptor(), "rule not_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_when_key(get_psrstate()->get_treeAdaptor(), "rule when_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_matched_key(get_psrstate()->get_treeAdaptor(), "rule matched_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:702:5: ( when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )? -> ^( MERGE_INSERT[$when_key.start] not_key matched_key then_key insert_key ^( COLUMNS ( column_name )* ) values_key expression_list ( where_clause )? ) )
        // OracleDML.g:702:10: when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )?
        {
            this->followPush(FOLLOW_when_key_in_merge_insert_clause6832);
            when_key505=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                when_key505_last = when_key505.tree.get();
                stream_when_key.add(when_key505.tree);
            }

            this->followPush(FOLLOW_not_key_in_merge_insert_clause6834);
            not_key506=not_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                not_key506_last = not_key506.tree.get();
                stream_not_key.add(not_key506.tree);
            }

            this->followPush(FOLLOW_matched_key_in_merge_insert_clause6836);
            matched_key507=matched_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                matched_key507_last = matched_key507.tree.get();
                stream_matched_key.add(matched_key507.tree);
            }

            this->followPush(FOLLOW_then_key_in_merge_insert_clause6838);
            then_key508=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                then_key508_last = then_key508.tree.get();
                stream_then_key.add(then_key508.tree);
            }

            this->followPush(FOLLOW_insert_key_in_merge_insert_clause6840);
            insert_key509=insert_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                insert_key509_last = insert_key509.tree.get();
                stream_insert_key.add(insert_key509.tree);
            }

            // OracleDML.g:703:9: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            {
                ANTLR_UINT32 alt175=2;
                switch ( this->LA(1) )
                {
                    case LEFT_PAREN:
                    	{
                    		alt175=1;
                    	}
                        break;
                }

                switch (alt175)
                {
            	case 1:
            	    // OracleDML.g:703:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN510 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_merge_insert_clause6852);
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN510);


            	        this->followPush(FOLLOW_column_name_in_merge_insert_clause6854);
            	        column_name511=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name511_last = column_name511.tree.get();
            	            stream_column_name.add(column_name511.tree);
            	        }

            	        // OracleDML.g:703:33: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt174=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt174=1;
            	            	}
            	                break;

            	            }

            	            switch (alt174)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:703:34: COMMA column_name
            	        	    {
            	        	        COMMA512 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_merge_insert_clause6857);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemerge_insert_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA512);


            	        	        this->followPush(FOLLOW_column_name_in_merge_insert_clause6859);
            	        	        column_name513=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemerge_insert_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name513_last = column_name513.tree.get();
            	        	            stream_column_name.add(column_name513.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop174;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop174: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN514 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_merge_insert_clause6863);
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN514);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_values_key_in_merge_insert_clause6875);
            values_key515=values_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                values_key515_last = values_key515.tree.get();
                stream_values_key.add(values_key515.tree);
            }

            this->followPush(FOLLOW_expression_list_in_merge_insert_clause6877);
            expression_list516=expression_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression_list516_last = expression_list516.tree.get();
                stream_expression_list.add(expression_list516.tree);
            }

            // OracleDML.g:704:36: ( where_clause )?
            {
                ANTLR_UINT32 alt176=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt176=1;
                    	}
                        break;
                }

                switch (alt176)
                {
            	case 1:
            	    // OracleDML.g:704:36: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_merge_insert_clause6879);
            	        where_clause517=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            where_clause517_last = where_clause517.tree.get();
            	            stream_where_clause.add(where_clause517.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: then_key, values_key, where_clause, not_key, column_name, insert_key, matched_key, expression_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 705:9: -> ^( MERGE_INSERT[$when_key.start] not_key matched_key then_key insert_key ^( COLUMNS ( column_name )* ) values_key expression_list ( where_clause )? )
            {
            	// OracleDML.g:705:12: ^( MERGE_INSERT[$when_key.start] not_key matched_key then_key insert_key ^( COLUMNS ( column_name )* ) values_key expression_list ( where_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MERGE_INSERT, (when_key505.start)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_not_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_matched_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_then_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_insert_key.nextTree());
            	// OracleDML.g:705:84: ^( COLUMNS ( column_name )* )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(COLUMNS, "COLUMNS"), root_2);
            	// OracleDML.g:705:94: ( column_name )*
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_values_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_list.nextTree());
            	// OracleDML.g:705:135: ( where_clause )?
            	if ( stream_where_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_where_clause.nextTree());
            	}
            	stream_where_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_insert_clauseEx; /* Prevent compiler warnings */
    rulemerge_insert_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_insert_clause */

/**
 * $ANTLR start selected_tableview
 * OracleDML.g:708:1: selected_tableview : ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )? -> ^( SELECTED_TABLEVIEW ( tableview_name )? ( select_statement )? ( table_alias )? ) ;
 */
OracleDML::selected_tableview_return
OracleDML::selected_tableview()
{
    OracleDML::selected_tableview_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN519 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN521 = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name518;
    ImplTraits::TreeTypePtr::pointer tableview_name518_last = NULL;
    OracleDML::select_statement_return select_statement520;
    ImplTraits::TreeTypePtr::pointer select_statement520_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias522;
    ImplTraits::TreeTypePtr::pointer table_alias522_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN519_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN521_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:709:5: ( ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )? -> ^( SELECTED_TABLEVIEW ( tableview_name )? ( select_statement )? ( table_alias )? ) )
        // OracleDML.g:709:10: ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )?
        {
            // OracleDML.g:709:10: ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN )
            {
                ANTLR_UINT32 alt177=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt177=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt177=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 177 );
                    ex->set_state( 0 );


                    goto ruleselected_tableviewEx;

                }

                switch (alt177)
                {
            	case 1:
            	    // OracleDML.g:709:12: tableview_name
            	    {
            	        this->followPush(FOLLOW_tableview_name_in_selected_tableview6940);
            	        tableview_name518=tableview_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            tableview_name518_last = tableview_name518.tree.get();
            	            stream_tableview_name.add(tableview_name518.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:709:29: LEFT_PAREN select_statement RIGHT_PAREN
            	    {
            	        LEFT_PAREN519 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_selected_tableview6944);
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN519);


            	        this->followPush(FOLLOW_select_statement_in_selected_tableview6946);
            	        select_statement520=select_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            select_statement520_last = select_statement520.tree.get();
            	            stream_select_statement.add(select_statement520.tree);
            	        }

            	        RIGHT_PAREN521 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_selected_tableview6948);
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN521);


            	    }
            	    break;

                }
            }

            // OracleDML.g:709:70: ( table_alias )?
            {
                ANTLR_UINT32 alt178=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    	{
                    		alt178=1;
                    	}
                        break;
                }

                switch (alt178)
                {
            	case 1:
            	    // OracleDML.g:709:70: table_alias
            	    {
            	        this->followPush(FOLLOW_table_alias_in_selected_tableview6951);
            	        table_alias522=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias522_last = table_alias522.tree.get();
            	            stream_table_alias.add(table_alias522.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: table_alias, tableview_name, select_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 710:9: -> ^( SELECTED_TABLEVIEW ( tableview_name )? ( select_statement )? ( table_alias )? )
            {
            	// OracleDML.g:710:12: ^( SELECTED_TABLEVIEW ( tableview_name )? ( select_statement )? ( table_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECTED_TABLEVIEW, "SELECTED_TABLEVIEW"), root_1);
            	// OracleDML.g:710:33: ( tableview_name )?
            	if ( stream_tableview_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_tableview_name.nextTree());
            	}
            	stream_tableview_name.reset();

            	// OracleDML.g:710:49: ( select_statement )?
            	if ( stream_select_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_statement.nextTree());
            	}
            	stream_select_statement.reset();

            	// OracleDML.g:710:67: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleselected_tableviewEx; /* Prevent compiler warnings */
    ruleselected_tableviewEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end selected_tableview */

/**
 * $ANTLR start lock_table_statement
 * OracleDML.g:715:1: lock_table_statement : lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )? -> ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) ;
 */
OracleDML::lock_table_statement_return
OracleDML::lock_table_statement()
{
    OracleDML::lock_table_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA526 = NULL;
    OracleDML_OracleDMLKeys::lock_key_return lock_key523;
    ImplTraits::TreeTypePtr::pointer lock_key523_last = NULL;
    OracleDML_OracleDMLKeys::table_key_return table_key524;
    ImplTraits::TreeTypePtr::pointer table_key524_last = NULL;
    OracleDML::lock_table_element_return lock_table_element525;
    ImplTraits::TreeTypePtr::pointer lock_table_element525_last = NULL;
    OracleDML::lock_table_element_return lock_table_element527;
    ImplTraits::TreeTypePtr::pointer lock_table_element527_last = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key528;
    ImplTraits::TreeTypePtr::pointer in_key528_last = NULL;
    OracleDML::lock_mode_return lock_mode529;
    ImplTraits::TreeTypePtr::pointer lock_mode529_last = NULL;
    OracleDML_OracleDMLKeys::mode_key_return mode_key530;
    ImplTraits::TreeTypePtr::pointer mode_key530_last = NULL;
    OracleDML::wait_nowait_part_return wait_nowait_part531;
    ImplTraits::TreeTypePtr::pointer wait_nowait_part531_last = NULL;
    ImplTraits::TreeTypePtr COMMA526_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_lock_table_element(get_psrstate()->get_treeAdaptor(), "rule lock_table_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_mode_key(get_psrstate()->get_treeAdaptor(), "rule mode_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_key(get_psrstate()->get_treeAdaptor(), "rule table_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_lock_mode(get_psrstate()->get_treeAdaptor(), "rule lock_mode");
    RewriteRuleSubtreeStream<ImplTraits> stream_wait_nowait_part(get_psrstate()->get_treeAdaptor(), "rule wait_nowait_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_lock_key(get_psrstate()->get_treeAdaptor(), "rule lock_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:716:5: ( lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )? -> ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) )
        // OracleDML.g:716:10: lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )?
        {
            this->followPush(FOLLOW_lock_key_in_lock_table_statement6997);
            lock_key523=lock_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                lock_key523_last = lock_key523.tree.get();
                stream_lock_key.add(lock_key523.tree);
            }

            this->followPush(FOLLOW_table_key_in_lock_table_statement6999);
            table_key524=table_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_key524_last = table_key524.tree.get();
                stream_table_key.add(table_key524.tree);
            }

            this->followPush(FOLLOW_lock_table_element_in_lock_table_statement7010);
            lock_table_element525=lock_table_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                lock_table_element525_last = lock_table_element525.tree.get();
                stream_lock_table_element.add(lock_table_element525.tree);
            }

            // OracleDML.g:717:28: ( COMMA lock_table_element )*

            for (;;)
            {
                ANTLR_UINT32 alt179=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt179=1;
                	}
                    break;

                }

                switch (alt179)
                {
            	case 1:
            	    // OracleDML.g:717:29: COMMA lock_table_element
            	    {
            	        COMMA526 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_lock_table_statement7013);
            	        if  (this->hasException())
            	        {
            	            goto rulelock_table_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA526);


            	        this->followPush(FOLLOW_lock_table_element_in_lock_table_statement7015);
            	        lock_table_element527=lock_table_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelock_table_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            lock_table_element527_last = lock_table_element527.tree.get();
            	            stream_lock_table_element.add(lock_table_element527.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop179;	/* break out of the loop */
            	    break;
                }
            }
            loop179: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_in_key_in_lock_table_statement7028);
            in_key528=in_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                in_key528_last = in_key528.tree.get();
                stream_in_key.add(in_key528.tree);
            }

            this->followPush(FOLLOW_lock_mode_in_lock_table_statement7030);
            lock_mode529=lock_mode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                lock_mode529_last = lock_mode529.tree.get();
                stream_lock_mode.add(lock_mode529.tree);
            }

            this->followPush(FOLLOW_mode_key_in_lock_table_statement7032);
            mode_key530=mode_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                mode_key530_last = mode_key530.tree.get();
                stream_mode_key.add(mode_key530.tree);
            }

            // OracleDML.g:718:35: ( wait_nowait_part )?
            {
                ANTLR_UINT32 alt180=2;
                {
                    ANTLR_UINT32 LA180_0 = this->LA(1);
                    if ( (LA180_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "WAIT")))
                    {
                        alt180=1;
                    }
                    else if ( (LA180_0 == PLSQL_RESERVED_NOWAIT))
                    {
                        alt180=1;
                    }
                }
                switch (alt180)
                {
            	case 1:
            	    // OracleDML.g:718:35: wait_nowait_part
            	    {
            	        this->followPush(FOLLOW_wait_nowait_part_in_lock_table_statement7034);
            	        wait_nowait_part531=wait_nowait_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelock_table_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            wait_nowait_part531_last = wait_nowait_part531.tree.get();
            	            stream_wait_nowait_part.add(wait_nowait_part531.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: wait_nowait_part, lock_key, lock_table_element, lock_mode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 719:9: -> ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
            {
            	// OracleDML.g:719:12: ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_lock_key.nextNode(), root_1);
            	if ( !(stream_lock_table_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "lock_table_element empty" );
            		goto rulelock_table_statementEx;
            	}
            	while ( stream_lock_table_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_lock_table_element.nextTree());
            	}
            	stream_lock_table_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_lock_mode.nextTree());
            	// OracleDML.g:719:53: ( wait_nowait_part )?
            	if ( stream_wait_nowait_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_wait_nowait_part.nextTree());
            	}
            	stream_wait_nowait_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelock_table_statementEx; /* Prevent compiler warnings */
    rulelock_table_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end lock_table_statement */

/**
 * $ANTLR start wait_nowait_part
 * OracleDML.g:722:1: wait_nowait_part : ( wait_key expression -> ^( wait_key ^( EXPR expression ) ) | nowait_key );
 */
OracleDML::wait_nowait_part_return
OracleDML::wait_nowait_part()
{
    OracleDML::wait_nowait_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::wait_key_return wait_key532;
    ImplTraits::TreeTypePtr::pointer wait_key532_last = NULL;
    OracleDML::expression_return expression533;
    ImplTraits::TreeTypePtr::pointer expression533_last = NULL;
    OracleDML_OracleDMLKeys::nowait_key_return nowait_key534;
    ImplTraits::TreeTypePtr::pointer nowait_key534_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_wait_key(get_psrstate()->get_treeAdaptor(), "rule wait_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:723:5: ( wait_key expression -> ^( wait_key ^( EXPR expression ) ) | nowait_key )

            ANTLR_UINT32 alt181;

            alt181=2;

            {
                ANTLR_UINT32 LA181_0 = this->LA(1);
                if ( (LA181_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "WAIT")))
                {
                    alt181=1;
                }
                else if ( (LA181_0 == PLSQL_RESERVED_NOWAIT))
                {
                    alt181=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 181 );
                    ex->set_state( 0 );


                    goto rulewait_nowait_partEx;

                }
            }
            switch (alt181)
            {
        	case 1:
        	    // OracleDML.g:723:10: wait_key expression
        	    {
        	        this->followPush(FOLLOW_wait_key_in_wait_nowait_part7077);
        	        wait_key532=wait_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewait_nowait_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            wait_key532_last = wait_key532.tree.get();
        	            stream_wait_key.add(wait_key532.tree);
        	        }

        	        this->followPush(FOLLOW_expression_in_wait_nowait_part7079);
        	        expression533=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewait_nowait_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression533_last = expression533.tree.get();
        	            stream_expression.add(expression533.tree);
        	        }

        	        // AST REWRITE
        	        // elements: wait_key, expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 723:30: -> ^( wait_key ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:723:33: ^( wait_key ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_wait_key.nextNode(), root_1);
        	        	// OracleDML.g:723:44: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:724:10: nowait_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_nowait_key_in_wait_nowait_part7102);
        	        nowait_key534=nowait_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewait_nowait_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nowait_key534.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulewait_nowait_partEx; /* Prevent compiler warnings */
    rulewait_nowait_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end wait_nowait_part */

/**
 * $ANTLR start lock_table_element
 * OracleDML.g:729:1: lock_table_element : tableview_name ( partition_extension_clause )? -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) ;
 */
OracleDML::lock_table_element_return
OracleDML::lock_table_element()
{
    OracleDML::lock_table_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLCommons::tableview_name_return tableview_name535;
    ImplTraits::TreeTypePtr::pointer tableview_name535_last = NULL;
    OracleDML_OracleDMLCommons::partition_extension_clause_return partition_extension_clause536;
    ImplTraits::TreeTypePtr::pointer partition_extension_clause536_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_partition_extension_clause(get_psrstate()->get_treeAdaptor(), "rule partition_extension_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:730:5: ( tableview_name ( partition_extension_clause )? -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) )
        // OracleDML.g:730:10: tableview_name ( partition_extension_clause )?
        {
            this->followPush(FOLLOW_tableview_name_in_lock_table_element7124);
            tableview_name535=tableview_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                tableview_name535_last = tableview_name535.tree.get();
                stream_tableview_name.add(tableview_name535.tree);
            }

            // OracleDML.g:730:25: ( partition_extension_clause )?
            {
                ANTLR_UINT32 alt182=2;
                {
                    ANTLR_UINT32 LA182_0 = this->LA(1);
                    if ( (LA182_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "SUBPARTITION")))))
                    {
                        alt182=1;
                    }
                }
                switch (alt182)
                {
            	case 1:
            	    // OracleDML.g:730:25: partition_extension_clause
            	    {
            	        this->followPush(FOLLOW_partition_extension_clause_in_lock_table_element7126);
            	        partition_extension_clause536=partition_extension_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelock_table_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            partition_extension_clause536_last = partition_extension_clause536.tree.get();
            	            stream_partition_extension_clause.add(partition_extension_clause536.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: tableview_name, partition_extension_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 731:9: -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
            {
            	// OracleDML.g:731:12: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOCK_TABLE_ELEMENT, "LOCK_TABLE_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_tableview_name.nextTree());
            	// OracleDML.g:731:48: ( partition_extension_clause )?
            	if ( stream_partition_extension_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_partition_extension_clause.nextTree());
            	}
            	stream_partition_extension_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelock_table_elementEx; /* Prevent compiler warnings */
    rulelock_table_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end lock_table_element */

/**
 * $ANTLR start lock_mode
 * OracleDML.g:734:1: lock_mode : ( row_key share_key | row_key exclusive_key | share_key ( update_key )? | share_key row_key exclusive_key | exclusive_key );
 */
OracleDML::lock_mode_return
OracleDML::lock_mode()
{
    OracleDML::lock_mode_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::row_key_return row_key537;
    ImplTraits::TreeTypePtr::pointer row_key537_last = NULL;
    OracleDML_OracleDMLKeys::share_key_return share_key538;
    ImplTraits::TreeTypePtr::pointer share_key538_last = NULL;
    OracleDML_OracleDMLKeys::row_key_return row_key539;
    ImplTraits::TreeTypePtr::pointer row_key539_last = NULL;
    OracleDML_OracleDMLKeys::exclusive_key_return exclusive_key540;
    ImplTraits::TreeTypePtr::pointer exclusive_key540_last = NULL;
    OracleDML_OracleDMLKeys::share_key_return share_key541;
    ImplTraits::TreeTypePtr::pointer share_key541_last = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key542;
    ImplTraits::TreeTypePtr::pointer update_key542_last = NULL;
    OracleDML_OracleDMLKeys::share_key_return share_key543;
    ImplTraits::TreeTypePtr::pointer share_key543_last = NULL;
    OracleDML_OracleDMLKeys::row_key_return row_key544;
    ImplTraits::TreeTypePtr::pointer row_key544_last = NULL;
    OracleDML_OracleDMLKeys::exclusive_key_return exclusive_key545;
    ImplTraits::TreeTypePtr::pointer exclusive_key545_last = NULL;
    OracleDML_OracleDMLKeys::exclusive_key_return exclusive_key546;
    ImplTraits::TreeTypePtr::pointer exclusive_key546_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:735:5: ( row_key share_key | row_key exclusive_key | share_key ( update_key )? | share_key row_key exclusive_key | exclusive_key )

            ANTLR_UINT32 alt184;

            alt184=5;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case PLSQL_RESERVED_SHARE:
            			{
            				alt184=1;
            			}
            		    break;
            		case PLSQL_RESERVED_EXCLUSIVE:
            			{
            				alt184=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 184 );
            		    ex->set_state( 1 );


            		    goto rulelock_modeEx;

            		}

            	}
                break;
            case PLSQL_RESERVED_SHARE:
            	{
            		switch ( this->LA(2) )
            		{
            		case PLSQL_RESERVED_MODE:
            		case SQL92_RESERVED_UPDATE:
            			{
            				alt184=3;
            			}
            		    break;
            		case REGULAR_ID:
            			{
            				alt184=4;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 184 );
            		    ex->set_state( 2 );


            		    goto rulelock_modeEx;

            		}

            	}
                break;
            case PLSQL_RESERVED_EXCLUSIVE:
            	{
            		alt184=5;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 184 );
                ex->set_state( 0 );


                goto rulelock_modeEx;

            }

            switch (alt184)
            {
        	case 1:
        	    // OracleDML.g:735:10: row_key share_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_row_key_in_lock_mode7166);
        	        row_key537=row_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, row_key537.tree);


        	        this->followPush(FOLLOW_share_key_in_lock_mode7168);
        	        share_key538=share_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, share_key538.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:736:10: row_key exclusive_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_row_key_in_lock_mode7179);
        	        row_key539=row_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, row_key539.tree);


        	        this->followPush(FOLLOW_exclusive_key_in_lock_mode7181);
        	        exclusive_key540=exclusive_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, exclusive_key540.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:737:10: share_key ( update_key )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_share_key_in_lock_mode7192);
        	        share_key541=share_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, share_key541.tree);


        	        // OracleDML.g:737:20: ( update_key )?
        	        {
        	            ANTLR_UINT32 alt183=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_UPDATE:
        	                	{
        	                		alt183=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt183)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:737:20: update_key
        	        	    {
        	        	        this->followPush(FOLLOW_update_key_in_lock_mode7194);
        	        	        update_key542=update_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelock_modeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, update_key542.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:738:10: share_key row_key exclusive_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_share_key_in_lock_mode7206);
        	        share_key543=share_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, share_key543.tree);


        	        this->followPush(FOLLOW_row_key_in_lock_mode7208);
        	        row_key544=row_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, row_key544.tree);


        	        this->followPush(FOLLOW_exclusive_key_in_lock_mode7210);
        	        exclusive_key545=exclusive_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, exclusive_key545.tree);


        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:739:10: exclusive_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_exclusive_key_in_lock_mode7221);
        	        exclusive_key546=exclusive_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, exclusive_key546.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulelock_modeEx; /* Prevent compiler warnings */
    rulelock_modeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end lock_mode */

/**
 * $ANTLR start general_table_ref
 * OracleDML.g:745:1: general_table_ref : ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )? -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? ) ;
 */
OracleDML::general_table_ref_return
OracleDML::general_table_ref()
{
    OracleDML::general_table_ref_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN549 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN551 = NULL;
    OracleDML::dml_table_expression_clause_return dml_table_expression_clause547;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause547_last = NULL;
    OracleDML_OracleDMLKeys::only_key_return only_key548;
    ImplTraits::TreeTypePtr::pointer only_key548_last = NULL;
    OracleDML::dml_table_expression_clause_return dml_table_expression_clause550;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause550_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias552;
    ImplTraits::TreeTypePtr::pointer table_alias552_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN549_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN551_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_dml_table_expression_clause(get_psrstate()->get_treeAdaptor(), "rule dml_table_expression_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_only_key(get_psrstate()->get_treeAdaptor(), "rule only_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:746:5: ( ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )? -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? ) )
        // OracleDML.g:746:10: ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )?
        {
            // OracleDML.g:746:10: ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN )
            {
                ANTLR_UINT32 alt185=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case LEFT_PAREN:
                case SQL92_RESERVED_TABLE:
                case SQL92_RESERVED_THE:
                	{
                		alt185=1;
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA185_5 = this->LA(2);
                		    if ( (!( ((toUpper(LT(1)->getText()) == "ONLY")) )))
                		    {
                		        alt185=1;
                		    }
                		    else if ( ((toUpper(LT(1)->getText()) == "ONLY")))
                		    {
                		        alt185=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 185 );
                		        ex->set_state( 5 );


                		        goto rulegeneral_table_refEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 185 );
                    ex->set_state( 0 );


                    goto rulegeneral_table_refEx;

                }

                switch (alt185)
                {
            	case 1:
            	    // OracleDML.g:746:15: dml_table_expression_clause
            	    {
            	        this->followPush(FOLLOW_dml_table_expression_clause_in_general_table_ref7249);
            	        dml_table_expression_clause547=dml_table_expression_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            dml_table_expression_clause547_last = dml_table_expression_clause547.tree.get();
            	            stream_dml_table_expression_clause.add(dml_table_expression_clause547.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:747:14: only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN
            	    {
            	        this->followPush(FOLLOW_only_key_in_general_table_ref7264);
            	        only_key548=only_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            only_key548_last = only_key548.tree.get();
            	            stream_only_key.add(only_key548.tree);
            	        }

            	        LEFT_PAREN549 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_general_table_ref7266);
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN549);


            	        this->followPush(FOLLOW_dml_table_expression_clause_in_general_table_ref7268);
            	        dml_table_expression_clause550=dml_table_expression_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            dml_table_expression_clause550_last = dml_table_expression_clause550.tree.get();
            	            stream_dml_table_expression_clause.add(dml_table_expression_clause550.tree);
            	        }

            	        RIGHT_PAREN551 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_general_table_ref7270);
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN551);


            	    }
            	    break;

                }
            }

            // OracleDML.g:748:14: ( table_alias )?
            {
                ANTLR_UINT32 alt186=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		alt186=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA186_2 = this->LA(2);
                    		    if ( (!( ((((toUpper(LT(1)->getText()) == "RETURN"))||((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "LOG"))||((toUpper(LT(1)->getText()) == "RETURNING")))) )))
                    		    {
                    		        alt186=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt186)
                {
            	case 1:
            	    // OracleDML.g:748:14: table_alias
            	    {
            	        this->followPush(FOLLOW_table_alias_in_general_table_ref7285);
            	        table_alias552=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias552_last = table_alias552.tree.get();
            	            stream_table_alias.add(table_alias552.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: table_alias, only_key, dml_table_expression_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 749:9: -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? )
            {
            	// OracleDML.g:749:12: ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF, "TABLE_REF"), root_1);
            	// OracleDML.g:749:24: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_dml_table_expression_clause.nextTree());
            	// OracleDML.g:749:65: ( only_key )?
            	if ( stream_only_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_only_key.nextTree());
            	}
            	stream_only_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulegeneral_table_refEx; /* Prevent compiler warnings */
    rulegeneral_table_refEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end general_table_ref */

/**
 * $ANTLR start static_returning_clause
 * OracleDML.g:752:1: static_returning_clause : ( returning_key | return_key ) expression ( COMMA expression )* into_clause -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause ) ;
 */
OracleDML::static_returning_clause_return
OracleDML::static_returning_clause()
{
    OracleDML::static_returning_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA556 = NULL;
    OracleDML_OracleDMLKeys::returning_key_return returning_key553;
    ImplTraits::TreeTypePtr::pointer returning_key553_last = NULL;
    OracleDML_OracleDMLKeys::return_key_return return_key554;
    ImplTraits::TreeTypePtr::pointer return_key554_last = NULL;
    OracleDML::expression_return expression555;
    ImplTraits::TreeTypePtr::pointer expression555_last = NULL;
    OracleDML::expression_return expression557;
    ImplTraits::TreeTypePtr::pointer expression557_last = NULL;
    OracleDML_OracleDMLCommons::into_clause_return into_clause558;
    ImplTraits::TreeTypePtr::pointer into_clause558_last = NULL;
    ImplTraits::TreeTypePtr COMMA556_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_returning_key(get_psrstate()->get_treeAdaptor(), "rule returning_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_return_key(get_psrstate()->get_treeAdaptor(), "rule return_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_clause(get_psrstate()->get_treeAdaptor(), "rule into_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:753:5: ( ( returning_key | return_key ) expression ( COMMA expression )* into_clause -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause ) )
        // OracleDML.g:753:10: ( returning_key | return_key ) expression ( COMMA expression )* into_clause
        {
            // OracleDML.g:753:10: ( returning_key | return_key )
            {
                ANTLR_UINT32 alt187=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA187_1 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "RETURNING")))
                		    {
                		        alt187=1;
                		    }
                		    else if ( ((toUpper(LT(1)->getText()) == "RETURN")))
                		    {
                		        alt187=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 187 );
                		        ex->set_state( 1 );


                		        goto rulestatic_returning_clauseEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 187 );
                    ex->set_state( 0 );


                    goto rulestatic_returning_clauseEx;

                }

                switch (alt187)
                {
            	case 1:
            	    // OracleDML.g:753:11: returning_key
            	    {
            	        this->followPush(FOLLOW_returning_key_in_static_returning_clause7329);
            	        returning_key553=returning_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestatic_returning_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            returning_key553_last = returning_key553.tree.get();
            	            stream_returning_key.add(returning_key553.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:753:25: return_key
            	    {
            	        this->followPush(FOLLOW_return_key_in_static_returning_clause7331);
            	        return_key554=return_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestatic_returning_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            return_key554_last = return_key554.tree.get();
            	            stream_return_key.add(return_key554.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_expression_in_static_returning_clause7334);
            expression555=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestatic_returning_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression555_last = expression555.tree.get();
                stream_expression.add(expression555.tree);
            }

            // OracleDML.g:753:48: ( COMMA expression )*

            for (;;)
            {
                ANTLR_UINT32 alt188=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt188=1;
                	}
                    break;

                }

                switch (alt188)
                {
            	case 1:
            	    // OracleDML.g:753:49: COMMA expression
            	    {
            	        COMMA556 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_static_returning_clause7337);
            	        if  (this->hasException())
            	        {
            	            goto rulestatic_returning_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA556);


            	        this->followPush(FOLLOW_expression_in_static_returning_clause7339);
            	        expression557=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestatic_returning_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression557_last = expression557.tree.get();
            	            stream_expression.add(expression557.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop188;	/* break out of the loop */
            	    break;
                }
            }
            loop188: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_into_clause_in_static_returning_clause7352);
            into_clause558=into_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestatic_returning_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                into_clause558_last = into_clause558.tree.get();
                stream_into_clause.add(into_clause558.tree);
            }

            // AST REWRITE
            // elements: into_clause, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 755:9: -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause )
            {
            	// OracleDML.g:755:12: ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(STATIC_RETURNING, "STATIC_RETURNING"), root_1);
            	if ( !(stream_expression.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "expression empty" );
            		goto rulestatic_returning_clauseEx;
            	}
            	while ( stream_expression.hasNext() ) {
            		// OracleDML.g:755:31: ^( EXPR expression )
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_expression.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_into_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestatic_returning_clauseEx; /* Prevent compiler warnings */
    rulestatic_returning_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end static_returning_clause */

/**
 * $ANTLR start error_logging_clause
 * OracleDML.g:758:1: error_logging_clause : log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )? -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? ) ;
 */
OracleDML::error_logging_clause_return
OracleDML::error_logging_clause()
{
    OracleDML::error_logging_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::log_key_return log_key559;
    ImplTraits::TreeTypePtr::pointer log_key559_last = NULL;
    OracleDML_OracleDMLKeys::errors_key_return errors_key560;
    ImplTraits::TreeTypePtr::pointer errors_key560_last = NULL;
    OracleDML::error_logging_into_part_return error_logging_into_part561;
    ImplTraits::TreeTypePtr::pointer error_logging_into_part561_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper562;
    ImplTraits::TreeTypePtr::pointer expression_wrapper562_last = NULL;
    OracleDML::error_logging_reject_part_return error_logging_reject_part563;
    ImplTraits::TreeTypePtr::pointer error_logging_reject_part563_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_reject_part(get_psrstate()->get_treeAdaptor(), "rule error_logging_reject_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_wrapper(get_psrstate()->get_treeAdaptor(), "rule expression_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_errors_key(get_psrstate()->get_treeAdaptor(), "rule errors_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_into_part(get_psrstate()->get_treeAdaptor(), "rule error_logging_into_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_log_key(get_psrstate()->get_treeAdaptor(), "rule log_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:759:5: ( log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )? -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? ) )
        // OracleDML.g:759:10: log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )?
        {
            this->followPush(FOLLOW_log_key_in_error_logging_clause7395);
            log_key559=log_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                log_key559_last = log_key559.tree.get();
                stream_log_key.add(log_key559.tree);
            }

            this->followPush(FOLLOW_errors_key_in_error_logging_clause7397);
            errors_key560=errors_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                errors_key560_last = errors_key560.tree.get();
                stream_errors_key.add(errors_key560.tree);
            }

            // OracleDML.g:760:9: ( error_logging_into_part )?
            {
                ANTLR_UINT32 alt189=2;
                alt189 = cdfa189.predict(this, this->get_rec(), this->get_istream(), cdfa189 );
                if  (this->hasException())
                {
                    goto ruleerror_logging_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                switch (alt189)
                {
            	case 1:
            	    // OracleDML.g:760:9: error_logging_into_part
            	    {
            	        this->followPush(FOLLOW_error_logging_into_part_in_error_logging_clause7408);
            	        error_logging_into_part561=error_logging_into_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_into_part561_last = error_logging_into_part561.tree.get();
            	            stream_error_logging_into_part.add(error_logging_into_part561.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:761:9: ( ( LEFT_PAREN )=> expression_wrapper )?
            {
                ANTLR_UINT32 alt190=2;
                {
                    ANTLR_UINT32 LA190_0 = this->LA(1);
                    if ( (LA190_0 == SQL92_RESERVED_CURSOR) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == SQL92_RESERVED_NOT) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == MINUS_SIGN) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == PLUS_SIGN) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == SQL92_RESERVED_PRIOR) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "REJECT")))
                    {
                        {
                            ANTLR_UINT32 LA190_7 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                            {
                                alt190=1;
                            }
                        }
                    }
                    else if ( (LA190_0 == SQL92_RESERVED_DISTINCT) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == SQL92_RESERVED_ALL) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == DELIMITED_ID) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == SQL92_RESERVED_CASE) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == SQL92_RESERVED_EXISTS) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == SQL92_RESERVED_ANY) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == PLSQL_NON_RESERVED_CAST) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == INTRODUCER) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == BINDVAR) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == COLON) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == APPROXIMATE_NUM_LIT || LA190_0 == EXACT_NUM_LIT || LA190_0 == UNSIGNED_INTEGER) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == SQL92_RESERVED_DATE) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (((LA190_0 >= CHAR_STRING) && (LA190_0 <= CHAR_STRING_PERL)) || LA190_0 == NATIONAL_CHAR_STRING_LIT) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == SQL92_RESERVED_NULL) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == SQL92_RESERVED_TRUE) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == SQL92_RESERVED_FALSE) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == SQL92_RESERVED_DEFAULT) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt190=1;
                    }
                    else if ( (LA190_0 == LEFT_PAREN))
                    {
                        {
                            ANTLR_UINT32 LA190_25 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                            {
                                alt190=1;
                            }
                        }
                    }
                }
                switch (alt190)
                {
            	case 1:
            	    // OracleDML.g:761:10: ( LEFT_PAREN )=> expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_error_logging_clause7425);
            	        expression_wrapper562=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_wrapper562_last = expression_wrapper562.tree.get();
            	            stream_expression_wrapper.add(expression_wrapper562.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:762:9: ( error_logging_reject_part )?
            {
                ANTLR_UINT32 alt191=2;
                {
                    ANTLR_UINT32 LA191_0 = this->LA(1);
                    if ( (LA191_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "REJECT")))
                    {
                        alt191=1;
                    }
                }
                switch (alt191)
                {
            	case 1:
            	    // OracleDML.g:762:9: error_logging_reject_part
            	    {
            	        this->followPush(FOLLOW_error_logging_reject_part_in_error_logging_clause7437);
            	        error_logging_reject_part563=error_logging_reject_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_reject_part563_last = error_logging_reject_part563.tree.get();
            	            stream_error_logging_reject_part.add(error_logging_reject_part563.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: error_logging_into_part, expression_wrapper, log_key, error_logging_reject_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 763:9: -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? )
            {
            	// OracleDML.g:763:12: ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_log_key.nextNode(), root_1);
            	// OracleDML.g:763:22: ( error_logging_into_part )?
            	if ( stream_error_logging_into_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_into_part.nextTree());
            	}
            	stream_error_logging_into_part.reset();

            	// OracleDML.g:763:47: ( expression_wrapper )?
            	if ( stream_expression_wrapper.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_wrapper.nextTree());
            	}
            	stream_expression_wrapper.reset();

            	// OracleDML.g:763:67: ( error_logging_reject_part )?
            	if ( stream_error_logging_reject_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_reject_part.nextTree());
            	}
            	stream_error_logging_reject_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleerror_logging_clauseEx; /* Prevent compiler warnings */
    ruleerror_logging_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end error_logging_clause */

/**
 * $ANTLR start error_logging_into_part
 * OracleDML.g:766:1: error_logging_into_part : into_key ^ tableview_name ;
 */
OracleDML::error_logging_into_part_return
OracleDML::error_logging_into_part()
{
    OracleDML::error_logging_into_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::into_key_return into_key564;
    ImplTraits::TreeTypePtr::pointer into_key564_last = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name565;
    ImplTraits::TreeTypePtr::pointer tableview_name565_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:767:5: ( into_key ^ tableview_name )
        // OracleDML.g:767:10: into_key ^ tableview_name
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_into_key_in_error_logging_into_part7481);
            into_key564=into_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_into_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(into_key564.tree, root_0);

            this->followPush(FOLLOW_tableview_name_in_error_logging_into_part7484);
            tableview_name565=tableview_name();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_into_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, tableview_name565.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleerror_logging_into_partEx; /* Prevent compiler warnings */
    ruleerror_logging_into_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end error_logging_into_part */

/**
 * $ANTLR start error_logging_reject_part
 * OracleDML.g:770:1: error_logging_reject_part : reject_key ^ limit_key ! ( ( unlimited_key )=> unlimited_key | expression_wrapper ) ;
 */
OracleDML::error_logging_reject_part_return
OracleDML::error_logging_reject_part()
{
    OracleDML::error_logging_reject_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::reject_key_return reject_key566;
    ImplTraits::TreeTypePtr::pointer reject_key566_last = NULL;
    OracleDML_OracleDMLKeys::limit_key_return limit_key567;
    ImplTraits::TreeTypePtr::pointer limit_key567_last = NULL;
    OracleDML_OracleDMLKeys::unlimited_key_return unlimited_key568;
    ImplTraits::TreeTypePtr::pointer unlimited_key568_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper569;
    ImplTraits::TreeTypePtr::pointer expression_wrapper569_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:771:5: ( reject_key ^ limit_key ! ( ( unlimited_key )=> unlimited_key | expression_wrapper ) )
        // OracleDML.g:771:10: reject_key ^ limit_key ! ( ( unlimited_key )=> unlimited_key | expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_reject_key_in_error_logging_reject_part7504);
            reject_key566=reject_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_reject_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(reject_key566.tree, root_0);

            this->followPush(FOLLOW_limit_key_in_error_logging_reject_part7507);
            limit_key567=limit_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_reject_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            // OracleDML.g:771:33: ( ( unlimited_key )=> unlimited_key | expression_wrapper )
            {
                ANTLR_UINT32 alt192=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA192_1 = this->LA(2);
                		    if ( (( ((toUpper(LT(1)->getText()) == "UNLIMITED")) && (this->msynpred( antlr3::ClassForwarder<synpred26_OracleDML>() )) )))
                		    {
                		        alt192=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt192=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 192 );
                		        ex->set_state( 1 );


                		        goto ruleerror_logging_reject_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt192=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 192 );
                    ex->set_state( 0 );


                    goto ruleerror_logging_reject_partEx;

                }

                switch (alt192)
                {
            	case 1:
            	    // OracleDML.g:771:34: ( unlimited_key )=> unlimited_key
            	    {
            	        this->followPush(FOLLOW_unlimited_key_in_error_logging_reject_part7515);
            	        unlimited_key568=unlimited_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_reject_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unlimited_key568.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:771:65: expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_error_logging_reject_part7517);
            	        expression_wrapper569=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_reject_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper569.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleerror_logging_reject_partEx; /* Prevent compiler warnings */
    ruleerror_logging_reject_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end error_logging_reject_part */

/**
 * $ANTLR start dml_table_expression_clause
 * OracleDML.g:774:1: dml_table_expression_clause : ( table_collection_expression -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) ) | LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN -> ^( TABLE_EXPRESSION ^( NESTED_SUBQUERY[$LEFT_PAREN] ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN ) ) | tableview_name ( sample_clause )? -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) );
 */
OracleDML::dml_table_expression_clause_return
OracleDML::dml_table_expression_clause()
{
    OracleDML::dml_table_expression_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN571 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN574 = NULL;
    OracleDML::table_collection_expression_return table_collection_expression570;
    ImplTraits::TreeTypePtr::pointer table_collection_expression570_last = NULL;
    OracleDML::select_statement_return select_statement572;
    ImplTraits::TreeTypePtr::pointer select_statement572_last = NULL;
    OracleDML::subquery_restriction_clause_return subquery_restriction_clause573;
    ImplTraits::TreeTypePtr::pointer subquery_restriction_clause573_last = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name575;
    ImplTraits::TreeTypePtr::pointer tableview_name575_last = NULL;
    OracleDML::sample_clause_return sample_clause576;
    ImplTraits::TreeTypePtr::pointer sample_clause576_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN571_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN574_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_sample_clause(get_psrstate()->get_treeAdaptor(), "rule sample_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_collection_expression(get_psrstate()->get_treeAdaptor(), "rule table_collection_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_restriction_clause(get_psrstate()->get_treeAdaptor(), "rule subquery_restriction_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:775:5: ( table_collection_expression -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) ) | LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN -> ^( TABLE_EXPRESSION ^( NESTED_SUBQUERY[$LEFT_PAREN] ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN ) ) | tableview_name ( sample_clause )? -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) )

            ANTLR_UINT32 alt195;

            alt195=3;

            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_TABLE:
            case SQL92_RESERVED_THE:
            	{
            		alt195=1;
            	}
                break;
            case LEFT_PAREN:
            	{
            		alt195=2;
            	}
                break;
            case DELIMITED_ID:
            case INTRODUCER:
            case REGULAR_ID:
            	{
            		alt195=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 195 );
                ex->set_state( 0 );


                goto ruledml_table_expression_clauseEx;

            }

            switch (alt195)
            {
        	case 1:
        	    // OracleDML.g:775:10: table_collection_expression
        	    {
        	        this->followPush(FOLLOW_table_collection_expression_in_dml_table_expression_clause7538);
        	        table_collection_expression570=table_collection_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            table_collection_expression570_last = table_collection_expression570.tree.get();
        	            stream_table_collection_expression.add(table_collection_expression570.tree);
        	        }

        	        // AST REWRITE
        	        // elements: table_collection_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 775:38: -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) )
        	        {
        	        	// OracleDML.g:775:41: ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_EXPRESSION, "TABLE_EXPRESSION"), root_1);
        	        	// OracleDML.g:775:60: ^( COLLECTION_MODE table_collection_expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(COLLECTION_MODE, "COLLECTION_MODE"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_table_collection_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:776:10: LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN
        	    {
        	        LEFT_PAREN571 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7561);
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN571);


        	        this->followPush(FOLLOW_select_statement_in_dml_table_expression_clause7563);
        	        select_statement572=select_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            select_statement572_last = select_statement572.tree.get();
        	            stream_select_statement.add(select_statement572.tree);
        	        }

        	        // OracleDML.g:776:38: ( subquery_restriction_clause )?
        	        {
        	            ANTLR_UINT32 alt193=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_WITH:
        	                	{
        	                		alt193=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt193)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:776:38: subquery_restriction_clause
        	        	    {
        	        	        this->followPush(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7565);
        	        	        subquery_restriction_clause573=subquery_restriction_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruledml_table_expression_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            subquery_restriction_clause573_last = subquery_restriction_clause573.tree.get();
        	        	            stream_subquery_restriction_clause.add(subquery_restriction_clause573.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN574 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7568);
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN574);


        	        // AST REWRITE
        	        // elements: RIGHT_PAREN, subquery_restriction_clause, select_statement
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 777:10: -> ^( TABLE_EXPRESSION ^( NESTED_SUBQUERY[$LEFT_PAREN] ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN ) )
        	        {
        	        	// OracleDML.g:777:13: ^( TABLE_EXPRESSION ^( NESTED_SUBQUERY[$LEFT_PAREN] ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_EXPRESSION, "TABLE_EXPRESSION"), root_1);
        	        	// OracleDML.g:777:32: ^( NESTED_SUBQUERY[$LEFT_PAREN] ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_SUBQUERY, LEFT_PAREN571), root_2);
        	        	// OracleDML.g:777:63: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_MODE, "SELECT_MODE"), root_3);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_select_statement.nextTree());
        	        	// OracleDML.g:777:94: ( subquery_restriction_clause )?
        	        	if ( stream_subquery_restriction_clause.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_subquery_restriction_clause.nextTree());
        	        	}
        	        	stream_subquery_restriction_clause.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_RIGHT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:778:10: tableview_name ( sample_clause )?
        	    {
        	        this->followPush(FOLLOW_tableview_name_in_dml_table_expression_clause7610);
        	        tableview_name575=tableview_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            tableview_name575_last = tableview_name575.tree.get();
        	            stream_tableview_name.add(tableview_name575.tree);
        	        }

        	        // OracleDML.g:778:25: ( sample_clause )?
        	        {
        	            ANTLR_UINT32 alt194=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA194_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "SAMPLE")))
        	                		    {
        	                		        alt194=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt194)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:778:25: sample_clause
        	        	    {
        	        	        this->followPush(FOLLOW_sample_clause_in_dml_table_expression_clause7612);
        	        	        sample_clause576=sample_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruledml_table_expression_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            sample_clause576_last = sample_clause576.tree.get();
        	        	            stream_sample_clause.add(sample_clause576.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: sample_clause, tableview_name
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 778:40: -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) )
        	        {
        	        	// OracleDML.g:778:43: ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_EXPRESSION, "TABLE_EXPRESSION"), root_1);
        	        	// OracleDML.g:778:62: ^( DIRECT_MODE tableview_name ( sample_clause )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DIRECT_MODE, "DIRECT_MODE"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_tableview_name.nextTree());
        	        	// OracleDML.g:778:91: ( sample_clause )?
        	        	if ( stream_sample_clause.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_sample_clause.nextTree());
        	        	}
        	        	stream_sample_clause.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruledml_table_expression_clauseEx; /* Prevent compiler warnings */
    ruledml_table_expression_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end dml_table_expression_clause */

/**
 * $ANTLR start table_collection_expression
 * OracleDML.g:781:1: table_collection_expression : ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN ) -> ^( EXPR ( subquery )? ( expression )? ) ;
 */
OracleDML::table_collection_expression_return
OracleDML::table_collection_expression()
{
    OracleDML::table_collection_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN579 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN581 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN582 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN584 = NULL;
    OracleDML_OracleDMLKeys::table_key_return table_key577;
    ImplTraits::TreeTypePtr::pointer table_key577_last = NULL;
    OracleDML_OracleDMLKeys::the_key_return the_key578;
    ImplTraits::TreeTypePtr::pointer the_key578_last = NULL;
    OracleDML::subquery_return subquery580;
    ImplTraits::TreeTypePtr::pointer subquery580_last = NULL;
    OracleDML::expression_return expression583;
    ImplTraits::TreeTypePtr::pointer expression583_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN579_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN581_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN582_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN584_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_key(get_psrstate()->get_treeAdaptor(), "rule table_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_the_key(get_psrstate()->get_treeAdaptor(), "rule the_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:782:5: ( ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN ) -> ^( EXPR ( subquery )? ( expression )? ) )
        // OracleDML.g:782:10: ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN )
        {
            // OracleDML.g:782:10: ( table_key | the_key )
            {
                ANTLR_UINT32 alt196=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_TABLE:
                	{
                		alt196=1;
                	}
                    break;
                case SQL92_RESERVED_THE:
                	{
                		alt196=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 196 );
                    ex->set_state( 0 );


                    goto ruletable_collection_expressionEx;

                }

                switch (alt196)
                {
            	case 1:
            	    // OracleDML.g:782:12: table_key
            	    {
            	        this->followPush(FOLLOW_table_key_in_table_collection_expression7650);
            	        table_key577=table_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_key577_last = table_key577.tree.get();
            	            stream_table_key.add(table_key577.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:782:24: the_key
            	    {
            	        this->followPush(FOLLOW_the_key_in_table_collection_expression7654);
            	        the_key578=the_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            the_key578_last = the_key578.tree.get();
            	            stream_the_key.add(the_key578.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:783:10: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN )
            {
                ANTLR_UINT32 alt197=2;
                switch ( this->LA(1) )
                {
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA197_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred27_OracleDML>() )))
                		    {
                		        alt197=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt197=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 197 );
                		        ex->set_state( 1 );


                		        goto ruletable_collection_expressionEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 197 );
                    ex->set_state( 0 );


                    goto ruletable_collection_expressionEx;

                }

                switch (alt197)
                {
            	case 1:
            	    // OracleDML.g:783:12: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
            	    {
            	        LEFT_PAREN579 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_table_collection_expression7682);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN579);


            	        this->followPush(FOLLOW_subquery_in_table_collection_expression7684);
            	        subquery580=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery580_last = subquery580.tree.get();
            	            stream_subquery.add(subquery580.tree);
            	        }

            	        RIGHT_PAREN581 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_table_collection_expression7686);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN581);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:784:12: LEFT_PAREN expression RIGHT_PAREN
            	    {
            	        LEFT_PAREN582 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_table_collection_expression7699);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN582);


            	        this->followPush(FOLLOW_expression_in_table_collection_expression7701);
            	        expression583=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression583_last = expression583.tree.get();
            	            stream_expression.add(expression583.tree);
            	        }

            	        RIGHT_PAREN584 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_table_collection_expression7703);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN584);


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: subquery, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 786:9: -> ^( EXPR ( subquery )? ( expression )? )
            {
            	// OracleDML.g:786:12: ^( EXPR ( subquery )? ( expression )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	// OracleDML.g:786:19: ( subquery )?
            	if ( stream_subquery.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	}
            	stream_subquery.reset();

            	// OracleDML.g:786:29: ( expression )?
            	if ( stream_expression.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            	}
            	stream_expression.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_collection_expressionEx; /* Prevent compiler warnings */
    ruletable_collection_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_collection_expression */

/**
 * $ANTLR start subquery_restriction_clause
 * OracleDML.g:789:1: subquery_restriction_clause : with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? ) -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? ) ;
 */
OracleDML::subquery_restriction_clause_return
OracleDML::subquery_restriction_clause()
{
    OracleDML::subquery_restriction_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::with_key_return with_key585;
    ImplTraits::TreeTypePtr::pointer with_key585_last = NULL;
    OracleDML_OracleDMLKeys::read_key_return read_key586;
    ImplTraits::TreeTypePtr::pointer read_key586_last = NULL;
    OracleDML_OracleDMLKeys::only_key_return only_key587;
    ImplTraits::TreeTypePtr::pointer only_key587_last = NULL;
    OracleDML_OracleDMLKeys::check_key_return check_key588;
    ImplTraits::TreeTypePtr::pointer check_key588_last = NULL;
    OracleDML_OracleDMLKeys::option_key_return option_key589;
    ImplTraits::TreeTypePtr::pointer option_key589_last = NULL;
    OracleDML_OracleDMLKeys::constraint_key_return constraint_key590;
    ImplTraits::TreeTypePtr::pointer constraint_key590_last = NULL;
    OracleDML_OracleDMLCommons::constraint_name_return constraint_name591;
    ImplTraits::TreeTypePtr::pointer constraint_name591_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_with_key(get_psrstate()->get_treeAdaptor(), "rule with_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_constraint_key(get_psrstate()->get_treeAdaptor(), "rule constraint_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_check_key(get_psrstate()->get_treeAdaptor(), "rule check_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_option_key(get_psrstate()->get_treeAdaptor(), "rule option_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_constraint_name(get_psrstate()->get_treeAdaptor(), "rule constraint_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_read_key(get_psrstate()->get_treeAdaptor(), "rule read_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_only_key(get_psrstate()->get_treeAdaptor(), "rule only_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:790:5: ( with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? ) -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? ) )
        // OracleDML.g:790:10: with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? )
        {
            this->followPush(FOLLOW_with_key_in_subquery_restriction_clause7756);
            with_key585=with_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubquery_restriction_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                with_key585_last = with_key585.tree.get();
                stream_with_key.add(with_key585.tree);
            }

            // OracleDML.g:791:5: ( read_key only_key | check_key option_key ( constraint_key constraint_name )? )
            {
                ANTLR_UINT32 alt199=2;
                {
                    ANTLR_UINT32 LA199_0 = this->LA(1);
                    if ( (LA199_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "READ")))
                    {
                        alt199=1;
                    }
                    else if ( (LA199_0 == SQL92_RESERVED_CHECK))
                    {
                        alt199=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 199 );
                        ex->set_state( 0 );


                        goto rulesubquery_restriction_clauseEx;

                    }
                }
                switch (alt199)
                {
            	case 1:
            	    // OracleDML.g:791:10: read_key only_key
            	    {
            	        this->followPush(FOLLOW_read_key_in_subquery_restriction_clause7767);
            	        read_key586=read_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_restriction_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            read_key586_last = read_key586.tree.get();
            	            stream_read_key.add(read_key586.tree);
            	        }

            	        this->followPush(FOLLOW_only_key_in_subquery_restriction_clause7769);
            	        only_key587=only_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_restriction_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            only_key587_last = only_key587.tree.get();
            	            stream_only_key.add(only_key587.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:792:10: check_key option_key ( constraint_key constraint_name )?
            	    {
            	        this->followPush(FOLLOW_check_key_in_subquery_restriction_clause7780);
            	        check_key588=check_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_restriction_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            check_key588_last = check_key588.tree.get();
            	            stream_check_key.add(check_key588.tree);
            	        }

            	        this->followPush(FOLLOW_option_key_in_subquery_restriction_clause7782);
            	        option_key589=option_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_restriction_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            option_key589_last = option_key589.tree.get();
            	            stream_option_key.add(option_key589.tree);
            	        }

            	        // OracleDML.g:792:31: ( constraint_key constraint_name )?
            	        {
            	            ANTLR_UINT32 alt198=2;
            	            {
            	                ANTLR_UINT32 LA198_0 = this->LA(1);
            	                if ( (LA198_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "CONSTRAINT")))
            	                {
            	                    alt198=1;
            	                }
            	            }
            	            switch (alt198)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:792:32: constraint_key constraint_name
            	        	    {
            	        	        this->followPush(FOLLOW_constraint_key_in_subquery_restriction_clause7785);
            	        	        constraint_key590=constraint_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesubquery_restriction_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            constraint_key590_last = constraint_key590.tree.get();
            	        	            stream_constraint_key.add(constraint_key590.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_constraint_name_in_subquery_restriction_clause7787);
            	        	        constraint_name591=constraint_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesubquery_restriction_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            constraint_name591_last = constraint_name591.tree.get();
            	        	            stream_constraint_name.add(constraint_name591.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: check_key, read_key, with_key, constraint_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 794:9: -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? )
            {
            	// OracleDML.g:794:12: ^( with_key ( read_key )? ( check_key )? ( constraint_name )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_with_key.nextNode(), root_1);
            	// OracleDML.g:794:23: ( read_key )?
            	if ( stream_read_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_read_key.nextTree());
            	}
            	stream_read_key.reset();

            	// OracleDML.g:794:33: ( check_key )?
            	if ( stream_check_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_check_key.nextTree());
            	}
            	stream_check_key.reset();

            	// OracleDML.g:794:44: ( constraint_name )?
            	if ( stream_constraint_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_constraint_name.nextTree());
            	}
            	stream_constraint_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesubquery_restriction_clauseEx; /* Prevent compiler warnings */
    rulesubquery_restriction_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery_restriction_clause */

/**
 * $ANTLR start sample_clause
 * OracleDML.g:797:1: sample_clause : sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )? -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? ) ;
 */
OracleDML::sample_clause_return
OracleDML::sample_clause()
{
    OracleDML::sample_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN594 = NULL;
    ImplTraits::CommonTokenType const* COMMA595 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN596 = NULL;
    OracleDML::expression_return e1;
    ImplTraits::TreeTypePtr::pointer e1_last = NULL;
    OracleDML::expression_return e2;
    ImplTraits::TreeTypePtr::pointer e2_last = NULL;
    OracleDML_OracleDMLKeys::sample_key_return sample_key592;
    ImplTraits::TreeTypePtr::pointer sample_key592_last = NULL;
    OracleDML_OracleDMLKeys::block_key_return block_key593;
    ImplTraits::TreeTypePtr::pointer block_key593_last = NULL;
    OracleDML::seed_part_return seed_part597;
    ImplTraits::TreeTypePtr::pointer seed_part597_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN594_tree;
    ImplTraits::TreeTypePtr COMMA595_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN596_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_seed_part(get_psrstate()->get_treeAdaptor(), "rule seed_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_sample_key(get_psrstate()->get_treeAdaptor(), "rule sample_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_block_key(get_psrstate()->get_treeAdaptor(), "rule block_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:798:5: ( sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )? -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? ) )
        // OracleDML.g:798:10: sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )?
        {
            this->followPush(FOLLOW_sample_key_in_sample_clause7838);
            sample_key592=sample_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesample_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                sample_key592_last = sample_key592.tree.get();
                stream_sample_key.add(sample_key592.tree);
            }

            // OracleDML.g:798:21: ( block_key )?
            {
                ANTLR_UINT32 alt200=2;
                {
                    ANTLR_UINT32 LA200_0 = this->LA(1);
                    if ( (LA200_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "BLOCK")))
                    {
                        alt200=1;
                    }
                }
                switch (alt200)
                {
            	case 1:
            	    // OracleDML.g:798:21: block_key
            	    {
            	        this->followPush(FOLLOW_block_key_in_sample_clause7840);
            	        block_key593=block_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesample_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            block_key593_last = block_key593.tree.get();
            	            stream_block_key.add(block_key593.tree);
            	        }

            	    }
            	    break;

                }
            }

            LEFT_PAREN594 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_sample_clause7852);
            if  (this->hasException())
            {
                goto rulesample_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN594);


            this->followPush(FOLLOW_expression_in_sample_clause7856);
            e1=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesample_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                e1_last = e1.tree.get();
                stream_expression.add(e1.tree);
            }

            // OracleDML.g:799:34: ( COMMA e2= expression )?
            {
                ANTLR_UINT32 alt201=2;
                switch ( this->LA(1) )
                {
                    case COMMA:
                    	{
                    		alt201=1;
                    	}
                        break;
                }

                switch (alt201)
                {
            	case 1:
            	    // OracleDML.g:799:35: COMMA e2= expression
            	    {
            	        COMMA595 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_sample_clause7859);
            	        if  (this->hasException())
            	        {
            	            goto rulesample_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA595);


            	        this->followPush(FOLLOW_expression_in_sample_clause7863);
            	        e2=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesample_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            e2_last = e2.tree.get();
            	            stream_expression.add(e2.tree);
            	        }

            	    }
            	    break;

                }
            }

            RIGHT_PAREN596 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_sample_clause7867);
            if  (this->hasException())
            {
                goto rulesample_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN596);


            // OracleDML.g:800:9: ( seed_part )?
            {
                ANTLR_UINT32 alt202=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA202_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "SEED")))
                    		    {
                    		        alt202=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt202)
                {
            	case 1:
            	    // OracleDML.g:800:9: seed_part
            	    {
            	        this->followPush(FOLLOW_seed_part_in_sample_clause7877);
            	        seed_part597=seed_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesample_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            seed_part597_last = seed_part597.tree.get();
            	            stream_seed_part.add(seed_part597.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: seed_part, e1, block_key, sample_key, e2
            // token labels: 
            // rule labels: retval, e1, e2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
            RewriteRuleSubtreeStream<ImplTraits> stream_e1(get_psrstate()->get_treeAdaptor(), "rule e1",e1_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_e2(get_psrstate()->get_treeAdaptor(), "rule e2",e2_last); // rewrite alias

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 801:9: -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? )
            {
            	// OracleDML.g:801:12: ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_sample_key.nextNode(), root_1);
            	// OracleDML.g:801:25: ( block_key )?
            	if ( stream_block_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_block_key.nextTree());
            	}
            	stream_block_key.reset();

            	// OracleDML.g:801:36: ^( EXPR $e1)
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_e1.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:801:48: ( ^( EXPR $e2) )?
            	if ( stream_e2.hasNext() ) {
            		// OracleDML.g:801:48: ^( EXPR $e2)
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_e2.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_e2.reset();

            	// OracleDML.g:801:61: ( seed_part )?
            	if ( stream_seed_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_seed_part.nextTree());
            	}
            	stream_seed_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesample_clauseEx; /* Prevent compiler warnings */
    rulesample_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end sample_clause */

/**
 * $ANTLR start seed_part
 * OracleDML.g:804:1: seed_part : seed_key LEFT_PAREN expression RIGHT_PAREN -> ^( seed_key LEFT_PAREN ^( EXPR expression ) RIGHT_PAREN ) ;
 */
OracleDML::seed_part_return
OracleDML::seed_part()
{
    OracleDML::seed_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN599 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN601 = NULL;
    OracleDML_OracleDMLKeys::seed_key_return seed_key598;
    ImplTraits::TreeTypePtr::pointer seed_key598_last = NULL;
    OracleDML::expression_return expression600;
    ImplTraits::TreeTypePtr::pointer expression600_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN599_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN601_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_seed_key(get_psrstate()->get_treeAdaptor(), "rule seed_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:805:5: ( seed_key LEFT_PAREN expression RIGHT_PAREN -> ^( seed_key LEFT_PAREN ^( EXPR expression ) RIGHT_PAREN ) )
        // OracleDML.g:805:10: seed_key LEFT_PAREN expression RIGHT_PAREN
        {
            this->followPush(FOLLOW_seed_key_in_seed_part7933);
            seed_key598=seed_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleseed_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                seed_key598_last = seed_key598.tree.get();
                stream_seed_key.add(seed_key598.tree);
            }

            LEFT_PAREN599 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_seed_part7935);
            if  (this->hasException())
            {
                goto ruleseed_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN599);


            this->followPush(FOLLOW_expression_in_seed_part7937);
            expression600=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleseed_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression600_last = expression600.tree.get();
                stream_expression.add(expression600.tree);
            }

            RIGHT_PAREN601 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_seed_part7939);
            if  (this->hasException())
            {
                goto ruleseed_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN601);


            // AST REWRITE
            // elements: LEFT_PAREN, RIGHT_PAREN, seed_key, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 806:9: -> ^( seed_key LEFT_PAREN ^( EXPR expression ) RIGHT_PAREN )
            {
            	// OracleDML.g:806:12: ^( seed_key LEFT_PAREN ^( EXPR expression ) RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_seed_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
            	// OracleDML.g:806:34: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleseed_partEx; /* Prevent compiler warnings */
    ruleseed_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end seed_part */

/**
 * $ANTLR start cursor_expression
 * OracleDML.g:812:1: cursor_expression : cursor_key LEFT_PAREN subquery RIGHT_PAREN ;
 */
OracleDML::cursor_expression_return
OracleDML::cursor_expression()
{
    OracleDML::cursor_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN603 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN605 = NULL;
    OracleDML_OracleDMLKeys::cursor_key_return cursor_key602;
    ImplTraits::TreeTypePtr::pointer cursor_key602_last = NULL;
    OracleDML::subquery_return subquery604;
    ImplTraits::TreeTypePtr::pointer subquery604_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN603_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN605_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:813:5: ( cursor_key LEFT_PAREN subquery RIGHT_PAREN )
        // OracleDML.g:813:10: cursor_key LEFT_PAREN subquery RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_cursor_key_in_cursor_expression7986);
            cursor_key602=cursor_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecursor_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cursor_key602.tree);


            LEFT_PAREN603 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_cursor_expression7988);
            if  (this->hasException())
            {
                goto rulecursor_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN603_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN603));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN603_tree);
            }


            this->followPush(FOLLOW_subquery_in_cursor_expression7990);
            subquery604=subquery();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecursor_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery604.tree);


            RIGHT_PAREN605 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_cursor_expression7992);
            if  (this->hasException())
            {
                goto rulecursor_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN605_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN605));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN605_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecursor_expressionEx; /* Prevent compiler warnings */
    rulecursor_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cursor_expression */

/**
 * $ANTLR start expression_list
 * OracleDML.g:816:1: expression_list : LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN -> ^( EXPR_LIST[$LEFT_PAREN] ( ^( EXPR expression ) )* RIGHT_PAREN ) ;
 */
OracleDML::expression_list_return
OracleDML::expression_list()
{
    OracleDML::expression_list_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN606 = NULL;
    ImplTraits::CommonTokenType const* COMMA608 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN610 = NULL;
    OracleDML::expression_return expression607;
    ImplTraits::TreeTypePtr::pointer expression607_last = NULL;
    OracleDML::expression_return expression609;
    ImplTraits::TreeTypePtr::pointer expression609_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN606_tree;
    ImplTraits::TreeTypePtr COMMA608_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN610_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:817:5: ( LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN -> ^( EXPR_LIST[$LEFT_PAREN] ( ^( EXPR expression ) )* RIGHT_PAREN ) )
        // OracleDML.g:817:10: LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN
        {
            LEFT_PAREN606 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_expression_list8012);
            if  (this->hasException())
            {
                goto ruleexpression_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN606);


            // OracleDML.g:817:21: ( expression )?
            {
                ANTLR_UINT32 alt203=2;
                switch ( this->LA(1) )
                {
                    case APPROXIMATE_NUM_LIT:
                    case BINDVAR:
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case COLON:
                    case DELIMITED_ID:
                    case EXACT_NUM_LIT:
                    case INTRODUCER:
                    case LEFT_PAREN:
                    case MINUS_SIGN:
                    case NATIONAL_CHAR_STRING_LIT:
                    case PLSQL_NON_RESERVED_CAST:
                    case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                    case PLUS_SIGN:
                    case REGULAR_ID:
                    case SQL92_RESERVED_ALL:
                    case SQL92_RESERVED_ANY:
                    case SQL92_RESERVED_CASE:
                    case SQL92_RESERVED_CURSOR:
                    case SQL92_RESERVED_DATE:
                    case SQL92_RESERVED_DEFAULT:
                    case SQL92_RESERVED_DISTINCT:
                    case SQL92_RESERVED_EXISTS:
                    case SQL92_RESERVED_FALSE:
                    case SQL92_RESERVED_NOT:
                    case SQL92_RESERVED_NULL:
                    case SQL92_RESERVED_PRIOR:
                    case SQL92_RESERVED_TRUE:
                    case UNSIGNED_INTEGER:
                    	{
                    		alt203=1;
                    	}
                        break;
                }

                switch (alt203)
                {
            	case 1:
            	    // OracleDML.g:817:21: expression
            	    {
            	        this->followPush(FOLLOW_expression_in_expression_list8014);
            	        expression607=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression607_last = expression607.tree.get();
            	            stream_expression.add(expression607.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:817:33: ( COMMA expression )*

            for (;;)
            {
                ANTLR_UINT32 alt204=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt204=1;
                	}
                    break;

                }

                switch (alt204)
                {
            	case 1:
            	    // OracleDML.g:817:34: COMMA expression
            	    {
            	        COMMA608 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_expression_list8018);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA608);


            	        this->followPush(FOLLOW_expression_in_expression_list8020);
            	        expression609=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression609_last = expression609.tree.get();
            	            stream_expression.add(expression609.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop204;	/* break out of the loop */
            	    break;
                }
            }
            loop204: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN610 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_expression_list8024);
            if  (this->hasException())
            {
                goto ruleexpression_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN610);


            // AST REWRITE
            // elements: expression, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 818:9: -> ^( EXPR_LIST[$LEFT_PAREN] ( ^( EXPR expression ) )* RIGHT_PAREN )
            {
            	// OracleDML.g:818:12: ^( EXPR_LIST[$LEFT_PAREN] ( ^( EXPR expression ) )* RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, LEFT_PAREN606), root_1);
            	// OracleDML.g:818:37: ( ^( EXPR expression ) )*
            	while ( stream_expression.hasNext() ) {
            		// OracleDML.g:818:37: ^( EXPR expression )
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_expression.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleexpression_listEx; /* Prevent compiler warnings */
    ruleexpression_listEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end expression_list */

/**
 * $ANTLR start condition
 * OracleDML.g:821:1: condition : expression ;
 */
OracleDML::condition_return
OracleDML::condition()
{
    OracleDML::condition_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression611;
    ImplTraits::TreeTypePtr::pointer expression611_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:822:5: ( expression )
        // OracleDML.g:822:11: expression
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_expression_in_condition8069);
            expression611=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression611.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconditionEx; /* Prevent compiler warnings */
    ruleconditionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end condition */

/**
 * $ANTLR start condition_wrapper
 * OracleDML.g:825:1: condition_wrapper : expression -> ^( LOGIC_EXPR expression ) ;
 */
OracleDML::condition_wrapper_return
OracleDML::condition_wrapper()
{
    OracleDML::condition_wrapper_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression612;
    ImplTraits::TreeTypePtr::pointer expression612_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:826:5: ( expression -> ^( LOGIC_EXPR expression ) )
        // OracleDML.g:826:10: expression
        {
            this->followPush(FOLLOW_expression_in_condition_wrapper8089);
            expression612=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecondition_wrapperEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression612_last = expression612.tree.get();
                stream_expression.add(expression612.tree);
            }

            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 827:9: -> ^( LOGIC_EXPR expression )
            {
            	// OracleDML.g:827:12: ^( LOGIC_EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecondition_wrapperEx; /* Prevent compiler warnings */
    rulecondition_wrapperEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end condition_wrapper */

/**
 * $ANTLR start logical_or_expression_seq
 * OracleDML.g:830:1: logical_or_expression_seq : ( or_key ^ logical_and_expression ) ;
 */
OracleDML::logical_or_expression_seq_return
OracleDML::logical_or_expression_seq()
{
    OracleDML::logical_or_expression_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::or_key_return or_key613;
    ImplTraits::TreeTypePtr::pointer or_key613_last = NULL;
    OracleDML::logical_and_expression_return logical_and_expression614;
    ImplTraits::TreeTypePtr::pointer logical_and_expression614_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:831:2: ( ( or_key ^ logical_and_expression ) )
        // OracleDML.g:831:7: ( or_key ^ logical_and_expression )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:831:7: ( or_key ^ logical_and_expression )
            // OracleDML.g:831:8: or_key ^ logical_and_expression
            {
                this->followPush(FOLLOW_or_key_in_logical_or_expression_seq8123);
                or_key613=or_key();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulelogical_or_expression_seqEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(or_key613.tree, root_0);

                this->followPush(FOLLOW_logical_and_expression_in_logical_or_expression_seq8126);
                logical_and_expression614=logical_and_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulelogical_or_expression_seqEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, logical_and_expression614.tree);


            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelogical_or_expression_seqEx; /* Prevent compiler warnings */
    rulelogical_or_expression_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end logical_or_expression_seq */

/**
 * $ANTLR start expression
 * OracleDML.g:834:1: expression : ( ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression -> cursor_expression | logical_and_expression ( logical_or_expression_seq )* -> { mode == 1 }? ^( DISJUNCTION logical_and_expression ( logical_or_expression_seq )* ) -> logical_and_expression );
 */
OracleDML::expression_return
OracleDML::expression()
{
    OracleDML::expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::cursor_expression_return cursor_expression615;
    ImplTraits::TreeTypePtr::pointer cursor_expression615_last = NULL;
    OracleDML::logical_and_expression_return logical_and_expression616;
    ImplTraits::TreeTypePtr::pointer logical_and_expression616_last = NULL;
    OracleDML::logical_or_expression_seq_return logical_or_expression_seq617;
    ImplTraits::TreeTypePtr::pointer logical_or_expression_seq617_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_logical_or_expression_seq(get_psrstate()->get_treeAdaptor(), "rule logical_or_expression_seq");
    RewriteRuleSubtreeStream<ImplTraits> stream_logical_and_expression(get_psrstate()->get_treeAdaptor(), "rule logical_and_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_cursor_expression(get_psrstate()->get_treeAdaptor(), "rule cursor_expression");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:836:5: ( ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression -> cursor_expression | logical_and_expression ( logical_or_expression_seq )* -> { mode == 1 }? ^( DISJUNCTION logical_and_expression ( logical_or_expression_seq )* ) -> logical_and_expression )

            ANTLR_UINT32 alt206;

            alt206=2;

            {
                ANTLR_UINT32 LA206_0 = this->LA(1);
                if ( (LA206_0 == SQL92_RESERVED_CURSOR) && (this->msynpred( antlr3::ClassForwarder<synpred28_OracleDML>() )))
                {
                    alt206=1;
                }
                else if ( (LA206_0 == APPROXIMATE_NUM_LIT || LA206_0 == BINDVAR || ((LA206_0 >= CHAR_STRING) && (LA206_0 <= CHAR_STRING_PERL)) || LA206_0 == COLON || LA206_0 == DELIMITED_ID || LA206_0 == EXACT_NUM_LIT || LA206_0 == INTRODUCER || LA206_0 == LEFT_PAREN || LA206_0 == MINUS_SIGN || LA206_0 == NATIONAL_CHAR_STRING_LIT || ((LA206_0 >= PLSQL_NON_RESERVED_CAST) && (LA206_0 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA206_0 == PLUS_SIGN || LA206_0 == REGULAR_ID || LA206_0 == SQL92_RESERVED_ALL || LA206_0 == SQL92_RESERVED_ANY || LA206_0 == SQL92_RESERVED_CASE || LA206_0 == SQL92_RESERVED_DATE || LA206_0 == SQL92_RESERVED_DEFAULT || LA206_0 == SQL92_RESERVED_DISTINCT || ((LA206_0 >= SQL92_RESERVED_EXISTS) && (LA206_0 <= SQL92_RESERVED_FALSE)) || ((LA206_0 >= SQL92_RESERVED_NOT) && (LA206_0 <= SQL92_RESERVED_NULL)) || LA206_0 == SQL92_RESERVED_PRIOR || LA206_0 == SQL92_RESERVED_TRUE || LA206_0 == UNSIGNED_INTEGER))
                {
                    alt206=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 206 );
                    ex->set_state( 0 );


                    goto ruleexpressionEx;

                }
            }
            switch (alt206)
            {
        	case 1:
        	    // OracleDML.g:836:10: ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression
        	    {
        	        this->followPush(FOLLOW_cursor_expression_in_expression8169);
        	        cursor_expression615=cursor_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            cursor_expression615_last = cursor_expression615.tree.get();
        	            stream_cursor_expression.add(cursor_expression615.tree);
        	        }

        	        // AST REWRITE
        	        // elements: cursor_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 836:77: -> cursor_expression
        	        {
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_cursor_expression.nextTree());
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:837:10: logical_and_expression ( logical_or_expression_seq )*
        	    {
        	        this->followPush(FOLLOW_logical_and_expression_in_expression8184);
        	        logical_and_expression616=logical_and_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            logical_and_expression616_last = logical_and_expression616.tree.get();
        	            stream_logical_and_expression.add(logical_and_expression616.tree);
        	        }

        	        // OracleDML.g:837:33: ( logical_or_expression_seq )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt205=2;
        	            switch ( this->LA(1) )
        	            {
        	            case SQL92_RESERVED_OR:
        	            	{
        	            		alt205=1;
        	            	}
        	                break;

        	            }

        	            switch (alt205)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:837:35: logical_or_expression_seq
        	        	    {
        	        	        this->followPush(FOLLOW_logical_or_expression_seq_in_expression8188);
        	        	        logical_or_expression_seq617=logical_or_expression_seq();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            logical_or_expression_seq617_last = logical_or_expression_seq617.tree.get();
        	        	            stream_logical_or_expression_seq.add(logical_or_expression_seq617.tree);
        	        	        }

        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	            mode = 1; 
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop205;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop205: ; /* Jump out to here if this rule does not match */


        	        // AST REWRITE
        	        // elements: logical_or_expression_seq, logical_and_expression, logical_and_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 838:9: -> { mode == 1 }? ^( DISJUNCTION logical_and_expression ( logical_or_expression_seq )* )
        	        if ( mode == 1 ) {
        	        	// OracleDML.g:838:27: ^( DISJUNCTION logical_and_expression ( logical_or_expression_seq )* )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DISJUNCTION, "DISJUNCTION"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_logical_and_expression.nextTree());
        	        	// OracleDML.g:838:64: ( logical_or_expression_seq )*
        	        	while ( stream_logical_or_expression_seq.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_logical_or_expression_seq.nextTree());
        	        	}
        	        	stream_logical_or_expression_seq.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }

        	        else // 839:9: -> logical_and_expression
        	        {
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_logical_and_expression.nextTree());
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end expression */

/**
 * $ANTLR start expression_wrapper
 * OracleDML.g:842:1: expression_wrapper : expression -> ^( EXPR expression ) ;
 */
OracleDML::expression_wrapper_return
OracleDML::expression_wrapper()
{
    OracleDML::expression_wrapper_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression618;
    ImplTraits::TreeTypePtr::pointer expression618_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:843:5: ( expression -> ^( EXPR expression ) )
        // OracleDML.g:843:10: expression
        {
            this->followPush(FOLLOW_expression_in_expression_wrapper8246);
            expression618=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpression_wrapperEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression618_last = expression618.tree.get();
                stream_expression.add(expression618.tree);
            }

            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 844:9: -> ^( EXPR expression )
            {
            	// OracleDML.g:844:12: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleexpression_wrapperEx; /* Prevent compiler warnings */
    ruleexpression_wrapperEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end expression_wrapper */

/**
 * $ANTLR start logical_and_expression_seq
 * OracleDML.g:847:1: logical_and_expression_seq : ( and_key ^ negated_expression ) ;
 */
OracleDML::logical_and_expression_seq_return
OracleDML::logical_and_expression_seq()
{
    OracleDML::logical_and_expression_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::and_key_return and_key619;
    ImplTraits::TreeTypePtr::pointer and_key619_last = NULL;
    OracleDML::negated_expression_return negated_expression620;
    ImplTraits::TreeTypePtr::pointer negated_expression620_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:848:5: ( ( and_key ^ negated_expression ) )
        // OracleDML.g:848:10: ( and_key ^ negated_expression )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:848:10: ( and_key ^ negated_expression )
            // OracleDML.g:848:11: and_key ^ negated_expression
            {
                this->followPush(FOLLOW_and_key_in_logical_and_expression_seq8283);
                and_key619=and_key();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulelogical_and_expression_seqEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(and_key619.tree, root_0);

                this->followPush(FOLLOW_negated_expression_in_logical_and_expression_seq8286);
                negated_expression620=negated_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulelogical_and_expression_seqEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, negated_expression620.tree);


            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelogical_and_expression_seqEx; /* Prevent compiler warnings */
    rulelogical_and_expression_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end logical_and_expression_seq */

/**
 * $ANTLR start logical_and_expression
 * OracleDML.g:851:1: logical_and_expression : negated_expression ( logical_and_expression_seq )* -> { mode == 1 }? ^( CONJUNCTION negated_expression ( logical_and_expression_seq )* ) -> negated_expression ;
 */
OracleDML::logical_and_expression_return
OracleDML::logical_and_expression()
{
    OracleDML::logical_and_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::negated_expression_return negated_expression621;
    ImplTraits::TreeTypePtr::pointer negated_expression621_last = NULL;
    OracleDML::logical_and_expression_seq_return logical_and_expression_seq622;
    ImplTraits::TreeTypePtr::pointer logical_and_expression_seq622_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_negated_expression(get_psrstate()->get_treeAdaptor(), "rule negated_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_logical_and_expression_seq(get_psrstate()->get_treeAdaptor(), "rule logical_and_expression_seq");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:853:5: ( negated_expression ( logical_and_expression_seq )* -> { mode == 1 }? ^( CONJUNCTION negated_expression ( logical_and_expression_seq )* ) -> negated_expression )
        // OracleDML.g:853:10: negated_expression ( logical_and_expression_seq )*
        {
            this->followPush(FOLLOW_negated_expression_in_logical_and_expression8315);
            negated_expression621=negated_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelogical_and_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                negated_expression621_last = negated_expression621.tree.get();
                stream_negated_expression.add(negated_expression621.tree);
            }

            // OracleDML.g:853:29: ( logical_and_expression_seq )*

            for (;;)
            {
                ANTLR_UINT32 alt207=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_AND:
                	{
                		alt207=1;
                	}
                    break;

                }

                switch (alt207)
                {
            	case 1:
            	    // OracleDML.g:853:30: logical_and_expression_seq
            	    {
            	        this->followPush(FOLLOW_logical_and_expression_seq_in_logical_and_expression8318);
            	        logical_and_expression_seq622=logical_and_expression_seq();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelogical_and_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            logical_and_expression_seq622_last = logical_and_expression_seq622.tree.get();
            	            stream_logical_and_expression_seq.add(logical_and_expression_seq622.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop207;	/* break out of the loop */
            	    break;
                }
            }
            loop207: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: negated_expression, negated_expression, logical_and_expression_seq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 854:10: -> { mode == 1 }? ^( CONJUNCTION negated_expression ( logical_and_expression_seq )* )
            if ( mode == 1 ) {
            	// OracleDML.g:854:28: ^( CONJUNCTION negated_expression ( logical_and_expression_seq )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(CONJUNCTION, "CONJUNCTION"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_negated_expression.nextTree());
            	// OracleDML.g:854:61: ( logical_and_expression_seq )*
            	while ( stream_logical_and_expression_seq.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_logical_and_expression_seq.nextTree());
            	}
            	stream_logical_and_expression_seq.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 855:10: -> negated_expression
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_negated_expression.nextTree());
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelogical_and_expressionEx; /* Prevent compiler warnings */
    rulelogical_and_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end logical_and_expression */

/**
 * $ANTLR start negated_expression
 * OracleDML.g:858:1: negated_expression : ( not_key ^ negated_expression | equality_expression );
 */
OracleDML::negated_expression_return
OracleDML::negated_expression()
{
    OracleDML::negated_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::not_key_return not_key623;
    ImplTraits::TreeTypePtr::pointer not_key623_last = NULL;
    OracleDML::negated_expression_return negated_expression624;
    ImplTraits::TreeTypePtr::pointer negated_expression624_last = NULL;
    OracleDML::equality_expression_return equality_expression625;
    ImplTraits::TreeTypePtr::pointer equality_expression625_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:859:5: ( not_key ^ negated_expression | equality_expression )

            ANTLR_UINT32 alt208;

            alt208=2;

            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_NOT:
            	{
            		alt208=1;
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case REGULAR_ID:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt208=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 208 );
                ex->set_state( 0 );


                goto rulenegated_expressionEx;

            }

            switch (alt208)
            {
        	case 1:
        	    // OracleDML.g:859:10: not_key ^ negated_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_not_key_in_negated_expression8378);
        	        not_key623=not_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenegated_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(not_key623.tree, root_0);

        	        this->followPush(FOLLOW_negated_expression_in_negated_expression8381);
        	        negated_expression624=negated_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenegated_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, negated_expression624.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:860:10: equality_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_equality_expression_in_negated_expression8392);
        	        equality_expression625=equality_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenegated_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, equality_expression625.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulenegated_expressionEx; /* Prevent compiler warnings */
    rulenegated_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end negated_expression */

/**
 * $ANTLR start equality_expression
 * OracleDML.g:863:1: equality_expression : ( multiset_comparsion -> multiset_comparsion ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )? ;
 */
OracleDML::equality_expression_return
OracleDML::equality_expression()
{
    OracleDML::equality_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN638 = NULL;
    ImplTraits::CommonTokenType const* COMMA641 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN643 = NULL;
    OracleDML::multiset_comparsion_return multiset_comparsion626;
    ImplTraits::TreeTypePtr::pointer multiset_comparsion626_last = NULL;
    OracleDML_OracleDMLKeys::is_key_return is_key627;
    ImplTraits::TreeTypePtr::pointer is_key627_last = NULL;
    OracleDML_OracleDMLKeys::not_key_return not_key628;
    ImplTraits::TreeTypePtr::pointer not_key628_last = NULL;
    OracleDML_OracleDMLKeys::null_key_return null_key629;
    ImplTraits::TreeTypePtr::pointer null_key629_last = NULL;
    OracleDML_OracleDMLKeys::nan_key_return nan_key630;
    ImplTraits::TreeTypePtr::pointer nan_key630_last = NULL;
    OracleDML_OracleDMLKeys::present_key_return present_key631;
    ImplTraits::TreeTypePtr::pointer present_key631_last = NULL;
    OracleDML_OracleDMLKeys::infinite_key_return infinite_key632;
    ImplTraits::TreeTypePtr::pointer infinite_key632_last = NULL;
    OracleDML_OracleDMLKeys::a_key_return a_key633;
    ImplTraits::TreeTypePtr::pointer a_key633_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key634;
    ImplTraits::TreeTypePtr::pointer set_key634_last = NULL;
    OracleDML_OracleDMLKeys::empty_key_return empty_key635;
    ImplTraits::TreeTypePtr::pointer empty_key635_last = NULL;
    OracleDML_OracleDMLKeys::of_key_return of_key636;
    ImplTraits::TreeTypePtr::pointer of_key636_last = NULL;
    OracleDML_OracleDMLKeys::type_key_return type_key637;
    ImplTraits::TreeTypePtr::pointer type_key637_last = NULL;
    OracleDML_OracleDMLKeys::only_key_return only_key639;
    ImplTraits::TreeTypePtr::pointer only_key639_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec640;
    ImplTraits::TreeTypePtr::pointer type_spec640_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec642;
    ImplTraits::TreeTypePtr::pointer type_spec642_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN638_tree;
    ImplTraits::TreeTypePtr COMMA641_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN643_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_multiset_comparsion(get_psrstate()->get_treeAdaptor(), "rule multiset_comparsion");
    RewriteRuleSubtreeStream<ImplTraits> stream_type_spec(get_psrstate()->get_treeAdaptor(), "rule type_spec");
    RewriteRuleSubtreeStream<ImplTraits> stream_is_key(get_psrstate()->get_treeAdaptor(), "rule is_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_present_key(get_psrstate()->get_treeAdaptor(), "rule present_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_null_key(get_psrstate()->get_treeAdaptor(), "rule null_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_nan_key(get_psrstate()->get_treeAdaptor(), "rule nan_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_a_key(get_psrstate()->get_treeAdaptor(), "rule a_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_empty_key(get_psrstate()->get_treeAdaptor(), "rule empty_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_not_key(get_psrstate()->get_treeAdaptor(), "rule not_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_set_key(get_psrstate()->get_treeAdaptor(), "rule set_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_infinite_key(get_psrstate()->get_treeAdaptor(), "rule infinite_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_of_key(get_psrstate()->get_treeAdaptor(), "rule of_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_only_key(get_psrstate()->get_treeAdaptor(), "rule only_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_type_key(get_psrstate()->get_treeAdaptor(), "rule type_key");

    /* Initialize rule variables
     */

        int isNegated = false;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:865:5: ( ( multiset_comparsion -> multiset_comparsion ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )? )
        // OracleDML.g:865:10: ( multiset_comparsion -> multiset_comparsion ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )?
        {
            // OracleDML.g:865:10: ( multiset_comparsion -> multiset_comparsion )
            // OracleDML.g:865:11: multiset_comparsion
            {
                this->followPush(FOLLOW_multiset_comparsion_in_equality_expression8421);
                multiset_comparsion626=multiset_comparsion();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleequality_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    multiset_comparsion626_last = multiset_comparsion626.tree.get();
                    stream_multiset_comparsion.add(multiset_comparsion626.tree);
                }

                // AST REWRITE
                // elements: multiset_comparsion
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 865:31: -> multiset_comparsion
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_multiset_comparsion.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:866:5: ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )?
            {
                ANTLR_UINT32 alt214=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_IS:
                    	{
                    		alt214=1;
                    	}
                        break;
                }

                switch (alt214)
                {
            	case 1:
            	    // OracleDML.g:866:10: is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) )
            	    {
            	        this->followPush(FOLLOW_is_key_in_equality_expression8437);
            	        is_key627=is_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleequality_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            is_key627_last = is_key627.tree.get();
            	            stream_is_key.add(is_key627.tree);
            	        }

            	        // OracleDML.g:866:17: ( not_key )?
            	        {
            	            ANTLR_UINT32 alt209=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_NOT:
            	                	{
            	                		alt209=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt209)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:866:18: not_key
            	        	    {
            	        	        this->followPush(FOLLOW_not_key_in_equality_expression8440);
            	        	        not_key628=not_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            not_key628_last = not_key628.tree.get();
            	        	            stream_not_key.add(not_key628.tree);
            	        	        }

            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            isNegated = true;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:867:9: ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) )
            	        {
            	            ANTLR_UINT32 alt213=7;
            	            {
            	                ANTLR_UINT32 LA213_0 = this->LA(1);
            	                if ( (LA213_0 == SQL92_RESERVED_NULL))
            	                {
            	                    alt213=1;
            	                }
            	                else if ( (LA213_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EMPTY"))||((toUpper(LT(1)->getText()) == "PRESENT"))||((toUpper(LT(1)->getText()) == "INFINITE"))||((toUpper(LT(1)->getText()) == "A"))||((toUpper(LT(1)->getText()) == "NAN")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA213_2 = this->LA(2);
            	                        if ( (LA213_2 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "A")))
            	                        {
            	                            alt213=5;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "NAN")))
            	                        {
            	                            alt213=2;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "PRESENT")))
            	                        {
            	                            alt213=3;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "INFINITE")))
            	                        {
            	                            alt213=4;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "EMPTY")))
            	                        {
            	                            alt213=6;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return retval;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 213 );
            	                            ex->set_state( 2 );


            	                            goto ruleequality_expressionEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA213_0 == SQL92_RESERVED_OF))
            	                {
            	                    alt213=7;
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 213 );
            	                    ex->set_state( 0 );


            	                    goto ruleequality_expressionEx;

            	                }
            	            }
            	            switch (alt213)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:867:14: null_key
            	        	    {
            	        	        this->followPush(FOLLOW_null_key_in_equality_expression8459);
            	        	        null_key629=null_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            null_key629_last = null_key629.tree.get();
            	        	            stream_null_key.add(null_key629.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 868:17: -> {isNegated}? ^( IS_NOT_NULL $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:868:33: ^( IS_NOT_NULL $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_NULL, "IS_NOT_NULL"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 869:17: -> ^( IS_NULL $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:869:20: ^( IS_NULL $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NULL, "IS_NULL"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:870:14: nan_key
            	        	    {
            	        	        this->followPush(FOLLOW_nan_key_in_equality_expression8526);
            	        	        nan_key630=nan_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            nan_key630_last = nan_key630.tree.get();
            	        	            stream_nan_key.add(nan_key630.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 871:17: -> {isNegated}? ^( IS_NOT_NAN $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:871:33: ^( IS_NOT_NAN $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_NAN, "IS_NOT_NAN"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 872:17: -> ^( IS_NAN $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:872:20: ^( IS_NAN $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NAN, "IS_NAN"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // OracleDML.g:873:14: present_key
            	        	    {
            	        	        this->followPush(FOLLOW_present_key_in_equality_expression8593);
            	        	        present_key631=present_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            present_key631_last = present_key631.tree.get();
            	        	            stream_present_key.add(present_key631.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 874:17: -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:874:33: ^( IS_NOT_PRESENT $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_PRESENT, "IS_NOT_PRESENT"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 875:17: -> ^( IS_PRESENT $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:875:20: ^( IS_PRESENT $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_PRESENT, "IS_PRESENT"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // OracleDML.g:876:14: infinite_key
            	        	    {
            	        	        this->followPush(FOLLOW_infinite_key_in_equality_expression8660);
            	        	        infinite_key632=infinite_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            infinite_key632_last = infinite_key632.tree.get();
            	        	            stream_infinite_key.add(infinite_key632.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 877:17: -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:877:33: ^( IS_NOT_INFINITE $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_INFINITE, "IS_NOT_INFINITE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 878:17: -> ^( IS_INFINITE $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:878:20: ^( IS_INFINITE $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_INFINITE, "IS_INFINITE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // OracleDML.g:879:14: a_key set_key
            	        	    {
            	        	        this->followPush(FOLLOW_a_key_in_equality_expression8727);
            	        	        a_key633=a_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            a_key633_last = a_key633.tree.get();
            	        	            stream_a_key.add(a_key633.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_set_key_in_equality_expression8729);
            	        	        set_key634=set_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            set_key634_last = set_key634.tree.get();
            	        	            stream_set_key.add(set_key634.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 880:17: -> {isNegated}? ^( IS_NOT_A_SET $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:880:33: ^( IS_NOT_A_SET $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_A_SET, "IS_NOT_A_SET"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 881:17: -> ^( IS_A_SET $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:881:20: ^( IS_A_SET $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_A_SET, "IS_A_SET"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // OracleDML.g:882:14: empty_key
            	        	    {
            	        	        this->followPush(FOLLOW_empty_key_in_equality_expression8796);
            	        	        empty_key635=empty_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            empty_key635_last = empty_key635.tree.get();
            	        	            stream_empty_key.add(empty_key635.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 883:17: -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:883:33: ^( IS_NOT_EMPTY $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_EMPTY, "IS_NOT_EMPTY"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 884:17: -> ^( IS_EMPTY $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:884:20: ^( IS_EMPTY $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_EMPTY, "IS_EMPTY"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 7:
            	        	    // OracleDML.g:885:14: of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN
            	        	    {
            	        	        this->followPush(FOLLOW_of_key_in_equality_expression8863);
            	        	        of_key636=of_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            of_key636_last = of_key636.tree.get();
            	        	            stream_of_key.add(of_key636.tree);
            	        	        }

            	        	        // OracleDML.g:885:21: ( type_key )?
            	        	        {
            	        	            ANTLR_UINT32 alt210=2;
            	        	            {
            	        	                ANTLR_UINT32 LA210_0 = this->LA(1);
            	        	                if ( (LA210_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "TYPE")))
            	        	                {
            	        	                    alt210=1;
            	        	                }
            	        	            }
            	        	            switch (alt210)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:885:21: type_key
            	        	        	    {
            	        	        	        this->followPush(FOLLOW_type_key_in_equality_expression8865);
            	        	        	        type_key637=type_key();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleequality_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            type_key637_last = type_key637.tree.get();
            	        	        	            stream_type_key.add(type_key637.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	        LEFT_PAREN638 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_equality_expression8868);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN638);


            	        	        // OracleDML.g:885:42: ( only_key )?
            	        	        {
            	        	            ANTLR_UINT32 alt211=2;
            	        	            switch ( this->LA(1) )
            	        	            {
            	        	                case REGULAR_ID:
            	        	                	{
            	        	                		{
            	        	                		    ANTLR_UINT32 LA211_1 = this->LA(2);
            	        	                		    if ( ((toUpper(LT(1)->getText()) == "ONLY")))
            	        	                		    {
            	        	                		        alt211=1;
            	        	                		    }
            	        	                		}
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt211)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:885:42: only_key
            	        	        	    {
            	        	        	        this->followPush(FOLLOW_only_key_in_equality_expression8870);
            	        	        	        only_key639=only_key();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleequality_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            only_key639_last = only_key639.tree.get();
            	        	        	            stream_only_key.add(only_key639.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	        this->followPush(FOLLOW_type_spec_in_equality_expression8873);
            	        	        type_spec640=type_spec();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            type_spec640_last = type_spec640.tree.get();
            	        	            stream_type_spec.add(type_spec640.tree);
            	        	        }

            	        	        // OracleDML.g:885:62: ( COMMA type_spec )*

            	        	        for (;;)
            	        	        {
            	        	            ANTLR_UINT32 alt212=2;
            	        	            switch ( this->LA(1) )
            	        	            {
            	        	            case COMMA:
            	        	            	{
            	        	            		alt212=1;
            	        	            	}
            	        	                break;

            	        	            }

            	        	            switch (alt212)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:885:63: COMMA type_spec
            	        	        	    {
            	        	        	        COMMA641 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_equality_expression8876);
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleequality_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }
            	        	        	         
            	        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA641);


            	        	        	        this->followPush(FOLLOW_type_spec_in_equality_expression8878);
            	        	        	        type_spec642=type_spec();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleequality_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            type_spec642_last = type_spec642.tree.get();
            	        	        	            stream_type_spec.add(type_spec642.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop212;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop212: ; /* Jump out to here if this rule does not match */


            	        	        RIGHT_PAREN643 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_equality_expression8882);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN643);


            	        	        // AST REWRITE
            	        	        // elements: type_spec, type_spec, equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 886:17: -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ )
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:886:33: ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_OF_TYPE, "IS_NOT_OF_TYPE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	if ( !(stream_type_spec.hasNext()) ) {
            	        	        		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "type_spec empty" );
            	        	        		goto ruleequality_expressionEx;
            	        	        	}
            	        	        	while ( stream_type_spec.hasNext() ) {
            	        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_type_spec.nextTree());
            	        	        	}
            	        	        	stream_type_spec.reset();

            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 887:17: -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ )
            	        	        {
            	        	        	// OracleDML.g:887:20: ^( IS_OF_TYPE $equality_expression ( type_spec )+ )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_OF_TYPE, "IS_OF_TYPE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	if ( !(stream_type_spec.hasNext()) ) {
            	        	        		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "type_spec empty" );
            	        	        		goto ruleequality_expressionEx;
            	        	        	}
            	        	        	while ( stream_type_spec.hasNext() ) {
            	        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_type_spec.nextTree());
            	        	        	}
            	        	        	stream_type_spec.reset();

            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleequality_expressionEx; /* Prevent compiler warnings */
    ruleequality_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end equality_expression */

/**
 * $ANTLR start multiset_comparsion
 * OracleDML.g:893:1: multiset_comparsion : ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) ) )? ;
 */
OracleDML::multiset_comparsion_return
OracleDML::multiset_comparsion()
{
    OracleDML::multiset_comparsion_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::relational_expression_return relational_expression644;
    ImplTraits::TreeTypePtr::pointer relational_expression644_last = NULL;
    OracleDML::multiset_type_return multiset_type645;
    ImplTraits::TreeTypePtr::pointer multiset_type645_last = NULL;
    OracleDML_OracleDMLKeys::of_key_return of_key646;
    ImplTraits::TreeTypePtr::pointer of_key646_last = NULL;
    OracleDML::concatenation_return concatenation647;
    ImplTraits::TreeTypePtr::pointer concatenation647_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_multiset_type(get_psrstate()->get_treeAdaptor(), "rule multiset_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_relational_expression(get_psrstate()->get_treeAdaptor(), "rule relational_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_of_key(get_psrstate()->get_treeAdaptor(), "rule of_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:894:5: ( ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) ) )? )
        // OracleDML.g:894:10: ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) ) )?
        {
            // OracleDML.g:894:10: ( relational_expression -> relational_expression )
            // OracleDML.g:894:11: relational_expression
            {
                this->followPush(FOLLOW_relational_expression_in_multiset_comparsion8979);
                relational_expression644=relational_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulemultiset_comparsionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    relational_expression644_last = relational_expression644.tree.get();
                    stream_relational_expression.add(relational_expression644.tree);
                }

                // AST REWRITE
                // elements: relational_expression
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 894:33: -> relational_expression
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_relational_expression.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:895:5: ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) ) )?
            {
                ANTLR_UINT32 alt216=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA216_1 = this->LA(2);
                    		    if ( ((((toUpper(LT(1)->getText()) == "SUBMULTISET"))||((toUpper(LT(1)->getText()) == "MEMBER")))))
                    		    {
                    		        alt216=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt216)
                {
            	case 1:
            	    // OracleDML.g:895:10: multiset_type ( of_key )? concatenation
            	    {
            	        this->followPush(FOLLOW_multiset_type_in_multiset_comparsion8995);
            	        multiset_type645=multiset_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiset_comparsionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            multiset_type645_last = multiset_type645.tree.get();
            	            stream_multiset_type.add(multiset_type645.tree);
            	        }

            	        // OracleDML.g:895:24: ( of_key )?
            	        {
            	            ANTLR_UINT32 alt215=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_OF:
            	                	{
            	                		alt215=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt215)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:895:24: of_key
            	        	    {
            	        	        this->followPush(FOLLOW_of_key_in_multiset_comparsion8997);
            	        	        of_key646=of_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemultiset_comparsionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            of_key646_last = of_key646.tree.get();
            	        	            stream_of_key.add(of_key646.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_concatenation_in_multiset_comparsion9000);
            	        concatenation647=concatenation();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiset_comparsionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            concatenation647_last = concatenation647.tree.get();
            	            stream_concatenation.add(concatenation647.tree);
            	        }

            	        // AST REWRITE
            	        // elements: multiset_comparsion, multiset_type, concatenation
            	        // token labels: 
            	        // rule labels: retval
            	        // token list labels: 
            	        // rule list labels: 
            	        // wildcard labels: 
            	        if ( this->get_backtracking()==0 ) {
            	        retval.tree = std::move(root_0);
            	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        // 896:9: -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) )
            	        {
            	        	// OracleDML.g:896:12: ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) )
            	        	{
            	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_multiset_type.nextNode(), root_1);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	// OracleDML.g:896:49: ^( EXPR concatenation )
            	        	{
            	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_concatenation.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	        	}
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	}
            	        }


            	        //retval.tree = std::move(root_0);
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemultiset_comparsionEx; /* Prevent compiler warnings */
    rulemultiset_comparsionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multiset_comparsion */

/**
 * $ANTLR start multiset_type
 * OracleDML.g:899:1: multiset_type : ( member_key | submultiset_key );
 */
OracleDML::multiset_type_return
OracleDML::multiset_type()
{
    OracleDML::multiset_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::member_key_return member_key648;
    ImplTraits::TreeTypePtr::pointer member_key648_last = NULL;
    OracleDML_OracleDMLKeys::submultiset_key_return submultiset_key649;
    ImplTraits::TreeTypePtr::pointer submultiset_key649_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:900:5: ( member_key | submultiset_key )

            ANTLR_UINT32 alt217;

            alt217=2;

            {
                ANTLR_UINT32 LA217_0 = this->LA(1);
                if ( (LA217_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SUBMULTISET"))||((toUpper(LT(1)->getText()) == "MEMBER")))))
                {
                    {
                        ANTLR_UINT32 LA217_1 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "MEMBER")))
                        {
                            alt217=1;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "SUBMULTISET")))
                        {
                            alt217=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 217 );
                            ex->set_state( 1 );


                            goto rulemultiset_typeEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 217 );
                    ex->set_state( 0 );


                    goto rulemultiset_typeEx;

                }
            }
            switch (alt217)
            {
        	case 1:
        	    // OracleDML.g:900:10: member_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_member_key_in_multiset_type9045);
        	        member_key648=member_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiset_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, member_key648.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:901:10: submultiset_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_submultiset_key_in_multiset_type9056);
        	        submultiset_key649=submultiset_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiset_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, submultiset_key649.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulemultiset_typeEx; /* Prevent compiler warnings */
    rulemultiset_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multiset_type */

/**
 * $ANTLR start relational_expression
 * OracleDML.g:904:1: relational_expression : compound_expression ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )* ;
 */
OracleDML::relational_expression_return
OracleDML::relational_expression()
{
    OracleDML::relational_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP651 = NULL;
    ImplTraits::CommonTokenType const* LESS_THAN_OP653 = NULL;
    ImplTraits::CommonTokenType const* GREATER_THAN_OP654 = NULL;
    OracleDML::compound_expression_return compound_expression650;
    ImplTraits::TreeTypePtr::pointer compound_expression650_last = NULL;
    OracleDML_OracleDMLCommons::not_equal_op_return not_equal_op652;
    ImplTraits::TreeTypePtr::pointer not_equal_op652_last = NULL;
    OracleDML_OracleDMLCommons::less_than_or_equals_op_return less_than_or_equals_op655;
    ImplTraits::TreeTypePtr::pointer less_than_or_equals_op655_last = NULL;
    OracleDML_OracleDMLCommons::greater_than_or_equals_op_return greater_than_or_equals_op656;
    ImplTraits::TreeTypePtr::pointer greater_than_or_equals_op656_last = NULL;
    OracleDML::compound_expression_return compound_expression657;
    ImplTraits::TreeTypePtr::pointer compound_expression657_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP651_tree;
    ImplTraits::TreeTypePtr LESS_THAN_OP653_tree;
    ImplTraits::TreeTypePtr GREATER_THAN_OP654_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:905:5: ( compound_expression ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )* )
        // OracleDML.g:905:10: compound_expression ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_compound_expression_in_relational_expression9076);
            compound_expression650=compound_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerelational_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, compound_expression650.tree);


            // OracleDML.g:906:5: ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt219=2;
                switch ( this->LA(1) )
                {
                case EQUALS_OP:
                	{
                		alt219=1;
                	}
                    break;
                case NOT_EQUAL_OP:
                	{
                		alt219=1;
                	}
                    break;
                case LESS_THAN_OP:
                	{
                		alt219=1;
                	}
                    break;
                case EXCLAMATION_OPERATOR_PART:
                	{
                		alt219=1;
                	}
                    break;
                case CARRET_OPERATOR_PART:
                	{
                		alt219=1;
                	}
                    break;
                case GREATER_THAN_OP:
                	{
                		alt219=1;
                	}
                    break;
                case LESS_THAN_OR_EQUALS_OP:
                	{
                		alt219=1;
                	}
                    break;
                case GREATER_THAN_OR_EQUALS_OP:
                	{
                		alt219=1;
                	}
                    break;

                }

                switch (alt219)
                {
            	case 1:
            	    // OracleDML.g:906:7: ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression
            	    {
            	        // OracleDML.g:906:7: ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^)
            	        {
            	            ANTLR_UINT32 alt218=6;
            	            switch ( this->LA(1) )
            	            {
            	            case EQUALS_OP:
            	            	{
            	            		alt218=1;
            	            	}
            	                break;
            	            case CARRET_OPERATOR_PART:
            	            case EXCLAMATION_OPERATOR_PART:
            	            case NOT_EQUAL_OP:
            	            	{
            	            		alt218=2;
            	            	}
            	                break;
            	            case LESS_THAN_OP:
            	            	{
            	            		switch ( this->LA(2) )
            	            		{
            	            		case GREATER_THAN_OP:
            	            			{
            	            				alt218=2;
            	            			}
            	            		    break;
            	            		case EQUALS_OP:
            	            			{
            	            				alt218=5;
            	            			}
            	            		    break;
            	            		case APPROXIMATE_NUM_LIT:
            	            		case BINDVAR:
            	            		case CHAR_STRING:
            	            		case CHAR_STRING_PERL:
            	            		case COLON:
            	            		case DELIMITED_ID:
            	            		case EXACT_NUM_LIT:
            	            		case INTRODUCER:
            	            		case LEFT_PAREN:
            	            		case MINUS_SIGN:
            	            		case NATIONAL_CHAR_STRING_LIT:
            	            		case PLSQL_NON_RESERVED_CAST:
            	            		case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            	            		case PLUS_SIGN:
            	            		case REGULAR_ID:
            	            		case SQL92_RESERVED_ALL:
            	            		case SQL92_RESERVED_ANY:
            	            		case SQL92_RESERVED_CASE:
            	            		case SQL92_RESERVED_DATE:
            	            		case SQL92_RESERVED_DEFAULT:
            	            		case SQL92_RESERVED_DISTINCT:
            	            		case SQL92_RESERVED_EXISTS:
            	            		case SQL92_RESERVED_FALSE:
            	            		case SQL92_RESERVED_NULL:
            	            		case SQL92_RESERVED_PRIOR:
            	            		case SQL92_RESERVED_TRUE:
            	            		case UNSIGNED_INTEGER:
            	            			{
            	            				alt218=3;
            	            			}
            	            		    break;

            	            		default:
            	            		    if (this->get_backtracking()>0)
            	            		    {
            	            		        this->set_failedflag( true );
            	            		        return retval;
            	            		    }

            	            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		    ex->set_decisionNum( 218 );
            	            		    ex->set_state( 3 );


            	            		    goto rulerelational_expressionEx;

            	            		}

            	            	}
            	                break;
            	            case GREATER_THAN_OP:
            	            	{
            	            		switch ( this->LA(2) )
            	            		{
            	            		case EQUALS_OP:
            	            			{
            	            				alt218=6;
            	            			}
            	            		    break;
            	            		case APPROXIMATE_NUM_LIT:
            	            		case BINDVAR:
            	            		case CHAR_STRING:
            	            		case CHAR_STRING_PERL:
            	            		case COLON:
            	            		case DELIMITED_ID:
            	            		case EXACT_NUM_LIT:
            	            		case INTRODUCER:
            	            		case LEFT_PAREN:
            	            		case MINUS_SIGN:
            	            		case NATIONAL_CHAR_STRING_LIT:
            	            		case PLSQL_NON_RESERVED_CAST:
            	            		case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            	            		case PLUS_SIGN:
            	            		case REGULAR_ID:
            	            		case SQL92_RESERVED_ALL:
            	            		case SQL92_RESERVED_ANY:
            	            		case SQL92_RESERVED_CASE:
            	            		case SQL92_RESERVED_DATE:
            	            		case SQL92_RESERVED_DEFAULT:
            	            		case SQL92_RESERVED_DISTINCT:
            	            		case SQL92_RESERVED_EXISTS:
            	            		case SQL92_RESERVED_FALSE:
            	            		case SQL92_RESERVED_NULL:
            	            		case SQL92_RESERVED_PRIOR:
            	            		case SQL92_RESERVED_TRUE:
            	            		case UNSIGNED_INTEGER:
            	            			{
            	            				alt218=4;
            	            			}
            	            		    break;

            	            		default:
            	            		    if (this->get_backtracking()>0)
            	            		    {
            	            		        this->set_failedflag( true );
            	            		        return retval;
            	            		    }

            	            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		    ex->set_decisionNum( 218 );
            	            		    ex->set_state( 4 );


            	            		    goto rulerelational_expressionEx;

            	            		}

            	            	}
            	                break;
            	            case LESS_THAN_OR_EQUALS_OP:
            	            	{
            	            		alt218=5;
            	            	}
            	                break;
            	            case GREATER_THAN_OR_EQUALS_OP:
            	            	{
            	            		alt218=6;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 218 );
            	                ex->set_state( 0 );


            	                goto rulerelational_expressionEx;

            	            }

            	            switch (alt218)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:906:9: EQUALS_OP ^
            	        	    {
            	        	        EQUALS_OP651 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_relational_expression9086);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        EQUALS_OP651_tree = get_psrstate()->get_treeAdaptor()->create(EQUALS_OP651);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(EQUALS_OP651_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:906:22: not_equal_op ^
            	        	    {
            	        	        this->followPush(FOLLOW_not_equal_op_in_relational_expression9091);
            	        	        not_equal_op652=not_equal_op();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(not_equal_op652.tree, root_0);

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // OracleDML.g:906:38: LESS_THAN_OP ^
            	        	    {
            	        	        LESS_THAN_OP653 =  this->matchToken(LESS_THAN_OP, &FOLLOW_LESS_THAN_OP_in_relational_expression9096);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        LESS_THAN_OP653_tree = get_psrstate()->get_treeAdaptor()->create(LESS_THAN_OP653);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(LESS_THAN_OP653_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // OracleDML.g:906:54: GREATER_THAN_OP ^
            	        	    {
            	        	        GREATER_THAN_OP654 =  this->matchToken(GREATER_THAN_OP, &FOLLOW_GREATER_THAN_OP_in_relational_expression9101);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        GREATER_THAN_OP654_tree = get_psrstate()->get_treeAdaptor()->create(GREATER_THAN_OP654);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(GREATER_THAN_OP654_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // OracleDML.g:906:73: less_than_or_equals_op ^
            	        	    {
            	        	        this->followPush(FOLLOW_less_than_or_equals_op_in_relational_expression9106);
            	        	        less_than_or_equals_op655=less_than_or_equals_op();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(less_than_or_equals_op655.tree, root_0);

            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // OracleDML.g:906:99: greater_than_or_equals_op ^
            	        	    {
            	        	        this->followPush(FOLLOW_greater_than_or_equals_op_in_relational_expression9111);
            	        	        greater_than_or_equals_op656=greater_than_or_equals_op();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(greater_than_or_equals_op656.tree, root_0);

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_compound_expression_in_relational_expression9116);
            	        compound_expression657=compound_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerelational_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, compound_expression657.tree);


            	    }
            	    break;

            	default:
            	    goto loop219;	/* break out of the loop */
            	    break;
                }
            }
            loop219: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulerelational_expressionEx; /* Prevent compiler warnings */
    rulerelational_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end relational_expression */

/**
 * $ANTLR start compound_expression
 * OracleDML.g:909:1: compound_expression : ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )? ;
 */
OracleDML::compound_expression_return
OracleDML::compound_expression()
{
    OracleDML::compound_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::concatenation_return concatenation658;
    ImplTraits::TreeTypePtr::pointer concatenation658_last = NULL;
    OracleDML_OracleDMLKeys::not_key_return not_key659;
    ImplTraits::TreeTypePtr::pointer not_key659_last = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key660;
    ImplTraits::TreeTypePtr::pointer in_key660_last = NULL;
    OracleDML::in_elements_return in_elements661;
    ImplTraits::TreeTypePtr::pointer in_elements661_last = NULL;
    OracleDML_OracleDMLKeys::between_key_return between_key662;
    ImplTraits::TreeTypePtr::pointer between_key662_last = NULL;
    OracleDML::between_elements_return between_elements663;
    ImplTraits::TreeTypePtr::pointer between_elements663_last = NULL;
    OracleDML::like_type_return like_type664;
    ImplTraits::TreeTypePtr::pointer like_type664_last = NULL;
    OracleDML::concatenation_return concatenation665;
    ImplTraits::TreeTypePtr::pointer concatenation665_last = NULL;
    OracleDML::like_escape_part_return like_escape_part666;
    ImplTraits::TreeTypePtr::pointer like_escape_part666_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_between_elements(get_psrstate()->get_treeAdaptor(), "rule between_elements");
    RewriteRuleSubtreeStream<ImplTraits> stream_like_escape_part(get_psrstate()->get_treeAdaptor(), "rule like_escape_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_between_key(get_psrstate()->get_treeAdaptor(), "rule between_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_not_key(get_psrstate()->get_treeAdaptor(), "rule not_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_like_type(get_psrstate()->get_treeAdaptor(), "rule like_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_elements(get_psrstate()->get_treeAdaptor(), "rule in_elements");

    /* Initialize rule variables
     */

        int isNegated = false;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:911:5: ( ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )? )
        // OracleDML.g:911:10: ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )?
        {
            // OracleDML.g:911:10: ( concatenation -> concatenation )
            // OracleDML.g:911:11: concatenation
            {
                this->followPush(FOLLOW_concatenation_in_compound_expression9147);
                concatenation658=concatenation();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulecompound_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    concatenation658_last = concatenation658.tree.get();
                    stream_concatenation.add(concatenation658.tree);
                }

                // AST REWRITE
                // elements: concatenation
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 911:25: -> concatenation
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_concatenation.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:912:5: ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )?
            {
                ANTLR_UINT32 alt223=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_NOT:
                    	{
                    		alt223=1;
                    	}
                        break;
                    case SQL92_RESERVED_IN:
                    	{
                    		alt223=1;
                    	}
                        break;
                    case SQL92_RESERVED_BETWEEN:
                    	{
                    		alt223=1;
                    	}
                        break;
                    case SQL92_RESERVED_LIKE:
                    	{
                    		alt223=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA223_5 = this->LA(2);
                    		    if ( ((((toUpper(LT(1)->getText()) == "LIKE4"))||((toUpper(LT(1)->getText()) == "LIKE2"))||((toUpper(LT(1)->getText()) == "LIKEC")))))
                    		    {
                    		        alt223=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt223)
                {
            	case 1:
            	    // OracleDML.g:912:10: ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) )
            	    {
            	        // OracleDML.g:912:10: ( not_key )?
            	        {
            	            ANTLR_UINT32 alt220=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_NOT:
            	                	{
            	                		alt220=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt220)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:912:11: not_key
            	        	    {
            	        	        this->followPush(FOLLOW_not_key_in_compound_expression9164);
            	        	        not_key659=not_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            not_key659_last = not_key659.tree.get();
            	        	            stream_not_key.add(not_key659.tree);
            	        	        }

            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            isNegated = true;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:913:9: ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) )
            	        {
            	            ANTLR_UINT32 alt222=3;
            	            {
            	                ANTLR_UINT32 LA222_0 = this->LA(1);
            	                if ( (LA222_0 == SQL92_RESERVED_IN))
            	                {
            	                    alt222=1;
            	                }
            	                else if ( (LA222_0 == SQL92_RESERVED_BETWEEN))
            	                {
            	                    alt222=2;
            	                }
            	                else if ( (LA222_0 == SQL92_RESERVED_LIKE))
            	                {
            	                    alt222=3;
            	                }
            	                else if ( (LA222_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "LIKE4"))||((toUpper(LT(1)->getText()) == "LIKE2"))||((toUpper(LT(1)->getText()) == "LIKEC")))))
            	                {
            	                    alt222=3;
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 222 );
            	                    ex->set_state( 0 );


            	                    goto rulecompound_expressionEx;

            	                }
            	            }
            	            switch (alt222)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:913:14: in_key in_elements
            	        	    {
            	        	        this->followPush(FOLLOW_in_key_in_compound_expression9184);
            	        	        in_key660=in_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            in_key660_last = in_key660.tree.get();
            	        	            stream_in_key.add(in_key660.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_in_elements_in_compound_expression9186);
            	        	        in_elements661=in_elements();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            in_elements661_last = in_elements661.tree.get();
            	        	            stream_in_elements.add(in_elements661.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: compound_expression, in_elements, compound_expression, in_key, in_elements
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 914:17: -> {isNegated}? ^( NOT_IN $compound_expression in_elements )
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:914:33: ^( NOT_IN $compound_expression in_elements )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NOT_IN, "NOT_IN"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_in_elements.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 915:17: -> ^( in_key $compound_expression in_elements )
            	        	        {
            	        	        	// OracleDML.g:915:20: ^( in_key $compound_expression in_elements )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_in_elements.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:916:14: between_key between_elements
            	        	    {
            	        	        this->followPush(FOLLOW_between_key_in_compound_expression9257);
            	        	        between_key662=between_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            between_key662_last = between_key662.tree.get();
            	        	            stream_between_key.add(between_key662.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_between_elements_in_compound_expression9259);
            	        	        between_elements663=between_elements();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            between_elements663_last = between_elements663.tree.get();
            	        	            stream_between_elements.add(between_elements663.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: between_elements, between_elements, compound_expression, between_key, compound_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 917:17: -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements )
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:917:33: ^( NOT_BETWEEN $compound_expression between_elements )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_between_elements.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 918:17: -> ^( between_key $compound_expression between_elements )
            	        	        {
            	        	        	// OracleDML.g:918:20: ^( between_key $compound_expression between_elements )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_between_key.nextNode(), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_between_elements.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // OracleDML.g:919:14: like_type concatenation ( like_escape_part )?
            	        	    {
            	        	        this->followPush(FOLLOW_like_type_in_compound_expression9330);
            	        	        like_type664=like_type();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            like_type664_last = like_type664.tree.get();
            	        	            stream_like_type.add(like_type664.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_concatenation_in_compound_expression9332);
            	        	        concatenation665=concatenation();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            concatenation665_last = concatenation665.tree.get();
            	        	            stream_concatenation.add(concatenation665.tree);
            	        	        }

            	        	        // OracleDML.g:919:38: ( like_escape_part )?
            	        	        {
            	        	            ANTLR_UINT32 alt221=2;
            	        	            switch ( this->LA(1) )
            	        	            {
            	        	                case REGULAR_ID:
            	        	                	{
            	        	                		{
            	        	                		    ANTLR_UINT32 LA221_1 = this->LA(2);
            	        	                		    if ( ((toUpper(LT(1)->getText()) == "ESCAPE")))
            	        	                		    {
            	        	                		        alt221=1;
            	        	                		    }
            	        	                		}
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt221)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:919:38: like_escape_part
            	        	        	    {
            	        	        	        this->followPush(FOLLOW_like_escape_part_in_compound_expression9334);
            	        	        	        like_escape_part666=like_escape_part();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto rulecompound_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            like_escape_part666_last = like_escape_part666.tree.get();
            	        	        	            stream_like_escape_part.add(like_escape_part666.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: compound_expression, like_type, compound_expression, like_escape_part, concatenation, like_escape_part, concatenation
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 920:17: -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:920:33: ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NOT_LIKE, "NOT_LIKE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	// OracleDML.g:920:65: ^( EXPR concatenation )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_concatenation.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	        	        	}
            	        	        	// OracleDML.g:920:87: ( like_escape_part )?
            	        	        	if ( stream_like_escape_part.hasNext() ) {
            	        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_like_escape_part.nextTree());
            	        	        	}
            	        	        	stream_like_escape_part.reset();

            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 921:17: -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
            	        	        {
            	        	        	// OracleDML.g:921:20: ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_like_type.nextNode(), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	// OracleDML.g:921:54: ^( EXPR concatenation )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_concatenation.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	        	        	}
            	        	        	// OracleDML.g:921:76: ( like_escape_part )?
            	        	        	if ( stream_like_escape_part.hasNext() ) {
            	        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_like_escape_part.nextTree());
            	        	        	}
            	        	        	stream_like_escape_part.reset();

            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecompound_expressionEx; /* Prevent compiler warnings */
    rulecompound_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end compound_expression */

/**
 * $ANTLR start like_type
 * OracleDML.g:926:1: like_type : ( like_key | likec_key | like2_key | like4_key );
 */
OracleDML::like_type_return
OracleDML::like_type()
{
    OracleDML::like_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::like_key_return like_key667;
    ImplTraits::TreeTypePtr::pointer like_key667_last = NULL;
    OracleDML_OracleDMLKeys::likec_key_return likec_key668;
    ImplTraits::TreeTypePtr::pointer likec_key668_last = NULL;
    OracleDML_OracleDMLKeys::like2_key_return like2_key669;
    ImplTraits::TreeTypePtr::pointer like2_key669_last = NULL;
    OracleDML_OracleDMLKeys::like4_key_return like4_key670;
    ImplTraits::TreeTypePtr::pointer like4_key670_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:927:5: ( like_key | likec_key | like2_key | like4_key )

            ANTLR_UINT32 alt224;

            alt224=4;

            {
                ANTLR_UINT32 LA224_0 = this->LA(1);
                if ( (LA224_0 == SQL92_RESERVED_LIKE))
                {
                    alt224=1;
                }
                else if ( (LA224_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "LIKE4"))||((toUpper(LT(1)->getText()) == "LIKE2"))||((toUpper(LT(1)->getText()) == "LIKEC")))))
                {
                    {
                        ANTLR_UINT32 LA224_2 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "LIKEC")))
                        {
                            alt224=2;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "LIKE2")))
                        {
                            alt224=3;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "LIKE4")))
                        {
                            alt224=4;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 224 );
                            ex->set_state( 2 );


                            goto rulelike_typeEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 224 );
                    ex->set_state( 0 );


                    goto rulelike_typeEx;

                }
            }
            switch (alt224)
            {
        	case 1:
        	    // OracleDML.g:927:10: like_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_like_key_in_like_type9443);
        	        like_key667=like_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelike_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, like_key667.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:928:10: likec_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_likec_key_in_like_type9454);
        	        likec_key668=likec_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelike_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, likec_key668.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:929:10: like2_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_like2_key_in_like_type9465);
        	        like2_key669=like2_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelike_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, like2_key669.tree);


        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:930:10: like4_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_like4_key_in_like_type9476);
        	        like4_key670=like4_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelike_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, like4_key670.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulelike_typeEx; /* Prevent compiler warnings */
    rulelike_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end like_type */

/**
 * $ANTLR start like_escape_part
 * OracleDML.g:933:1: like_escape_part : escape_key concatenation -> ^( EXPR concatenation ) ;
 */
OracleDML::like_escape_part_return
OracleDML::like_escape_part()
{
    OracleDML::like_escape_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::escape_key_return escape_key671;
    ImplTraits::TreeTypePtr::pointer escape_key671_last = NULL;
    OracleDML::concatenation_return concatenation672;
    ImplTraits::TreeTypePtr::pointer concatenation672_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_escape_key(get_psrstate()->get_treeAdaptor(), "rule escape_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:934:5: ( escape_key concatenation -> ^( EXPR concatenation ) )
        // OracleDML.g:934:10: escape_key concatenation
        {
            this->followPush(FOLLOW_escape_key_in_like_escape_part9496);
            escape_key671=escape_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelike_escape_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                escape_key671_last = escape_key671.tree.get();
                stream_escape_key.add(escape_key671.tree);
            }

            this->followPush(FOLLOW_concatenation_in_like_escape_part9498);
            concatenation672=concatenation();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelike_escape_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                concatenation672_last = concatenation672.tree.get();
                stream_concatenation.add(concatenation672.tree);
            }

            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 935:9: -> ^( EXPR concatenation )
            {
            	// OracleDML.g:935:12: ^( EXPR concatenation )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelike_escape_partEx; /* Prevent compiler warnings */
    rulelike_escape_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end like_escape_part */

/**
 * $ANTLR start in_elements
 * OracleDML.g:938:1: in_elements : ( ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN -> ^( NESTED_SUBQUERY[$LEFT_PAREN] subquery RIGHT_PAREN ) | LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN -> ^( EXPR_LIST[$LEFT_PAREN] ( concatenation_wrapper )+ RIGHT_PAREN ) | constant -> ^( EXPR_LIST constant ) | bind_variable -> ^( EXPR_LIST bind_variable ) | general_element -> ^( EXPR_LIST general_element ) );
 */
OracleDML::in_elements_return
OracleDML::in_elements()
{
    OracleDML::in_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN673 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN675 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN676 = NULL;
    ImplTraits::CommonTokenType const* COMMA678 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN680 = NULL;
    OracleDML::subquery_return subquery674;
    ImplTraits::TreeTypePtr::pointer subquery674_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper677;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper677_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper679;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper679_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant681;
    ImplTraits::TreeTypePtr::pointer constant681_last = NULL;
    OracleDML_OracleDMLCommons::bind_variable_return bind_variable682;
    ImplTraits::TreeTypePtr::pointer bind_variable682_last = NULL;
    OracleDML_OracleDMLCommons::general_element_return general_element683;
    ImplTraits::TreeTypePtr::pointer general_element683_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN673_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN675_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN676_tree;
    ImplTraits::TreeTypePtr COMMA678_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN680_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation_wrapper(get_psrstate()->get_treeAdaptor(), "rule concatenation_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_bind_variable(get_psrstate()->get_treeAdaptor(), "rule bind_variable");
    RewriteRuleSubtreeStream<ImplTraits> stream_constant(get_psrstate()->get_treeAdaptor(), "rule constant");
    RewriteRuleSubtreeStream<ImplTraits> stream_general_element(get_psrstate()->get_treeAdaptor(), "rule general_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:940:5: ( ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN -> ^( NESTED_SUBQUERY[$LEFT_PAREN] subquery RIGHT_PAREN ) | LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN -> ^( EXPR_LIST[$LEFT_PAREN] ( concatenation_wrapper )+ RIGHT_PAREN ) | constant -> ^( EXPR_LIST constant ) | bind_variable -> ^( EXPR_LIST bind_variable ) | general_element -> ^( EXPR_LIST general_element ) )

            ANTLR_UINT32 alt226;

            alt226=5;

            switch ( this->LA(1) )
            {
            case LEFT_PAREN:
            	{
            		{
            		    ANTLR_UINT32 LA226_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred29_OracleDML>() )))
            		    {
            		        alt226=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt226=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 226 );
            		        ex->set_state( 1 );


            		        goto rulein_elementsEx;

            		    }
            		}
            	}
                break;
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA226_2 = this->LA(2);
            		    if ( ((((toUpper(LT(1)->getText()) == "INTERVAL"))||((toUpper(LT(1)->getText()) == "MINVALUE"))||((toUpper(LT(1)->getText()) == "SESSIONTIMEZONE"))||((toUpper(LT(1)->getText()) == "TIMESTAMP"))||((toUpper(LT(1)->getText()) == "MAXVALUE"))||((toUpper(LT(1)->getText()) == "DBTIMEZONE")))))
            		    {
            		        alt226=3;
            		    }
            		    else if ( (true))
            		    {
            		        alt226=5;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 226 );
            		        ex->set_state( 2 );


            		        goto rulein_elementsEx;

            		    }
            		}
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case EXACT_NUM_LIT:
            case NATIONAL_CHAR_STRING_LIT:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt226=3;
            	}
                break;
            case BINDVAR:
            case COLON:
            	{
            		alt226=4;
            	}
                break;
            case DELIMITED_ID:
            case INTRODUCER:
            	{
            		alt226=5;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 226 );
                ex->set_state( 0 );


                goto rulein_elementsEx;

            }

            switch (alt226)
            {
        	case 1:
        	    // OracleDML.g:940:10: ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
        	    {
        	        LEFT_PAREN673 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_in_elements9556);
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN673);


        	        this->followPush(FOLLOW_subquery_in_in_elements9558);
        	        subquery674=subquery();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            subquery674_last = subquery674.tree.get();
        	            stream_subquery.add(subquery674.tree);
        	        }

        	        RIGHT_PAREN675 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_in_elements9560);
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN675);


        	        // AST REWRITE
        	        // elements: RIGHT_PAREN, subquery
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 941:10: -> ^( NESTED_SUBQUERY[$LEFT_PAREN] subquery RIGHT_PAREN )
        	        {
        	        	// OracleDML.g:941:13: ^( NESTED_SUBQUERY[$LEFT_PAREN] subquery RIGHT_PAREN )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_SUBQUERY, LEFT_PAREN673), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:942:10: LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN
        	    {
        	        LEFT_PAREN676 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_in_elements9591);
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN676);


        	        this->followPush(FOLLOW_concatenation_wrapper_in_in_elements9593);
        	        concatenation_wrapper677=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            concatenation_wrapper677_last = concatenation_wrapper677.tree.get();
        	            stream_concatenation_wrapper.add(concatenation_wrapper677.tree);
        	        }

        	        // OracleDML.g:942:43: ( COMMA concatenation_wrapper )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt225=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt225=1;
        	            	}
        	                break;

        	            }

        	            switch (alt225)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:942:44: COMMA concatenation_wrapper
        	        	    {
        	        	        COMMA678 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_in_elements9596);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulein_elementsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA678);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_in_elements9598);
        	        	        concatenation_wrapper679=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulein_elementsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            concatenation_wrapper679_last = concatenation_wrapper679.tree.get();
        	        	            stream_concatenation_wrapper.add(concatenation_wrapper679.tree);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop225;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop225: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN680 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_in_elements9602);
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN680);


        	        // AST REWRITE
        	        // elements: RIGHT_PAREN, concatenation_wrapper
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 943:10: -> ^( EXPR_LIST[$LEFT_PAREN] ( concatenation_wrapper )+ RIGHT_PAREN )
        	        {
        	        	// OracleDML.g:943:13: ^( EXPR_LIST[$LEFT_PAREN] ( concatenation_wrapper )+ RIGHT_PAREN )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, LEFT_PAREN676), root_1);
        	        	if ( !(stream_concatenation_wrapper.hasNext()) ) {
        	        		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "concatenation_wrapper empty" );
        	        		goto rulein_elementsEx;
        	        	}
        	        	while ( stream_concatenation_wrapper.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation_wrapper.nextTree());
        	        	}
        	        	stream_concatenation_wrapper.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:944:10: constant
        	    {
        	        this->followPush(FOLLOW_constant_in_in_elements9634);
        	        constant681=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            constant681_last = constant681.tree.get();
        	            stream_constant.add(constant681.tree);
        	        }

        	        // AST REWRITE
        	        // elements: constant
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 945:10: -> ^( EXPR_LIST constant )
        	        {
        	        	// OracleDML.g:945:13: ^( EXPR_LIST constant )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, "EXPR_LIST"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_constant.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:946:10: bind_variable
        	    {
        	        this->followPush(FOLLOW_bind_variable_in_in_elements9662);
        	        bind_variable682=bind_variable();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            bind_variable682_last = bind_variable682.tree.get();
        	            stream_bind_variable.add(bind_variable682.tree);
        	        }

        	        // AST REWRITE
        	        // elements: bind_variable
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 947:10: -> ^( EXPR_LIST bind_variable )
        	        {
        	        	// OracleDML.g:947:13: ^( EXPR_LIST bind_variable )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, "EXPR_LIST"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_bind_variable.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:948:10: general_element
        	    {
        	        this->followPush(FOLLOW_general_element_in_in_elements9690);
        	        general_element683=general_element();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            general_element683_last = general_element683.tree.get();
        	            stream_general_element.add(general_element683.tree);
        	        }

        	        // AST REWRITE
        	        // elements: general_element
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 949:10: -> ^( EXPR_LIST general_element )
        	        {
        	        	// OracleDML.g:949:13: ^( EXPR_LIST general_element )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, "EXPR_LIST"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_general_element.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulein_elementsEx; /* Prevent compiler warnings */
    rulein_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end in_elements */

/**
 * $ANTLR start between_elements
 * OracleDML.g:952:1: between_elements : cn1= concatenation and_key cn2= concatenation -> ^( EXPR $cn1) ^( EXPR $cn2) ;
 */
OracleDML::between_elements_return
OracleDML::between_elements()
{
    OracleDML::between_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::concatenation_return cn1;
    ImplTraits::TreeTypePtr::pointer cn1_last = NULL;
    OracleDML::concatenation_return cn2;
    ImplTraits::TreeTypePtr::pointer cn2_last = NULL;
    OracleDML_OracleDMLKeys::and_key_return and_key684;
    ImplTraits::TreeTypePtr::pointer and_key684_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_and_key(get_psrstate()->get_treeAdaptor(), "rule and_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:953:5: (cn1= concatenation and_key cn2= concatenation -> ^( EXPR $cn1) ^( EXPR $cn2) )
        // OracleDML.g:953:10: cn1= concatenation and_key cn2= concatenation
        {
            this->followPush(FOLLOW_concatenation_in_between_elements9729);
            cn1=concatenation();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetween_elementsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                cn1_last = cn1.tree.get();
                stream_concatenation.add(cn1.tree);
            }

            this->followPush(FOLLOW_and_key_in_between_elements9731);
            and_key684=and_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetween_elementsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                and_key684_last = and_key684.tree.get();
                stream_and_key.add(and_key684.tree);
            }

            this->followPush(FOLLOW_concatenation_in_between_elements9735);
            cn2=concatenation();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetween_elementsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                cn2_last = cn2.tree.get();
                stream_concatenation.add(cn2.tree);
            }

            // AST REWRITE
            // elements: cn1, cn2
            // token labels: 
            // rule labels: retval, cn2, cn1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
            RewriteRuleSubtreeStream<ImplTraits> stream_cn2(get_psrstate()->get_treeAdaptor(), "rule cn2",cn2_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_cn1(get_psrstate()->get_treeAdaptor(), "rule cn1",cn1_last); // rewrite alias

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 954:9: -> ^( EXPR $cn1) ^( EXPR $cn2)
            {
            	// OracleDML.g:954:12: ^( EXPR $cn1)
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cn1.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            	// OracleDML.g:954:25: ^( EXPR $cn2)
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cn2.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulebetween_elementsEx; /* Prevent compiler warnings */
    rulebetween_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end between_elements */

/**
 * $ANTLR start concatenation
 * OracleDML.g:957:1: concatenation : additive_expression ( concatenation_op ^ additive_expression )* ;
 */
OracleDML::concatenation_return
OracleDML::concatenation()
{
    OracleDML::concatenation_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::additive_expression_return additive_expression685;
    ImplTraits::TreeTypePtr::pointer additive_expression685_last = NULL;
    OracleDML_OracleDMLCommons::concatenation_op_return concatenation_op686;
    ImplTraits::TreeTypePtr::pointer concatenation_op686_last = NULL;
    OracleDML::additive_expression_return additive_expression687;
    ImplTraits::TreeTypePtr::pointer additive_expression687_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:958:5: ( additive_expression ( concatenation_op ^ additive_expression )* )
        // OracleDML.g:958:10: additive_expression ( concatenation_op ^ additive_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_additive_expression_in_concatenation9780);
            additive_expression685=additive_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconcatenationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, additive_expression685.tree);


            // OracleDML.g:958:30: ( concatenation_op ^ additive_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt227=2;
                switch ( this->LA(1) )
                {
                case CONCATENATION_OP:
                	{
                		alt227=1;
                	}
                    break;
                case VERTICAL_BAR:
                	{
                		alt227=1;
                	}
                    break;

                }

                switch (alt227)
                {
            	case 1:
            	    // OracleDML.g:958:31: concatenation_op ^ additive_expression
            	    {
            	        this->followPush(FOLLOW_concatenation_op_in_concatenation9783);
            	        concatenation_op686=concatenation_op();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconcatenationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(concatenation_op686.tree, root_0);

            	        this->followPush(FOLLOW_additive_expression_in_concatenation9786);
            	        additive_expression687=additive_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconcatenationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, additive_expression687.tree);


            	    }
            	    break;

            	default:
            	    goto loop227;	/* break out of the loop */
            	    break;
                }
            }
            loop227: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconcatenationEx; /* Prevent compiler warnings */
    ruleconcatenationEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end concatenation */

/**
 * $ANTLR start concatenation_wrapper
 * OracleDML.g:961:1: concatenation_wrapper : concatenation -> ^( EXPR concatenation ) ;
 */
OracleDML::concatenation_wrapper_return
OracleDML::concatenation_wrapper()
{
    OracleDML::concatenation_wrapper_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::concatenation_return concatenation688;
    ImplTraits::TreeTypePtr::pointer concatenation688_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:962:5: ( concatenation -> ^( EXPR concatenation ) )
        // OracleDML.g:962:10: concatenation
        {
            this->followPush(FOLLOW_concatenation_in_concatenation_wrapper9808);
            concatenation688=concatenation();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconcatenation_wrapperEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                concatenation688_last = concatenation688.tree.get();
                stream_concatenation.add(concatenation688.tree);
            }

            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 963:9: -> ^( EXPR concatenation )
            {
            	// OracleDML.g:963:12: ^( EXPR concatenation )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconcatenation_wrapperEx; /* Prevent compiler warnings */
    ruleconcatenation_wrapperEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end concatenation_wrapper */

/**
 * $ANTLR start additive_expression
 * OracleDML.g:966:1: additive_expression : multiply_expression ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )* ;
 */
OracleDML::additive_expression_return
OracleDML::additive_expression()
{
    OracleDML::additive_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* PLUS_SIGN690 = NULL;
    ImplTraits::CommonTokenType const* MINUS_SIGN691 = NULL;
    OracleDML::multiply_expression_return multiply_expression689;
    ImplTraits::TreeTypePtr::pointer multiply_expression689_last = NULL;
    OracleDML::multiply_expression_return multiply_expression692;
    ImplTraits::TreeTypePtr::pointer multiply_expression692_last = NULL;
    ImplTraits::TreeTypePtr PLUS_SIGN690_tree;
    ImplTraits::TreeTypePtr MINUS_SIGN691_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:967:5: ( multiply_expression ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )* )
        // OracleDML.g:967:10: multiply_expression ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_multiply_expression_in_additive_expression9844);
            multiply_expression689=multiply_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadditive_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multiply_expression689.tree);


            // OracleDML.g:967:30: ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt229=2;
                switch ( this->LA(1) )
                {
                case PLUS_SIGN:
                	{
                		alt229=1;
                	}
                    break;
                case MINUS_SIGN:
                	{
                		alt229=1;
                	}
                    break;

                }

                switch (alt229)
                {
            	case 1:
            	    // OracleDML.g:967:32: ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression
            	    {
            	        // OracleDML.g:967:32: ( PLUS_SIGN ^| MINUS_SIGN ^)
            	        {
            	            ANTLR_UINT32 alt228=2;
            	            switch ( this->LA(1) )
            	            {
            	            case PLUS_SIGN:
            	            	{
            	            		alt228=1;
            	            	}
            	                break;
            	            case MINUS_SIGN:
            	            	{
            	            		alt228=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 228 );
            	                ex->set_state( 0 );


            	                goto ruleadditive_expressionEx;

            	            }

            	            switch (alt228)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:967:34: PLUS_SIGN ^
            	        	    {
            	        	        PLUS_SIGN690 =  this->matchToken(PLUS_SIGN, &FOLLOW_PLUS_SIGN_in_additive_expression9850);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleadditive_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        PLUS_SIGN690_tree = get_psrstate()->get_treeAdaptor()->create(PLUS_SIGN690);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(PLUS_SIGN690_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:967:47: MINUS_SIGN ^
            	        	    {
            	        	        MINUS_SIGN691 =  this->matchToken(MINUS_SIGN, &FOLLOW_MINUS_SIGN_in_additive_expression9855);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleadditive_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        MINUS_SIGN691_tree = get_psrstate()->get_treeAdaptor()->create(MINUS_SIGN691);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(MINUS_SIGN691_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_multiply_expression_in_additive_expression9860);
            	        multiply_expression692=multiply_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleadditive_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multiply_expression692.tree);


            	    }
            	    break;

            	default:
            	    goto loop229;	/* break out of the loop */
            	    break;
                }
            }
            loop229: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleadditive_expressionEx; /* Prevent compiler warnings */
    ruleadditive_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end additive_expression */

/**
 * $ANTLR start multiply_expression
 * OracleDML.g:970:1: multiply_expression : datetime_expression ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )* ;
 */
OracleDML::multiply_expression_return
OracleDML::multiply_expression()
{
    OracleDML::multiply_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* ASTERISK694 = NULL;
    ImplTraits::CommonTokenType const* SOLIDUS695 = NULL;
    OracleDML::datetime_expression_return datetime_expression693;
    ImplTraits::TreeTypePtr::pointer datetime_expression693_last = NULL;
    OracleDML::datetime_expression_return datetime_expression696;
    ImplTraits::TreeTypePtr::pointer datetime_expression696_last = NULL;
    ImplTraits::TreeTypePtr ASTERISK694_tree;
    ImplTraits::TreeTypePtr SOLIDUS695_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:971:5: ( datetime_expression ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )* )
        // OracleDML.g:971:10: datetime_expression ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_datetime_expression_in_multiply_expression9882);
            datetime_expression693=datetime_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultiply_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, datetime_expression693.tree);


            // OracleDML.g:971:30: ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt231=2;
                switch ( this->LA(1) )
                {
                case ASTERISK:
                	{
                		alt231=1;
                	}
                    break;
                case SOLIDUS:
                	{
                		alt231=1;
                	}
                    break;

                }

                switch (alt231)
                {
            	case 1:
            	    // OracleDML.g:971:32: ( ASTERISK ^| SOLIDUS ^) datetime_expression
            	    {
            	        // OracleDML.g:971:32: ( ASTERISK ^| SOLIDUS ^)
            	        {
            	            ANTLR_UINT32 alt230=2;
            	            switch ( this->LA(1) )
            	            {
            	            case ASTERISK:
            	            	{
            	            		alt230=1;
            	            	}
            	                break;
            	            case SOLIDUS:
            	            	{
            	            		alt230=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 230 );
            	                ex->set_state( 0 );


            	                goto rulemultiply_expressionEx;

            	            }

            	            switch (alt230)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:971:34: ASTERISK ^
            	        	    {
            	        	        ASTERISK694 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_multiply_expression9888);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemultiply_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        ASTERISK694_tree = get_psrstate()->get_treeAdaptor()->create(ASTERISK694);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(ASTERISK694_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:971:46: SOLIDUS ^
            	        	    {
            	        	        SOLIDUS695 =  this->matchToken(SOLIDUS, &FOLLOW_SOLIDUS_in_multiply_expression9893);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemultiply_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        SOLIDUS695_tree = get_psrstate()->get_treeAdaptor()->create(SOLIDUS695);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(SOLIDUS695_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_datetime_expression_in_multiply_expression9898);
            	        datetime_expression696=datetime_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiply_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, datetime_expression696.tree);


            	    }
            	    break;

            	default:
            	    goto loop231;	/* break out of the loop */
            	    break;
                }
            }
            loop231: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemultiply_expressionEx; /* Prevent compiler warnings */
    rulemultiply_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multiply_expression */

/**
 * $ANTLR start datetime_expression
 * OracleDML.g:974:1: datetime_expression : ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )? ;
 */
OracleDML::datetime_expression_return
OracleDML::datetime_expression()
{
    OracleDML::datetime_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::model_expression_return model_expression697;
    ImplTraits::TreeTypePtr::pointer model_expression697_last = NULL;
    OracleDML_OracleDMLKeys::at_key_return at_key698;
    ImplTraits::TreeTypePtr::pointer at_key698_last = NULL;
    OracleDML_OracleDMLKeys::local_key_return local_key699;
    ImplTraits::TreeTypePtr::pointer local_key699_last = NULL;
    OracleDML_OracleDMLKeys::time_key_return time_key700;
    ImplTraits::TreeTypePtr::pointer time_key700_last = NULL;
    OracleDML_OracleDMLKeys::zone_key_return zone_key701;
    ImplTraits::TreeTypePtr::pointer zone_key701_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper702;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper702_last = NULL;
    OracleDML::interval_expression_return interval_expression703;
    ImplTraits::TreeTypePtr::pointer interval_expression703_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_at_key(get_psrstate()->get_treeAdaptor(), "rule at_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation_wrapper(get_psrstate()->get_treeAdaptor(), "rule concatenation_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_expression(get_psrstate()->get_treeAdaptor(), "rule model_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_local_key(get_psrstate()->get_treeAdaptor(), "rule local_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_zone_key(get_psrstate()->get_treeAdaptor(), "rule zone_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_interval_expression(get_psrstate()->get_treeAdaptor(), "rule interval_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_time_key(get_psrstate()->get_treeAdaptor(), "rule time_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:975:5: ( ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )? )
        // OracleDML.g:975:10: ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )?
        {
            // OracleDML.g:975:10: ( model_expression -> model_expression )
            // OracleDML.g:975:11: model_expression
            {
                this->followPush(FOLLOW_model_expression_in_datetime_expression9921);
                model_expression697=model_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruledatetime_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    model_expression697_last = model_expression697.tree.get();
                    stream_model_expression.add(model_expression697.tree);
                }

                // AST REWRITE
                // elements: model_expression
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 975:28: -> model_expression
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_model_expression.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:976:5: ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )?
            {
                ANTLR_UINT32 alt233=3;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA233_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "AT")))
                    		    {
                    		        alt233=1;
                    		    }
                    		    else if ( (( ((((toUpper(LT(1)->getText()) == "YEAR"))||((toUpper(LT(1)->getText()) == "DAY")))) && (this->msynpred( antlr3::ClassForwarder<synpred30_OracleDML>() )) )))
                    		    {
                    		        alt233=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt233)
                {
            	case 1:
            	    // OracleDML.g:976:10: at_key ( local_key | time_key zone_key concatenation_wrapper )
            	    {
            	        this->followPush(FOLLOW_at_key_in_datetime_expression9937);
            	        at_key698=at_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledatetime_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            at_key698_last = at_key698.tree.get();
            	            stream_at_key.add(at_key698.tree);
            	        }

            	        // OracleDML.g:976:17: ( local_key | time_key zone_key concatenation_wrapper )
            	        {
            	            ANTLR_UINT32 alt232=2;
            	            switch ( this->LA(1) )
            	            {
            	            case REGULAR_ID:
            	            	{
            	            		{
            	            		    ANTLR_UINT32 LA232_1 = this->LA(2);
            	            		    if ( ((toUpper(LT(1)->getText()) == "LOCAL")))
            	            		    {
            	            		        alt232=1;
            	            		    }
            	            		    else if ( ((toUpper(LT(1)->getText()) == "TIME")))
            	            		    {
            	            		        alt232=2;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 232 );
            	            		        ex->set_state( 1 );


            	            		        goto ruledatetime_expressionEx;

            	            		    }
            	            		}
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 232 );
            	                ex->set_state( 0 );


            	                goto ruledatetime_expressionEx;

            	            }

            	            switch (alt232)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:976:18: local_key
            	        	    {
            	        	        this->followPush(FOLLOW_local_key_in_datetime_expression9940);
            	        	        local_key699=local_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruledatetime_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            local_key699_last = local_key699.tree.get();
            	        	            stream_local_key.add(local_key699.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:976:28: time_key zone_key concatenation_wrapper
            	        	    {
            	        	        this->followPush(FOLLOW_time_key_in_datetime_expression9942);
            	        	        time_key700=time_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruledatetime_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            time_key700_last = time_key700.tree.get();
            	        	            stream_time_key.add(time_key700.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_zone_key_in_datetime_expression9944);
            	        	        zone_key701=zone_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruledatetime_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            zone_key701_last = zone_key701.tree.get();
            	        	            stream_zone_key.add(zone_key701.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_concatenation_wrapper_in_datetime_expression9946);
            	        	        concatenation_wrapper702=concatenation_wrapper();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruledatetime_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            concatenation_wrapper702_last = concatenation_wrapper702.tree.get();
            	        	            stream_concatenation_wrapper.add(concatenation_wrapper702.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        // AST REWRITE
            	        // elements: time_key, local_key, at_key, datetime_expression, concatenation_wrapper
            	        // token labels: 
            	        // rule labels: retval
            	        // token list labels: 
            	        // rule list labels: 
            	        // wildcard labels: 
            	        if ( this->get_backtracking()==0 ) {
            	        retval.tree = std::move(root_0);
            	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        // 977:13: -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) )
            	        {
            	        	// OracleDML.g:977:16: ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) )
            	        	{
            	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DATETIME_OP, "DATETIME_OP"), root_1);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	// OracleDML.g:977:51: ^( at_key ( local_key )? ( time_key )? concatenation_wrapper )
            	        	{
            	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_at_key.nextNode(), root_2);
            	        	// OracleDML.g:977:60: ( local_key )?
            	        	if ( stream_local_key.hasNext() ) {
            	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_local_key.nextTree());
            	        	}
            	        	stream_local_key.reset();

            	        	// OracleDML.g:977:71: ( time_key )?
            	        	if ( stream_time_key.hasNext() ) {
            	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_time_key.nextTree());
            	        	}
            	        	stream_time_key.reset();

            	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_concatenation_wrapper.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	        	}
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	}
            	        }


            	        //retval.tree = std::move(root_0);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:978:10: ( interval_expression )=> interval_expression
            	    {
            	        this->followPush(FOLLOW_interval_expression_in_datetime_expression9996);
            	        interval_expression703=interval_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledatetime_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            interval_expression703_last = interval_expression703.tree.get();
            	            stream_interval_expression.add(interval_expression703.tree);
            	        }

            	        // AST REWRITE
            	        // elements: datetime_expression, interval_expression
            	        // token labels: 
            	        // rule labels: retval
            	        // token list labels: 
            	        // rule list labels: 
            	        // wildcard labels: 
            	        if ( this->get_backtracking()==0 ) {
            	        retval.tree = std::move(root_0);
            	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        // 979:13: -> ^( DATETIME_OP $datetime_expression interval_expression )
            	        {
            	        	// OracleDML.g:979:16: ^( DATETIME_OP $datetime_expression interval_expression )
            	        	{
            	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DATETIME_OP, "DATETIME_OP"), root_1);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_interval_expression.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	}
            	        }


            	        //retval.tree = std::move(root_0);
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruledatetime_expressionEx; /* Prevent compiler warnings */
    ruledatetime_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end datetime_expression */

/**
 * $ANTLR start interval_expression
 * OracleDML.g:983:1: interval_expression : ( day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )? -> ^( day_key ( $cn1)? to_key second_key ( $cn2)? ) | year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key -> ^( year_key to_key month_key concatenation_wrapper ) );
 */
OracleDML::interval_expression_return
OracleDML::interval_expression()
{
    OracleDML::interval_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN705 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN706 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN709 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN710 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN712 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN714 = NULL;
    OracleDML::concatenation_wrapper_return cn1;
    ImplTraits::TreeTypePtr::pointer cn1_last = NULL;
    OracleDML::concatenation_wrapper_return cn2;
    ImplTraits::TreeTypePtr::pointer cn2_last = NULL;
    OracleDML_OracleDMLKeys::day_key_return day_key704;
    ImplTraits::TreeTypePtr::pointer day_key704_last = NULL;
    OracleDML_OracleDMLKeys::to_key_return to_key707;
    ImplTraits::TreeTypePtr::pointer to_key707_last = NULL;
    OracleDML_OracleDMLKeys::second_key_return second_key708;
    ImplTraits::TreeTypePtr::pointer second_key708_last = NULL;
    OracleDML_OracleDMLKeys::year_key_return year_key711;
    ImplTraits::TreeTypePtr::pointer year_key711_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper713;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper713_last = NULL;
    OracleDML_OracleDMLKeys::to_key_return to_key715;
    ImplTraits::TreeTypePtr::pointer to_key715_last = NULL;
    OracleDML_OracleDMLKeys::month_key_return month_key716;
    ImplTraits::TreeTypePtr::pointer month_key716_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN705_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN706_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN709_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN710_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN712_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN714_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_year_key(get_psrstate()->get_treeAdaptor(), "rule year_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_day_key(get_psrstate()->get_treeAdaptor(), "rule day_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_second_key(get_psrstate()->get_treeAdaptor(), "rule second_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation_wrapper(get_psrstate()->get_treeAdaptor(), "rule concatenation_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_to_key(get_psrstate()->get_treeAdaptor(), "rule to_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_month_key(get_psrstate()->get_treeAdaptor(), "rule month_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:984:5: ( day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )? -> ^( day_key ( $cn1)? to_key second_key ( $cn2)? ) | year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key -> ^( year_key to_key month_key concatenation_wrapper ) )

            ANTLR_UINT32 alt237;

            alt237=2;

            {
                ANTLR_UINT32 LA237_0 = this->LA(1);
                if ( (LA237_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "YEAR"))||((toUpper(LT(1)->getText()) == "DAY")))))
                {
                    {
                        ANTLR_UINT32 LA237_1 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "DAY")))
                        {
                            alt237=1;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "YEAR")))
                        {
                            alt237=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 237 );
                            ex->set_state( 1 );


                            goto ruleinterval_expressionEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 237 );
                    ex->set_state( 0 );


                    goto ruleinterval_expressionEx;

                }
            }
            switch (alt237)
            {
        	case 1:
        	    // OracleDML.g:984:10: day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?
        	    {
        	        this->followPush(FOLLOW_day_key_in_interval_expression10046);
        	        day_key704=day_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            day_key704_last = day_key704.tree.get();
        	            stream_day_key.add(day_key704.tree);
        	        }

        	        // OracleDML.g:984:19: ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )?
        	        {
        	            ANTLR_UINT32 alt234=2;
        	            switch ( this->LA(1) )
        	            {
        	                case LEFT_PAREN:
        	                	{
        	                		alt234=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt234)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:984:20: LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN
        	        	    {
        	        	        LEFT_PAREN705 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_interval_expression10050);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN705);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_interval_expression10054);
        	        	        cn1=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            cn1_last = cn1.tree.get();
        	        	            stream_concatenation_wrapper.add(cn1.tree);
        	        	        }

        	        	        RIGHT_PAREN706 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_interval_expression10056);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN706);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_to_key_in_interval_expression10060);
        	        to_key707=to_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            to_key707_last = to_key707.tree.get();
        	            stream_to_key.add(to_key707.tree);
        	        }

        	        this->followPush(FOLLOW_second_key_in_interval_expression10062);
        	        second_key708=second_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            second_key708_last = second_key708.tree.get();
        	            stream_second_key.add(second_key708.tree);
        	        }

        	        // OracleDML.g:984:89: ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?
        	        {
        	            ANTLR_UINT32 alt235=2;
        	            switch ( this->LA(1) )
        	            {
        	                case LEFT_PAREN:
        	                	{
        	                		alt235=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt235)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:984:90: LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN
        	        	    {
        	        	        LEFT_PAREN709 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_interval_expression10065);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN709);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_interval_expression10069);
        	        	        cn2=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            cn2_last = cn2.tree.get();
        	        	            stream_concatenation_wrapper.add(cn2.tree);
        	        	        }

        	        	        RIGHT_PAREN710 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_interval_expression10071);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN710);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: cn2, day_key, second_key, cn1, to_key
        	        // token labels: 
        	        // rule labels: retval, cn2, cn1
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
        	        RewriteRuleSubtreeStream<ImplTraits> stream_cn2(get_psrstate()->get_treeAdaptor(), "rule cn2",cn2_last); // rewrite alias
        	        RewriteRuleSubtreeStream<ImplTraits> stream_cn1(get_psrstate()->get_treeAdaptor(), "rule cn1",cn1_last); // rewrite alias

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 985:9: -> ^( day_key ( $cn1)? to_key second_key ( $cn2)? )
        	        {
        	        	// OracleDML.g:985:12: ^( day_key ( $cn1)? to_key second_key ( $cn2)? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_day_key.nextNode(), root_1);
        	        	// OracleDML.g:985:23: ( $cn1)?
        	        	if ( stream_cn1.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cn1.nextTree());
        	        	}
        	        	stream_cn1.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_to_key.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_second_key.nextTree());
        	        	// OracleDML.g:985:47: ( $cn2)?
        	        	if ( stream_cn2.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cn2.nextTree());
        	        	}
        	        	stream_cn2.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:986:10: year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key
        	    {
        	        this->followPush(FOLLOW_year_key_in_interval_expression10110);
        	        year_key711=year_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            year_key711_last = year_key711.tree.get();
        	            stream_year_key.add(year_key711.tree);
        	        }

        	        // OracleDML.g:986:19: ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )?
        	        {
        	            ANTLR_UINT32 alt236=2;
        	            switch ( this->LA(1) )
        	            {
        	                case LEFT_PAREN:
        	                	{
        	                		alt236=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt236)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:986:20: LEFT_PAREN concatenation_wrapper RIGHT_PAREN
        	        	    {
        	        	        LEFT_PAREN712 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_interval_expression10113);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN712);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_interval_expression10115);
        	        	        concatenation_wrapper713=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            concatenation_wrapper713_last = concatenation_wrapper713.tree.get();
        	        	            stream_concatenation_wrapper.add(concatenation_wrapper713.tree);
        	        	        }

        	        	        RIGHT_PAREN714 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_interval_expression10117);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN714);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_to_key_in_interval_expression10121);
        	        to_key715=to_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            to_key715_last = to_key715.tree.get();
        	            stream_to_key.add(to_key715.tree);
        	        }

        	        this->followPush(FOLLOW_month_key_in_interval_expression10123);
        	        month_key716=month_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            month_key716_last = month_key716.tree.get();
        	            stream_month_key.add(month_key716.tree);
        	        }

        	        // AST REWRITE
        	        // elements: month_key, concatenation_wrapper, year_key, to_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 987:9: -> ^( year_key to_key month_key concatenation_wrapper )
        	        {
        	        	// OracleDML.g:987:12: ^( year_key to_key month_key concatenation_wrapper )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_year_key.nextNode(), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_to_key.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_month_key.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation_wrapper.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleinterval_expressionEx; /* Prevent compiler warnings */
    ruleinterval_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end interval_expression */

/**
 * $ANTLR start model_expression
 * OracleDML.g:990:1: model_expression : ( multiset_expression -> multiset_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )? ;
 */
OracleDML::model_expression_return
OracleDML::model_expression()
{
    OracleDML::model_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_BRACKET718 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_BRACKET720 = NULL;
    OracleDML::multiset_expression_return multiset_expression717;
    ImplTraits::TreeTypePtr::pointer multiset_expression717_last = NULL;
    OracleDML::model_expression_element_return model_expression_element719;
    ImplTraits::TreeTypePtr::pointer model_expression_element719_last = NULL;
    ImplTraits::TreeTypePtr LEFT_BRACKET718_tree;
    ImplTraits::TreeTypePtr RIGHT_BRACKET720_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_BRACKET(get_psrstate()->get_treeAdaptor(), "token LEFT_BRACKET");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_BRACKET(get_psrstate()->get_treeAdaptor(), "token RIGHT_BRACKET");
    RewriteRuleSubtreeStream<ImplTraits> stream_multiset_expression(get_psrstate()->get_treeAdaptor(), "rule multiset_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_expression_element(get_psrstate()->get_treeAdaptor(), "rule model_expression_element");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:991:5: ( ( multiset_expression -> multiset_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )? )
        // OracleDML.g:991:10: ( multiset_expression -> multiset_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )?
        {
            // OracleDML.g:991:10: ( multiset_expression -> multiset_expression )
            // OracleDML.g:991:11: multiset_expression
            {
                this->followPush(FOLLOW_multiset_expression_in_model_expression10164);
                multiset_expression717=multiset_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulemodel_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    multiset_expression717_last = multiset_expression717.tree.get();
                    stream_multiset_expression.add(multiset_expression717.tree);
                }

                // AST REWRITE
                // elements: multiset_expression
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 991:31: -> multiset_expression
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_multiset_expression.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:992:9: ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )?
            {
                ANTLR_UINT32 alt238=2;
                switch ( this->LA(1) )
                {
                    case LEFT_BRACKET:
                    	{
                    		alt238=1;
                    	}
                        break;
                }

                switch (alt238)
                {
            	case 1:
            	    // OracleDML.g:992:10: LEFT_BRACKET model_expression_element RIGHT_BRACKET
            	    {
            	        LEFT_BRACKET718 =  this->matchToken(LEFT_BRACKET, &FOLLOW_LEFT_BRACKET_in_model_expression10180);
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET718);


            	        this->followPush(FOLLOW_model_expression_element_in_model_expression10182);
            	        model_expression_element719=model_expression_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_expression_element719_last = model_expression_element719.tree.get();
            	            stream_model_expression_element.add(model_expression_element719.tree);
            	        }

            	        RIGHT_BRACKET720 =  this->matchToken(RIGHT_BRACKET, &FOLLOW_RIGHT_BRACKET_in_model_expression10184);
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET720);


            	        // AST REWRITE
            	        // elements: model_expression, model_expression_element
            	        // token labels: 
            	        // rule labels: retval
            	        // token list labels: 
            	        // rule list labels: 
            	        // wildcard labels: 
            	        if ( this->get_backtracking()==0 ) {
            	        retval.tree = std::move(root_0);
            	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        // 993:13: -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element )
            	        {
            	        	// OracleDML.g:993:16: ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element )
            	        	{
            	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_EXPRESSION, LEFT_BRACKET718), root_1);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_expression_element.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	}
            	        }


            	        //retval.tree = std::move(root_0);
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_expressionEx; /* Prevent compiler warnings */
    rulemodel_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_expression */

/**
 * $ANTLR start model_expression_element
 * OracleDML.g:996:1: model_expression_element : ( ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )* | single_column_for_loop ( COMMA ! single_column_for_loop )* | multi_column_for_loop );
 */
OracleDML::model_expression_element_return
OracleDML::model_expression_element()
{
    OracleDML::model_expression_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA723 = NULL;
    ImplTraits::CommonTokenType const* COMMA727 = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key721;
    ImplTraits::TreeTypePtr::pointer any_key721_last = NULL;
    OracleDML::condition_wrapper_return condition_wrapper722;
    ImplTraits::TreeTypePtr::pointer condition_wrapper722_last = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key724;
    ImplTraits::TreeTypePtr::pointer any_key724_last = NULL;
    OracleDML::condition_wrapper_return condition_wrapper725;
    ImplTraits::TreeTypePtr::pointer condition_wrapper725_last = NULL;
    OracleDML::single_column_for_loop_return single_column_for_loop726;
    ImplTraits::TreeTypePtr::pointer single_column_for_loop726_last = NULL;
    OracleDML::single_column_for_loop_return single_column_for_loop728;
    ImplTraits::TreeTypePtr::pointer single_column_for_loop728_last = NULL;
    OracleDML::multi_column_for_loop_return multi_column_for_loop729;
    ImplTraits::TreeTypePtr::pointer multi_column_for_loop729_last = NULL;
    ImplTraits::TreeTypePtr COMMA723_tree;
    ImplTraits::TreeTypePtr COMMA727_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:997:5: ( ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )* | single_column_for_loop ( COMMA ! single_column_for_loop )* | multi_column_for_loop )

            ANTLR_UINT32 alt243;

            alt243=3;

            switch ( this->LA(1) )
            {
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case REGULAR_ID:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt243=1;
            	}
                break;
            case SQL92_RESERVED_FOR:
            	{
            		switch ( this->LA(2) )
            		{
            		case DELIMITED_ID:
            		case INTRODUCER:
            		case REGULAR_ID:
            			{
            				alt243=2;
            			}
            		    break;
            		case LEFT_PAREN:
            			{
            				alt243=3;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 243 );
            		    ex->set_state( 2 );


            		    goto rulemodel_expression_elementEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 243 );
                ex->set_state( 0 );


                goto rulemodel_expression_elementEx;

            }

            switch (alt243)
            {
        	case 1:
        	    // OracleDML.g:997:10: ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )*
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:997:10: ( ( any_key )=> any_key | condition_wrapper )
        	        {
        	            ANTLR_UINT32 alt239=2;
        	            switch ( this->LA(1) )
        	            {
        	            case SQL92_RESERVED_ANY:
        	            	{
        	            		{
        	            		    ANTLR_UINT32 LA239_1 = this->LA(2);
        	            		    if ( (LA239_1 == COMMA) && (this->msynpred( antlr3::ClassForwarder<synpred31_OracleDML>() )))
        	            		    {
        	            		        alt239=1;
        	            		    }
        	            		    else if ( (LA239_1 == RIGHT_BRACKET) && (this->msynpred( antlr3::ClassForwarder<synpred31_OracleDML>() )))
        	            		    {
        	            		        alt239=1;
        	            		    }
        	            		    else if ( (LA239_1 == LEFT_PAREN))
        	            		    {
        	            		        alt239=2;
        	            		    }
        	            		    else
        	            		    {
        	            		        if (this->get_backtracking()>0)
        	            		        {
        	            		            this->set_failedflag( true );
        	            		            return retval;
        	            		        }


        	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		        ex->set_decisionNum( 239 );
        	            		        ex->set_state( 1 );


        	            		        goto rulemodel_expression_elementEx;

        	            		    }
        	            		}
        	            	}
        	                break;
        	            case APPROXIMATE_NUM_LIT:
        	            case BINDVAR:
        	            case CHAR_STRING:
        	            case CHAR_STRING_PERL:
        	            case COLON:
        	            case DELIMITED_ID:
        	            case EXACT_NUM_LIT:
        	            case INTRODUCER:
        	            case LEFT_PAREN:
        	            case MINUS_SIGN:
        	            case NATIONAL_CHAR_STRING_LIT:
        	            case PLSQL_NON_RESERVED_CAST:
        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	            case PLUS_SIGN:
        	            case REGULAR_ID:
        	            case SQL92_RESERVED_ALL:
        	            case SQL92_RESERVED_CASE:
        	            case SQL92_RESERVED_CURSOR:
        	            case SQL92_RESERVED_DATE:
        	            case SQL92_RESERVED_DEFAULT:
        	            case SQL92_RESERVED_DISTINCT:
        	            case SQL92_RESERVED_EXISTS:
        	            case SQL92_RESERVED_FALSE:
        	            case SQL92_RESERVED_NOT:
        	            case SQL92_RESERVED_NULL:
        	            case SQL92_RESERVED_PRIOR:
        	            case SQL92_RESERVED_TRUE:
        	            case UNSIGNED_INTEGER:
        	            	{
        	            		alt239=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 239 );
        	                ex->set_state( 0 );


        	                goto rulemodel_expression_elementEx;

        	            }

        	            switch (alt239)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:997:11: ( any_key )=> any_key
        	        	    {
        	        	        this->followPush(FOLLOW_any_key_in_model_expression_element10236);
        	        	        any_key721=any_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, any_key721.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:997:31: condition_wrapper
        	        	    {
        	        	        this->followPush(FOLLOW_condition_wrapper_in_model_expression_element10238);
        	        	        condition_wrapper722=condition_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, condition_wrapper722.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:997:50: ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt241=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt241=1;
        	            	}
        	                break;

        	            }

        	            switch (alt241)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:997:51: COMMA ! ( ( any_key )=> any_key | condition_wrapper )
        	        	    {
        	        	        COMMA723 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_model_expression_element10242);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        // OracleDML.g:997:58: ( ( any_key )=> any_key | condition_wrapper )
        	        	        {
        	        	            ANTLR_UINT32 alt240=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case SQL92_RESERVED_ANY:
        	        	            	{
        	        	            		{
        	        	            		    ANTLR_UINT32 LA240_1 = this->LA(2);
        	        	            		    if ( (LA240_1 == RIGHT_BRACKET) && (this->msynpred( antlr3::ClassForwarder<synpred32_OracleDML>() )))
        	        	            		    {
        	        	            		        alt240=1;
        	        	            		    }
        	        	            		    else if ( (LA240_1 == COMMA) && (this->msynpred( antlr3::ClassForwarder<synpred32_OracleDML>() )))
        	        	            		    {
        	        	            		        alt240=1;
        	        	            		    }
        	        	            		    else if ( (LA240_1 == LEFT_PAREN))
        	        	            		    {
        	        	            		        alt240=2;
        	        	            		    }
        	        	            		    else
        	        	            		    {
        	        	            		        if (this->get_backtracking()>0)
        	        	            		        {
        	        	            		            this->set_failedflag( true );
        	        	            		            return retval;
        	        	            		        }


        	        	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	            		        ex->set_decisionNum( 240 );
        	        	            		        ex->set_state( 1 );


        	        	            		        goto rulemodel_expression_elementEx;

        	        	            		    }
        	        	            		}
        	        	            	}
        	        	                break;
        	        	            case APPROXIMATE_NUM_LIT:
        	        	            case BINDVAR:
        	        	            case CHAR_STRING:
        	        	            case CHAR_STRING_PERL:
        	        	            case COLON:
        	        	            case DELIMITED_ID:
        	        	            case EXACT_NUM_LIT:
        	        	            case INTRODUCER:
        	        	            case LEFT_PAREN:
        	        	            case MINUS_SIGN:
        	        	            case NATIONAL_CHAR_STRING_LIT:
        	        	            case PLSQL_NON_RESERVED_CAST:
        	        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	        	            case PLUS_SIGN:
        	        	            case REGULAR_ID:
        	        	            case SQL92_RESERVED_ALL:
        	        	            case SQL92_RESERVED_CASE:
        	        	            case SQL92_RESERVED_CURSOR:
        	        	            case SQL92_RESERVED_DATE:
        	        	            case SQL92_RESERVED_DEFAULT:
        	        	            case SQL92_RESERVED_DISTINCT:
        	        	            case SQL92_RESERVED_EXISTS:
        	        	            case SQL92_RESERVED_FALSE:
        	        	            case SQL92_RESERVED_NOT:
        	        	            case SQL92_RESERVED_NULL:
        	        	            case SQL92_RESERVED_PRIOR:
        	        	            case SQL92_RESERVED_TRUE:
        	        	            case UNSIGNED_INTEGER:
        	        	            	{
        	        	            		alt240=2;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                if (this->get_backtracking()>0)
        	        	                {
        	        	                    this->set_failedflag( true );
        	        	                    return retval;
        	        	                }

        	        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                ex->set_decisionNum( 240 );
        	        	                ex->set_state( 0 );


        	        	                goto rulemodel_expression_elementEx;

        	        	            }

        	        	            switch (alt240)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:997:59: ( any_key )=> any_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_any_key_in_model_expression_element10251);
        	        	        	        any_key724=any_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulemodel_expression_elementEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, any_key724.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:997:79: condition_wrapper
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_condition_wrapper_in_model_expression_element10253);
        	        	        	        condition_wrapper725=condition_wrapper();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulemodel_expression_elementEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, condition_wrapper725.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop241;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop241: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:998:10: single_column_for_loop ( COMMA ! single_column_for_loop )*
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_single_column_for_loop_in_model_expression_element10267);
        	        single_column_for_loop726=single_column_for_loop();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemodel_expression_elementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, single_column_for_loop726.tree);


        	        // OracleDML.g:998:33: ( COMMA ! single_column_for_loop )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt242=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt242=1;
        	            	}
        	                break;

        	            }

        	            switch (alt242)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:998:34: COMMA ! single_column_for_loop
        	        	    {
        	        	        COMMA727 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_model_expression_element10270);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_single_column_for_loop_in_model_expression_element10273);
        	        	        single_column_for_loop728=single_column_for_loop();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, single_column_for_loop728.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop242;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop242: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:999:10: multi_column_for_loop
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_multi_column_for_loop_in_model_expression_element10286);
        	        multi_column_for_loop729=multi_column_for_loop();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemodel_expression_elementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multi_column_for_loop729.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_expression_elementEx; /* Prevent compiler warnings */
    rulemodel_expression_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_expression_element */

/**
 * $ANTLR start single_column_for_loop
 * OracleDML.g:1002:1: single_column_for_loop : for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression ) -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) ) -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? ) ;
 */
OracleDML::single_column_for_loop_return
OracleDML::single_column_for_loop()
{
    OracleDML::single_column_for_loop_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return ex1;
    ImplTraits::TreeTypePtr::pointer ex1_last = NULL;
    OracleDML::expression_return ex2;
    ImplTraits::TreeTypePtr::pointer ex2_last = NULL;
    OracleDML::expression_return ex3;
    ImplTraits::TreeTypePtr::pointer ex3_last = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key730;
    ImplTraits::TreeTypePtr::pointer for_key730_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name731;
    ImplTraits::TreeTypePtr::pointer column_name731_last = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key732;
    ImplTraits::TreeTypePtr::pointer in_key732_last = NULL;
    OracleDML::expression_list_return expression_list733;
    ImplTraits::TreeTypePtr::pointer expression_list733_last = NULL;
    OracleDML::for_like_part_return for_like_part734;
    ImplTraits::TreeTypePtr::pointer for_like_part734_last = NULL;
    OracleDML_OracleDMLKeys::from_key_return from_key735;
    ImplTraits::TreeTypePtr::pointer from_key735_last = NULL;
    OracleDML_OracleDMLKeys::to_key_return to_key736;
    ImplTraits::TreeTypePtr::pointer to_key736_last = NULL;
    OracleDML::for_increment_decrement_type_return for_increment_decrement_type737;
    ImplTraits::TreeTypePtr::pointer for_increment_decrement_type737_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_list(get_psrstate()->get_treeAdaptor(), "rule expression_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_like_part(get_psrstate()->get_treeAdaptor(), "rule for_like_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_to_key(get_psrstate()->get_treeAdaptor(), "rule to_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_increment_decrement_type(get_psrstate()->get_treeAdaptor(), "rule for_increment_decrement_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_from_key(get_psrstate()->get_treeAdaptor(), "rule from_key");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1004:5: ( for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression ) -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) ) -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? ) )
        // OracleDML.g:1004:10: for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression )
        {
            this->followPush(FOLLOW_for_key_in_single_column_for_loop10314);
            for_key730=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesingle_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key730_last = for_key730.tree.get();
                stream_for_key.add(for_key730.tree);
            }

            this->followPush(FOLLOW_column_name_in_single_column_for_loop10316);
            column_name731=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesingle_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                column_name731_last = column_name731.tree.get();
                stream_column_name.add(column_name731.tree);
            }

            // OracleDML.g:1005:5: ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression )
            {
                ANTLR_UINT32 alt245=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_IN:
                	{
                		alt245=1;
                	}
                    break;
                case SQL92_RESERVED_FROM:
                case SQL92_RESERVED_LIKE:
                	{
                		alt245=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 245 );
                    ex->set_state( 0 );


                    goto rulesingle_column_for_loopEx;

                }

                switch (alt245)
                {
            	case 1:
            	    // OracleDML.g:1005:10: in_key expression_list
            	    {
            	        this->followPush(FOLLOW_in_key_in_single_column_for_loop10328);
            	        in_key732=in_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            in_key732_last = in_key732.tree.get();
            	            stream_in_key.add(in_key732.tree);
            	        }

            	        this->followPush(FOLLOW_expression_list_in_single_column_for_loop10330);
            	        expression_list733=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_list733_last = expression_list733.tree.get();
            	            stream_expression_list.add(expression_list733.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1006:10: ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression
            	    {
            	        // OracleDML.g:1006:10: ( for_like_part )?
            	        {
            	            ANTLR_UINT32 alt244=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_LIKE:
            	                	{
            	                		alt244=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt244)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1006:10: for_like_part
            	        	    {
            	        	        this->followPush(FOLLOW_for_like_part_in_single_column_for_loop10343);
            	        	        for_like_part734=for_like_part();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesingle_column_for_loopEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            for_like_part734_last = for_like_part734.tree.get();
            	        	            stream_for_like_part.add(for_like_part734.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_from_key_in_single_column_for_loop10346);
            	        from_key735=from_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            from_key735_last = from_key735.tree.get();
            	            stream_from_key.add(from_key735.tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_single_column_for_loop10350);
            	        ex1=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            ex1_last = ex1.tree.get();
            	            stream_expression.add(ex1.tree);
            	        }

            	        this->followPush(FOLLOW_to_key_in_single_column_for_loop10364);
            	        to_key736=to_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            to_key736_last = to_key736.tree.get();
            	            stream_to_key.add(to_key736.tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_single_column_for_loop10368);
            	        ex2=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            ex2_last = ex2.tree.get();
            	            stream_expression.add(ex2.tree);
            	        }

            	        this->followPush(FOLLOW_for_increment_decrement_type_in_single_column_for_loop10370);
            	        for_increment_decrement_type737=for_increment_decrement_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_increment_decrement_type737_last = for_increment_decrement_type737.tree.get();
            	            stream_for_increment_decrement_type.add(for_increment_decrement_type737.tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_single_column_for_loop10374);
            	        ex3=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            ex3_last = ex3.tree.get();
            	            stream_expression.add(ex3.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression_list, to_key, for_like_part, from_key, ex1, for_increment_decrement_type, ex3, column_name, ex2, column_name, in_key
            // token labels: 
            // rule labels: retval, ex3, ex2, ex1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
            RewriteRuleSubtreeStream<ImplTraits> stream_ex3(get_psrstate()->get_treeAdaptor(), "rule ex3",ex3_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_ex2(get_psrstate()->get_treeAdaptor(), "rule ex2",ex2_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_ex1(get_psrstate()->get_treeAdaptor(), "rule ex1",ex1_last); // rewrite alias

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1009:9: -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) )
            if (mode == 1) {
            	// OracleDML.g:1009:24: ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(FOR_SINGLE_COLUMN, (for_key730.start)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	// OracleDML.g:1009:72: ^( in_key expression_list )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression_list.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1010:9: -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? )
            {
            	// OracleDML.g:1010:12: ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(FOR_SINGLE_COLUMN, (for_key730.start)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	// OracleDML.g:1010:60: ^( from_key ^( EXPR $ex1) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_from_key.nextNode(), root_2);
            	// OracleDML.g:1010:71: ^( EXPR $ex1)
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_ex1.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:1010:85: ^( to_key ^( EXPR $ex2) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_to_key.nextNode(), root_2);
            	// OracleDML.g:1010:94: ^( EXPR $ex2)
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_ex2.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:1010:108: ^( for_increment_decrement_type ^( EXPR $ex3) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_for_increment_decrement_type.nextNode(), root_2);
            	// OracleDML.g:1010:139: ^( EXPR $ex3)
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_ex3.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:1010:153: ( for_like_part )?
            	if ( stream_for_like_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_for_like_part.nextTree());
            	}
            	stream_for_like_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesingle_column_for_loopEx; /* Prevent compiler warnings */
    rulesingle_column_for_loopEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end single_column_for_loop */

/**
 * $ANTLR start for_like_part
 * OracleDML.g:1013:1: for_like_part : like_key expression -> ^( like_key ^( EXPR expression ) ) ;
 */
OracleDML::for_like_part_return
OracleDML::for_like_part()
{
    OracleDML::for_like_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::like_key_return like_key738;
    ImplTraits::TreeTypePtr::pointer like_key738_last = NULL;
    OracleDML::expression_return expression739;
    ImplTraits::TreeTypePtr::pointer expression739_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_like_key(get_psrstate()->get_treeAdaptor(), "rule like_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1014:5: ( like_key expression -> ^( like_key ^( EXPR expression ) ) )
        // OracleDML.g:1014:10: like_key expression
        {
            this->followPush(FOLLOW_like_key_in_for_like_part10483);
            like_key738=like_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_like_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                like_key738_last = like_key738.tree.get();
                stream_like_key.add(like_key738.tree);
            }

            this->followPush(FOLLOW_expression_in_for_like_part10485);
            expression739=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_like_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression739_last = expression739.tree.get();
                stream_expression.add(expression739.tree);
            }

            // AST REWRITE
            // elements: expression, like_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1015:9: -> ^( like_key ^( EXPR expression ) )
            {
            	// OracleDML.g:1015:12: ^( like_key ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_like_key.nextNode(), root_1);
            	// OracleDML.g:1015:23: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_like_partEx; /* Prevent compiler warnings */
    rulefor_like_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_like_part */

/**
 * $ANTLR start for_increment_decrement_type
 * OracleDML.g:1018:1: for_increment_decrement_type : ( increment_key | decrement_key );
 */
OracleDML::for_increment_decrement_type_return
OracleDML::for_increment_decrement_type()
{
    OracleDML::for_increment_decrement_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::increment_key_return increment_key740;
    ImplTraits::TreeTypePtr::pointer increment_key740_last = NULL;
    OracleDML_OracleDMLKeys::decrement_key_return decrement_key741;
    ImplTraits::TreeTypePtr::pointer decrement_key741_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1019:5: ( increment_key | decrement_key )

            ANTLR_UINT32 alt246;

            alt246=2;

            {
                ANTLR_UINT32 LA246_0 = this->LA(1);
                if ( (LA246_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DECREMENT"))||((toUpper(LT(1)->getText()) == "INCREMENT")))))
                {
                    {
                        ANTLR_UINT32 LA246_1 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "INCREMENT")))
                        {
                            alt246=1;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "DECREMENT")))
                        {
                            alt246=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 246 );
                            ex->set_state( 1 );


                            goto rulefor_increment_decrement_typeEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 246 );
                    ex->set_state( 0 );


                    goto rulefor_increment_decrement_typeEx;

                }
            }
            switch (alt246)
            {
        	case 1:
        	    // OracleDML.g:1019:10: increment_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_increment_key_in_for_increment_decrement_type10525);
        	        increment_key740=increment_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_increment_decrement_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, increment_key740.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1020:10: decrement_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_decrement_key_in_for_increment_decrement_type10536);
        	        decrement_key741=decrement_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_increment_decrement_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, decrement_key741.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_increment_decrement_typeEx; /* Prevent compiler warnings */
    rulefor_increment_decrement_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_increment_decrement_type */

/**
 * $ANTLR start multi_column_for_loop
 * OracleDML.g:1023:1: multi_column_for_loop : for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) ) ;
 */
OracleDML::multi_column_for_loop_return
OracleDML::multi_column_for_loop()
{
    OracleDML::multi_column_for_loop_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN743 = NULL;
    ImplTraits::CommonTokenType const* COMMA745 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN747 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN749 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN751 = NULL;
    ImplTraits::CommonTokenType const* COMMA753 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN755 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN756 = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key742;
    ImplTraits::TreeTypePtr::pointer for_key742_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name744;
    ImplTraits::TreeTypePtr::pointer column_name744_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name746;
    ImplTraits::TreeTypePtr::pointer column_name746_last = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key748;
    ImplTraits::TreeTypePtr::pointer in_key748_last = NULL;
    OracleDML::subquery_return subquery750;
    ImplTraits::TreeTypePtr::pointer subquery750_last = NULL;
    OracleDML::expression_list_return expression_list752;
    ImplTraits::TreeTypePtr::pointer expression_list752_last = NULL;
    OracleDML::expression_list_return expression_list754;
    ImplTraits::TreeTypePtr::pointer expression_list754_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN743_tree;
    ImplTraits::TreeTypePtr COMMA745_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN747_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN749_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN751_tree;
    ImplTraits::TreeTypePtr COMMA753_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN755_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN756_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_list(get_psrstate()->get_treeAdaptor(), "rule expression_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1024:5: ( for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) ) )
        // OracleDML.g:1024:10: for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN
        {
            this->followPush(FOLLOW_for_key_in_multi_column_for_loop10556);
            for_key742=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key742_last = for_key742.tree.get();
                stream_for_key.add(for_key742.tree);
            }

            LEFT_PAREN743 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_multi_column_for_loop10558);
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN743);


            this->followPush(FOLLOW_column_name_in_multi_column_for_loop10560);
            column_name744=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                column_name744_last = column_name744.tree.get();
                stream_column_name.add(column_name744.tree);
            }

            // OracleDML.g:1024:41: ( COMMA column_name )*

            for (;;)
            {
                ANTLR_UINT32 alt247=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt247=1;
                	}
                    break;

                }

                switch (alt247)
                {
            	case 1:
            	    // OracleDML.g:1024:42: COMMA column_name
            	    {
            	        COMMA745 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_multi_column_for_loop10563);
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA745);


            	        this->followPush(FOLLOW_column_name_in_multi_column_for_loop10565);
            	        column_name746=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name746_last = column_name746.tree.get();
            	            stream_column_name.add(column_name746.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop247;	/* break out of the loop */
            	    break;
                }
            }
            loop247: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN747 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10569);
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN747);


            this->followPush(FOLLOW_in_key_in_multi_column_for_loop10571);
            in_key748=in_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                in_key748_last = in_key748.tree.get();
                stream_in_key.add(in_key748.tree);
            }

            LEFT_PAREN749 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_multi_column_for_loop10581);
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN749);


            // OracleDML.g:1026:13: ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN )
            {
                ANTLR_UINT32 alt249=2;
                {
                    ANTLR_UINT32 LA249_0 = this->LA(1);
                    if ( (LA249_0 == SQL92_RESERVED_SELECT) && (this->msynpred( antlr3::ClassForwarder<synpred33_OracleDML>() )))
                    {
                        alt249=1;
                    }
                    else if ( (LA249_0 == LEFT_PAREN))
                    {
                        {
                            ANTLR_UINT32 LA249_2 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred33_OracleDML>() )))
                            {
                                alt249=1;
                            }
                            else if ( (this->msynpred( antlr3::ClassForwarder<synpred34_OracleDML>() )))
                            {
                                alt249=2;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 249 );
                                ex->set_state( 2 );


                                goto rulemulti_column_for_loopEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 249 );
                        ex->set_state( 0 );


                        goto rulemulti_column_for_loopEx;

                    }
                }
                switch (alt249)
                {
            	case 1:
            	    // OracleDML.g:1026:18: ( select_key )=> subquery
            	    {
            	        this->followPush(FOLLOW_subquery_in_multi_column_for_loop10605);
            	        subquery750=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery750_last = subquery750.tree.get();
            	            stream_subquery.add(subquery750.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1027:18: ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN751 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_multi_column_for_loop10629);
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN751);


            	        this->followPush(FOLLOW_expression_list_in_multi_column_for_loop10631);
            	        expression_list752=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_list752_last = expression_list752.tree.get();
            	            stream_expression_list.add(expression_list752.tree);
            	        }

            	        // OracleDML.g:1027:60: ( COMMA expression_list )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt248=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt248=1;
            	            	}
            	                break;

            	            }

            	            switch (alt248)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1027:61: COMMA expression_list
            	        	    {
            	        	        COMMA753 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_multi_column_for_loop10634);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemulti_column_for_loopEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA753);


            	        	        this->followPush(FOLLOW_expression_list_in_multi_column_for_loop10636);
            	        	        expression_list754=expression_list();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemulti_column_for_loopEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            expression_list754_last = expression_list754.tree.get();
            	        	            stream_expression_list.add(expression_list754.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop248;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop248: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN755 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10640);
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN755);


            	    }
            	    break;

                }
            }

            RIGHT_PAREN756 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10664);
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN756);


            // AST REWRITE
            // elements: expression_list, column_name, in_key, subquery
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1030:9: -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) )
            {
            	// OracleDML.g:1030:12: ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(FOR_MULTI_COLUMN, (for_key742.start)), root_1);
            	if ( !(stream_column_name.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
            		goto rulemulti_column_for_loopEx;
            	}
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	// OracleDML.g:1030:60: ^( in_key ( subquery )? ( expression_list )* )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_2);
            	// OracleDML.g:1030:69: ( subquery )?
            	if ( stream_subquery.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_subquery.nextTree());
            	}
            	stream_subquery.reset();

            	// OracleDML.g:1030:79: ( expression_list )*
            	while ( stream_expression_list.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression_list.nextTree());
            	}
            	stream_expression_list.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemulti_column_for_loopEx; /* Prevent compiler warnings */
    rulemulti_column_for_loopEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multi_column_for_loop */

/**
 * $ANTLR start multiset_expression
 * OracleDML.g:1033:1: multiset_expression : unary_expression ( multiset_op ^ unary_expression )* ;
 */
OracleDML::multiset_expression_return
OracleDML::multiset_expression()
{
    OracleDML::multiset_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::unary_expression_return unary_expression757;
    ImplTraits::TreeTypePtr::pointer unary_expression757_last = NULL;
    OracleDML_OracleDMLCommons::multiset_op_return multiset_op758;
    ImplTraits::TreeTypePtr::pointer multiset_op758_last = NULL;
    OracleDML::unary_expression_return unary_expression759;
    ImplTraits::TreeTypePtr::pointer unary_expression759_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1034:5: ( unary_expression ( multiset_op ^ unary_expression )* )
        // OracleDML.g:1034:10: unary_expression ( multiset_op ^ unary_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_unary_expression_in_multiset_expression10712);
            unary_expression757=unary_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultiset_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression757.tree);


            // OracleDML.g:1035:10: ( multiset_op ^ unary_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt250=2;
                switch ( this->LA(1) )
                {
                case PLSQL_NON_RESERVED_MULTISET:
                	{
                		alt250=1;
                	}
                    break;

                }

                switch (alt250)
                {
            	case 1:
            	    // OracleDML.g:1035:12: multiset_op ^ unary_expression
            	    {
            	        this->followPush(FOLLOW_multiset_op_in_multiset_expression10725);
            	        multiset_op758=multiset_op();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiset_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(multiset_op758.tree, root_0);

            	        this->followPush(FOLLOW_unary_expression_in_multiset_expression10728);
            	        unary_expression759=unary_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiset_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression759.tree);


            	    }
            	    break;

            	default:
            	    goto loop250;	/* break out of the loop */
            	    break;
                }
            }
            loop250: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemultiset_expressionEx; /* Prevent compiler warnings */
    rulemultiset_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multiset_expression */

/**
 * $ANTLR start unary_expression
 * OracleDML.g:1038:1: unary_expression options {backtrack=true; } : ( MINUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression ) | PLUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression ) | prior_key ^ unary_expression | connect_by_root_key ^ unary_expression |{...}? => new_key ^ unary_expression | distinct_key ^ unary_expression | all_key ^ unary_expression |{...}? case_statement[false] | quantified_expression | standard_function -> ^( STANDARD_FUNCTION standard_function ) | atom );
 */
OracleDML::unary_expression_return
OracleDML::unary_expression()
{
    OracleDML::unary_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* MINUS_SIGN760 = NULL;
    ImplTraits::CommonTokenType const* PLUS_SIGN762 = NULL;
    OracleDML::unary_expression_return unary_expression761;
    ImplTraits::TreeTypePtr::pointer unary_expression761_last = NULL;
    OracleDML::unary_expression_return unary_expression763;
    ImplTraits::TreeTypePtr::pointer unary_expression763_last = NULL;
    OracleDML_OracleDMLKeys::prior_key_return prior_key764;
    ImplTraits::TreeTypePtr::pointer prior_key764_last = NULL;
    OracleDML::unary_expression_return unary_expression765;
    ImplTraits::TreeTypePtr::pointer unary_expression765_last = NULL;
    OracleDML_OracleDMLKeys::connect_by_root_key_return connect_by_root_key766;
    ImplTraits::TreeTypePtr::pointer connect_by_root_key766_last = NULL;
    OracleDML::unary_expression_return unary_expression767;
    ImplTraits::TreeTypePtr::pointer unary_expression767_last = NULL;
    OracleDML_OracleDMLKeys::new_key_return new_key768;
    ImplTraits::TreeTypePtr::pointer new_key768_last = NULL;
    OracleDML::unary_expression_return unary_expression769;
    ImplTraits::TreeTypePtr::pointer unary_expression769_last = NULL;
    OracleDML_OracleDMLKeys::distinct_key_return distinct_key770;
    ImplTraits::TreeTypePtr::pointer distinct_key770_last = NULL;
    OracleDML::unary_expression_return unary_expression771;
    ImplTraits::TreeTypePtr::pointer unary_expression771_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key772;
    ImplTraits::TreeTypePtr::pointer all_key772_last = NULL;
    OracleDML::unary_expression_return unary_expression773;
    ImplTraits::TreeTypePtr::pointer unary_expression773_last = NULL;
    OracleDML::case_statement_return case_statement774;
    ImplTraits::TreeTypePtr::pointer case_statement774_last = NULL;
    OracleDML::quantified_expression_return quantified_expression775;
    ImplTraits::TreeTypePtr::pointer quantified_expression775_last = NULL;
    OracleDML::standard_function_return standard_function776;
    ImplTraits::TreeTypePtr::pointer standard_function776_last = NULL;
    OracleDML::atom_return atom777;
    ImplTraits::TreeTypePtr::pointer atom777_last = NULL;
    ImplTraits::TreeTypePtr MINUS_SIGN760_tree;
    ImplTraits::TreeTypePtr PLUS_SIGN762_tree;
    RewriteRuleTokenStream<ImplTraits> stream_PLUS_SIGN(get_psrstate()->get_treeAdaptor(), "token PLUS_SIGN");
    RewriteRuleTokenStream<ImplTraits> stream_MINUS_SIGN(get_psrstate()->get_treeAdaptor(), "token MINUS_SIGN");
    RewriteRuleSubtreeStream<ImplTraits> stream_unary_expression(get_psrstate()->get_treeAdaptor(), "rule unary_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_standard_function(get_psrstate()->get_treeAdaptor(), "rule standard_function");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1043:5: ( MINUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression ) | PLUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression ) | prior_key ^ unary_expression | connect_by_root_key ^ unary_expression |{...}? => new_key ^ unary_expression | distinct_key ^ unary_expression | all_key ^ unary_expression |{...}? case_statement[false] | quantified_expression | standard_function -> ^( STANDARD_FUNCTION standard_function ) | atom )

            ANTLR_UINT32 alt251;

            alt251=11;

            switch ( this->LA(1) )
            {
            case MINUS_SIGN:
            	{
            		alt251=1;
            	}
                break;
            case PLUS_SIGN:
            	{
            		alt251=2;
            	}
                break;
            case SQL92_RESERVED_PRIOR:
            	{
            		alt251=3;
            	}
                break;
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            	{
            		alt251=4;
            	}
                break;
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA251_5 = this->LA(2);
            		    if ( (( (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && (this->msynpred( antlr3::ClassForwarder<synpred39_OracleDML>() )) )) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt251=5;
            		    }
            		    else if ( (( (( (((LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE))) && ((!m_case_statement_stack.peek().isStatement)) )) && (this->msynpred( antlr3::ClassForwarder<synpred42_OracleDML>() )) )))
            		    {
            		        alt251=8;
            		    }
            		    else if ( (( (this->msynpred( antlr3::ClassForwarder<synpred43_OracleDML>() )) && ((toUpper(LT(1)->getText()) == "SOME")) )))
            		    {
            		        alt251=9;
            		    }
            		    else if ( (( ((((toUpper(LT(1)->getText()) == "XMLCAST"))||((toUpper(LT(1)->getText()) == "XMLEXISTS"))||((toUpper(LT(1)->getText()) == "XMLCOLATTVAL"))||((toUpper(LT(1)->getText()) == "DECOMPOSE"))||((enablesWithinOrOverClause(LT(1)->getText())))||((isStandardPredictionFunction(LT(1)->getText())))||((toUpper(LT(1)->getText()) == "TRANSLATE"))||((toUpper(LT(1)->getText()) == "TREAT"))||((toUpper(LT(1)->getText()) == "XMLAGG"))||((toUpper(LT(1)->getText()) == "COLLECT"))||((toUpper(LT(1)->getText()) == "XMLELEMENT"))||((toUpper(LT(1)->getText()) == "LAST_VALUE"))||((enablesOverClause(LT(1)->getText())))||((enablesUsingClause(LT(1)->getText())))||((toUpper(LT(1)->getText()) == "EXTRACT"))||((toUpper(LT(1)->getText()) == "XMLQUERY"))||((toUpper(LT(1)->getText()) == "TRIM"))||((toUpper(LT(1)->getText()) == "XMLPI"))||((toUpper(LT(1)->getText()) == "FIRST_VALUE"))||((toUpper(LT(1)->getText()) == "COUNT" ))||((toUpper(LT(1)->getText()) == "XMLTABLE"))||((toUpper(LT(1)->getText()) == "XMLPARSE"))||((toUpper(LT(1)->getText()) == "CHR"))||((toUpper(LT(1)->getText()) == "XMLSERIALIZE"))||((toUpper(LT(1)->getText()) == "XMLROOT"))||((toUpper(LT(1)->getText()) == "XMLFOREST")))) && (this->msynpred( antlr3::ClassForwarder<synpred44_OracleDML>() )) )))
            		    {
            		        alt251=10;
            		    }
            		    else if ( (true))
            		    {
            		        alt251=11;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 251 );
            		        ex->set_state( 5 );


            		        goto ruleunary_expressionEx;

            		    }
            		}
            	}
                break;
            case SQL92_RESERVED_DISTINCT:
            	{
            		alt251=6;
            	}
                break;
            case SQL92_RESERVED_ALL:
            	{
            		{
            		    ANTLR_UINT32 LA251_7 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred41_OracleDML>() )))
            		    {
            		        alt251=7;
            		    }
            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred43_OracleDML>() )))
            		    {
            		        alt251=9;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 251 );
            		        ex->set_state( 7 );


            		        goto ruleunary_expressionEx;

            		    }
            		}
            	}
                break;
            case DELIMITED_ID:
            	{
            		{
            		    ANTLR_UINT32 LA251_8 = this->LA(2);
            		    if ( (( (( (((LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE))) && ((!m_case_statement_stack.peek().isStatement)) )) && (this->msynpred( antlr3::ClassForwarder<synpred42_OracleDML>() )) )))
            		    {
            		        alt251=8;
            		    }
            		    else if ( (true))
            		    {
            		        alt251=11;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 251 );
            		        ex->set_state( 8 );


            		        goto ruleunary_expressionEx;

            		    }
            		}
            	}
                break;
            case SQL92_RESERVED_CASE:
            	{
            		alt251=8;
            	}
                break;
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_EXISTS:
            	{
            		alt251=9;
            	}
                break;
            case PLSQL_NON_RESERVED_CAST:
            	{
            		alt251=10;
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case NATIONAL_CHAR_STRING_LIT:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt251=11;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 251 );
                ex->set_state( 0 );


                goto ruleunary_expressionEx;

            }

            switch (alt251)
            {
        	case 1:
        	    // OracleDML.g:1043:10: MINUS_SIGN unary_expression
        	    {
        	        MINUS_SIGN760 =  this->matchToken(MINUS_SIGN, &FOLLOW_MINUS_SIGN_in_unary_expression10760);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_MINUS_SIGN.add(MINUS_SIGN760);


        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10762);
        	        unary_expression761=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            unary_expression761_last = unary_expression761.tree.get();
        	            stream_unary_expression.add(unary_expression761.tree);
        	        }

        	        // AST REWRITE
        	        // elements: unary_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 1043:38: -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression )
        	        {
        	        	// OracleDML.g:1043:41: ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(UNARY_OPERATOR, MINUS_SIGN760), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unary_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1044:10: PLUS_SIGN unary_expression
        	    {
        	        PLUS_SIGN762 =  this->matchToken(PLUS_SIGN, &FOLLOW_PLUS_SIGN_in_unary_expression10782);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_PLUS_SIGN.add(PLUS_SIGN762);


        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10784);
        	        unary_expression763=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            unary_expression763_last = unary_expression763.tree.get();
        	            stream_unary_expression.add(unary_expression763.tree);
        	        }

        	        // AST REWRITE
        	        // elements: unary_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 1044:37: -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression )
        	        {
        	        	// OracleDML.g:1044:40: ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(UNARY_OPERATOR, PLUS_SIGN762), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unary_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:1045:10: prior_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_prior_key_in_unary_expression10804);
        	        prior_key764=prior_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(prior_key764.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10807);
        	        unary_expression765=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression765.tree);


        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:1046:10: connect_by_root_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_connect_by_root_key_in_unary_expression10818);
        	        connect_by_root_key766=connect_by_root_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(connect_by_root_key766.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10821);
        	        unary_expression767=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression767.tree);


        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:1047:10: {...}? => new_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        if ( !((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) )
        	        {
        	            if (this->get_backtracking()>0)
        	            {
        	                this->set_failedflag( true );
        	                return retval;
        	            }

        	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "LT(1)->getText() == \"NEW\" && LT(2)->getText() != \".\"" );
        	                ex->set_ruleName( "unary_expression" );


        	        }

        	        this->followPush(FOLLOW_new_key_in_unary_expression10835);
        	        new_key768=new_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(new_key768.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10838);
        	        unary_expression769=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression769.tree);


        	    }
        	    break;
        	case 6:
        	    // OracleDML.g:1048:10: distinct_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_distinct_key_in_unary_expression10849);
        	        distinct_key770=distinct_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(distinct_key770.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10852);
        	        unary_expression771=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression771.tree);


        	    }
        	    break;
        	case 7:
        	    // OracleDML.g:1049:10: all_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_all_key_in_unary_expression10863);
        	        all_key772=all_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(all_key772.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10866);
        	        unary_expression773=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression773.tree);


        	    }
        	    break;
        	case 8:
        	    // OracleDML.g:1050:10: {...}? case_statement[false]
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        if ( !(((LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE))) )
        	        {
        	            if (this->get_backtracking()>0)
        	            {
        	                this->set_failedflag( true );
        	                return retval;
        	            }

        	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "(LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE)" );
        	                ex->set_ruleName( "unary_expression" );


        	        }

        	        this->followPush(FOLLOW_case_statement_in_unary_expression10879);
        	        case_statement774=case_statement(false);

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, case_statement774.tree);


        	    }
        	    break;
        	case 9:
        	    // OracleDML.g:1051:10: quantified_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_quantified_expression_in_unary_expression10891);
        	        quantified_expression775=quantified_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, quantified_expression775.tree);


        	    }
        	    break;
        	case 10:
        	    // OracleDML.g:1052:10: standard_function
        	    {
        	        this->followPush(FOLLOW_standard_function_in_unary_expression10902);
        	        standard_function776=standard_function();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            standard_function776_last = standard_function776.tree.get();
        	            stream_standard_function.add(standard_function776.tree);
        	        }

        	        // AST REWRITE
        	        // elements: standard_function
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 1052:28: -> ^( STANDARD_FUNCTION standard_function )
        	        {
        	        	// OracleDML.g:1052:31: ^( STANDARD_FUNCTION standard_function )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(STANDARD_FUNCTION, "STANDARD_FUNCTION"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_standard_function.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 11:
        	    // OracleDML.g:1053:10: atom
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_atom_in_unary_expression10921);
        	        atom777=atom();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, atom777.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleunary_expressionEx; /* Prevent compiler warnings */
    ruleunary_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end unary_expression */

/**
 * $ANTLR start case_statement
 * OracleDML.g:1056:1: case_statement[int isStatementParameter] : ( ( ( label_name )? case_key when_key )=> searched_case_statement | simple_case_statement );
 */
OracleDML::case_statement_return
OracleDML::case_statement(int isStatementParameter)
{
    OracleDML::case_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::searched_case_statement_return searched_case_statement778;
    ImplTraits::TreeTypePtr::pointer searched_case_statement778_last = NULL;
    OracleDML::simple_case_statement_return simple_case_statement779;
    ImplTraits::TreeTypePtr::pointer simple_case_statement779_last = NULL;

    /* Initialize rule variables
     */
    m_case_statement_stack.push(case_statementScope()); 
    m_case_statement_stack.peek().isStatement = isStatementParameter;
    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1061:5: ( ( ( label_name )? case_key when_key )=> searched_case_statement | simple_case_statement )

            ANTLR_UINT32 alt252;

            alt252=2;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case SQL92_RESERVED_CASE:
            			{
            				{
            				    ANTLR_UINT32 LA252_3 = this->LA(3);
            				    if ( (LA252_3 == SQL92_RESERVED_WHEN) && (this->msynpred( antlr3::ClassForwarder<synpred45_OracleDML>() )))
            				    {
            				        alt252=1;
            				    }
            				    else if ( (LA252_3 == APPROXIMATE_NUM_LIT || LA252_3 == BINDVAR || ((LA252_3 >= CHAR_STRING) && (LA252_3 <= CHAR_STRING_PERL)) || LA252_3 == COLON || LA252_3 == DELIMITED_ID || LA252_3 == EXACT_NUM_LIT || LA252_3 == INTRODUCER || LA252_3 == LEFT_PAREN || LA252_3 == NATIONAL_CHAR_STRING_LIT || LA252_3 == REGULAR_ID || LA252_3 == SQL92_RESERVED_DATE || LA252_3 == SQL92_RESERVED_DEFAULT || LA252_3 == SQL92_RESERVED_FALSE || LA252_3 == SQL92_RESERVED_NULL || LA252_3 == SQL92_RESERVED_TRUE || LA252_3 == UNSIGNED_INTEGER))
            				    {
            				        alt252=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            m_case_statement_stack.pop(); 

            				            return retval;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 252 );
            				        ex->set_state( 3 );


            				        goto rulecase_statementEx;

            				    }
            				}
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        m_case_statement_stack.pop(); 

            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 252 );
            		    ex->set_state( 1 );


            		    goto rulecase_statementEx;

            		}

            	}
                break;
            case DELIMITED_ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case SQL92_RESERVED_CASE:
            			{
            				{
            				    ANTLR_UINT32 LA252_3 = this->LA(3);
            				    if ( (LA252_3 == SQL92_RESERVED_WHEN) && (this->msynpred( antlr3::ClassForwarder<synpred45_OracleDML>() )))
            				    {
            				        alt252=1;
            				    }
            				    else if ( (LA252_3 == APPROXIMATE_NUM_LIT || LA252_3 == BINDVAR || ((LA252_3 >= CHAR_STRING) && (LA252_3 <= CHAR_STRING_PERL)) || LA252_3 == COLON || LA252_3 == DELIMITED_ID || LA252_3 == EXACT_NUM_LIT || LA252_3 == INTRODUCER || LA252_3 == LEFT_PAREN || LA252_3 == NATIONAL_CHAR_STRING_LIT || LA252_3 == REGULAR_ID || LA252_3 == SQL92_RESERVED_DATE || LA252_3 == SQL92_RESERVED_DEFAULT || LA252_3 == SQL92_RESERVED_FALSE || LA252_3 == SQL92_RESERVED_NULL || LA252_3 == SQL92_RESERVED_TRUE || LA252_3 == UNSIGNED_INTEGER))
            				    {
            				        alt252=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            m_case_statement_stack.pop(); 

            				            return retval;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 252 );
            				        ex->set_state( 3 );


            				        goto rulecase_statementEx;

            				    }
            				}
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        m_case_statement_stack.pop(); 

            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 252 );
            		    ex->set_state( 2 );


            		    goto rulecase_statementEx;

            		}

            	}
                break;
            case SQL92_RESERVED_CASE:
            	{
            		{
            		    ANTLR_UINT32 LA252_3 = this->LA(2);
            		    if ( (LA252_3 == SQL92_RESERVED_WHEN) && (this->msynpred( antlr3::ClassForwarder<synpred45_OracleDML>() )))
            		    {
            		        alt252=1;
            		    }
            		    else if ( (LA252_3 == APPROXIMATE_NUM_LIT || LA252_3 == BINDVAR || ((LA252_3 >= CHAR_STRING) && (LA252_3 <= CHAR_STRING_PERL)) || LA252_3 == COLON || LA252_3 == DELIMITED_ID || LA252_3 == EXACT_NUM_LIT || LA252_3 == INTRODUCER || LA252_3 == LEFT_PAREN || LA252_3 == NATIONAL_CHAR_STRING_LIT || LA252_3 == REGULAR_ID || LA252_3 == SQL92_RESERVED_DATE || LA252_3 == SQL92_RESERVED_DEFAULT || LA252_3 == SQL92_RESERVED_FALSE || LA252_3 == SQL92_RESERVED_NULL || LA252_3 == SQL92_RESERVED_TRUE || LA252_3 == UNSIGNED_INTEGER))
            		    {
            		        alt252=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            m_case_statement_stack.pop(); 

            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 252 );
            		        ex->set_state( 3 );


            		        goto rulecase_statementEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    m_case_statement_stack.pop(); 

                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 252 );
                ex->set_state( 0 );


                goto rulecase_statementEx;

            }

            switch (alt252)
            {
        	case 1:
        	    // OracleDML.g:1061:10: ( ( label_name )? case_key when_key )=> searched_case_statement
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_searched_case_statement_in_case_statement10968);
        	        searched_case_statement778=searched_case_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecase_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            m_case_statement_stack.pop(); 

        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, searched_case_statement778.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1062:10: simple_case_statement
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_simple_case_statement_in_case_statement10979);
        	        simple_case_statement779=simple_case_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecase_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            m_case_statement_stack.pop(); 

        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, simple_case_statement779.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulecase_statementEx; /* Prevent compiler warnings */
    rulecase_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    m_case_statement_stack.pop(); 

    return retval;
}
/* $ANTLR end case_statement */

/**
 * $ANTLR start simple_case_statement
 * OracleDML.g:1067:1: simple_case_statement : ({...}? ( label_name )? ) ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |) -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? end_key ) ;
 */
OracleDML::simple_case_statement_return
OracleDML::simple_case_statement()
{
    OracleDML::simple_case_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::case_key_return ck1;
    ImplTraits::TreeTypePtr::pointer ck1_last = NULL;
    OracleDML_OracleDMLCommons::label_name_return label_name780;
    ImplTraits::TreeTypePtr::pointer label_name780_last = NULL;
    OracleDML::atom_return atom781;
    ImplTraits::TreeTypePtr::pointer atom781_last = NULL;
    OracleDML::simple_case_when_part_return simple_case_when_part782;
    ImplTraits::TreeTypePtr::pointer simple_case_when_part782_last = NULL;
    OracleDML::case_else_part_return case_else_part783;
    ImplTraits::TreeTypePtr::pointer case_else_part783_last = NULL;
    OracleDML_OracleDMLKeys::end_key_return end_key784;
    ImplTraits::TreeTypePtr::pointer end_key784_last = NULL;
    OracleDML_OracleDMLKeys::case_key_return case_key785;
    ImplTraits::TreeTypePtr::pointer case_key785_last = NULL;
    OracleDML_OracleDMLCommons::label_name_return label_name786;
    ImplTraits::TreeTypePtr::pointer label_name786_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_atom(get_psrstate()->get_treeAdaptor(), "rule atom");
    RewriteRuleSubtreeStream<ImplTraits> stream_simple_case_when_part(get_psrstate()->get_treeAdaptor(), "rule simple_case_when_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_label_name(get_psrstate()->get_treeAdaptor(), "rule label_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_case_else_part(get_psrstate()->get_treeAdaptor(), "rule case_else_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_case_key(get_psrstate()->get_treeAdaptor(), "rule case_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_end_key(get_psrstate()->get_treeAdaptor(), "rule end_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1068:5: ( ({...}? ( label_name )? ) ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |) -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? end_key ) )
        // OracleDML.g:1068:9: ({...}? ( label_name )? ) ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |)
        {
            // OracleDML.g:1068:9: ({...}? ( label_name )? )
            // OracleDML.g:1068:10: {...}? ( label_name )?
            {
                if ( !((!m_case_statement_stack.peek().isStatement)) )
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!$case_statement::isStatement" );
                        ex->set_ruleName( "simple_case_statement" );


                }

                // OracleDML.g:1068:43: ( label_name )?
                {
                    ANTLR_UINT32 alt253=2;
                    switch ( this->LA(1) )
                    {
                        case DELIMITED_ID:
                        case REGULAR_ID:
                        	{
                        		alt253=1;
                        	}
                            break;
                    }

                    switch (alt253)
                    {
                	case 1:
                	    // OracleDML.g:1068:43: label_name
                	    {
                	        this->followPush(FOLLOW_label_name_in_simple_case_statement11003);
                	        label_name780=label_name();

                	        this->followPop();
                	        if  (this->hasException())
                	        {
                	            goto rulesimple_case_statementEx;
                	        }
                	        if (this->hasFailed())
                	        {
                	            return retval;
                	        }

                	        if ( this->get_backtracking()==0 ) 
                	        {
                	            label_name780_last = label_name780.tree.get();
                	            stream_label_name.add(label_name780.tree);
                	        }

                	    }
                	    break;

                    }
                }

            }


            this->followPush(FOLLOW_case_key_in_simple_case_statement11009);
            ck1=case_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                ck1_last = ck1.tree.get();
                stream_case_key.add(ck1.tree);
            }

            this->followPush(FOLLOW_atom_in_simple_case_statement11011);
            atom781=atom();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                atom781_last = atom781.tree.get();
                stream_atom.add(atom781.tree);
            }

            // OracleDML.g:1069:9: ( simple_case_when_part )+
            {
                int cnt254=0;

                for (;;)
                {
                    ANTLR_UINT32 alt254=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_WHEN:
            		{
            			alt254=1;
            		}
            	    break;

            	}

            	switch (alt254)
            	{
            	    case 1:
            	        // OracleDML.g:1069:9: simple_case_when_part
            	        {
            	            this->followPush(FOLLOW_simple_case_when_part_in_simple_case_statement11021);
            	            simple_case_when_part782=simple_case_when_part();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesimple_case_statementEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) 
            	            {
            	                simple_case_when_part782_last = simple_case_when_part782.tree.get();
            	                stream_simple_case_when_part.add(simple_case_when_part782.tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt254 >= 1 )
            		{
            		    goto loop254;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulesimple_case_statementEx;
            	}
            	cnt254++;
                }
                loop254: ;	/* Jump to here if this rule does not match */
            }

            // OracleDML.g:1070:9: ( case_else_part )?
            {
                ANTLR_UINT32 alt255=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ELSE:
                    	{
                    		alt255=1;
                    	}
                        break;
                }

                switch (alt255)
                {
            	case 1:
            	    // OracleDML.g:1070:9: case_else_part
            	    {
            	        this->followPush(FOLLOW_case_else_part_in_simple_case_statement11033);
            	        case_else_part783=case_else_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesimple_case_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            case_else_part783_last = case_else_part783.tree.get();
            	            stream_case_else_part.add(case_else_part783.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_end_key_in_simple_case_statement11044);
            end_key784=end_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                end_key784_last = end_key784.tree.get();
                stream_end_key.add(end_key784.tree);
            }

            // OracleDML.g:1071:17: ({...}? case_key ( label_name )? |)
            {
                ANTLR_UINT32 alt257=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_CASE:
                	{
                		alt257=1;
                	}
                    break;
                case EOF_TOKEN:
                case ASTERISK:
                case CARRET_OPERATOR_PART:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COMMA:
                case CONCATENATION_OP:
                case DELIMITED_ID:
                case EQUALS_OP:
                case EXCLAMATION_OPERATOR_PART:
                case GREATER_THAN_OP:
                case GREATER_THAN_OR_EQUALS_OP:
                case INTRODUCER:
                case LEFT_BRACKET:
                case LEFT_PAREN:
                case LESS_THAN_OP:
                case LESS_THAN_OR_EQUALS_OP:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case NOT_EQUAL_OP:
                case PLSQL_NON_RESERVED_MODEL:
                case PLSQL_NON_RESERVED_MULTISET:
                case PLSQL_NON_RESERVED_PIVOT:
                case PLSQL_NON_RESERVED_UNPIVOT:
                case PLSQL_NON_RESERVED_USING:
                case PLSQL_RESERVED_MINUS:
                case PLSQL_RESERVED_START:
                case PLUS_SIGN:
                case REGULAR_ID:
                case RIGHT_BRACKET:
                case RIGHT_PAREN:
                case SEMICOLON:
                case SOLIDUS:
                case SQL92_RESERVED_AND:
                case SQL92_RESERVED_AS:
                case SQL92_RESERVED_ASC:
                case SQL92_RESERVED_BETWEEN:
                case SQL92_RESERVED_CONNECT:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_DESC:
                case SQL92_RESERVED_ELSE:
                case SQL92_RESERVED_END:
                case SQL92_RESERVED_FOR:
                case SQL92_RESERVED_FROM:
                case SQL92_RESERVED_GROUP:
                case SQL92_RESERVED_HAVING:
                case SQL92_RESERVED_IN:
                case SQL92_RESERVED_INTERSECT:
                case SQL92_RESERVED_INTO:
                case SQL92_RESERVED_IS:
                case SQL92_RESERVED_LIKE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_ON:
                case SQL92_RESERVED_OR:
                case SQL92_RESERVED_ORDER:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_THEN:
                case SQL92_RESERVED_TO:
                case SQL92_RESERVED_UNION:
                case SQL92_RESERVED_WHEN:
                case SQL92_RESERVED_WHERE:
                case SQL92_RESERVED_WITH:
                case VERTICAL_BAR:
                	{
                		alt257=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 257 );
                    ex->set_state( 0 );


                    goto rulesimple_case_statementEx;

                }

                switch (alt257)
                {
            	case 1:
            	    // OracleDML.g:1071:18: {...}? case_key ( label_name )?
            	    {
            	        if ( !((!m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!$case_statement::isStatement" );
            	                ex->set_ruleName( "simple_case_statement" );


            	        }

            	        this->followPush(FOLLOW_case_key_in_simple_case_statement11049);
            	        case_key785=case_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesimple_case_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            case_key785_last = case_key785.tree.get();
            	            stream_case_key.add(case_key785.tree);
            	        }

            	        // OracleDML.g:1071:60: ( label_name )?
            	        {
            	            ANTLR_UINT32 alt256=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		alt256=1;
            	                	}
            	                    break;
            	                case DELIMITED_ID:
            	                	{
            	                		alt256=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt256)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1071:60: label_name
            	        	    {
            	        	        this->followPush(FOLLOW_label_name_in_simple_case_statement11051);
            	        	        label_name786=label_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesimple_case_statementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            label_name786_last = label_name786.tree.get();
            	        	            stream_label_name.add(label_name786.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1071:74: 
            	    {
            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: simple_case_when_part, end_key, case_else_part, label_name, atom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1072:9: -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? end_key )
            {
            	// OracleDML.g:1072:12: ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? end_key )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SIMPLE_CASE, (ck1.start)), root_1);
            	// OracleDML.g:1072:38: ( label_name )*
            	while ( stream_label_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_label_name.nextTree());
            	}
            	stream_label_name.reset();

            	// OracleDML.g:1072:50: ^( EXPR atom )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_atom.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	if ( !(stream_simple_case_when_part.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "simple_case_when_part empty" );
            		goto rulesimple_case_statementEx;
            	}
            	while ( stream_simple_case_when_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_simple_case_when_part.nextTree());
            	}
            	stream_simple_case_when_part.reset();

            	// OracleDML.g:1072:86: ( case_else_part )?
            	if ( stream_case_else_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_case_else_part.nextTree());
            	}
            	stream_case_else_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_end_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesimple_case_statementEx; /* Prevent compiler warnings */
    rulesimple_case_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end simple_case_statement */

/**
 * $ANTLR start simple_case_when_part
 * OracleDML.g:1075:1: simple_case_when_part : when_key ^ew1= expression_wrapper then_key ! ({...}? seq_of_statements |ew2= expression_wrapper ) ;
 */
OracleDML::simple_case_when_part_return
OracleDML::simple_case_when_part()
{
    OracleDML::simple_case_when_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_wrapper_return ew1;
    ImplTraits::TreeTypePtr::pointer ew1_last = NULL;
    OracleDML::expression_wrapper_return ew2;
    ImplTraits::TreeTypePtr::pointer ew2_last = NULL;
    OracleDML_OracleDMLKeys::when_key_return when_key787;
    ImplTraits::TreeTypePtr::pointer when_key787_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key788;
    ImplTraits::TreeTypePtr::pointer then_key788_last = NULL;
    OracleDML::seq_of_statements_return seq_of_statements789;
    ImplTraits::TreeTypePtr::pointer seq_of_statements789_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1076:5: ( when_key ^ew1= expression_wrapper then_key ! ({...}? seq_of_statements |ew2= expression_wrapper ) )
        // OracleDML.g:1076:10: when_key ^ew1= expression_wrapper then_key ! ({...}? seq_of_statements |ew2= expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_when_key_in_simple_case_when_part11108);
            when_key787=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(when_key787.tree, root_0);

            this->followPush(FOLLOW_expression_wrapper_in_simple_case_when_part11113);
            ew1=expression_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, ew1.tree);


            this->followPush(FOLLOW_then_key_in_simple_case_when_part11115);
            then_key788=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            // OracleDML.g:1076:53: ({...}? seq_of_statements |ew2= expression_wrapper )
            {
                ANTLR_UINT32 alt258=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_LOCK:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_INSERT:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_UPDATE:
                case SQL92_RESERVED_WITH:
                	{
                		alt258=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA258_3 = this->LA(2);
                		    if ( ((m_case_statement_stack.peek().isStatement)))
                		    {
                		        alt258=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt258=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 258 );
                		        ex->set_state( 3 );


                		        goto rulesimple_case_when_partEx;

                		    }
                		}
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA258_8 = this->LA(2);
                		    if ( (( ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))) && ((m_case_statement_stack.peek().isStatement)) )))
                		    {
                		        alt258=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt258=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 258 );
                		        ex->set_state( 8 );


                		        goto rulesimple_case_when_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt258=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 258 );
                    ex->set_state( 0 );


                    goto rulesimple_case_when_partEx;

                }

                switch (alt258)
                {
            	case 1:
            	    // OracleDML.g:1076:54: {...}? seq_of_statements
            	    {
            	        if ( !((m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "$case_statement::isStatement" );
            	                ex->set_ruleName( "simple_case_when_part" );


            	        }

            	        this->followPush(FOLLOW_seq_of_statements_in_simple_case_when_part11121);
            	        seq_of_statements789=seq_of_statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesimple_case_when_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, seq_of_statements789.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1076:106: ew2= expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_simple_case_when_part11127);
            	        ew2=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesimple_case_when_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, ew2.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesimple_case_when_partEx; /* Prevent compiler warnings */
    rulesimple_case_when_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end simple_case_when_part */

/**
 * $ANTLR start searched_case_statement
 * OracleDML.g:1079:1: searched_case_statement : ({...}? ( label_name )? ) ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |) -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? end_key ) ;
 */
OracleDML::searched_case_statement_return
OracleDML::searched_case_statement()
{
    OracleDML::searched_case_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::case_key_return ck1;
    ImplTraits::TreeTypePtr::pointer ck1_last = NULL;
    OracleDML_OracleDMLCommons::label_name_return label_name790;
    ImplTraits::TreeTypePtr::pointer label_name790_last = NULL;
    OracleDML::searched_case_when_part_return searched_case_when_part791;
    ImplTraits::TreeTypePtr::pointer searched_case_when_part791_last = NULL;
    OracleDML::case_else_part_return case_else_part792;
    ImplTraits::TreeTypePtr::pointer case_else_part792_last = NULL;
    OracleDML_OracleDMLKeys::end_key_return end_key793;
    ImplTraits::TreeTypePtr::pointer end_key793_last = NULL;
    OracleDML_OracleDMLKeys::case_key_return case_key794;
    ImplTraits::TreeTypePtr::pointer case_key794_last = NULL;
    OracleDML_OracleDMLCommons::label_name_return label_name795;
    ImplTraits::TreeTypePtr::pointer label_name795_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_searched_case_when_part(get_psrstate()->get_treeAdaptor(), "rule searched_case_when_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_label_name(get_psrstate()->get_treeAdaptor(), "rule label_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_case_else_part(get_psrstate()->get_treeAdaptor(), "rule case_else_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_case_key(get_psrstate()->get_treeAdaptor(), "rule case_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_end_key(get_psrstate()->get_treeAdaptor(), "rule end_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1080:5: ( ({...}? ( label_name )? ) ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |) -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? end_key ) )
        // OracleDML.g:1080:9: ({...}? ( label_name )? ) ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |)
        {
            // OracleDML.g:1080:9: ({...}? ( label_name )? )
            // OracleDML.g:1080:10: {...}? ( label_name )?
            {
                if ( !((!m_case_statement_stack.peek().isStatement)) )
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!$case_statement::isStatement" );
                        ex->set_ruleName( "searched_case_statement" );


                }

                // OracleDML.g:1080:43: ( label_name )?
                {
                    ANTLR_UINT32 alt259=2;
                    switch ( this->LA(1) )
                    {
                        case DELIMITED_ID:
                        case REGULAR_ID:
                        	{
                        		alt259=1;
                        	}
                            break;
                    }

                    switch (alt259)
                    {
                	case 1:
                	    // OracleDML.g:1080:43: label_name
                	    {
                	        this->followPush(FOLLOW_label_name_in_searched_case_statement11150);
                	        label_name790=label_name();

                	        this->followPop();
                	        if  (this->hasException())
                	        {
                	            goto rulesearched_case_statementEx;
                	        }
                	        if (this->hasFailed())
                	        {
                	            return retval;
                	        }

                	        if ( this->get_backtracking()==0 ) 
                	        {
                	            label_name790_last = label_name790.tree.get();
                	            stream_label_name.add(label_name790.tree);
                	        }

                	    }
                	    break;

                    }
                }

            }


            this->followPush(FOLLOW_case_key_in_searched_case_statement11156);
            ck1=case_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                ck1_last = ck1.tree.get();
                stream_case_key.add(ck1.tree);
            }

            // OracleDML.g:1081:9: ( searched_case_when_part )+
            {
                int cnt260=0;

                for (;;)
                {
                    ANTLR_UINT32 alt260=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_WHEN:
            		{
            			alt260=1;
            		}
            	    break;

            	}

            	switch (alt260)
            	{
            	    case 1:
            	        // OracleDML.g:1081:9: searched_case_when_part
            	        {
            	            this->followPush(FOLLOW_searched_case_when_part_in_searched_case_statement11166);
            	            searched_case_when_part791=searched_case_when_part();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesearched_case_statementEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) 
            	            {
            	                searched_case_when_part791_last = searched_case_when_part791.tree.get();
            	                stream_searched_case_when_part.add(searched_case_when_part791.tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt260 >= 1 )
            		{
            		    goto loop260;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulesearched_case_statementEx;
            	}
            	cnt260++;
                }
                loop260: ;	/* Jump to here if this rule does not match */
            }

            // OracleDML.g:1082:9: ( case_else_part )?
            {
                ANTLR_UINT32 alt261=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ELSE:
                    	{
                    		alt261=1;
                    	}
                        break;
                }

                switch (alt261)
                {
            	case 1:
            	    // OracleDML.g:1082:9: case_else_part
            	    {
            	        this->followPush(FOLLOW_case_else_part_in_searched_case_statement11177);
            	        case_else_part792=case_else_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearched_case_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            case_else_part792_last = case_else_part792.tree.get();
            	            stream_case_else_part.add(case_else_part792.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_end_key_in_searched_case_statement11188);
            end_key793=end_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                end_key793_last = end_key793.tree.get();
                stream_end_key.add(end_key793.tree);
            }

            // OracleDML.g:1083:17: ({...}? case_key ( label_name )? |)
            {
                ANTLR_UINT32 alt263=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_CASE:
                	{
                		alt263=1;
                	}
                    break;
                case EOF_TOKEN:
                case ASTERISK:
                case CARRET_OPERATOR_PART:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COMMA:
                case CONCATENATION_OP:
                case DELIMITED_ID:
                case EQUALS_OP:
                case EXCLAMATION_OPERATOR_PART:
                case GREATER_THAN_OP:
                case GREATER_THAN_OR_EQUALS_OP:
                case INTRODUCER:
                case LEFT_BRACKET:
                case LEFT_PAREN:
                case LESS_THAN_OP:
                case LESS_THAN_OR_EQUALS_OP:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case NOT_EQUAL_OP:
                case PLSQL_NON_RESERVED_MODEL:
                case PLSQL_NON_RESERVED_MULTISET:
                case PLSQL_NON_RESERVED_PIVOT:
                case PLSQL_NON_RESERVED_UNPIVOT:
                case PLSQL_NON_RESERVED_USING:
                case PLSQL_RESERVED_MINUS:
                case PLSQL_RESERVED_START:
                case PLUS_SIGN:
                case REGULAR_ID:
                case RIGHT_BRACKET:
                case RIGHT_PAREN:
                case SEMICOLON:
                case SOLIDUS:
                case SQL92_RESERVED_AND:
                case SQL92_RESERVED_AS:
                case SQL92_RESERVED_ASC:
                case SQL92_RESERVED_BETWEEN:
                case SQL92_RESERVED_CONNECT:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_DESC:
                case SQL92_RESERVED_ELSE:
                case SQL92_RESERVED_END:
                case SQL92_RESERVED_FOR:
                case SQL92_RESERVED_FROM:
                case SQL92_RESERVED_GROUP:
                case SQL92_RESERVED_HAVING:
                case SQL92_RESERVED_IN:
                case SQL92_RESERVED_INTERSECT:
                case SQL92_RESERVED_INTO:
                case SQL92_RESERVED_IS:
                case SQL92_RESERVED_LIKE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_ON:
                case SQL92_RESERVED_OR:
                case SQL92_RESERVED_ORDER:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_THEN:
                case SQL92_RESERVED_TO:
                case SQL92_RESERVED_UNION:
                case SQL92_RESERVED_WHEN:
                case SQL92_RESERVED_WHERE:
                case SQL92_RESERVED_WITH:
                case VERTICAL_BAR:
                	{
                		alt263=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 263 );
                    ex->set_state( 0 );


                    goto rulesearched_case_statementEx;

                }

                switch (alt263)
                {
            	case 1:
            	    // OracleDML.g:1083:18: {...}? case_key ( label_name )?
            	    {
            	        if ( !((!m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!$case_statement::isStatement" );
            	                ex->set_ruleName( "searched_case_statement" );


            	        }

            	        this->followPush(FOLLOW_case_key_in_searched_case_statement11193);
            	        case_key794=case_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearched_case_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            case_key794_last = case_key794.tree.get();
            	            stream_case_key.add(case_key794.tree);
            	        }

            	        // OracleDML.g:1083:60: ( label_name )?
            	        {
            	            ANTLR_UINT32 alt262=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		alt262=1;
            	                	}
            	                    break;
            	                case DELIMITED_ID:
            	                	{
            	                		alt262=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt262)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1083:60: label_name
            	        	    {
            	        	        this->followPush(FOLLOW_label_name_in_searched_case_statement11195);
            	        	        label_name795=label_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearched_case_statementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            label_name795_last = label_name795.tree.get();
            	        	            stream_label_name.add(label_name795.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1083:74: 
            	    {
            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: label_name, case_else_part, searched_case_when_part, end_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1084:9: -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? end_key )
            {
            	// OracleDML.g:1084:12: ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? end_key )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SEARCHED_CASE, (ck1.start)), root_1);
            	// OracleDML.g:1084:40: ( label_name )*
            	while ( stream_label_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_label_name.nextTree());
            	}
            	stream_label_name.reset();

            	if ( !(stream_searched_case_when_part.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "searched_case_when_part empty" );
            		goto rulesearched_case_statementEx;
            	}
            	while ( stream_searched_case_when_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_searched_case_when_part.nextTree());
            	}
            	stream_searched_case_when_part.reset();

            	// OracleDML.g:1084:77: ( case_else_part )?
            	if ( stream_case_else_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_case_else_part.nextTree());
            	}
            	stream_case_else_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_end_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesearched_case_statementEx; /* Prevent compiler warnings */
    rulesearched_case_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end searched_case_statement */

/**
 * $ANTLR start searched_case_when_part
 * OracleDML.g:1087:1: searched_case_when_part : when_key ^ condition_wrapper then_key ! ({...}? seq_of_statements | expression_wrapper ) ;
 */
OracleDML::searched_case_when_part_return
OracleDML::searched_case_when_part()
{
    OracleDML::searched_case_when_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::when_key_return when_key796;
    ImplTraits::TreeTypePtr::pointer when_key796_last = NULL;
    OracleDML::condition_wrapper_return condition_wrapper797;
    ImplTraits::TreeTypePtr::pointer condition_wrapper797_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key798;
    ImplTraits::TreeTypePtr::pointer then_key798_last = NULL;
    OracleDML::seq_of_statements_return seq_of_statements799;
    ImplTraits::TreeTypePtr::pointer seq_of_statements799_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper800;
    ImplTraits::TreeTypePtr::pointer expression_wrapper800_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1088:5: ( when_key ^ condition_wrapper then_key ! ({...}? seq_of_statements | expression_wrapper ) )
        // OracleDML.g:1088:10: when_key ^ condition_wrapper then_key ! ({...}? seq_of_statements | expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_when_key_in_searched_case_when_part11246);
            when_key796=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(when_key796.tree, root_0);

            this->followPush(FOLLOW_condition_wrapper_in_searched_case_when_part11249);
            condition_wrapper797=condition_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, condition_wrapper797.tree);


            this->followPush(FOLLOW_then_key_in_searched_case_when_part11251);
            then_key798=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            // OracleDML.g:1088:48: ({...}? seq_of_statements | expression_wrapper )
            {
                ANTLR_UINT32 alt264=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_LOCK:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_INSERT:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_UPDATE:
                case SQL92_RESERVED_WITH:
                	{
                		alt264=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA264_3 = this->LA(2);
                		    if ( ((m_case_statement_stack.peek().isStatement)))
                		    {
                		        alt264=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt264=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 264 );
                		        ex->set_state( 3 );


                		        goto rulesearched_case_when_partEx;

                		    }
                		}
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA264_8 = this->LA(2);
                		    if ( (( ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))) && ((m_case_statement_stack.peek().isStatement)) )))
                		    {
                		        alt264=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt264=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 264 );
                		        ex->set_state( 8 );


                		        goto rulesearched_case_when_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt264=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 264 );
                    ex->set_state( 0 );


                    goto rulesearched_case_when_partEx;

                }

                switch (alt264)
                {
            	case 1:
            	    // OracleDML.g:1088:49: {...}? seq_of_statements
            	    {
            	        if ( !((m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "$case_statement::isStatement" );
            	                ex->set_ruleName( "searched_case_when_part" );


            	        }

            	        this->followPush(FOLLOW_seq_of_statements_in_searched_case_when_part11257);
            	        seq_of_statements799=seq_of_statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearched_case_when_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, seq_of_statements799.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1088:101: expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_searched_case_when_part11261);
            	        expression_wrapper800=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearched_case_when_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper800.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesearched_case_when_partEx; /* Prevent compiler warnings */
    rulesearched_case_when_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end searched_case_when_part */

/**
 * $ANTLR start case_else_part
 * OracleDML.g:1091:1: case_else_part : else_key ^ ({...}? seq_of_statements | expression_wrapper ) ;
 */
OracleDML::case_else_part_return
OracleDML::case_else_part()
{
    OracleDML::case_else_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::else_key_return else_key801;
    ImplTraits::TreeTypePtr::pointer else_key801_last = NULL;
    OracleDML::seq_of_statements_return seq_of_statements802;
    ImplTraits::TreeTypePtr::pointer seq_of_statements802_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper803;
    ImplTraits::TreeTypePtr::pointer expression_wrapper803_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1092:5: ( else_key ^ ({...}? seq_of_statements | expression_wrapper ) )
        // OracleDML.g:1092:10: else_key ^ ({...}? seq_of_statements | expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_else_key_in_case_else_part11282);
            else_key801=else_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecase_else_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(else_key801.tree, root_0);

            // OracleDML.g:1092:20: ({...}? seq_of_statements | expression_wrapper )
            {
                ANTLR_UINT32 alt265=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_LOCK:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_INSERT:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_UPDATE:
                case SQL92_RESERVED_WITH:
                	{
                		alt265=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA265_3 = this->LA(2);
                		    if ( ((m_case_statement_stack.peek().isStatement)))
                		    {
                		        alt265=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt265=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 265 );
                		        ex->set_state( 3 );


                		        goto rulecase_else_partEx;

                		    }
                		}
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA265_8 = this->LA(2);
                		    if ( (( ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))) && ((m_case_statement_stack.peek().isStatement)) )))
                		    {
                		        alt265=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt265=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 265 );
                		        ex->set_state( 8 );


                		        goto rulecase_else_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt265=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 265 );
                    ex->set_state( 0 );


                    goto rulecase_else_partEx;

                }

                switch (alt265)
                {
            	case 1:
            	    // OracleDML.g:1092:21: {...}? seq_of_statements
            	    {
            	        if ( !((m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "$case_statement::isStatement" );
            	                ex->set_ruleName( "case_else_part" );


            	        }

            	        this->followPush(FOLLOW_seq_of_statements_in_case_else_part11288);
            	        seq_of_statements802=seq_of_statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecase_else_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, seq_of_statements802.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1092:73: expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_case_else_part11292);
            	        expression_wrapper803=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecase_else_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper803.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecase_else_partEx; /* Prevent compiler warnings */
    rulecase_else_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end case_else_part */

/**
 * $ANTLR start atom
 * OracleDML.g:1096:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) );
 */
OracleDML::atom_return
OracleDML::atom()
{
    OracleDML::atom_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN809 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN811 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN814 = NULL;
    OracleDML_OracleDMLCommons::table_element_return table_element804;
    ImplTraits::TreeTypePtr::pointer table_element804_last = NULL;
    OracleDML_OracleDMLCommons::outer_join_sign_return outer_join_sign805;
    ImplTraits::TreeTypePtr::pointer outer_join_sign805_last = NULL;
    OracleDML_OracleDMLCommons::bind_variable_return bind_variable806;
    ImplTraits::TreeTypePtr::pointer bind_variable806_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant807;
    ImplTraits::TreeTypePtr::pointer constant807_last = NULL;
    OracleDML_OracleDMLCommons::general_element_return general_element808;
    ImplTraits::TreeTypePtr::pointer general_element808_last = NULL;
    OracleDML::subquery_return subquery810;
    ImplTraits::TreeTypePtr::pointer subquery810_last = NULL;
    OracleDML::subquery_operation_part_return subquery_operation_part812;
    ImplTraits::TreeTypePtr::pointer subquery_operation_part812_last = NULL;
    OracleDML::expression_or_vector_return expression_or_vector813;
    ImplTraits::TreeTypePtr::pointer expression_or_vector813_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN809_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN811_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN814_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_operation_part(get_psrstate()->get_treeAdaptor(), "rule subquery_operation_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_or_vector(get_psrstate()->get_treeAdaptor(), "rule expression_or_vector");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1102:5: ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) )

            ANTLR_UINT32 alt268;

            alt268=5;

            alt268 = cdfa268.predict(this, this->get_rec(), this->get_istream(), cdfa268 );
            if  (this->hasException())
            {
                goto ruleatomEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            switch (alt268)
            {
        	case 1:
        	    // OracleDML.g:1102:10: ( table_element outer_join_sign )=> table_element outer_join_sign
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_table_element_in_atom11339);
        	        table_element804=table_element();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_element804.tree);


        	        this->followPush(FOLLOW_outer_join_sign_in_atom11341);
        	        outer_join_sign805=outer_join_sign();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, outer_join_sign805.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1103:10: bind_variable
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_bind_variable_in_atom11352);
        	        bind_variable806=bind_variable();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, bind_variable806.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:1104:10: constant
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_constant_in_atom11363);
        	        constant807=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, constant807.tree);


        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:1105:10: general_element
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_general_element_in_atom11374);
        	        general_element808=general_element();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element808.tree);


        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:1106:10: LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN )
        	    {
        	        LEFT_PAREN809 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_atom11385);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN809);


        	        // OracleDML.g:1107:10: ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN )
        	        {
        	            ANTLR_UINT32 alt267=2;
        	            {
        	                ANTLR_UINT32 LA267_0 = this->LA(1);
        	                if ( (LA267_0 == SQL92_RESERVED_SELECT) && (this->msynpred( antlr3::ClassForwarder<synpred50_OracleDML>() )))
        	                {
        	                    alt267=1;
        	                }
        	                else if ( (LA267_0 == LEFT_PAREN))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA267_2 = this->LA(2);
        	                        if ( (this->msynpred( antlr3::ClassForwarder<synpred50_OracleDML>() )))
        	                        {
        	                            alt267=1;
        	                        }
        	                        else if ( (true))
        	                        {
        	                            alt267=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 267 );
        	                            ex->set_state( 2 );


        	                            goto ruleatomEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA267_0 == APPROXIMATE_NUM_LIT || LA267_0 == BINDVAR || ((LA267_0 >= CHAR_STRING) && (LA267_0 <= CHAR_STRING_PERL)) || LA267_0 == COLON || LA267_0 == DELIMITED_ID || LA267_0 == EXACT_NUM_LIT || LA267_0 == INTRODUCER || LA267_0 == MINUS_SIGN || LA267_0 == NATIONAL_CHAR_STRING_LIT || ((LA267_0 >= PLSQL_NON_RESERVED_CAST) && (LA267_0 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA267_0 == PLUS_SIGN || LA267_0 == REGULAR_ID || LA267_0 == SQL92_RESERVED_ALL || LA267_0 == SQL92_RESERVED_ANY || LA267_0 == SQL92_RESERVED_CASE || ((LA267_0 >= SQL92_RESERVED_CURSOR) && (LA267_0 <= SQL92_RESERVED_DATE)) || LA267_0 == SQL92_RESERVED_DEFAULT || LA267_0 == SQL92_RESERVED_DISTINCT || ((LA267_0 >= SQL92_RESERVED_EXISTS) && (LA267_0 <= SQL92_RESERVED_FALSE)) || ((LA267_0 >= SQL92_RESERVED_NOT) && (LA267_0 <= SQL92_RESERVED_NULL)) || LA267_0 == SQL92_RESERVED_PRIOR || LA267_0 == SQL92_RESERVED_TRUE || LA267_0 == UNSIGNED_INTEGER))
        	                {
        	                    alt267=2;
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 267 );
        	                    ex->set_state( 0 );


        	                    goto ruleatomEx;

        	                }
        	            }
        	            switch (alt267)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1108:15: ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )*
        	        	    {
        	        	        this->followPush(FOLLOW_subquery_in_atom11422);
        	        	        subquery810=subquery();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            subquery810_last = subquery810.tree.get();
        	        	            stream_subquery.add(subquery810.tree);
        	        	        }

        	        	        RIGHT_PAREN811 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_atom11424);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN811);


        	        	        // OracleDML.g:1108:63: ( subquery_operation_part )*

        	        	        for (;;)
        	        	        {
        	        	            ANTLR_UINT32 alt266=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case SQL92_RESERVED_UNION:
        	        	            	{
        	        	            		alt266=1;
        	        	            	}
        	        	                break;
        	        	            case SQL92_RESERVED_INTERSECT:
        	        	            	{
        	        	            		alt266=1;
        	        	            	}
        	        	                break;
        	        	            case PLSQL_RESERVED_MINUS:
        	        	            	{
        	        	            		alt266=1;
        	        	            	}
        	        	                break;

        	        	            }

        	        	            switch (alt266)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1108:63: subquery_operation_part
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_subquery_operation_part_in_atom11426);
        	        	        	        subquery_operation_part812=subquery_operation_part();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto ruleatomEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) 
        	        	        	        {
        	        	        	            subquery_operation_part812_last = subquery_operation_part812.tree.get();
        	        	        	            stream_subquery_operation_part.add(subquery_operation_part812.tree);
        	        	        	        }

        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop266;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop266: ; /* Jump out to here if this rule does not match */


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	             mode = 1; 
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1109:17: expression_or_vector RIGHT_PAREN
        	        	    {
        	        	        this->followPush(FOLLOW_expression_or_vector_in_atom11447);
        	        	        expression_or_vector813=expression_or_vector();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            expression_or_vector813_last = expression_or_vector813.tree.get();
        	        	            stream_expression_or_vector.add(expression_or_vector813.tree);
        	        	        }

        	        	        RIGHT_PAREN814 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_atom11449);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN814);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: LEFT_PAREN, expression_or_vector, RIGHT_PAREN, RIGHT_PAREN, LEFT_PAREN, subquery_operation_part, subquery
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 1111:10: -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* )
        	        if ( mode == 1 ) {
        	        	// OracleDML.g:1111:28: ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_SUBQUERY, "NESTED_SUBQUERY"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
        	        	// OracleDML.g:1111:78: ( subquery_operation_part )*
        	        	while ( stream_subquery_operation_part.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_operation_part.nextTree());
        	        	}
        	        	stream_subquery_operation_part.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }

        	        else // 1112:10: -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN )
        	        {
        	        	// OracleDML.g:1112:28: ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_EXPR, "NESTED_EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_or_vector.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleatomEx; /* Prevent compiler warnings */
    ruleatomEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end atom */

/**
 * $ANTLR start expression_or_vector
 * OracleDML.g:1115:1: expression_or_vector : expression ( vector_expr )? -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr ) -> expression ;
 */
OracleDML::expression_or_vector_return
OracleDML::expression_or_vector()
{
    OracleDML::expression_or_vector_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression815;
    ImplTraits::TreeTypePtr::pointer expression815_last = NULL;
    OracleDML::vector_expr_return vector_expr816;
    ImplTraits::TreeTypePtr::pointer vector_expr816_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_vector_expr(get_psrstate()->get_treeAdaptor(), "rule vector_expr");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1117:5: ( expression ( vector_expr )? -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr ) -> expression )
        // OracleDML.g:1117:10: expression ( vector_expr )?
        {
            this->followPush(FOLLOW_expression_in_expression_or_vector11550);
            expression815=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpression_or_vectorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression815_last = expression815.tree.get();
                stream_expression.add(expression815.tree);
            }

            // OracleDML.g:1117:21: ( vector_expr )?
            {
                ANTLR_UINT32 alt269=2;
                switch ( this->LA(1) )
                {
                    case COMMA:
                    	{
                    		alt269=1;
                    	}
                        break;
                }

                switch (alt269)
                {
            	case 1:
            	    // OracleDML.g:1117:22: vector_expr
            	    {
            	        this->followPush(FOLLOW_vector_expr_in_expression_or_vector11553);
            	        vector_expr816=vector_expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_or_vectorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            vector_expr816_last = vector_expr816.tree.get();
            	            stream_vector_expr.add(vector_expr816.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: vector_expr, expression, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1118:9: -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr )
            if (mode == 1) {
            	// OracleDML.g:1118:25: ^( VECTOR_EXPR ^( EXPR expression ) vector_expr )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(VECTOR_EXPR, "VECTOR_EXPR"), root_1);
            	// OracleDML.g:1118:39: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_vector_expr.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1119:9: -> expression
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_expression.nextTree());
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleexpression_or_vectorEx; /* Prevent compiler warnings */
    ruleexpression_or_vectorEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end expression_or_vector */

/**
 * $ANTLR start vector_expr
 * OracleDML.g:1122:1: vector_expr : COMMA expression ( COMMA expression )* -> ( ^( EXPR expression ) )+ ;
 */
OracleDML::vector_expr_return
OracleDML::vector_expr()
{
    OracleDML::vector_expr_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA817 = NULL;
    ImplTraits::CommonTokenType const* COMMA819 = NULL;
    OracleDML::expression_return expression818;
    ImplTraits::TreeTypePtr::pointer expression818_last = NULL;
    OracleDML::expression_return expression820;
    ImplTraits::TreeTypePtr::pointer expression820_last = NULL;
    ImplTraits::TreeTypePtr COMMA817_tree;
    ImplTraits::TreeTypePtr COMMA819_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1123:5: ( COMMA expression ( COMMA expression )* -> ( ^( EXPR expression ) )+ )
        // OracleDML.g:1123:10: COMMA expression ( COMMA expression )*
        {
            COMMA817 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_vector_expr11613);
            if  (this->hasException())
            {
                goto rulevector_exprEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA817);


            this->followPush(FOLLOW_expression_in_vector_expr11615);
            expression818=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevector_exprEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression818_last = expression818.tree.get();
                stream_expression.add(expression818.tree);
            }

            // OracleDML.g:1123:27: ( COMMA expression )*

            for (;;)
            {
                ANTLR_UINT32 alt270=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt270=1;
                	}
                    break;

                }

                switch (alt270)
                {
            	case 1:
            	    // OracleDML.g:1123:28: COMMA expression
            	    {
            	        COMMA819 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_vector_expr11618);
            	        if  (this->hasException())
            	        {
            	            goto rulevector_exprEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA819);


            	        this->followPush(FOLLOW_expression_in_vector_expr11620);
            	        expression820=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevector_exprEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression820_last = expression820.tree.get();
            	            stream_expression.add(expression820.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop270;	/* break out of the loop */
            	    break;
                }
            }
            loop270: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1124:9: -> ( ^( EXPR expression ) )+
            {
            	if ( !(stream_expression.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "expression empty" );
            		goto rulevector_exprEx;
            	}
            	while ( stream_expression.hasNext() ) {
            		// OracleDML.g:1124:12: ^( EXPR expression )
            		{
            		ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            		}
            	}
            	stream_expression.reset();

            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulevector_exprEx; /* Prevent compiler warnings */
    rulevector_exprEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end vector_expr */

/**
 * $ANTLR start quantified_expression
 * OracleDML.g:1127:1: quantified_expression : ( some_key | exists_key | all_key | any_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) ) -> ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? LEFT_PAREN expression_wrapper RIGHT_PAREN ) ;
 */
OracleDML::quantified_expression_return
OracleDML::quantified_expression()
{
    OracleDML::quantified_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN825 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN827 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN828 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN830 = NULL;
    OracleDML_OracleDMLKeys::some_key_return some_key821;
    ImplTraits::TreeTypePtr::pointer some_key821_last = NULL;
    OracleDML_OracleDMLKeys::exists_key_return exists_key822;
    ImplTraits::TreeTypePtr::pointer exists_key822_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key823;
    ImplTraits::TreeTypePtr::pointer all_key823_last = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key824;
    ImplTraits::TreeTypePtr::pointer any_key824_last = NULL;
    OracleDML::subquery_return subquery826;
    ImplTraits::TreeTypePtr::pointer subquery826_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper829;
    ImplTraits::TreeTypePtr::pointer expression_wrapper829_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN825_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN827_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN828_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN830_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_wrapper(get_psrstate()->get_treeAdaptor(), "rule expression_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_some_key(get_psrstate()->get_treeAdaptor(), "rule some_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_any_key(get_psrstate()->get_treeAdaptor(), "rule any_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_exists_key(get_psrstate()->get_treeAdaptor(), "rule exists_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1129:5: ( ( some_key | exists_key | all_key | any_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) ) -> ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? LEFT_PAREN expression_wrapper RIGHT_PAREN ) )
        // OracleDML.g:1129:10: ( some_key | exists_key | all_key | any_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN )
        {
            // OracleDML.g:1129:10: ( some_key | exists_key | all_key | any_key )
            {
                ANTLR_UINT32 alt271=4;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		alt271=1;
                	}
                    break;
                case SQL92_RESERVED_EXISTS:
                	{
                		alt271=2;
                	}
                    break;
                case SQL92_RESERVED_ALL:
                	{
                		alt271=3;
                	}
                    break;
                case SQL92_RESERVED_ANY:
                	{
                		alt271=4;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 271 );
                    ex->set_state( 0 );


                    goto rulequantified_expressionEx;

                }

                switch (alt271)
                {
            	case 1:
            	    // OracleDML.g:1129:12: some_key
            	    {
            	        this->followPush(FOLLOW_some_key_in_quantified_expression11669);
            	        some_key821=some_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            some_key821_last = some_key821.tree.get();
            	            stream_some_key.add(some_key821.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1129:23: exists_key
            	    {
            	        this->followPush(FOLLOW_exists_key_in_quantified_expression11673);
            	        exists_key822=exists_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            exists_key822_last = exists_key822.tree.get();
            	            stream_exists_key.add(exists_key822.tree);
            	        }

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:1129:36: all_key
            	    {
            	        this->followPush(FOLLOW_all_key_in_quantified_expression11677);
            	        all_key823=all_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            all_key823_last = all_key823.tree.get();
            	            stream_all_key.add(all_key823.tree);
            	        }

            	    }
            	    break;
            	case 4:
            	    // OracleDML.g:1129:46: any_key
            	    {
            	        this->followPush(FOLLOW_any_key_in_quantified_expression11681);
            	        any_key824=any_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            any_key824_last = any_key824.tree.get();
            	            stream_any_key.add(any_key824.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:1130:10: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN )
            {
                ANTLR_UINT32 alt272=2;
                switch ( this->LA(1) )
                {
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA272_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred51_OracleDML>() )))
                		    {
                		        alt272=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt272=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 272 );
                		        ex->set_state( 1 );


                		        goto rulequantified_expressionEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 272 );
                    ex->set_state( 0 );


                    goto rulequantified_expressionEx;

                }

                switch (alt272)
                {
            	case 1:
            	    // OracleDML.g:1130:12: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
            	    {
            	        LEFT_PAREN825 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_quantified_expression11708);
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN825);


            	        this->followPush(FOLLOW_subquery_in_quantified_expression11710);
            	        subquery826=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery826_last = subquery826.tree.get();
            	            stream_subquery.add(subquery826.tree);
            	        }

            	        RIGHT_PAREN827 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_quantified_expression11712);
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN827);


            	        if ( this->get_backtracking()==0 )
            	        {
            	             mode = 1; 
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1131:14: LEFT_PAREN expression_wrapper RIGHT_PAREN
            	    {
            	        LEFT_PAREN828 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_quantified_expression11729);
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN828);


            	        this->followPush(FOLLOW_expression_wrapper_in_quantified_expression11731);
            	        expression_wrapper829=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_wrapper829_last = expression_wrapper829.tree.get();
            	            stream_expression_wrapper.add(expression_wrapper829.tree);
            	        }

            	        RIGHT_PAREN830 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_quantified_expression11733);
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN830);


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: all_key, any_key, all_key, subquery, any_key, exists_key, exists_key, LEFT_PAREN, some_key, expression_wrapper, RIGHT_PAREN, LEFT_PAREN, some_key, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1133:10: -> { mode == 1 }? ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) )
            if ( mode == 1 ) {
            	// OracleDML.g:1133:28: ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_EXPR, "NESTED_EXPR"), root_1);
            	// OracleDML.g:1133:42: ( some_key )?
            	if ( stream_some_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_some_key.nextTree());
            	}
            	stream_some_key.reset();

            	// OracleDML.g:1133:52: ( exists_key )?
            	if ( stream_exists_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_exists_key.nextTree());
            	}
            	stream_exists_key.reset();

            	// OracleDML.g:1133:64: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:1133:73: ( any_key )?
            	if ( stream_any_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_any_key.nextTree());
            	}
            	stream_any_key.reset();

            	// OracleDML.g:1133:82: ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_SUBQUERY, "NESTED_SUBQUERY"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_LEFT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_subquery.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1134:10: -> ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? LEFT_PAREN expression_wrapper RIGHT_PAREN )
            {
            	// OracleDML.g:1134:28: ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? LEFT_PAREN expression_wrapper RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_EXPR, "NESTED_EXPR"), root_1);
            	// OracleDML.g:1134:42: ( some_key )?
            	if ( stream_some_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_some_key.nextTree());
            	}
            	stream_some_key.reset();

            	// OracleDML.g:1134:52: ( exists_key )?
            	if ( stream_exists_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_exists_key.nextTree());
            	}
            	stream_exists_key.reset();

            	// OracleDML.g:1134:64: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:1134:73: ( any_key )?
            	if ( stream_any_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_any_key.nextTree());
            	}
            	stream_any_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_wrapper.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulequantified_expressionEx; /* Prevent compiler warnings */
    rulequantified_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end quantified_expression */

/**
 * $ANTLR start standard_function
 * OracleDML.g:1137:1: standard_function : ( stantard_function_enabling_over ^ function_argument_analytic ( over_clause )? | stantard_function_enabling_using ^ function_argument_modeling ( using_clause )? | count_key ^ LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )? | ( cast_key ^| xmlcast_key ^) LEFT_PAREN ( ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )? | concatenation_wrapper as_key ! type_spec ) RIGHT_PAREN | chr_key ^ LEFT_PAREN concatenation_wrapper using_key ! nchar_cs_key RIGHT_PAREN | collect_key ^ LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN | stantard_function_enabling_within_or_over ^ function_argument ( within_or_over_part )+ | decompose_key ^ LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN | extract_key ^ LEFT_PAREN REGULAR_ID from_key ! concatenation_wrapper RIGHT_PAREN | ( first_value_key ^| last_value_key ^) function_argument_analytic ( respect_or_ignore_nulls )? over_clause | stantard_function_pedictions ^ LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN | translate_key ^ LEFT_PAREN expression_wrapper ( using_key ! ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN | treat_key ^ LEFT_PAREN expression_wrapper as_key ! ( ref_key )? type_spec RIGHT_PAREN | trim_key ^ LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN | xmlagg_key ^ LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )? | ( xmlcolattval_key ^| xmlforest_key ^) LEFT_PAREN xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlelement_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA ! xml_attributes_clause )? ( COMMA ! expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlexists_key ^ LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN | xmlparse_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlpi_key ^ LEFT_PAREN ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper ) ( COMMA ! concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlquery_key ^ LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key ! content_key ! ( null_key on_key ! empty_key !)? RIGHT_PAREN ( PERIOD general_element_part )? | xmlroot_key ^ LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA ! xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlserialize_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key ! type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmltable_key ^ LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )? );
 */
OracleDML::standard_function_return
OracleDML::standard_function()
{
    OracleDML::standard_function_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN838 = NULL;
    ImplTraits::CommonTokenType const* ASTERISK839 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN844 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN848 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN850 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN853 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN859 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN861 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN865 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN867 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN872 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN877 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN881 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN883 = NULL;
    ImplTraits::CommonTokenType const* REGULAR_ID884 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN887 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN894 = NULL;
    ImplTraits::CommonTokenType const* COMMA896 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN900 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN902 = NULL;
    ImplTraits::CommonTokenType const* COMMA907 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN909 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN911 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN916 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN918 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN925 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN927 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN930 = NULL;
    ImplTraits::CommonTokenType const* PERIOD931 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN935 = NULL;
    ImplTraits::CommonTokenType const* COMMA937 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN939 = NULL;
    ImplTraits::CommonTokenType const* PERIOD940 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN943 = NULL;
    ImplTraits::CommonTokenType const* COMMA949 = NULL;
    ImplTraits::CommonTokenType const* COMMA951 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN954 = NULL;
    ImplTraits::CommonTokenType const* PERIOD955 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN958 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN961 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN963 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN968 = NULL;
    ImplTraits::CommonTokenType const* PERIOD969 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN972 = NULL;
    ImplTraits::CommonTokenType const* COMMA977 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN979 = NULL;
    ImplTraits::CommonTokenType const* PERIOD980 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN983 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN991 = NULL;
    ImplTraits::CommonTokenType const* PERIOD992 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN995 = NULL;
    ImplTraits::CommonTokenType const* COMMA998 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1000 = NULL;
    ImplTraits::CommonTokenType const* PERIOD1001 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN1004 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1016 = NULL;
    ImplTraits::CommonTokenType const* PERIOD1017 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN1020 = NULL;
    ImplTraits::CommonTokenType const* COMMA1026 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1028 = NULL;
    ImplTraits::CommonTokenType const* PERIOD1029 = NULL;
    OracleDML::stantard_function_enabling_over_return stantard_function_enabling_over831;
    ImplTraits::TreeTypePtr::pointer stantard_function_enabling_over831_last = NULL;
    OracleDML_OracleDMLCommons::function_argument_analytic_return function_argument_analytic832;
    ImplTraits::TreeTypePtr::pointer function_argument_analytic832_last = NULL;
    OracleDML::over_clause_return over_clause833;
    ImplTraits::TreeTypePtr::pointer over_clause833_last = NULL;
    OracleDML::stantard_function_enabling_using_return stantard_function_enabling_using834;
    ImplTraits::TreeTypePtr::pointer stantard_function_enabling_using834_last = NULL;
    OracleDML_OracleDMLCommons::function_argument_modeling_return function_argument_modeling835;
    ImplTraits::TreeTypePtr::pointer function_argument_modeling835_last = NULL;
    OracleDML::using_clause_return using_clause836;
    ImplTraits::TreeTypePtr::pointer using_clause836_last = NULL;
    OracleDML_OracleDMLKeys::count_key_return count_key837;
    ImplTraits::TreeTypePtr::pointer count_key837_last = NULL;
    OracleDML_OracleDMLKeys::distinct_key_return distinct_key840;
    ImplTraits::TreeTypePtr::pointer distinct_key840_last = NULL;
    OracleDML_OracleDMLKeys::unique_key_return unique_key841;
    ImplTraits::TreeTypePtr::pointer unique_key841_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key842;
    ImplTraits::TreeTypePtr::pointer all_key842_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper843;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper843_last = NULL;
    OracleDML::over_clause_return over_clause845;
    ImplTraits::TreeTypePtr::pointer over_clause845_last = NULL;
    OracleDML_OracleDMLKeys::cast_key_return cast_key846;
    ImplTraits::TreeTypePtr::pointer cast_key846_last = NULL;
    OracleDML_OracleDMLKeys::xmlcast_key_return xmlcast_key847;
    ImplTraits::TreeTypePtr::pointer xmlcast_key847_last = NULL;
    OracleDML_OracleDMLKeys::multiset_key_return multiset_key849;
    ImplTraits::TreeTypePtr::pointer multiset_key849_last = NULL;
    OracleDML::subquery_return subquery851;
    ImplTraits::TreeTypePtr::pointer subquery851_last = NULL;
    OracleDML::order_by_clause_return order_by_clause852;
    ImplTraits::TreeTypePtr::pointer order_by_clause852_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key854;
    ImplTraits::TreeTypePtr::pointer as_key854_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec855;
    ImplTraits::TreeTypePtr::pointer type_spec855_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper856;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper856_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key857;
    ImplTraits::TreeTypePtr::pointer as_key857_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec858;
    ImplTraits::TreeTypePtr::pointer type_spec858_last = NULL;
    OracleDML_OracleDMLKeys::chr_key_return chr_key860;
    ImplTraits::TreeTypePtr::pointer chr_key860_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper862;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper862_last = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key863;
    ImplTraits::TreeTypePtr::pointer using_key863_last = NULL;
    OracleDML_OracleDMLKeys::nchar_cs_key_return nchar_cs_key864;
    ImplTraits::TreeTypePtr::pointer nchar_cs_key864_last = NULL;
    OracleDML_OracleDMLKeys::collect_key_return collect_key866;
    ImplTraits::TreeTypePtr::pointer collect_key866_last = NULL;
    OracleDML_OracleDMLKeys::distinct_key_return distinct_key868;
    ImplTraits::TreeTypePtr::pointer distinct_key868_last = NULL;
    OracleDML_OracleDMLKeys::unique_key_return unique_key869;
    ImplTraits::TreeTypePtr::pointer unique_key869_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper870;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper870_last = NULL;
    OracleDML::collect_order_by_part_return collect_order_by_part871;
    ImplTraits::TreeTypePtr::pointer collect_order_by_part871_last = NULL;
    OracleDML::stantard_function_enabling_within_or_over_return stantard_function_enabling_within_or_over873;
    ImplTraits::TreeTypePtr::pointer stantard_function_enabling_within_or_over873_last = NULL;
    OracleDML_OracleDMLCommons::function_argument_return function_argument874;
    ImplTraits::TreeTypePtr::pointer function_argument874_last = NULL;
    OracleDML::within_or_over_part_return within_or_over_part875;
    ImplTraits::TreeTypePtr::pointer within_or_over_part875_last = NULL;
    OracleDML_OracleDMLKeys::decompose_key_return decompose_key876;
    ImplTraits::TreeTypePtr::pointer decompose_key876_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper878;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper878_last = NULL;
    OracleDML_OracleDMLKeys::canonical_key_return canonical_key879;
    ImplTraits::TreeTypePtr::pointer canonical_key879_last = NULL;
    OracleDML_OracleDMLKeys::compatibility_key_return compatibility_key880;
    ImplTraits::TreeTypePtr::pointer compatibility_key880_last = NULL;
    OracleDML_OracleDMLKeys::extract_key_return extract_key882;
    ImplTraits::TreeTypePtr::pointer extract_key882_last = NULL;
    OracleDML_OracleDMLKeys::from_key_return from_key885;
    ImplTraits::TreeTypePtr::pointer from_key885_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper886;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper886_last = NULL;
    OracleDML_OracleDMLKeys::first_value_key_return first_value_key888;
    ImplTraits::TreeTypePtr::pointer first_value_key888_last = NULL;
    OracleDML_OracleDMLKeys::last_value_key_return last_value_key889;
    ImplTraits::TreeTypePtr::pointer last_value_key889_last = NULL;
    OracleDML_OracleDMLCommons::function_argument_analytic_return function_argument_analytic890;
    ImplTraits::TreeTypePtr::pointer function_argument_analytic890_last = NULL;
    OracleDML_OracleDMLCommons::respect_or_ignore_nulls_return respect_or_ignore_nulls891;
    ImplTraits::TreeTypePtr::pointer respect_or_ignore_nulls891_last = NULL;
    OracleDML::over_clause_return over_clause892;
    ImplTraits::TreeTypePtr::pointer over_clause892_last = NULL;
    OracleDML::stantard_function_pedictions_return stantard_function_pedictions893;
    ImplTraits::TreeTypePtr::pointer stantard_function_pedictions893_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper895;
    ImplTraits::TreeTypePtr::pointer expression_wrapper895_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper897;
    ImplTraits::TreeTypePtr::pointer expression_wrapper897_last = NULL;
    OracleDML::cost_matrix_clause_return cost_matrix_clause898;
    ImplTraits::TreeTypePtr::pointer cost_matrix_clause898_last = NULL;
    OracleDML::using_clause_return using_clause899;
    ImplTraits::TreeTypePtr::pointer using_clause899_last = NULL;
    OracleDML_OracleDMLKeys::translate_key_return translate_key901;
    ImplTraits::TreeTypePtr::pointer translate_key901_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper903;
    ImplTraits::TreeTypePtr::pointer expression_wrapper903_last = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key904;
    ImplTraits::TreeTypePtr::pointer using_key904_last = NULL;
    OracleDML_OracleDMLKeys::char_cs_key_return char_cs_key905;
    ImplTraits::TreeTypePtr::pointer char_cs_key905_last = NULL;
    OracleDML_OracleDMLKeys::nchar_cs_key_return nchar_cs_key906;
    ImplTraits::TreeTypePtr::pointer nchar_cs_key906_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper908;
    ImplTraits::TreeTypePtr::pointer expression_wrapper908_last = NULL;
    OracleDML_OracleDMLKeys::treat_key_return treat_key910;
    ImplTraits::TreeTypePtr::pointer treat_key910_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper912;
    ImplTraits::TreeTypePtr::pointer expression_wrapper912_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key913;
    ImplTraits::TreeTypePtr::pointer as_key913_last = NULL;
    OracleDML_OracleDMLKeys::ref_key_return ref_key914;
    ImplTraits::TreeTypePtr::pointer ref_key914_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec915;
    ImplTraits::TreeTypePtr::pointer type_spec915_last = NULL;
    OracleDML_OracleDMLKeys::trim_key_return trim_key917;
    ImplTraits::TreeTypePtr::pointer trim_key917_last = NULL;
    OracleDML_OracleDMLKeys::leading_key_return leading_key919;
    ImplTraits::TreeTypePtr::pointer leading_key919_last = NULL;
    OracleDML_OracleDMLKeys::trailing_key_return trailing_key920;
    ImplTraits::TreeTypePtr::pointer trailing_key920_last = NULL;
    OracleDML_OracleDMLKeys::both_key_return both_key921;
    ImplTraits::TreeTypePtr::pointer both_key921_last = NULL;
    OracleDML_OracleDMLCommons::quoted_string_return quoted_string922;
    ImplTraits::TreeTypePtr::pointer quoted_string922_last = NULL;
    OracleDML_OracleDMLKeys::from_key_return from_key923;
    ImplTraits::TreeTypePtr::pointer from_key923_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper924;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper924_last = NULL;
    OracleDML_OracleDMLKeys::xmlagg_key_return xmlagg_key926;
    ImplTraits::TreeTypePtr::pointer xmlagg_key926_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper928;
    ImplTraits::TreeTypePtr::pointer expression_wrapper928_last = NULL;
    OracleDML::order_by_clause_return order_by_clause929;
    ImplTraits::TreeTypePtr::pointer order_by_clause929_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part932;
    ImplTraits::TreeTypePtr::pointer general_element_part932_last = NULL;
    OracleDML_OracleDMLKeys::xmlcolattval_key_return xmlcolattval_key933;
    ImplTraits::TreeTypePtr::pointer xmlcolattval_key933_last = NULL;
    OracleDML_OracleDMLKeys::xmlforest_key_return xmlforest_key934;
    ImplTraits::TreeTypePtr::pointer xmlforest_key934_last = NULL;
    OracleDML::xml_multiuse_expression_element_return xml_multiuse_expression_element936;
    ImplTraits::TreeTypePtr::pointer xml_multiuse_expression_element936_last = NULL;
    OracleDML::xml_multiuse_expression_element_return xml_multiuse_expression_element938;
    ImplTraits::TreeTypePtr::pointer xml_multiuse_expression_element938_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part941;
    ImplTraits::TreeTypePtr::pointer general_element_part941_last = NULL;
    OracleDML_OracleDMLKeys::xmlelement_key_return xmlelement_key942;
    ImplTraits::TreeTypePtr::pointer xmlelement_key942_last = NULL;
    OracleDML_OracleDMLKeys::entityescaping_key_return entityescaping_key944;
    ImplTraits::TreeTypePtr::pointer entityescaping_key944_last = NULL;
    OracleDML_OracleDMLKeys::noentityescaping_key_return noentityescaping_key945;
    ImplTraits::TreeTypePtr::pointer noentityescaping_key945_last = NULL;
    OracleDML_OracleDMLKeys::name_key_return name_key946;
    ImplTraits::TreeTypePtr::pointer name_key946_last = NULL;
    OracleDML_OracleDMLKeys::evalname_key_return evalname_key947;
    ImplTraits::TreeTypePtr::pointer evalname_key947_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper948;
    ImplTraits::TreeTypePtr::pointer expression_wrapper948_last = NULL;
    OracleDML::xml_attributes_clause_return xml_attributes_clause950;
    ImplTraits::TreeTypePtr::pointer xml_attributes_clause950_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper952;
    ImplTraits::TreeTypePtr::pointer expression_wrapper952_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias953;
    ImplTraits::TreeTypePtr::pointer column_alias953_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part956;
    ImplTraits::TreeTypePtr::pointer general_element_part956_last = NULL;
    OracleDML_OracleDMLKeys::xmlexists_key_return xmlexists_key957;
    ImplTraits::TreeTypePtr::pointer xmlexists_key957_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper959;
    ImplTraits::TreeTypePtr::pointer expression_wrapper959_last = NULL;
    OracleDML::xml_passing_clause_return xml_passing_clause960;
    ImplTraits::TreeTypePtr::pointer xml_passing_clause960_last = NULL;
    OracleDML_OracleDMLKeys::xmlparse_key_return xmlparse_key962;
    ImplTraits::TreeTypePtr::pointer xmlparse_key962_last = NULL;
    OracleDML_OracleDMLKeys::document_key_return document_key964;
    ImplTraits::TreeTypePtr::pointer document_key964_last = NULL;
    OracleDML_OracleDMLKeys::content_key_return content_key965;
    ImplTraits::TreeTypePtr::pointer content_key965_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper966;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper966_last = NULL;
    OracleDML_OracleDMLKeys::wellformed_key_return wellformed_key967;
    ImplTraits::TreeTypePtr::pointer wellformed_key967_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part970;
    ImplTraits::TreeTypePtr::pointer general_element_part970_last = NULL;
    OracleDML_OracleDMLKeys::xmlpi_key_return xmlpi_key971;
    ImplTraits::TreeTypePtr::pointer xmlpi_key971_last = NULL;
    OracleDML_OracleDMLKeys::name_key_return name_key973;
    ImplTraits::TreeTypePtr::pointer name_key973_last = NULL;
    OracleDML_OracleDMLCommons::id_return id974;
    ImplTraits::TreeTypePtr::pointer id974_last = NULL;
    OracleDML_OracleDMLKeys::evalname_key_return evalname_key975;
    ImplTraits::TreeTypePtr::pointer evalname_key975_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper976;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper976_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper978;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper978_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part981;
    ImplTraits::TreeTypePtr::pointer general_element_part981_last = NULL;
    OracleDML_OracleDMLKeys::xmlquery_key_return xmlquery_key982;
    ImplTraits::TreeTypePtr::pointer xmlquery_key982_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper984;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper984_last = NULL;
    OracleDML::xml_passing_clause_return xml_passing_clause985;
    ImplTraits::TreeTypePtr::pointer xml_passing_clause985_last = NULL;
    OracleDML_OracleDMLKeys::returning_key_return returning_key986;
    ImplTraits::TreeTypePtr::pointer returning_key986_last = NULL;
    OracleDML_OracleDMLKeys::content_key_return content_key987;
    ImplTraits::TreeTypePtr::pointer content_key987_last = NULL;
    OracleDML_OracleDMLKeys::null_key_return null_key988;
    ImplTraits::TreeTypePtr::pointer null_key988_last = NULL;
    OracleDML_OracleDMLKeys::on_key_return on_key989;
    ImplTraits::TreeTypePtr::pointer on_key989_last = NULL;
    OracleDML_OracleDMLKeys::empty_key_return empty_key990;
    ImplTraits::TreeTypePtr::pointer empty_key990_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part993;
    ImplTraits::TreeTypePtr::pointer general_element_part993_last = NULL;
    OracleDML_OracleDMLKeys::xmlroot_key_return xmlroot_key994;
    ImplTraits::TreeTypePtr::pointer xmlroot_key994_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper996;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper996_last = NULL;
    OracleDML::xmlroot_param_version_part_return xmlroot_param_version_part997;
    ImplTraits::TreeTypePtr::pointer xmlroot_param_version_part997_last = NULL;
    OracleDML::xmlroot_param_standalone_part_return xmlroot_param_standalone_part999;
    ImplTraits::TreeTypePtr::pointer xmlroot_param_standalone_part999_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part1002;
    ImplTraits::TreeTypePtr::pointer general_element_part1002_last = NULL;
    OracleDML_OracleDMLKeys::xmlserialize_key_return xmlserialize_key1003;
    ImplTraits::TreeTypePtr::pointer xmlserialize_key1003_last = NULL;
    OracleDML_OracleDMLKeys::document_key_return document_key1005;
    ImplTraits::TreeTypePtr::pointer document_key1005_last = NULL;
    OracleDML_OracleDMLKeys::content_key_return content_key1006;
    ImplTraits::TreeTypePtr::pointer content_key1006_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1007;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1007_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key1008;
    ImplTraits::TreeTypePtr::pointer as_key1008_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec1009;
    ImplTraits::TreeTypePtr::pointer type_spec1009_last = NULL;
    OracleDML::xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part1010;
    ImplTraits::TreeTypePtr::pointer xmlserialize_param_enconding_part1010_last = NULL;
    OracleDML::xmlserialize_param_version_part_return xmlserialize_param_version_part1011;
    ImplTraits::TreeTypePtr::pointer xmlserialize_param_version_part1011_last = NULL;
    OracleDML::xmlserialize_param_ident_part_return xmlserialize_param_ident_part1012;
    ImplTraits::TreeTypePtr::pointer xmlserialize_param_ident_part1012_last = NULL;
    OracleDML_OracleDMLKeys::hide_key_return hide_key1013;
    ImplTraits::TreeTypePtr::pointer hide_key1013_last = NULL;
    OracleDML_OracleDMLKeys::show_key_return show_key1014;
    ImplTraits::TreeTypePtr::pointer show_key1014_last = NULL;
    OracleDML_OracleDMLKeys::defaults_key_return defaults_key1015;
    ImplTraits::TreeTypePtr::pointer defaults_key1015_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part1018;
    ImplTraits::TreeTypePtr::pointer general_element_part1018_last = NULL;
    OracleDML_OracleDMLKeys::xmltable_key_return xmltable_key1019;
    ImplTraits::TreeTypePtr::pointer xmltable_key1019_last = NULL;
    OracleDML::xml_namespaces_clause_return xml_namespaces_clause1021;
    ImplTraits::TreeTypePtr::pointer xml_namespaces_clause1021_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1022;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1022_last = NULL;
    OracleDML::xml_passing_clause_return xml_passing_clause1023;
    ImplTraits::TreeTypePtr::pointer xml_passing_clause1023_last = NULL;
    OracleDML_OracleDMLKeys::columns_key_return columns_key1024;
    ImplTraits::TreeTypePtr::pointer columns_key1024_last = NULL;
    OracleDML::xml_table_column_return xml_table_column1025;
    ImplTraits::TreeTypePtr::pointer xml_table_column1025_last = NULL;
    OracleDML::xml_table_column_return xml_table_column1027;
    ImplTraits::TreeTypePtr::pointer xml_table_column1027_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part1030;
    ImplTraits::TreeTypePtr::pointer general_element_part1030_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN838_tree;
    ImplTraits::TreeTypePtr ASTERISK839_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN844_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN848_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN850_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN853_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN859_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN861_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN865_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN867_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN872_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN877_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN881_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN883_tree;
    ImplTraits::TreeTypePtr REGULAR_ID884_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN887_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN894_tree;
    ImplTraits::TreeTypePtr COMMA896_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN900_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN902_tree;
    ImplTraits::TreeTypePtr COMMA907_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN909_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN911_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN916_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN918_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN925_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN927_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN930_tree;
    ImplTraits::TreeTypePtr PERIOD931_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN935_tree;
    ImplTraits::TreeTypePtr COMMA937_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN939_tree;
    ImplTraits::TreeTypePtr PERIOD940_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN943_tree;
    ImplTraits::TreeTypePtr COMMA949_tree;
    ImplTraits::TreeTypePtr COMMA951_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN954_tree;
    ImplTraits::TreeTypePtr PERIOD955_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN958_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN961_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN963_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN968_tree;
    ImplTraits::TreeTypePtr PERIOD969_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN972_tree;
    ImplTraits::TreeTypePtr COMMA977_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN979_tree;
    ImplTraits::TreeTypePtr PERIOD980_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN983_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN991_tree;
    ImplTraits::TreeTypePtr PERIOD992_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN995_tree;
    ImplTraits::TreeTypePtr COMMA998_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1000_tree;
    ImplTraits::TreeTypePtr PERIOD1001_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN1004_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1016_tree;
    ImplTraits::TreeTypePtr PERIOD1017_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN1020_tree;
    ImplTraits::TreeTypePtr COMMA1026_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1028_tree;
    ImplTraits::TreeTypePtr PERIOD1029_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1138:5: ( stantard_function_enabling_over ^ function_argument_analytic ( over_clause )? | stantard_function_enabling_using ^ function_argument_modeling ( using_clause )? | count_key ^ LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )? | ( cast_key ^| xmlcast_key ^) LEFT_PAREN ( ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )? | concatenation_wrapper as_key ! type_spec ) RIGHT_PAREN | chr_key ^ LEFT_PAREN concatenation_wrapper using_key ! nchar_cs_key RIGHT_PAREN | collect_key ^ LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN | stantard_function_enabling_within_or_over ^ function_argument ( within_or_over_part )+ | decompose_key ^ LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN | extract_key ^ LEFT_PAREN REGULAR_ID from_key ! concatenation_wrapper RIGHT_PAREN | ( first_value_key ^| last_value_key ^) function_argument_analytic ( respect_or_ignore_nulls )? over_clause | stantard_function_pedictions ^ LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN | translate_key ^ LEFT_PAREN expression_wrapper ( using_key ! ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN | treat_key ^ LEFT_PAREN expression_wrapper as_key ! ( ref_key )? type_spec RIGHT_PAREN | trim_key ^ LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN | xmlagg_key ^ LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )? | ( xmlcolattval_key ^| xmlforest_key ^) LEFT_PAREN xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlelement_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA ! xml_attributes_clause )? ( COMMA ! expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlexists_key ^ LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN | xmlparse_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlpi_key ^ LEFT_PAREN ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper ) ( COMMA ! concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlquery_key ^ LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key ! content_key ! ( null_key on_key ! empty_key !)? RIGHT_PAREN ( PERIOD general_element_part )? | xmlroot_key ^ LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA ! xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlserialize_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key ! type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmltable_key ^ LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )? )

            ANTLR_UINT32 alt333;

            alt333=24;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA333_1 = this->LA(2);
            		    if ( ((enablesOverClause(LT(1)->getText()))))
            		    {
            		        alt333=1;
            		    }
            		    else if ( ((enablesUsingClause(LT(1)->getText()))))
            		    {
            		        alt333=2;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "COUNT" )))
            		    {
            		        alt333=3;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLCAST")))
            		    {
            		        alt333=4;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "CHR")))
            		    {
            		        alt333=5;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "COLLECT")))
            		    {
            		        alt333=6;
            		    }
            		    else if ( ((enablesWithinOrOverClause(LT(1)->getText()))))
            		    {
            		        alt333=7;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "DECOMPOSE")))
            		    {
            		        alt333=8;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "EXTRACT")))
            		    {
            		        alt333=9;
            		    }
            		    else if ( ((((toUpper(LT(1)->getText()) == "LAST_VALUE"))||((toUpper(LT(1)->getText()) == "FIRST_VALUE")))))
            		    {
            		        alt333=10;
            		    }
            		    else if ( ((isStandardPredictionFunction(LT(1)->getText()))))
            		    {
            		        alt333=11;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "TRANSLATE")))
            		    {
            		        alt333=12;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "TREAT")))
            		    {
            		        alt333=13;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "TRIM")))
            		    {
            		        alt333=14;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLAGG")))
            		    {
            		        alt333=15;
            		    }
            		    else if ( ((((toUpper(LT(1)->getText()) == "XMLCOLATTVAL"))||((toUpper(LT(1)->getText()) == "XMLFOREST")))))
            		    {
            		        alt333=16;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLELEMENT")))
            		    {
            		        alt333=17;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLEXISTS")))
            		    {
            		        alt333=18;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLPARSE")))
            		    {
            		        alt333=19;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLPI")))
            		    {
            		        alt333=20;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLQUERY")))
            		    {
            		        alt333=21;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLROOT")))
            		    {
            		        alt333=22;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLSERIALIZE")))
            		    {
            		        alt333=23;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLTABLE")))
            		    {
            		        alt333=24;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 333 );
            		        ex->set_state( 1 );


            		        goto rulestandard_functionEx;

            		    }
            		}
            	}
                break;
            case PLSQL_NON_RESERVED_CAST:
            	{
            		alt333=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 333 );
                ex->set_state( 0 );


                goto rulestandard_functionEx;

            }

            switch (alt333)
            {
        	case 1:
        	    // OracleDML.g:1138:10: stantard_function_enabling_over ^ function_argument_analytic ( over_clause )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_stantard_function_enabling_over_in_standard_function11869);
        	        stantard_function_enabling_over831=stantard_function_enabling_over();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(stantard_function_enabling_over831.tree, root_0);

        	        this->followPush(FOLLOW_function_argument_analytic_in_standard_function11872);
        	        function_argument_analytic832=function_argument_analytic();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, function_argument_analytic832.tree);


        	        // OracleDML.g:1138:70: ( over_clause )?
        	        {
        	            ANTLR_UINT32 alt273=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case LEFT_PAREN:
        	                		    	{
        	                		    		{
        	                		    		    ANTLR_UINT32 LA273_3 = this->LA(3);
        	                		    		    if ( (LA273_3 == REGULAR_ID))
        	                		    		    {
        	                		    		        {
        	                		    		            ANTLR_UINT32 LA273_6 = this->LA(4);
        	                		    		            if ( (LA273_6 == SQL92_RESERVED_BY) && ((toUpper(LT(1)->getText()) == "OVER")))
        	                		    		            {
        	                		    		                alt273=1;
        	                		    		            }
        	                		    		        }
        	                		    		    }
        	                		    		    else if ( (LA273_3 == RIGHT_PAREN || LA273_3 == SQL92_RESERVED_ORDER) && ((toUpper(LT(1)->getText()) == "OVER")))
        	                		    		    {
        	                		    		        alt273=1;
        	                		    		    }
        	                		    		}
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	            }

        	            switch (alt273)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1138:70: over_clause
        	        	    {
        	        	        this->followPush(FOLLOW_over_clause_in_standard_function11874);
        	        	        over_clause833=over_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, over_clause833.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1139:10: stantard_function_enabling_using ^ function_argument_modeling ( using_clause )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_stantard_function_enabling_using_in_standard_function11886);
        	        stantard_function_enabling_using834=stantard_function_enabling_using();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(stantard_function_enabling_using834.tree, root_0);

        	        this->followPush(FOLLOW_function_argument_modeling_in_standard_function11889);
        	        function_argument_modeling835=function_argument_modeling();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, function_argument_modeling835.tree);


        	        // OracleDML.g:1139:71: ( using_clause )?
        	        {
        	            ANTLR_UINT32 alt274=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PLSQL_NON_RESERVED_USING:
        	                	{
        	                		alt274=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt274)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1139:71: using_clause
        	        	    {
        	        	        this->followPush(FOLLOW_using_clause_in_standard_function11891);
        	        	        using_clause836=using_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, using_clause836.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:1140:10: count_key ^ LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_count_key_in_standard_function11903);
        	        count_key837=count_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(count_key837.tree, root_0);

        	        LEFT_PAREN838 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function11918);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN838_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN838));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN838_tree);
        	        }


        	        // OracleDML.g:1142:17: ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper )
        	        {
        	            ANTLR_UINT32 alt276=2;
        	            switch ( this->LA(1) )
        	            {
        	            case ASTERISK:
        	            	{
        	            		alt276=1;
        	            	}
        	                break;
        	            case APPROXIMATE_NUM_LIT:
        	            case BINDVAR:
        	            case CHAR_STRING:
        	            case CHAR_STRING_PERL:
        	            case COLON:
        	            case DELIMITED_ID:
        	            case EXACT_NUM_LIT:
        	            case INTRODUCER:
        	            case LEFT_PAREN:
        	            case MINUS_SIGN:
        	            case NATIONAL_CHAR_STRING_LIT:
        	            case PLSQL_NON_RESERVED_CAST:
        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	            case PLUS_SIGN:
        	            case REGULAR_ID:
        	            case SQL92_RESERVED_ALL:
        	            case SQL92_RESERVED_ANY:
        	            case SQL92_RESERVED_CASE:
        	            case SQL92_RESERVED_DATE:
        	            case SQL92_RESERVED_DEFAULT:
        	            case SQL92_RESERVED_DISTINCT:
        	            case SQL92_RESERVED_EXISTS:
        	            case SQL92_RESERVED_FALSE:
        	            case SQL92_RESERVED_NULL:
        	            case SQL92_RESERVED_PRIOR:
        	            case SQL92_RESERVED_TRUE:
        	            case SQL92_RESERVED_UNIQUE:
        	            case UNSIGNED_INTEGER:
        	            	{
        	            		alt276=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 276 );
        	                ex->set_state( 0 );


        	                goto rulestandard_functionEx;

        	            }

        	            switch (alt276)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1142:19: ASTERISK
        	        	    {
        	        	        ASTERISK839 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_standard_function11938);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        ASTERISK839_tree = std::move(get_psrstate()->get_treeAdaptor()->create(ASTERISK839));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, ASTERISK839_tree);
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1142:30: ( distinct_key | unique_key | all_key )? concatenation_wrapper
        	        	    {
        	        	        // OracleDML.g:1142:30: ( distinct_key | unique_key | all_key )?
        	        	        {
        	        	            ANTLR_UINT32 alt275=4;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case SQL92_RESERVED_DISTINCT:
        	        	                	{
        	        	                		alt275=1;
        	        	                	}
        	        	                    break;
        	        	                case SQL92_RESERVED_UNIQUE:
        	        	                	{
        	        	                		alt275=2;
        	        	                	}
        	        	                    break;
        	        	                case SQL92_RESERVED_ALL:
        	        	                	{
        	        	                		alt275=3;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt275)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1142:31: distinct_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_distinct_key_in_standard_function11943);
        	        	        	        distinct_key840=distinct_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, distinct_key840.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1142:44: unique_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_unique_key_in_standard_function11945);
        	        	        	        unique_key841=unique_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unique_key841.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 3:
        	        	        	    // OracleDML.g:1142:55: all_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_all_key_in_standard_function11947);
        	        	        	        all_key842=all_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, all_key842.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function11951);
        	        	        concatenation_wrapper843=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper843.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN844 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function11967);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN844_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN844));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN844_tree);
        	        }


        	        // OracleDML.g:1143:25: ( over_clause )?
        	        {
        	            ANTLR_UINT32 alt277=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case LEFT_PAREN:
        	                		    	{
        	                		    		{
        	                		    		    ANTLR_UINT32 LA277_3 = this->LA(3);
        	                		    		    if ( (LA277_3 == REGULAR_ID))
        	                		    		    {
        	                		    		        {
        	                		    		            ANTLR_UINT32 LA277_6 = this->LA(4);
        	                		    		            if ( (LA277_6 == SQL92_RESERVED_BY) && ((toUpper(LT(1)->getText()) == "OVER")))
        	                		    		            {
        	                		    		                alt277=1;
        	                		    		            }
        	                		    		        }
        	                		    		    }
        	                		    		    else if ( (LA277_3 == RIGHT_PAREN || LA277_3 == SQL92_RESERVED_ORDER) && ((toUpper(LT(1)->getText()) == "OVER")))
        	                		    		    {
        	                		    		        alt277=1;
        	                		    		    }
        	                		    		}
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	            }

        	            switch (alt277)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1143:25: over_clause
        	        	    {
        	        	        this->followPush(FOLLOW_over_clause_in_standard_function11969);
        	        	        over_clause845=over_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, over_clause845.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:1144:10: ( cast_key ^| xmlcast_key ^) LEFT_PAREN ( ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )? | concatenation_wrapper as_key ! type_spec ) RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:1144:10: ( cast_key ^| xmlcast_key ^)
        	        {
        	            ANTLR_UINT32 alt278=2;
        	            {
        	                ANTLR_UINT32 LA278_0 = this->LA(1);
        	                if ( (LA278_0 == PLSQL_NON_RESERVED_CAST))
        	                {
        	                    alt278=1;
        	                }
        	                else if ( (LA278_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "XMLCAST")))
        	                {
        	                    alt278=2;
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 278 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt278)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1144:11: cast_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_cast_key_in_standard_function11982);
        	        	        cast_key846=cast_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(cast_key846.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1144:21: xmlcast_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_xmlcast_key_in_standard_function11985);
        	        	        xmlcast_key847=xmlcast_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlcast_key847.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        LEFT_PAREN848 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12002);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN848_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN848));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN848_tree);
        	        }


        	        // OracleDML.g:1146:13: ( ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )? | concatenation_wrapper as_key ! type_spec )
        	        {
        	            ANTLR_UINT32 alt281=2;
        	            {
        	                ANTLR_UINT32 LA281_0 = this->LA(1);
        	                if ( (LA281_0 == PLSQL_NON_RESERVED_MULTISET) && (this->msynpred( antlr3::ClassForwarder<synpred52_OracleDML>() )))
        	                {
        	                    alt281=1;
        	                }
        	                else if ( (LA281_0 == APPROXIMATE_NUM_LIT || LA281_0 == BINDVAR || ((LA281_0 >= CHAR_STRING) && (LA281_0 <= CHAR_STRING_PERL)) || LA281_0 == COLON || LA281_0 == DELIMITED_ID || LA281_0 == EXACT_NUM_LIT || LA281_0 == INTRODUCER || LA281_0 == LEFT_PAREN || LA281_0 == MINUS_SIGN || LA281_0 == NATIONAL_CHAR_STRING_LIT || ((LA281_0 >= PLSQL_NON_RESERVED_CAST) && (LA281_0 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA281_0 == PLUS_SIGN || LA281_0 == REGULAR_ID || LA281_0 == SQL92_RESERVED_ALL || LA281_0 == SQL92_RESERVED_ANY || LA281_0 == SQL92_RESERVED_CASE || LA281_0 == SQL92_RESERVED_DATE || LA281_0 == SQL92_RESERVED_DEFAULT || LA281_0 == SQL92_RESERVED_DISTINCT || ((LA281_0 >= SQL92_RESERVED_EXISTS) && (LA281_0 <= SQL92_RESERVED_FALSE)) || LA281_0 == SQL92_RESERVED_NULL || LA281_0 == SQL92_RESERVED_PRIOR || LA281_0 == SQL92_RESERVED_TRUE || LA281_0 == UNSIGNED_INTEGER))
        	                {
        	                    alt281=2;
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 281 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt281)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1146:15: ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )?
        	        	    {
        	        	        // OracleDML.g:1146:67: ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN )
        	        	        // OracleDML.g:1146:68: multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN
        	        	        {
        	        	            this->followPush(FOLLOW_multiset_key_in_standard_function12034);
        	        	            multiset_key849=multiset_key();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }


        	        	            LEFT_PAREN850 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12037);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) {
        	        	            LEFT_PAREN850_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN850));
        	        	            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN850_tree);
        	        	            }


        	        	            this->followPush(FOLLOW_subquery_in_standard_function12039);
        	        	            subquery851=subquery();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery851.tree);


        	        	            // OracleDML.g:1146:102: ( order_by_clause )?
        	        	            {
        	        	                ANTLR_UINT32 alt279=2;
        	        	                switch ( this->LA(1) )
        	        	                {
        	        	                    case SQL92_RESERVED_ORDER:
        	        	                    	{
        	        	                    		alt279=1;
        	        	                    	}
        	        	                        break;
        	        	                }

        	        	                switch (alt279)
        	        	                {
        	        	            	case 1:
        	        	            	    // OracleDML.g:1146:102: order_by_clause
        	        	            	    {
        	        	            	        this->followPush(FOLLOW_order_by_clause_in_standard_function12041);
        	        	            	        order_by_clause852=order_by_clause();

        	        	            	        this->followPop();
        	        	            	        if  (this->hasException())
        	        	            	        {
        	        	            	            goto rulestandard_functionEx;
        	        	            	        }
        	        	            	        if (this->hasFailed())
        	        	            	        {
        	        	            	            return retval;
        	        	            	        }

        	        	            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, order_by_clause852.tree);


        	        	            	    }
        	        	            	    break;

        	        	                }
        	        	            }

        	        	            RIGHT_PAREN853 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12044);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) {
        	        	            RIGHT_PAREN853_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN853));
        	        	            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN853_tree);
        	        	            }


        	        	        }


        	        	        // OracleDML.g:1147:15: ( as_key ! type_spec )?
        	        	        {
        	        	            ANTLR_UINT32 alt280=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case SQL92_RESERVED_AS:
        	        	                	{
        	        	                		alt280=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt280)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1147:16: as_key ! type_spec
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_as_key_in_standard_function12062);
        	        	        	        as_key854=as_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }


        	        	        	        this->followPush(FOLLOW_type_spec_in_standard_function12065);
        	        	        	        type_spec855=type_spec();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, type_spec855.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1148:15: concatenation_wrapper as_key ! type_spec
        	        	    {
        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12083);
        	        	        concatenation_wrapper856=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper856.tree);


        	        	        this->followPush(FOLLOW_as_key_in_standard_function12085);
        	        	        as_key857=as_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_type_spec_in_standard_function12088);
        	        	        type_spec858=type_spec();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, type_spec858.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN859 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12116);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN859_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN859));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN859_tree);
        	        }


        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:1151:10: chr_key ^ LEFT_PAREN concatenation_wrapper using_key ! nchar_cs_key RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_chr_key_in_standard_function12127);
        	        chr_key860=chr_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(chr_key860.tree, root_0);

        	        LEFT_PAREN861 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12142);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN861_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN861));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN861_tree);
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12161);
        	        concatenation_wrapper862=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper862.tree);


        	        this->followPush(FOLLOW_using_key_in_standard_function12163);
        	        using_key863=using_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_nchar_cs_key_in_standard_function12166);
        	        nchar_cs_key864=nchar_cs_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nchar_cs_key864.tree);


        	        RIGHT_PAREN865 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12181);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN865_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN865));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN865_tree);
        	        }


        	    }
        	    break;
        	case 6:
        	    // OracleDML.g:1155:10: collect_key ^ LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_collect_key_in_standard_function12192);
        	        collect_key866=collect_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(collect_key866.tree, root_0);

        	        LEFT_PAREN867 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12207);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN867_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN867));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN867_tree);
        	        }


        	        // OracleDML.g:1157:17: ( distinct_key | unique_key )?
        	        {
        	            ANTLR_UINT32 alt282=3;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_DISTINCT:
        	                	{
        	                		alt282=1;
        	                	}
        	                    break;
        	                case SQL92_RESERVED_UNIQUE:
        	                	{
        	                		alt282=2;
        	                	}
        	                    break;
        	            }

        	            switch (alt282)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1157:18: distinct_key
        	        	    {
        	        	        this->followPush(FOLLOW_distinct_key_in_standard_function12227);
        	        	        distinct_key868=distinct_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, distinct_key868.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1157:31: unique_key
        	        	    {
        	        	        this->followPush(FOLLOW_unique_key_in_standard_function12229);
        	        	        unique_key869=unique_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unique_key869.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12233);
        	        concatenation_wrapper870=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper870.tree);


        	        // OracleDML.g:1157:66: ( collect_order_by_part )?
        	        {
        	            ANTLR_UINT32 alt283=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_ORDER:
        	                	{
        	                		alt283=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt283)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1157:66: collect_order_by_part
        	        	    {
        	        	        this->followPush(FOLLOW_collect_order_by_part_in_standard_function12235);
        	        	        collect_order_by_part871=collect_order_by_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, collect_order_by_part871.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN872 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12250);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN872_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN872));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN872_tree);
        	        }


        	    }
        	    break;
        	case 7:
        	    // OracleDML.g:1159:10: stantard_function_enabling_within_or_over ^ function_argument ( within_or_over_part )+
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_stantard_function_enabling_within_or_over_in_standard_function12261);
        	        stantard_function_enabling_within_or_over873=stantard_function_enabling_within_or_over();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(stantard_function_enabling_within_or_over873.tree, root_0);

        	        this->followPush(FOLLOW_function_argument_in_standard_function12277);
        	        function_argument874=function_argument();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, function_argument874.tree);


        	        // OracleDML.g:1160:31: ( within_or_over_part )+
        	        {
        	            int cnt284=0;

        	            for (;;)
        	            {
        	                ANTLR_UINT32 alt284=2;
        	        	switch ( this->LA(1) )
        	        	{
        	        	case REGULAR_ID:
        	        		{
        	        			switch ( this->LA(2) )
        	        			{
        	        			case LEFT_PAREN:
        	        				{
        	        					{
        	        					   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        					    */
        	        					    ANTLR_UINT32 LA284_3 = this->LA(3);
        	        					    if ( (LA284_3 == REGULAR_ID))
        	        					    {
        	        					        {
        	        					           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        					            */
        	        					            ANTLR_UINT32 LA284_8 = this->LA(4);
        	        					            if ( (LA284_8 == SQL92_RESERVED_BY) && ((toUpper(LT(1)->getText()) == "OVER")))
        	        					            {
        	        					                alt284=1;
        	        					            }

        	        					        }
        	        					    }
        	        					    else if ( (LA284_3 == RIGHT_PAREN || LA284_3 == SQL92_RESERVED_ORDER) && ((toUpper(LT(1)->getText()) == "OVER")))
        	        					    {
        	        					        alt284=1;
        	        					    }

        	        					}
        	        				}
        	        			    break;
        	        			case SQL92_RESERVED_GROUP:
        	        				{
        	        					{
        	        					   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        					    */
        	        					    ANTLR_UINT32 LA284_4 = this->LA(3);
        	        					    if ( (LA284_4 == LEFT_PAREN) && ((toUpper(LT(1)->getText()) == "WITHIN")))
        	        					    {
        	        					        alt284=1;
        	        					    }

        	        					}
        	        				}
        	        			    break;

        	        			}

        	        		}
        	        	    break;

        	        	}

        	        	switch (alt284)
        	        	{
        	        	    case 1:
        	        	        // OracleDML.g:1160:31: within_or_over_part
        	        	        {
        	        	            this->followPush(FOLLOW_within_or_over_part_in_standard_function12279);
        	        	            within_or_over_part875=within_or_over_part();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, within_or_over_part875.tree);


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt284 >= 1 )
        	        		{
        	        		    goto loop284;
        	        		}
        	        		if (this->get_backtracking()>0)
        	        		{
        	        		    this->set_failedflag( true );
        	        		    return retval;
        	        		}

        	        		/* mismatchedSetEx()
        	        		 */
        	        		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        		goto rulestandard_functionEx;
        	        	}
        	        	cnt284++;
        	            }
        	            loop284: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;
        	case 8:
        	    // OracleDML.g:1161:10: decompose_key ^ LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_decompose_key_in_standard_function12291);
        	        decompose_key876=decompose_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(decompose_key876.tree, root_0);

        	        LEFT_PAREN877 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12306);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN877_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN877));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN877_tree);
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12325);
        	        concatenation_wrapper878=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper878.tree);


        	        // OracleDML.g:1163:39: ( canonical_key | compatibility_key )?
        	        {
        	            ANTLR_UINT32 alt285=3;
        	            {
        	                ANTLR_UINT32 LA285_0 = this->LA(1);
        	                if ( (LA285_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "COMPATIBILITY"))||((toUpper(LT(1)->getText()) == "CANONICAL")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA285_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "CANONICAL")))
        	                        {
        	                            alt285=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "COMPATIBILITY")))
        	                        {
        	                            alt285=2;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt285)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1163:40: canonical_key
        	        	    {
        	        	        this->followPush(FOLLOW_canonical_key_in_standard_function12328);
        	        	        canonical_key879=canonical_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, canonical_key879.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1163:54: compatibility_key
        	        	    {
        	        	        this->followPush(FOLLOW_compatibility_key_in_standard_function12330);
        	        	        compatibility_key880=compatibility_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, compatibility_key880.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN881 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12347);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN881_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN881));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN881_tree);
        	        }


        	    }
        	    break;
        	case 9:
        	    // OracleDML.g:1165:10: extract_key ^ LEFT_PAREN REGULAR_ID from_key ! concatenation_wrapper RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_extract_key_in_standard_function12358);
        	        extract_key882=extract_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(extract_key882.tree, root_0);

        	        LEFT_PAREN883 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12373);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN883_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN883));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN883_tree);
        	        }


        	        REGULAR_ID884 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_standard_function12391);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        REGULAR_ID884_tree = std::move(get_psrstate()->get_treeAdaptor()->create(REGULAR_ID884));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, REGULAR_ID884_tree);
        	        }


        	        this->followPush(FOLLOW_from_key_in_standard_function12393);
        	        from_key885=from_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12396);
        	        concatenation_wrapper886=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper886.tree);


        	        RIGHT_PAREN887 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12411);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN887_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN887));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN887_tree);
        	        }


        	    }
        	    break;
        	case 10:
        	    // OracleDML.g:1169:10: ( first_value_key ^| last_value_key ^) function_argument_analytic ( respect_or_ignore_nulls )? over_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:1169:10: ( first_value_key ^| last_value_key ^)
        	        {
        	            ANTLR_UINT32 alt286=2;
        	            {
        	                ANTLR_UINT32 LA286_0 = this->LA(1);
        	                if ( (LA286_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "LAST_VALUE"))||((toUpper(LT(1)->getText()) == "FIRST_VALUE")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA286_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "FIRST_VALUE")))
        	                        {
        	                            alt286=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "LAST_VALUE")))
        	                        {
        	                            alt286=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 286 );
        	                            ex->set_state( 1 );


        	                            goto rulestandard_functionEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 286 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt286)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1169:11: first_value_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_first_value_key_in_standard_function12423);
        	        	        first_value_key888=first_value_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(first_value_key888.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1169:28: last_value_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_last_value_key_in_standard_function12426);
        	        	        last_value_key889=last_value_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(last_value_key889.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_function_argument_analytic_in_standard_function12430);
        	        function_argument_analytic890=function_argument_analytic();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, function_argument_analytic890.tree);


        	        // OracleDML.g:1170:14: ( respect_or_ignore_nulls )?
        	        {
        	            ANTLR_UINT32 alt287=2;
        	            {
        	                ANTLR_UINT32 LA287_0 = this->LA(1);
        	                if ( (LA287_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "OVER"))||((toUpper(LT(1)->getText()) == "IGNORE"))||((toUpper(LT(1)->getText()) == "RESPECT")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA287_1 = this->LA(2);
        	                        if ( (LA287_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "IGNORE"))||((toUpper(LT(1)->getText()) == "RESPECT")))))
        	                        {
        	                            alt287=1;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt287)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1170:14: respect_or_ignore_nulls
        	        	    {
        	        	        this->followPush(FOLLOW_respect_or_ignore_nulls_in_standard_function12445);
        	        	        respect_or_ignore_nulls891=respect_or_ignore_nulls();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, respect_or_ignore_nulls891.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_over_clause_in_standard_function12448);
        	        over_clause892=over_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, over_clause892.tree);


        	    }
        	    break;
        	case 11:
        	    // OracleDML.g:1171:10: stantard_function_pedictions ^ LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_stantard_function_pedictions_in_standard_function12459);
        	        stantard_function_pedictions893=stantard_function_pedictions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(stantard_function_pedictions893.tree, root_0);

        	        LEFT_PAREN894 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12474);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN894_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN894));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN894_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12492);
        	        expression_wrapper895=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper895.tree);


        	        // OracleDML.g:1173:36: ( COMMA expression_wrapper )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt288=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt288=1;
        	            	}
        	                break;

        	            }

        	            switch (alt288)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1173:37: COMMA expression_wrapper
        	        	    {
        	        	        COMMA896 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function12495);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        COMMA896_tree = std::move(get_psrstate()->get_treeAdaptor()->create(COMMA896));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, COMMA896_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12497);
        	        	        expression_wrapper897=expression_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper897.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop288;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop288: ; /* Jump out to here if this rule does not match */


        	        // OracleDML.g:1173:64: ( cost_matrix_clause )?
        	        {
        	            ANTLR_UINT32 alt289=2;
        	            {
        	                ANTLR_UINT32 LA289_0 = this->LA(1);
        	                if ( (LA289_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "COST")))
        	                {
        	                    alt289=1;
        	                }
        	            }
        	            switch (alt289)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1173:64: cost_matrix_clause
        	        	    {
        	        	        this->followPush(FOLLOW_cost_matrix_clause_in_standard_function12501);
        	        	        cost_matrix_clause898=cost_matrix_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cost_matrix_clause898.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1173:84: ( using_clause )?
        	        {
        	            ANTLR_UINT32 alt290=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PLSQL_NON_RESERVED_USING:
        	                	{
        	                		alt290=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt290)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1173:84: using_clause
        	        	    {
        	        	        this->followPush(FOLLOW_using_clause_in_standard_function12504);
        	        	        using_clause899=using_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, using_clause899.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN900 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12520);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN900_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN900));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN900_tree);
        	        }


        	    }
        	    break;
        	case 12:
        	    // OracleDML.g:1175:10: translate_key ^ LEFT_PAREN expression_wrapper ( using_key ! ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_translate_key_in_standard_function12531);
        	        translate_key901=translate_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(translate_key901.tree, root_0);

        	        LEFT_PAREN902 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12546);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN902_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN902));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN902_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12565);
        	        expression_wrapper903=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper903.tree);


        	        // OracleDML.g:1177:36: ( using_key ! ( char_cs_key | nchar_cs_key ) )?
        	        {
        	            ANTLR_UINT32 alt292=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PLSQL_NON_RESERVED_USING:
        	                	{
        	                		alt292=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt292)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1177:37: using_key ! ( char_cs_key | nchar_cs_key )
        	        	    {
        	        	        this->followPush(FOLLOW_using_key_in_standard_function12568);
        	        	        using_key904=using_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        // OracleDML.g:1177:48: ( char_cs_key | nchar_cs_key )
        	        	        {
        	        	            ANTLR_UINT32 alt291=2;
        	        	            {
        	        	                ANTLR_UINT32 LA291_0 = this->LA(1);
        	        	                if ( (LA291_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "NCHAR_CS"))||((toUpper(LT(1)->getText()) == "CHAR_CS")))))
        	        	                {
        	        	                    {
        	        	                        ANTLR_UINT32 LA291_1 = this->LA(2);
        	        	                        if ( ((toUpper(LT(1)->getText()) == "CHAR_CS")))
        	        	                        {
        	        	                            alt291=1;
        	        	                        }
        	        	                        else if ( ((toUpper(LT(1)->getText()) == "NCHAR_CS")))
        	        	                        {
        	        	                            alt291=2;
        	        	                        }
        	        	                        else
        	        	                        {
        	        	                            if (this->get_backtracking()>0)
        	        	                            {
        	        	                                this->set_failedflag( true );
        	        	                                return retval;
        	        	                            }


        	        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                            ex->set_decisionNum( 291 );
        	        	                            ex->set_state( 1 );


        	        	                            goto rulestandard_functionEx;

        	        	                        }
        	        	                    }
        	        	                }
        	        	                else
        	        	                {
        	        	                    if (this->get_backtracking()>0)
        	        	                    {
        	        	                        this->set_failedflag( true );
        	        	                        return retval;
        	        	                    }


        	        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                    ex->set_decisionNum( 291 );
        	        	                    ex->set_state( 0 );


        	        	                    goto rulestandard_functionEx;

        	        	                }
        	        	            }
        	        	            switch (alt291)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1177:49: char_cs_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_char_cs_key_in_standard_function12572);
        	        	        	        char_cs_key905=char_cs_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, char_cs_key905.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1177:61: nchar_cs_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_nchar_cs_key_in_standard_function12574);
        	        	        	        nchar_cs_key906=nchar_cs_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nchar_cs_key906.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1178:21: ( COMMA expression_wrapper )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt293=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt293=1;
        	            	}
        	                break;

        	            }

        	            switch (alt293)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1178:22: COMMA expression_wrapper
        	        	    {
        	        	        COMMA907 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function12601);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        COMMA907_tree = std::move(get_psrstate()->get_treeAdaptor()->create(COMMA907));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, COMMA907_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12603);
        	        	        expression_wrapper908=expression_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper908.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop293;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop293: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN909 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12620);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN909_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN909));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN909_tree);
        	        }


        	    }
        	    break;
        	case 13:
        	    // OracleDML.g:1180:10: treat_key ^ LEFT_PAREN expression_wrapper as_key ! ( ref_key )? type_spec RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_treat_key_in_standard_function12631);
        	        treat_key910=treat_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(treat_key910.tree, root_0);

        	        LEFT_PAREN911 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12646);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN911_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN911));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN911_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12664);
        	        expression_wrapper912=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper912.tree);


        	        this->followPush(FOLLOW_as_key_in_standard_function12666);
        	        as_key913=as_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        // OracleDML.g:1182:44: ( ref_key )?
        	        {
        	            ANTLR_UINT32 alt294=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA294_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "REF")))
        	                		    {
        	                		        alt294=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt294)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1182:44: ref_key
        	        	    {
        	        	        this->followPush(FOLLOW_ref_key_in_standard_function12669);
        	        	        ref_key914=ref_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, ref_key914.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_type_spec_in_standard_function12672);
        	        type_spec915=type_spec();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, type_spec915.tree);


        	        RIGHT_PAREN916 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12687);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN916_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN916));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN916_tree);
        	        }


        	    }
        	    break;
        	case 14:
        	    // OracleDML.g:1184:10: trim_key ^ LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_trim_key_in_standard_function12698);
        	        trim_key917=trim_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(trim_key917.tree, root_0);

        	        LEFT_PAREN918 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12713);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN918_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN918));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN918_tree);
        	        }


        	        // OracleDML.g:1186:17: ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )?
        	        {
        	            ANTLR_UINT32 alt297=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case CHAR_STRING:
        	                		    case CHAR_STRING_PERL:
        	                		    case NATIONAL_CHAR_STRING_LIT:
        	                		    	{
        	                		    		switch ( this->LA(3) )
        	                		    		{
        	                		    		    case SQL92_RESERVED_FROM:
        	                		    		    	{
        	                		    		    		alt297=1;
        	                		    		    	}
        	                		    		        break;
        	                		    		}

        	                		    	}
        	                		        break;
        	                		    case SQL92_RESERVED_FROM:
        	                		    	{
        	                		    		alt297=1;
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	                case CHAR_STRING:
        	                case CHAR_STRING_PERL:
        	                case NATIONAL_CHAR_STRING_LIT:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case SQL92_RESERVED_FROM:
        	                		    	{
        	                		    		alt297=1;
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	                case SQL92_RESERVED_FROM:
        	                	{
        	                		alt297=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt297)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1186:18: ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key
        	        	    {
        	        	        // OracleDML.g:1186:18: ( leading_key | trailing_key | both_key )?
        	        	        {
        	        	            ANTLR_UINT32 alt295=4;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case REGULAR_ID:
        	        	                	{
        	        	                		{
        	        	                		    ANTLR_UINT32 LA295_1 = this->LA(2);
        	        	                		    if ( ((toUpper(LT(1)->getText()) == "LEADING")))
        	        	                		    {
        	        	                		        alt295=1;
        	        	                		    }
        	        	                		    else if ( ((toUpper(LT(1)->getText()) == "TRAILING")))
        	        	                		    {
        	        	                		        alt295=2;
        	        	                		    }
        	        	                		    else if ( ((toUpper(LT(1)->getText()) == "BOTH")))
        	        	                		    {
        	        	                		        alt295=3;
        	        	                		    }
        	        	                		}
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt295)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1186:19: leading_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_leading_key_in_standard_function12733);
        	        	        	        leading_key919=leading_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, leading_key919.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1186:31: trailing_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_trailing_key_in_standard_function12735);
        	        	        	        trailing_key920=trailing_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, trailing_key920.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 3:
        	        	        	    // OracleDML.g:1186:44: both_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_both_key_in_standard_function12737);
        	        	        	        both_key921=both_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, both_key921.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        // OracleDML.g:1186:55: ( quoted_string )?
        	        	        {
        	        	            ANTLR_UINT32 alt296=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case CHAR_STRING:
        	        	                case CHAR_STRING_PERL:
        	        	                case NATIONAL_CHAR_STRING_LIT:
        	        	                	{
        	        	                		alt296=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt296)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1186:55: quoted_string
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_quoted_string_in_standard_function12741);
        	        	        	        quoted_string922=quoted_string();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, quoted_string922.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        this->followPush(FOLLOW_from_key_in_standard_function12744);
        	        	        from_key923=from_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, from_key923.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12764);
        	        concatenation_wrapper924=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper924.tree);


        	        RIGHT_PAREN925 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12778);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN925_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN925));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN925_tree);
        	        }


        	    }
        	    break;
        	case 15:
        	    // OracleDML.g:1189:10: xmlagg_key ^ LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlagg_key_in_standard_function12789);
        	        xmlagg_key926=xmlagg_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlagg_key926.tree, root_0);

        	        LEFT_PAREN927 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12804);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN927_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN927));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN927_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12823);
        	        expression_wrapper928=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper928.tree);


        	        // OracleDML.g:1191:36: ( order_by_clause )?
        	        {
        	            ANTLR_UINT32 alt298=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_ORDER:
        	                	{
        	                		alt298=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt298)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1191:36: order_by_clause
        	        	    {
        	        	        this->followPush(FOLLOW_order_by_clause_in_standard_function12825);
        	        	        order_by_clause929=order_by_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, order_by_clause929.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN930 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12841);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN930_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN930));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN930_tree);
        	        }


        	        // OracleDML.g:1193:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt299=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt299=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt299)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1193:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD931 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function12856);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD931_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD931));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD931_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function12858);
        	        	        general_element_part932=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part932.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 16:
        	    // OracleDML.g:1194:10: ( xmlcolattval_key ^| xmlforest_key ^) LEFT_PAREN xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:1194:10: ( xmlcolattval_key ^| xmlforest_key ^)
        	        {
        	            ANTLR_UINT32 alt300=2;
        	            {
        	                ANTLR_UINT32 LA300_0 = this->LA(1);
        	                if ( (LA300_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "XMLCOLATTVAL"))||((toUpper(LT(1)->getText()) == "XMLFOREST")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA300_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "XMLCOLATTVAL")))
        	                        {
        	                            alt300=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "XMLFOREST")))
        	                        {
        	                            alt300=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 300 );
        	                            ex->set_state( 1 );


        	                            goto rulestandard_functionEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 300 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt300)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1194:11: xmlcolattval_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_xmlcolattval_key_in_standard_function12872);
        	        	        xmlcolattval_key933=xmlcolattval_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlcolattval_key933.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1194:29: xmlforest_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_xmlforest_key_in_standard_function12875);
        	        	        xmlforest_key934=xmlforest_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlforest_key934.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        LEFT_PAREN935 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12892);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN935_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN935));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN935_tree);
        	        }


        	        this->followPush(FOLLOW_xml_multiuse_expression_element_in_standard_function12910);
        	        xml_multiuse_expression_element936=xml_multiuse_expression_element();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_multiuse_expression_element936.tree);


        	        // OracleDML.g:1196:49: ( COMMA ! xml_multiuse_expression_element )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt301=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt301=1;
        	            	}
        	                break;

        	            }

        	            switch (alt301)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1196:50: COMMA ! xml_multiuse_expression_element
        	        	    {
        	        	        COMMA937 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function12913);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_xml_multiuse_expression_element_in_standard_function12916);
        	        	        xml_multiuse_expression_element938=xml_multiuse_expression_element();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_multiuse_expression_element938.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop301;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop301: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN939 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12932);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN939_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN939));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN939_tree);
        	        }


        	        // OracleDML.g:1198:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt302=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt302=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt302)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1198:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD940 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function12947);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD940_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD940));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD940_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function12949);
        	        	        general_element_part941=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part941.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 17:
        	    // OracleDML.g:1199:10: xmlelement_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA ! xml_attributes_clause )? ( COMMA ! expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlelement_key_in_standard_function12962);
        	        xmlelement_key942=xmlelement_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlelement_key942.tree, root_0);

        	        LEFT_PAREN943 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12977);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN943_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN943));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN943_tree);
        	        }


        	        // OracleDML.g:1201:17: ( entityescaping_key | noentityescaping_key )?
        	        {
        	            ANTLR_UINT32 alt303=3;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA303_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "ENTITYESCAPING")))
        	                		    {
        	                		        alt303=1;
        	                		    }
        	                		    else if ( ((toUpper(LT(1)->getText()) == "NOENTITYESCAPING")))
        	                		    {
        	                		        alt303=2;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt303)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1201:18: entityescaping_key
        	        	    {
        	        	        this->followPush(FOLLOW_entityescaping_key_in_standard_function12996);
        	        	        entityescaping_key944=entityescaping_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, entityescaping_key944.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1201:37: noentityescaping_key
        	        	    {
        	        	        this->followPush(FOLLOW_noentityescaping_key_in_standard_function12998);
        	        	        noentityescaping_key945=noentityescaping_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, noentityescaping_key945.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1202:17: ( name_key | evalname_key )?
        	        {
        	            ANTLR_UINT32 alt304=3;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA304_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "NAME")))
        	                		    {
        	                		        alt304=1;
        	                		    }
        	                		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME")))
        	                		    {
        	                		        alt304=2;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt304)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1202:18: name_key
        	        	    {
        	        	        this->followPush(FOLLOW_name_key_in_standard_function13019);
        	        	        name_key946=name_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, name_key946.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1202:27: evalname_key
        	        	    {
        	        	        this->followPush(FOLLOW_evalname_key_in_standard_function13021);
        	        	        evalname_key947=evalname_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, evalname_key947.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function13025);
        	        expression_wrapper948=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper948.tree);


        	        // OracleDML.g:1203:17: ({...}? COMMA ! xml_attributes_clause )?
        	        {
        	            ANTLR_UINT32 alt305=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COMMA:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA305_1 = this->LA(2);
        	                		    if ( ((LT(2)->getText() == "XMLATTRIBUTES")))
        	                		    {
        	                		        alt305=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt305)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1203:18: {...}? COMMA ! xml_attributes_clause
        	        	    {
        	        	        if ( !((LT(2)->getText() == "XMLATTRIBUTES")) )
        	        	        {
        	        	            if (this->get_backtracking()>0)
        	        	            {
        	        	                this->set_failedflag( true );
        	        	                return retval;
        	        	            }

        	        	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "LT(2)->getText() == \"XMLATTRIBUTES\"" );
        	        	                ex->set_ruleName( "standard_function" );


        	        	        }

        	        	        COMMA949 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13046);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_xml_attributes_clause_in_standard_function13049);
        	        	        xml_attributes_clause950=xml_attributes_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_attributes_clause950.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1204:17: ( COMMA ! expression_wrapper ( column_alias )? )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt307=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt307=1;
        	            	}
        	                break;

        	            }

        	            switch (alt307)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1204:18: COMMA ! expression_wrapper ( column_alias )?
        	        	    {
        	        	        COMMA951 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13070);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function13073);
        	        	        expression_wrapper952=expression_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper952.tree);


        	        	        // OracleDML.g:1204:44: ( column_alias )?
        	        	        {
        	        	            ANTLR_UINT32 alt306=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case CHAR_STRING:
        	        	                case CHAR_STRING_PERL:
        	        	                case DELIMITED_ID:
        	        	                case INTRODUCER:
        	        	                case NATIONAL_CHAR_STRING_LIT:
        	        	                case REGULAR_ID:
        	        	                case SQL92_RESERVED_AS:
        	        	                	{
        	        	                		alt306=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt306)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1204:44: column_alias
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_column_alias_in_standard_function13075);
        	        	        	        column_alias953=column_alias();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias953.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop307;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop307: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN954 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13092);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN954_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN954));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN954_tree);
        	        }


        	        // OracleDML.g:1206:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt308=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt308=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt308)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1206:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD955 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13107);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD955_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD955));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD955_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13109);
        	        	        general_element_part956=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part956.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 18:
        	    // OracleDML.g:1207:10: xmlexists_key ^ LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlexists_key_in_standard_function13122);
        	        xmlexists_key957=xmlexists_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlexists_key957.tree, root_0);

        	        LEFT_PAREN958 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13137);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN958_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN958));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN958_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function13155);
        	        expression_wrapper959=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper959.tree);


        	        // OracleDML.g:1210:17: ( xml_passing_clause )?
        	        {
        	            ANTLR_UINT32 alt309=2;
        	            {
        	                ANTLR_UINT32 LA309_0 = this->LA(1);
        	                if ( (LA309_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "PASSING")))
        	                {
        	                    alt309=1;
        	                }
        	            }
        	            switch (alt309)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1210:17: xml_passing_clause
        	        	    {
        	        	        this->followPush(FOLLOW_xml_passing_clause_in_standard_function13173);
        	        	        xml_passing_clause960=xml_passing_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_passing_clause960.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN961 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13188);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN961_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN961));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN961_tree);
        	        }


        	    }
        	    break;
        	case 19:
        	    // OracleDML.g:1212:10: xmlparse_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlparse_key_in_standard_function13199);
        	        xmlparse_key962=xmlparse_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlparse_key962.tree, root_0);

        	        LEFT_PAREN963 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13214);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN963_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN963));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN963_tree);
        	        }


        	        // OracleDML.g:1214:17: ( document_key | content_key )
        	        {
        	            ANTLR_UINT32 alt310=2;
        	            {
        	                ANTLR_UINT32 LA310_0 = this->LA(1);
        	                if ( (LA310_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "CONTENT"))||((toUpper(LT(1)->getText()) == "DOCUMENT")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA310_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "DOCUMENT")))
        	                        {
        	                            alt310=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "CONTENT")))
        	                        {
        	                            alt310=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 310 );
        	                            ex->set_state( 1 );


        	                            goto rulestandard_functionEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 310 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt310)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1214:18: document_key
        	        	    {
        	        	        this->followPush(FOLLOW_document_key_in_standard_function13234);
        	        	        document_key964=document_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, document_key964.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1214:31: content_key
        	        	    {
        	        	        this->followPush(FOLLOW_content_key_in_standard_function13236);
        	        	        content_key965=content_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, content_key965.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13239);
        	        concatenation_wrapper966=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper966.tree);


        	        // OracleDML.g:1214:66: ( wellformed_key )?
        	        {
        	            ANTLR_UINT32 alt311=2;
        	            {
        	                ANTLR_UINT32 LA311_0 = this->LA(1);
        	                if ( (LA311_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "WELLFORMED")))
        	                {
        	                    alt311=1;
        	                }
        	            }
        	            switch (alt311)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1214:66: wellformed_key
        	        	    {
        	        	        this->followPush(FOLLOW_wellformed_key_in_standard_function13241);
        	        	        wellformed_key967=wellformed_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, wellformed_key967.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN968 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13256);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN968_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN968));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN968_tree);
        	        }


        	        // OracleDML.g:1216:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt312=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt312=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt312)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1216:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD969 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13271);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD969_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD969));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD969_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13273);
        	        	        general_element_part970=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part970.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 20:
        	    // OracleDML.g:1217:10: xmlpi_key ^ LEFT_PAREN ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper ) ( COMMA ! concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlpi_key_in_standard_function13286);
        	        xmlpi_key971=xmlpi_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlpi_key971.tree, root_0);

        	        LEFT_PAREN972 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13301);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN972_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN972));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN972_tree);
        	        }


        	        // OracleDML.g:1219:17: ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper )
        	        {
        	            ANTLR_UINT32 alt313=2;
        	            alt313 = cdfa313.predict(this, this->get_rec(), this->get_istream(), cdfa313 );
        	            if  (this->hasException())
        	            {
        	                goto rulestandard_functionEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return retval;
        	            }

        	            switch (alt313)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1219:22: name_key id[T_UNKNOWN,T_USE]
        	        	    {
        	        	        this->followPush(FOLLOW_name_key_in_standard_function13325);
        	        	        name_key973=name_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, name_key973.tree);


        	        	        this->followPush(FOLLOW_id_in_standard_function13327);
        	        	        id974=id(T_UNKNOWN, T_USE);

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, id974.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1220:22: evalname_key concatenation_wrapper
        	        	    {
        	        	        this->followPush(FOLLOW_evalname_key_in_standard_function13351);
        	        	        evalname_key975=evalname_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, evalname_key975.tree);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13353);
        	        	        concatenation_wrapper976=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper976.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1222:17: ( COMMA ! concatenation_wrapper )?
        	        {
        	            ANTLR_UINT32 alt314=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COMMA:
        	                	{
        	                		alt314=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt314)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1222:18: COMMA ! concatenation_wrapper
        	        	    {
        	        	        COMMA977 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13390);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13393);
        	        	        concatenation_wrapper978=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper978.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN979 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13409);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN979_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN979));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN979_tree);
        	        }


        	        // OracleDML.g:1224:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt315=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt315=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt315)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1224:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD980 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13424);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD980_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD980));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD980_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13426);
        	        	        general_element_part981=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part981.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 21:
        	    // OracleDML.g:1225:10: xmlquery_key ^ LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key ! content_key ! ( null_key on_key ! empty_key !)? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlquery_key_in_standard_function13439);
        	        xmlquery_key982=xmlquery_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlquery_key982.tree, root_0);

        	        LEFT_PAREN983 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13454);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN983_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN983));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN983_tree);
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13473);
        	        concatenation_wrapper984=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper984.tree);


        	        // OracleDML.g:1227:39: ( xml_passing_clause )?
        	        {
        	            ANTLR_UINT32 alt316=2;
        	            {
        	                ANTLR_UINT32 LA316_0 = this->LA(1);
        	                if ( (LA316_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "PASSING"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA316_1 = this->LA(2);
        	                        if ( (LA316_1 == APPROXIMATE_NUM_LIT || LA316_1 == BINDVAR || ((LA316_1 >= CHAR_STRING) && (LA316_1 <= CHAR_STRING_PERL)) || LA316_1 == COLON || LA316_1 == DELIMITED_ID || LA316_1 == EXACT_NUM_LIT || LA316_1 == INTRODUCER || LA316_1 == LEFT_PAREN || LA316_1 == MINUS_SIGN || LA316_1 == NATIONAL_CHAR_STRING_LIT || ((LA316_1 >= PLSQL_NON_RESERVED_CAST) && (LA316_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA316_1 == PLUS_SIGN || LA316_1 == SQL92_RESERVED_ALL || LA316_1 == SQL92_RESERVED_ANY || ((LA316_1 >= SQL92_RESERVED_BY) && (LA316_1 <= SQL92_RESERVED_CASE)) || ((LA316_1 >= SQL92_RESERVED_CURSOR) && (LA316_1 <= SQL92_RESERVED_DATE)) || LA316_1 == SQL92_RESERVED_DEFAULT || LA316_1 == SQL92_RESERVED_DISTINCT || ((LA316_1 >= SQL92_RESERVED_EXISTS) && (LA316_1 <= SQL92_RESERVED_FALSE)) || ((LA316_1 >= SQL92_RESERVED_NOT) && (LA316_1 <= SQL92_RESERVED_NULL)) || LA316_1 == SQL92_RESERVED_PRIOR || LA316_1 == SQL92_RESERVED_TRUE || LA316_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "PASSING")))
        	                        {
        	                            alt316=1;
        	                        }
        	                        else if ( (LA316_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "PASSING"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
        	                        {
        	                            {
        	                                ANTLR_UINT32 LA316_3 = this->LA(3);
        	                                if ( (LA316_3 == APPROXIMATE_NUM_LIT || LA316_3 == ASTERISK || LA316_3 == BINDVAR || LA316_3 == CARRET_OPERATOR_PART || ((LA316_3 >= CHAR_STRING) && (LA316_3 <= CHAR_STRING_PERL)) || LA316_3 == COLON || LA316_3 == COMMA || LA316_3 == CONCATENATION_OP || LA316_3 == DELIMITED_ID || LA316_3 == EQUALS_OP || LA316_3 == EXACT_NUM_LIT || LA316_3 == EXCLAMATION_OPERATOR_PART || ((LA316_3 >= GREATER_THAN_OP) && (LA316_3 <= GREATER_THAN_OR_EQUALS_OP)) || LA316_3 == INTRODUCER || ((LA316_3 >= LEFT_BRACKET) && (LA316_3 <= LEFT_PAREN)) || ((LA316_3 >= LESS_THAN_OP) && (LA316_3 <= LESS_THAN_OR_EQUALS_OP)) || LA316_3 == MINUS_SIGN || LA316_3 == NATIONAL_CHAR_STRING_LIT || LA316_3 == NOT_EQUAL_OP || LA316_3 == PERIOD || ((LA316_3 >= PLSQL_NON_RESERVED_CAST) && (LA316_3 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA316_3 == PLSQL_NON_RESERVED_MULTISET || LA316_3 == PLUS_SIGN || LA316_3 == REGULAR_ID || LA316_3 == SOLIDUS || LA316_3 == SQL92_RESERVED_ALL || ((LA316_3 >= SQL92_RESERVED_AND) && (LA316_3 <= SQL92_RESERVED_AS)) || LA316_3 == SQL92_RESERVED_BETWEEN || LA316_3 == SQL92_RESERVED_CASE || LA316_3 == SQL92_RESERVED_DATE || LA316_3 == SQL92_RESERVED_DEFAULT || LA316_3 == SQL92_RESERVED_DISTINCT || ((LA316_3 >= SQL92_RESERVED_EXISTS) && (LA316_3 <= SQL92_RESERVED_FALSE)) || LA316_3 == SQL92_RESERVED_IN || ((LA316_3 >= SQL92_RESERVED_IS) && (LA316_3 <= SQL92_RESERVED_NOT)) || LA316_3 == SQL92_RESERVED_OR || LA316_3 == SQL92_RESERVED_PRIOR || LA316_3 == SQL92_RESERVED_TRUE || LA316_3 == UNSIGNED_INTEGER || LA316_3 == VERTICAL_BAR) && ((toUpper(LT(1)->getText()) == "PASSING")))
        	                                {
        	                                    alt316=1;
        	                                }
        	                                else if ( (LA316_3 == SQL92_RESERVED_NULL) && ((((toUpper(LT(1)->getText()) == "PASSING"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
        	                                {
        	                                    {
        	                                        ANTLR_UINT32 LA316_4 = this->LA(4);
        	                                        if ( (LA316_4 == ASTERISK || LA316_4 == CARRET_OPERATOR_PART || ((LA316_4 >= CHAR_STRING) && (LA316_4 <= CHAR_STRING_PERL)) || LA316_4 == COMMA || LA316_4 == CONCATENATION_OP || LA316_4 == DELIMITED_ID || LA316_4 == EQUALS_OP || LA316_4 == EXCLAMATION_OPERATOR_PART || ((LA316_4 >= GREATER_THAN_OP) && (LA316_4 <= GREATER_THAN_OR_EQUALS_OP)) || LA316_4 == INTRODUCER || LA316_4 == LEFT_BRACKET || ((LA316_4 >= LESS_THAN_OP) && (LA316_4 <= LESS_THAN_OR_EQUALS_OP)) || LA316_4 == MINUS_SIGN || LA316_4 == NATIONAL_CHAR_STRING_LIT || LA316_4 == NOT_EQUAL_OP || LA316_4 == PLSQL_NON_RESERVED_MULTISET || LA316_4 == PLUS_SIGN || LA316_4 == REGULAR_ID || LA316_4 == SOLIDUS || LA316_4 == SQL92_RESERVED_AND || LA316_4 == SQL92_RESERVED_AS || LA316_4 == SQL92_RESERVED_BETWEEN || LA316_4 == SQL92_RESERVED_IN || ((LA316_4 >= SQL92_RESERVED_IS) && (LA316_4 <= SQL92_RESERVED_NOT)) || LA316_4 == SQL92_RESERVED_OR || LA316_4 == VERTICAL_BAR) && ((toUpper(LT(1)->getText()) == "PASSING")))
        	                                        {
        	                                            alt316=1;
        	                                        }
        	                                    }
        	                                }
        	                            }
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt316)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1227:39: xml_passing_clause
        	        	    {
        	        	        this->followPush(FOLLOW_xml_passing_clause_in_standard_function13475);
        	        	        xml_passing_clause985=xml_passing_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_passing_clause985.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_returning_key_in_standard_function13494);
        	        returning_key986=returning_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_content_key_in_standard_function13497);
        	        content_key987=content_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        // OracleDML.g:1228:45: ( null_key on_key ! empty_key !)?
        	        {
        	            ANTLR_UINT32 alt317=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_NULL:
        	                	{
        	                		alt317=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt317)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1228:46: null_key on_key ! empty_key !
        	        	    {
        	        	        this->followPush(FOLLOW_null_key_in_standard_function13501);
        	        	        null_key988=null_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, null_key988.tree);


        	        	        this->followPush(FOLLOW_on_key_in_standard_function13503);
        	        	        on_key989=on_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_empty_key_in_standard_function13506);
        	        	        empty_key990=empty_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN991 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13523);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN991_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN991));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN991_tree);
        	        }


        	        // OracleDML.g:1230:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt318=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt318=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt318)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1230:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD992 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13538);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD992_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD992));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD992_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13540);
        	        	        general_element_part993=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part993.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 22:
        	    // OracleDML.g:1231:10: xmlroot_key ^ LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA ! xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlroot_key_in_standard_function13553);
        	        xmlroot_key994=xmlroot_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlroot_key994.tree, root_0);

        	        LEFT_PAREN995 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13568);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN995_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN995));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN995_tree);
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13586);
        	        concatenation_wrapper996=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper996.tree);


        	        this->followPush(FOLLOW_xmlroot_param_version_part_in_standard_function13608);
        	        xmlroot_param_version_part997=xmlroot_param_version_part();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlroot_param_version_part997.tree);


        	        // OracleDML.g:1235:21: ( COMMA ! xmlroot_param_standalone_part )?
        	        {
        	            ANTLR_UINT32 alt319=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COMMA:
        	                	{
        	                		alt319=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt319)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1235:22: COMMA ! xmlroot_param_standalone_part
        	        	    {
        	        	        COMMA998 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13631);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_xmlroot_param_standalone_part_in_standard_function13634);
        	        	        xmlroot_param_standalone_part999=xmlroot_param_standalone_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlroot_param_standalone_part999.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN1000 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13650);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN1000_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1000));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1000_tree);
        	        }


        	        // OracleDML.g:1237:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt320=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt320=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt320)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1237:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD1001 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13665);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD1001_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD1001));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD1001_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13667);
        	        	        general_element_part1002=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part1002.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 23:
        	    // OracleDML.g:1238:10: xmlserialize_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key ! type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlserialize_key_in_standard_function13680);
        	        xmlserialize_key1003=xmlserialize_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlserialize_key1003.tree, root_0);

        	        LEFT_PAREN1004 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13695);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN1004_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1004));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1004_tree);
        	        }


        	        // OracleDML.g:1240:17: ( document_key | content_key )
        	        {
        	            ANTLR_UINT32 alt321=2;
        	            {
        	                ANTLR_UINT32 LA321_0 = this->LA(1);
        	                if ( (LA321_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "CONTENT"))||((toUpper(LT(1)->getText()) == "DOCUMENT")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA321_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "DOCUMENT")))
        	                        {
        	                            alt321=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "CONTENT")))
        	                        {
        	                            alt321=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 321 );
        	                            ex->set_state( 1 );


        	                            goto rulestandard_functionEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 321 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt321)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1240:18: document_key
        	        	    {
        	        	        this->followPush(FOLLOW_document_key_in_standard_function13714);
        	        	        document_key1005=document_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, document_key1005.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1240:31: content_key
        	        	    {
        	        	        this->followPush(FOLLOW_content_key_in_standard_function13716);
        	        	        content_key1006=content_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, content_key1006.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13735);
        	        concatenation_wrapper1007=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1007.tree);


        	        // OracleDML.g:1241:39: ( as_key ! type_spec )?
        	        {
        	            ANTLR_UINT32 alt322=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_AS:
        	                	{
        	                		alt322=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt322)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1241:40: as_key ! type_spec
        	        	    {
        	        	        this->followPush(FOLLOW_as_key_in_standard_function13738);
        	        	        as_key1008=as_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_type_spec_in_standard_function13741);
        	        	        type_spec1009=type_spec();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, type_spec1009.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1242:17: ( xmlserialize_param_enconding_part )?
        	        {
        	            ANTLR_UINT32 alt323=2;
        	            {
        	                ANTLR_UINT32 LA323_0 = this->LA(1);
        	                if ( (LA323_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "VERSION"))||((toUpper(LT(1)->getText()) == "ENCODING"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA323_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "ENCODING")))
        	                        {
        	                            alt323=1;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt323)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1242:17: xmlserialize_param_enconding_part
        	        	    {
        	        	        this->followPush(FOLLOW_xmlserialize_param_enconding_part_in_standard_function13761);
        	        	        xmlserialize_param_enconding_part1010=xmlserialize_param_enconding_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlserialize_param_enconding_part1010.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1243:17: ( xmlserialize_param_version_part )?
        	        {
        	            ANTLR_UINT32 alt324=2;
        	            {
        	                ANTLR_UINT32 LA324_0 = this->LA(1);
        	                if ( (LA324_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "VERSION"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA324_1 = this->LA(2);
        	                        if ( (LA324_1 == APPROXIMATE_NUM_LIT || LA324_1 == BINDVAR || ((LA324_1 >= CHAR_STRING) && (LA324_1 <= CHAR_STRING_PERL)) || LA324_1 == COLON || LA324_1 == DELIMITED_ID || LA324_1 == EXACT_NUM_LIT || LA324_1 == INTRODUCER || LA324_1 == LEFT_PAREN || LA324_1 == MINUS_SIGN || LA324_1 == NATIONAL_CHAR_STRING_LIT || ((LA324_1 >= PLSQL_NON_RESERVED_CAST) && (LA324_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA324_1 == PLUS_SIGN || LA324_1 == SQL92_RESERVED_ALL || LA324_1 == SQL92_RESERVED_ANY || LA324_1 == SQL92_RESERVED_CASE || LA324_1 == SQL92_RESERVED_DATE || LA324_1 == SQL92_RESERVED_DEFAULT || LA324_1 == SQL92_RESERVED_DISTINCT || ((LA324_1 >= SQL92_RESERVED_EXISTS) && (LA324_1 <= SQL92_RESERVED_FALSE)) || LA324_1 == SQL92_RESERVED_NULL || LA324_1 == SQL92_RESERVED_PRIOR || LA324_1 == SQL92_RESERVED_TRUE || LA324_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "VERSION")))
        	                        {
        	                            alt324=1;
        	                        }
        	                        else if ( (LA324_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "VERSION"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                        {
        	                            {
        	                                ANTLR_UINT32 LA324_4 = this->LA(3);
        	                                if ( ((toUpper(LT(1)->getText()) == "VERSION")))
        	                                {
        	                                    alt324=1;
        	                                }
        	                            }
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt324)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1243:17: xmlserialize_param_version_part
        	        	    {
        	        	        this->followPush(FOLLOW_xmlserialize_param_version_part_in_standard_function13780);
        	        	        xmlserialize_param_version_part1011=xmlserialize_param_version_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlserialize_param_version_part1011.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1244:17: ( xmlserialize_param_ident_part )?
        	        {
        	            ANTLR_UINT32 alt325=2;
        	            {
        	                ANTLR_UINT32 LA325_0 = this->LA(1);
        	                if ( (LA325_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA325_1 = this->LA(2);
        	                        if ( (LA325_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                        {
        	                            {
        	                                ANTLR_UINT32 LA325_3 = this->LA(3);
        	                                if ( ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                                {
        	                                    alt325=1;
        	                                }
        	                            }
        	                        }
        	                        else if ( (LA325_1 == RIGHT_PAREN || LA325_1 == SQL92_RESERVED_SIZE) && ((toUpper(LT(1)->getText()) == "INDENT")))
        	                        {
        	                            alt325=1;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt325)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1244:17: xmlserialize_param_ident_part
        	        	    {
        	        	        this->followPush(FOLLOW_xmlserialize_param_ident_part_in_standard_function13799);
        	        	        xmlserialize_param_ident_part1012=xmlserialize_param_ident_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlserialize_param_ident_part1012.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1245:17: ( ( hide_key | show_key ) defaults_key )?
        	        {
        	            ANTLR_UINT32 alt327=2;
        	            {
        	                ANTLR_UINT32 LA327_0 = this->LA(1);
        	                if ( (LA327_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW")))))
        	                {
        	                    alt327=1;
        	                }
        	            }
        	            switch (alt327)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1245:18: ( hide_key | show_key ) defaults_key
        	        	    {
        	        	        // OracleDML.g:1245:18: ( hide_key | show_key )
        	        	        {
        	        	            ANTLR_UINT32 alt326=2;
        	        	            {
        	        	                ANTLR_UINT32 LA326_0 = this->LA(1);
        	        	                if ( (LA326_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW")))))
        	        	                {
        	        	                    {
        	        	                        ANTLR_UINT32 LA326_1 = this->LA(2);
        	        	                        if ( ((toUpper(LT(1)->getText()) == "HIDE")))
        	        	                        {
        	        	                            alt326=1;
        	        	                        }
        	        	                        else if ( ((toUpper(LT(1)->getText()) == "SHOW")))
        	        	                        {
        	        	                            alt326=2;
        	        	                        }
        	        	                        else
        	        	                        {
        	        	                            if (this->get_backtracking()>0)
        	        	                            {
        	        	                                this->set_failedflag( true );
        	        	                                return retval;
        	        	                            }


        	        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                            ex->set_decisionNum( 326 );
        	        	                            ex->set_state( 1 );


        	        	                            goto rulestandard_functionEx;

        	        	                        }
        	        	                    }
        	        	                }
        	        	                else
        	        	                {
        	        	                    if (this->get_backtracking()>0)
        	        	                    {
        	        	                        this->set_failedflag( true );
        	        	                        return retval;
        	        	                    }


        	        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                    ex->set_decisionNum( 326 );
        	        	                    ex->set_state( 0 );


        	        	                    goto rulestandard_functionEx;

        	        	                }
        	        	            }
        	        	            switch (alt326)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1245:19: hide_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_hide_key_in_standard_function13820);
        	        	        	        hide_key1013=hide_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, hide_key1013.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1245:28: show_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_show_key_in_standard_function13822);
        	        	        	        show_key1014=show_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, show_key1014.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        this->followPush(FOLLOW_defaults_key_in_standard_function13825);
        	        	        defaults_key1015=defaults_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, defaults_key1015.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN1016 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13841);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN1016_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1016));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1016_tree);
        	        }


        	        // OracleDML.g:1247:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt328=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt328=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt328)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1247:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD1017 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13856);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD1017_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD1017));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD1017_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13858);
        	        	        general_element_part1018=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part1018.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 24:
        	    // OracleDML.g:1248:10: xmltable_key ^ LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmltable_key_in_standard_function13871);
        	        xmltable_key1019=xmltable_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmltable_key1019.tree, root_0);

        	        LEFT_PAREN1020 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13886);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN1020_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1020));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1020_tree);
        	        }


        	        // OracleDML.g:1250:17: ( xml_namespaces_clause )?
        	        {
        	            ANTLR_UINT32 alt329=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA329_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "XMLNAMESPACES")))
        	                		    {
        	                		        alt329=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt329)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1250:17: xml_namespaces_clause
        	        	    {
        	        	        this->followPush(FOLLOW_xml_namespaces_clause_in_standard_function13904);
        	        	        xml_namespaces_clause1021=xml_namespaces_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_namespaces_clause1021.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13923);
        	        concatenation_wrapper1022=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1022.tree);


        	        // OracleDML.g:1252:17: ( xml_passing_clause )?
        	        {
        	            ANTLR_UINT32 alt330=2;
        	            {
        	                ANTLR_UINT32 LA330_0 = this->LA(1);
        	                if ( (LA330_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "PASSING"))||((toUpper(LT(1)->getText()) == "COLUMNS")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA330_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "PASSING")))
        	                        {
        	                            alt330=1;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt330)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1252:17: xml_passing_clause
        	        	    {
        	        	        this->followPush(FOLLOW_xml_passing_clause_in_standard_function13941);
        	        	        xml_passing_clause1023=xml_passing_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_passing_clause1023.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1253:17: ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )?
        	        {
        	            ANTLR_UINT32 alt331=2;
        	            {
        	                ANTLR_UINT32 LA331_0 = this->LA(1);
        	                if ( (LA331_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "COLUMNS")))
        	                {
        	                    alt331=1;
        	                }
        	            }
        	            switch (alt331)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1253:18: columns_key ! xml_table_column ( COMMA ! xml_table_column )
        	        	    {
        	        	        this->followPush(FOLLOW_columns_key_in_standard_function13961);
        	        	        columns_key1024=columns_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_xml_table_column_in_standard_function13964);
        	        	        xml_table_column1025=xml_table_column();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_table_column1025.tree);


        	        	        // OracleDML.g:1253:48: ( COMMA ! xml_table_column )
        	        	        // OracleDML.g:1253:49: COMMA ! xml_table_column
        	        	        {
        	        	            COMMA1026 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13967);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }


        	        	            this->followPush(FOLLOW_xml_table_column_in_standard_function13970);
        	        	            xml_table_column1027=xml_table_column();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_table_column1027.tree);


        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN1028 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13987);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN1028_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1028));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1028_tree);
        	        }


        	        // OracleDML.g:1255:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt332=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt332=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt332)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1255:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD1029 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function14002);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD1029_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD1029));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD1029_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function14004);
        	        	        general_element_part1030=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part1030.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulestandard_functionEx; /* Prevent compiler warnings */
    rulestandard_functionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end standard_function */

/**
 * $ANTLR start stantard_function_enabling_over
 * OracleDML.g:1258:1: stantard_function_enabling_over :{...}? => REGULAR_ID -> FUNCTION_ENABLING_OVER[$REGULAR_ID] ;
 */
OracleDML::stantard_function_enabling_over_return
OracleDML::stantard_function_enabling_over()
{
    OracleDML::stantard_function_enabling_over_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* REGULAR_ID1031 = NULL;

    ImplTraits::TreeTypePtr REGULAR_ID1031_tree;
    RewriteRuleTokenStream<ImplTraits> stream_REGULAR_ID(get_psrstate()->get_treeAdaptor(), "token REGULAR_ID");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1259:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_OVER[$REGULAR_ID] )
        // OracleDML.g:1259:10: {...}? => REGULAR_ID
        {
            if ( !((enablesOverClause(LT(1)->getText()))) )
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "enablesOverClause(LT(1)->getText())" );
                    ex->set_ruleName( "stantard_function_enabling_over" );


            }

            REGULAR_ID1031 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_stantard_function_enabling_over14029);
            if  (this->hasException())
            {
                goto rulestantard_function_enabling_overEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_REGULAR_ID.add(REGULAR_ID1031);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1259:62: -> FUNCTION_ENABLING_OVER[$REGULAR_ID]
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(FUNCTION_ENABLING_OVER, REGULAR_ID1031));
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestantard_function_enabling_overEx; /* Prevent compiler warnings */
    rulestantard_function_enabling_overEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end stantard_function_enabling_over */

/**
 * $ANTLR start stantard_function_enabling_using
 * OracleDML.g:1262:1: stantard_function_enabling_using :{...}? => REGULAR_ID -> FUNCTION_ENABLING_USING[$REGULAR_ID] ;
 */
OracleDML::stantard_function_enabling_using_return
OracleDML::stantard_function_enabling_using()
{
    OracleDML::stantard_function_enabling_using_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* REGULAR_ID1032 = NULL;

    ImplTraits::TreeTypePtr REGULAR_ID1032_tree;
    RewriteRuleTokenStream<ImplTraits> stream_REGULAR_ID(get_psrstate()->get_treeAdaptor(), "token REGULAR_ID");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1263:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_USING[$REGULAR_ID] )
        // OracleDML.g:1263:10: {...}? => REGULAR_ID
        {
            if ( !((enablesUsingClause(LT(1)->getText()))) )
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "enablesUsingClause(LT(1)->getText())" );
                    ex->set_ruleName( "stantard_function_enabling_using" );


            }

            REGULAR_ID1032 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_stantard_function_enabling_using14057);
            if  (this->hasException())
            {
                goto rulestantard_function_enabling_usingEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_REGULAR_ID.add(REGULAR_ID1032);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1263:63: -> FUNCTION_ENABLING_USING[$REGULAR_ID]
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(FUNCTION_ENABLING_USING, REGULAR_ID1032));
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestantard_function_enabling_usingEx; /* Prevent compiler warnings */
    rulestantard_function_enabling_usingEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end stantard_function_enabling_using */

/**
 * $ANTLR start stantard_function_enabling_within_or_over
 * OracleDML.g:1266:1: stantard_function_enabling_within_or_over :{...}? => REGULAR_ID -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID] ;
 */
OracleDML::stantard_function_enabling_within_or_over_return
OracleDML::stantard_function_enabling_within_or_over()
{
    OracleDML::stantard_function_enabling_within_or_over_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* REGULAR_ID1033 = NULL;

    ImplTraits::TreeTypePtr REGULAR_ID1033_tree;
    RewriteRuleTokenStream<ImplTraits> stream_REGULAR_ID(get_psrstate()->get_treeAdaptor(), "token REGULAR_ID");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1267:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID] )
        // OracleDML.g:1267:10: {...}? => REGULAR_ID
        {
            if ( !((enablesWithinOrOverClause(LT(1)->getText()))) )
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "enablesWithinOrOverClause(LT(1)->getText())" );
                    ex->set_ruleName( "stantard_function_enabling_within_or_over" );


            }

            REGULAR_ID1033 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over14085);
            if  (this->hasException())
            {
                goto rulestantard_function_enabling_within_or_overEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_REGULAR_ID.add(REGULAR_ID1033);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1267:70: -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID]
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(FUNCTION_ENABLING_WITHIN_OR_OVER, REGULAR_ID1033));
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestantard_function_enabling_within_or_overEx; /* Prevent compiler warnings */
    rulestantard_function_enabling_within_or_overEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end stantard_function_enabling_within_or_over */

/**
 * $ANTLR start stantard_function_pedictions
 * OracleDML.g:1270:1: stantard_function_pedictions :{...}? => REGULAR_ID -> PREDICTION_FUNCTION[$REGULAR_ID] ;
 */
OracleDML::stantard_function_pedictions_return
OracleDML::stantard_function_pedictions()
{
    OracleDML::stantard_function_pedictions_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* REGULAR_ID1034 = NULL;

    ImplTraits::TreeTypePtr REGULAR_ID1034_tree;
    RewriteRuleTokenStream<ImplTraits> stream_REGULAR_ID(get_psrstate()->get_treeAdaptor(), "token REGULAR_ID");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1271:5: ({...}? => REGULAR_ID -> PREDICTION_FUNCTION[$REGULAR_ID] )
        // OracleDML.g:1271:10: {...}? => REGULAR_ID
        {
            if ( !((isStandardPredictionFunction(LT(1)->getText()))) )
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "isStandardPredictionFunction(LT(1)->getText())" );
                    ex->set_ruleName( "stantard_function_pedictions" );


            }

            REGULAR_ID1034 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_stantard_function_pedictions14113);
            if  (this->hasException())
            {
                goto rulestantard_function_pedictionsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_REGULAR_ID.add(REGULAR_ID1034);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1271:73: -> PREDICTION_FUNCTION[$REGULAR_ID]
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(PREDICTION_FUNCTION, REGULAR_ID1034));
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestantard_function_pedictionsEx; /* Prevent compiler warnings */
    rulestantard_function_pedictionsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end stantard_function_pedictions */

/**
 * $ANTLR start over_clause
 * OracleDML.g:1274:1: over_clause : over_key ^ LEFT_PAREN ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN ;
 */
OracleDML::over_clause_return
OracleDML::over_clause()
{
    OracleDML::over_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1036 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1040 = NULL;
    OracleDML_OracleDMLKeys::over_key_return over_key1035;
    ImplTraits::TreeTypePtr::pointer over_key1035_last = NULL;
    OracleDML::query_partition_clause_return query_partition_clause1037;
    ImplTraits::TreeTypePtr::pointer query_partition_clause1037_last = NULL;
    OracleDML::order_by_clause_return order_by_clause1038;
    ImplTraits::TreeTypePtr::pointer order_by_clause1038_last = NULL;
    OracleDML::windowing_clause_return windowing_clause1039;
    ImplTraits::TreeTypePtr::pointer windowing_clause1039_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1036_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1040_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1275:5: ( over_key ^ LEFT_PAREN ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN )
        // OracleDML.g:1275:10: over_key ^ LEFT_PAREN ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_over_key_in_over_clause14138);
            over_key1035=over_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleover_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(over_key1035.tree, root_0);

            LEFT_PAREN1036 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_over_clause14149);
            if  (this->hasException())
            {
                goto ruleover_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN1036_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1036));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1036_tree);
            }


            // OracleDML.g:1277:13: ( query_partition_clause )?
            {
                ANTLR_UINT32 alt334=2;
                {
                    ANTLR_UINT32 LA334_0 = this->LA(1);
                    if ( (LA334_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "PARTITION")))
                    {
                        alt334=1;
                    }
                }
                switch (alt334)
                {
            	case 1:
            	    // OracleDML.g:1277:13: query_partition_clause
            	    {
            	        this->followPush(FOLLOW_query_partition_clause_in_over_clause14163);
            	        query_partition_clause1037=query_partition_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleover_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, query_partition_clause1037.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:1278:13: ( order_by_clause ( windowing_clause )? )?
            {
                ANTLR_UINT32 alt336=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ORDER:
                    	{
                    		alt336=1;
                    	}
                        break;
                }

                switch (alt336)
                {
            	case 1:
            	    // OracleDML.g:1278:14: order_by_clause ( windowing_clause )?
            	    {
            	        this->followPush(FOLLOW_order_by_clause_in_over_clause14179);
            	        order_by_clause1038=order_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleover_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, order_by_clause1038.tree);


            	        // OracleDML.g:1278:30: ( windowing_clause )?
            	        {
            	            ANTLR_UINT32 alt335=2;
            	            {
            	                ANTLR_UINT32 LA335_0 = this->LA(1);
            	                if ( (LA335_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "RANGE"))||((toUpper(LT(1)->getText()) == "ROWS")))))
            	                {
            	                    alt335=1;
            	                }
            	            }
            	            switch (alt335)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1278:30: windowing_clause
            	        	    {
            	        	        this->followPush(FOLLOW_windowing_clause_in_over_clause14181);
            	        	        windowing_clause1039=windowing_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleover_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, windowing_clause1039.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            RIGHT_PAREN1040 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_over_clause14194);
            if  (this->hasException())
            {
                goto ruleover_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN1040_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1040));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1040_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleover_clauseEx; /* Prevent compiler warnings */
    ruleover_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end over_clause */

/**
 * $ANTLR start windowing_clause
 * OracleDML.g:1282:1: windowing_clause : windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements ) -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) ) -> ^( windowing_type ( windowing_elements )+ ) ;
 */
OracleDML::windowing_clause_return
OracleDML::windowing_clause()
{
    OracleDML::windowing_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::windowing_type_return windowing_type1041;
    ImplTraits::TreeTypePtr::pointer windowing_type1041_last = NULL;
    OracleDML_OracleDMLKeys::between_key_return between_key1042;
    ImplTraits::TreeTypePtr::pointer between_key1042_last = NULL;
    OracleDML::windowing_elements_return windowing_elements1043;
    ImplTraits::TreeTypePtr::pointer windowing_elements1043_last = NULL;
    OracleDML_OracleDMLKeys::and_key_return and_key1044;
    ImplTraits::TreeTypePtr::pointer and_key1044_last = NULL;
    OracleDML::windowing_elements_return windowing_elements1045;
    ImplTraits::TreeTypePtr::pointer windowing_elements1045_last = NULL;
    OracleDML::windowing_elements_return windowing_elements1046;
    ImplTraits::TreeTypePtr::pointer windowing_elements1046_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_windowing_type(get_psrstate()->get_treeAdaptor(), "rule windowing_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_between_key(get_psrstate()->get_treeAdaptor(), "rule between_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_and_key(get_psrstate()->get_treeAdaptor(), "rule and_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_windowing_elements(get_psrstate()->get_treeAdaptor(), "rule windowing_elements");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1284:5: ( windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements ) -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) ) -> ^( windowing_type ( windowing_elements )+ ) )
        // OracleDML.g:1284:10: windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements )
        {
            this->followPush(FOLLOW_windowing_type_in_windowing_clause14222);
            windowing_type1041=windowing_type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewindowing_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                windowing_type1041_last = windowing_type1041.tree.get();
                stream_windowing_type.add(windowing_type1041.tree);
            }

            // OracleDML.g:1285:5: ( between_key windowing_elements and_key windowing_elements | windowing_elements )
            {
                ANTLR_UINT32 alt337=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_BETWEEN:
                	{
                		alt337=1;
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case REGULAR_ID:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURRENT:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt337=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 337 );
                    ex->set_state( 0 );


                    goto rulewindowing_clauseEx;

                }

                switch (alt337)
                {
            	case 1:
            	    // OracleDML.g:1285:10: between_key windowing_elements and_key windowing_elements
            	    {
            	        this->followPush(FOLLOW_between_key_in_windowing_clause14233);
            	        between_key1042=between_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            between_key1042_last = between_key1042.tree.get();
            	            stream_between_key.add(between_key1042.tree);
            	        }

            	        this->followPush(FOLLOW_windowing_elements_in_windowing_clause14235);
            	        windowing_elements1043=windowing_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            windowing_elements1043_last = windowing_elements1043.tree.get();
            	            stream_windowing_elements.add(windowing_elements1043.tree);
            	        }

            	        this->followPush(FOLLOW_and_key_in_windowing_clause14237);
            	        and_key1044=and_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            and_key1044_last = and_key1044.tree.get();
            	            stream_and_key.add(and_key1044.tree);
            	        }

            	        this->followPush(FOLLOW_windowing_elements_in_windowing_clause14239);
            	        windowing_elements1045=windowing_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            windowing_elements1045_last = windowing_elements1045.tree.get();
            	            stream_windowing_elements.add(windowing_elements1045.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1286:10: windowing_elements
            	    {
            	        this->followPush(FOLLOW_windowing_elements_in_windowing_clause14252);
            	        windowing_elements1046=windowing_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            windowing_elements1046_last = windowing_elements1046.tree.get();
            	            stream_windowing_elements.add(windowing_elements1046.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: windowing_type, between_key, windowing_elements, windowing_elements, windowing_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1287:5: -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) )
            if (mode == 1) {
            	// OracleDML.g:1287:20: ^( windowing_type ^( between_key ( windowing_elements )+ ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_windowing_type.nextNode(), root_1);
            	// OracleDML.g:1287:37: ^( between_key ( windowing_elements )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_between_key.nextNode(), root_2);
            	if ( !(stream_windowing_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "windowing_elements empty" );
            		goto rulewindowing_clauseEx;
            	}
            	while ( stream_windowing_elements.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_windowing_elements.nextTree());
            	}
            	stream_windowing_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1288:5: -> ^( windowing_type ( windowing_elements )+ )
            {
            	// OracleDML.g:1288:8: ^( windowing_type ( windowing_elements )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_windowing_type.nextNode(), root_1);
            	if ( !(stream_windowing_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "windowing_elements empty" );
            		goto rulewindowing_clauseEx;
            	}
            	while ( stream_windowing_elements.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_windowing_elements.nextTree());
            	}
            	stream_windowing_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulewindowing_clauseEx; /* Prevent compiler warnings */
    rulewindowing_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end windowing_clause */

/**
 * $ANTLR start windowing_type
 * OracleDML.g:1291:1: windowing_type : ( rows_key | range_key );
 */
OracleDML::windowing_type_return
OracleDML::windowing_type()
{
    OracleDML::windowing_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::rows_key_return rows_key1047;
    ImplTraits::TreeTypePtr::pointer rows_key1047_last = NULL;
    OracleDML_OracleDMLKeys::range_key_return range_key1048;
    ImplTraits::TreeTypePtr::pointer range_key1048_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1292:5: ( rows_key | range_key )

            ANTLR_UINT32 alt338;

            alt338=2;

            {
                ANTLR_UINT32 LA338_0 = this->LA(1);
                if ( (LA338_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "RANGE"))||((toUpper(LT(1)->getText()) == "ROWS")))))
                {
                    {
                        ANTLR_UINT32 LA338_1 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "ROWS")))
                        {
                            alt338=1;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "RANGE")))
                        {
                            alt338=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 338 );
                            ex->set_state( 1 );


                            goto rulewindowing_typeEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 338 );
                    ex->set_state( 0 );


                    goto rulewindowing_typeEx;

                }
            }
            switch (alt338)
            {
        	case 1:
        	    // OracleDML.g:1292:10: rows_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_rows_key_in_windowing_type14311);
        	        rows_key1047=rows_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, rows_key1047.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1293:10: range_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_range_key_in_windowing_type14322);
        	        range_key1048=range_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, range_key1048.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulewindowing_typeEx; /* Prevent compiler warnings */
    rulewindowing_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end windowing_type */

/**
 * $ANTLR start windowing_elements
 * OracleDML.g:1296:1: windowing_elements : ( unbounded_key ^ preceding_key | current_key ^ row_key | concatenation_wrapper ( preceding_key ^| following_key ^) );
 */
OracleDML::windowing_elements_return
OracleDML::windowing_elements()
{
    OracleDML::windowing_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::unbounded_key_return unbounded_key1049;
    ImplTraits::TreeTypePtr::pointer unbounded_key1049_last = NULL;
    OracleDML_OracleDMLKeys::preceding_key_return preceding_key1050;
    ImplTraits::TreeTypePtr::pointer preceding_key1050_last = NULL;
    OracleDML_OracleDMLKeys::current_key_return current_key1051;
    ImplTraits::TreeTypePtr::pointer current_key1051_last = NULL;
    OracleDML_OracleDMLKeys::row_key_return row_key1052;
    ImplTraits::TreeTypePtr::pointer row_key1052_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1053;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1053_last = NULL;
    OracleDML_OracleDMLKeys::preceding_key_return preceding_key1054;
    ImplTraits::TreeTypePtr::pointer preceding_key1054_last = NULL;
    OracleDML_OracleDMLKeys::following_key_return following_key1055;
    ImplTraits::TreeTypePtr::pointer following_key1055_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1297:5: ( unbounded_key ^ preceding_key | current_key ^ row_key | concatenation_wrapper ( preceding_key ^| following_key ^) )

            ANTLR_UINT32 alt340;

            alt340=3;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA340_1 = this->LA(2);
            		    if ( (LA340_1 == REGULAR_ID))
            		    {
            		        {
            		            ANTLR_UINT32 LA340_4 = this->LA(3);
            		            if ( ((toUpper(LT(1)->getText()) == "UNBOUNDED")))
            		            {
            		                alt340=1;
            		            }
            		            else if ( (true))
            		            {
            		                alt340=3;
            		            }
            		            else
            		            {
            		                if (this->get_backtracking()>0)
            		                {
            		                    this->set_failedflag( true );
            		                    return retval;
            		                }


            		                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                ex->set_decisionNum( 340 );
            		                ex->set_state( 4 );


            		                goto rulewindowing_elementsEx;

            		            }
            		        }
            		    }
            		    else if ( (LA340_1 == MINUS_SIGN || LA340_1 == PLUS_SIGN))
            		    {
            		        alt340=3;
            		    }
            		    else if ( (LA340_1 == PLSQL_NON_RESERVED_CONNECT_BY_ROOT || LA340_1 == SQL92_RESERVED_ALL || LA340_1 == SQL92_RESERVED_DISTINCT || LA340_1 == SQL92_RESERVED_PRIOR) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt340=3;
            		    }
            		    else if ( (LA340_1 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "INTERVAL"))||(( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))))
            		    {
            		        alt340=3;
            		    }
            		    else if ( (LA340_1 == SQL92_RESERVED_CASE))
            		    {
            		        alt340=3;
            		    }
            		    else if ( (LA340_1 == PLSQL_NON_RESERVED_CAST || LA340_1 == SQL92_RESERVED_ANY || LA340_1 == SQL92_RESERVED_EXISTS) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt340=3;
            		    }
            		    else if ( (LA340_1 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "INTERVAL"))||(( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))))
            		    {
            		        alt340=3;
            		    }
            		    else if ( (LA340_1 == BINDVAR || LA340_1 == COLON))
            		    {
            		        alt340=3;
            		    }
            		    else if ( (LA340_1 == APPROXIMATE_NUM_LIT || LA340_1 == EXACT_NUM_LIT || LA340_1 == SQL92_RESERVED_DATE || LA340_1 == UNSIGNED_INTEGER) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt340=3;
            		    }
            		    else if ( (((LA340_1 >= CHAR_STRING) && (LA340_1 <= CHAR_STRING_PERL)) || LA340_1 == NATIONAL_CHAR_STRING_LIT))
            		    {
            		        alt340=3;
            		    }
            		    else if ( (LA340_1 == SQL92_RESERVED_DEFAULT || LA340_1 == SQL92_RESERVED_FALSE || LA340_1 == SQL92_RESERVED_NULL || LA340_1 == SQL92_RESERVED_TRUE) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt340=3;
            		    }
            		    else if ( (LA340_1 == ASTERISK || LA340_1 == CONCATENATION_OP || ((LA340_1 >= LEFT_BRACKET) && (LA340_1 <= LEFT_PAREN)) || LA340_1 == PERIOD || LA340_1 == PLSQL_NON_RESERVED_MULTISET || LA340_1 == SOLIDUS || LA340_1 == VERTICAL_BAR))
            		    {
            		        alt340=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 340 );
            		        ex->set_state( 1 );


            		        goto rulewindowing_elementsEx;

            		    }
            		}
            	}
                break;
            case SQL92_RESERVED_CURRENT:
            	{
            		alt340=2;
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt340=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 340 );
                ex->set_state( 0 );


                goto rulewindowing_elementsEx;

            }

            switch (alt340)
            {
        	case 1:
        	    // OracleDML.g:1297:10: unbounded_key ^ preceding_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_unbounded_key_in_windowing_elements14342);
        	        unbounded_key1049=unbounded_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(unbounded_key1049.tree, root_0);

        	        this->followPush(FOLLOW_preceding_key_in_windowing_elements14345);
        	        preceding_key1050=preceding_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, preceding_key1050.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1298:10: current_key ^ row_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_current_key_in_windowing_elements14356);
        	        current_key1051=current_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(current_key1051.tree, root_0);

        	        this->followPush(FOLLOW_row_key_in_windowing_elements14359);
        	        row_key1052=row_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, row_key1052.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:1299:10: concatenation_wrapper ( preceding_key ^| following_key ^)
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_concatenation_wrapper_in_windowing_elements14370);
        	        concatenation_wrapper1053=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1053.tree);


        	        // OracleDML.g:1299:32: ( preceding_key ^| following_key ^)
        	        {
        	            ANTLR_UINT32 alt339=2;
        	            {
        	                ANTLR_UINT32 LA339_0 = this->LA(1);
        	                if ( (LA339_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "FOLLOWING"))||((toUpper(LT(1)->getText()) == "PRECEDING")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA339_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "PRECEDING")))
        	                        {
        	                            alt339=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "FOLLOWING")))
        	                        {
        	                            alt339=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 339 );
        	                            ex->set_state( 1 );


        	                            goto rulewindowing_elementsEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 339 );
        	                    ex->set_state( 0 );


        	                    goto rulewindowing_elementsEx;

        	                }
        	            }
        	            switch (alt339)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1299:33: preceding_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_preceding_key_in_windowing_elements14373);
        	        	        preceding_key1054=preceding_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulewindowing_elementsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(preceding_key1054.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1299:48: following_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_following_key_in_windowing_elements14376);
        	        	        following_key1055=following_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulewindowing_elementsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(following_key1055.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulewindowing_elementsEx; /* Prevent compiler warnings */
    rulewindowing_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end windowing_elements */

/**
 * $ANTLR start using_clause
 * OracleDML.g:1302:1: using_clause : using_key ^ ( ASTERISK | using_element ( COMMA ! using_element )* ) ;
 */
OracleDML::using_clause_return
OracleDML::using_clause()
{
    OracleDML::using_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* ASTERISK1057 = NULL;
    ImplTraits::CommonTokenType const* COMMA1059 = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key1056;
    ImplTraits::TreeTypePtr::pointer using_key1056_last = NULL;
    OracleDML::using_element_return using_element1058;
    ImplTraits::TreeTypePtr::pointer using_element1058_last = NULL;
    OracleDML::using_element_return using_element1060;
    ImplTraits::TreeTypePtr::pointer using_element1060_last = NULL;
    ImplTraits::TreeTypePtr ASTERISK1057_tree;
    ImplTraits::TreeTypePtr COMMA1059_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1303:5: ( using_key ^ ( ASTERISK | using_element ( COMMA ! using_element )* ) )
        // OracleDML.g:1303:10: using_key ^ ( ASTERISK | using_element ( COMMA ! using_element )* )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_using_key_in_using_clause14398);
            using_key1056=using_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleusing_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(using_key1056.tree, root_0);

            // OracleDML.g:1304:5: ( ASTERISK | using_element ( COMMA ! using_element )* )
            {
                ANTLR_UINT32 alt342=2;
                switch ( this->LA(1) )
                {
                case ASTERISK:
                	{
                		alt342=1;
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case REGULAR_ID:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_IN:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt342=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 342 );
                    ex->set_state( 0 );


                    goto ruleusing_clauseEx;

                }

                switch (alt342)
                {
            	case 1:
            	    // OracleDML.g:1304:10: ASTERISK
            	    {
            	        ASTERISK1057 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_using_clause14410);
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        ASTERISK1057_tree = std::move(get_psrstate()->get_treeAdaptor()->create(ASTERISK1057));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, ASTERISK1057_tree);
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1305:10: using_element ( COMMA ! using_element )*
            	    {
            	        this->followPush(FOLLOW_using_element_in_using_clause14421);
            	        using_element1058=using_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, using_element1058.tree);


            	        // OracleDML.g:1305:24: ( COMMA ! using_element )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt341=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt341=1;
            	            	}
            	                break;

            	            }

            	            switch (alt341)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1305:25: COMMA ! using_element
            	        	    {
            	        	        COMMA1059 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_using_clause14424);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleusing_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	        this->followPush(FOLLOW_using_element_in_using_clause14427);
            	        	        using_element1060=using_element();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleusing_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, using_element1060.tree);


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop341;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop341: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleusing_clauseEx; /* Prevent compiler warnings */
    ruleusing_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end using_clause */

/**
 * $ANTLR start using_element
 * OracleDML.g:1309:1: using_element : ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )? -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? ) ;
 */
OracleDML::using_element_return
OracleDML::using_element()
{
    OracleDML::using_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::in_key_return in_key1061;
    ImplTraits::TreeTypePtr::pointer in_key1061_last = NULL;
    OracleDML_OracleDMLKeys::out_key_return out_key1062;
    ImplTraits::TreeTypePtr::pointer out_key1062_last = NULL;
    OracleDML_OracleDMLKeys::out_key_return out_key1063;
    ImplTraits::TreeTypePtr::pointer out_key1063_last = NULL;
    OracleDML::select_list_elements_return select_list_elements1064;
    ImplTraits::TreeTypePtr::pointer select_list_elements1064_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1065;
    ImplTraits::TreeTypePtr::pointer column_alias1065_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_out_key(get_psrstate()->get_treeAdaptor(), "rule out_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_list_elements(get_psrstate()->get_treeAdaptor(), "rule select_list_elements");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1310:5: ( ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )? -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? ) )
        // OracleDML.g:1310:10: ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )?
        {
            // OracleDML.g:1310:10: ( in_key ( out_key )? | out_key )?
            {
                ANTLR_UINT32 alt344=3;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_IN:
                    	{
                    		alt344=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA344_2 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "OUT")))
                    		    {
                    		        alt344=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt344)
                {
            	case 1:
            	    // OracleDML.g:1310:11: in_key ( out_key )?
            	    {
            	        this->followPush(FOLLOW_in_key_in_using_element14456);
            	        in_key1061=in_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            in_key1061_last = in_key1061.tree.get();
            	            stream_in_key.add(in_key1061.tree);
            	        }

            	        // OracleDML.g:1310:18: ( out_key )?
            	        {
            	            ANTLR_UINT32 alt343=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		{
            	                		    ANTLR_UINT32 LA343_1 = this->LA(2);
            	                		    if ( ((toUpper(LT(1)->getText()) == "OUT")))
            	                		    {
            	                		        alt343=1;
            	                		    }
            	                		}
            	                	}
            	                    break;
            	            }

            	            switch (alt343)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1310:18: out_key
            	        	    {
            	        	        this->followPush(FOLLOW_out_key_in_using_element14458);
            	        	        out_key1062=out_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleusing_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            out_key1062_last = out_key1062.tree.get();
            	        	            stream_out_key.add(out_key1062.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1310:27: out_key
            	    {
            	        this->followPush(FOLLOW_out_key_in_using_element14461);
            	        out_key1063=out_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            out_key1063_last = out_key1063.tree.get();
            	            stream_out_key.add(out_key1063.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_select_list_elements_in_using_element14465);
            select_list_elements1064=select_list_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleusing_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_list_elements1064_last = select_list_elements1064.tree.get();
                stream_select_list_elements.add(select_list_elements1064.tree);
            }

            // OracleDML.g:1310:58: ( column_alias )?
            {
                ANTLR_UINT32 alt345=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_AS:
                    	{
                    		alt345=1;
                    	}
                        break;
                    case INTRODUCER:
                    	{
                    		alt345=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		alt345=1;
                    	}
                        break;
                    case DELIMITED_ID:
                    	{
                    		alt345=1;
                    	}
                        break;
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		alt345=1;
                    	}
                        break;
                }

                switch (alt345)
                {
            	case 1:
            	    // OracleDML.g:1310:58: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_using_element14467);
            	        column_alias1065=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias1065_last = column_alias1065.tree.get();
            	            stream_column_alias.add(column_alias1065.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: select_list_elements, out_key, in_key, column_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1311:9: -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? )
            {
            	// OracleDML.g:1311:12: ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ELEMENT, "ELEMENT"), root_1);
            	// OracleDML.g:1311:22: ( in_key )?
            	if ( stream_in_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_in_key.nextTree());
            	}
            	stream_in_key.reset();

            	// OracleDML.g:1311:30: ( out_key )?
            	if ( stream_out_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_out_key.nextTree());
            	}
            	stream_out_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_list_elements.nextTree());
            	// OracleDML.g:1311:60: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleusing_elementEx; /* Prevent compiler warnings */
    ruleusing_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end using_element */

/**
 * $ANTLR start collect_order_by_part
 * OracleDML.g:1314:1: collect_order_by_part : order_key ^ by_key ! concatenation_wrapper ;
 */
OracleDML::collect_order_by_part_return
OracleDML::collect_order_by_part()
{
    OracleDML::collect_order_by_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::order_key_return order_key1066;
    ImplTraits::TreeTypePtr::pointer order_key1066_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key1067;
    ImplTraits::TreeTypePtr::pointer by_key1067_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1068;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1068_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1315:5: ( order_key ^ by_key ! concatenation_wrapper )
        // OracleDML.g:1315:10: order_key ^ by_key ! concatenation_wrapper
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_order_key_in_collect_order_by_part14513);
            order_key1066=order_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecollect_order_by_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(order_key1066.tree, root_0);

            this->followPush(FOLLOW_by_key_in_collect_order_by_part14516);
            by_key1067=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecollect_order_by_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_concatenation_wrapper_in_collect_order_by_part14519);
            concatenation_wrapper1068=concatenation_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecollect_order_by_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1068.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecollect_order_by_partEx; /* Prevent compiler warnings */
    rulecollect_order_by_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end collect_order_by_part */

/**
 * $ANTLR start within_or_over_part
 * OracleDML.g:1318:1: within_or_over_part : ( within_key ^ group_key ! LEFT_PAREN order_by_clause RIGHT_PAREN | over_clause );
 */
OracleDML::within_or_over_part_return
OracleDML::within_or_over_part()
{
    OracleDML::within_or_over_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1071 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1073 = NULL;
    OracleDML_OracleDMLKeys::within_key_return within_key1069;
    ImplTraits::TreeTypePtr::pointer within_key1069_last = NULL;
    OracleDML_OracleDMLKeys::group_key_return group_key1070;
    ImplTraits::TreeTypePtr::pointer group_key1070_last = NULL;
    OracleDML::order_by_clause_return order_by_clause1072;
    ImplTraits::TreeTypePtr::pointer order_by_clause1072_last = NULL;
    OracleDML::over_clause_return over_clause1074;
    ImplTraits::TreeTypePtr::pointer over_clause1074_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1071_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1073_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1319:5: ( within_key ^ group_key ! LEFT_PAREN order_by_clause RIGHT_PAREN | over_clause )

            ANTLR_UINT32 alt346;

            alt346=2;

            {
                ANTLR_UINT32 LA346_0 = this->LA(1);
                if ( (LA346_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "OVER"))||((toUpper(LT(1)->getText()) == "WITHIN")))))
                {
                    {
                        ANTLR_UINT32 LA346_1 = this->LA(2);
                        if ( (LA346_1 == SQL92_RESERVED_GROUP) && ((toUpper(LT(1)->getText()) == "WITHIN")))
                        {
                            alt346=1;
                        }
                        else if ( (LA346_1 == LEFT_PAREN) && ((toUpper(LT(1)->getText()) == "OVER")))
                        {
                            alt346=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 346 );
                            ex->set_state( 1 );


                            goto rulewithin_or_over_partEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 346 );
                    ex->set_state( 0 );


                    goto rulewithin_or_over_partEx;

                }
            }
            switch (alt346)
            {
        	case 1:
        	    // OracleDML.g:1319:10: within_key ^ group_key ! LEFT_PAREN order_by_clause RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_within_key_in_within_or_over_part14539);
        	        within_key1069=within_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(within_key1069.tree, root_0);

        	        this->followPush(FOLLOW_group_key_in_within_or_over_part14542);
        	        group_key1070=group_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        LEFT_PAREN1071 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_within_or_over_part14545);
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN1071_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1071));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1071_tree);
        	        }


        	        this->followPush(FOLLOW_order_by_clause_in_within_or_over_part14547);
        	        order_by_clause1072=order_by_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, order_by_clause1072.tree);


        	        RIGHT_PAREN1073 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_within_or_over_part14549);
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN1073_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1073));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1073_tree);
        	        }


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1320:10: over_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_over_clause_in_within_or_over_part14560);
        	        over_clause1074=over_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, over_clause1074.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulewithin_or_over_partEx; /* Prevent compiler warnings */
    rulewithin_or_over_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end within_or_over_part */

/**
 * $ANTLR start cost_matrix_clause
 * OracleDML.g:1323:1: cost_matrix_clause : cost_key ^ ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list ) ;
 */
OracleDML::cost_matrix_clause_return
OracleDML::cost_matrix_clause()
{
    OracleDML::cost_matrix_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1078 = NULL;
    ImplTraits::CommonTokenType const* COMMA1080 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1082 = NULL;
    OracleDML_OracleDMLKeys::cost_key_return cost_key1075;
    ImplTraits::TreeTypePtr::pointer cost_key1075_last = NULL;
    OracleDML_OracleDMLKeys::model_key_return model_key1076;
    ImplTraits::TreeTypePtr::pointer model_key1076_last = NULL;
    OracleDML_OracleDMLKeys::auto_key_return auto_key1077;
    ImplTraits::TreeTypePtr::pointer auto_key1077_last = NULL;
    OracleDML_OracleDMLCommons::cost_class_name_return cost_class_name1079;
    ImplTraits::TreeTypePtr::pointer cost_class_name1079_last = NULL;
    OracleDML_OracleDMLCommons::cost_class_name_return cost_class_name1081;
    ImplTraits::TreeTypePtr::pointer cost_class_name1081_last = NULL;
    OracleDML_OracleDMLKeys::values_key_return values_key1083;
    ImplTraits::TreeTypePtr::pointer values_key1083_last = NULL;
    OracleDML::expression_list_return expression_list1084;
    ImplTraits::TreeTypePtr::pointer expression_list1084_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1078_tree;
    ImplTraits::TreeTypePtr COMMA1080_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1082_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1324:5: ( cost_key ^ ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list ) )
        // OracleDML.g:1324:10: cost_key ^ ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_cost_key_in_cost_matrix_clause14580);
            cost_key1075=cost_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecost_matrix_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(cost_key1075.tree, root_0);

            // OracleDML.g:1325:5: ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list )
            {
                ANTLR_UINT32 alt349=2;
                switch ( this->LA(1) )
                {
                case PLSQL_NON_RESERVED_MODEL:
                	{
                		alt349=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt349=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 349 );
                    ex->set_state( 0 );


                    goto rulecost_matrix_clauseEx;

                }

                switch (alt349)
                {
            	case 1:
            	    // OracleDML.g:1325:10: model_key ( auto_key )?
            	    {
            	        this->followPush(FOLLOW_model_key_in_cost_matrix_clause14592);
            	        model_key1076=model_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, model_key1076.tree);


            	        // OracleDML.g:1325:20: ( auto_key )?
            	        {
            	            ANTLR_UINT32 alt347=2;
            	            {
            	                ANTLR_UINT32 LA347_0 = this->LA(1);
            	                if ( (LA347_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "AUTO")))
            	                {
            	                    alt347=1;
            	                }
            	            }
            	            switch (alt347)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1325:20: auto_key
            	        	    {
            	        	        this->followPush(FOLLOW_auto_key_in_cost_matrix_clause14594);
            	        	        auto_key1077=auto_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecost_matrix_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, auto_key1077.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1326:10: LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list
            	    {
            	        LEFT_PAREN1078 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_cost_matrix_clause14606);
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        LEFT_PAREN1078_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1078));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1078_tree);
            	        }


            	        this->followPush(FOLLOW_cost_class_name_in_cost_matrix_clause14608);
            	        cost_class_name1079=cost_class_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cost_class_name1079.tree);


            	        // OracleDML.g:1326:37: ( COMMA ! cost_class_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt348=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt348=1;
            	            	}
            	                break;

            	            }

            	            switch (alt348)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1326:38: COMMA ! cost_class_name
            	        	    {
            	        	        COMMA1080 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_cost_matrix_clause14611);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecost_matrix_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	        this->followPush(FOLLOW_cost_class_name_in_cost_matrix_clause14614);
            	        	        cost_class_name1081=cost_class_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecost_matrix_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cost_class_name1081.tree);


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop348;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop348: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN1082 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14618);
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        RIGHT_PAREN1082_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1082));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1082_tree);
            	        }


            	        this->followPush(FOLLOW_values_key_in_cost_matrix_clause14620);
            	        values_key1083=values_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_expression_list_in_cost_matrix_clause14636);
            	        expression_list1084=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_list1084.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecost_matrix_clauseEx; /* Prevent compiler warnings */
    rulecost_matrix_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cost_matrix_clause */

/**
 * $ANTLR start xml_passing_clause
 * OracleDML.g:1331:1: xml_passing_clause : passing_key ^ ( by_key ! value_key )? expression_wrapper ( column_alias )? ( COMMA ! expression_wrapper ( column_alias )? ) ;
 */
OracleDML::xml_passing_clause_return
OracleDML::xml_passing_clause()
{
    OracleDML::xml_passing_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA1090 = NULL;
    OracleDML_OracleDMLKeys::passing_key_return passing_key1085;
    ImplTraits::TreeTypePtr::pointer passing_key1085_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key1086;
    ImplTraits::TreeTypePtr::pointer by_key1086_last = NULL;
    OracleDML_OracleDMLKeys::value_key_return value_key1087;
    ImplTraits::TreeTypePtr::pointer value_key1087_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper1088;
    ImplTraits::TreeTypePtr::pointer expression_wrapper1088_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1089;
    ImplTraits::TreeTypePtr::pointer column_alias1089_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper1091;
    ImplTraits::TreeTypePtr::pointer expression_wrapper1091_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1092;
    ImplTraits::TreeTypePtr::pointer column_alias1092_last = NULL;
    ImplTraits::TreeTypePtr COMMA1090_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1332:5: ( passing_key ^ ( by_key ! value_key )? expression_wrapper ( column_alias )? ( COMMA ! expression_wrapper ( column_alias )? ) )
        // OracleDML.g:1332:10: passing_key ^ ( by_key ! value_key )? expression_wrapper ( column_alias )? ( COMMA ! expression_wrapper ( column_alias )? )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_passing_key_in_xml_passing_clause14662);
            passing_key1085=passing_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_passing_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(passing_key1085.tree, root_0);

            // OracleDML.g:1332:23: ( by_key ! value_key )?
            {
                ANTLR_UINT32 alt350=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_BY:
                    	{
                    		alt350=1;
                    	}
                        break;
                }

                switch (alt350)
                {
            	case 1:
            	    // OracleDML.g:1332:24: by_key ! value_key
            	    {
            	        this->followPush(FOLLOW_by_key_in_xml_passing_clause14666);
            	        by_key1086=by_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_passing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_value_key_in_xml_passing_clause14669);
            	        value_key1087=value_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_passing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, value_key1087.tree);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_expression_wrapper_in_xml_passing_clause14685);
            expression_wrapper1088=expression_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_passing_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper1088.tree);


            // OracleDML.g:1333:32: ( column_alias )?
            {
                ANTLR_UINT32 alt351=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt351=1;
                    	}
                        break;
                }

                switch (alt351)
                {
            	case 1:
            	    // OracleDML.g:1333:32: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_xml_passing_clause14687);
            	        column_alias1089=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_passing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias1089.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:1333:46: ( COMMA ! expression_wrapper ( column_alias )? )
            // OracleDML.g:1333:47: COMMA ! expression_wrapper ( column_alias )?
            {
                COMMA1090 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_xml_passing_clause14691);
                if  (this->hasException())
                {
                    goto rulexml_passing_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }


                this->followPush(FOLLOW_expression_wrapper_in_xml_passing_clause14694);
                expression_wrapper1091=expression_wrapper();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulexml_passing_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper1091.tree);


                // OracleDML.g:1333:73: ( column_alias )?
                {
                    ANTLR_UINT32 alt352=2;
                    switch ( this->LA(1) )
                    {
                        case CHAR_STRING:
                        case CHAR_STRING_PERL:
                        case DELIMITED_ID:
                        case INTRODUCER:
                        case NATIONAL_CHAR_STRING_LIT:
                        case SQL92_RESERVED_AS:
                        	{
                        		alt352=1;
                        	}
                            break;
                        case REGULAR_ID:
                        	{
                        		{
                        		    ANTLR_UINT32 LA352_3 = this->LA(2);
                        		    if ( (!( ((((toUpper(LT(1)->getText()) == "RETURNING"))||((toUpper(LT(1)->getText()) == "COLUMNS")))) )))
                        		    {
                        		        alt352=1;
                        		    }
                        		}
                        	}
                            break;
                    }

                    switch (alt352)
                    {
                	case 1:
                	    // OracleDML.g:1333:73: column_alias
                	    {
                	        this->followPush(FOLLOW_column_alias_in_xml_passing_clause14696);
                	        column_alias1092=column_alias();

                	        this->followPop();
                	        if  (this->hasException())
                	        {
                	            goto rulexml_passing_clauseEx;
                	        }
                	        if (this->hasFailed())
                	        {
                	            return retval;
                	        }

                	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias1092.tree);


                	    }
                	    break;

                    }
                }

            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_passing_clauseEx; /* Prevent compiler warnings */
    rulexml_passing_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_passing_clause */

/**
 * $ANTLR start xml_attributes_clause
 * OracleDML.g:1336:1: xml_attributes_clause : xmlattributes_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ;
 */
OracleDML::xml_attributes_clause_return
OracleDML::xml_attributes_clause()
{
    OracleDML::xml_attributes_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1094 = NULL;
    ImplTraits::CommonTokenType const* COMMA1100 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1102 = NULL;
    OracleDML_OracleDMLKeys::xmlattributes_key_return xmlattributes_key1093;
    ImplTraits::TreeTypePtr::pointer xmlattributes_key1093_last = NULL;
    OracleDML_OracleDMLKeys::entityescaping_key_return entityescaping_key1095;
    ImplTraits::TreeTypePtr::pointer entityescaping_key1095_last = NULL;
    OracleDML_OracleDMLKeys::noentityescaping_key_return noentityescaping_key1096;
    ImplTraits::TreeTypePtr::pointer noentityescaping_key1096_last = NULL;
    OracleDML_OracleDMLKeys::schemacheck_key_return schemacheck_key1097;
    ImplTraits::TreeTypePtr::pointer schemacheck_key1097_last = NULL;
    OracleDML_OracleDMLKeys::noschemacheck_key_return noschemacheck_key1098;
    ImplTraits::TreeTypePtr::pointer noschemacheck_key1098_last = NULL;
    OracleDML::xml_multiuse_expression_element_return xml_multiuse_expression_element1099;
    ImplTraits::TreeTypePtr::pointer xml_multiuse_expression_element1099_last = NULL;
    OracleDML::xml_multiuse_expression_element_return xml_multiuse_expression_element1101;
    ImplTraits::TreeTypePtr::pointer xml_multiuse_expression_element1101_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1094_tree;
    ImplTraits::TreeTypePtr COMMA1100_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1102_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1337:5: ( xmlattributes_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN )
        // OracleDML.g:1337:10: xmlattributes_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_xmlattributes_key_in_xml_attributes_clause14718);
            xmlattributes_key1093=xmlattributes_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_attributes_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlattributes_key1093.tree, root_0);

            LEFT_PAREN1094 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_xml_attributes_clause14729);
            if  (this->hasException())
            {
                goto rulexml_attributes_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN1094_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1094));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1094_tree);
            }


            // OracleDML.g:1339:13: ( entityescaping_key | noentityescaping_key )?
            {
                ANTLR_UINT32 alt353=3;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA353_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "ENTITYESCAPING")))
                    		    {
                    		        alt353=1;
                    		    }
                    		    else if ( ((toUpper(LT(1)->getText()) == "NOENTITYESCAPING")))
                    		    {
                    		        alt353=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt353)
                {
            	case 1:
            	    // OracleDML.g:1339:14: entityescaping_key
            	    {
            	        this->followPush(FOLLOW_entityescaping_key_in_xml_attributes_clause14744);
            	        entityescaping_key1095=entityescaping_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, entityescaping_key1095.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1339:33: noentityescaping_key
            	    {
            	        this->followPush(FOLLOW_noentityescaping_key_in_xml_attributes_clause14746);
            	        noentityescaping_key1096=noentityescaping_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, noentityescaping_key1096.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:1340:13: ( schemacheck_key | noschemacheck_key )?
            {
                ANTLR_UINT32 alt354=3;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA354_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "SCHEMACHECK")))
                    		    {
                    		        alt354=1;
                    		    }
                    		    else if ( ((toUpper(LT(1)->getText()) == "NOSCHEMACHECK")))
                    		    {
                    		        alt354=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt354)
                {
            	case 1:
            	    // OracleDML.g:1340:14: schemacheck_key
            	    {
            	        this->followPush(FOLLOW_schemacheck_key_in_xml_attributes_clause14763);
            	        schemacheck_key1097=schemacheck_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, schemacheck_key1097.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1340:30: noschemacheck_key
            	    {
            	        this->followPush(FOLLOW_noschemacheck_key_in_xml_attributes_clause14765);
            	        noschemacheck_key1098=noschemacheck_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, noschemacheck_key1098.tree);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14781);
            xml_multiuse_expression_element1099=xml_multiuse_expression_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_attributes_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_multiuse_expression_element1099.tree);


            // OracleDML.g:1341:45: ( COMMA ! xml_multiuse_expression_element )*

            for (;;)
            {
                ANTLR_UINT32 alt355=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt355=1;
                	}
                    break;

                }

                switch (alt355)
                {
            	case 1:
            	    // OracleDML.g:1341:46: COMMA ! xml_multiuse_expression_element
            	    {
            	        COMMA1100 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_xml_attributes_clause14784);
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14787);
            	        xml_multiuse_expression_element1101=xml_multiuse_expression_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_multiuse_expression_element1101.tree);


            	    }
            	    break;

            	default:
            	    goto loop355;	/* break out of the loop */
            	    break;
                }
            }
            loop355: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN1102 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14799);
            if  (this->hasException())
            {
                goto rulexml_attributes_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN1102_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1102));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1102_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_attributes_clauseEx; /* Prevent compiler warnings */
    rulexml_attributes_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_attributes_clause */

/**
 * $ANTLR start xml_namespaces_clause
 * OracleDML.g:1345:1: xml_namespaces_clause : xmlnamespaces_key ^ LEFT_PAREN ( concatenation_wrapper column_alias )? ( COMMA ! concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN ;
 */
OracleDML::xml_namespaces_clause_return
OracleDML::xml_namespaces_clause()
{
    OracleDML::xml_namespaces_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1104 = NULL;
    ImplTraits::CommonTokenType const* COMMA1107 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1111 = NULL;
    OracleDML_OracleDMLKeys::xmlnamespaces_key_return xmlnamespaces_key1103;
    ImplTraits::TreeTypePtr::pointer xmlnamespaces_key1103_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1105;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1105_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1106;
    ImplTraits::TreeTypePtr::pointer column_alias1106_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1108;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1108_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1109;
    ImplTraits::TreeTypePtr::pointer column_alias1109_last = NULL;
    OracleDML::xml_general_default_part_return xml_general_default_part1110;
    ImplTraits::TreeTypePtr::pointer xml_general_default_part1110_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1104_tree;
    ImplTraits::TreeTypePtr COMMA1107_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1111_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1346:5: ( xmlnamespaces_key ^ LEFT_PAREN ( concatenation_wrapper column_alias )? ( COMMA ! concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN )
        // OracleDML.g:1346:10: xmlnamespaces_key ^ LEFT_PAREN ( concatenation_wrapper column_alias )? ( COMMA ! concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14819);
            xmlnamespaces_key1103=xmlnamespaces_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_namespaces_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlnamespaces_key1103.tree, root_0);

            LEFT_PAREN1104 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14830);
            if  (this->hasException())
            {
                goto rulexml_namespaces_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN1104_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1104));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1104_tree);
            }


            // OracleDML.g:1348:13: ( concatenation_wrapper column_alias )?
            {
                ANTLR_UINT32 alt356=2;
                switch ( this->LA(1) )
                {
                    case APPROXIMATE_NUM_LIT:
                    case BINDVAR:
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case COLON:
                    case DELIMITED_ID:
                    case EXACT_NUM_LIT:
                    case INTRODUCER:
                    case LEFT_PAREN:
                    case MINUS_SIGN:
                    case NATIONAL_CHAR_STRING_LIT:
                    case PLSQL_NON_RESERVED_CAST:
                    case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                    case PLUS_SIGN:
                    case REGULAR_ID:
                    case SQL92_RESERVED_ALL:
                    case SQL92_RESERVED_ANY:
                    case SQL92_RESERVED_CASE:
                    case SQL92_RESERVED_DATE:
                    case SQL92_RESERVED_DISTINCT:
                    case SQL92_RESERVED_EXISTS:
                    case SQL92_RESERVED_FALSE:
                    case SQL92_RESERVED_NULL:
                    case SQL92_RESERVED_PRIOR:
                    case SQL92_RESERVED_TRUE:
                    case UNSIGNED_INTEGER:
                    	{
                    		alt356=1;
                    	}
                        break;
                    case SQL92_RESERVED_DEFAULT:
                    	{
                    		alt356=1;
                    	}
                        break;
                }

                switch (alt356)
                {
            	case 1:
            	    // OracleDML.g:1348:14: concatenation_wrapper column_alias
            	    {
            	        this->followPush(FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14845);
            	        concatenation_wrapper1105=concatenation_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1105.tree);


            	        this->followPush(FOLLOW_column_alias_in_xml_namespaces_clause14847);
            	        column_alias1106=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias1106.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:1349:17: ( COMMA ! concatenation_wrapper column_alias )*

            for (;;)
            {
                ANTLR_UINT32 alt357=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt357=1;
                	}
                    break;

                }

                switch (alt357)
                {
            	case 1:
            	    // OracleDML.g:1349:18: COMMA ! concatenation_wrapper column_alias
            	    {
            	        COMMA1107 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_xml_namespaces_clause14868);
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14871);
            	        concatenation_wrapper1108=concatenation_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1108.tree);


            	        this->followPush(FOLLOW_column_alias_in_xml_namespaces_clause14873);
            	        column_alias1109=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias1109.tree);


            	    }
            	    break;

            	default:
            	    goto loop357;	/* break out of the loop */
            	    break;
                }
            }
            loop357: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:1350:13: ( ( default_key )=> xml_general_default_part )?
            {
                ANTLR_UINT32 alt358=2;
                {
                    ANTLR_UINT32 LA358_0 = this->LA(1);
                    if ( (LA358_0 == SQL92_RESERVED_DEFAULT) && (this->msynpred( antlr3::ClassForwarder<synpred53_OracleDML>() )))
                    {
                        alt358=1;
                    }
                }
                switch (alt358)
                {
            	case 1:
            	    // OracleDML.g:1350:14: ( default_key )=> xml_general_default_part
            	    {
            	        this->followPush(FOLLOW_xml_general_default_part_in_xml_namespaces_clause14895);
            	        xml_general_default_part1110=xml_general_default_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_general_default_part1110.tree);


            	    }
            	    break;

                }
            }

            RIGHT_PAREN1111 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause14907);
            if  (this->hasException())
            {
                goto rulexml_namespaces_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN1111_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1111));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1111_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_namespaces_clauseEx; /* Prevent compiler warnings */
    rulexml_namespaces_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_namespaces_clause */

/**
 * $ANTLR start xml_table_column
 * OracleDML.g:1354:1: xml_table_column : xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? ) -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? ) ;
 */
OracleDML::xml_table_column_return
OracleDML::xml_table_column()
{
    OracleDML::xml_table_column_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLCommons::xml_column_name_return xml_column_name1112;
    ImplTraits::TreeTypePtr::pointer xml_column_name1112_last = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key1113;
    ImplTraits::TreeTypePtr::pointer for_key1113_last = NULL;
    OracleDML_OracleDMLKeys::ordinality_key_return ordinality_key1114;
    ImplTraits::TreeTypePtr::pointer ordinality_key1114_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec1115;
    ImplTraits::TreeTypePtr::pointer type_spec1115_last = NULL;
    OracleDML_OracleDMLKeys::path_key_return path_key1116;
    ImplTraits::TreeTypePtr::pointer path_key1116_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1117;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1117_last = NULL;
    OracleDML::xml_general_default_part_return xml_general_default_part1118;
    ImplTraits::TreeTypePtr::pointer xml_general_default_part1118_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_type_spec(get_psrstate()->get_treeAdaptor(), "rule type_spec");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation_wrapper(get_psrstate()->get_treeAdaptor(), "rule concatenation_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_xml_column_name(get_psrstate()->get_treeAdaptor(), "rule xml_column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_path_key(get_psrstate()->get_treeAdaptor(), "rule path_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_ordinality_key(get_psrstate()->get_treeAdaptor(), "rule ordinality_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_xml_general_default_part(get_psrstate()->get_treeAdaptor(), "rule xml_general_default_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1355:5: ( xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? ) -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? ) )
        // OracleDML.g:1355:10: xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? )
        {
            this->followPush(FOLLOW_xml_column_name_in_xml_table_column14927);
            xml_column_name1112=xml_column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_table_columnEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                xml_column_name1112_last = xml_column_name1112.tree.get();
                stream_xml_column_name.add(xml_column_name1112.tree);
            }

            // OracleDML.g:1356:5: ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? )
            {
                ANTLR_UINT32 alt361=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_FOR:
                	{
                		alt361=1;
                	}
                    break;
                case DELIMITED_ID:
                case REGULAR_ID:
                case SQL92_RESERVED_DATE:
                	{
                		alt361=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 361 );
                    ex->set_state( 0 );


                    goto rulexml_table_columnEx;

                }

                switch (alt361)
                {
            	case 1:
            	    // OracleDML.g:1356:10: for_key ordinality_key
            	    {
            	        this->followPush(FOLLOW_for_key_in_xml_table_column14938);
            	        for_key1113=for_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_table_columnEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_key1113_last = for_key1113.tree.get();
            	            stream_for_key.add(for_key1113.tree);
            	        }

            	        this->followPush(FOLLOW_ordinality_key_in_xml_table_column14940);
            	        ordinality_key1114=ordinality_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_table_columnEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            ordinality_key1114_last = ordinality_key1114.tree.get();
            	            stream_ordinality_key.add(ordinality_key1114.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1357:10: type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )?
            	    {
            	        this->followPush(FOLLOW_type_spec_in_xml_table_column14951);
            	        type_spec1115=type_spec();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_table_columnEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            type_spec1115_last = type_spec1115.tree.get();
            	            stream_type_spec.add(type_spec1115.tree);
            	        }

            	        // OracleDML.g:1357:20: ( path_key concatenation_wrapper )?
            	        {
            	            ANTLR_UINT32 alt359=2;
            	            {
            	                ANTLR_UINT32 LA359_0 = this->LA(1);
            	                if ( (LA359_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "PATH")))
            	                {
            	                    alt359=1;
            	                }
            	            }
            	            switch (alt359)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1357:21: path_key concatenation_wrapper
            	        	    {
            	        	        this->followPush(FOLLOW_path_key_in_xml_table_column14954);
            	        	        path_key1116=path_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_table_columnEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            path_key1116_last = path_key1116.tree.get();
            	        	            stream_path_key.add(path_key1116.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_concatenation_wrapper_in_xml_table_column14956);
            	        	        concatenation_wrapper1117=concatenation_wrapper();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_table_columnEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            concatenation_wrapper1117_last = concatenation_wrapper1117.tree.get();
            	        	            stream_concatenation_wrapper.add(concatenation_wrapper1117.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:1357:54: ( ( default_key )=> xml_general_default_part )?
            	        {
            	            ANTLR_UINT32 alt360=2;
            	            {
            	                ANTLR_UINT32 LA360_0 = this->LA(1);
            	                if ( (LA360_0 == SQL92_RESERVED_DEFAULT) && (this->msynpred( antlr3::ClassForwarder<synpred54_OracleDML>() )))
            	                {
            	                    alt360=1;
            	                }
            	            }
            	            switch (alt360)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1357:55: ( default_key )=> xml_general_default_part
            	        	    {
            	        	        this->followPush(FOLLOW_xml_general_default_part_in_xml_table_column14966);
            	        	        xml_general_default_part1118=xml_general_default_part();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_table_columnEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            xml_general_default_part1118_last = xml_general_default_part1118.tree.get();
            	        	            stream_xml_general_default_part.add(xml_general_default_part1118.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: concatenation_wrapper, xml_general_default_part, type_spec, xml_column_name, ordinality_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1359:9: -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? )
            {
            	// OracleDML.g:1359:12: ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_COLUMN, "XML_COLUMN"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_xml_column_name.nextTree());
            	// OracleDML.g:1359:41: ( ordinality_key )?
            	if ( stream_ordinality_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_ordinality_key.nextTree());
            	}
            	stream_ordinality_key.reset();

            	// OracleDML.g:1359:57: ( type_spec )?
            	if ( stream_type_spec.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_type_spec.nextTree());
            	}
            	stream_type_spec.reset();

            	// OracleDML.g:1359:68: ( concatenation_wrapper )?
            	if ( stream_concatenation_wrapper.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation_wrapper.nextTree());
            	}
            	stream_concatenation_wrapper.reset();

            	// OracleDML.g:1359:91: ( xml_general_default_part )?
            	if ( stream_xml_general_default_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_xml_general_default_part.nextTree());
            	}
            	stream_xml_general_default_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_table_columnEx; /* Prevent compiler warnings */
    rulexml_table_columnEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_table_column */

/**
 * $ANTLR start xml_general_default_part
 * OracleDML.g:1362:1: xml_general_default_part : default_key ^ concatenation_wrapper ;
 */
OracleDML::xml_general_default_part_return
OracleDML::xml_general_default_part()
{
    OracleDML::xml_general_default_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::default_key_return default_key1119;
    ImplTraits::TreeTypePtr::pointer default_key1119_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1120;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1120_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1363:5: ( default_key ^ concatenation_wrapper )
        // OracleDML.g:1363:10: default_key ^ concatenation_wrapper
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_default_key_in_xml_general_default_part15022);
            default_key1119=default_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_general_default_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(default_key1119.tree, root_0);

            this->followPush(FOLLOW_concatenation_wrapper_in_xml_general_default_part15025);
            concatenation_wrapper1120=concatenation_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_general_default_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1120.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_general_default_partEx; /* Prevent compiler warnings */
    rulexml_general_default_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_general_default_part */

/**
 * $ANTLR start xml_multiuse_expression_element
 * OracleDML.g:1366:1: xml_multiuse_expression_element : expression ( as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation ) )? -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) ) -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) ) -> ^( XML_ELEMENT ^( EXPR expression ) ) ;
 */
OracleDML::xml_multiuse_expression_element_return
OracleDML::xml_multiuse_expression_element()
{
    OracleDML::xml_multiuse_expression_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression1121;
    ImplTraits::TreeTypePtr::pointer expression1121_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key1122;
    ImplTraits::TreeTypePtr::pointer as_key1122_last = NULL;
    OracleDML_OracleDMLCommons::id_expression_return id_expression1123;
    ImplTraits::TreeTypePtr::pointer id_expression1123_last = NULL;
    OracleDML_OracleDMLKeys::evalname_key_return evalname_key1124;
    ImplTraits::TreeTypePtr::pointer evalname_key1124_last = NULL;
    OracleDML::concatenation_return concatenation1125;
    ImplTraits::TreeTypePtr::pointer concatenation1125_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_evalname_key(get_psrstate()->get_treeAdaptor(), "rule evalname_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_id_expression(get_psrstate()->get_treeAdaptor(), "rule id_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_as_key(get_psrstate()->get_treeAdaptor(), "rule as_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1368:5: ( expression ( as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation ) )? -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) ) -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) ) -> ^( XML_ELEMENT ^( EXPR expression ) ) )
        // OracleDML.g:1368:10: expression ( as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation ) )?
        {
            this->followPush(FOLLOW_expression_in_xml_multiuse_expression_element15053);
            expression1121=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_multiuse_expression_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression1121_last = expression1121.tree.get();
                stream_expression.add(expression1121.tree);
            }

            // OracleDML.g:1368:21: ( as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation ) )?
            {
                ANTLR_UINT32 alt363=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_AS:
                    	{
                    		alt363=1;
                    	}
                        break;
                }

                switch (alt363)
                {
            	case 1:
            	    // OracleDML.g:1368:22: as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation )
            	    {
            	        this->followPush(FOLLOW_as_key_in_xml_multiuse_expression_element15056);
            	        as_key1122=as_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_multiuse_expression_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            as_key1122_last = as_key1122.tree.get();
            	            stream_as_key.add(as_key1122.tree);
            	        }

            	        // OracleDML.g:1368:29: ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation )
            	        {
            	            ANTLR_UINT32 alt362=2;
            	            switch ( this->LA(1) )
            	            {
            	            case REGULAR_ID:
            	            	{
            	            		{
            	            		    ANTLR_UINT32 LA362_1 = this->LA(2);
            	            		    if ( (LA362_1 == COMMA || LA362_1 == RIGHT_PAREN))
            	            		    {
            	            		        alt362=1;
            	            		    }
            	            		    else if ( (LA362_1 == APPROXIMATE_NUM_LIT || LA362_1 == BINDVAR || ((LA362_1 >= CHAR_STRING) && (LA362_1 <= CHAR_STRING_PERL)) || LA362_1 == COLON || LA362_1 == DELIMITED_ID || LA362_1 == EXACT_NUM_LIT || LA362_1 == INTRODUCER || LA362_1 == LEFT_PAREN || LA362_1 == MINUS_SIGN || LA362_1 == NATIONAL_CHAR_STRING_LIT || ((LA362_1 >= PLSQL_NON_RESERVED_CAST) && (LA362_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA362_1 == PLUS_SIGN || LA362_1 == REGULAR_ID || LA362_1 == SQL92_RESERVED_ALL || LA362_1 == SQL92_RESERVED_ANY || LA362_1 == SQL92_RESERVED_CASE || LA362_1 == SQL92_RESERVED_DATE || LA362_1 == SQL92_RESERVED_DEFAULT || LA362_1 == SQL92_RESERVED_DISTINCT || ((LA362_1 >= SQL92_RESERVED_EXISTS) && (LA362_1 <= SQL92_RESERVED_FALSE)) || LA362_1 == SQL92_RESERVED_NULL || LA362_1 == SQL92_RESERVED_PRIOR || LA362_1 == SQL92_RESERVED_TRUE || LA362_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "EVALNAME")))
            	            		    {
            	            		        alt362=2;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 362 );
            	            		        ex->set_state( 1 );


            	            		        goto rulexml_multiuse_expression_elementEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case DELIMITED_ID:
            	            	{
            	            		alt362=1;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 362 );
            	                ex->set_state( 0 );


            	                goto rulexml_multiuse_expression_elementEx;

            	            }

            	            switch (alt362)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1368:30: id_expression[T_UNKNOWN,T_USE]
            	        	    {
            	        	        this->followPush(FOLLOW_id_expression_in_xml_multiuse_expression_element15059);
            	        	        id_expression1123=id_expression(T_UNKNOWN, T_USE);

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_multiuse_expression_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            id_expression1123_last = id_expression1123.tree.get();
            	        	            stream_id_expression.add(id_expression1123.tree);
            	        	        }

            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            mode = 1;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:1368:73: evalname_key concatenation
            	        	    {
            	        	        this->followPush(FOLLOW_evalname_key_in_xml_multiuse_expression_element15064);
            	        	        evalname_key1124=evalname_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_multiuse_expression_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            evalname_key1124_last = evalname_key1124.tree.get();
            	        	            stream_evalname_key.add(evalname_key1124.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_concatenation_in_xml_multiuse_expression_element15066);
            	        	        concatenation1125=concatenation();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_multiuse_expression_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            concatenation1125_last = concatenation1125.tree.get();
            	        	            stream_concatenation.add(concatenation1125.tree);
            	        	        }

            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            mode = 2;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression, expression, concatenation, evalname_key, expression, id_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1369:9: -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) )
            if (mode == 1) {
            	// OracleDML.g:1369:25: ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ELEMENT, "XML_ELEMENT"), root_1);
            	// OracleDML.g:1369:39: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:1369:58: ^( XML_ALIAS[$as_key.start] id_expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ALIAS, (as_key1122.start)), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_id_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1370:9: -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) )
            if (mode == 2) {
            	// OracleDML.g:1370:25: ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ELEMENT, "XML_ELEMENT"), root_1);
            	// OracleDML.g:1370:39: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:1370:58: ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ALIAS, (as_key1122.start)), root_2);
            	// OracleDML.g:1370:85: ^( evalname_key ^( EXPR concatenation ) )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_evalname_key.nextNode(), root_3);
            	// OracleDML.g:1370:100: ^( EXPR concatenation )
            	{
            	ImplTraits::TreeTypePtr root_4 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_4 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_4);
            	get_psrstate()->get_treeAdaptor()->addChild(root_4, stream_concatenation.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, root_4);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1371:9: -> ^( XML_ELEMENT ^( EXPR expression ) )
            {
            	// OracleDML.g:1371:12: ^( XML_ELEMENT ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ELEMENT, "XML_ELEMENT"), root_1);
            	// OracleDML.g:1371:26: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_multiuse_expression_elementEx; /* Prevent compiler warnings */
    rulexml_multiuse_expression_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_multiuse_expression_element */

/**
 * $ANTLR start xmlroot_param_version_part
 * OracleDML.g:1374:1: xmlroot_param_version_part : version_key ^ ( no_key value_key | expression_wrapper ) ;
 */
OracleDML::xmlroot_param_version_part_return
OracleDML::xmlroot_param_version_part()
{
    OracleDML::xmlroot_param_version_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::version_key_return version_key1126;
    ImplTraits::TreeTypePtr::pointer version_key1126_last = NULL;
    OracleDML_OracleDMLKeys::no_key_return no_key1127;
    ImplTraits::TreeTypePtr::pointer no_key1127_last = NULL;
    OracleDML_OracleDMLKeys::value_key_return value_key1128;
    ImplTraits::TreeTypePtr::pointer value_key1128_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper1129;
    ImplTraits::TreeTypePtr::pointer expression_wrapper1129_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1375:5: ( version_key ^ ( no_key value_key | expression_wrapper ) )
        // OracleDML.g:1375:10: version_key ^ ( no_key value_key | expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_version_key_in_xmlroot_param_version_part15177);
            version_key1126=version_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlroot_param_version_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(version_key1126.tree, root_0);

            // OracleDML.g:1375:23: ( no_key value_key | expression_wrapper )
            {
                ANTLR_UINT32 alt364=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA364_1 = this->LA(2);
                		    if ( (LA364_1 == REGULAR_ID))
                		    {
                		        {
                		            ANTLR_UINT32 LA364_3 = this->LA(3);
                		            if ( ((toUpper(LT(1)->getText()) == "NO")))
                		            {
                		                alt364=1;
                		            }
                		            else if ( (true))
                		            {
                		                alt364=2;
                		            }
                		            else
                		            {
                		                if (this->get_backtracking()>0)
                		                {
                		                    this->set_failedflag( true );
                		                    return retval;
                		                }


                		                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		                ex->set_decisionNum( 364 );
                		                ex->set_state( 3 );


                		                goto rulexmlroot_param_version_partEx;

                		            }
                		        }
                		    }
                		    else if ( (LA364_1 == MINUS_SIGN || LA364_1 == PLUS_SIGN))
                		    {
                		        alt364=2;
                		    }
                		    else if ( (LA364_1 == PLSQL_NON_RESERVED_CONNECT_BY_ROOT || LA364_1 == SQL92_RESERVED_ALL || LA364_1 == SQL92_RESERVED_DISTINCT || LA364_1 == SQL92_RESERVED_PRIOR) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
                		    {
                		        alt364=2;
                		    }
                		    else if ( (LA364_1 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "INTERVAL"))||(( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))))
                		    {
                		        alt364=2;
                		    }
                		    else if ( (LA364_1 == SQL92_RESERVED_CASE))
                		    {
                		        alt364=2;
                		    }
                		    else if ( (LA364_1 == PLSQL_NON_RESERVED_CAST || LA364_1 == SQL92_RESERVED_ANY || LA364_1 == SQL92_RESERVED_EXISTS) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
                		    {
                		        alt364=2;
                		    }
                		    else if ( (LA364_1 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "INTERVAL"))||(( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))))
                		    {
                		        alt364=2;
                		    }
                		    else if ( (LA364_1 == BINDVAR || LA364_1 == COLON))
                		    {
                		        alt364=2;
                		    }
                		    else if ( (LA364_1 == APPROXIMATE_NUM_LIT || LA364_1 == EXACT_NUM_LIT || LA364_1 == SQL92_RESERVED_DATE || LA364_1 == UNSIGNED_INTEGER) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
                		    {
                		        alt364=2;
                		    }
                		    else if ( (((LA364_1 >= CHAR_STRING) && (LA364_1 <= CHAR_STRING_PERL)) || LA364_1 == NATIONAL_CHAR_STRING_LIT))
                		    {
                		        alt364=2;
                		    }
                		    else if ( (LA364_1 == SQL92_RESERVED_DEFAULT || LA364_1 == SQL92_RESERVED_FALSE || LA364_1 == SQL92_RESERVED_NULL || LA364_1 == SQL92_RESERVED_TRUE) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
                		    {
                		        alt364=2;
                		    }
                		    else if ( (LA364_1 == ASTERISK || LA364_1 == CARRET_OPERATOR_PART || LA364_1 == COMMA || LA364_1 == CONCATENATION_OP || LA364_1 == EQUALS_OP || LA364_1 == EXCLAMATION_OPERATOR_PART || ((LA364_1 >= GREATER_THAN_OP) && (LA364_1 <= GREATER_THAN_OR_EQUALS_OP)) || ((LA364_1 >= LEFT_BRACKET) && (LA364_1 <= LEFT_PAREN)) || ((LA364_1 >= LESS_THAN_OP) && (LA364_1 <= LESS_THAN_OR_EQUALS_OP)) || LA364_1 == NOT_EQUAL_OP || LA364_1 == PERIOD || LA364_1 == PLSQL_NON_RESERVED_MULTISET || LA364_1 == RIGHT_PAREN || LA364_1 == SOLIDUS || LA364_1 == SQL92_RESERVED_AND || LA364_1 == SQL92_RESERVED_BETWEEN || LA364_1 == SQL92_RESERVED_IN || ((LA364_1 >= SQL92_RESERVED_IS) && (LA364_1 <= SQL92_RESERVED_NOT)) || LA364_1 == SQL92_RESERVED_OR || LA364_1 == VERTICAL_BAR))
                		    {
                		        alt364=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 364 );
                		        ex->set_state( 1 );


                		        goto rulexmlroot_param_version_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt364=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 364 );
                    ex->set_state( 0 );


                    goto rulexmlroot_param_version_partEx;

                }

                switch (alt364)
                {
            	case 1:
            	    // OracleDML.g:1375:24: no_key value_key
            	    {
            	        this->followPush(FOLLOW_no_key_in_xmlroot_param_version_part15181);
            	        no_key1127=no_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_version_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, no_key1127.tree);


            	        this->followPush(FOLLOW_value_key_in_xmlroot_param_version_part15183);
            	        value_key1128=value_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_version_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, value_key1128.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1375:41: expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_xmlroot_param_version_part15185);
            	        expression_wrapper1129=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_version_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper1129.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlroot_param_version_partEx; /* Prevent compiler warnings */
    rulexmlroot_param_version_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlroot_param_version_part */

/**
 * $ANTLR start xmlroot_param_standalone_part
 * OracleDML.g:1378:1: xmlroot_param_standalone_part : standalone_key ^ ( yes_key | no_key ( value_key )? ) ;
 */
OracleDML::xmlroot_param_standalone_part_return
OracleDML::xmlroot_param_standalone_part()
{
    OracleDML::xmlroot_param_standalone_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::standalone_key_return standalone_key1130;
    ImplTraits::TreeTypePtr::pointer standalone_key1130_last = NULL;
    OracleDML_OracleDMLKeys::yes_key_return yes_key1131;
    ImplTraits::TreeTypePtr::pointer yes_key1131_last = NULL;
    OracleDML_OracleDMLKeys::no_key_return no_key1132;
    ImplTraits::TreeTypePtr::pointer no_key1132_last = NULL;
    OracleDML_OracleDMLKeys::value_key_return value_key1133;
    ImplTraits::TreeTypePtr::pointer value_key1133_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1379:5: ( standalone_key ^ ( yes_key | no_key ( value_key )? ) )
        // OracleDML.g:1379:10: standalone_key ^ ( yes_key | no_key ( value_key )? )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_standalone_key_in_xmlroot_param_standalone_part15206);
            standalone_key1130=standalone_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlroot_param_standalone_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(standalone_key1130.tree, root_0);

            // OracleDML.g:1379:26: ( yes_key | no_key ( value_key )? )
            {
                ANTLR_UINT32 alt366=2;
                {
                    ANTLR_UINT32 LA366_0 = this->LA(1);
                    if ( (LA366_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "NO"))||((toUpper(LT(1)->getText()) == "YES")))))
                    {
                        {
                            ANTLR_UINT32 LA366_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "YES")))
                            {
                                alt366=1;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "NO")))
                            {
                                alt366=2;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 366 );
                                ex->set_state( 1 );


                                goto rulexmlroot_param_standalone_partEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 366 );
                        ex->set_state( 0 );


                        goto rulexmlroot_param_standalone_partEx;

                    }
                }
                switch (alt366)
                {
            	case 1:
            	    // OracleDML.g:1379:27: yes_key
            	    {
            	        this->followPush(FOLLOW_yes_key_in_xmlroot_param_standalone_part15210);
            	        yes_key1131=yes_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_standalone_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, yes_key1131.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1379:35: no_key ( value_key )?
            	    {
            	        this->followPush(FOLLOW_no_key_in_xmlroot_param_standalone_part15212);
            	        no_key1132=no_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_standalone_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, no_key1132.tree);


            	        // OracleDML.g:1379:42: ( value_key )?
            	        {
            	            ANTLR_UINT32 alt365=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		alt365=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt365)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1379:42: value_key
            	        	    {
            	        	        this->followPush(FOLLOW_value_key_in_xmlroot_param_standalone_part15214);
            	        	        value_key1133=value_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexmlroot_param_standalone_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, value_key1133.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlroot_param_standalone_partEx; /* Prevent compiler warnings */
    rulexmlroot_param_standalone_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlroot_param_standalone_part */

/**
 * $ANTLR start xmlserialize_param_enconding_part
 * OracleDML.g:1382:1: xmlserialize_param_enconding_part : encoding_key ^ concatenation_wrapper ;
 */
OracleDML::xmlserialize_param_enconding_part_return
OracleDML::xmlserialize_param_enconding_part()
{
    OracleDML::xmlserialize_param_enconding_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::encoding_key_return encoding_key1134;
    ImplTraits::TreeTypePtr::pointer encoding_key1134_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1135;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1135_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1383:5: ( encoding_key ^ concatenation_wrapper )
        // OracleDML.g:1383:10: encoding_key ^ concatenation_wrapper
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_encoding_key_in_xmlserialize_param_enconding_part15236);
            encoding_key1134=encoding_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlserialize_param_enconding_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(encoding_key1134.tree, root_0);

            this->followPush(FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part15239);
            concatenation_wrapper1135=concatenation_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlserialize_param_enconding_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1135.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlserialize_param_enconding_partEx; /* Prevent compiler warnings */
    rulexmlserialize_param_enconding_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlserialize_param_enconding_part */

/**
 * $ANTLR start xmlserialize_param_version_part
 * OracleDML.g:1386:1: xmlserialize_param_version_part : version_key ^ concatenation_wrapper ;
 */
OracleDML::xmlserialize_param_version_part_return
OracleDML::xmlserialize_param_version_part()
{
    OracleDML::xmlserialize_param_version_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::version_key_return version_key1136;
    ImplTraits::TreeTypePtr::pointer version_key1136_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1137;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1137_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1387:5: ( version_key ^ concatenation_wrapper )
        // OracleDML.g:1387:10: version_key ^ concatenation_wrapper
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_version_key_in_xmlserialize_param_version_part15259);
            version_key1136=version_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlserialize_param_version_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(version_key1136.tree, root_0);

            this->followPush(FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part15262);
            concatenation_wrapper1137=concatenation_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlserialize_param_version_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1137.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlserialize_param_version_partEx; /* Prevent compiler warnings */
    rulexmlserialize_param_version_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlserialize_param_version_part */

/**
 * $ANTLR start xmlserialize_param_ident_part
 * OracleDML.g:1390:1: xmlserialize_param_ident_part : ( no_key indent_key | indent_key ^ ( size_key ! EQUALS_OP ! concatenation_wrapper )? );
 */
OracleDML::xmlserialize_param_ident_part_return
OracleDML::xmlserialize_param_ident_part()
{
    OracleDML::xmlserialize_param_ident_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP1142 = NULL;
    OracleDML_OracleDMLKeys::no_key_return no_key1138;
    ImplTraits::TreeTypePtr::pointer no_key1138_last = NULL;
    OracleDML_OracleDMLKeys::indent_key_return indent_key1139;
    ImplTraits::TreeTypePtr::pointer indent_key1139_last = NULL;
    OracleDML_OracleDMLKeys::indent_key_return indent_key1140;
    ImplTraits::TreeTypePtr::pointer indent_key1140_last = NULL;
    OracleDML_OracleDMLKeys::size_key_return size_key1141;
    ImplTraits::TreeTypePtr::pointer size_key1141_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1143;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1143_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP1142_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1391:5: ( no_key indent_key | indent_key ^ ( size_key ! EQUALS_OP ! concatenation_wrapper )? )

            ANTLR_UINT32 alt368;

            alt368=2;

            {
                ANTLR_UINT32 LA368_0 = this->LA(1);
                if ( (LA368_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "NO")))))
                {
                    {
                        ANTLR_UINT32 LA368_1 = this->LA(2);
                        if ( (LA368_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "NO")))))
                        {
                            {
                                ANTLR_UINT32 LA368_2 = this->LA(3);
                                if ( (LA368_2 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "NO")))))
                                {
                                    {
                                        ANTLR_UINT32 LA368_4 = this->LA(4);
                                        if ( (LA368_4 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NO")))
                                        {
                                            alt368=1;
                                        }
                                        else if ( (LA368_4 == RIGHT_PAREN) && ((toUpper(LT(1)->getText()) == "INDENT")))
                                        {
                                            alt368=2;
                                        }
                                        else
                                        {
                                            if (this->get_backtracking()>0)
                                            {
                                                this->set_failedflag( true );
                                                return retval;
                                            }


                                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                            ex->set_decisionNum( 368 );
                                            ex->set_state( 4 );


                                            goto rulexmlserialize_param_ident_partEx;

                                        }
                                    }
                                }
                                else if ( (LA368_2 == RIGHT_PAREN) && ((toUpper(LT(1)->getText()) == "NO")))
                                {
                                    alt368=1;
                                }
                                else
                                {
                                    if (this->get_backtracking()>0)
                                    {
                                        this->set_failedflag( true );
                                        return retval;
                                    }


                                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                    ex->set_decisionNum( 368 );
                                    ex->set_state( 2 );


                                    goto rulexmlserialize_param_ident_partEx;

                                }
                            }
                        }
                        else if ( (LA368_1 == RIGHT_PAREN || LA368_1 == SQL92_RESERVED_SIZE) && ((toUpper(LT(1)->getText()) == "INDENT")))
                        {
                            alt368=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 368 );
                            ex->set_state( 1 );


                            goto rulexmlserialize_param_ident_partEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 368 );
                    ex->set_state( 0 );


                    goto rulexmlserialize_param_ident_partEx;

                }
            }
            switch (alt368)
            {
        	case 1:
        	    // OracleDML.g:1391:10: no_key indent_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_no_key_in_xmlserialize_param_ident_part15282);
        	        no_key1138=no_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulexmlserialize_param_ident_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, no_key1138.tree);


        	        this->followPush(FOLLOW_indent_key_in_xmlserialize_param_ident_part15284);
        	        indent_key1139=indent_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulexmlserialize_param_ident_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, indent_key1139.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1392:10: indent_key ^ ( size_key ! EQUALS_OP ! concatenation_wrapper )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_indent_key_in_xmlserialize_param_ident_part15295);
        	        indent_key1140=indent_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulexmlserialize_param_ident_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(indent_key1140.tree, root_0);

        	        // OracleDML.g:1392:22: ( size_key ! EQUALS_OP ! concatenation_wrapper )?
        	        {
        	            ANTLR_UINT32 alt367=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_SIZE:
        	                	{
        	                		alt367=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt367)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1392:23: size_key ! EQUALS_OP ! concatenation_wrapper
        	        	    {
        	        	        this->followPush(FOLLOW_size_key_in_xmlserialize_param_ident_part15299);
        	        	        size_key1141=size_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulexmlserialize_param_ident_partEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        EQUALS_OP1142 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part15302);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulexmlserialize_param_ident_partEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part15305);
        	        	        concatenation_wrapper1143=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulexmlserialize_param_ident_partEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1143.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlserialize_param_ident_partEx; /* Prevent compiler warnings */
    rulexmlserialize_param_ident_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlserialize_param_ident_part */

// $ANTLR start synpredRule synpred1_OracleDML
void OracleDML::msynpred1_OracleDML_fragment(  )
{
    // OracleDML.g:156:28: ( order_key ( siblings_key )? by_key )
    // OracleDML.g:156:29: order_key ( siblings_key )? by_key
    {
        this->followPush(FOLLOW_order_key_in_synpred1_OracleDML1009);
        order_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred1_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:156:39: ( siblings_key )?
        {
            ANTLR_UINT32 alt369=2;
            {
                ANTLR_UINT32 LA369_0 = this->LA(1);
                if ( (LA369_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SIBLINGS")))
                {
                    alt369=1;
                }
            }
            switch (alt369)
            {
        	case 1:
        	    // OracleDML.g:156:39: siblings_key
        	    {
        	        this->followPush(FOLLOW_siblings_key_in_synpred1_OracleDML1011);
        	        siblings_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred1_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

        this->followPush(FOLLOW_by_key_in_synpred1_OracleDML1014);
        by_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred1_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred1_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred1_OracleDMLEx: ;
}
// $ANTLR end synpred1_OracleDML

// $ANTLR start synpredRule synpred2_OracleDML
void OracleDML::msynpred2_OracleDML_fragment(  )
{
    {
        //  OracleDML.g:200:10: ( distinct_key | unique_key | all_key )

        ANTLR_UINT32 alt370;

        alt370=3;

        switch ( this->LA(1) )
        {
        case SQL92_RESERVED_DISTINCT:
        	{
        		alt370=1;
        	}
            break;
        case SQL92_RESERVED_UNIQUE:
        	{
        		alt370=2;
        	}
            break;
        case SQL92_RESERVED_ALL:
        	{
        		alt370=3;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 370 );
            ex->set_state( 0 );


            goto rulesynpred2_OracleDMLEx;

        }

        switch (alt370)
        {
    	case 1:
    	    // OracleDML.g:200:11: distinct_key
    	    {
    	        this->followPush(FOLLOW_distinct_key_in_synpred2_OracleDML1503);
    	        distinct_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred2_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;
    	case 2:
    	    // OracleDML.g:200:24: unique_key
    	    {
    	        this->followPush(FOLLOW_unique_key_in_synpred2_OracleDML1505);
    	        unique_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred2_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;
    	case 3:
    	    // OracleDML.g:200:35: all_key
    	    {
    	        this->followPush(FOLLOW_all_key_in_synpred2_OracleDML1507);
    	        all_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred2_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;

        }
    }

goto rulesynpred2_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred2_OracleDMLEx: ;
}
// $ANTLR end synpred2_OracleDML

// $ANTLR start synpredRule synpred3_OracleDML
void OracleDML::msynpred3_OracleDML_fragment(  )
{
    // OracleDML.g:224:10: ( tableview_name PERIOD ASTERISK )
    // OracleDML.g:224:11: tableview_name PERIOD ASTERISK
    {
        this->followPush(FOLLOW_tableview_name_in_synpred3_OracleDML1820);
        tableview_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred3_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



         this->matchToken(PERIOD, &FOLLOW_PERIOD_in_synpred3_OracleDML1822);
        if  (this->hasException())
        {
            goto rulesynpred3_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



         this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_synpred3_OracleDML1824);
        if  (this->hasException())
        {
            goto rulesynpred3_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred3_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred3_OracleDMLEx: ;
}
// $ANTLR end synpred3_OracleDML

// $ANTLR start synpredRule synpred4_OracleDML
void OracleDML::msynpred4_OracleDML_fragment(  )
{
    // OracleDML.g:255:10: ( LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:255:11: LEFT_PAREN ( select_key | with_key )
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred4_OracleDML1993);
        if  (this->hasException())
        {
            goto rulesynpred4_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:255:22: ( select_key | with_key )
        {
            ANTLR_UINT32 alt371=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt371=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt371=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 371 );
                ex->set_state( 0 );


                goto rulesynpred4_OracleDMLEx;

            }

            switch (alt371)
            {
        	case 1:
        	    // OracleDML.g:255:23: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred4_OracleDML1996);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred4_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:255:34: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred4_OracleDML1998);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred4_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred4_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred4_OracleDMLEx: ;
}
// $ANTLR end synpred4_OracleDML

// $ANTLR start synpredRule synpred5_OracleDML
void OracleDML::msynpred5_OracleDML_fragment(  )
{
    // OracleDML.g:256:10: ( LEFT_PAREN )
    // OracleDML.g:256:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred5_OracleDML2016);
        if  (this->hasException())
        {
            goto rulesynpred5_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred5_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred5_OracleDMLEx: ;
}
// $ANTLR end synpred5_OracleDML

// $ANTLR start synpredRule synpred6_OracleDML
void OracleDML::msynpred6_OracleDML_fragment(  )
{
    // OracleDML.g:257:10: ( only_key LEFT_PAREN )
    // OracleDML.g:257:11: only_key LEFT_PAREN
    {
        this->followPush(FOLLOW_only_key_in_synpred6_OracleDML2033);
        only_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred6_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred6_OracleDML2035);
        if  (this->hasException())
        {
            goto rulesynpred6_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred6_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred6_OracleDMLEx: ;
}
// $ANTLR end synpred6_OracleDML

// $ANTLR start synpredRule synpred10_OracleDML
void OracleDML::msynpred10_OracleDML_fragment(  )
{
    // OracleDML.g:323:10: ( LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:323:11: LEFT_PAREN ( select_key | with_key )
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred10_OracleDML2749);
        if  (this->hasException())
        {
            goto rulesynpred10_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:323:22: ( select_key | with_key )
        {
            ANTLR_UINT32 alt373=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt373=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt373=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 373 );
                ex->set_state( 0 );


                goto rulesynpred10_OracleDMLEx;

            }

            switch (alt373)
            {
        	case 1:
        	    // OracleDML.g:323:23: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred10_OracleDML2752);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred10_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:323:34: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred10_OracleDML2754);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred10_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred10_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred10_OracleDMLEx: ;
}
// $ANTLR end synpred10_OracleDML

// $ANTLR start synpredRule synpred11_OracleDML
void OracleDML::msynpred11_OracleDML_fragment(  )
{
    // OracleDML.g:324:10: ( LEFT_PAREN )
    // OracleDML.g:324:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred11_OracleDML2776);
        if  (this->hasException())
        {
            goto rulesynpred11_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred11_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred11_OracleDMLEx: ;
}
// $ANTLR end synpred11_OracleDML

// $ANTLR start synpredRule synpred12_OracleDML
void OracleDML::msynpred12_OracleDML_fragment(  )
{
    // OracleDML.g:362:18: ( select_key )
    // OracleDML.g:362:19: select_key
    {
        this->followPush(FOLLOW_select_key_in_synpred12_OracleDML3264);
        select_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred12_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred12_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred12_OracleDMLEx: ;
}
// $ANTLR end synpred12_OracleDML

// $ANTLR start synpredRule synpred13_OracleDML
void OracleDML::msynpred13_OracleDML_fragment(  )
{
    // OracleDML.g:363:18: ( any_key )
    // OracleDML.g:363:19: any_key
    {
        this->followPush(FOLLOW_any_key_in_synpred13_OracleDML3290);
        any_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred13_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred13_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred13_OracleDMLEx: ;
}
// $ANTLR end synpred13_OracleDML

// $ANTLR start synpredRule synpred14_OracleDML
void OracleDML::msynpred14_OracleDML_fragment(  )
{
    // OracleDML.g:379:10: ( LEFT_PAREN )
    // OracleDML.g:379:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred14_OracleDML3495);
        if  (this->hasException())
        {
            goto rulesynpred14_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred14_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred14_OracleDMLEx: ;
}
// $ANTLR end synpred14_OracleDML

// $ANTLR start synpredRule synpred15_OracleDML
void OracleDML::msynpred15_OracleDML_fragment(  )
{
    // OracleDML.g:409:14: ( LEFT_PAREN )
    // OracleDML.g:409:15: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred15_OracleDML3868);
        if  (this->hasException())
        {
            goto rulesynpred15_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred15_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred15_OracleDMLEx: ;
}
// $ANTLR end synpred15_OracleDML

// $ANTLR start synpredRule synpred16_OracleDML
void OracleDML::msynpred16_OracleDML_fragment(  )
{
    // OracleDML.g:428:9: ( group_key )
    // OracleDML.g:428:10: group_key
    {
        this->followPush(FOLLOW_group_key_in_synpred16_OracleDML4099);
        group_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred16_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred16_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred16_OracleDMLEx: ;
}
// $ANTLR end synpred16_OracleDML

// $ANTLR start synpredRule synpred17_OracleDML
void OracleDML::msynpred17_OracleDML_fragment(  )
{
    // OracleDML.g:430:25: ( COMMA group_by_elements )
    // OracleDML.g:430:26: COMMA group_by_elements
    {
         this->matchToken(COMMA, &FOLLOW_COMMA_in_synpred17_OracleDML4125);
        if  (this->hasException())
        {
            goto rulesynpred17_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_group_by_elements_in_synpred17_OracleDML4127);
        group_by_elements();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred17_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred17_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred17_OracleDMLEx: ;
}
// $ANTLR end synpred17_OracleDML

// $ANTLR start synpredRule synpred18_OracleDML
void OracleDML::msynpred18_OracleDML_fragment(  )
{
    // OracleDML.g:434:9: ( having_key )
    // OracleDML.g:434:10: having_key
    {
        this->followPush(FOLLOW_having_key_in_synpred18_OracleDML4179);
        having_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred18_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred18_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred18_OracleDMLEx: ;
}
// $ANTLR end synpred18_OracleDML

// $ANTLR start synpredRule synpred19_OracleDML
void OracleDML::msynpred19_OracleDML_fragment(  )
{
    // OracleDML.g:437:25: ( COMMA group_by_elements )
    // OracleDML.g:437:26: COMMA group_by_elements
    {
         this->matchToken(COMMA, &FOLLOW_COMMA_in_synpred19_OracleDML4210);
        if  (this->hasException())
        {
            goto rulesynpred19_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_group_by_elements_in_synpred19_OracleDML4212);
        group_by_elements();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred19_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred19_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred19_OracleDMLEx: ;
}
// $ANTLR end synpred19_OracleDML

// $ANTLR start synpredRule synpred20_OracleDML
void OracleDML::msynpred20_OracleDML_fragment(  )
{
    {
        //  OracleDML.g:460:10: ( rollup_key | cube_key )

        ANTLR_UINT32 alt374;

        alt374=2;

        {
            ANTLR_UINT32 LA374_0 = this->LA(1);
            if ( (LA374_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "ROLLUP"))||((toUpper(LT(1)->getText()) == "CUBE")))))
            {
                {
                    ANTLR_UINT32 LA374_1 = this->LA(2);
                    if ( ((toUpper(LT(1)->getText()) == "ROLLUP")))
                    {
                        alt374=1;
                    }
                    else if ( ((toUpper(LT(1)->getText()) == "CUBE")))
                    {
                        alt374=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return ;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 374 );
                        ex->set_state( 1 );


                        goto rulesynpred20_OracleDMLEx;

                    }
                }
            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }


                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 374 );
                ex->set_state( 0 );


                goto rulesynpred20_OracleDMLEx;

            }
        }
        switch (alt374)
        {
    	case 1:
    	    // OracleDML.g:460:11: rollup_key
    	    {
    	        this->followPush(FOLLOW_rollup_key_in_synpred20_OracleDML4431);
    	        rollup_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred20_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;
    	case 2:
    	    // OracleDML.g:460:22: cube_key
    	    {
    	        this->followPush(FOLLOW_cube_key_in_synpred20_OracleDML4433);
    	        cube_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred20_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;

        }
    }

goto rulesynpred20_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred20_OracleDMLEx: ;
}
// $ANTLR end synpred20_OracleDML

// $ANTLR start synpredRule synpred21_OracleDML
void OracleDML::msynpred21_OracleDML_fragment(  )
{
    // OracleDML.g:461:10: ( LEFT_PAREN )
    // OracleDML.g:461:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred21_OracleDML4449);
        if  (this->hasException())
        {
            goto rulesynpred21_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred21_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred21_OracleDMLEx: ;
}
// $ANTLR end synpred21_OracleDML

// $ANTLR start synpredRule synpred22_OracleDML
void OracleDML::msynpred22_OracleDML_fragment(  )
{
    // OracleDML.g:526:34: ( all_key )
    // OracleDML.g:526:35: all_key
    {
        this->followPush(FOLLOW_all_key_in_synpred22_OracleDML5116);
        all_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred22_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred22_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred22_OracleDMLEx: ;
}
// $ANTLR end synpred22_OracleDML

// $ANTLR start synpredRule synpred23_OracleDML
void OracleDML::msynpred23_OracleDML_fragment(  )
{
    // OracleDML.g:666:13: ( when_key matched_key )
    // OracleDML.g:666:14: when_key matched_key
    {
        this->followPush(FOLLOW_when_key_in_synpred23_OracleDML6483);
        when_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred23_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_matched_key_in_synpred23_OracleDML6485);
        matched_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred23_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred23_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred23_OracleDMLEx: ;
}
// $ANTLR end synpred23_OracleDML

// $ANTLR start synpredRule synpred24_OracleDML
void OracleDML::msynpred24_OracleDML_fragment(  )
{
    // OracleDML.g:668:13: ( when_key not_key matched_key )
    // OracleDML.g:668:14: when_key not_key matched_key
    {
        this->followPush(FOLLOW_when_key_in_synpred24_OracleDML6515);
        when_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred24_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_not_key_in_synpred24_OracleDML6517);
        not_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred24_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_matched_key_in_synpred24_OracleDML6519);
        matched_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred24_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred24_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred24_OracleDMLEx: ;
}
// $ANTLR end synpred24_OracleDML

// $ANTLR start synpredRule synpred25_OracleDML
void OracleDML::msynpred25_OracleDML_fragment(  )
{
    // OracleDML.g:761:10: ( LEFT_PAREN )
    // OracleDML.g:761:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred25_OracleDML7421);
        if  (this->hasException())
        {
            goto rulesynpred25_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred25_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred25_OracleDMLEx: ;
}
// $ANTLR end synpred25_OracleDML

// $ANTLR start synpredRule synpred26_OracleDML
void OracleDML::msynpred26_OracleDML_fragment(  )
{
    // OracleDML.g:771:34: ( unlimited_key )
    // OracleDML.g:771:35: unlimited_key
    {
        this->followPush(FOLLOW_unlimited_key_in_synpred26_OracleDML7512);
        unlimited_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred26_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred26_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred26_OracleDMLEx: ;
}
// $ANTLR end synpred26_OracleDML

// $ANTLR start synpredRule synpred27_OracleDML
void OracleDML::msynpred27_OracleDML_fragment(  )
{
    // OracleDML.g:783:12: ( LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:783:13: LEFT_PAREN ( select_key | with_key )
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred27_OracleDML7669);
        if  (this->hasException())
        {
            goto rulesynpred27_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:783:24: ( select_key | with_key )
        {
            ANTLR_UINT32 alt375=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt375=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt375=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 375 );
                ex->set_state( 0 );


                goto rulesynpred27_OracleDMLEx;

            }

            switch (alt375)
            {
        	case 1:
        	    // OracleDML.g:783:25: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred27_OracleDML7672);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred27_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:783:38: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred27_OracleDML7676);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred27_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred27_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred27_OracleDMLEx: ;
}
// $ANTLR end synpred27_OracleDML

// $ANTLR start synpredRule synpred28_OracleDML
void OracleDML::msynpred28_OracleDML_fragment(  )
{
    // OracleDML.g:836:10: ( cursor_key LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:836:11: cursor_key LEFT_PAREN ( select_key | with_key )
    {
        this->followPush(FOLLOW_cursor_key_in_synpred28_OracleDML8156);
        cursor_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred28_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred28_OracleDML8158);
        if  (this->hasException())
        {
            goto rulesynpred28_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:836:33: ( select_key | with_key )
        {
            ANTLR_UINT32 alt376=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt376=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt376=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 376 );
                ex->set_state( 0 );


                goto rulesynpred28_OracleDMLEx;

            }

            switch (alt376)
            {
        	case 1:
        	    // OracleDML.g:836:34: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred28_OracleDML8161);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred28_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:836:45: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred28_OracleDML8163);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred28_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred28_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred28_OracleDMLEx: ;
}
// $ANTLR end synpred28_OracleDML

// $ANTLR start synpredRule synpred29_OracleDML
void OracleDML::msynpred29_OracleDML_fragment(  )
{
    // OracleDML.g:940:10: ( ( LEFT_PAREN )+ ( select_key | with_key ) )
    // OracleDML.g:940:11: ( LEFT_PAREN )+ ( select_key | with_key )
    {
        // OracleDML.g:940:11: ( LEFT_PAREN )+
        {
            int cnt377=0;

            for (;;)
            {
                ANTLR_UINT32 alt377=2;
        	switch ( this->LA(1) )
        	{
        	case LEFT_PAREN:
        		{
        			alt377=1;
        		}
        	    break;

        	}

        	switch (alt377)
        	{
        	    case 1:
        	        // OracleDML.g:940:11: LEFT_PAREN
        	        {
        	             this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred29_OracleDML9543);
        	            if  (this->hasException())
        	            {
        	                goto rulesynpred29_OracleDMLEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return ;
        	            }



        	        }
        	        break;

        	    default:

        		if ( cnt377 >= 1 )
        		{
        		    goto loop377;
        		}
        		if (this->get_backtracking()>0)
        		{
        		    this->set_failedflag( true );
        		    return ;
        		}

        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto rulesynpred29_OracleDMLEx;
        	}
        	cnt377++;
            }
            loop377: ;	/* Jump to here if this rule does not match */
        }

        // OracleDML.g:940:23: ( select_key | with_key )
        {
            ANTLR_UINT32 alt378=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt378=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt378=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 378 );
                ex->set_state( 0 );


                goto rulesynpred29_OracleDMLEx;

            }

            switch (alt378)
            {
        	case 1:
        	    // OracleDML.g:940:24: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred29_OracleDML9547);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred29_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:940:35: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred29_OracleDML9549);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred29_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred29_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred29_OracleDMLEx: ;
}
// $ANTLR end synpred29_OracleDML

// $ANTLR start synpredRule synpred30_OracleDML
void OracleDML::msynpred30_OracleDML_fragment(  )
{
    // OracleDML.g:978:10: ( interval_expression )
    // OracleDML.g:978:11: interval_expression
    {
        this->followPush(FOLLOW_interval_expression_in_synpred30_OracleDML9992);
        interval_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred30_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred30_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred30_OracleDMLEx: ;
}
// $ANTLR end synpred30_OracleDML

// $ANTLR start synpredRule synpred31_OracleDML
void OracleDML::msynpred31_OracleDML_fragment(  )
{
    // OracleDML.g:997:11: ( any_key )
    // OracleDML.g:997:12: any_key
    {
        this->followPush(FOLLOW_any_key_in_synpred31_OracleDML10232);
        any_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred31_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred31_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred31_OracleDMLEx: ;
}
// $ANTLR end synpred31_OracleDML

// $ANTLR start synpredRule synpred32_OracleDML
void OracleDML::msynpred32_OracleDML_fragment(  )
{
    // OracleDML.g:997:59: ( any_key )
    // OracleDML.g:997:60: any_key
    {
        this->followPush(FOLLOW_any_key_in_synpred32_OracleDML10247);
        any_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred32_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred32_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred32_OracleDMLEx: ;
}
// $ANTLR end synpred32_OracleDML

// $ANTLR start synpredRule synpred33_OracleDML
void OracleDML::msynpred33_OracleDML_fragment(  )
{
    // OracleDML.g:1026:18: ( select_key )
    // OracleDML.g:1026:19: select_key
    {
        this->followPush(FOLLOW_select_key_in_synpred33_OracleDML10601);
        select_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred33_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred33_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred33_OracleDMLEx: ;
}
// $ANTLR end synpred33_OracleDML

// $ANTLR start synpredRule synpred34_OracleDML
void OracleDML::msynpred34_OracleDML_fragment(  )
{
    // OracleDML.g:1027:18: ( LEFT_PAREN )
    // OracleDML.g:1027:19: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred34_OracleDML10625);
        if  (this->hasException())
        {
            goto rulesynpred34_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred34_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred34_OracleDMLEx: ;
}
// $ANTLR end synpred34_OracleDML

// $ANTLR start synpredRule synpred39_OracleDML
void OracleDML::msynpred39_OracleDML_fragment(  )
{
    // OracleDML.g:1047:10: ({...}? => new_key unary_expression )
    // OracleDML.g:1047:10: {...}? => new_key unary_expression
    {
        if ( !((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) )
        {
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "LT(1)->getText() == \"NEW\" && LT(2)->getText() != \".\"" );
                ex->set_ruleName( "synpred39_OracleDML" );


        }

        this->followPush(FOLLOW_new_key_in_synpred39_OracleDML10835);
        new_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred39_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_unary_expression_in_synpred39_OracleDML10838);
        unary_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred39_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred39_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred39_OracleDMLEx: ;
}
// $ANTLR end synpred39_OracleDML

// $ANTLR start synpredRule synpred41_OracleDML
void OracleDML::msynpred41_OracleDML_fragment(  )
{
    // OracleDML.g:1049:10: ( all_key unary_expression )
    // OracleDML.g:1049:10: all_key unary_expression
    {
        this->followPush(FOLLOW_all_key_in_synpred41_OracleDML10863);
        all_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred41_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_unary_expression_in_synpred41_OracleDML10866);
        unary_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred41_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred41_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred41_OracleDMLEx: ;
}
// $ANTLR end synpred41_OracleDML

// $ANTLR start synpredRule synpred42_OracleDML
void OracleDML::msynpred42_OracleDML_fragment(  )
{
    // OracleDML.g:1050:10: ({...}? case_statement[false] )
    // OracleDML.g:1050:10: {...}? case_statement[false]
    {
        if ( !(((LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE))) )
        {
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "(LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE)" );
                ex->set_ruleName( "synpred42_OracleDML" );


        }

        this->followPush(FOLLOW_case_statement_in_synpred42_OracleDML10879);
        case_statement(false);

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred42_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred42_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred42_OracleDMLEx: ;
}
// $ANTLR end synpred42_OracleDML

// $ANTLR start synpredRule synpred43_OracleDML
void OracleDML::msynpred43_OracleDML_fragment(  )
{
    // OracleDML.g:1051:10: ( quantified_expression )
    // OracleDML.g:1051:10: quantified_expression
    {
        this->followPush(FOLLOW_quantified_expression_in_synpred43_OracleDML10891);
        quantified_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred43_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred43_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred43_OracleDMLEx: ;
}
// $ANTLR end synpred43_OracleDML

// $ANTLR start synpredRule synpred44_OracleDML
void OracleDML::msynpred44_OracleDML_fragment(  )
{
    // OracleDML.g:1052:10: ( standard_function )
    // OracleDML.g:1052:10: standard_function
    {
        this->followPush(FOLLOW_standard_function_in_synpred44_OracleDML10902);
        standard_function();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred44_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred44_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred44_OracleDMLEx: ;
}
// $ANTLR end synpred44_OracleDML

// $ANTLR start synpredRule synpred45_OracleDML
void OracleDML::msynpred45_OracleDML_fragment(  )
{
    // OracleDML.g:1061:10: ( ( label_name )? case_key when_key )
    // OracleDML.g:1061:11: ( label_name )? case_key when_key
    {
        // OracleDML.g:1061:11: ( label_name )?
        {
            ANTLR_UINT32 alt379=2;
            switch ( this->LA(1) )
            {
                case DELIMITED_ID:
                case REGULAR_ID:
                	{
                		alt379=1;
                	}
                    break;
            }

            switch (alt379)
            {
        	case 1:
        	    // OracleDML.g:1061:11: label_name
        	    {
        	        this->followPush(FOLLOW_label_name_in_synpred45_OracleDML10959);
        	        label_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred45_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

        this->followPush(FOLLOW_case_key_in_synpred45_OracleDML10962);
        case_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred45_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_when_key_in_synpred45_OracleDML10964);
        when_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred45_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred45_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred45_OracleDMLEx: ;
}
// $ANTLR end synpred45_OracleDML

// $ANTLR start synpredRule synpred46_OracleDML
void OracleDML::msynpred46_OracleDML_fragment(  )
{
    // OracleDML.g:1102:10: ( table_element outer_join_sign )
    // OracleDML.g:1102:11: table_element outer_join_sign
    {
        this->followPush(FOLLOW_table_element_in_synpred46_OracleDML11332);
        table_element();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred46_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_outer_join_sign_in_synpred46_OracleDML11334);
        outer_join_sign();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred46_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred46_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred46_OracleDMLEx: ;
}
// $ANTLR end synpred46_OracleDML

// $ANTLR start synpredRule synpred48_OracleDML
void OracleDML::msynpred48_OracleDML_fragment(  )
{
    // OracleDML.g:1104:10: ( constant )
    // OracleDML.g:1104:10: constant
    {
        this->followPush(FOLLOW_constant_in_synpred48_OracleDML11363);
        constant();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred48_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred48_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred48_OracleDMLEx: ;
}
// $ANTLR end synpred48_OracleDML

// $ANTLR start synpredRule synpred49_OracleDML
void OracleDML::msynpred49_OracleDML_fragment(  )
{
    // OracleDML.g:1105:10: ( general_element )
    // OracleDML.g:1105:10: general_element
    {
        this->followPush(FOLLOW_general_element_in_synpred49_OracleDML11374);
        general_element();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred49_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred49_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred49_OracleDMLEx: ;
}
// $ANTLR end synpred49_OracleDML

// $ANTLR start synpredRule synpred50_OracleDML
void OracleDML::msynpred50_OracleDML_fragment(  )
{
    {
        //  OracleDML.g:1108:15: ( select_key | with_key )

        ANTLR_UINT32 alt380;

        alt380=2;

        switch ( this->LA(1) )
        {
        case SQL92_RESERVED_SELECT:
        	{
        		alt380=1;
        	}
            break;
        case SQL92_RESERVED_WITH:
        	{
        		alt380=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 380 );
            ex->set_state( 0 );


            goto rulesynpred50_OracleDMLEx;

        }

        switch (alt380)
        {
    	case 1:
    	    // OracleDML.g:1108:17: select_key
    	    {
    	        this->followPush(FOLLOW_select_key_in_synpred50_OracleDML11414);
    	        select_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred50_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;
    	case 2:
    	    // OracleDML.g:1108:30: with_key
    	    {
    	        this->followPush(FOLLOW_with_key_in_synpred50_OracleDML11418);
    	        with_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred50_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;

        }
    }

goto rulesynpred50_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred50_OracleDMLEx: ;
}
// $ANTLR end synpred50_OracleDML

// $ANTLR start synpredRule synpred51_OracleDML
void OracleDML::msynpred51_OracleDML_fragment(  )
{
    // OracleDML.g:1130:12: ( LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:1130:13: LEFT_PAREN ( select_key | with_key )
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred51_OracleDML11697);
        if  (this->hasException())
        {
            goto rulesynpred51_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:1130:24: ( select_key | with_key )
        {
            ANTLR_UINT32 alt381=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt381=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt381=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 381 );
                ex->set_state( 0 );


                goto rulesynpred51_OracleDMLEx;

            }

            switch (alt381)
            {
        	case 1:
        	    // OracleDML.g:1130:25: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred51_OracleDML11700);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred51_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1130:36: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred51_OracleDML11702);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred51_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred51_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred51_OracleDMLEx: ;
}
// $ANTLR end synpred51_OracleDML

// $ANTLR start synpredRule synpred52_OracleDML
void OracleDML::msynpred52_OracleDML_fragment(  )
{
    // OracleDML.g:1146:15: ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )
    // OracleDML.g:1146:16: multiset_key ( LEFT_PAREN )+ ( select_key | with_key )
    {
        this->followPush(FOLLOW_multiset_key_in_synpred52_OracleDML12019);
        multiset_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred52_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:1146:29: ( LEFT_PAREN )+
        {
            int cnt382=0;

            for (;;)
            {
                ANTLR_UINT32 alt382=2;
        	switch ( this->LA(1) )
        	{
        	case LEFT_PAREN:
        		{
        			alt382=1;
        		}
        	    break;

        	}

        	switch (alt382)
        	{
        	    case 1:
        	        // OracleDML.g:1146:29: LEFT_PAREN
        	        {
        	             this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred52_OracleDML12021);
        	            if  (this->hasException())
        	            {
        	                goto rulesynpred52_OracleDMLEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return ;
        	            }



        	        }
        	        break;

        	    default:

        		if ( cnt382 >= 1 )
        		{
        		    goto loop382;
        		}
        		if (this->get_backtracking()>0)
        		{
        		    this->set_failedflag( true );
        		    return ;
        		}

        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto rulesynpred52_OracleDMLEx;
        	}
        	cnt382++;
            }
            loop382: ;	/* Jump to here if this rule does not match */
        }

        // OracleDML.g:1146:41: ( select_key | with_key )
        {
            ANTLR_UINT32 alt383=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt383=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt383=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 383 );
                ex->set_state( 0 );


                goto rulesynpred52_OracleDMLEx;

            }

            switch (alt383)
            {
        	case 1:
        	    // OracleDML.g:1146:42: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred52_OracleDML12025);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred52_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1146:53: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred52_OracleDML12027);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred52_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred52_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred52_OracleDMLEx: ;
}
// $ANTLR end synpred52_OracleDML

// $ANTLR start synpredRule synpred53_OracleDML
void OracleDML::msynpred53_OracleDML_fragment(  )
{
    // OracleDML.g:1350:14: ( default_key )
    // OracleDML.g:1350:15: default_key
    {
        this->followPush(FOLLOW_default_key_in_synpred53_OracleDML14891);
        default_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred53_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred53_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred53_OracleDMLEx: ;
}
// $ANTLR end synpred53_OracleDML

// $ANTLR start synpredRule synpred54_OracleDML
void OracleDML::msynpred54_OracleDML_fragment(  )
{
    // OracleDML.g:1357:55: ( default_key )
    // OracleDML.g:1357:56: default_key
    {
        this->followPush(FOLLOW_default_key_in_synpred54_OracleDML14962);
        default_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred54_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred54_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred54_OracleDMLEx: ;
}
// $ANTLR end synpred54_OracleDML
	// Delegated methods that appear to be a part of this
	// parser
	//
    OracleDML_OracleDMLKeys::upper_key_return OracleDML::upper_key()
    {
        return m_gOracleDMLKeys->upper_key();
    }

    OracleDML_OracleDMLKeys::nocopy_key_return OracleDML::nocopy_key()
    {
        return m_gOracleDMLKeys->nocopy_key();
    }

    OracleDML_OracleDMLKeys::elsif_key_return OracleDML::elsif_key()
    {
        return m_gOracleDMLKeys->elsif_key();
    }

    OracleDML_OracleDMLKeys::type_key_return OracleDML::type_key()
    {
        return m_gOracleDMLKeys->type_key();
    }

    OracleDML_OracleDMLKeys::segment_key_return OracleDML::segment_key()
    {
        return m_gOracleDMLKeys->segment_key();
    }

    OracleDML_OracleDMLKeys::oradata_key_return OracleDML::oradata_key()
    {
        return m_gOracleDMLKeys->oradata_key();
    }

    OracleDML_OracleDMLKeys::corresponding_key_return OracleDML::corresponding_key()
    {
        return m_gOracleDMLKeys->corresponding_key();
    }

    OracleDML_OracleDMLKeys::overriding_key_return OracleDML::overriding_key()
    {
        return m_gOracleDMLKeys->overriding_key();
    }

    OracleDML_OracleDMLKeys::coalesce_key_return OracleDML::coalesce_key()
    {
        return m_gOracleDMLKeys->coalesce_key();
    }

    OracleDML_OracleDMLKeys::validate_key_return OracleDML::validate_key()
    {
        return m_gOracleDMLKeys->validate_key();
    }

    OracleDML_OracleDMLKeys::current_time_key_return OracleDML::current_time_key()
    {
        return m_gOracleDMLKeys->current_time_key();
    }

    OracleDML_OracleDMLCommons::constraint_name_return OracleDML::constraint_name()
    {
        return m_gOracleDMLCommons->constraint_name();
    }

    OracleDML_OracleDMLKeys::sample_key_return OracleDML::sample_key()
    {
        return m_gOracleDMLKeys->sample_key();
    }

    OracleDML_OracleDMLCommons::less_than_or_equals_op_return OracleDML::less_than_or_equals_op()
    {
        return m_gOracleDMLCommons->less_than_or_equals_op();
    }

    OracleDML_OracleDMLKeys::double_key_return OracleDML::double_key()
    {
        return m_gOracleDMLKeys->double_key();
    }

    OracleDML_OracleDMLKeys::external_key_return OracleDML::external_key()
    {
        return m_gOracleDMLKeys->external_key();
    }

    OracleDML_OracleDMLKeys::substitutable_key_return OracleDML::substitutable_key()
    {
        return m_gOracleDMLKeys->substitutable_key();
    }

    OracleDML_OracleDMLCommons::into_clause_return OracleDML::into_clause()
    {
        return m_gOracleDMLCommons->into_clause();
    }

    OracleDML_OracleDMLKeys::mode_key_return OracleDML::mode_key()
    {
        return m_gOracleDMLKeys->mode_key();
    }

    OracleDML_OracleDMLKeys::timeout_key_return OracleDML::timeout_key()
    {
        return m_gOracleDMLKeys->timeout_key();
    }

    OracleDML_OracleDMLKeys::servererror_key_return OracleDML::servererror_key()
    {
        return m_gOracleDMLKeys->servererror_key();
    }

    OracleDML_OracleDMLKeys::entityescaping_key_return OracleDML::entityescaping_key()
    {
        return m_gOracleDMLKeys->entityescaping_key();
    }

    OracleDML_OracleDMLKeys::to_key_return OracleDML::to_key()
    {
        return m_gOracleDMLKeys->to_key();
    }

    OracleDML_OracleDMLKeys::binary_float_max_subnormal_key_return OracleDML::binary_float_max_subnormal_key()
    {
        return m_gOracleDMLKeys->binary_float_max_subnormal_key();
    }

    OracleDML_OracleDMLCommons::char_set_name_return OracleDML::char_set_name()
    {
        return m_gOracleDMLCommons->char_set_name();
    }

    OracleDML_OracleDMLKeys::scn_key_return OracleDML::scn_key()
    {
        return m_gOracleDMLKeys->scn_key();
    }

    OracleDML_OracleDMLKeys::timezone_minute_key_return OracleDML::timezone_minute_key()
    {
        return m_gOracleDMLKeys->timezone_minute_key();
    }

    OracleDML_OracleDMLKeys::document_key_return OracleDML::document_key()
    {
        return m_gOracleDMLKeys->document_key();
    }

    OracleDML_OracleDMLKeys::if_key_return OracleDML::if_key()
    {
        return m_gOracleDMLKeys->if_key();
    }

    OracleDML_OracleDMLKeys::greatest_key_return OracleDML::greatest_key()
    {
        return m_gOracleDMLKeys->greatest_key();
    }

    OracleDML_OracleDMLKeys::over_key_return OracleDML::over_key()
    {
        return m_gOracleDMLKeys->over_key();
    }

    OracleDML_OracleDMLKeys::xmlparse_key_return OracleDML::xmlparse_key()
    {
        return m_gOracleDMLKeys->xmlparse_key();
    }

    OracleDML_OracleDMLKeys::path_key_return OracleDML::path_key()
    {
        return m_gOracleDMLKeys->path_key();
    }

    OracleDML_OracleDMLKeys::rawtohex_key_return OracleDML::rawtohex_key()
    {
        return m_gOracleDMLKeys->rawtohex_key();
    }

    OracleDML_OracleDMLKeys::return_key_return OracleDML::return_key()
    {
        return m_gOracleDMLKeys->return_key();
    }

    OracleDML_OracleDMLKeys::xmlforest_key_return OracleDML::xmlforest_key()
    {
        return m_gOracleDMLKeys->xmlforest_key();
    }

    OracleDML_OracleDMLKeys::log_key_return OracleDML::log_key()
    {
        return m_gOracleDMLKeys->log_key();
    }

    OracleDML_OracleDMLKeys::sessiontimezone_key_return OracleDML::sessiontimezone_key()
    {
        return m_gOracleDMLKeys->sessiontimezone_key();
    }

    OracleDML_OracleDMLKeys::rpad_key_return OracleDML::rpad_key()
    {
        return m_gOracleDMLKeys->rpad_key();
    }

    OracleDML_OracleDMLKeys::instantiable_key_return OracleDML::instantiable_key()
    {
        return m_gOracleDMLKeys->instantiable_key();
    }

    OracleDML_OracleDMLKeys::alter_key_return OracleDML::alter_key()
    {
        return m_gOracleDMLKeys->alter_key();
    }

    OracleDML_OracleDMLKeys::match_key_return OracleDML::match_key()
    {
        return m_gOracleDMLKeys->match_key();
    }

    OracleDML_OracleDMLKeys::begin_key_return OracleDML::begin_key()
    {
        return m_gOracleDMLKeys->begin_key();
    }

    OracleDML_OracleDMLKeys::attribute_key_return OracleDML::attribute_key()
    {
        return m_gOracleDMLKeys->attribute_key();
    }

    OracleDML_OracleDMLKeys::constraint_key_return OracleDML::constraint_key()
    {
        return m_gOracleDMLKeys->constraint_key();
    }

    OracleDML_OracleDMLKeys::percent_rowtype_key_return OracleDML::percent_rowtype_key()
    {
        return m_gOracleDMLKeys->percent_rowtype_key();
    }

    OracleDML_OracleDMLKeys::exists_key_return OracleDML::exists_key()
    {
        return m_gOracleDMLKeys->exists_key();
    }

    OracleDML_OracleDMLKeys::uid_key_return OracleDML::uid_key()
    {
        return m_gOracleDMLKeys->uid_key();
    }

    OracleDML_OracleDMLKeys::like_key_return OracleDML::like_key()
    {
        return m_gOracleDMLKeys->like_key();
    }

    OracleDML_OracleDMLKeys::follows_key_return OracleDML::follows_key()
    {
        return m_gOracleDMLKeys->follows_key();
    }

    OracleDML_OracleDMLKeys::dump_key_return OracleDML::dump_key()
    {
        return m_gOracleDMLKeys->dump_key();
    }

    OracleDML_OracleDMLKeys::session_key_return OracleDML::session_key()
    {
        return m_gOracleDMLKeys->session_key();
    }

    OracleDML_OracleDMLKeys::auto_key_return OracleDML::auto_key()
    {
        return m_gOracleDMLKeys->auto_key();
    }

    OracleDML_OracleDMLKeys::nullif_key_return OracleDML::nullif_key()
    {
        return m_gOracleDMLKeys->nullif_key();
    }

    OracleDML_OracleDMLKeys::char_length_key_return OracleDML::char_length_key()
    {
        return m_gOracleDMLKeys->char_length_key();
    }

    OracleDML_OracleDMLKeys::shutdown_key_return OracleDML::shutdown_key()
    {
        return m_gOracleDMLKeys->shutdown_key();
    }

    OracleDML_OracleDMLKeys::not_key_return OracleDML::not_key()
    {
        return m_gOracleDMLKeys->not_key();
    }

    OracleDML_OracleDMLKeys::c_key_return OracleDML::c_key()
    {
        return m_gOracleDMLKeys->c_key();
    }

    OracleDML_OracleDMLKeys::no_key_return OracleDML::no_key()
    {
        return m_gOracleDMLKeys->no_key();
    }

    OracleDML_OracleDMLKeys::identified_key_return OracleDML::identified_key()
    {
        return m_gOracleDMLKeys->identified_key();
    }

    OracleDML_OracleDMLKeys::start_key_return OracleDML::start_key()
    {
        return m_gOracleDMLKeys->start_key();
    }

    OracleDML_OracleDMLKeys::exception_key_return OracleDML::exception_key()
    {
        return m_gOracleDMLKeys->exception_key();
    }

    OracleDML_OracleDMLKeys::modify_key_return OracleDML::modify_key()
    {
        return m_gOracleDMLKeys->modify_key();
    }

    OracleDML_OracleDMLKeys::is_key_return OracleDML::is_key()
    {
        return m_gOracleDMLKeys->is_key();
    }

    OracleDML_OracleDMLKeys::ceil_key_return OracleDML::ceil_key()
    {
        return m_gOracleDMLKeys->ceil_key();
    }

    OracleDML_OracleDMLKeys::grant_key_return OracleDML::grant_key()
    {
        return m_gOracleDMLKeys->grant_key();
    }

    OracleDML_OracleDMLKeys::final_key_return OracleDML::final_key()
    {
        return m_gOracleDMLKeys->final_key();
    }

    OracleDML_OracleDMLKeys::exclusive_key_return OracleDML::exclusive_key()
    {
        return m_gOracleDMLKeys->exclusive_key();
    }

    OracleDML_OracleDMLKeys::inline_key_return OracleDML::inline_key()
    {
        return m_gOracleDMLKeys->inline_key();
    }

    OracleDML_OracleDMLKeys::national_key_return OracleDML::national_key()
    {
        return m_gOracleDMLKeys->national_key();
    }

    OracleDML_OracleDMLKeys::decompose_key_return OracleDML::decompose_key()
    {
        return m_gOracleDMLKeys->decompose_key();
    }

    OracleDML_OracleDMLKeys::out_key_return OracleDML::out_key()
    {
        return m_gOracleDMLKeys->out_key();
    }

    OracleDML_OracleDMLKeys::hash_key_return OracleDML::hash_key()
    {
        return m_gOracleDMLKeys->hash_key();
    }

    OracleDML_OracleDMLKeys::serially_reusable_key_return OracleDML::serially_reusable_key()
    {
        return m_gOracleDMLKeys->serially_reusable_key();
    }

    OracleDML_OracleDMLKeys::bulk_key_return OracleDML::bulk_key()
    {
        return m_gOracleDMLKeys->bulk_key();
    }

    OracleDML_OracleDMLCommons::reference_model_name_return OracleDML::reference_model_name()
    {
        return m_gOracleDMLCommons->reference_model_name();
    }

    OracleDML_OracleDMLKeys::result_cache_key_return OracleDML::result_cache_key()
    {
        return m_gOracleDMLKeys->result_cache_key();
    }

    OracleDML_OracleDMLKeys::extract_key_return OracleDML::extract_key()
    {
        return m_gOracleDMLKeys->extract_key();
    }

    OracleDML_OracleDMLKeys::the_key_return OracleDML::the_key()
    {
        return m_gOracleDMLKeys->the_key();
    }

    OracleDML_OracleDMLKeys::dsinterval_unconstrained_key_return OracleDML::dsinterval_unconstrained_key()
    {
        return m_gOracleDMLKeys->dsinterval_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::object_key_return OracleDML::object_key()
    {
        return m_gOracleDMLKeys->object_key();
    }

    OracleDML_OracleDMLKeys::substr_key_return OracleDML::substr_key()
    {
        return m_gOracleDMLKeys->substr_key();
    }

    OracleDML_OracleDMLKeys::corrupt_xid_all_key_return OracleDML::corrupt_xid_all_key()
    {
        return m_gOracleDMLKeys->corrupt_xid_all_key();
    }

    OracleDML_OracleDMLKeys::record_key_return OracleDML::record_key()
    {
        return m_gOracleDMLKeys->record_key();
    }

    OracleDML_OracleDMLKeys::versions_key_return OracleDML::versions_key()
    {
        return m_gOracleDMLKeys->versions_key();
    }

    OracleDML_OracleDMLKeys::xml_key_return OracleDML::xml_key()
    {
        return m_gOracleDMLKeys->xml_key();
    }

    OracleDML_OracleDMLKeys::to_char_key_return OracleDML::to_char_key()
    {
        return m_gOracleDMLKeys->to_char_key();
    }

    OracleDML_OracleDMLCommons::tableview_name_return OracleDML::tableview_name()
    {
        return m_gOracleDMLCommons->tableview_name();
    }

    OracleDML_OracleDMLKeys::query_key_return OracleDML::query_key()
    {
        return m_gOracleDMLKeys->query_key();
    }

    OracleDML_OracleDMLKeys::nested_key_return OracleDML::nested_key()
    {
        return m_gOracleDMLKeys->nested_key();
    }

    OracleDML_OracleDMLKeys::logon_key_return OracleDML::logon_key()
    {
        return m_gOracleDMLKeys->logon_key();
    }

    OracleDML_OracleDMLKeys::binary_float_key_return OracleDML::binary_float_key()
    {
        return m_gOracleDMLKeys->binary_float_key();
    }

    OracleDML_OracleDMLKeys::into_key_return OracleDML::into_key()
    {
        return m_gOracleDMLKeys->into_key();
    }

    OracleDML_OracleDMLKeys::full_key_return OracleDML::full_key()
    {
        return m_gOracleDMLKeys->full_key();
    }

    OracleDML_OracleDMLKeys::current_timestamp_key_return OracleDML::current_timestamp_key()
    {
        return m_gOracleDMLKeys->current_timestamp_key();
    }

    OracleDML_OracleDMLKeys::nomaxvalue_key_return OracleDML::nomaxvalue_key()
    {
        return m_gOracleDMLKeys->nomaxvalue_key();
    }

    OracleDML_OracleDMLKeys::binary_float_min_subnormal_key_return OracleDML::binary_float_min_subnormal_key()
    {
        return m_gOracleDMLKeys->binary_float_min_subnormal_key();
    }

    OracleDML_OracleDMLKeys::isolation_key_return OracleDML::isolation_key()
    {
        return m_gOracleDMLKeys->isolation_key();
    }

    OracleDML_OracleDMLKeys::save_key_return OracleDML::save_key()
    {
        return m_gOracleDMLKeys->save_key();
    }

    OracleDML_OracleDMLKeys::parallel_key_return OracleDML::parallel_key()
    {
        return m_gOracleDMLKeys->parallel_key();
    }

    OracleDML_OracleDMLKeys::immediate_key_return OracleDML::immediate_key()
    {
        return m_gOracleDMLKeys->immediate_key();
    }

    OracleDML_OracleDMLKeys::value_key_return OracleDML::value_key()
    {
        return m_gOracleDMLKeys->value_key();
    }

    OracleDML_OracleDMLKeys::increment_key_return OracleDML::increment_key()
    {
        return m_gOracleDMLKeys->increment_key();
    }

    OracleDML_OracleDMLKeys::row_key_return OracleDML::row_key()
    {
        return m_gOracleDMLKeys->row_key();
    }

    OracleDML_OracleDMLCommons::column_name_return OracleDML::column_name()
    {
        return m_gOracleDMLCommons->column_name();
    }

    OracleDML_OracleDMLKeys::resumable_key_return OracleDML::resumable_key()
    {
        return m_gOracleDMLKeys->resumable_key();
    }

    OracleDML_OracleDMLKeys::canonical_key_return OracleDML::canonical_key()
    {
        return m_gOracleDMLKeys->canonical_key();
    }

    OracleDML_OracleDMLKeys::binary_double_min_normal_key_return OracleDML::binary_double_min_normal_key()
    {
        return m_gOracleDMLKeys->binary_double_min_normal_key();
    }

    OracleDML_OracleDMLKeys::range_key_return OracleDML::range_key()
    {
        return m_gOracleDMLKeys->range_key();
    }

    OracleDML_OracleDMLKeys::agent_key_return OracleDML::agent_key()
    {
        return m_gOracleDMLKeys->agent_key();
    }

    OracleDML_OracleDMLKeys::main_key_return OracleDML::main_key()
    {
        return m_gOracleDMLKeys->main_key();
    }

    OracleDML_OracleDMLCommons::function_name_return OracleDML::function_name()
    {
        return m_gOracleDMLCommons->function_name();
    }

    OracleDML_OracleDMLKeys::replace_key_return OracleDML::replace_key()
    {
        return m_gOracleDMLKeys->replace_key();
    }

    OracleDML_OracleDMLKeys::preceding_key_return OracleDML::preceding_key()
    {
        return m_gOracleDMLKeys->preceding_key();
    }

    OracleDML_OracleDMLKeys::xmlpi_key_return OracleDML::xmlpi_key()
    {
        return m_gOracleDMLKeys->xmlpi_key();
    }

    OracleDML_OracleDMLKeys::startup_key_return OracleDML::startup_key()
    {
        return m_gOracleDMLKeys->startup_key();
    }

    OracleDML_OracleDMLKeys::respect_key_return OracleDML::respect_key()
    {
        return m_gOracleDMLKeys->respect_key();
    }

    OracleDML_OracleDMLKeys::percent_notfound_key_return OracleDML::percent_notfound_key()
    {
        return m_gOracleDMLKeys->percent_notfound_key();
    }

    OracleDML_OracleDMLKeys::automatic_key_return OracleDML::automatic_key()
    {
        return m_gOracleDMLKeys->automatic_key();
    }

    OracleDML_OracleDMLKeys::first_value_key_return OracleDML::first_value_key()
    {
        return m_gOracleDMLKeys->first_value_key();
    }

    OracleDML_OracleDMLKeys::inout_key_return OracleDML::inout_key()
    {
        return m_gOracleDMLKeys->inout_key();
    }

    OracleDML_OracleDMLKeys::avg_key_return OracleDML::avg_key()
    {
        return m_gOracleDMLKeys->avg_key();
    }

    OracleDML_OracleDMLKeys::audit_key_return OracleDML::audit_key()
    {
        return m_gOracleDMLKeys->audit_key();
    }

    OracleDML_OracleDMLKeys::matched_key_return OracleDML::matched_key()
    {
        return m_gOracleDMLKeys->matched_key();
    }

    OracleDML_OracleDMLKeys::package_key_return OracleDML::package_key()
    {
        return m_gOracleDMLKeys->package_key();
    }

    OracleDML_OracleDMLCommons::general_element_return OracleDML::general_element()
    {
        return m_gOracleDMLCommons->general_element();
    }

    OracleDML_OracleDMLKeys::local_key_return OracleDML::local_key()
    {
        return m_gOracleDMLKeys->local_key();
    }

    OracleDML_OracleDMLKeys::bfile_key_return OracleDML::bfile_key()
    {
        return m_gOracleDMLKeys->bfile_key();
    }

    OracleDML_OracleDMLKeys::name_key_return OracleDML::name_key()
    {
        return m_gOracleDMLKeys->name_key();
    }

    OracleDML_OracleDMLKeys::unique_key_return OracleDML::unique_key()
    {
        return m_gOracleDMLKeys->unique_key();
    }

    OracleDML_OracleDMLKeys::settings_key_return OracleDML::settings_key()
    {
        return m_gOracleDMLKeys->settings_key();
    }

    OracleDML_OracleDMLKeys::cascade_key_return OracleDML::cascade_key()
    {
        return m_gOracleDMLKeys->cascade_key();
    }

    OracleDML_OracleDMLKeys::sign_key_return OracleDML::sign_key()
    {
        return m_gOracleDMLKeys->sign_key();
    }

    OracleDML_OracleDMLKeys::enable_key_return OracleDML::enable_key()
    {
        return m_gOracleDMLKeys->enable_key();
    }

    OracleDML_OracleDMLKeys::multiset_key_return OracleDML::multiset_key()
    {
        return m_gOracleDMLKeys->multiset_key();
    }

    OracleDML_OracleDMLKeys::serveroutput_key_return OracleDML::serveroutput_key()
    {
        return m_gOracleDMLKeys->serveroutput_key();
    }

    OracleDML_OracleDMLKeys::character_length_key_return OracleDML::character_length_key()
    {
        return m_gOracleDMLKeys->character_length_key();
    }

    OracleDML_OracleDMLKeys::submultiset_key_return OracleDML::submultiset_key()
    {
        return m_gOracleDMLKeys->submultiset_key();
    }

    OracleDML_OracleDMLKeys::insert_key_return OracleDML::insert_key()
    {
        return m_gOracleDMLKeys->insert_key();
    }

    OracleDML_OracleDMLKeys::referencing_key_return OracleDML::referencing_key()
    {
        return m_gOracleDMLKeys->referencing_key();
    }

    OracleDML_OracleDMLKeys::create_key_return OracleDML::create_key()
    {
        return m_gOracleDMLKeys->create_key();
    }

    OracleDML_OracleDMLCommons::respect_or_ignore_nulls_return OracleDML::respect_or_ignore_nulls()
    {
        return m_gOracleDMLCommons->respect_or_ignore_nulls();
    }

    OracleDML_OracleDMLKeys::sequence_key_return OracleDML::sequence_key()
    {
        return m_gOracleDMLKeys->sequence_key();
    }

    OracleDML_OracleDMLKeys::self_key_return OracleDML::self_key()
    {
        return m_gOracleDMLKeys->self_key();
    }

    OracleDML_OracleDMLKeys::parent_key_return OracleDML::parent_key()
    {
        return m_gOracleDMLKeys->parent_key();
    }

    OracleDML_OracleDMLKeys::true_key_return OracleDML::true_key()
    {
        return m_gOracleDMLKeys->true_key();
    }

    OracleDML_OracleDMLKeys::new_key_return OracleDML::new_key()
    {
        return m_gOracleDMLKeys->new_key();
    }

    OracleDML_OracleDMLKeys::call_key_return OracleDML::call_key()
    {
        return m_gOracleDMLKeys->call_key();
    }

    OracleDML_OracleDMLKeys::logoff_key_return OracleDML::logoff_key()
    {
        return m_gOracleDMLKeys->logoff_key();
    }

    OracleDML_OracleDMLKeys::having_key_return OracleDML::having_key()
    {
        return m_gOracleDMLKeys->having_key();
    }

    OracleDML_OracleDMLKeys::deferred_key_return OracleDML::deferred_key()
    {
        return m_gOracleDMLKeys->deferred_key();
    }

    OracleDML_OracleDMLKeys::xmlcast_key_return OracleDML::xmlcast_key()
    {
        return m_gOracleDMLKeys->xmlcast_key();
    }

    OracleDML_OracleDMLKeys::invalidate_key_return OracleDML::invalidate_key()
    {
        return m_gOracleDMLKeys->invalidate_key();
    }

    OracleDML_OracleDMLKeys::result_key_return OracleDML::result_key()
    {
        return m_gOracleDMLKeys->result_key();
    }

    OracleDML_OracleDMLKeys::pivot_key_return OracleDML::pivot_key()
    {
        return m_gOracleDMLKeys->pivot_key();
    }

    OracleDML_OracleDMLKeys::current_key_return OracleDML::current_key()
    {
        return m_gOracleDMLKeys->current_key();
    }

    OracleDML_OracleDMLKeys::floor_key_return OracleDML::floor_key()
    {
        return m_gOracleDMLKeys->floor_key();
    }

    OracleDML_OracleDMLKeys::initcap_key_return OracleDML::initcap_key()
    {
        return m_gOracleDMLKeys->initcap_key();
    }

    OracleDML_OracleDMLKeys::with_key_return OracleDML::with_key()
    {
        return m_gOracleDMLKeys->with_key();
    }

    OracleDML_OracleDMLKeys::chartorowid_key_return OracleDML::chartorowid_key()
    {
        return m_gOracleDMLKeys->chartorowid_key();
    }

    OracleDML_OracleDMLKeys::exit_key_return OracleDML::exit_key()
    {
        return m_gOracleDMLKeys->exit_key();
    }

    OracleDML_OracleDMLKeys::trunc_key_return OracleDML::trunc_key()
    {
        return m_gOracleDMLKeys->trunc_key();
    }

    OracleDML_OracleDMLCommons::id_expression_return OracleDML::id_expression(int toraTokenType, int usageType)
    {
        return m_gOracleDMLCommons->id_expression(toraTokenType, usageType);
    }

    OracleDML_OracleDMLKeys::nav_key_return OracleDML::nav_key()
    {
        return m_gOracleDMLKeys->nav_key();
    }

    OracleDML_OracleDMLKeys::date_key_return OracleDML::date_key()
    {
        return m_gOracleDMLKeys->date_key();
    }

    OracleDML_OracleDMLKeys::hide_key_return OracleDML::hide_key()
    {
        return m_gOracleDMLKeys->hide_key();
    }

    OracleDML_OracleDMLKeys::subtype_key_return OracleDML::subtype_key()
    {
        return m_gOracleDMLKeys->subtype_key();
    }

    OracleDML_OracleDMLKeys::serializable_key_return OracleDML::serializable_key()
    {
        return m_gOracleDMLKeys->serializable_key();
    }

    OracleDML_OracleDMLKeys::role_key_return OracleDML::role_key()
    {
        return m_gOracleDMLKeys->role_key();
    }

    OracleDML_OracleDMLKeys::pls_integer_key_return OracleDML::pls_integer_key()
    {
        return m_gOracleDMLKeys->pls_integer_key();
    }

    OracleDML_OracleDMLKeys::time_key_return OracleDML::time_key()
    {
        return m_gOracleDMLKeys->time_key();
    }

    OracleDML_OracleDMLKeys::power_key_return OracleDML::power_key()
    {
        return m_gOracleDMLKeys->power_key();
    }

    OracleDML_OracleDMLKeys::first_key_return OracleDML::first_key()
    {
        return m_gOracleDMLKeys->first_key();
    }

    OracleDML_OracleDMLKeys::varying_key_return OracleDML::varying_key()
    {
        return m_gOracleDMLKeys->varying_key();
    }

    OracleDML_OracleDMLKeys::indexed_key_return OracleDML::indexed_key()
    {
        return m_gOracleDMLKeys->indexed_key();
    }

    OracleDML_OracleDMLKeys::snapshot_key_return OracleDML::snapshot_key()
    {
        return m_gOracleDMLKeys->snapshot_key();
    }

    OracleDML_OracleDMLKeys::subpartition_key_return OracleDML::subpartition_key()
    {
        return m_gOracleDMLKeys->subpartition_key();
    }

    OracleDML_OracleDMLKeys::round_key_return OracleDML::round_key()
    {
        return m_gOracleDMLKeys->round_key();
    }

    OracleDML_OracleDMLKeys::db_role_change_key_return OracleDML::db_role_change_key()
    {
        return m_gOracleDMLKeys->db_role_change_key();
    }

    OracleDML_OracleDMLKeys::constant_key_return OracleDML::constant_key()
    {
        return m_gOracleDMLKeys->constant_key();
    }

    OracleDML_OracleDMLKeys::only_key_return OracleDML::only_key()
    {
        return m_gOracleDMLKeys->only_key();
    }

    OracleDML_OracleDMLKeys::pragma_key_return OracleDML::pragma_key()
    {
        return m_gOracleDMLKeys->pragma_key();
    }

    OracleDML_OracleDMLKeys::long_key_return OracleDML::long_key()
    {
        return m_gOracleDMLKeys->long_key();
    }

    OracleDML_OracleDMLKeys::bit_length_key_return OracleDML::bit_length_key()
    {
        return m_gOracleDMLKeys->bit_length_key();
    }

    OracleDML_OracleDMLKeys::sequential_key_return OracleDML::sequential_key()
    {
        return m_gOracleDMLKeys->sequential_key();
    }

    OracleDML_OracleDMLKeys::varchar2_key_return OracleDML::varchar2_key()
    {
        return m_gOracleDMLKeys->varchar2_key();
    }

    OracleDML_OracleDMLKeys::disassociate_key_return OracleDML::disassociate_key()
    {
        return m_gOracleDMLKeys->disassociate_key();
    }

    OracleDML_OracleDMLCommons::table_element_return OracleDML::table_element()
    {
        return m_gOracleDMLCommons->table_element();
    }

    OracleDML_OracleDMLKeys::byte_key_return OracleDML::byte_key()
    {
        return m_gOracleDMLKeys->byte_key();
    }

    OracleDML_OracleDMLKeys::exceptions_key_return OracleDML::exceptions_key()
    {
        return m_gOracleDMLKeys->exceptions_key();
    }

    OracleDML_OracleDMLKeys::ascii_key_return OracleDML::ascii_key()
    {
        return m_gOracleDMLKeys->ascii_key();
    }

    OracleDML_OracleDMLKeys::before_key_return OracleDML::before_key()
    {
        return m_gOracleDMLKeys->before_key();
    }

    OracleDML_OracleDMLKeys::siblings_key_return OracleDML::siblings_key()
    {
        return m_gOracleDMLKeys->siblings_key();
    }

    OracleDML_OracleDMLKeys::specification_key_return OracleDML::specification_key()
    {
        return m_gOracleDMLKeys->specification_key();
    }

    OracleDML_OracleDMLKeys::nocycle_key_return OracleDML::nocycle_key()
    {
        return m_gOracleDMLKeys->nocycle_key();
    }

    OracleDML_OracleDMLKeys::search_key_return OracleDML::search_key()
    {
        return m_gOracleDMLKeys->search_key();
    }

    OracleDML_OracleDMLKeys::rowid_key_return OracleDML::rowid_key()
    {
        return m_gOracleDMLKeys->rowid_key();
    }

    OracleDML_OracleDMLKeys::skip_key_return OracleDML::skip_key()
    {
        return m_gOracleDMLKeys->skip_key();
    }

    OracleDML_OracleDMLKeys::raise_key_return OracleDML::raise_key()
    {
        return m_gOracleDMLKeys->raise_key();
    }

    OracleDML_OracleDMLKeys::locked_key_return OracleDML::locked_key()
    {
        return m_gOracleDMLKeys->locked_key();
    }

    OracleDML_OracleDMLCommons::column_alias_return OracleDML::column_alias()
    {
        return m_gOracleDMLCommons->column_alias();
    }

    OracleDML_OracleDMLKeys::second_key_return OracleDML::second_key()
    {
        return m_gOracleDMLKeys->second_key();
    }

    OracleDML_OracleDMLKeys::failure_key_return OracleDML::failure_key()
    {
        return m_gOracleDMLKeys->failure_key();
    }

    OracleDML_OracleDMLKeys::dimension_key_return OracleDML::dimension_key()
    {
        return m_gOracleDMLKeys->dimension_key();
    }

    OracleDML_OracleDMLKeys::group_key_return OracleDML::group_key()
    {
        return m_gOracleDMLKeys->group_key();
    }

    OracleDML_OracleDMLKeys::to_date_key_return OracleDML::to_date_key()
    {
        return m_gOracleDMLKeys->to_date_key();
    }

    OracleDML_OracleDMLKeys::ref_key_return OracleDML::ref_key()
    {
        return m_gOracleDMLKeys->ref_key();
    }

    OracleDML_OracleDMLKeys::count_key_return OracleDML::count_key()
    {
        return m_gOracleDMLKeys->count_key();
    }

    OracleDML_OracleDMLKeys::parallel_enable_key_return OracleDML::parallel_enable_key()
    {
        return m_gOracleDMLKeys->parallel_enable_key();
    }

    OracleDML_OracleDMLKeys::character_key_return OracleDML::character_key()
    {
        return m_gOracleDMLKeys->character_key();
    }

    OracleDML_OracleDMLKeys::rollback_key_return OracleDML::rollback_key()
    {
        return m_gOracleDMLKeys->rollback_key();
    }

    OracleDML_OracleDMLKeys::reference_key_return OracleDML::reference_key()
    {
        return m_gOracleDMLKeys->reference_key();
    }

    OracleDML_OracleDMLKeys::suspend_key_return OracleDML::suspend_key()
    {
        return m_gOracleDMLKeys->suspend_key();
    }

    OracleDML_OracleDMLKeys::revoke_key_return OracleDML::revoke_key()
    {
        return m_gOracleDMLKeys->revoke_key();
    }

    OracleDML_OracleDMLKeys::delete_key_return OracleDML::delete_key()
    {
        return m_gOracleDMLKeys->delete_key();
    }

    OracleDML_OracleDMLKeys::variable_key_return OracleDML::variable_key()
    {
        return m_gOracleDMLKeys->variable_key();
    }

    OracleDML_OracleDMLKeys::maxvalue_key_return OracleDML::maxvalue_key()
    {
        return m_gOracleDMLKeys->maxvalue_key();
    }

    OracleDML_OracleDMLKeys::measures_key_return OracleDML::measures_key()
    {
        return m_gOracleDMLKeys->measures_key();
    }

    OracleDML_OracleDMLKeys::off_key_return OracleDML::off_key()
    {
        return m_gOracleDMLKeys->off_key();
    }

    OracleDML_OracleDMLKeys::ddl_key_return OracleDML::ddl_key()
    {
        return m_gOracleDMLKeys->ddl_key();
    }

    OracleDML_OracleDMLKeys::savepoint_key_return OracleDML::savepoint_key()
    {
        return m_gOracleDMLKeys->savepoint_key();
    }

    OracleDML_OracleDMLKeys::empty_key_return OracleDML::empty_key()
    {
        return m_gOracleDMLKeys->empty_key();
    }

    OracleDML_OracleDMLCommons::function_argument_modeling_return OracleDML::function_argument_modeling()
    {
        return m_gOracleDMLCommons->function_argument_modeling();
    }

    OracleDML_OracleDMLKeys::xmlcolattval_key_return OracleDML::xmlcolattval_key()
    {
        return m_gOracleDMLKeys->xmlcolattval_key();
    }

    OracleDML_OracleDMLKeys::sqlerror_key_return OracleDML::sqlerror_key()
    {
        return m_gOracleDMLKeys->sqlerror_key();
    }

    OracleDML_OracleDMLKeys::userenv_key_return OracleDML::userenv_key()
    {
        return m_gOracleDMLKeys->userenv_key();
    }

    OracleDML_OracleDMLKeys::varray_key_return OracleDML::varray_key()
    {
        return m_gOracleDMLKeys->varray_key();
    }

    OracleDML_OracleDMLKeys::nominvalue_key_return OracleDML::nominvalue_key()
    {
        return m_gOracleDMLKeys->nominvalue_key();
    }

    OracleDML_OracleDMLKeys::work_key_return OracleDML::work_key()
    {
        return m_gOracleDMLKeys->work_key();
    }

    OracleDML_OracleDMLKeys::oid_key_return OracleDML::oid_key()
    {
        return m_gOracleDMLKeys->oid_key();
    }

    OracleDML_OracleDMLKeys::data_key_return OracleDML::data_key()
    {
        return m_gOracleDMLKeys->data_key();
    }

    OracleDML_OracleDMLKeys::least_key_return OracleDML::least_key()
    {
        return m_gOracleDMLKeys->least_key();
    }

    OracleDML_OracleDMLKeys::timestamp_key_return OracleDML::timestamp_key()
    {
        return m_gOracleDMLKeys->timestamp_key();
    }

    OracleDML_OracleDMLCommons::datatype_return OracleDML::datatype()
    {
        return m_gOracleDMLCommons->datatype();
    }

    OracleDML_OracleDMLKeys::index_key_return OracleDML::index_key()
    {
        return m_gOracleDMLKeys->index_key();
    }

    OracleDML_OracleDMLCommons::link_name_return OracleDML::link_name()
    {
        return m_gOracleDMLCommons->link_name();
    }

    OracleDML_OracleDMLKeys::wait_key_return OracleDML::wait_key()
    {
        return m_gOracleDMLKeys->wait_key();
    }

    OracleDML_OracleDMLKeys::by_key_return OracleDML::by_key()
    {
        return m_gOracleDMLKeys->by_key();
    }

    OracleDML_OracleDMLKeys::success_key_return OracleDML::success_key()
    {
        return m_gOracleDMLKeys->success_key();
    }

    OracleDML_OracleDMLKeys::minvalue_key_return OracleDML::minvalue_key()
    {
        return m_gOracleDMLKeys->minvalue_key();
    }

    OracleDML_OracleDMLKeys::char_key_return OracleDML::char_key()
    {
        return m_gOracleDMLKeys->char_key();
    }

    OracleDML_OracleDMLKeys::nextval_key_return OracleDML::nextval_key()
    {
        return m_gOracleDMLKeys->nextval_key();
    }

    OracleDML_OracleDMLKeys::customdatum_key_return OracleDML::customdatum_key()
    {
        return m_gOracleDMLKeys->customdatum_key();
    }

    OracleDML_OracleDMLKeys::yminterval_unconstrained_key_return OracleDML::yminterval_unconstrained_key()
    {
        return m_gOracleDMLKeys->yminterval_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::like4_key_return OracleDML::like4_key()
    {
        return m_gOracleDMLKeys->like4_key();
    }

    OracleDML_OracleDMLCommons::concatenation_op_return OracleDML::concatenation_op()
    {
        return m_gOracleDMLCommons->concatenation_op();
    }

    OracleDML_OracleDMLKeys::truncate_key_return OracleDML::truncate_key()
    {
        return m_gOracleDMLKeys->truncate_key();
    }

    OracleDML_OracleDMLKeys::select_key_return OracleDML::select_key()
    {
        return m_gOracleDMLKeys->select_key();
    }

    OracleDML_OracleDMLKeys::a_key_return OracleDML::a_key()
    {
        return m_gOracleDMLKeys->a_key();
    }

    OracleDML_OracleDMLKeys::length_key_return OracleDML::length_key()
    {
        return m_gOracleDMLKeys->length_key();
    }

    OracleDML_OracleDMLKeys::at_key_return OracleDML::at_key()
    {
        return m_gOracleDMLKeys->at_key();
    }

    OracleDML_OracleDMLKeys::when_key_return OracleDML::when_key()
    {
        return m_gOracleDMLKeys->when_key();
    }

    OracleDML_OracleDMLKeys::old_key_return OracleDML::old_key()
    {
        return m_gOracleDMLKeys->old_key();
    }

    OracleDML_OracleDMLKeys::binary_double_nan_key_return OracleDML::binary_double_nan_key()
    {
        return m_gOracleDMLKeys->binary_double_nan_key();
    }

    OracleDML_OracleDMLKeys::binary_double_key_return OracleDML::binary_double_key()
    {
        return m_gOracleDMLKeys->binary_double_key();
    }

    OracleDML_OracleDMLKeys::intersect_key_return OracleDML::intersect_key()
    {
        return m_gOracleDMLKeys->intersect_key();
    }

    OracleDML_OracleDMLKeys::lower_key_return OracleDML::lower_key()
    {
        return m_gOracleDMLKeys->lower_key();
    }

    OracleDML_OracleDMLKeys::warning_key_return OracleDML::warning_key()
    {
        return m_gOracleDMLKeys->warning_key();
    }

    OracleDML_OracleDMLKeys::treat_key_return OracleDML::treat_key()
    {
        return m_gOracleDMLKeys->treat_key();
    }

    OracleDML_OracleDMLKeys::noaudit_key_return OracleDML::noaudit_key()
    {
        return m_gOracleDMLKeys->noaudit_key();
    }

    OracleDML_OracleDMLKeys::each_key_return OracleDML::each_key()
    {
        return m_gOracleDMLKeys->each_key();
    }

    OracleDML_OracleDMLKeys::number_key_return OracleDML::number_key()
    {
        return m_gOracleDMLKeys->number_key();
    }

    OracleDML_OracleDMLKeys::nclob_key_return OracleDML::nclob_key()
    {
        return m_gOracleDMLKeys->nclob_key();
    }

    OracleDML_OracleDMLCommons::numeric_return OracleDML::numeric()
    {
        return m_gOracleDMLCommons->numeric();
    }

    OracleDML_OracleDMLKeys::and_key_return OracleDML::and_key()
    {
        return m_gOracleDMLKeys->and_key();
    }

    OracleDML_OracleDMLKeys::precision_key_return OracleDML::precision_key()
    {
        return m_gOracleDMLKeys->precision_key();
    }

    OracleDML_OracleDMLKeys::level_key_return OracleDML::level_key()
    {
        return m_gOracleDMLKeys->level_key();
    }

    OracleDML_OracleDMLCommons::current_of_clause_return OracleDML::current_of_clause()
    {
        return m_gOracleDMLCommons->current_of_clause();
    }

    OracleDML_OracleDMLCommons::procedure_name_return OracleDML::procedure_name()
    {
        return m_gOracleDMLCommons->procedure_name();
    }

    OracleDML_OracleDMLCommons::implementation_type_name_return OracleDML::implementation_type_name()
    {
        return m_gOracleDMLCommons->implementation_type_name();
    }

    OracleDML_OracleDMLKeys::natural_key_return OracleDML::natural_key()
    {
        return m_gOracleDMLKeys->natural_key();
    }

    OracleDML_OracleDMLCommons::alias_quoted_string_return OracleDML::alias_quoted_string(int toraTokenType, int usageType)
    {
        return m_gOracleDMLCommons->alias_quoted_string(toraTokenType, usageType);
    }

    OracleDML_OracleDMLKeys::infinite_key_return OracleDML::infinite_key()
    {
        return m_gOracleDMLKeys->infinite_key();
    }

    OracleDML_OracleDMLKeys::advise_key_return OracleDML::advise_key()
    {
        return m_gOracleDMLKeys->advise_key();
    }

    OracleDML_OracleDMLKeys::bit_key_return OracleDML::bit_key()
    {
        return m_gOracleDMLKeys->bit_key();
    }

    OracleDML_OracleDMLKeys::xmlserialize_key_return OracleDML::xmlserialize_key()
    {
        return m_gOracleDMLKeys->xmlserialize_key();
    }

    OracleDML_OracleDMLKeys::interval_key_return OracleDML::interval_key()
    {
        return m_gOracleDMLKeys->interval_key();
    }

    OracleDML_OracleDMLKeys::schemacheck_key_return OracleDML::schemacheck_key()
    {
        return m_gOracleDMLKeys->schemacheck_key();
    }

    OracleDML_OracleDMLKeys::rtrim_key_return OracleDML::rtrim_key()
    {
        return m_gOracleDMLKeys->rtrim_key();
    }

    OracleDML_OracleDMLCommons::collection_name_return OracleDML::collection_name()
    {
        return m_gOracleDMLCommons->collection_name();
    }

    OracleDML_OracleDMLKeys::none_key_return OracleDML::none_key()
    {
        return m_gOracleDMLKeys->none_key();
    }

    OracleDML_OracleDMLKeys::present_key_return OracleDML::present_key()
    {
        return m_gOracleDMLKeys->present_key();
    }

    OracleDML_OracleDMLKeys::dec_key_return OracleDML::dec_key()
    {
        return m_gOracleDMLKeys->dec_key();
    }

    OracleDML_OracleDMLKeys::percent_type_key_return OracleDML::percent_type_key()
    {
        return m_gOracleDMLKeys->percent_type_key();
    }

    OracleDML_OracleDMLKeys::rollup_key_return OracleDML::rollup_key()
    {
        return m_gOracleDMLKeys->rollup_key();
    }

    OracleDML_OracleDMLKeys::naturaln_key_return OracleDML::naturaln_key()
    {
        return m_gOracleDMLKeys->naturaln_key();
    }

    OracleDML_OracleDMLKeys::upsert_key_return OracleDML::upsert_key()
    {
        return m_gOracleDMLKeys->upsert_key();
    }

    OracleDML_OracleDMLKeys::user_key_return OracleDML::user_key()
    {
        return m_gOracleDMLKeys->user_key();
    }

    OracleDML_OracleDMLKeys::transaction_key_return OracleDML::transaction_key()
    {
        return m_gOracleDMLKeys->transaction_key();
    }

    OracleDML_OracleDMLKeys::compatibility_key_return OracleDML::compatibility_key()
    {
        return m_gOracleDMLKeys->compatibility_key();
    }

    OracleDML_OracleDMLKeys::mlslabel_key_return OracleDML::mlslabel_key()
    {
        return m_gOracleDMLKeys->mlslabel_key();
    }

    OracleDML_OracleDMLKeys::case_key_return OracleDML::case_key()
    {
        return m_gOracleDMLKeys->case_key();
    }

    OracleDML_OracleDMLKeys::noorder_key_return OracleDML::noorder_key()
    {
        return m_gOracleDMLKeys->noorder_key();
    }

    OracleDML_OracleDMLKeys::current_date_key_return OracleDML::current_date_key()
    {
        return m_gOracleDMLKeys->current_date_key();
    }

    OracleDML_OracleDMLKeys::force_key_return OracleDML::force_key()
    {
        return m_gOracleDMLKeys->force_key();
    }

    OracleDML_OracleDMLCommons::savepoint_name_return OracleDML::savepoint_name()
    {
        return m_gOracleDMLCommons->savepoint_name();
    }

    OracleDML_OracleDMLKeys::on_key_return OracleDML::on_key()
    {
        return m_gOracleDMLKeys->on_key();
    }

    OracleDML_OracleDMLKeys::nulls_key_return OracleDML::nulls_key()
    {
        return m_gOracleDMLKeys->nulls_key();
    }

    OracleDML_OracleDMLKeys::current_user_key_return OracleDML::current_user_key()
    {
        return m_gOracleDMLKeys->current_user_key();
    }

    OracleDML_OracleDMLKeys::option_key_return OracleDML::option_key()
    {
        return m_gOracleDMLKeys->option_key();
    }

    OracleDML_OracleDMLKeys::context_key_return OracleDML::context_key()
    {
        return m_gOracleDMLKeys->context_key();
    }

    OracleDML_OracleDMLKeys::whenever_key_return OracleDML::whenever_key()
    {
        return m_gOracleDMLKeys->whenever_key();
    }

    OracleDML_OracleDMLKeys::relies_on_key_return OracleDML::relies_on_key()
    {
        return m_gOracleDMLKeys->relies_on_key();
    }

    OracleDML_OracleDMLKeys::batch_key_return OracleDML::batch_key()
    {
        return m_gOracleDMLKeys->batch_key();
    }

    OracleDML_OracleDMLKeys::then_key_return OracleDML::then_key()
    {
        return m_gOracleDMLKeys->then_key();
    }

    OracleDML_OracleDMLKeys::instr_key_return OracleDML::instr_key()
    {
        return m_gOracleDMLKeys->instr_key();
    }

    OracleDML_OracleDMLKeys::timestamp_ltz_unconstrained_key_return OracleDML::timestamp_ltz_unconstrained_key()
    {
        return m_gOracleDMLKeys->timestamp_ltz_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::ignore_key_return OracleDML::ignore_key()
    {
        return m_gOracleDMLKeys->ignore_key();
    }

    OracleDML_OracleDMLKeys::connect_by_root_key_return OracleDML::connect_by_root_key()
    {
        return m_gOracleDMLKeys->connect_by_root_key();
    }

    OracleDML_OracleDMLKeys::limit_key_return OracleDML::limit_key()
    {
        return m_gOracleDMLKeys->limit_key();
    }

    OracleDML_OracleDMLKeys::escape_key_return OracleDML::escape_key()
    {
        return m_gOracleDMLKeys->escape_key();
    }

    OracleDML_OracleDMLKeys::sum_key_return OracleDML::sum_key()
    {
        return m_gOracleDMLKeys->sum_key();
    }

    OracleDML_OracleDMLKeys::position_key_return OracleDML::position_key()
    {
        return m_gOracleDMLKeys->position_key();
    }

    OracleDML_OracleDMLKeys::vsize_key_return OracleDML::vsize_key()
    {
        return m_gOracleDMLKeys->vsize_key();
    }

    OracleDML_OracleDMLKeys::varchar_key_return OracleDML::varchar_key()
    {
        return m_gOracleDMLKeys->varchar_key();
    }

    OracleDML_OracleDMLCommons::xml_column_name_return OracleDML::xml_column_name()
    {
        return m_gOracleDMLCommons->xml_column_name();
    }

    OracleDML_OracleDMLKeys::timestamp_tz_unconstrained_key_return OracleDML::timestamp_tz_unconstrained_key()
    {
        return m_gOracleDMLKeys->timestamp_tz_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::read_key_return OracleDML::read_key()
    {
        return m_gOracleDMLKeys->read_key();
    }

    OracleDML_OracleDMLKeys::abs_key_return OracleDML::abs_key()
    {
        return m_gOracleDMLKeys->abs_key();
    }

    OracleDML_OracleDMLKeys::indicator_key_return OracleDML::indicator_key()
    {
        return m_gOracleDMLKeys->indicator_key();
    }

    OracleDML_OracleDMLKeys::java_key_return OracleDML::java_key()
    {
        return m_gOracleDMLKeys->java_key();
    }

    OracleDML_OracleDMLKeys::show_key_return OracleDML::show_key()
    {
        return m_gOracleDMLKeys->show_key();
    }

    OracleDML_OracleDMLKeys::parameters_key_return OracleDML::parameters_key()
    {
        return m_gOracleDMLKeys->parameters_key();
    }

    OracleDML_OracleDMLKeys::unbounded_key_return OracleDML::unbounded_key()
    {
        return m_gOracleDMLKeys->unbounded_key();
    }

    OracleDML_OracleDMLCommons::precision_part_return OracleDML::precision_part()
    {
        return m_gOracleDMLCommons->precision_part();
    }

    OracleDML_OracleDMLKeys::binary_float_min_normal_key_return OracleDML::binary_float_min_normal_key()
    {
        return m_gOracleDMLKeys->binary_float_min_normal_key();
    }

    OracleDML_OracleDMLKeys::seed_key_return OracleDML::seed_key()
    {
        return m_gOracleDMLKeys->seed_key();
    }

    OracleDML_OracleDMLKeys::declare_key_return OracleDML::declare_key()
    {
        return m_gOracleDMLKeys->declare_key();
    }

    OracleDML_OracleDMLCommons::attribute_name_return OracleDML::attribute_name()
    {
        return m_gOracleDMLCommons->attribute_name();
    }

    OracleDML_OracleDMLKeys::timestamp_unconstrained_key_return OracleDML::timestamp_unconstrained_key()
    {
        return m_gOracleDMLKeys->timestamp_unconstrained_key();
    }

    OracleDML_OracleDMLCommons::variable_name_return OracleDML::variable_name()
    {
        return m_gOracleDMLCommons->variable_name();
    }

    OracleDML_OracleDMLKeys::hextoraw_key_return OracleDML::hextoraw_key()
    {
        return m_gOracleDMLKeys->hextoraw_key();
    }

    OracleDML_OracleDMLCommons::keep_clause_return OracleDML::keep_clause()
    {
        return m_gOracleDMLCommons->keep_clause();
    }

    OracleDML_OracleDMLKeys::comment_key_return OracleDML::comment_key()
    {
        return m_gOracleDMLKeys->comment_key();
    }

    OracleDML_OracleDMLKeys::lpad_key_return OracleDML::lpad_key()
    {
        return m_gOracleDMLKeys->lpad_key();
    }

    OracleDML_OracleDMLCommons::aggregate_function_name_return OracleDML::aggregate_function_name()
    {
        return m_gOracleDMLCommons->aggregate_function_name();
    }

    OracleDML_OracleDMLKeys::xmlroot_key_return OracleDML::xmlroot_key()
    {
        return m_gOracleDMLKeys->xmlroot_key();
    }

    OracleDML_OracleDMLKeys::element_key_return OracleDML::element_key()
    {
        return m_gOracleDMLKeys->element_key();
    }

    OracleDML_OracleDMLKeys::octet_length_key_return OracleDML::octet_length_key()
    {
        return m_gOracleDMLKeys->octet_length_key();
    }

    OracleDML_OracleDMLKeys::continue_key_return OracleDML::continue_key()
    {
        return m_gOracleDMLKeys->continue_key();
    }

    OracleDML_OracleDMLKeys::under_key_return OracleDML::under_key()
    {
        return m_gOracleDMLKeys->under_key();
    }

    OracleDML_OracleDMLKeys::left_key_return OracleDML::left_key()
    {
        return m_gOracleDMLKeys->left_key();
    }

    OracleDML_OracleDMLKeys::chr_key_return OracleDML::chr_key()
    {
        return m_gOracleDMLKeys->chr_key();
    }

    OracleDML_OracleDMLKeys::substring_key_return OracleDML::substring_key()
    {
        return m_gOracleDMLKeys->substring_key();
    }

    OracleDML_OracleDMLKeys::binary_double_max_subnormal_key_return OracleDML::binary_double_max_subnormal_key()
    {
        return m_gOracleDMLKeys->binary_double_max_subnormal_key();
    }

    OracleDML_OracleDMLKeys::mod_key_return OracleDML::mod_key()
    {
        return m_gOracleDMLKeys->mod_key();
    }

    OracleDML_OracleDMLKeys::use_key_return OracleDML::use_key()
    {
        return m_gOracleDMLKeys->use_key();
    }

    OracleDML_OracleDMLKeys::grouping_key_return OracleDML::grouping_key()
    {
        return m_gOracleDMLKeys->grouping_key();
    }

    OracleDML_OracleDMLKeys::binary_double_infinity_key_return OracleDML::binary_double_infinity_key()
    {
        return m_gOracleDMLKeys->binary_double_infinity_key();
    }

    OracleDML_OracleDMLKeys::min_key_return OracleDML::min_key()
    {
        return m_gOracleDMLKeys->min_key();
    }

    OracleDML_OracleDMLKeys::percent_rowcount_key_return OracleDML::percent_rowcount_key()
    {
        return m_gOracleDMLKeys->percent_rowcount_key();
    }

    OracleDML_OracleDMLCommons::id_return OracleDML::id(int toraTokenType, int usageType)
    {
        return m_gOracleDMLCommons->id(toraTokenType, usageType);
    }

    OracleDML_OracleDMLKeys::definer_key_return OracleDML::definer_key()
    {
        return m_gOracleDMLKeys->definer_key();
    }

    OracleDML_OracleDMLKeys::function_key_return OracleDML::function_key()
    {
        return m_gOracleDMLKeys->function_key();
    }

    OracleDML_OracleDMLKeys::open_key_return OracleDML::open_key()
    {
        return m_gOracleDMLKeys->open_key();
    }

    OracleDML_OracleDMLKeys::nocache_key_return OracleDML::nocache_key()
    {
        return m_gOracleDMLKeys->nocache_key();
    }

    OracleDML_OracleDMLKeys::close_key_return OracleDML::close_key()
    {
        return m_gOracleDMLKeys->close_key();
    }

    OracleDML_OracleDMLCommons::type_spec_return OracleDML::type_spec()
    {
        return m_gOracleDMLCommons->type_spec();
    }

    OracleDML_OracleDMLKeys::day_key_return OracleDML::day_key()
    {
        return m_gOracleDMLKeys->day_key();
    }

    OracleDML_OracleDMLKeys::right_key_return OracleDML::right_key()
    {
        return m_gOracleDMLKeys->right_key();
    }

    OracleDML_OracleDMLCommons::function_argument_return OracleDML::function_argument()
    {
        return m_gOracleDMLCommons->function_argument();
    }

    OracleDML_OracleDMLKeys::fetch_key_return OracleDML::fetch_key()
    {
        return m_gOracleDMLKeys->fetch_key();
    }

    OracleDML_OracleDMLCommons::cursor_name_return OracleDML::cursor_name()
    {
        return m_gOracleDMLCommons->cursor_name();
    }

    OracleDML_OracleDMLCommons::parameter_name_return OracleDML::parameter_name()
    {
        return m_gOracleDMLCommons->parameter_name();
    }

    OracleDML_OracleDMLKeys::cross_key_return OracleDML::cross_key()
    {
        return m_gOracleDMLKeys->cross_key();
    }

    OracleDML_OracleDMLKeys::disable_key_return OracleDML::disable_key()
    {
        return m_gOracleDMLKeys->disable_key();
    }

    OracleDML_OracleDMLKeys::database_key_return OracleDML::database_key()
    {
        return m_gOracleDMLKeys->database_key();
    }

    OracleDML_OracleDMLKeys::model_key_return OracleDML::model_key()
    {
        return m_gOracleDMLKeys->model_key();
    }

    OracleDML_OracleDMLKeys::integer_key_return OracleDML::integer_key()
    {
        return m_gOracleDMLKeys->integer_key();
    }

    OracleDML_OracleDMLCommons::exception_name_return OracleDML::exception_name()
    {
        return m_gOracleDMLCommons->exception_name();
    }

    OracleDML_OracleDMLKeys::rename_key_return OracleDML::rename_key()
    {
        return m_gOracleDMLKeys->rename_key();
    }

    OracleDML_OracleDMLKeys::sysdate_key_return OracleDML::sysdate_key()
    {
        return m_gOracleDMLKeys->sysdate_key();
    }

    OracleDML_OracleDMLKeys::translate_key_return OracleDML::translate_key()
    {
        return m_gOracleDMLKeys->translate_key();
    }

    OracleDML_OracleDMLKeys::nvarchar2_key_return OracleDML::nvarchar2_key()
    {
        return m_gOracleDMLKeys->nvarchar2_key();
    }

    OracleDML_OracleDMLKeys::while_key_return OracleDML::while_key()
    {
        return m_gOracleDMLKeys->while_key();
    }

    OracleDML_OracleDMLKeys::unknown_key_return OracleDML::unknown_key()
    {
        return m_gOracleDMLKeys->unknown_key();
    }

    OracleDML_OracleDMLKeys::inner_key_return OracleDML::inner_key()
    {
        return m_gOracleDMLKeys->inner_key();
    }

    OracleDML_OracleDMLKeys::unlimited_key_return OracleDML::unlimited_key()
    {
        return m_gOracleDMLKeys->unlimited_key();
    }

    OracleDML_OracleDMLKeys::goto_key_return OracleDML::goto_key()
    {
        return m_gOracleDMLKeys->goto_key();
    }

    OracleDML_OracleDMLKeys::collect_key_return OracleDML::collect_key()
    {
        return m_gOracleDMLKeys->collect_key();
    }

    OracleDML_OracleDMLKeys::some_key_return OracleDML::some_key()
    {
        return m_gOracleDMLKeys->some_key();
    }

    OracleDML_OracleDMLKeys::cube_key_return OracleDML::cube_key()
    {
        return m_gOracleDMLKeys->cube_key();
    }

    OracleDML_OracleDMLCommons::bind_variable_return OracleDML::bind_variable()
    {
        return m_gOracleDMLCommons->bind_variable();
    }

    OracleDML_OracleDMLKeys::for_key_return OracleDML::for_key()
    {
        return m_gOracleDMLKeys->for_key();
    }

    OracleDML_OracleDMLKeys::any_key_return OracleDML::any_key()
    {
        return m_gOracleDMLKeys->any_key();
    }

    OracleDML_OracleDMLKeys::month_key_return OracleDML::month_key()
    {
        return m_gOracleDMLKeys->month_key();
    }

    OracleDML_OracleDMLKeys::likec_key_return OracleDML::likec_key()
    {
        return m_gOracleDMLKeys->likec_key();
    }

    OracleDML_OracleDMLKeys::schema_key_return OracleDML::schema_key()
    {
        return m_gOracleDMLKeys->schema_key();
    }

    OracleDML_OracleDMLKeys::xmlnamespaces_key_return OracleDML::xmlnamespaces_key()
    {
        return m_gOracleDMLKeys->xmlnamespaces_key();
    }

    OracleDML_OracleDMLKeys::version_key_return OracleDML::version_key()
    {
        return m_gOracleDMLKeys->version_key();
    }

    OracleDML_OracleDMLKeys::cost_key_return OracleDML::cost_key()
    {
        return m_gOracleDMLKeys->cost_key();
    }

    OracleDML_OracleDMLCommons::greater_than_or_equals_op_return OracleDML::greater_than_or_equals_op()
    {
        return m_gOracleDMLCommons->greater_than_or_equals_op();
    }

    OracleDML_OracleDMLKeys::collate_key_return OracleDML::collate_key()
    {
        return m_gOracleDMLKeys->collate_key();
    }

    OracleDML_OracleDMLKeys::autonomous_transaction_key_return OracleDML::autonomous_transaction_key()
    {
        return m_gOracleDMLKeys->autonomous_transaction_key();
    }

    OracleDML_OracleDMLKeys::map_key_return OracleDML::map_key()
    {
        return m_gOracleDMLKeys->map_key();
    }

    OracleDML_OracleDMLKeys::corrupt_xid_key_return OracleDML::corrupt_xid_key()
    {
        return m_gOracleDMLKeys->corrupt_xid_key();
    }

    OracleDML_OracleDMLKeys::percent_found_key_return OracleDML::percent_found_key()
    {
        return m_gOracleDMLKeys->percent_found_key();
    }

    OracleDML_OracleDMLKeys::updated_key_return OracleDML::updated_key()
    {
        return m_gOracleDMLKeys->updated_key();
    }

    OracleDML_OracleDMLKeys::false_key_return OracleDML::false_key()
    {
        return m_gOracleDMLKeys->false_key();
    }

    OracleDML_OracleDMLKeys::wellformed_key_return OracleDML::wellformed_key()
    {
        return m_gOracleDMLKeys->wellformed_key();
    }

    OracleDML_OracleDMLKeys::noschemacheck_key_return OracleDML::noschemacheck_key()
    {
        return m_gOracleDMLKeys->noschemacheck_key();
    }

    OracleDML_OracleDMLCommons::outer_join_sign_return OracleDML::outer_join_sign()
    {
        return m_gOracleDMLCommons->outer_join_sign();
    }

    OracleDML_OracleDMLKeys::unpivot_key_return OracleDML::unpivot_key()
    {
        return m_gOracleDMLKeys->unpivot_key();
    }

    OracleDML_OracleDMLKeys::xmlexists_key_return OracleDML::xmlexists_key()
    {
        return m_gOracleDMLKeys->xmlexists_key();
    }

    OracleDML_OracleDMLKeys::null_key_return OracleDML::null_key()
    {
        return m_gOracleDMLKeys->null_key();
    }

    OracleDML_OracleDMLCommons::function_argument_analytic_return OracleDML::function_argument_analytic()
    {
        return m_gOracleDMLCommons->function_argument_analytic();
    }

    OracleDML_OracleDMLKeys::nchar_cs_key_return OracleDML::nchar_cs_key()
    {
        return m_gOracleDMLKeys->nchar_cs_key();
    }

    OracleDML_OracleDMLCommons::query_name_return OracleDML::query_name()
    {
        return m_gOracleDMLCommons->query_name();
    }

    OracleDML_OracleDMLCommons::record_name_return OracleDML::record_name()
    {
        return m_gOracleDMLCommons->record_name();
    }

    OracleDML_OracleDMLKeys::set_key_return OracleDML::set_key()
    {
        return m_gOracleDMLKeys->set_key();
    }

    OracleDML_OracleDMLKeys::both_key_return OracleDML::both_key()
    {
        return m_gOracleDMLKeys->both_key();
    }

    OracleDML_OracleDMLKeys::trailing_key_return OracleDML::trailing_key()
    {
        return m_gOracleDMLKeys->trailing_key();
    }

    OracleDML_OracleDMLKeys::soundex_key_return OracleDML::soundex_key()
    {
        return m_gOracleDMLKeys->soundex_key();
    }

    OracleDML_OracleDMLCommons::not_equal_op_return OracleDML::not_equal_op()
    {
        return m_gOracleDMLCommons->not_equal_op();
    }

    OracleDML_OracleDMLCommons::table_alias_return OracleDML::table_alias()
    {
        return m_gOracleDMLCommons->table_alias();
    }

    OracleDML_OracleDMLKeys::smallint_key_return OracleDML::smallint_key()
    {
        return m_gOracleDMLKeys->smallint_key();
    }

    OracleDML_OracleDMLKeys::sqldata_key_return OracleDML::sqldata_key()
    {
        return m_gOracleDMLKeys->sqldata_key();
    }

    OracleDML_OracleDMLKeys::nowait_key_return OracleDML::nowait_key()
    {
        return m_gOracleDMLKeys->nowait_key();
    }

    OracleDML_OracleDMLKeys::end_key_return OracleDML::end_key()
    {
        return m_gOracleDMLKeys->end_key();
    }

    OracleDML_OracleDMLKeys::string_key_return OracleDML::string_key()
    {
        return m_gOracleDMLKeys->string_key();
    }

    OracleDML_OracleDMLKeys::using_key_return OracleDML::using_key()
    {
        return m_gOracleDMLKeys->using_key();
    }

    OracleDML_OracleDMLKeys::session_user_key_return OracleDML::session_user_key()
    {
        return m_gOracleDMLKeys->session_user_key();
    }

    OracleDML_OracleDMLKeys::binary_float_nan_key_return OracleDML::binary_float_nan_key()
    {
        return m_gOracleDMLKeys->binary_float_nan_key();
    }

    OracleDML_OracleDMLKeys::within_key_return OracleDML::within_key()
    {
        return m_gOracleDMLKeys->within_key();
    }

    OracleDML_OracleDMLKeys::union_key_return OracleDML::union_key()
    {
        return m_gOracleDMLKeys->union_key();
    }

    OracleDML_OracleDMLKeys::encoding_key_return OracleDML::encoding_key()
    {
        return m_gOracleDMLKeys->encoding_key();
    }

    OracleDML_OracleDMLKeys::drop_key_return OracleDML::drop_key()
    {
        return m_gOracleDMLKeys->drop_key();
    }

    OracleDML_OracleDMLKeys::binary_float_infinity_key_return OracleDML::binary_float_infinity_key()
    {
        return m_gOracleDMLKeys->binary_float_infinity_key();
    }

    OracleDML_OracleDMLKeys::xmlagg_key_return OracleDML::xmlagg_key()
    {
        return m_gOracleDMLKeys->xmlagg_key();
    }

    OracleDML_OracleDMLKeys::to_number_key_return OracleDML::to_number_key()
    {
        return m_gOracleDMLKeys->to_number_key();
    }

    OracleDML_OracleDMLKeys::reverse_key_return OracleDML::reverse_key()
    {
        return m_gOracleDMLKeys->reverse_key();
    }

    OracleDML_OracleDMLKeys::timezone_abbr_key_return OracleDML::timezone_abbr_key()
    {
        return m_gOracleDMLKeys->timezone_abbr_key();
    }

    OracleDML_OracleDMLKeys::standalone_key_return OracleDML::standalone_key()
    {
        return m_gOracleDMLKeys->standalone_key();
    }

    OracleDML_OracleDMLKeys::share_key_return OracleDML::share_key()
    {
        return m_gOracleDMLKeys->share_key();
    }

    OracleDML_OracleDMLKeys::add_key_return OracleDML::add_key()
    {
        return m_gOracleDMLKeys->add_key();
    }

    OracleDML_OracleDMLKeys::all_key_return OracleDML::all_key()
    {
        return m_gOracleDMLKeys->all_key();
    }

    OracleDML_OracleDMLKeys::order_key_return OracleDML::order_key()
    {
        return m_gOracleDMLKeys->order_key();
    }

    OracleDML_OracleDMLCommons::label_name_return OracleDML::label_name()
    {
        return m_gOracleDMLCommons->label_name();
    }

    OracleDML_OracleDMLKeys::system_key_return OracleDML::system_key()
    {
        return m_gOracleDMLKeys->system_key();
    }

    OracleDML_OracleDMLKeys::body_key_return OracleDML::body_key()
    {
        return m_gOracleDMLKeys->body_key();
    }

    OracleDML_OracleDMLKeys::yes_key_return OracleDML::yes_key()
    {
        return m_gOracleDMLKeys->yes_key();
    }

    OracleDML_OracleDMLKeys::nothing_key_return OracleDML::nothing_key()
    {
        return m_gOracleDMLKeys->nothing_key();
    }

    OracleDML_OracleDMLKeys::single_key_return OracleDML::single_key()
    {
        return m_gOracleDMLKeys->single_key();
    }

    OracleDML_OracleDMLKeys::iterate_key_return OracleDML::iterate_key()
    {
        return m_gOracleDMLKeys->iterate_key();
    }

    OracleDML_OracleDMLCommons::quoted_string_return OracleDML::quoted_string()
    {
        return m_gOracleDMLCommons->quoted_string();
    }

    OracleDML_OracleDMLKeys::extend_key_return OracleDML::extend_key()
    {
        return m_gOracleDMLKeys->extend_key();
    }

    OracleDML_OracleDMLKeys::urowid_key_return OracleDML::urowid_key()
    {
        return m_gOracleDMLKeys->urowid_key();
    }

    OracleDML_OracleDMLKeys::variance_key_return OracleDML::variance_key()
    {
        return m_gOracleDMLKeys->variance_key();
    }

    OracleDML_OracleDMLKeys::link_key_return OracleDML::link_key()
    {
        return m_gOracleDMLKeys->link_key();
    }

    OracleDML_OracleDMLKeys::distinct_key_return OracleDML::distinct_key()
    {
        return m_gOracleDMLKeys->distinct_key();
    }

    OracleDML_OracleDMLKeys::partition_key_return OracleDML::partition_key()
    {
        return m_gOracleDMLKeys->partition_key();
    }

    OracleDML_OracleDMLKeys::keep_key_return OracleDML::keep_key()
    {
        return m_gOracleDMLKeys->keep_key();
    }

    OracleDML_OracleDMLCommons::general_element_part_return OracleDML::general_element_part()
    {
        return m_gOracleDMLCommons->general_element_part();
    }

    OracleDML_OracleDMLKeys::else_key_return OracleDML::else_key()
    {
        return m_gOracleDMLKeys->else_key();
    }

    OracleDML_OracleDMLKeys::xmlattributes_key_return OracleDML::xmlattributes_key()
    {
        return m_gOracleDMLKeys->xmlattributes_key();
    }

    OracleDML_OracleDMLKeys::xmlquery_key_return OracleDML::xmlquery_key()
    {
        return m_gOracleDMLKeys->xmlquery_key();
    }

    OracleDML_OracleDMLCommons::package_name_return OracleDML::package_name()
    {
        return m_gOracleDMLCommons->package_name();
    }

    OracleDML_OracleDMLKeys::member_key_return OracleDML::member_key()
    {
        return m_gOracleDMLKeys->member_key();
    }

    OracleDML_OracleDMLKeys::reuse_key_return OracleDML::reuse_key()
    {
        return m_gOracleDMLKeys->reuse_key();
    }

    OracleDML_OracleDMLKeys::system_user_key_return OracleDML::system_user_key()
    {
        return m_gOracleDMLKeys->system_user_key();
    }

    OracleDML_OracleDMLKeys::noentityescaping_key_return OracleDML::noentityescaping_key()
    {
        return m_gOracleDMLKeys->noentityescaping_key();
    }

    OracleDML_OracleDMLKeys::guard_key_return OracleDML::guard_key()
    {
        return m_gOracleDMLKeys->guard_key();
    }

    OracleDML_OracleDMLKeys::values_key_return OracleDML::values_key()
    {
        return m_gOracleDMLKeys->values_key();
    }

    OracleDML_OracleDMLKeys::except_key_return OracleDML::except_key()
    {
        return m_gOracleDMLKeys->except_key();
    }

    OracleDML_OracleDMLKeys::join_key_return OracleDML::join_key()
    {
        return m_gOracleDMLKeys->join_key();
    }

    OracleDML_OracleDMLKeys::until_key_return OracleDML::until_key()
    {
        return m_gOracleDMLKeys->until_key();
    }

    OracleDML_OracleDMLKeys::in_key_return OracleDML::in_key()
    {
        return m_gOracleDMLKeys->in_key();
    }

    OracleDML_OracleDMLKeys::binary_double_max_normal_key_return OracleDML::binary_double_max_normal_key()
    {
        return m_gOracleDMLKeys->binary_double_max_normal_key();
    }

    OracleDML_OracleDMLKeys::binary_integer_key_return OracleDML::binary_integer_key()
    {
        return m_gOracleDMLKeys->binary_integer_key();
    }

    OracleDML_OracleDMLKeys::outer_key_return OracleDML::outer_key()
    {
        return m_gOracleDMLKeys->outer_key();
    }

    OracleDML_OracleDMLKeys::decimal_key_return OracleDML::decimal_key()
    {
        return m_gOracleDMLKeys->decimal_key();
    }

    OracleDML_OracleDMLKeys::boolean_key_return OracleDML::boolean_key()
    {
        return m_gOracleDMLKeys->boolean_key();
    }

    OracleDML_OracleDMLKeys::dense_rank_key_return OracleDML::dense_rank_key()
    {
        return m_gOracleDMLKeys->dense_rank_key();
    }

    OracleDML_OracleDMLKeys::columns_key_return OracleDML::columns_key()
    {
        return m_gOracleDMLKeys->columns_key();
    }

    OracleDML_OracleDMLKeys::binary_float_max_normal_key_return OracleDML::binary_float_max_normal_key()
    {
        return m_gOracleDMLKeys->binary_float_max_normal_key();
    }

    OracleDML_OracleDMLKeys::hour_key_return OracleDML::hour_key()
    {
        return m_gOracleDMLKeys->hour_key();
    }

    OracleDML_OracleDMLCommons::argument_return OracleDML::argument()
    {
        return m_gOracleDMLCommons->argument();
    }

    OracleDML_OracleDMLKeys::connect_key_return OracleDML::connect_key()
    {
        return m_gOracleDMLKeys->connect_key();
    }

    OracleDML_OracleDMLKeys::defaults_key_return OracleDML::defaults_key()
    {
        return m_gOracleDMLKeys->defaults_key();
    }

    OracleDML_OracleDMLKeys::char_cs_key_return OracleDML::char_cs_key()
    {
        return m_gOracleDMLKeys->char_cs_key();
    }

    OracleDML_OracleDMLKeys::partial_key_return OracleDML::partial_key()
    {
        return m_gOracleDMLKeys->partial_key();
    }

    OracleDML_OracleDMLKeys::exclude_key_return OracleDML::exclude_key()
    {
        return m_gOracleDMLKeys->exclude_key();
    }

    OracleDML_OracleDMLKeys::last_key_return OracleDML::last_key()
    {
        return m_gOracleDMLKeys->last_key();
    }

    OracleDML_OracleDMLCommons::main_model_name_return OracleDML::main_model_name()
    {
        return m_gOracleDMLCommons->main_model_name();
    }

    OracleDML_OracleDMLKeys::constraints_key_return OracleDML::constraints_key()
    {
        return m_gOracleDMLKeys->constraints_key();
    }

    OracleDML_OracleDMLKeys::language_key_return OracleDML::language_key()
    {
        return m_gOracleDMLKeys->language_key();
    }

    OracleDML_OracleDMLKeys::nchar_key_return OracleDML::nchar_key()
    {
        return m_gOracleDMLKeys->nchar_key();
    }

    OracleDML_OracleDMLKeys::indices_key_return OracleDML::indices_key()
    {
        return m_gOracleDMLKeys->indices_key();
    }

    OracleDML_OracleDMLKeys::block_key_return OracleDML::block_key()
    {
        return m_gOracleDMLKeys->block_key();
    }

    OracleDML_OracleDMLKeys::asc_key_return OracleDML::asc_key()
    {
        return m_gOracleDMLKeys->asc_key();
    }

    OracleDML_OracleDMLKeys::real_key_return OracleDML::real_key()
    {
        return m_gOracleDMLKeys->real_key();
    }

    OracleDML_OracleDMLKeys::check_key_return OracleDML::check_key()
    {
        return m_gOracleDMLKeys->check_key();
    }

    OracleDML_OracleDMLKeys::exception_init_key_return OracleDML::exception_init_key()
    {
        return m_gOracleDMLKeys->exception_init_key();
    }

    OracleDML_OracleDMLKeys::restrict_references_key_return OracleDML::restrict_references_key()
    {
        return m_gOracleDMLKeys->restrict_references_key();
    }

    OracleDML_OracleDMLKeys::binary_double_min_subnormal_key_return OracleDML::binary_double_min_subnormal_key()
    {
        return m_gOracleDMLKeys->binary_double_min_subnormal_key();
    }

    OracleDML_OracleDMLKeys::percent_isopen_key_return OracleDML::percent_isopen_key()
    {
        return m_gOracleDMLKeys->percent_isopen_key();
    }

    OracleDML_OracleDMLKeys::merge_key_return OracleDML::merge_key()
    {
        return m_gOracleDMLKeys->merge_key();
    }

    OracleDML_OracleDMLKeys::explain_key_return OracleDML::explain_key()
    {
        return m_gOracleDMLKeys->explain_key();
    }

    OracleDML_OracleDMLKeys::signtype_key_return OracleDML::signtype_key()
    {
        return m_gOracleDMLKeys->signtype_key();
    }

    OracleDML_OracleDMLKeys::between_key_return OracleDML::between_key()
    {
        return m_gOracleDMLKeys->between_key();
    }

    OracleDML_OracleDMLKeys::or_key_return OracleDML::or_key()
    {
        return m_gOracleDMLKeys->or_key();
    }

    OracleDML_OracleDMLKeys::pipelined_key_return OracleDML::pipelined_key()
    {
        return m_gOracleDMLKeys->pipelined_key();
    }

    OracleDML_OracleDMLKeys::minus_key_return OracleDML::minus_key()
    {
        return m_gOracleDMLKeys->minus_key();
    }

    OracleDML_OracleDMLKeys::from_key_return OracleDML::from_key()
    {
        return m_gOracleDMLKeys->from_key();
    }

    OracleDML_OracleDMLKeys::compound_key_return OracleDML::compound_key()
    {
        return m_gOracleDMLKeys->compound_key();
    }

    OracleDML_OracleDMLKeys::convert_key_return OracleDML::convert_key()
    {
        return m_gOracleDMLKeys->convert_key();
    }

    OracleDML_OracleDMLKeys::nan_key_return OracleDML::nan_key()
    {
        return m_gOracleDMLKeys->nan_key();
    }

    OracleDML_OracleDMLKeys::plan_key_return OracleDML::plan_key()
    {
        return m_gOracleDMLKeys->plan_key();
    }

    OracleDML_OracleDMLKeys::aggregate_key_return OracleDML::aggregate_key()
    {
        return m_gOracleDMLKeys->aggregate_key();
    }

    OracleDML_OracleDMLKeys::compile_key_return OracleDML::compile_key()
    {
        return m_gOracleDMLKeys->compile_key();
    }

    OracleDML_OracleDMLKeys::commit_key_return OracleDML::commit_key()
    {
        return m_gOracleDMLKeys->commit_key();
    }

    OracleDML_OracleDMLKeys::timezone_region_key_return OracleDML::timezone_region_key()
    {
        return m_gOracleDMLKeys->timezone_region_key();
    }

    OracleDML_OracleDMLKeys::rows_key_return OracleDML::rows_key()
    {
        return m_gOracleDMLKeys->rows_key();
    }

    OracleDML_OracleDMLKeys::nvl_key_return OracleDML::nvl_key()
    {
        return m_gOracleDMLKeys->nvl_key();
    }

    OracleDML_OracleDMLCommons::type_name_return OracleDML::type_name()
    {
        return m_gOracleDMLCommons->type_name();
    }

    OracleDML_OracleDMLKeys::errors_key_return OracleDML::errors_key()
    {
        return m_gOracleDMLKeys->errors_key();
    }

    OracleDML_OracleDMLKeys::decrement_key_return OracleDML::decrement_key()
    {
        return m_gOracleDMLKeys->decrement_key();
    }

    OracleDML_OracleDMLKeys::debug_key_return OracleDML::debug_key()
    {
        return m_gOracleDMLKeys->debug_key();
    }

    OracleDML_OracleDMLKeys::array_key_return OracleDML::array_key()
    {
        return m_gOracleDMLKeys->array_key();
    }

    OracleDML_OracleDMLCommons::native_datatype_element_return OracleDML::native_datatype_element()
    {
        return m_gOracleDMLCommons->native_datatype_element();
    }

    OracleDML_OracleDMLCommons::partition_extension_clause_return OracleDML::partition_extension_clause()
    {
        return m_gOracleDMLCommons->partition_extension_clause();
    }

    OracleDML_OracleDMLKeys::minute_key_return OracleDML::minute_key()
    {
        return m_gOracleDMLKeys->minute_key();
    }

    OracleDML_OracleDMLKeys::stddev_key_return OracleDML::stddev_key()
    {
        return m_gOracleDMLKeys->stddev_key();
    }

    OracleDML_OracleDMLKeys::trigger_key_return OracleDML::trigger_key()
    {
        return m_gOracleDMLKeys->trigger_key();
    }

    OracleDML_OracleDMLKeys::lock_key_return OracleDML::lock_key()
    {
        return m_gOracleDMLKeys->lock_key();
    }

    OracleDML_OracleDMLKeys::positiven_key_return OracleDML::positiven_key()
    {
        return m_gOracleDMLKeys->positiven_key();
    }

    OracleDML_OracleDMLKeys::evalname_key_return OracleDML::evalname_key()
    {
        return m_gOracleDMLKeys->evalname_key();
    }

    OracleDML_OracleDMLKeys::sqrt_key_return OracleDML::sqrt_key()
    {
        return m_gOracleDMLKeys->sqrt_key();
    }

    OracleDML_OracleDMLKeys::table_key_return OracleDML::table_key()
    {
        return m_gOracleDMLKeys->table_key();
    }

    OracleDML_OracleDMLCommons::multiset_op_return OracleDML::multiset_op()
    {
        return m_gOracleDMLCommons->multiset_op();
    }

    OracleDML_OracleDMLKeys::of_key_return OracleDML::of_key()
    {
        return m_gOracleDMLKeys->of_key();
    }

    OracleDML_OracleDMLKeys::breadth_key_return OracleDML::breadth_key()
    {
        return m_gOracleDMLKeys->breadth_key();
    }

    OracleDML_OracleDMLKeys::oserror_key_return OracleDML::oserror_key()
    {
        return m_gOracleDMLKeys->oserror_key();
    }

    OracleDML_OracleDMLKeys::associate_key_return OracleDML::associate_key()
    {
        return m_gOracleDMLKeys->associate_key();
    }

    OracleDML_OracleDMLKeys::statement_key_return OracleDML::statement_key()
    {
        return m_gOracleDMLKeys->statement_key();
    }

    OracleDML_OracleDMLKeys::concat_key_return OracleDML::concat_key()
    {
        return m_gOracleDMLKeys->concat_key();
    }

    OracleDML_OracleDMLKeys::numeric_key_return OracleDML::numeric_key()
    {
        return m_gOracleDMLKeys->numeric_key();
    }

    OracleDML_OracleDMLKeys::instead_key_return OracleDML::instead_key()
    {
        return m_gOracleDMLKeys->instead_key();
    }

    OracleDML_OracleDMLKeys::cast_key_return OracleDML::cast_key()
    {
        return m_gOracleDMLKeys->cast_key();
    }

    OracleDML_OracleDMLKeys::cycle_key_return OracleDML::cycle_key()
    {
        return m_gOracleDMLKeys->cycle_key();
    }

    OracleDML_OracleDMLKeys::cluster_key_return OracleDML::cluster_key()
    {
        return m_gOracleDMLKeys->cluster_key();
    }

    OracleDML_OracleDMLKeys::loop_key_return OracleDML::loop_key()
    {
        return m_gOracleDMLKeys->loop_key();
    }

    OracleDML_OracleDMLKeys::write_key_return OracleDML::write_key()
    {
        return m_gOracleDMLKeys->write_key();
    }

    OracleDML_OracleDMLKeys::sets_key_return OracleDML::sets_key()
    {
        return m_gOracleDMLKeys->sets_key();
    }

    OracleDML_OracleDMLKeys::global_key_return OracleDML::global_key()
    {
        return m_gOracleDMLKeys->global_key();
    }

    OracleDML_OracleDMLCommons::constant_return OracleDML::constant()
    {
        return m_gOracleDMLCommons->constant();
    }

    OracleDML_OracleDMLKeys::following_key_return OracleDML::following_key()
    {
        return m_gOracleDMLKeys->following_key();
    }

    OracleDML_OracleDMLKeys::decode_key_return OracleDML::decode_key()
    {
        return m_gOracleDMLKeys->decode_key();
    }

    OracleDML_OracleDMLKeys::returning_key_return OracleDML::returning_key()
    {
        return m_gOracleDMLKeys->returning_key();
    }

    OracleDML_OracleDMLKeys::procedure_key_return OracleDML::procedure_key()
    {
        return m_gOracleDMLKeys->procedure_key();
    }

    OracleDML_OracleDMLKeys::max_key_return OracleDML::max_key()
    {
        return m_gOracleDMLKeys->max_key();
    }

    OracleDML_OracleDMLKeys::static_key_return OracleDML::static_key()
    {
        return m_gOracleDMLKeys->static_key();
    }

    OracleDML_OracleDMLKeys::including_key_return OracleDML::including_key()
    {
        return m_gOracleDMLKeys->including_key();
    }

    OracleDML_OracleDMLCommons::rollback_segment_name_return OracleDML::rollback_segment_name()
    {
        return m_gOracleDMLCommons->rollback_segment_name();
    }

    OracleDML_OracleDMLKeys::dml_key_return OracleDML::dml_key()
    {
        return m_gOracleDMLKeys->dml_key();
    }

    OracleDML_OracleDMLKeys::leading_key_return OracleDML::leading_key()
    {
        return m_gOracleDMLKeys->leading_key();
    }

    OracleDML_OracleDMLKeys::content_key_return OracleDML::content_key()
    {
        return m_gOracleDMLKeys->content_key();
    }

    OracleDML_OracleDMLKeys::forall_key_return OracleDML::forall_key()
    {
        return m_gOracleDMLKeys->forall_key();
    }

    OracleDML_OracleDMLKeys::desc_key_return OracleDML::desc_key()
    {
        return m_gOracleDMLKeys->desc_key();
    }

    OracleDML_OracleDMLKeys::ltrim_key_return OracleDML::ltrim_key()
    {
        return m_gOracleDMLKeys->ltrim_key();
    }

    OracleDML_OracleDMLKeys::xmltable_key_return OracleDML::xmltable_key()
    {
        return m_gOracleDMLKeys->xmltable_key();
    }

    OracleDML_OracleDMLCommons::sequence_name_return OracleDML::sequence_name()
    {
        return m_gOracleDMLCommons->sequence_name();
    }

    OracleDML_OracleDMLKeys::statistics_key_return OracleDML::statistics_key()
    {
        return m_gOracleDMLKeys->statistics_key();
    }

    OracleDML_OracleDMLKeys::raw_key_return OracleDML::raw_key()
    {
        return m_gOracleDMLKeys->raw_key();
    }

    OracleDML_OracleDMLKeys::include_key_return OracleDML::include_key()
    {
        return m_gOracleDMLKeys->include_key();
    }

    OracleDML_OracleDMLKeys::dbtimezone_key_return OracleDML::dbtimezone_key()
    {
        return m_gOracleDMLKeys->dbtimezone_key();
    }

    OracleDML_OracleDMLKeys::execute_key_return OracleDML::execute_key()
    {
        return m_gOracleDMLKeys->execute_key();
    }

    OracleDML_OracleDMLCommons::where_clause_return OracleDML::where_clause()
    {
        return m_gOracleDMLCommons->where_clause();
    }

    OracleDML_OracleDMLKeys::indent_key_return OracleDML::indent_key()
    {
        return m_gOracleDMLKeys->indent_key();
    }

    OracleDML_OracleDMLKeys::trim_key_return OracleDML::trim_key()
    {
        return m_gOracleDMLKeys->trim_key();
    }

    OracleDML_OracleDMLKeys::prior_key_return OracleDML::prior_key()
    {
        return m_gOracleDMLKeys->prior_key();
    }

    OracleDML_OracleDMLKeys::where_key_return OracleDML::where_key()
    {
        return m_gOracleDMLKeys->where_key();
    }

    OracleDML_OracleDMLKeys::simple_integer_key_return OracleDML::simple_integer_key()
    {
        return m_gOracleDMLKeys->simple_integer_key();
    }

    OracleDML_OracleDMLKeys::xmlelement_key_return OracleDML::xmlelement_key()
    {
        return m_gOracleDMLKeys->xmlelement_key();
    }

    OracleDML_OracleDMLKeys::statement_id_key_return OracleDML::statement_id_key()
    {
        return m_gOracleDMLKeys->statement_id_key();
    }

    OracleDML_OracleDMLKeys::after_key_return OracleDML::after_key()
    {
        return m_gOracleDMLKeys->after_key();
    }

    OracleDML_OracleDMLCommons::trigger_name_return OracleDML::trigger_name()
    {
        return m_gOracleDMLCommons->trigger_name();
    }

    OracleDML_OracleDMLKeys::timezone_hour_key_return OracleDML::timezone_hour_key()
    {
        return m_gOracleDMLKeys->timezone_hour_key();
    }

    OracleDML_OracleDMLKeys::passing_key_return OracleDML::passing_key()
    {
        return m_gOracleDMLKeys->passing_key();
    }

    OracleDML_OracleDMLKeys::analyze_key_return OracleDML::analyze_key()
    {
        return m_gOracleDMLKeys->analyze_key();
    }

    OracleDML_OracleDMLKeys::like2_key_return OracleDML::like2_key()
    {
        return m_gOracleDMLKeys->like2_key();
    }

    OracleDML_OracleDMLKeys::year_key_return OracleDML::year_key()
    {
        return m_gOracleDMLKeys->year_key();
    }

    OracleDML_OracleDMLKeys::zone_key_return OracleDML::zone_key()
    {
        return m_gOracleDMLKeys->zone_key();
    }

    OracleDML_OracleDMLKeys::float_key_return OracleDML::float_key()
    {
        return m_gOracleDMLKeys->float_key();
    }

    OracleDML_OracleDMLKeys::blob_key_return OracleDML::blob_key()
    {
        return m_gOracleDMLKeys->blob_key();
    }

    OracleDML_OracleDMLKeys::int_key_return OracleDML::int_key()
    {
        return m_gOracleDMLKeys->int_key();
    }

    OracleDML_OracleDMLKeys::authid_key_return OracleDML::authid_key()
    {
        return m_gOracleDMLKeys->authid_key();
    }

    OracleDML_OracleDMLKeys::as_key_return OracleDML::as_key()
    {
        return m_gOracleDMLKeys->as_key();
    }

    OracleDML_OracleDMLKeys::positive_key_return OracleDML::positive_key()
    {
        return m_gOracleDMLKeys->positive_key();
    }

    OracleDML_OracleDMLKeys::rowidtochar_key_return OracleDML::rowidtochar_key()
    {
        return m_gOracleDMLKeys->rowidtochar_key();
    }

    OracleDML_OracleDMLKeys::committed_key_return OracleDML::committed_key()
    {
        return m_gOracleDMLKeys->committed_key();
    }

    OracleDML_OracleDMLKeys::clob_key_return OracleDML::clob_key()
    {
        return m_gOracleDMLKeys->clob_key();
    }

    OracleDML_OracleDMLKeys::rules_key_return OracleDML::rules_key()
    {
        return m_gOracleDMLKeys->rules_key();
    }

    OracleDML_OracleDMLKeys::cursor_key_return OracleDML::cursor_key()
    {
        return m_gOracleDMLKeys->cursor_key();
    }

    OracleDML_OracleDMLCommons::index_name_return OracleDML::index_name()
    {
        return m_gOracleDMLCommons->index_name();
    }

    OracleDML_OracleDMLCommons::cost_class_name_return OracleDML::cost_class_name()
    {
        return m_gOracleDMLCommons->cost_class_name();
    }

    OracleDML_OracleDMLKeys::default_key_return OracleDML::default_key()
    {
        return m_gOracleDMLKeys->default_key();
    }

    OracleDML_OracleDMLKeys::update_key_return OracleDML::update_key()
    {
        return m_gOracleDMLKeys->update_key();
    }

    OracleDML_OracleDMLKeys::module_key_return OracleDML::module_key()
    {
        return m_gOracleDMLKeys->module_key();
    }

    OracleDML_OracleDMLKeys::deterministic_key_return OracleDML::deterministic_key()
    {
        return m_gOracleDMLKeys->deterministic_key();
    }

    OracleDML_OracleDMLKeys::cache_key_return OracleDML::cache_key()
    {
        return m_gOracleDMLKeys->cache_key();
    }

    OracleDML_OracleDMLKeys::size_key_return OracleDML::size_key()
    {
        return m_gOracleDMLKeys->size_key();
    }

    OracleDML_OracleDMLKeys::reject_key_return OracleDML::reject_key()
    {
        return m_gOracleDMLKeys->reject_key();
    }

    OracleDML_OracleDMLKeys::constructor_key_return OracleDML::constructor_key()
    {
        return m_gOracleDMLKeys->constructor_key();
    }

    OracleDML_OracleDMLKeys::last_value_key_return OracleDML::last_value_key()
    {
        return m_gOracleDMLKeys->last_value_key();
    }

    OracleDML_OracleDMLKeys::ordinality_key_return OracleDML::ordinality_key()
    {
        return m_gOracleDMLKeys->ordinality_key();
    }

    OracleDML_OracleDMLKeys::library_key_return OracleDML::library_key()
    {
        return m_gOracleDMLKeys->library_key();
    }

    OracleDML_OracleDMLKeys::depth_key_return OracleDML::depth_key()
    {
        return m_gOracleDMLKeys->depth_key();
    }

/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool OracleDML::msynpred( antlr3::ClassForwarder< synpred41_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred41_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred46_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred46_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred24_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred24_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred25_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred25_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred28_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred28_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred20_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred20_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred33_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred33_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred23_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred23_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred16_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred16_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred50_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred50_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred42_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred42_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred39_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred39_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred12_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred12_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred31_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred31_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred15_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred15_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred13_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred13_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred17_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred17_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred18_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred18_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred32_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred32_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred4_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred4_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred54_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred54_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred6_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred6_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred3_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred3_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred48_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred48_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred11_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred11_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred2_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred2_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred30_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred30_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred5_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred5_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred53_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred53_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred10_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred10_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred45_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred45_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred21_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred21_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred52_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred52_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred44_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred44_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred19_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred19_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred22_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred22_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred43_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred43_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred51_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred51_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred1_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred1_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred49_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred49_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred14_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred14_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred26_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred26_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred34_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred34_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred29_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred29_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred27_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred27_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

}

/* End of code
 * =============================================================================
 */
