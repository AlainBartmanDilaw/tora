/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -  From the grammar source file : OracleDML.g
 *     -                            On : 2018-07-30 22:17:55
 *     -                for the parser : OracleDMLParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include "antlr3compilerwarning.hpp"
#include "OracleDML.hpp"

#include <memory>

/* ----------------------------------------- */

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

namespace  Antlr3BackendImpl  {
using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8* OracleDMLTokenNames[754+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "ADD_VK", //4
        (ANTLR_UINT8*) "AFTER_VK", //5
        (ANTLR_UINT8*) "AGENT_VK", //6
        (ANTLR_UINT8*) "AGGREGATE_VK", //7
        (ANTLR_UINT8*) "ALIAS", //8
        (ANTLR_UINT8*) "AMPERSAND", //9
        (ANTLR_UINT8*) "ANALYZE_VK", //10
        (ANTLR_UINT8*) "ANY_ELEMENT", //11
        (ANTLR_UINT8*) "ANY_MODE", //12
        (ANTLR_UINT8*) "APPROXIMATE_NUM_LIT", //13
        (ANTLR_UINT8*) "ARGUMENT", //14
        (ANTLR_UINT8*) "ARGUMENTS", //15
        (ANTLR_UINT8*) "ASSIGN", //16
        (ANTLR_UINT8*) "ASSIGN_OP", //17
        (ANTLR_UINT8*) "ASSOCIATE_VK", //18
        (ANTLR_UINT8*) "ASTERISK", //19
        (ANTLR_UINT8*) "ATTRIBUTE_NAME", //20
        (ANTLR_UINT8*) "AT_SIGN", //21
        (ANTLR_UINT8*) "AT_VK", //22
        (ANTLR_UINT8*) "AUDIT_VK", //23
        (ANTLR_UINT8*) "AUTHID_VK", //24
        (ANTLR_UINT8*) "AUTOMATIC_VK", //25
        (ANTLR_UINT8*) "AUTONOMOUS_TRANSACTION_VK", //26
        (ANTLR_UINT8*) "AUTO_VK", //27
        (ANTLR_UINT8*) "BATCH_VK", //28
        (ANTLR_UINT8*) "BEFORE_VK", //29
        (ANTLR_UINT8*) "BFILE_VK", //30
        (ANTLR_UINT8*) "BINARY_DOUBLE_VK", //31
        (ANTLR_UINT8*) "BINARY_FLOAT_VK", //32
        (ANTLR_UINT8*) "BINARY_INTEGER_VK", //33
        (ANTLR_UINT8*) "BINDVAR", //34
        (ANTLR_UINT8*) "BIT_STRING_LIT", //35
        (ANTLR_UINT8*) "BIT_VK", //36
        (ANTLR_UINT8*) "BLOB_VK", //37
        (ANTLR_UINT8*) "BLOCK_VK", //38
        (ANTLR_UINT8*) "BODY_VK", //39
        (ANTLR_UINT8*) "BOOLEAN_VK", //40
        (ANTLR_UINT8*) "BOTH_VK", //41
        (ANTLR_UINT8*) "BREADTH_VK", //42
        (ANTLR_UINT8*) "BULK_VK", //43
        (ANTLR_UINT8*) "BYTE_VK", //44
        (ANTLR_UINT8*) "CACHE_VK", //45
        (ANTLR_UINT8*) "CALL_VK", //46
        (ANTLR_UINT8*) "CANONICAL_VK", //47
        (ANTLR_UINT8*) "CARRET_OPERATOR_PART", //48
        (ANTLR_UINT8*) "CASCADE_VK", //49
        (ANTLR_UINT8*) "CASCATED_ELEMENT", //50
        (ANTLR_UINT8*) "CAST_VK", //51
        (ANTLR_UINT8*) "CHARACTER_VK", //52
        (ANTLR_UINT8*) "CHAR_CS_VK", //53
        (ANTLR_UINT8*) "CHAR_SET_NAME", //54
        (ANTLR_UINT8*) "CHAR_STRING", //55
        (ANTLR_UINT8*) "CHAR_STRING_PERL", //56
        (ANTLR_UINT8*) "CHAR_VK", //57
        (ANTLR_UINT8*) "CHR_VK", //58
        (ANTLR_UINT8*) "CLOB_VK", //59
        (ANTLR_UINT8*) "CLOSE_VK", //60
        (ANTLR_UINT8*) "CLUSTER_VK", //61
        (ANTLR_UINT8*) "COLLECTION_MODE", //62
        (ANTLR_UINT8*) "COLLECTION_NAME", //63
        (ANTLR_UINT8*) "COLLECT_VK", //64
        (ANTLR_UINT8*) "COLON", //65
        (ANTLR_UINT8*) "COLUMNS", //66
        (ANTLR_UINT8*) "COLUMN_NAME", //67
        (ANTLR_UINT8*) "COMMA", //68
        (ANTLR_UINT8*) "COMMENT", //69
        (ANTLR_UINT8*) "COMMENT_VK", //70
        (ANTLR_UINT8*) "COMMITTED_VK", //71
        (ANTLR_UINT8*) "COMMIT_VK", //72
        (ANTLR_UINT8*) "COMPATIBILITY_VK", //73
        (ANTLR_UINT8*) "COMPILE_VK", //74
        (ANTLR_UINT8*) "COMPOUND_VK", //75
        (ANTLR_UINT8*) "CONCATENATION_OP", //76
        (ANTLR_UINT8*) "CONDITIONAL_INSERT", //77
        (ANTLR_UINT8*) "CONSTANT_VK", //78
        (ANTLR_UINT8*) "CONSTRAINT_NAME", //79
        (ANTLR_UINT8*) "CONSTRUCTOR_VK", //80
        (ANTLR_UINT8*) "CONTENT_VK", //81
        (ANTLR_UINT8*) "CONTEXT_VK", //82
        (ANTLR_UINT8*) "CONTINUE_VK", //83
        (ANTLR_UINT8*) "CONVERT_VK", //84
        (ANTLR_UINT8*) "CORRUPT_XID_ALL_VK", //85
        (ANTLR_UINT8*) "CORRUPT_XID_VK", //86
        (ANTLR_UINT8*) "COST_CLASS_NAME", //87
        (ANTLR_UINT8*) "COST_VK", //88
        (ANTLR_UINT8*) "COUNT_VK", //89
        (ANTLR_UINT8*) "CROSS_VK", //90
        (ANTLR_UINT8*) "CUBE_VK", //91
        (ANTLR_UINT8*) "CURRENT_USER_VK", //92
        (ANTLR_UINT8*) "CURRENT_VK", //93
        (ANTLR_UINT8*) "CURSOR_NAME", //94
        (ANTLR_UINT8*) "CUSTOMDATUM_VK", //95
        (ANTLR_UINT8*) "CUSTOM_TYPE", //96
        (ANTLR_UINT8*) "CYCLE_VK", //97
        (ANTLR_UINT8*) "C_VK", //98
        (ANTLR_UINT8*) "DATABASE_VK", //99
        (ANTLR_UINT8*) "DATETIME_OP", //100
        (ANTLR_UINT8*) "DAY_VK", //101
        (ANTLR_UINT8*) "DBTIMEZONE_VK", //102
        (ANTLR_UINT8*) "DB_ROLE_CHANGE_VK", //103
        (ANTLR_UINT8*) "DDL_VK", //104
        (ANTLR_UINT8*) "DEBUG_VK", //105
        (ANTLR_UINT8*) "DECIMAL_VK", //106
        (ANTLR_UINT8*) "DECOMPOSE_VK", //107
        (ANTLR_UINT8*) "DECREMENT_VK", //108
        (ANTLR_UINT8*) "DEC_VK", //109
        (ANTLR_UINT8*) "DEFAULTS_VK", //110
        (ANTLR_UINT8*) "DEFERRED_VK", //111
        (ANTLR_UINT8*) "DEFINER_VK", //112
        (ANTLR_UINT8*) "DELIMITED_ID", //113
        (ANTLR_UINT8*) "DENSE_RANK_VK", //114
        (ANTLR_UINT8*) "DEPTH_VK", //115
        (ANTLR_UINT8*) "DETERMINISTIC_VK", //116
        (ANTLR_UINT8*) "DIMENSION_VK", //117
        (ANTLR_UINT8*) "DIRECT_MODE", //118
        (ANTLR_UINT8*) "DISABLE_VK", //119
        (ANTLR_UINT8*) "DISASSOCIATE_VK", //120
        (ANTLR_UINT8*) "DOCUMENT_VK", //121
        (ANTLR_UINT8*) "DOT_ASTERISK", //122
        (ANTLR_UINT8*) "DOUBLE_ASTERISK", //123
        (ANTLR_UINT8*) "DOUBLE_PERIOD", //124
        (ANTLR_UINT8*) "DOUBLE_VK", //125
        (ANTLR_UINT8*) "DSINTERVAL_UNCONSTRAINED_VK", //126
        (ANTLR_UINT8*) "ELEMENT", //127
        (ANTLR_UINT8*) "ELEMENTS_MODE", //128
        (ANTLR_UINT8*) "ENABLE_VK", //129
        (ANTLR_UINT8*) "ENCODING_VK", //130
        (ANTLR_UINT8*) "ENTITYESCAPING_VK", //131
        (ANTLR_UINT8*) "EQUALS_OP", //132
        (ANTLR_UINT8*) "EVALNAME_VK", //133
        (ANTLR_UINT8*) "EXACT_NUM_LIT", //134
        (ANTLR_UINT8*) "EXCEPTIONS_VK", //135
        (ANTLR_UINT8*) "EXCEPTION_INIT_VK", //136
        (ANTLR_UINT8*) "EXCEPTION_NAME", //137
        (ANTLR_UINT8*) "EXCLAMATION_OPERATOR_PART", //138
        (ANTLR_UINT8*) "EXCLUDE_VK", //139
        (ANTLR_UINT8*) "EXECUTE_VK", //140
        (ANTLR_UINT8*) "EXIT_VK", //141
        (ANTLR_UINT8*) "EXPLAIN_STATEMENT", //142
        (ANTLR_UINT8*) "EXPR", //143
        (ANTLR_UINT8*) "EXPR_LIST", //144
        (ANTLR_UINT8*) "EXTERNAL_VK", //145
        (ANTLR_UINT8*) "EXTRACT_VK", //146
        (ANTLR_UINT8*) "FACTORING", //147
        (ANTLR_UINT8*) "FINAL_VK", //148
        (ANTLR_UINT8*) "FIRST_VALUE_VK", //149
        (ANTLR_UINT8*) "FIRST_VK", //150
        (ANTLR_UINT8*) "FLOAT_VK", //151
        (ANTLR_UINT8*) "FOLLOWING_VK", //152
        (ANTLR_UINT8*) "FOLLOWS_VK", //153
        (ANTLR_UINT8*) "FORALL_VK", //154
        (ANTLR_UINT8*) "FORCE_VK", //155
        (ANTLR_UINT8*) "FOR_MULTI_COLUMN", //156
        (ANTLR_UINT8*) "FOR_NOTATION", //157
        (ANTLR_UINT8*) "FOR_SINGLE_COLUMN", //158
        (ANTLR_UINT8*) "FULL_VK", //159
        (ANTLR_UINT8*) "FUNCTION_ENABLING_OVER", //160
        (ANTLR_UINT8*) "FUNCTION_ENABLING_USING", //161
        (ANTLR_UINT8*) "FUNCTION_ENABLING_WITHIN_OR_OVER", //162
        (ANTLR_UINT8*) "FUNCTION_NAME", //163
        (ANTLR_UINT8*) "GREATER_THAN_OP", //164
        (ANTLR_UINT8*) "GREATER_THAN_OR_EQUALS_OP", //165
        (ANTLR_UINT8*) "GROUPING_VK", //166
        (ANTLR_UINT8*) "GROUPIN_SET", //167
        (ANTLR_UINT8*) "GROUP_BY_CLAUSE", //168
        (ANTLR_UINT8*) "GROUP_BY_ELEMENT", //169
        (ANTLR_UINT8*) "HASH_VK", //170
        (ANTLR_UINT8*) "HEX_STRING_LIT", //171
        (ANTLR_UINT8*) "HIDE_VK", //172
        (ANTLR_UINT8*) "HIERARCHICAL", //173
        (ANTLR_UINT8*) "HOSTED_VARIABLE", //174
        (ANTLR_UINT8*) "HOSTED_VARIABLE_NAME", //175
        (ANTLR_UINT8*) "HOSTED_VARIABLE_ROUTINE_CALL", //176
        (ANTLR_UINT8*) "HOUR_VK", //177
        (ANTLR_UINT8*) "ID", //178
        (ANTLR_UINT8*) "IGNORE_VK", //179
        (ANTLR_UINT8*) "IMMEDIATE_VK", //180
        (ANTLR_UINT8*) "IMPLEMENTATION_TYPE_NAME", //181
        (ANTLR_UINT8*) "INCLUDE_VK", //182
        (ANTLR_UINT8*) "INCLUDING_VK", //183
        (ANTLR_UINT8*) "INCREMENT_VK", //184
        (ANTLR_UINT8*) "INDENT_VK", //185
        (ANTLR_UINT8*) "INDEX_NAME", //186
        (ANTLR_UINT8*) "INLINE_VK", //187
        (ANTLR_UINT8*) "INNER_VK", //188
        (ANTLR_UINT8*) "INOUT_VK", //189
        (ANTLR_UINT8*) "INSTANTIABLE_VK", //190
        (ANTLR_UINT8*) "INSTEAD_VK", //191
        (ANTLR_UINT8*) "INTEGER_VK", //192
        (ANTLR_UINT8*) "INTERVAL_DATATYPE", //193
        (ANTLR_UINT8*) "INTRODUCER", //194
        (ANTLR_UINT8*) "INT_VK", //195
        (ANTLR_UINT8*) "INVALIDATE_VK", //196
        (ANTLR_UINT8*) "ISOLATION_VK", //197
        (ANTLR_UINT8*) "IS_A_SET", //198
        (ANTLR_UINT8*) "IS_EMPTY", //199
        (ANTLR_UINT8*) "IS_INFINITE", //200
        (ANTLR_UINT8*) "IS_NAN", //201
        (ANTLR_UINT8*) "IS_NOT_A_SET", //202
        (ANTLR_UINT8*) "IS_NOT_EMPTY", //203
        (ANTLR_UINT8*) "IS_NOT_INFINITE", //204
        (ANTLR_UINT8*) "IS_NOT_NAN", //205
        (ANTLR_UINT8*) "IS_NOT_NULL", //206
        (ANTLR_UINT8*) "IS_NOT_OF_TYPE", //207
        (ANTLR_UINT8*) "IS_NOT_PRESENT", //208
        (ANTLR_UINT8*) "IS_NULL", //209
        (ANTLR_UINT8*) "IS_OF_TYPE", //210
        (ANTLR_UINT8*) "IS_PRESENT", //211
        (ANTLR_UINT8*) "ITERATE_VK", //212
        (ANTLR_UINT8*) "JAVA_VK", //213
        (ANTLR_UINT8*) "JOIN_DEF", //214
        (ANTLR_UINT8*) "KEEP_VK", //215
        (ANTLR_UINT8*) "LABEL_NAME", //216
        (ANTLR_UINT8*) "LANGUAGE_VK", //217
        (ANTLR_UINT8*) "LAST_VALUE_VK", //218
        (ANTLR_UINT8*) "LAST_VK", //219
        (ANTLR_UINT8*) "LEADING_VK", //220
        (ANTLR_UINT8*) "LEFT_BRACKET", //221
        (ANTLR_UINT8*) "LEFT_PAREN", //222
        (ANTLR_UINT8*) "LEFT_VK", //223
        (ANTLR_UINT8*) "LESS_THAN_OP", //224
        (ANTLR_UINT8*) "LESS_THAN_OR_EQUALS_OP", //225
        (ANTLR_UINT8*) "LIBRARY_VK", //226
        (ANTLR_UINT8*) "LIKE2_VK", //227
        (ANTLR_UINT8*) "LIKE4_VK", //228
        (ANTLR_UINT8*) "LIKEC_VK", //229
        (ANTLR_UINT8*) "LIMIT_VK", //230
        (ANTLR_UINT8*) "LINK_NAME", //231
        (ANTLR_UINT8*) "LOCAL_VK", //232
        (ANTLR_UINT8*) "LOCK_TABLE_ELEMENT", //233
        (ANTLR_UINT8*) "LOGIC_EXPR", //234
        (ANTLR_UINT8*) "LOGOFF_VK", //235
        (ANTLR_UINT8*) "LOGON_VK", //236
        (ANTLR_UINT8*) "LOG_VK", //237
        (ANTLR_UINT8*) "LONG_VK", //238
        (ANTLR_UINT8*) "LOOP_VK", //239
        (ANTLR_UINT8*) "MAIN_MODEL", //240
        (ANTLR_UINT8*) "MAIN_MODEL_NAME", //241
        (ANTLR_UINT8*) "MAP_VK", //242
        (ANTLR_UINT8*) "MAXVALUE_VK", //243
        (ANTLR_UINT8*) "MEASURES_VK", //244
        (ANTLR_UINT8*) "MEMBER_VK", //245
        (ANTLR_UINT8*) "MERGE_INSERT", //246
        (ANTLR_UINT8*) "MERGE_UPDATE", //247
        (ANTLR_UINT8*) "MERGE_VK", //248
        (ANTLR_UINT8*) "MINUS_SIGN", //249
        (ANTLR_UINT8*) "MINUTE_VK", //250
        (ANTLR_UINT8*) "MINVALUE_VK", //251
        (ANTLR_UINT8*) "MLSLABEL_VK", //252
        (ANTLR_UINT8*) "MODEL_COLUMN", //253
        (ANTLR_UINT8*) "MODEL_COLUMNS", //254
        (ANTLR_UINT8*) "MODEL_EXPRESSION", //255
        (ANTLR_UINT8*) "MODEL_RULE", //256
        (ANTLR_UINT8*) "MODEL_RULES", //257
        (ANTLR_UINT8*) "MODIFY_VK", //258
        (ANTLR_UINT8*) "MONTH_VK", //259
        (ANTLR_UINT8*) "MULTI_TABLE_MODE", //260
        (ANTLR_UINT8*) "NAME_VK", //261
        (ANTLR_UINT8*) "NATIONAL_CHAR_STRING_LIT", //262
        (ANTLR_UINT8*) "NATIVE_DATATYPE", //263
        (ANTLR_UINT8*) "NATURALN_VK", //264
        (ANTLR_UINT8*) "NATURAL_VK", //265
        (ANTLR_UINT8*) "NAV_VK", //266
        (ANTLR_UINT8*) "NCHAR_CS_VK", //267
        (ANTLR_UINT8*) "NCHAR_VK", //268
        (ANTLR_UINT8*) "NCLOB_VK", //269
        (ANTLR_UINT8*) "NESTED_EXPR", //270
        (ANTLR_UINT8*) "NESTED_SUBQUERY", //271
        (ANTLR_UINT8*) "NESTED_VK", //272
        (ANTLR_UINT8*) "NEWLINE", //273
        (ANTLR_UINT8*) "NEW_VK", //274
        (ANTLR_UINT8*) "NOAUDIT_VK", //275
        (ANTLR_UINT8*) "NOCACHE_VK", //276
        (ANTLR_UINT8*) "NOCOPY_VK", //277
        (ANTLR_UINT8*) "NOCYCLE_VK", //278
        (ANTLR_UINT8*) "NOENTITYESCAPING_VK", //279
        (ANTLR_UINT8*) "NOMAXVALUE_VK", //280
        (ANTLR_UINT8*) "NOMINVALUE_VK", //281
        (ANTLR_UINT8*) "NOORDER_VK", //282
        (ANTLR_UINT8*) "NOSCHEMACHECK_VK", //283
        (ANTLR_UINT8*) "NOT_BETWEEN", //284
        (ANTLR_UINT8*) "NOT_EQUAL_OP", //285
        (ANTLR_UINT8*) "NOT_IN", //286
        (ANTLR_UINT8*) "NOT_LIKE", //287
        (ANTLR_UINT8*) "NO_VK", //288
        (ANTLR_UINT8*) "NULLS_VK", //289
        (ANTLR_UINT8*) "NUMBER_VK", //290
        (ANTLR_UINT8*) "NUMERIC_VK", //291
        (ANTLR_UINT8*) "NVARCHAR2_VK", //292
        (ANTLR_UINT8*) "OBJECT_VK", //293
        (ANTLR_UINT8*) "OFF_VK", //294
        (ANTLR_UINT8*) "OLD_VK", //295
        (ANTLR_UINT8*) "ONLY_VK", //296
        (ANTLR_UINT8*) "OPEN_VK", //297
        (ANTLR_UINT8*) "ORADATA_VK", //298
        (ANTLR_UINT8*) "ORDER_BY_ELEMENT", //299
        (ANTLR_UINT8*) "ORDER_BY_ELEMENTS", //300
        (ANTLR_UINT8*) "ORDINALITY_VK", //301
        (ANTLR_UINT8*) "OUT_VK", //302
        (ANTLR_UINT8*) "OVERRIDING_VK", //303
        (ANTLR_UINT8*) "OVER_VK", //304
        (ANTLR_UINT8*) "PACKAGE_NAME", //305
        (ANTLR_UINT8*) "PACKAGE_VK", //306
        (ANTLR_UINT8*) "PARALLEL_ENABLE_VK", //307
        (ANTLR_UINT8*) "PARAMETERS_VK", //308
        (ANTLR_UINT8*) "PARAMETER_NAME", //309
        (ANTLR_UINT8*) "PARENT_VK", //310
        (ANTLR_UINT8*) "PARTITION_VK", //311
        (ANTLR_UINT8*) "PASSING_VK", //312
        (ANTLR_UINT8*) "PERCENT", //313
        (ANTLR_UINT8*) "PERCENT_FOUND_VK", //314
        (ANTLR_UINT8*) "PERCENT_ISOPEN_VK", //315
        (ANTLR_UINT8*) "PERCENT_NOTFOUND_VK", //316
        (ANTLR_UINT8*) "PERCENT_ROWCOUNT_VK", //317
        (ANTLR_UINT8*) "PERCENT_ROWTYPE_VK", //318
        (ANTLR_UINT8*) "PERCENT_TYPE_VK", //319
        (ANTLR_UINT8*) "PERIOD", //320
        (ANTLR_UINT8*) "PIPELINED_VK", //321
        (ANTLR_UINT8*) "PIVOT_ALIAS", //322
        (ANTLR_UINT8*) "PIVOT_ELEMENT", //323
        (ANTLR_UINT8*) "PIVOT_IN_ELEMENT", //324
        (ANTLR_UINT8*) "PIVOT_VK", //325
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_CAST", //326
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", //327
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_ELSIF", //328
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_MODEL", //329
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_MULTISET", //330
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_PIVOT", //331
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_UNPIVOT", //332
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_USING", //333
        (ANTLR_UINT8*) "PLSQL_RESERVED_CLUSTERS", //334
        (ANTLR_UINT8*) "PLSQL_RESERVED_COLAUTH", //335
        (ANTLR_UINT8*) "PLSQL_RESERVED_COMPRESS", //336
        (ANTLR_UINT8*) "PLSQL_RESERVED_CRASH", //337
        (ANTLR_UINT8*) "PLSQL_RESERVED_EXCLUSIVE", //338
        (ANTLR_UINT8*) "PLSQL_RESERVED_IDENTIFIED", //339
        (ANTLR_UINT8*) "PLSQL_RESERVED_IF", //340
        (ANTLR_UINT8*) "PLSQL_RESERVED_INDEX", //341
        (ANTLR_UINT8*) "PLSQL_RESERVED_INDEXES", //342
        (ANTLR_UINT8*) "PLSQL_RESERVED_LOCK", //343
        (ANTLR_UINT8*) "PLSQL_RESERVED_MINUS", //344
        (ANTLR_UINT8*) "PLSQL_RESERVED_MODE", //345
        (ANTLR_UINT8*) "PLSQL_RESERVED_NOCOMPRESS", //346
        (ANTLR_UINT8*) "PLSQL_RESERVED_NOWAIT", //347
        (ANTLR_UINT8*) "PLSQL_RESERVED_RESOURCE", //348
        (ANTLR_UINT8*) "PLSQL_RESERVED_SHARE", //349
        (ANTLR_UINT8*) "PLSQL_RESERVED_START", //350
        (ANTLR_UINT8*) "PLSQL_RESERVED_TABAUTH", //351
        (ANTLR_UINT8*) "PLSQL_RESERVED_VIEWS", //352
        (ANTLR_UINT8*) "PLS_INTEGER_VK", //353
        (ANTLR_UINT8*) "PLUS_SIGN", //354
        (ANTLR_UINT8*) "POSITIVEN_VK", //355
        (ANTLR_UINT8*) "POSITIVE_VK", //356
        (ANTLR_UINT8*) "PRAGMA_VK", //357
        (ANTLR_UINT8*) "PRECEDING_VK", //358
        (ANTLR_UINT8*) "PRECISION", //359
        (ANTLR_UINT8*) "PRECISION_VK", //360
        (ANTLR_UINT8*) "PREDICTION_FUNCTION", //361
        (ANTLR_UINT8*) "PROCEDURE_NAME", //362
        (ANTLR_UINT8*) "PROMPT", //363
        (ANTLR_UINT8*) "QS_ANGLE", //364
        (ANTLR_UINT8*) "QS_BRACE", //365
        (ANTLR_UINT8*) "QS_BRACK", //366
        (ANTLR_UINT8*) "QS_OTHER", //367
        (ANTLR_UINT8*) "QS_OTHER_CH", //368
        (ANTLR_UINT8*) "QS_PAREN", //369
        (ANTLR_UINT8*) "QUERY_NAME", //370
        (ANTLR_UINT8*) "QUESTION_MARK", //371
        (ANTLR_UINT8*) "QUOTE", //372
        (ANTLR_UINT8*) "RAISE_VK", //373
        (ANTLR_UINT8*) "RANGE_VK", //374
        (ANTLR_UINT8*) "RAW_VK", //375
        (ANTLR_UINT8*) "READ_VK", //376
        (ANTLR_UINT8*) "REAL_VK", //377
        (ANTLR_UINT8*) "RECORD_NAME", //378
        (ANTLR_UINT8*) "REFERENCE_MODEL_NAME", //379
        (ANTLR_UINT8*) "REFERENCE_VK", //380
        (ANTLR_UINT8*) "REFERENCING_VK", //381
        (ANTLR_UINT8*) "REF_VK", //382
        (ANTLR_UINT8*) "REGULAR_ID", //383
        (ANTLR_UINT8*) "REJECT_VK", //384
        (ANTLR_UINT8*) "RELIES_ON_VK", //385
        (ANTLR_UINT8*) "RENAME_VK", //386
        (ANTLR_UINT8*) "REPLACE_VK", //387
        (ANTLR_UINT8*) "RESPECT_VK", //388
        (ANTLR_UINT8*) "RESTRICT_REFERENCES_VK", //389
        (ANTLR_UINT8*) "RESULT_CACHE_VK", //390
        (ANTLR_UINT8*) "RETURN_VK", //391
        (ANTLR_UINT8*) "REUSE_VK", //392
        (ANTLR_UINT8*) "REVERSE_VK", //393
        (ANTLR_UINT8*) "RIGHT_BRACKET", //394
        (ANTLR_UINT8*) "RIGHT_PAREN", //395
        (ANTLR_UINT8*) "RIGHT_VK", //396
        (ANTLR_UINT8*) "ROLLBACK_SEGMENT_NAME", //397
        (ANTLR_UINT8*) "ROLLBACK_VK", //398
        (ANTLR_UINT8*) "ROLLUP_VK", //399
        (ANTLR_UINT8*) "ROUTINE_CALL", //400
        (ANTLR_UINT8*) "ROUTINE_NAME", //401
        (ANTLR_UINT8*) "ROWID_VK", //402
        (ANTLR_UINT8*) "ROWS_VK", //403
        (ANTLR_UINT8*) "ROW_VK", //404
        (ANTLR_UINT8*) "RULES_VK", //405
        (ANTLR_UINT8*) "SAMPLE_VK", //406
        (ANTLR_UINT8*) "SAVEPOINT_NAME", //407
        (ANTLR_UINT8*) "SAVEPOINT_VK", //408
        (ANTLR_UINT8*) "SCHEMACHECK_VK", //409
        (ANTLR_UINT8*) "SCHEMA_NAME", //410
        (ANTLR_UINT8*) "SCHEMA_VK", //411
        (ANTLR_UINT8*) "SCN_VK", //412
        (ANTLR_UINT8*) "SEARCHED_CASE", //413
        (ANTLR_UINT8*) "SEARCH_VK", //414
        (ANTLR_UINT8*) "SECOND_VK", //415
        (ANTLR_UINT8*) "SEED_VK", //416
        (ANTLR_UINT8*) "SELECTED_TABLEVIEW", //417
        (ANTLR_UINT8*) "SELECT_ITEM", //418
        (ANTLR_UINT8*) "SELECT_LIST", //419
        (ANTLR_UINT8*) "SELECT_MODE", //420
        (ANTLR_UINT8*) "SELECT_STATEMENT", //421
        (ANTLR_UINT8*) "SELF_VK", //422
        (ANTLR_UINT8*) "SEMICOLON", //423
        (ANTLR_UINT8*) "SEPARATOR", //424
        (ANTLR_UINT8*) "SEQUENCE_NAME", //425
        (ANTLR_UINT8*) "SEQUENCE_VK", //426
        (ANTLR_UINT8*) "SEQUENTIAL_VK", //427
        (ANTLR_UINT8*) "SERIALIZABLE_VK", //428
        (ANTLR_UINT8*) "SERIALLY_REUSABLE_VK", //429
        (ANTLR_UINT8*) "SERVERERROR_VK", //430
        (ANTLR_UINT8*) "SESSIONTIMEZONE_VK", //431
        (ANTLR_UINT8*) "SET_VK", //432
        (ANTLR_UINT8*) "SHOW_VK", //433
        (ANTLR_UINT8*) "SHUTDOWN_VK", //434
        (ANTLR_UINT8*) "SIBLINGS_VK", //435
        (ANTLR_UINT8*) "SIGNTYPE_VK", //436
        (ANTLR_UINT8*) "SIMPLE_CASE", //437
        (ANTLR_UINT8*) "SIMPLE_INTEGER_VK", //438
        (ANTLR_UINT8*) "SIMPLE_LETTER", //439
        (ANTLR_UINT8*) "SINGLE_TABLE_MODE", //440
        (ANTLR_UINT8*) "SINGLE_VK", //441
        (ANTLR_UINT8*) "SKIP_VK", //442
        (ANTLR_UINT8*) "SMALLINT_VK", //443
        (ANTLR_UINT8*) "SOLIDUS", //444
        (ANTLR_UINT8*) "SOME_VK", //445
        (ANTLR_UINT8*) "SPACE", //446
        (ANTLR_UINT8*) "SPECIFICATION_VK", //447
        (ANTLR_UINT8*) "SQL92_RESERVED_ALL", //448
        (ANTLR_UINT8*) "SQL92_RESERVED_ALTER", //449
        (ANTLR_UINT8*) "SQL92_RESERVED_AND", //450
        (ANTLR_UINT8*) "SQL92_RESERVED_ANY", //451
        (ANTLR_UINT8*) "SQL92_RESERVED_AS", //452
        (ANTLR_UINT8*) "SQL92_RESERVED_ASC", //453
        (ANTLR_UINT8*) "SQL92_RESERVED_BEGIN", //454
        (ANTLR_UINT8*) "SQL92_RESERVED_BETWEEN", //455
        (ANTLR_UINT8*) "SQL92_RESERVED_BY", //456
        (ANTLR_UINT8*) "SQL92_RESERVED_CASE", //457
        (ANTLR_UINT8*) "SQL92_RESERVED_CHECK", //458
        (ANTLR_UINT8*) "SQL92_RESERVED_CONNECT", //459
        (ANTLR_UINT8*) "SQL92_RESERVED_CREATE", //460
        (ANTLR_UINT8*) "SQL92_RESERVED_CURRENT", //461
        (ANTLR_UINT8*) "SQL92_RESERVED_CURSOR", //462
        (ANTLR_UINT8*) "SQL92_RESERVED_DATE", //463
        (ANTLR_UINT8*) "SQL92_RESERVED_DECLARE", //464
        (ANTLR_UINT8*) "SQL92_RESERVED_DEFAULT", //465
        (ANTLR_UINT8*) "SQL92_RESERVED_DELETE", //466
        (ANTLR_UINT8*) "SQL92_RESERVED_DESC", //467
        (ANTLR_UINT8*) "SQL92_RESERVED_DISTINCT", //468
        (ANTLR_UINT8*) "SQL92_RESERVED_DROP", //469
        (ANTLR_UINT8*) "SQL92_RESERVED_ELSE", //470
        (ANTLR_UINT8*) "SQL92_RESERVED_END", //471
        (ANTLR_UINT8*) "SQL92_RESERVED_EXCEPTION", //472
        (ANTLR_UINT8*) "SQL92_RESERVED_EXISTS", //473
        (ANTLR_UINT8*) "SQL92_RESERVED_FALSE", //474
        (ANTLR_UINT8*) "SQL92_RESERVED_FETCH", //475
        (ANTLR_UINT8*) "SQL92_RESERVED_FOR", //476
        (ANTLR_UINT8*) "SQL92_RESERVED_FROM", //477
        (ANTLR_UINT8*) "SQL92_RESERVED_GOTO", //478
        (ANTLR_UINT8*) "SQL92_RESERVED_GRANT", //479
        (ANTLR_UINT8*) "SQL92_RESERVED_GROUP", //480
        (ANTLR_UINT8*) "SQL92_RESERVED_HAVING", //481
        (ANTLR_UINT8*) "SQL92_RESERVED_IN", //482
        (ANTLR_UINT8*) "SQL92_RESERVED_INSERT", //483
        (ANTLR_UINT8*) "SQL92_RESERVED_INTERSECT", //484
        (ANTLR_UINT8*) "SQL92_RESERVED_INTO", //485
        (ANTLR_UINT8*) "SQL92_RESERVED_IS", //486
        (ANTLR_UINT8*) "SQL92_RESERVED_LIKE", //487
        (ANTLR_UINT8*) "SQL92_RESERVED_NOT", //488
        (ANTLR_UINT8*) "SQL92_RESERVED_NULL", //489
        (ANTLR_UINT8*) "SQL92_RESERVED_OF", //490
        (ANTLR_UINT8*) "SQL92_RESERVED_ON", //491
        (ANTLR_UINT8*) "SQL92_RESERVED_OPTION", //492
        (ANTLR_UINT8*) "SQL92_RESERVED_OR", //493
        (ANTLR_UINT8*) "SQL92_RESERVED_ORDER", //494
        (ANTLR_UINT8*) "SQL92_RESERVED_OVERLAPS", //495
        (ANTLR_UINT8*) "SQL92_RESERVED_PRIOR", //496
        (ANTLR_UINT8*) "SQL92_RESERVED_PROCEDURE", //497
        (ANTLR_UINT8*) "SQL92_RESERVED_PUBLIC", //498
        (ANTLR_UINT8*) "SQL92_RESERVED_REVOKE", //499
        (ANTLR_UINT8*) "SQL92_RESERVED_SELECT", //500
        (ANTLR_UINT8*) "SQL92_RESERVED_SIZE", //501
        (ANTLR_UINT8*) "SQL92_RESERVED_TABLE", //502
        (ANTLR_UINT8*) "SQL92_RESERVED_THE", //503
        (ANTLR_UINT8*) "SQL92_RESERVED_THEN", //504
        (ANTLR_UINT8*) "SQL92_RESERVED_TO", //505
        (ANTLR_UINT8*) "SQL92_RESERVED_TRUE", //506
        (ANTLR_UINT8*) "SQL92_RESERVED_UNION", //507
        (ANTLR_UINT8*) "SQL92_RESERVED_UNIQUE", //508
        (ANTLR_UINT8*) "SQL92_RESERVED_UPDATE", //509
        (ANTLR_UINT8*) "SQL92_RESERVED_VALUES", //510
        (ANTLR_UINT8*) "SQL92_RESERVED_VIEW", //511
        (ANTLR_UINT8*) "SQL92_RESERVED_WHEN", //512
        (ANTLR_UINT8*) "SQL92_RESERVED_WHERE", //513
        (ANTLR_UINT8*) "SQL92_RESERVED_WITH", //514
        (ANTLR_UINT8*) "SQLDATA_VK", //515
        (ANTLR_UINT8*) "STANDALONE_VK", //516
        (ANTLR_UINT8*) "STANDARD_FUNCTION", //517
        (ANTLR_UINT8*) "STARTUP_VK", //518
        (ANTLR_UINT8*) "STATIC_RETURNING", //519
        (ANTLR_UINT8*) "STATIC_VK", //520
        (ANTLR_UINT8*) "STATISTICS_VK", //521
        (ANTLR_UINT8*) "STRING_VK", //522
        (ANTLR_UINT8*) "SUBMULTISET_VK", //523
        (ANTLR_UINT8*) "SUBPARTITION_VK", //524
        (ANTLR_UINT8*) "SUBQUERY", //525
        (ANTLR_UINT8*) "SUSPEND_VK", //526
        (ANTLR_UINT8*) "TABLEVIEW_NAME", //527
        (ANTLR_UINT8*) "TABLE_ELEMENT", //528
        (ANTLR_UINT8*) "TABLE_EXPRESSION", //529
        (ANTLR_UINT8*) "TABLE_REF", //530
        (ANTLR_UINT8*) "TABLE_REF_ELEMENT", //531
        (ANTLR_UINT8*) "TABLE_VAR_NAME", //532
        (ANTLR_UINT8*) "TILDE_OPERATOR_PART", //533
        (ANTLR_UINT8*) "TIMESTAMP_LTZ_UNCONSTRAINED_VK", //534
        (ANTLR_UINT8*) "TIMESTAMP_TZ_UNCONSTRAINED_VK", //535
        (ANTLR_UINT8*) "TIMESTAMP_UNCONSTRAINED_VK", //536
        (ANTLR_UINT8*) "TIMESTAMP_VK", //537
        (ANTLR_UINT8*) "TIMEZONE_ABBR_VK", //538
        (ANTLR_UINT8*) "TIMEZONE_HOUR_VK", //539
        (ANTLR_UINT8*) "TIMEZONE_MINUTE_VK", //540
        (ANTLR_UINT8*) "TIMEZONE_REGION_VK", //541
        (ANTLR_UINT8*) "TIME_VK", //542
        (ANTLR_UINT8*) "TRAILING_VK", //543
        (ANTLR_UINT8*) "TRANSLATE_VK", //544
        (ANTLR_UINT8*) "TREAT_VK", //545
        (ANTLR_UINT8*) "TRIGGER_NAME", //546
        (ANTLR_UINT8*) "TRIM_VK", //547
        (ANTLR_UINT8*) "TRUNCATE_VK", //548
        (ANTLR_UINT8*) "TYPE_NAME", //549
        (ANTLR_UINT8*) "TYPE_VK", //550
        (ANTLR_UINT8*) "T_BINDVAR_NAME", //551
        (ANTLR_UINT8*) "T_COLUMN_ALIAS", //552
        (ANTLR_UINT8*) "T_COLUMN_LIST", //553
        (ANTLR_UINT8*) "T_COLUMN_NAME", //554
        (ANTLR_UINT8*) "T_COND_AND", //555
        (ANTLR_UINT8*) "T_COND_AND_SEQ", //556
        (ANTLR_UINT8*) "T_COND_BETWEEN", //557
        (ANTLR_UINT8*) "T_COND_COMPARISON", //558
        (ANTLR_UINT8*) "T_COND_EQUALS_PATH", //559
        (ANTLR_UINT8*) "T_COND_EXISTS", //560
        (ANTLR_UINT8*) "T_COND_GROUP_COMPARISON", //561
        (ANTLR_UINT8*) "T_COND_IN", //562
        (ANTLR_UINT8*) "T_COND_IS", //563
        (ANTLR_UINT8*) "T_COND_IS_ANY", //564
        (ANTLR_UINT8*) "T_COND_IS_A_SET", //565
        (ANTLR_UINT8*) "T_COND_IS_EMPTY", //566
        (ANTLR_UINT8*) "T_COND_IS_OF_TYPE", //567
        (ANTLR_UINT8*) "T_COND_IS_PRESENT", //568
        (ANTLR_UINT8*) "T_COND_LIKE", //569
        (ANTLR_UINT8*) "T_COND_MEMEBER", //570
        (ANTLR_UINT8*) "T_COND_NOT", //571
        (ANTLR_UINT8*) "T_COND_OR", //572
        (ANTLR_UINT8*) "T_COND_OR_SEQ", //573
        (ANTLR_UINT8*) "T_COND_PAREN", //574
        (ANTLR_UINT8*) "T_COND_REGEXP_LIKE", //575
        (ANTLR_UINT8*) "T_COND_SUBMULTISET", //576
        (ANTLR_UINT8*) "T_COND_UNDER_PATH", //577
        (ANTLR_UINT8*) "T_DBLINK_NAME", //578
        (ANTLR_UINT8*) "T_DECL", //579
        (ANTLR_UINT8*) "T_FOR_UPDATE_CLAUSE", //580
        (ANTLR_UINT8*) "T_FROM", //581
        (ANTLR_UINT8*) "T_FUNCTION_NAME", //582
        (ANTLR_UINT8*) "T_GROUP_BY", //583
        (ANTLR_UINT8*) "T_HIERARCHICAL", //584
        (ANTLR_UINT8*) "T_IDENTIFIER", //585
        (ANTLR_UINT8*) "T_JOINING_CLAUSE", //586
        (ANTLR_UINT8*) "T_MODEL", //587
        (ANTLR_UINT8*) "T_OPERATOR_BINARY", //588
        (ANTLR_UINT8*) "T_OPERATOR_PART", //589
        (ANTLR_UINT8*) "T_OPERATOR_UNARY", //590
        (ANTLR_UINT8*) "T_ORDER_BY_CLAUSE", //591
        (ANTLR_UINT8*) "T_PACKAGE_NAME", //592
        (ANTLR_UINT8*) "T_RESERVED", //593
        (ANTLR_UINT8*) "T_SCHEMA_NAME", //594
        (ANTLR_UINT8*) "T_SELECT", //595
        (ANTLR_UINT8*) "T_SELECT_COLUMN", //596
        (ANTLR_UINT8*) "T_SUBQUERY", //597
        (ANTLR_UINT8*) "T_TABLE_ALIAS", //598
        (ANTLR_UINT8*) "T_TABLE_CAST", //599
        (ANTLR_UINT8*) "T_TABLE_NAME", //600
        (ANTLR_UINT8*) "T_TABLE_REF", //601
        (ANTLR_UINT8*) "T_UNION", //602
        (ANTLR_UINT8*) "T_UNKNOWN", //603
        (ANTLR_UINT8*) "T_USE", //604
        (ANTLR_UINT8*) "T_WHERE", //605
        (ANTLR_UINT8*) "T_WITH", //606
        (ANTLR_UINT8*) "UNARY_OPERATOR", //607
        (ANTLR_UINT8*) "UNBOUNDED_VK", //608
        (ANTLR_UINT8*) "UNDERSCORE", //609
        (ANTLR_UINT8*) "UNDER_VK", //610
        (ANTLR_UINT8*) "UNLIMITED_VK", //611
        (ANTLR_UINT8*) "UNPIVOT_IN_ELEMENT", //612
        (ANTLR_UINT8*) "UNPIVOT_VK", //613
        (ANTLR_UINT8*) "UNSIGNED_INTEGER", //614
        (ANTLR_UINT8*) "UNTIL_VK", //615
        (ANTLR_UINT8*) "UPDATED_VK", //616
        (ANTLR_UINT8*) "UPSERT_VK", //617
        (ANTLR_UINT8*) "UROWID_VK", //618
        (ANTLR_UINT8*) "VALIDATE_VK", //619
        (ANTLR_UINT8*) "VALUE_VK", //620
        (ANTLR_UINT8*) "VARCHAR2_VK", //621
        (ANTLR_UINT8*) "VARCHAR_VK", //622
        (ANTLR_UINT8*) "VARIABLE_NAME", //623
        (ANTLR_UINT8*) "VECTOR_EXPR", //624
        (ANTLR_UINT8*) "VERSIONS_VK", //625
        (ANTLR_UINT8*) "VERSION_VK", //626
        (ANTLR_UINT8*) "VERTICAL_BAR", //627
        (ANTLR_UINT8*) "WAIT_VK", //628
        (ANTLR_UINT8*) "WELLFORMED_VK", //629
        (ANTLR_UINT8*) "WITHIN_VK", //630
        (ANTLR_UINT8*) "WORK_VK", //631
        (ANTLR_UINT8*) "WRITE_VK", //632
        (ANTLR_UINT8*) "XMLAGG_VK", //633
        (ANTLR_UINT8*) "XMLATTRIBUTES_VK", //634
        (ANTLR_UINT8*) "XMLCAST_VK", //635
        (ANTLR_UINT8*) "XMLCOLATTVAL_VK", //636
        (ANTLR_UINT8*) "XMLELEMENT_VK", //637
        (ANTLR_UINT8*) "XMLEXISTS_VK", //638
        (ANTLR_UINT8*) "XMLFOREST_VK", //639
        (ANTLR_UINT8*) "XMLNAMESPACES_VK", //640
        (ANTLR_UINT8*) "XMLPARSE_VK", //641
        (ANTLR_UINT8*) "XMLPI_VK", //642
        (ANTLR_UINT8*) "XMLQUERY_VK", //643
        (ANTLR_UINT8*) "XMLROOT_VK", //644
        (ANTLR_UINT8*) "XMLSERIALIZE_VK", //645
        (ANTLR_UINT8*) "XMLTABLE_VK", //646
        (ANTLR_UINT8*) "XML_ALIAS", //647
        (ANTLR_UINT8*) "XML_COLUMN", //648
        (ANTLR_UINT8*) "XML_COLUMN_NAME", //649
        (ANTLR_UINT8*) "XML_ELEMENT", //650
        (ANTLR_UINT8*) "XML_VK", //651
        (ANTLR_UINT8*) "YEAR_VK", //652
        (ANTLR_UINT8*) "YES_VK", //653
        (ANTLR_UINT8*) "YMINTERVAL_UNCONSTRAINED_VK", //654
        (ANTLR_UINT8*) "ZV", //655
        (ANTLR_UINT8*) "CONJUNCTION", //666
        (ANTLR_UINT8*) "DISJUNCTION", //668
       };


//typedef CommonTreeAdaptor adaptor;
//TreeAdaptor adaptor = new CommonTreeAdaptor();

//void setTreeAdaptor(TreeAdaptor adaptor)
//{
//	this.adaptor = adaptor;
//	<grammar.directDelegates:{g|<g:delegateName()>.setTreeAdaptor(this.adaptor);}>
//}
//TreeAdaptor getTreeAdaptor()
//{
//	return adaptor;
//}
/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "OracleDML.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* OracleDML::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new OracleDML parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
OracleDML::OracleDML( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new OracleDML parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
OracleDML::OracleDML( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void OracleDML::init(StreamType* instream)
{
	/* Allocate TreeAdaptorType 
	 */
	this->get_psrstate()->set_treeAdaptor( new TreeAdaptorType() );
	// Initialize the lexers/parsers that we are going to delegate some
	// functions to.
	//
	m_gOracleDMLKeys = new OracleDML_OracleDMLKeys(instream, this->get_psrstate(), this);
	m_gOracleDMLCommons = new OracleDML_OracleDMLCommons(instream, this->get_psrstate(), this);
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( OracleDMLTokenNames );

}

void
OracleDML::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
OracleDML::~OracleDML()
{
	// Free the parsers that we delegated to functions to.
	// NULL the state so we only free it once.
	//
	m_gOracleDMLKeys->set_psrstate( NULL );
	         delete m_gOracleDMLKeys;
	m_gOracleDMLCommons->set_psrstate( NULL );
	         delete m_gOracleDMLCommons;
	/* Deallocate TreeAdaptorType 
	 */
	delete this->get_psrstate()->get_treeAdaptor();
}

/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
ANTLR_UINT8**	OracleDML::getTokenNames()
{
        return OracleDMLTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seq_of_statements_in_compilation_unit670_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000800000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2010000800040000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seq_of_statements_in_compilation_unit670( FOLLOW_seq_of_statements_in_compilation_unit670_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EOF_TOKEN_in_compilation_unit673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EOF_TOKEN_in_compilation_unit673( FOLLOW_EOF_TOKEN_in_compilation_unit673_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_seq_of_statements700_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_seq_of_statements700( FOLLOW_select_statement_in_seq_of_statements700_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_statement_in_seq_of_statements711_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_statement_in_seq_of_statements711( FOLLOW_update_statement_in_seq_of_statements711_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_delete_statement_in_seq_of_statements722_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_delete_statement_in_seq_of_statements722( FOLLOW_delete_statement_in_seq_of_statements722_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_statement_in_seq_of_statements733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_statement_in_seq_of_statements733( FOLLOW_insert_statement_in_seq_of_statements733_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_table_statement_in_seq_of_statements744_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_table_statement_in_seq_of_statements744( FOLLOW_lock_table_statement_in_seq_of_statements744_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_statement_in_seq_of_statements755_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_statement_in_seq_of_statements755( FOLLOW_merge_statement_in_seq_of_statements755_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_explain_statement_in_seq_of_statements766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_explain_statement_in_seq_of_statements766( FOLLOW_explain_statement_in_seq_of_statements766_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_in_seq_of_statements778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_in_seq_of_statements778( FOLLOW_set_in_seq_of_statements778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_explain_key_in_explain_statement809_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_explain_key_in_explain_statement809( FOLLOW_explain_key_in_explain_statement809_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_plan_key_in_explain_statement811_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_plan_key_in_explain_statement811( FOLLOW_plan_key_in_explain_statement811_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_explain_statement823_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_explain_statement823( FOLLOW_set_key_in_explain_statement823_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_statement_id_key_in_explain_statement825_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_statement_id_key_in_explain_statement825( FOLLOW_statement_id_key_in_explain_statement825_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_explain_statement827_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_explain_statement827( FOLLOW_EQUALS_OP_in_explain_statement827_bits, 5 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_quoted_string_in_explain_statement829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_quoted_string_in_explain_statement829( FOLLOW_quoted_string_in_explain_statement829_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_key_in_explain_statement843_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_key_in_explain_statement843( FOLLOW_into_key_in_explain_statement843_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_explain_statement845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_explain_statement845( FOLLOW_tableview_name_in_explain_statement845_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_explain_statement858_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2010000800040000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_explain_statement858( FOLLOW_for_key_in_explain_statement858_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_explain_statement871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_explain_statement871( FOLLOW_select_statement_in_explain_statement871_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_statement_in_explain_statement884_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_statement_in_explain_statement884( FOLLOW_update_statement_in_explain_statement884_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_delete_statement_in_explain_statement897_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_delete_statement_in_explain_statement897( FOLLOW_delete_statement_in_explain_statement897_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_statement_in_explain_statement910_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_statement_in_explain_statement910( FOLLOW_insert_statement_in_explain_statement910_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_statement_in_explain_statement923_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_statement_in_explain_statement923( FOLLOW_merge_statement_in_explain_statement923_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_factoring_clause_in_select_statement984_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_factoring_clause_in_select_statement984( FOLLOW_subquery_factoring_clause_in_select_statement984_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_select_statement995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_select_statement995( FOLLOW_subquery_in_select_statement995_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_update_clause_in_select_statement1006_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_update_clause_in_select_statement1006( FOLLOW_for_update_clause_in_select_statement1006_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_select_statement1018_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_select_statement1018( FOLLOW_order_by_clause_in_select_statement1018_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_subquery_factoring_clause1069_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_subquery_factoring_clause1069( FOLLOW_with_key_in_subquery_factoring_clause1069_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_factoring_element_in_subquery_factoring_clause1072_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_factoring_element_in_subquery_factoring_clause1072( FOLLOW_factoring_element_in_subquery_factoring_clause1072_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_subquery_factoring_clause1075_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_subquery_factoring_clause1075( FOLLOW_COMMA_in_subquery_factoring_clause1075_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_factoring_element_in_subquery_factoring_clause1078_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_factoring_element_in_subquery_factoring_clause1078( FOLLOW_factoring_element_in_subquery_factoring_clause1078_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_name_in_factoring_element1100_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_name_in_factoring_element1100( FOLLOW_query_name_in_factoring_element1100_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_factoring_element1103_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_factoring_element1103( FOLLOW_LEFT_PAREN_in_factoring_element1103_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_factoring_element1105_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_factoring_element1105( FOLLOW_column_name_in_factoring_element1105_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_factoring_element1108_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_factoring_element1108( FOLLOW_COMMA_in_factoring_element1108_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_factoring_element1110_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_factoring_element1110( FOLLOW_column_name_in_factoring_element1110_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_factoring_element1114_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_factoring_element1114( FOLLOW_RIGHT_PAREN_in_factoring_element1114_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_factoring_element1118_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_factoring_element1118( FOLLOW_as_key_in_factoring_element1118_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_factoring_element1120_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_factoring_element1120( FOLLOW_LEFT_PAREN_in_factoring_element1120_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_factoring_element1122_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_factoring_element1122( FOLLOW_subquery_in_factoring_element1122_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_factoring_element1124_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_factoring_element1124( FOLLOW_order_by_clause_in_factoring_element1124_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_factoring_element1127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_factoring_element1127( FOLLOW_RIGHT_PAREN_in_factoring_element1127_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_search_clause_in_factoring_element1138_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_search_clause_in_factoring_element1138( FOLLOW_search_clause_in_factoring_element1138_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cycle_clause_in_factoring_element1150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cycle_clause_in_factoring_element1150( FOLLOW_cycle_clause_in_factoring_element1150_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_search_key_in_search_clause1198_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_search_key_in_search_clause1198( FOLLOW_search_key_in_search_clause1198_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_depth_key_in_search_clause1202_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_depth_key_in_search_clause1202( FOLLOW_depth_key_in_search_clause1202_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_breadth_key_in_search_clause1206_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_breadth_key_in_search_clause1206( FOLLOW_breadth_key_in_search_clause1206_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_search_clause1210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_search_clause1210( FOLLOW_first_key_in_search_clause1210_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_search_clause1212_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_search_clause1212( FOLLOW_by_key_in_search_clause1212_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_search_clause1227_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080020) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_search_clause1227( FOLLOW_column_name_in_search_clause1227_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_asc_key_in_search_clause1229_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_asc_key_in_search_clause1229( FOLLOW_asc_key_in_search_clause1229_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_desc_key_in_search_clause1233_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_desc_key_in_search_clause1233( FOLLOW_desc_key_in_search_clause1233_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_search_clause1238_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_search_clause1238( FOLLOW_nulls_key_in_search_clause1238_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_search_clause1240_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_search_clause1240( FOLLOW_first_key_in_search_clause1240_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_search_clause1245_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_search_clause1245( FOLLOW_nulls_key_in_search_clause1245_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_last_key_in_search_clause1247_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_last_key_in_search_clause1247( FOLLOW_last_key_in_search_clause1247_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_search_clause1265_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_search_clause1265( FOLLOW_COMMA_in_search_clause1265_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_search_clause1267_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080020) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_search_clause1267( FOLLOW_column_name_in_search_clause1267_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_asc_key_in_search_clause1269_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_asc_key_in_search_clause1269( FOLLOW_asc_key_in_search_clause1269_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_desc_key_in_search_clause1273_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_desc_key_in_search_clause1273( FOLLOW_desc_key_in_search_clause1273_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_search_clause1278_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_search_clause1278( FOLLOW_nulls_key_in_search_clause1278_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_search_clause1280_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_search_clause1280( FOLLOW_first_key_in_search_clause1280_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_search_clause1285_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_search_clause1285( FOLLOW_nulls_key_in_search_clause1285_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_last_key_in_search_clause1287_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_last_key_in_search_clause1287( FOLLOW_last_key_in_search_clause1287_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_search_clause1307_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_search_clause1307( FOLLOW_set_key_in_search_clause1307_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_search_clause1309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_search_clause1309( FOLLOW_column_name_in_search_clause1309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cycle_key_in_cycle_clause1329_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cycle_key_in_cycle_clause1329( FOLLOW_cycle_key_in_cycle_clause1329_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_cycle_clause1331_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_cycle_clause1331( FOLLOW_column_name_in_cycle_clause1331_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_cycle_clause1335_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_cycle_clause1335( FOLLOW_COMMA_in_cycle_clause1335_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_cycle_clause1337_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_cycle_clause1337( FOLLOW_column_name_in_cycle_clause1337_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_cycle_clause1341_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_cycle_clause1341( FOLLOW_set_key_in_cycle_clause1341_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_cycle_clause1343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_cycle_clause1343( FOLLOW_column_name_in_cycle_clause1343_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_to_key_in_cycle_clause1345_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_to_key_in_cycle_clause1345( FOLLOW_to_key_in_cycle_clause1345_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_cycle_clause1347_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_cycle_clause1347( FOLLOW_expression_in_cycle_clause1347_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_default_key_in_cycle_clause1349_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_default_key_in_cycle_clause1349( FOLLOW_default_key_in_cycle_clause1349_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_cycle_clause1351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_cycle_clause1351( FOLLOW_expression_in_cycle_clause1351_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_basic_elements_in_subquery1371_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_basic_elements_in_subquery1371( FOLLOW_subquery_basic_elements_in_subquery1371_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_operation_part_in_subquery1373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_operation_part_in_subquery1373( FOLLOW_subquery_operation_part_in_subquery1373_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_union_key_in_subquery_operation_part1414_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_union_key_in_subquery_operation_part1414( FOLLOW_union_key_in_subquery_operation_part1414_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_subquery_operation_part1417_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_subquery_operation_part1417( FOLLOW_all_key_in_subquery_operation_part1417_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_intersect_key_in_subquery_operation_part1420_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_intersect_key_in_subquery_operation_part1420( FOLLOW_intersect_key_in_subquery_operation_part1420_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_minus_key_in_subquery_operation_part1423_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_minus_key_in_subquery_operation_part1423( FOLLOW_minus_key_in_subquery_operation_part1423_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_basic_elements_in_subquery_operation_part1427_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_basic_elements_in_subquery_operation_part1427( FOLLOW_subquery_basic_elements_in_subquery_operation_part1427_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_block_in_subquery_basic_elements1447_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_block_in_subquery_basic_elements1447( FOLLOW_query_block_in_subquery_basic_elements1447_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_subquery_basic_elements1458_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_subquery_basic_elements1458( FOLLOW_LEFT_PAREN_in_subquery_basic_elements1458_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_subquery_basic_elements1461_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_subquery_basic_elements1461( FOLLOW_subquery_in_subquery_basic_elements1461_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1463_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1463( FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1463_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_query_block1482_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x140103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_query_block1482( FOLLOW_select_key_in_query_block1482_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_selected_list_in_query_block1492_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_selected_list_in_query_block1492( FOLLOW_selected_list_in_query_block1492_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_clause_in_query_block1502_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_clause_in_query_block1502( FOLLOW_into_clause_in_query_block1502_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_clause_in_query_block1513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000200), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000300000800), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_clause_in_query_block1513( FOLLOW_from_clause_in_query_block1513_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_query_block1524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000200), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000300000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_query_block1524( FOLLOW_where_clause_in_query_block1524_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_hierarchical_query_clause_in_query_block1536_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000300000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_hierarchical_query_clause_in_query_block1536( FOLLOW_hierarchical_query_clause_in_query_block1536_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_clause_in_query_block1548_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_clause_in_query_block1548( FOLLOW_group_by_clause_in_query_block1548_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_clause_in_query_block1559_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_clause_in_query_block1559( FOLLOW_model_clause_in_query_block1559_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_selected_list1637_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_selected_list1637( FOLLOW_distinct_key_in_selected_list1637_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_selected_list1639_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_selected_list1639( FOLLOW_unique_key_in_selected_list1639_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_selected_list1641_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_selected_list1641( FOLLOW_all_key_in_selected_list1641_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_selected_list1656_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_selected_list1656( FOLLOW_ASTERISK_in_selected_list1656_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_selected_element_in_selected_list1670_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_selected_element_in_selected_list1670( FOLLOW_selected_element_in_selected_list1670_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_selected_element_seq_in_selected_list1672_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_selected_element_seq_in_selected_list1672( FOLLOW_selected_element_seq_in_selected_list1672_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_list_elements_in_selected_element1758_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_list_elements_in_selected_element1758( FOLLOW_select_list_elements_in_selected_element1758_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_selected_element1760_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_selected_element1760( FOLLOW_column_alias_in_selected_element1760_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_selected_element_seq1800_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_selected_element_seq1800( FOLLOW_COMMA_in_selected_element_seq1800_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_list_elements_in_selected_element_seq1802_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_list_elements_in_selected_element_seq1802( FOLLOW_select_list_elements_in_selected_element_seq1802_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_selected_element_seq1804_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_selected_element_seq1804( FOLLOW_column_alias_in_selected_element_seq1804_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_from_clause1845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_from_clause1845( FOLLOW_from_key_in_from_clause1845_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_list_in_from_clause1848_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_list_in_from_clause1848( FOLLOW_table_ref_list_in_from_clause1848_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_select_list_elements1877_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_select_list_elements1877( FOLLOW_tableview_name_in_select_list_elements1877_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_select_list_elements1879_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_select_list_elements1879( FOLLOW_PERIOD_in_select_list_elements1879_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_select_list_elements1881_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_select_list_elements1881( FOLLOW_ASTERISK_in_select_list_elements1881_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_select_list_elements1907_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_select_list_elements1907( FOLLOW_expression_in_select_list_elements1907_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_in_table_ref_list1935_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_in_table_ref_list1935( FOLLOW_table_ref_in_table_ref_list1935_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_list_seq_in_table_ref_list1937_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_list_seq_in_table_ref_list1937( FOLLOW_table_ref_list_seq_in_table_ref_list1937_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_table_ref_list_seq1977_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_table_ref_list_seq1977( FOLLOW_COMMA_in_table_ref_list_seq1977_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_in_table_ref_list_seq1979_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_in_table_ref_list_seq1979( FOLLOW_table_ref_in_table_ref_list_seq1979_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_in_table_ref2020_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000001800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_in_table_ref2020( FOLLOW_table_ref_aux_in_table_ref2020_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_join_clause_in_table_ref2022_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000001800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_join_clause_in_table_ref2022( FOLLOW_join_clause_in_table_ref2022_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_clause_in_table_ref2026_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_clause_in_table_ref2026( FOLLOW_pivot_clause_in_table_ref2026_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_clause_in_table_ref2028_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_clause_in_table_ref2028( FOLLOW_unpivot_clause_in_table_ref2028_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_ver1_in_table_ref_aux2106_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_ver1_in_table_ref_aux2106( FOLLOW_table_ref_aux_ver1_in_table_ref_aux2106_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_ver2_in_table_ref_aux2123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_ver2_in_table_ref_aux2123( FOLLOW_table_ref_aux_ver2_in_table_ref_aux2123_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_ver3_in_table_ref_aux2142_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_ver3_in_table_ref_aux2142( FOLLOW_table_ref_aux_ver3_in_table_ref_aux2142_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_ver4_in_table_ref_aux2153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_ver4_in_table_ref_aux2153( FOLLOW_table_ref_aux_ver4_in_table_ref_aux2153_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver12196_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000001800), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver12196( FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver12196_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_clause_in_table_ref_aux_ver12207_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_clause_in_table_ref_aux_ver12207( FOLLOW_pivot_clause_in_table_ref_aux_ver12207_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_clause_in_table_ref_aux_ver12209_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_clause_in_table_ref_aux_ver12209( FOLLOW_unpivot_clause_in_table_ref_aux_ver12209_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_flashback_query_clause_in_table_ref_aux_ver12213_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_flashback_query_clause_in_table_ref_aux_ver12213( FOLLOW_flashback_query_clause_in_table_ref_aux_ver12213_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_table_ref_aux_ver12219_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_table_ref_aux_ver12219( FOLLOW_table_alias_in_table_ref_aux_ver12219_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_table_ref_aux_ver22280_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_table_ref_aux_ver22280( FOLLOW_LEFT_PAREN_in_table_ref_aux_ver22280_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_in_table_ref_aux_ver22282_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_in_table_ref_aux_ver22282( FOLLOW_table_ref_in_table_ref_aux_ver22282_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_operation_part_in_table_ref_aux_ver22284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_operation_part_in_table_ref_aux_ver22284( FOLLOW_subquery_operation_part_in_table_ref_aux_ver22284_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver22287_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000001800), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver22287( FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver22287_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_clause_in_table_ref_aux_ver22298_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_clause_in_table_ref_aux_ver22298( FOLLOW_pivot_clause_in_table_ref_aux_ver22298_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_clause_in_table_ref_aux_ver22300_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_clause_in_table_ref_aux_ver22300( FOLLOW_unpivot_clause_in_table_ref_aux_ver22300_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_flashback_query_clause_in_table_ref_aux_ver22304_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_flashback_query_clause_in_table_ref_aux_ver22304( FOLLOW_flashback_query_clause_in_table_ref_aux_ver22304_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_table_ref_aux_ver22310_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_table_ref_aux_ver22310( FOLLOW_table_alias_in_table_ref_aux_ver22310_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_table_ref_aux_ver32383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_table_ref_aux_ver32383( FOLLOW_only_key_in_table_ref_aux_ver32383_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_table_ref_aux_ver32385_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_table_ref_aux_ver32385( FOLLOW_LEFT_PAREN_in_table_ref_aux_ver32385_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver32387_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver32387( FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver32387_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver32389_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver32389( FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver32389_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_flashback_query_clause_in_table_ref_aux_ver32399_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_flashback_query_clause_in_table_ref_aux_ver32399( FOLLOW_flashback_query_clause_in_table_ref_aux_ver32399_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_table_ref_aux_ver32405_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_table_ref_aux_ver32405( FOLLOW_table_alias_in_table_ref_aux_ver32405_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver42462_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000001800), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver42462( FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver42462_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_clause_in_table_ref_aux_ver42465_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_clause_in_table_ref_aux_ver42465( FOLLOW_pivot_clause_in_table_ref_aux_ver42465_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_clause_in_table_ref_aux_ver42467_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_clause_in_table_ref_aux_ver42467( FOLLOW_unpivot_clause_in_table_ref_aux_ver42467_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_flashback_query_clause_in_table_ref_aux_ver42479_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_flashback_query_clause_in_table_ref_aux_ver42479( FOLLOW_flashback_query_clause_in_table_ref_aux_ver42479_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_table_ref_aux_ver42485_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_table_ref_aux_ver42485( FOLLOW_table_alias_in_table_ref_aux_ver42485_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_partition_clause_in_join_clause2536_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_partition_clause_in_join_clause2536( FOLLOW_query_partition_clause_in_join_clause2536_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cross_key_in_join_clause2548_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cross_key_in_join_clause2548( FOLLOW_cross_key_in_join_clause2548_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_natural_key_in_join_clause2550_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_natural_key_in_join_clause2550( FOLLOW_natural_key_in_join_clause2550_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_inner_key_in_join_clause2555_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_inner_key_in_join_clause2555( FOLLOW_inner_key_in_join_clause2555_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_outer_join_type_in_join_clause2557_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_outer_join_type_in_join_clause2557( FOLLOW_outer_join_type_in_join_clause2557_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_join_key_in_join_clause2561_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_join_key_in_join_clause2561( FOLLOW_join_key_in_join_clause2561_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_in_join_clause2571_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_in_join_clause2571( FOLLOW_table_ref_aux_in_join_clause2571_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_partition_clause_in_join_clause2583_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_partition_clause_in_join_clause2583( FOLLOW_query_partition_clause_in_join_clause2583_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_join_on_part_in_join_clause2595_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_join_on_part_in_join_clause2595( FOLLOW_join_on_part_in_join_clause2595_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_join_using_part_in_join_clause2606_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_join_using_part_in_join_clause2606( FOLLOW_join_using_part_in_join_clause2606_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_on_key_in_join_on_part2689_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_on_key_in_join_on_part2689( FOLLOW_on_key_in_join_on_part2689_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_join_on_part2691_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_join_on_part2691( FOLLOW_condition_in_join_on_part2691_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_join_using_part2732_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_join_using_part2732( FOLLOW_using_key_in_join_using_part2732_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_join_using_part2735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_join_using_part2735( FOLLOW_LEFT_PAREN_in_join_using_part2735_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_join_using_part2737_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_join_using_part2737( FOLLOW_column_name_in_join_using_part2737_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_join_using_part2740_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_join_using_part2740( FOLLOW_COMMA_in_join_using_part2740_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_join_using_part2743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_join_using_part2743( FOLLOW_column_name_in_join_using_part2743_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_join_using_part2747_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_join_using_part2747( FOLLOW_RIGHT_PAREN_in_join_using_part2747_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_full_key_in_outer_join_type2777_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_full_key_in_outer_join_type2777( FOLLOW_full_key_in_outer_join_type2777_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_left_key_in_outer_join_type2788_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_left_key_in_outer_join_type2788( FOLLOW_left_key_in_outer_join_type2788_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_right_key_in_outer_join_type2799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_right_key_in_outer_join_type2799( FOLLOW_right_key_in_outer_join_type2799_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_outer_key_in_outer_join_type2815_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_outer_key_in_outer_join_type2815( FOLLOW_outer_key_in_outer_join_type2815_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_partition_key_in_query_partition_clause2837_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_partition_key_in_query_partition_clause2837( FOLLOW_partition_key_in_query_partition_clause2837_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_query_partition_clause2839_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_query_partition_clause2839( FOLLOW_by_key_in_query_partition_clause2839_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_query_partition_clause2862_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_query_partition_clause2862( FOLLOW_LEFT_PAREN_in_query_partition_clause2862_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_query_partition_clause2864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_query_partition_clause2864( FOLLOW_subquery_in_query_partition_clause2864_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_query_partition_clause2866_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_query_partition_clause2866( FOLLOW_RIGHT_PAREN_in_query_partition_clause2866_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_query_partition_clause2882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_query_partition_clause2882( FOLLOW_expression_list_in_query_partition_clause2882_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_query_partition_clause2893_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_query_partition_clause2893( FOLLOW_expression_in_query_partition_clause2893_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_query_partition_clause2896_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_query_partition_clause2896( FOLLOW_COMMA_in_query_partition_clause2896_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_query_partition_clause2898_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_query_partition_clause2898( FOLLOW_expression_in_query_partition_clause2898_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_versions_key_in_flashback_query_clause2959_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_versions_key_in_flashback_query_clause2959( FOLLOW_versions_key_in_flashback_query_clause2959_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_between_key_in_flashback_query_clause2961_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_between_key_in_flashback_query_clause2961( FOLLOW_between_key_in_flashback_query_clause2961_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_scn_key_in_flashback_query_clause2964_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_scn_key_in_flashback_query_clause2964( FOLLOW_scn_key_in_flashback_query_clause2964_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_timestamp_key_in_flashback_query_clause2966_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_timestamp_key_in_flashback_query_clause2966( FOLLOW_timestamp_key_in_flashback_query_clause2966_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_flashback_query_clause2969_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_flashback_query_clause2969( FOLLOW_expression_in_flashback_query_clause2969_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_flashback_query_clause2999_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000040000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_flashback_query_clause2999( FOLLOW_as_key_in_flashback_query_clause2999_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_of_key_in_flashback_query_clause3001_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_of_key_in_flashback_query_clause3001( FOLLOW_of_key_in_flashback_query_clause3001_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_scn_key_in_flashback_query_clause3004_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_scn_key_in_flashback_query_clause3004( FOLLOW_scn_key_in_flashback_query_clause3004_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_timestamp_key_in_flashback_query_clause3006_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_timestamp_key_in_flashback_query_clause3006( FOLLOW_timestamp_key_in_flashback_query_clause3006_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_snapshot_key_in_flashback_query_clause3008_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_snapshot_key_in_flashback_query_clause3008( FOLLOW_snapshot_key_in_flashback_query_clause3008_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_flashback_query_clause3011_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_flashback_query_clause3011( FOLLOW_expression_in_flashback_query_clause3011_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_key_in_pivot_clause3052_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_key_in_pivot_clause3052( FOLLOW_pivot_key_in_pivot_clause3052_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_key_in_pivot_clause3054_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_key_in_pivot_clause3054( FOLLOW_xml_key_in_pivot_clause3054_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_pivot_clause3065_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_pivot_clause3065( FOLLOW_LEFT_PAREN_in_pivot_clause3065_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_element_in_pivot_clause3079_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_element_in_pivot_clause3079( FOLLOW_pivot_element_in_pivot_clause3079_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pivot_clause3082_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_pivot_clause3082( FOLLOW_COMMA_in_pivot_clause3082_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_element_in_pivot_clause3084_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_element_in_pivot_clause3084( FOLLOW_pivot_element_in_pivot_clause3084_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_for_clause_in_pivot_clause3100_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_for_clause_in_pivot_clause3100( FOLLOW_pivot_for_clause_in_pivot_clause3100_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_in_clause_in_pivot_clause3114_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_in_clause_in_pivot_clause3114( FOLLOW_pivot_in_clause_in_pivot_clause3114_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_pivot_clause3126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_pivot_clause3126( FOLLOW_RIGHT_PAREN_in_pivot_clause3126_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_aggregate_function_name_in_pivot_element3174_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_aggregate_function_name_in_pivot_element3174( FOLLOW_aggregate_function_name_in_pivot_element3174_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_pivot_element3176_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_pivot_element3176( FOLLOW_LEFT_PAREN_in_pivot_element3176_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_pivot_element3178_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_pivot_element3178( FOLLOW_expression_in_pivot_element3178_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_pivot_element3180_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_pivot_element3180( FOLLOW_RIGHT_PAREN_in_pivot_element3180_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_pivot_element3182_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_pivot_element3182( FOLLOW_column_alias_in_pivot_element3182_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_pivot_for_clause3247_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_pivot_for_clause3247( FOLLOW_for_key_in_pivot_for_clause3247_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_pivot_for_clause3259_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_pivot_for_clause3259( FOLLOW_column_name_in_pivot_for_clause3259_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_pivot_for_clause3270_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_pivot_for_clause3270( FOLLOW_LEFT_PAREN_in_pivot_for_clause3270_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_pivot_for_clause3272_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_pivot_for_clause3272( FOLLOW_column_name_in_pivot_for_clause3272_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pivot_for_clause3275_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_pivot_for_clause3275( FOLLOW_COMMA_in_pivot_for_clause3275_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_pivot_for_clause3277_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_pivot_for_clause3277( FOLLOW_column_name_in_pivot_for_clause3277_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_pivot_for_clause3281_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_pivot_for_clause3281( FOLLOW_RIGHT_PAREN_in_pivot_for_clause3281_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_pivot_in_clause3336_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_pivot_in_clause3336( FOLLOW_in_key_in_pivot_in_clause3336_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_pivot_in_clause3346_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x041103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_pivot_in_clause3346( FOLLOW_LEFT_PAREN_in_pivot_in_clause3346_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_pivot_in_clause3370_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_pivot_in_clause3370( FOLLOW_subquery_in_pivot_in_clause3370_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_pivot_in_clause3396_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_pivot_in_clause3396( FOLLOW_any_key_in_pivot_in_clause3396_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pivot_in_clause3399_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_pivot_in_clause3399( FOLLOW_COMMA_in_pivot_in_clause3399_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_pivot_in_clause3401_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_pivot_in_clause3401( FOLLOW_any_key_in_pivot_in_clause3401_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_in_clause_element_in_pivot_in_clause3424_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_in_clause_element_in_pivot_in_clause3424( FOLLOW_pivot_in_clause_element_in_pivot_in_clause3424_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pivot_in_clause3427_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_pivot_in_clause3427( FOLLOW_COMMA_in_pivot_in_clause3427_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_in_clause_element_in_pivot_in_clause3429_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_in_clause_element_in_pivot_in_clause3429( FOLLOW_pivot_in_clause_element_in_pivot_in_clause3429_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_pivot_in_clause3455_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_pivot_in_clause3455( FOLLOW_RIGHT_PAREN_in_pivot_in_clause3455_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3535_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3535( FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3535_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_pivot_in_clause_element3537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_pivot_in_clause_element3537( FOLLOW_column_alias_in_pivot_in_clause_element3537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_pivot_in_clause_elements3577_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_pivot_in_clause_elements3577( FOLLOW_expression_in_pivot_in_clause_elements3577_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_pivot_in_clause_elements3601_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_pivot_in_clause_elements3601( FOLLOW_expression_list_in_pivot_in_clause_elements3601_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_key_in_unpivot_clause3621_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_key_in_unpivot_clause3621( FOLLOW_unpivot_key_in_unpivot_clause3621_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_include_key_in_unpivot_clause3634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_include_key_in_unpivot_clause3634( FOLLOW_include_key_in_unpivot_clause3634_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exclude_key_in_unpivot_clause3636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exclude_key_in_unpivot_clause3636( FOLLOW_exclude_key_in_unpivot_clause3636_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_unpivot_clause3639_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_unpivot_clause3639( FOLLOW_nulls_key_in_unpivot_clause3639_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_clause3651_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_clause3651( FOLLOW_LEFT_PAREN_in_unpivot_clause3651_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_clause3670_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_clause3670( FOLLOW_column_name_in_unpivot_clause3670_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_clause3689_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_clause3689( FOLLOW_LEFT_PAREN_in_unpivot_clause3689_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_clause3691_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_clause3691( FOLLOW_column_name_in_unpivot_clause3691_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_unpivot_clause3694_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_unpivot_clause3694( FOLLOW_COMMA_in_unpivot_clause3694_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_clause3696_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_clause3696( FOLLOW_column_name_in_unpivot_clause3696_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_clause3700_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_clause3700( FOLLOW_RIGHT_PAREN_in_unpivot_clause3700_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_for_clause_in_unpivot_clause3728_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_for_clause_in_unpivot_clause3728( FOLLOW_pivot_for_clause_in_unpivot_clause3728_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_in_clause_in_unpivot_clause3742_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_in_clause_in_unpivot_clause3742( FOLLOW_unpivot_in_clause_in_unpivot_clause3742_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_clause3752_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_clause3752( FOLLOW_RIGHT_PAREN_in_unpivot_clause3752_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_unpivot_in_clause3802_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_unpivot_in_clause3802( FOLLOW_in_key_in_unpivot_in_clause3802_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_in_clause3812_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_in_clause3812( FOLLOW_LEFT_PAREN_in_unpivot_in_clause3812_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_in_elements_in_unpivot_in_clause3826_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_in_elements_in_unpivot_in_clause3826( FOLLOW_unpivot_in_elements_in_unpivot_in_clause3826_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_unpivot_in_clause3829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_unpivot_in_clause3829( FOLLOW_COMMA_in_unpivot_in_clause3829_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_in_elements_in_unpivot_in_clause3831_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_in_elements_in_unpivot_in_clause3831( FOLLOW_unpivot_in_elements_in_unpivot_in_clause3831_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3843_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3843( FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3843_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_in_elements3888_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_in_elements3888( FOLLOW_column_name_in_unpivot_in_elements3888_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_in_elements3903_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_in_elements3903( FOLLOW_LEFT_PAREN_in_unpivot_in_elements3903_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_in_elements3905_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_in_elements3905( FOLLOW_column_name_in_unpivot_in_elements3905_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_unpivot_in_elements3908_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_unpivot_in_elements3908( FOLLOW_COMMA_in_unpivot_in_elements3908_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_in_elements3910_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_in_elements3910( FOLLOW_column_name_in_unpivot_in_elements3910_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3914_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3914( FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3914_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_unpivot_in_elements3939_bits[]	= { ANTLR_UINT64_LIT(0x0180000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_unpivot_in_elements3939( FOLLOW_as_key_in_unpivot_in_elements3939_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_unpivot_in_elements3954_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_unpivot_in_elements3954( FOLLOW_constant_in_unpivot_in_elements3954_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_in_elements3974_bits[]	= { ANTLR_UINT64_LIT(0x0180000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_in_elements3974( FOLLOW_LEFT_PAREN_in_unpivot_in_elements3974_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_unpivot_in_elements3976_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_unpivot_in_elements3976( FOLLOW_constant_in_unpivot_in_elements3976_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_unpivot_in_elements3979_bits[]	= { ANTLR_UINT64_LIT(0x0180000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_unpivot_in_elements3979( FOLLOW_COMMA_in_unpivot_in_elements3979_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_unpivot_in_elements3981_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_unpivot_in_elements3981( FOLLOW_constant_in_unpivot_in_elements3981_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3985_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3985( FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3985_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_connect_key_in_hierarchical_query_clause4047_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_connect_key_in_hierarchical_query_clause4047( FOLLOW_connect_key_in_hierarchical_query_clause4047_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_hierarchical_query_clause4049_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_hierarchical_query_clause4049( FOLLOW_by_key_in_hierarchical_query_clause4049_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nocycle_key_in_hierarchical_query_clause4051_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nocycle_key_in_hierarchical_query_clause4051( FOLLOW_nocycle_key_in_hierarchical_query_clause4051_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_hierarchical_query_clause4054_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_hierarchical_query_clause4054( FOLLOW_condition_in_hierarchical_query_clause4054_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_start_part_in_hierarchical_query_clause4056_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_start_part_in_hierarchical_query_clause4056( FOLLOW_start_part_in_hierarchical_query_clause4056_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_start_part_in_hierarchical_query_clause4098_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_start_part_in_hierarchical_query_clause4098( FOLLOW_start_part_in_hierarchical_query_clause4098_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_connect_key_in_hierarchical_query_clause4100_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_connect_key_in_hierarchical_query_clause4100( FOLLOW_connect_key_in_hierarchical_query_clause4100_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_hierarchical_query_clause4102_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_hierarchical_query_clause4102( FOLLOW_by_key_in_hierarchical_query_clause4102_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nocycle_key_in_hierarchical_query_clause4104_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nocycle_key_in_hierarchical_query_clause4104( FOLLOW_nocycle_key_in_hierarchical_query_clause4104_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_hierarchical_query_clause4107_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_hierarchical_query_clause4107( FOLLOW_condition_in_hierarchical_query_clause4107_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_start_key_in_start_part4157_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_start_key_in_start_part4157( FOLLOW_start_key_in_start_part4157_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_start_part4159_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_start_part4159( FOLLOW_with_key_in_start_part4159_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_start_part4161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_start_part4161( FOLLOW_condition_in_start_part4161_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_key_in_group_by_clause4206_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_key_in_group_by_clause4206( FOLLOW_group_key_in_group_by_clause4206_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_group_by_clause4208_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_group_by_clause4208( FOLLOW_by_key_in_group_by_clause4208_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_group_by_clause4214_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_group_by_clause4214( FOLLOW_LEFT_PAREN_in_group_by_clause4214_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_group_by_clause4216_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000200000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_group_by_clause4216( FOLLOW_RIGHT_PAREN_in_group_by_clause4216_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_group_by_clause4223_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000200000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_group_by_clause4223( FOLLOW_group_by_elements_in_group_by_clause4223_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_group_by_clause4233_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_group_by_clause4233( FOLLOW_COMMA_in_group_by_clause4233_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_group_by_clause4235_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000200000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_group_by_clause4235( FOLLOW_group_by_elements_in_group_by_clause4235_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_having_clause_in_group_by_clause4246_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_having_clause_in_group_by_clause4246( FOLLOW_having_clause_in_group_by_clause4246_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_having_clause_in_group_by_clause4286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000100000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_having_clause_in_group_by_clause4286( FOLLOW_having_clause_in_group_by_clause4286_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_key_in_group_by_clause4291_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_key_in_group_by_clause4291( FOLLOW_group_key_in_group_by_clause4291_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_group_by_clause4293_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_group_by_clause4293( FOLLOW_by_key_in_group_by_clause4293_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_group_by_clause4299_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_group_by_clause4299( FOLLOW_LEFT_PAREN_in_group_by_clause4299_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_group_by_clause4301_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_group_by_clause4301( FOLLOW_RIGHT_PAREN_in_group_by_clause4301_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_group_by_clause4308_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_group_by_clause4308( FOLLOW_group_by_elements_in_group_by_clause4308_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_group_by_clause4318_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_group_by_clause4318( FOLLOW_COMMA_in_group_by_clause4318_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_group_by_clause4320_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_group_by_clause4320( FOLLOW_group_by_elements_in_group_by_clause4320_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_clause_in_group_by_elements4375_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_clause_in_group_by_elements4375( FOLLOW_grouping_sets_clause_in_group_by_elements4375_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rollup_cube_clause_in_group_by_elements4386_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rollup_cube_clause_in_group_by_elements4386( FOLLOW_rollup_cube_clause_in_group_by_elements4386_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_group_by_elements4398_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_group_by_elements4398( FOLLOW_expression_in_group_by_elements4398_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rollup_key_in_rollup_cube_clause4427_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rollup_key_in_rollup_cube_clause4427( FOLLOW_rollup_key_in_rollup_cube_clause4427_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cube_key_in_rollup_cube_clause4430_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cube_key_in_rollup_cube_clause4430( FOLLOW_cube_key_in_rollup_cube_clause4430_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_rollup_cube_clause4434_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_rollup_cube_clause4434( FOLLOW_LEFT_PAREN_in_rollup_cube_clause4434_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_elements_in_rollup_cube_clause4436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_elements_in_rollup_cube_clause4436( FOLLOW_grouping_sets_elements_in_rollup_cube_clause4436_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_rollup_cube_clause4439_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_rollup_cube_clause4439( FOLLOW_COMMA_in_rollup_cube_clause4439_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_elements_in_rollup_cube_clause4442_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_elements_in_rollup_cube_clause4442( FOLLOW_grouping_sets_elements_in_rollup_cube_clause4442_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_rollup_cube_clause4446_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_rollup_cube_clause4446( FOLLOW_RIGHT_PAREN_in_rollup_cube_clause4446_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_key_in_grouping_sets_clause4467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_key_in_grouping_sets_clause4467( FOLLOW_grouping_key_in_grouping_sets_clause4467_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_sets_key_in_grouping_sets_clause4469_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_sets_key_in_grouping_sets_clause4469( FOLLOW_sets_key_in_grouping_sets_clause4469_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_grouping_sets_clause4480_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_grouping_sets_clause4480( FOLLOW_LEFT_PAREN_in_grouping_sets_clause4480_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_elements_in_grouping_sets_clause4482_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_elements_in_grouping_sets_clause4482( FOLLOW_grouping_sets_elements_in_grouping_sets_clause4482_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_grouping_sets_clause4485_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_grouping_sets_clause4485( FOLLOW_COMMA_in_grouping_sets_clause4485_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_elements_in_grouping_sets_clause4487_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_elements_in_grouping_sets_clause4487( FOLLOW_grouping_sets_elements_in_grouping_sets_clause4487_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4491_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4491( FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4491_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rollup_cube_clause_in_grouping_sets_elements4539_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rollup_cube_clause_in_grouping_sets_elements4539( FOLLOW_rollup_cube_clause_in_grouping_sets_elements4539_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_grouping_sets_elements4555_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_grouping_sets_elements4555( FOLLOW_expression_list_in_grouping_sets_elements4555_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_grouping_sets_elements4566_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_grouping_sets_elements4566( FOLLOW_expression_in_grouping_sets_elements4566_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_having_key_in_having_clause4594_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_having_key_in_having_clause4594( FOLLOW_having_key_in_having_clause4594_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_having_clause4596_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_having_clause4596( FOLLOW_condition_in_having_clause4596_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_key_in_model_clause4636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_key_in_model_clause4636( FOLLOW_model_key_in_model_clause4636_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cell_reference_options_in_model_clause4638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cell_reference_options_in_model_clause4638( FOLLOW_cell_reference_options_in_model_clause4638_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_return_rows_clause_in_model_clause4641_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_return_rows_clause_in_model_clause4641( FOLLOW_return_rows_clause_in_model_clause4641_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reference_model_in_model_clause4644_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reference_model_in_model_clause4644( FOLLOW_reference_model_in_model_clause4644_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_main_model_in_model_clause4647_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_main_model_in_model_clause4647( FOLLOW_main_model_in_model_clause4647_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ignore_key_in_cell_reference_options4693_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ignore_key_in_cell_reference_options4693( FOLLOW_ignore_key_in_cell_reference_options4693_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_keep_key_in_cell_reference_options4696_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_keep_key_in_cell_reference_options4696( FOLLOW_keep_key_in_cell_reference_options4696_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nav_key_in_cell_reference_options4700_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nav_key_in_cell_reference_options4700( FOLLOW_nav_key_in_cell_reference_options4700_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_cell_reference_options4711_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_cell_reference_options4711( FOLLOW_unique_key_in_cell_reference_options4711_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dimension_key_in_cell_reference_options4715_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dimension_key_in_cell_reference_options4715( FOLLOW_dimension_key_in_cell_reference_options4715_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_single_key_in_cell_reference_options4717_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_single_key_in_cell_reference_options4717( FOLLOW_single_key_in_cell_reference_options4717_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reference_key_in_cell_reference_options4719_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reference_key_in_cell_reference_options4719( FOLLOW_reference_key_in_cell_reference_options4719_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_return_key_in_return_rows_clause4740_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_return_key_in_return_rows_clause4740( FOLLOW_return_key_in_return_rows_clause4740_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_updated_key_in_return_rows_clause4744_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_updated_key_in_return_rows_clause4744( FOLLOW_updated_key_in_return_rows_clause4744_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_return_rows_clause4746_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_return_rows_clause4746( FOLLOW_all_key_in_return_rows_clause4746_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rows_key_in_return_rows_clause4749_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rows_key_in_return_rows_clause4749( FOLLOW_rows_key_in_return_rows_clause4749_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reference_key_in_reference_model4770_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reference_key_in_reference_model4770( FOLLOW_reference_key_in_reference_model4770_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reference_model_name_in_reference_model4773_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reference_model_name_in_reference_model4773( FOLLOW_reference_model_name_in_reference_model4773_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_on_key_in_reference_model4775_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_on_key_in_reference_model4775( FOLLOW_on_key_in_reference_model4775_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_reference_model4791_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_reference_model4791( FOLLOW_LEFT_PAREN_in_reference_model4791_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_reference_model4793_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_reference_model4793( FOLLOW_subquery_in_reference_model4793_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_reference_model4795_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_reference_model4795( FOLLOW_RIGHT_PAREN_in_reference_model4795_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_clauses_in_reference_model4797_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_clauses_in_reference_model4797( FOLLOW_model_column_clauses_in_reference_model4797_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cell_reference_options_in_reference_model4812_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cell_reference_options_in_reference_model4812( FOLLOW_cell_reference_options_in_reference_model4812_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_main_key_in_main_model4834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_main_key_in_main_model4834( FOLLOW_main_key_in_main_model4834_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_main_model_name_in_main_model4836_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_main_model_name_in_main_model4836( FOLLOW_main_model_name_in_main_model4836_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_clauses_in_main_model4840_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_clauses_in_main_model4840( FOLLOW_model_column_clauses_in_main_model4840_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cell_reference_options_in_main_model4842_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cell_reference_options_in_main_model4842( FOLLOW_cell_reference_options_in_main_model4842_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_rules_clause_in_main_model4845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_rules_clause_in_main_model4845( FOLLOW_model_rules_clause_in_main_model4845_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_partition_part_in_model_column_clauses4889_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_partition_part_in_model_column_clauses4889( FOLLOW_model_column_partition_part_in_model_column_clauses4889_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dimension_key_in_model_column_clauses4900_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dimension_key_in_model_column_clauses4900( FOLLOW_dimension_key_in_model_column_clauses4900_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_model_column_clauses4902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_model_column_clauses4902( FOLLOW_by_key_in_model_column_clauses4902_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_list_in_model_column_clauses4904_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_list_in_model_column_clauses4904( FOLLOW_model_column_list_in_model_column_clauses4904_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_measures_key_in_model_column_clauses4906_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_measures_key_in_model_column_clauses4906( FOLLOW_measures_key_in_model_column_clauses4906_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_list_in_model_column_clauses4908_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_list_in_model_column_clauses4908( FOLLOW_model_column_list_in_model_column_clauses4908_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_partition_key_in_model_column_partition_part4957_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_partition_key_in_model_column_partition_part4957( FOLLOW_partition_key_in_model_column_partition_part4957_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_model_column_partition_part4960_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_model_column_partition_part4960( FOLLOW_by_key_in_model_column_partition_part4960_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_list_in_model_column_partition_part4963_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_list_in_model_column_partition_part4963( FOLLOW_model_column_list_in_model_column_partition_part4963_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_model_column_list4983_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_model_column_list4983( FOLLOW_LEFT_PAREN_in_model_column_list4983_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_in_model_column_list4985_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_in_model_column_list4985( FOLLOW_model_column_in_model_column_list4985_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_model_column_list4988_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_model_column_list4988( FOLLOW_COMMA_in_model_column_list4988_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_in_model_column_list4990_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_in_model_column_list4990( FOLLOW_model_column_in_model_column_list4990_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_model_column_list4995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_model_column_list4995( FOLLOW_RIGHT_PAREN_in_model_column_list4995_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_model_column5032_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_model_column5032( FOLLOW_expression_in_model_column5032_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_model_column5034_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_model_column5034( FOLLOW_column_alias_in_model_column5034_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_rules_part_in_model_rules_clause5078_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_rules_part_in_model_rules_clause5078( FOLLOW_model_rules_part_in_model_rules_clause5078_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_model_rules_clause5081_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x2401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_model_rules_clause5081( FOLLOW_LEFT_PAREN_in_model_rules_clause5081_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_rules_element_in_model_rules_clause5084_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_rules_element_in_model_rules_clause5084( FOLLOW_model_rules_element_in_model_rules_clause5084_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_model_rules_clause5087_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_model_rules_clause5087( FOLLOW_COMMA_in_model_rules_clause5087_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_rules_element_in_model_rules_clause5089_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_rules_element_in_model_rules_clause5089( FOLLOW_model_rules_element_in_model_rules_clause5089_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_model_rules_clause5095_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_model_rules_clause5095( FOLLOW_RIGHT_PAREN_in_model_rules_clause5095_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rules_key_in_model_rules_part5135_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rules_key_in_model_rules_part5135( FOLLOW_rules_key_in_model_rules_part5135_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_model_rules_part5138_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_model_rules_part5138( FOLLOW_update_key_in_model_rules_part5138_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_upsert_key_in_model_rules_part5140_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_upsert_key_in_model_rules_part5140( FOLLOW_upsert_key_in_model_rules_part5140_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_model_rules_part5142_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_model_rules_part5142( FOLLOW_all_key_in_model_rules_part5142_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_automatic_key_in_model_rules_part5149_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_automatic_key_in_model_rules_part5149( FOLLOW_automatic_key_in_model_rules_part5149_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_sequential_key_in_model_rules_part5151_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_sequential_key_in_model_rules_part5151( FOLLOW_sequential_key_in_model_rules_part5151_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_key_in_model_rules_part5154_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_key_in_model_rules_part5154( FOLLOW_order_key_in_model_rules_part5154_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_iterate_clause_in_model_rules_part5158_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_iterate_clause_in_model_rules_part5158( FOLLOW_model_iterate_clause_in_model_rules_part5158_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_model_rules_element5212_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_model_rules_element5212( FOLLOW_update_key_in_model_rules_element5212_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_upsert_key_in_model_rules_element5214_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_upsert_key_in_model_rules_element5214( FOLLOW_upsert_key_in_model_rules_element5214_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_model_rules_element5222_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_model_rules_element5222( FOLLOW_all_key_in_model_rules_element5222_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cell_assignment_in_model_rules_element5236_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cell_assignment_in_model_rules_element5236( FOLLOW_cell_assignment_in_model_rules_element5236_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_model_rules_element5254_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_model_rules_element5254( FOLLOW_order_by_clause_in_model_rules_element5254_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_model_rules_element5269_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_model_rules_element5269( FOLLOW_EQUALS_OP_in_model_rules_element5269_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_model_rules_element5271_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_model_rules_element5271( FOLLOW_expression_in_model_rules_element5271_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_expression_in_cell_assignment5330_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_expression_in_cell_assignment5330( FOLLOW_model_expression_in_cell_assignment5330_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_iterate_key_in_model_iterate_clause5350_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_iterate_key_in_model_iterate_clause5350( FOLLOW_iterate_key_in_model_iterate_clause5350_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_model_iterate_clause5352_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_model_iterate_clause5352( FOLLOW_LEFT_PAREN_in_model_iterate_clause5352_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_model_iterate_clause5354_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_model_iterate_clause5354( FOLLOW_expression_in_model_iterate_clause5354_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_model_iterate_clause5356_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_model_iterate_clause5356( FOLLOW_RIGHT_PAREN_in_model_iterate_clause5356_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_until_part_in_model_iterate_clause5358_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_until_part_in_model_iterate_clause5358( FOLLOW_until_part_in_model_iterate_clause5358_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_until_key_in_until_part5401_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_until_key_in_until_part5401( FOLLOW_until_key_in_until_part5401_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_until_part5403_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_until_part5403( FOLLOW_LEFT_PAREN_in_until_part5403_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_until_part5405_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_until_part5405( FOLLOW_condition_in_until_part5405_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_until_part5407_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_until_part5407( FOLLOW_RIGHT_PAREN_in_until_part5407_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_key_in_order_by_clause5447_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_key_in_order_by_clause5447( FOLLOW_order_key_in_order_by_clause5447_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_siblings_key_in_order_by_clause5449_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_siblings_key_in_order_by_clause5449( FOLLOW_siblings_key_in_order_by_clause5449_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_order_by_clause5452_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_order_by_clause5452( FOLLOW_by_key_in_order_by_clause5452_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_elements_in_order_by_clause5454_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_elements_in_order_by_clause5454( FOLLOW_order_by_elements_in_order_by_clause5454_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_order_by_clause5457_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_order_by_clause5457( FOLLOW_COMMA_in_order_by_clause5457_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_elements_in_order_by_clause5459_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_elements_in_order_by_clause5459( FOLLOW_order_by_elements_in_order_by_clause5459_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_order_by_elements5505_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080020) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_order_by_elements5505( FOLLOW_expression_in_order_by_elements5505_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_asc_key_in_order_by_elements5508_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_asc_key_in_order_by_elements5508( FOLLOW_asc_key_in_order_by_elements5508_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_desc_key_in_order_by_elements5510_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_desc_key_in_order_by_elements5510( FOLLOW_desc_key_in_order_by_elements5510_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_order_by_elements5515_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_order_by_elements5515( FOLLOW_nulls_key_in_order_by_elements5515_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_order_by_elements5518_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_order_by_elements5518( FOLLOW_first_key_in_order_by_elements5518_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_last_key_in_order_by_elements5520_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_last_key_in_order_by_elements5520( FOLLOW_last_key_in_order_by_elements5520_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_for_update_clause5578_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_for_update_clause5578( FOLLOW_for_key_in_for_update_clause5578_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_for_update_clause5580_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000008000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000040000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_for_update_clause5580( FOLLOW_update_key_in_for_update_clause5580_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_update_of_part_in_for_update_clause5582_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000008000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_update_of_part_in_for_update_clause5582( FOLLOW_for_update_of_part_in_for_update_clause5582_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_update_options_in_for_update_clause5585_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_update_options_in_for_update_clause5585( FOLLOW_for_update_options_in_for_update_clause5585_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_of_key_in_for_update_of_part5628_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_of_key_in_for_update_of_part5628( FOLLOW_of_key_in_for_update_of_part5628_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_for_update_of_part5631_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_for_update_of_part5631( FOLLOW_column_name_in_for_update_of_part5631_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_for_update_of_part5634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_for_update_of_part5634( FOLLOW_COMMA_in_for_update_of_part5634_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_for_update_of_part5637_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_for_update_of_part5637( FOLLOW_column_name_in_for_update_of_part5637_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_skip_key_in_for_update_options5659_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_skip_key_in_for_update_options5659( FOLLOW_skip_key_in_for_update_options5659_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_locked_key_in_for_update_options5661_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_locked_key_in_for_update_options5661( FOLLOW_locked_key_in_for_update_options5661_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nowait_key_in_for_update_options5673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nowait_key_in_for_update_options5673( FOLLOW_nowait_key_in_for_update_options5673_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_wait_key_in_for_update_options5684_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_wait_key_in_for_update_options5684( FOLLOW_wait_key_in_for_update_options5684_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_for_update_options5686_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_for_update_options5686( FOLLOW_expression_in_for_update_options5686_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_update_statement5720_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_update_statement5720( FOLLOW_update_key_in_update_statement5720_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_table_ref_in_update_statement5723_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_table_ref_in_update_statement5723( FOLLOW_general_table_ref_in_update_statement5723_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_set_clause_in_update_statement5733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_set_clause_in_update_statement5733( FOLLOW_update_set_clause_in_update_statement5733_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_update_statement5743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_update_statement5743( FOLLOW_where_clause_in_update_statement5743_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_static_returning_clause_in_update_statement5746_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_static_returning_clause_in_update_statement5746( FOLLOW_static_returning_clause_in_update_statement5746_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_update_statement5749_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_update_statement5749( FOLLOW_error_logging_clause_in_update_statement5749_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_update_set_clause5779_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_update_set_clause5779( FOLLOW_set_key_in_update_set_clause5779_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_based_update_set_clause_in_update_set_clause5790_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_based_update_set_clause_in_update_set_clause5790( FOLLOW_column_based_update_set_clause_in_update_set_clause5790_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_update_set_clause5793_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_update_set_clause5793( FOLLOW_COMMA_in_update_set_clause5793_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_based_update_set_clause_in_update_set_clause5795_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_based_update_set_clause_in_update_set_clause5795( FOLLOW_column_based_update_set_clause_in_update_set_clause5795_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_value_key_in_update_set_clause5808_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_value_key_in_update_set_clause5808( FOLLOW_value_key_in_update_set_clause5808_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_update_set_clause5810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_update_set_clause5810( FOLLOW_LEFT_PAREN_in_update_set_clause5810_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_id_in_update_set_clause5812_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_id_in_update_set_clause5812( FOLLOW_id_in_update_set_clause5812_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_update_set_clause5815_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_update_set_clause5815( FOLLOW_RIGHT_PAREN_in_update_set_clause5815_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_update_set_clause5817_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_update_set_clause5817( FOLLOW_EQUALS_OP_in_update_set_clause5817_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_update_set_clause5819_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_update_set_clause5819( FOLLOW_expression_in_update_set_clause5819_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_column_based_update_set_clause5891_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_column_based_update_set_clause5891( FOLLOW_column_name_in_column_based_update_set_clause5891_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_column_based_update_set_clause5893_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_column_based_update_set_clause5893( FOLLOW_EQUALS_OP_in_column_based_update_set_clause5893_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_column_based_update_set_clause5895_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_column_based_update_set_clause5895( FOLLOW_expression_in_column_based_update_set_clause5895_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5921_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5921( FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5921_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_column_based_update_set_clause5923_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_column_based_update_set_clause5923( FOLLOW_column_name_in_column_based_update_set_clause5923_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_column_based_update_set_clause5926_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_column_based_update_set_clause5926( FOLLOW_COMMA_in_column_based_update_set_clause5926_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_column_based_update_set_clause5928_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_column_based_update_set_clause5928( FOLLOW_column_name_in_column_based_update_set_clause5928_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5932_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5932( FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5932_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_column_based_update_set_clause5934_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_column_based_update_set_clause5934( FOLLOW_EQUALS_OP_in_column_based_update_set_clause5934_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_column_based_update_set_clause5936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_column_based_update_set_clause5936( FOLLOW_subquery_in_column_based_update_set_clause5936_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_delete_key_in_delete_statement5970_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_delete_key_in_delete_statement5970( FOLLOW_delete_key_in_delete_statement5970_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_delete_statement5973_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_delete_statement5973( FOLLOW_from_key_in_delete_statement5973_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_table_ref_in_delete_statement5985_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_table_ref_in_delete_statement5985( FOLLOW_general_table_ref_in_delete_statement5985_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_delete_statement5995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_delete_statement5995( FOLLOW_where_clause_in_delete_statement5995_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_static_returning_clause_in_delete_statement5998_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_static_returning_clause_in_delete_statement5998( FOLLOW_static_returning_clause_in_delete_statement5998_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_delete_statement6001_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_delete_statement6001( FOLLOW_error_logging_clause_in_delete_statement6001_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_key_in_insert_statement6022_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000001), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_key_in_insert_statement6022( FOLLOW_insert_key_in_insert_statement6022_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_single_table_insert_in_insert_statement6034_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_single_table_insert_in_insert_statement6034( FOLLOW_single_table_insert_in_insert_statement6034_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_table_insert_in_insert_statement6045_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_table_insert_in_insert_statement6045( FOLLOW_multi_table_insert_in_insert_statement6045_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_into_clause_in_single_table_insert6073_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_into_clause_in_single_table_insert6073( FOLLOW_insert_into_clause_in_single_table_insert6073_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_clause_in_single_table_insert6084_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_clause_in_single_table_insert6084( FOLLOW_values_clause_in_single_table_insert6084_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_static_returning_clause_in_single_table_insert6086_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_static_returning_clause_in_single_table_insert6086( FOLLOW_static_returning_clause_in_single_table_insert6086_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_single_table_insert6098_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_single_table_insert6098( FOLLOW_select_statement_in_single_table_insert6098_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_single_table_insert6114_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_single_table_insert6114( FOLLOW_error_logging_clause_in_single_table_insert6114_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_multi_table_insert6173_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_multi_table_insert6173( FOLLOW_all_key_in_multi_table_insert6173_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_table_element_in_multi_table_insert6175_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010002000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_table_element_in_multi_table_insert6175( FOLLOW_multi_table_element_in_multi_table_insert6175_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_conditional_insert_clause_in_multi_table_insert6187_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_conditional_insert_clause_in_multi_table_insert6187( FOLLOW_conditional_insert_clause_in_multi_table_insert6187_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_multi_table_insert6203_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_multi_table_insert6203( FOLLOW_select_statement_in_multi_table_insert6203_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_into_clause_in_multi_table_element6245_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_into_clause_in_multi_table_element6245( FOLLOW_insert_into_clause_in_multi_table_element6245_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_clause_in_multi_table_element6247_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_clause_in_multi_table_element6247( FOLLOW_values_clause_in_multi_table_element6247_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_multi_table_element6250_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_multi_table_element6250( FOLLOW_error_logging_clause_in_multi_table_element6250_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_conditional_insert_clause6294_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_conditional_insert_clause6294( FOLLOW_all_key_in_conditional_insert_clause6294_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_conditional_insert_clause6296_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_conditional_insert_clause6296( FOLLOW_first_key_in_conditional_insert_clause6296_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_conditional_insert_when_part_in_conditional_insert_clause6308_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000400000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_conditional_insert_when_part_in_conditional_insert_clause6308( FOLLOW_conditional_insert_when_part_in_conditional_insert_clause6308_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_conditional_insert_else_part_in_conditional_insert_clause6311_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_conditional_insert_else_part_in_conditional_insert_clause6311( FOLLOW_conditional_insert_else_part_in_conditional_insert_clause6311_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_conditional_insert_when_part6359_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_conditional_insert_when_part6359( FOLLOW_when_key_in_conditional_insert_when_part6359_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_conditional_insert_when_part6361_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_conditional_insert_when_part6361( FOLLOW_condition_in_conditional_insert_when_part6361_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_conditional_insert_when_part6363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_conditional_insert_when_part6363( FOLLOW_then_key_in_conditional_insert_when_part6363_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_table_element_in_conditional_insert_when_part6365_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_table_element_in_conditional_insert_when_part6365( FOLLOW_multi_table_element_in_conditional_insert_when_part6365_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_else_key_in_conditional_insert_else_part6409_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_else_key_in_conditional_insert_else_part6409( FOLLOW_else_key_in_conditional_insert_else_part6409_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_table_element_in_conditional_insert_else_part6412_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_table_element_in_conditional_insert_else_part6412( FOLLOW_multi_table_element_in_conditional_insert_else_part6412_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_key_in_insert_into_clause6433_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_key_in_insert_into_clause6433( FOLLOW_into_key_in_insert_into_clause6433_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_table_ref_in_insert_into_clause6435_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_table_ref_in_insert_into_clause6435( FOLLOW_general_table_ref_in_insert_into_clause6435_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_insert_into_clause6447_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_insert_into_clause6447( FOLLOW_LEFT_PAREN_in_insert_into_clause6447_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_insert_into_clause6449_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_insert_into_clause6449( FOLLOW_column_name_in_insert_into_clause6449_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_insert_into_clause6452_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_insert_into_clause6452( FOLLOW_COMMA_in_insert_into_clause6452_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_insert_into_clause6454_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_insert_into_clause6454( FOLLOW_column_name_in_insert_into_clause6454_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_insert_into_clause6458_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_insert_into_clause6458( FOLLOW_RIGHT_PAREN_in_insert_into_clause6458_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_key_in_values_clause6503_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_key_in_values_clause6503( FOLLOW_values_key_in_values_clause6503_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_values_clause6507_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_values_clause6507( FOLLOW_expression_list_in_values_clause6507_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_record_name_in_values_clause6511_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_record_name_in_values_clause6511( FOLLOW_record_name_in_values_clause6511_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_key_in_merge_statement6533_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_key_in_merge_statement6533( FOLLOW_merge_key_in_merge_statement6533_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_key_in_merge_statement6535_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_key_in_merge_statement6535( FOLLOW_into_key_in_merge_statement6535_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_merge_statement6537_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000002000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_merge_statement6537( FOLLOW_tableview_name_in_merge_statement6537_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_merge_statement6539_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_merge_statement6539( FOLLOW_table_alias_in_merge_statement6539_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_merge_statement6550_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_merge_statement6550( FOLLOW_using_key_in_merge_statement6550_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_selected_tableview_in_merge_statement6552_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_selected_tableview_in_merge_statement6552( FOLLOW_selected_tableview_in_merge_statement6552_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_on_key_in_merge_statement6554_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_on_key_in_merge_statement6554( FOLLOW_on_key_in_merge_statement6554_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_merge_statement6556_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_merge_statement6556( FOLLOW_LEFT_PAREN_in_merge_statement6556_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_merge_statement6558_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_merge_statement6558( FOLLOW_condition_in_merge_statement6558_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_merge_statement6560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_merge_statement6560( FOLLOW_RIGHT_PAREN_in_merge_statement6560_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_update_insert_seq_in_merge_statement6592_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_update_insert_seq_in_merge_statement6592( FOLLOW_merge_update_insert_seq_in_merge_statement6592_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_insert_update_seq_in_merge_statement6626_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_insert_update_seq_in_merge_statement6626( FOLLOW_merge_insert_update_seq_in_merge_statement6626_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_merge_statement6647_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_merge_statement6647( FOLLOW_error_logging_clause_in_merge_statement6647_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_update_clause_in_merge_update_insert_seq6730_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_update_clause_in_merge_update_insert_seq6730( FOLLOW_merge_update_clause_in_merge_update_insert_seq6730_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_insert_clause_in_merge_update_insert_seq6732_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_insert_clause_in_merge_update_insert_seq6732( FOLLOW_merge_insert_clause_in_merge_update_insert_seq6732_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_insert_clause_in_merge_insert_update_seq6750_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_insert_clause_in_merge_insert_update_seq6750( FOLLOW_merge_insert_clause_in_merge_insert_update_seq6750_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_update_clause_in_merge_insert_update_seq6752_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_update_clause_in_merge_insert_update_seq6752( FOLLOW_merge_update_clause_in_merge_insert_update_seq6752_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_merge_update_clause6773_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_merge_update_clause6773( FOLLOW_when_key_in_merge_update_clause6773_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_matched_key_in_merge_update_clause6775_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_matched_key_in_merge_update_clause6775( FOLLOW_matched_key_in_merge_update_clause6775_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_merge_update_clause6777_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_merge_update_clause6777( FOLLOW_then_key_in_merge_update_clause6777_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_merge_update_clause6779_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_merge_update_clause6779( FOLLOW_update_key_in_merge_update_clause6779_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_merge_update_clause6781_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_merge_update_clause6781( FOLLOW_set_key_in_merge_update_clause6781_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_element_in_merge_update_clause6792_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_element_in_merge_update_clause6792( FOLLOW_merge_element_in_merge_update_clause6792_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_merge_update_clause6795_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_merge_update_clause6795( FOLLOW_COMMA_in_merge_update_clause6795_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_element_in_merge_update_clause6797_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_element_in_merge_update_clause6797( FOLLOW_merge_element_in_merge_update_clause6797_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_merge_update_clause6809_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_merge_update_clause6809( FOLLOW_where_clause_in_merge_update_clause6809_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_update_delete_part_in_merge_update_clause6812_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_update_delete_part_in_merge_update_clause6812( FOLLOW_merge_update_delete_part_in_merge_update_clause6812_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_merge_element6864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_merge_element6864( FOLLOW_column_name_in_merge_element6864_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_merge_element6866_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_merge_element6866( FOLLOW_EQUALS_OP_in_merge_element6866_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_merge_element6868_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_merge_element6868( FOLLOW_expression_in_merge_element6868_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_delete_key_in_merge_update_delete_part6911_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_delete_key_in_merge_update_delete_part6911( FOLLOW_delete_key_in_merge_update_delete_part6911_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_merge_update_delete_part6914_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_merge_update_delete_part6914( FOLLOW_where_clause_in_merge_update_delete_part6914_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_merge_insert_clause6934_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000010000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_merge_insert_clause6934( FOLLOW_when_key_in_merge_insert_clause6934_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_merge_insert_clause6936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_merge_insert_clause6936( FOLLOW_not_key_in_merge_insert_clause6936_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_matched_key_in_merge_insert_clause6938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_matched_key_in_merge_insert_clause6938( FOLLOW_matched_key_in_merge_insert_clause6938_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_merge_insert_clause6940_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000800000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_merge_insert_clause6940( FOLLOW_then_key_in_merge_insert_clause6940_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_key_in_merge_insert_clause6942_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_key_in_merge_insert_clause6942( FOLLOW_insert_key_in_merge_insert_clause6942_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_merge_insert_clause6954_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_merge_insert_clause6954( FOLLOW_LEFT_PAREN_in_merge_insert_clause6954_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_merge_insert_clause6956_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_merge_insert_clause6956( FOLLOW_column_name_in_merge_insert_clause6956_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_merge_insert_clause6959_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_merge_insert_clause6959( FOLLOW_COMMA_in_merge_insert_clause6959_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_merge_insert_clause6961_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_merge_insert_clause6961( FOLLOW_column_name_in_merge_insert_clause6961_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_merge_insert_clause6965_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_merge_insert_clause6965( FOLLOW_RIGHT_PAREN_in_merge_insert_clause6965_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_key_in_merge_insert_clause6977_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_key_in_merge_insert_clause6977( FOLLOW_values_key_in_merge_insert_clause6977_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_merge_insert_clause6979_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_merge_insert_clause6979( FOLLOW_expression_list_in_merge_insert_clause6979_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_merge_insert_clause6981_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_merge_insert_clause6981( FOLLOW_where_clause_in_merge_insert_clause6981_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_selected_tableview7042_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_selected_tableview7042( FOLLOW_tableview_name_in_selected_tableview7042_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_selected_tableview7046_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_selected_tableview7046( FOLLOW_LEFT_PAREN_in_selected_tableview7046_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_selected_tableview7048_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_selected_tableview7048( FOLLOW_select_statement_in_selected_tableview7048_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_selected_tableview7050_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_selected_tableview7050( FOLLOW_RIGHT_PAREN_in_selected_tableview7050_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_selected_tableview7053_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_selected_tableview7053( FOLLOW_table_alias_in_selected_tableview7053_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_key_in_lock_table_statement7099_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0040000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_key_in_lock_table_statement7099( FOLLOW_lock_key_in_lock_table_statement7099_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_key_in_lock_table_statement7101_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_key_in_lock_table_statement7101( FOLLOW_table_key_in_lock_table_statement7101_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_table_element_in_lock_table_statement7112_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_table_element_in_lock_table_statement7112( FOLLOW_lock_table_element_in_lock_table_statement7112_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_lock_table_statement7115_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_lock_table_statement7115( FOLLOW_COMMA_in_lock_table_statement7115_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_table_element_in_lock_table_statement7117_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_table_element_in_lock_table_statement7117( FOLLOW_lock_table_element_in_lock_table_statement7117_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_lock_table_statement7130_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000020040000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_lock_table_statement7130( FOLLOW_in_key_in_lock_table_statement7130_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_mode_in_lock_table_statement7132_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000002000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_mode_in_lock_table_statement7132( FOLLOW_lock_mode_in_lock_table_statement7132_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_mode_key_in_lock_table_statement7134_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000008000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_mode_key_in_lock_table_statement7134( FOLLOW_mode_key_in_lock_table_statement7134_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_wait_nowait_part_in_lock_table_statement7136_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_wait_nowait_part_in_lock_table_statement7136( FOLLOW_wait_nowait_part_in_lock_table_statement7136_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_wait_key_in_wait_nowait_part7179_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_wait_key_in_wait_nowait_part7179( FOLLOW_wait_key_in_wait_nowait_part7179_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_wait_nowait_part7181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_wait_nowait_part7181( FOLLOW_expression_in_wait_nowait_part7181_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nowait_key_in_wait_nowait_part7204_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nowait_key_in_wait_nowait_part7204( FOLLOW_nowait_key_in_wait_nowait_part7204_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_lock_table_element7226_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_lock_table_element7226( FOLLOW_tableview_name_in_lock_table_element7226_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_partition_extension_clause_in_lock_table_element7228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_partition_extension_clause_in_lock_table_element7228( FOLLOW_partition_extension_clause_in_lock_table_element7228_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_row_key_in_lock_mode7268_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_row_key_in_lock_mode7268( FOLLOW_row_key_in_lock_mode7268_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_share_key_in_lock_mode7270_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_share_key_in_lock_mode7270( FOLLOW_share_key_in_lock_mode7270_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_row_key_in_lock_mode7281_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_row_key_in_lock_mode7281( FOLLOW_row_key_in_lock_mode7281_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exclusive_key_in_lock_mode7283_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exclusive_key_in_lock_mode7283( FOLLOW_exclusive_key_in_lock_mode7283_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_share_key_in_lock_mode7294_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_share_key_in_lock_mode7294( FOLLOW_share_key_in_lock_mode7294_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_lock_mode7296_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_lock_mode7296( FOLLOW_update_key_in_lock_mode7296_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_share_key_in_lock_mode7308_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_share_key_in_lock_mode7308( FOLLOW_share_key_in_lock_mode7308_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_row_key_in_lock_mode7310_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_row_key_in_lock_mode7310( FOLLOW_row_key_in_lock_mode7310_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exclusive_key_in_lock_mode7312_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exclusive_key_in_lock_mode7312( FOLLOW_exclusive_key_in_lock_mode7312_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exclusive_key_in_lock_mode7323_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exclusive_key_in_lock_mode7323( FOLLOW_exclusive_key_in_lock_mode7323_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_general_table_ref7351_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_general_table_ref7351( FOLLOW_dml_table_expression_clause_in_general_table_ref7351_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_general_table_ref7366_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_general_table_ref7366( FOLLOW_only_key_in_general_table_ref7366_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_general_table_ref7368_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_general_table_ref7368( FOLLOW_LEFT_PAREN_in_general_table_ref7368_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_general_table_ref7370_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_general_table_ref7370( FOLLOW_dml_table_expression_clause_in_general_table_ref7370_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_general_table_ref7372_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_general_table_ref7372( FOLLOW_RIGHT_PAREN_in_general_table_ref7372_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_general_table_ref7387_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_general_table_ref7387( FOLLOW_table_alias_in_general_table_ref7387_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_returning_key_in_static_returning_clause7431_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_returning_key_in_static_returning_clause7431( FOLLOW_returning_key_in_static_returning_clause7431_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_return_key_in_static_returning_clause7433_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_return_key_in_static_returning_clause7433( FOLLOW_return_key_in_static_returning_clause7433_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_static_returning_clause7436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_static_returning_clause7436( FOLLOW_expression_in_static_returning_clause7436_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_static_returning_clause7439_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_static_returning_clause7439( FOLLOW_COMMA_in_static_returning_clause7439_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_static_returning_clause7441_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_static_returning_clause7441( FOLLOW_expression_in_static_returning_clause7441_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_clause_in_static_returning_clause7454_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_clause_in_static_returning_clause7454( FOLLOW_into_clause_in_static_returning_clause7454_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_log_key_in_error_logging_clause7497_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_log_key_in_error_logging_clause7497( FOLLOW_log_key_in_error_logging_clause7497_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_errors_key_in_error_logging_clause7499_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002002), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103200612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_errors_key_in_error_logging_clause7499( FOLLOW_errors_key_in_error_logging_clause7499_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_into_part_in_error_logging_clause7510_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002002), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_into_part_in_error_logging_clause7510( FOLLOW_error_logging_into_part_in_error_logging_clause7510_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_error_logging_clause7527_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_error_logging_clause7527( FOLLOW_expression_wrapper_in_error_logging_clause7527_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_reject_part_in_error_logging_clause7539_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_reject_part_in_error_logging_clause7539( FOLLOW_error_logging_reject_part_in_error_logging_clause7539_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_key_in_error_logging_into_part7583_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_key_in_error_logging_into_part7583( FOLLOW_into_key_in_error_logging_into_part7583_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_error_logging_into_part7586_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_error_logging_into_part7586( FOLLOW_tableview_name_in_error_logging_into_part7586_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reject_key_in_error_logging_reject_part7606_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reject_key_in_error_logging_reject_part7606( FOLLOW_reject_key_in_error_logging_reject_part7606_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_limit_key_in_error_logging_reject_part7609_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_limit_key_in_error_logging_reject_part7609( FOLLOW_limit_key_in_error_logging_reject_part7609_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unlimited_key_in_error_logging_reject_part7617_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unlimited_key_in_error_logging_reject_part7617( FOLLOW_unlimited_key_in_error_logging_reject_part7617_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_error_logging_reject_part7619_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_error_logging_reject_part7619( FOLLOW_expression_wrapper_in_error_logging_reject_part7619_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_collection_expression_in_dml_table_expression_clause7640_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_collection_expression_in_dml_table_expression_clause7640( FOLLOW_table_collection_expression_in_dml_table_expression_clause7640_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7663_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7663( FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7663_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_dml_table_expression_clause7665_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_dml_table_expression_clause7665( FOLLOW_select_statement_in_dml_table_expression_clause7665_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7667_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7667( FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7667_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7670_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7670( FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7670_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_dml_table_expression_clause7712_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_dml_table_expression_clause7712( FOLLOW_tableview_name_in_dml_table_expression_clause7712_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_sample_clause_in_dml_table_expression_clause7714_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_sample_clause_in_dml_table_expression_clause7714( FOLLOW_sample_clause_in_dml_table_expression_clause7714_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_key_in_table_collection_expression7752_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_key_in_table_collection_expression7752( FOLLOW_table_key_in_table_collection_expression7752_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_the_key_in_table_collection_expression7756_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_the_key_in_table_collection_expression7756( FOLLOW_the_key_in_table_collection_expression7756_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_table_collection_expression7784_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_table_collection_expression7784( FOLLOW_LEFT_PAREN_in_table_collection_expression7784_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_table_collection_expression7786_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_table_collection_expression7786( FOLLOW_subquery_in_table_collection_expression7786_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_table_collection_expression7788_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_table_collection_expression7788( FOLLOW_RIGHT_PAREN_in_table_collection_expression7788_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_table_collection_expression7801_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_table_collection_expression7801( FOLLOW_LEFT_PAREN_in_table_collection_expression7801_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_table_collection_expression7803_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_table_collection_expression7803( FOLLOW_expression_in_table_collection_expression7803_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_table_collection_expression7805_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_table_collection_expression7805( FOLLOW_RIGHT_PAREN_in_table_collection_expression7805_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_subquery_restriction_clause7858_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_subquery_restriction_clause7858( FOLLOW_with_key_in_subquery_restriction_clause7858_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_read_key_in_subquery_restriction_clause7869_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_read_key_in_subquery_restriction_clause7869( FOLLOW_read_key_in_subquery_restriction_clause7869_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_subquery_restriction_clause7871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_subquery_restriction_clause7871( FOLLOW_only_key_in_subquery_restriction_clause7871_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_check_key_in_subquery_restriction_clause7882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000100000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_check_key_in_subquery_restriction_clause7882( FOLLOW_check_key_in_subquery_restriction_clause7882_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_option_key_in_subquery_restriction_clause7884_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_option_key_in_subquery_restriction_clause7884( FOLLOW_option_key_in_subquery_restriction_clause7884_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constraint_key_in_subquery_restriction_clause7887_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constraint_key_in_subquery_restriction_clause7887( FOLLOW_constraint_key_in_subquery_restriction_clause7887_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constraint_name_in_subquery_restriction_clause7889_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constraint_name_in_subquery_restriction_clause7889( FOLLOW_constraint_name_in_subquery_restriction_clause7889_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_sample_key_in_sample_clause7940_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_sample_key_in_sample_clause7940( FOLLOW_sample_key_in_sample_clause7940_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_block_key_in_sample_clause7942_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_block_key_in_sample_clause7942( FOLLOW_block_key_in_sample_clause7942_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_sample_clause7954_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_sample_clause7954( FOLLOW_LEFT_PAREN_in_sample_clause7954_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_sample_clause7958_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_sample_clause7958( FOLLOW_expression_in_sample_clause7958_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_sample_clause7961_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_sample_clause7961( FOLLOW_COMMA_in_sample_clause7961_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_sample_clause7965_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_sample_clause7965( FOLLOW_expression_in_sample_clause7965_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_sample_clause7969_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_sample_clause7969( FOLLOW_RIGHT_PAREN_in_sample_clause7969_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seed_part_in_sample_clause7979_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seed_part_in_sample_clause7979( FOLLOW_seed_part_in_sample_clause7979_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seed_key_in_seed_part8035_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seed_key_in_seed_part8035( FOLLOW_seed_key_in_seed_part8035_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_seed_part8037_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_seed_part8037( FOLLOW_LEFT_PAREN_in_seed_part8037_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_seed_part8039_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_seed_part8039( FOLLOW_expression_in_seed_part8039_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_seed_part8041_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_seed_part8041( FOLLOW_RIGHT_PAREN_in_seed_part8041_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cursor_key_in_cursor_expression8088_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cursor_key_in_cursor_expression8088( FOLLOW_cursor_key_in_cursor_expression8088_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_cursor_expression8090_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_cursor_expression8090( FOLLOW_LEFT_PAREN_in_cursor_expression8090_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_cursor_expression8092_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_cursor_expression8092( FOLLOW_subquery_in_cursor_expression8092_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_cursor_expression8094_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_cursor_expression8094( FOLLOW_RIGHT_PAREN_in_cursor_expression8094_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_expression_list8114_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000012), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_expression_list8114( FOLLOW_LEFT_PAREN_in_expression_list8114_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_list8116_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_expression_list8116( FOLLOW_expression_in_expression_list8116_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_expression_list8120_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_expression_list8120( FOLLOW_COMMA_in_expression_list8120_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_list8122_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_expression_list8122( FOLLOW_expression_in_expression_list8122_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_expression_list8126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_expression_list8126( FOLLOW_RIGHT_PAREN_in_expression_list8126_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_condition8171_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_condition8171( FOLLOW_expression_in_condition8171_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_condition_wrapper8191_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_condition_wrapper8191( FOLLOW_expression_in_condition_wrapper8191_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_or_key_in_logical_or_expression_seq8225_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401030006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_or_key_in_logical_or_expression_seq8225( FOLLOW_or_key_in_logical_or_expression_seq8225_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_logical_and_expression_in_logical_or_expression_seq8228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_logical_and_expression_in_logical_or_expression_seq8228( FOLLOW_logical_and_expression_in_logical_or_expression_seq8228_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cursor_expression_in_expression8271_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cursor_expression_in_expression8271( FOLLOW_cursor_expression_in_expression8271_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_logical_and_expression_in_expression8286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000200000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_logical_and_expression_in_expression8286( FOLLOW_logical_and_expression_in_expression8286_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_logical_or_expression_seq_in_expression8290_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000200000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_logical_or_expression_seq_in_expression8290( FOLLOW_logical_or_expression_seq_in_expression8290_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_wrapper8348_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_expression_wrapper8348( FOLLOW_expression_in_expression_wrapper8348_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_and_key_in_logical_and_expression_seq8385_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401030006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_and_key_in_logical_and_expression_seq8385( FOLLOW_and_key_in_logical_and_expression_seq8385_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_negated_expression_in_logical_and_expression_seq8388_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_negated_expression_in_logical_and_expression_seq8388( FOLLOW_negated_expression_in_logical_and_expression_seq8388_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_negated_expression_in_logical_and_expression8417_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_negated_expression_in_logical_and_expression8417( FOLLOW_negated_expression_in_logical_and_expression8417_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_logical_and_expression_seq_in_logical_and_expression8420_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_logical_and_expression_seq_in_logical_and_expression8420( FOLLOW_logical_and_expression_seq_in_logical_and_expression8420_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_negated_expression8480_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401030006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_negated_expression8480( FOLLOW_not_key_in_negated_expression8480_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_negated_expression_in_negated_expression8483_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_negated_expression_in_negated_expression8483( FOLLOW_negated_expression_in_negated_expression8483_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_equality_expression_in_negated_expression8494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_equality_expression_in_negated_expression8494( FOLLOW_equality_expression_in_negated_expression8494_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_comparsion_in_equality_expression8523_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_comparsion_in_equality_expression8523( FOLLOW_multiset_comparsion_in_equality_expression8523_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_is_key_in_equality_expression8539_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000070000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_is_key_in_equality_expression8539( FOLLOW_is_key_in_equality_expression8539_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_equality_expression8542_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000060000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_equality_expression8542( FOLLOW_not_key_in_equality_expression8542_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_null_key_in_equality_expression8561_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_null_key_in_equality_expression8561( FOLLOW_null_key_in_equality_expression8561_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nan_key_in_equality_expression8628_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nan_key_in_equality_expression8628( FOLLOW_nan_key_in_equality_expression8628_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_present_key_in_equality_expression8695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_present_key_in_equality_expression8695( FOLLOW_present_key_in_equality_expression8695_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_infinite_key_in_equality_expression8762_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_infinite_key_in_equality_expression8762( FOLLOW_infinite_key_in_equality_expression8762_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_a_key_in_equality_expression8829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_a_key_in_equality_expression8829( FOLLOW_a_key_in_equality_expression8829_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_equality_expression8831_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_equality_expression8831( FOLLOW_set_key_in_equality_expression8831_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_empty_key_in_equality_expression8898_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_empty_key_in_equality_expression8898( FOLLOW_empty_key_in_equality_expression8898_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_of_key_in_equality_expression8965_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_of_key_in_equality_expression8965( FOLLOW_of_key_in_equality_expression8965_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_key_in_equality_expression8967_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_key_in_equality_expression8967( FOLLOW_type_key_in_equality_expression8967_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_equality_expression8970_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_equality_expression8970( FOLLOW_LEFT_PAREN_in_equality_expression8970_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_equality_expression8972_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_equality_expression8972( FOLLOW_only_key_in_equality_expression8972_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_equality_expression8975_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_equality_expression8975( FOLLOW_type_spec_in_equality_expression8975_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_equality_expression8978_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_equality_expression8978( FOLLOW_COMMA_in_equality_expression8978_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_equality_expression8980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_equality_expression8980( FOLLOW_type_spec_in_equality_expression8980_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_equality_expression8984_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_equality_expression8984( FOLLOW_RIGHT_PAREN_in_equality_expression8984_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_relational_expression_in_multiset_comparsion9081_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_relational_expression_in_multiset_comparsion9081( FOLLOW_relational_expression_in_multiset_comparsion9081_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_type_in_multiset_comparsion9097_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401060006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_type_in_multiset_comparsion9097( FOLLOW_multiset_type_in_multiset_comparsion9097_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_of_key_in_multiset_comparsion9099_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_of_key_in_multiset_comparsion9099( FOLLOW_of_key_in_multiset_comparsion9099_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_multiset_comparsion9102_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_multiset_comparsion9102( FOLLOW_concatenation_in_multiset_comparsion9102_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_member_key_in_multiset_type9147_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_member_key_in_multiset_type9147( FOLLOW_member_key_in_multiset_type9147_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_submultiset_key_in_multiset_type9158_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_submultiset_key_in_multiset_type9158( FOLLOW_submultiset_key_in_multiset_type9158_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_compound_expression_in_relational_expression9178_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000003000000410), ANTLR_UINT64_LIT(0x0000000300000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_compound_expression_in_relational_expression9178( FOLLOW_compound_expression_in_relational_expression9178_bits, 5 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_relational_expression9188_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_relational_expression9188( FOLLOW_EQUALS_OP_in_relational_expression9188_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_equal_op_in_relational_expression9193_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_equal_op_in_relational_expression9193( FOLLOW_not_equal_op_in_relational_expression9193_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LESS_THAN_OP_in_relational_expression9198_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LESS_THAN_OP_in_relational_expression9198( FOLLOW_LESS_THAN_OP_in_relational_expression9198_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_GREATER_THAN_OP_in_relational_expression9203_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_GREATER_THAN_OP_in_relational_expression9203( FOLLOW_GREATER_THAN_OP_in_relational_expression9203_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_less_than_or_equals_op_in_relational_expression9208_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_less_than_or_equals_op_in_relational_expression9208( FOLLOW_less_than_or_equals_op_in_relational_expression9208_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_greater_than_or_equals_op_in_relational_expression9213_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_greater_than_or_equals_op_in_relational_expression9213( FOLLOW_greater_than_or_equals_op_in_relational_expression9213_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_compound_expression_in_relational_expression9218_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000003000000410), ANTLR_UINT64_LIT(0x0000000300000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_compound_expression_in_relational_expression9218( FOLLOW_compound_expression_in_relational_expression9218_bits, 5 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_compound_expression9249_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000018400000080) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_compound_expression9249( FOLLOW_concatenation_in_compound_expression9249_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_compound_expression9266_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008400000080) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_compound_expression9266( FOLLOW_not_key_in_compound_expression9266_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_compound_expression9286_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_compound_expression9286( FOLLOW_in_key_in_compound_expression9286_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_elements_in_compound_expression9288_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_elements_in_compound_expression9288( FOLLOW_in_elements_in_compound_expression9288_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_between_key_in_compound_expression9359_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_between_key_in_compound_expression9359( FOLLOW_between_key_in_compound_expression9359_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_between_elements_in_compound_expression9361_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_between_elements_in_compound_expression9361( FOLLOW_between_elements_in_compound_expression9361_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like_type_in_compound_expression9432_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like_type_in_compound_expression9432( FOLLOW_like_type_in_compound_expression9432_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_compound_expression9434_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_compound_expression9434( FOLLOW_concatenation_in_compound_expression9434_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like_escape_part_in_compound_expression9436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like_escape_part_in_compound_expression9436( FOLLOW_like_escape_part_in_compound_expression9436_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like_key_in_like_type9545_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like_key_in_like_type9545( FOLLOW_like_key_in_like_type9545_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_likec_key_in_like_type9556_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_likec_key_in_like_type9556( FOLLOW_likec_key_in_like_type9556_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like2_key_in_like_type9567_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like2_key_in_like_type9567( FOLLOW_like2_key_in_like_type9567_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like4_key_in_like_type9578_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like4_key_in_like_type9578( FOLLOW_like4_key_in_like_type9578_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_escape_key_in_like_escape_part9598_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_escape_key_in_like_escape_part9598( FOLLOW_escape_key_in_like_escape_part9598_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_like_escape_part9600_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_like_escape_part9600( FOLLOW_concatenation_in_like_escape_part9600_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_in_elements9658_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_in_elements9658( FOLLOW_LEFT_PAREN_in_in_elements9658_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_in_elements9660_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_in_elements9660( FOLLOW_subquery_in_in_elements9660_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_in_elements9662_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_in_elements9662( FOLLOW_RIGHT_PAREN_in_in_elements9662_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_in_elements9693_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_in_elements9693( FOLLOW_LEFT_PAREN_in_in_elements9693_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_in_elements9695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_in_elements9695( FOLLOW_concatenation_wrapper_in_in_elements9695_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_in_elements9698_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_in_elements9698( FOLLOW_COMMA_in_in_elements9698_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_in_elements9700_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_in_elements9700( FOLLOW_concatenation_wrapper_in_in_elements9700_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_in_elements9704_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_in_elements9704( FOLLOW_RIGHT_PAREN_in_in_elements9704_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_in_elements9736_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_in_elements9736( FOLLOW_constant_in_in_elements9736_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_bind_variable_in_in_elements9764_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_bind_variable_in_in_elements9764( FOLLOW_bind_variable_in_in_elements9764_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_in_in_elements9792_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_in_in_elements9792( FOLLOW_general_element_in_in_elements9792_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_between_elements9831_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_between_elements9831( FOLLOW_concatenation_in_between_elements9831_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_and_key_in_between_elements9833_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_and_key_in_between_elements9833( FOLLOW_and_key_in_between_elements9833_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_between_elements9837_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_between_elements9837( FOLLOW_concatenation_in_between_elements9837_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_additive_expression_in_concatenation9882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0008000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_additive_expression_in_concatenation9882( FOLLOW_additive_expression_in_concatenation9882_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_op_in_concatenation9885_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_op_in_concatenation9885( FOLLOW_concatenation_op_in_concatenation9885_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_additive_expression_in_concatenation9888_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0008000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_additive_expression_in_concatenation9888( FOLLOW_additive_expression_in_concatenation9888_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_concatenation_wrapper9910_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_concatenation_wrapper9910( FOLLOW_concatenation_in_concatenation_wrapper9910_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiply_expression_in_additive_expression9946_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiply_expression_in_additive_expression9946( FOLLOW_multiply_expression_in_additive_expression9946_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PLUS_SIGN_in_additive_expression9952_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PLUS_SIGN_in_additive_expression9952( FOLLOW_PLUS_SIGN_in_additive_expression9952_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_MINUS_SIGN_in_additive_expression9957_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_MINUS_SIGN_in_additive_expression9957( FOLLOW_MINUS_SIGN_in_additive_expression9957_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiply_expression_in_additive_expression9962_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiply_expression_in_additive_expression9962( FOLLOW_multiply_expression_in_additive_expression9962_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_datetime_expression_in_multiply_expression9984_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_datetime_expression_in_multiply_expression9984( FOLLOW_datetime_expression_in_multiply_expression9984_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_multiply_expression9990_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_multiply_expression9990( FOLLOW_ASTERISK_in_multiply_expression9990_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_SOLIDUS_in_multiply_expression9995_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_SOLIDUS_in_multiply_expression9995( FOLLOW_SOLIDUS_in_multiply_expression9995_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_datetime_expression_in_multiply_expression10000_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_datetime_expression_in_multiply_expression10000( FOLLOW_datetime_expression_in_multiply_expression10000_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_expression_in_datetime_expression10023_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_expression_in_datetime_expression10023( FOLLOW_model_expression_in_datetime_expression10023_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_at_key_in_datetime_expression10039_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_at_key_in_datetime_expression10039( FOLLOW_at_key_in_datetime_expression10039_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_local_key_in_datetime_expression10042_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_local_key_in_datetime_expression10042( FOLLOW_local_key_in_datetime_expression10042_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_time_key_in_datetime_expression10044_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_time_key_in_datetime_expression10044( FOLLOW_time_key_in_datetime_expression10044_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_zone_key_in_datetime_expression10046_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_zone_key_in_datetime_expression10046( FOLLOW_zone_key_in_datetime_expression10046_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_datetime_expression10048_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_datetime_expression10048( FOLLOW_concatenation_wrapper_in_datetime_expression10048_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_interval_expression_in_datetime_expression10098_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_interval_expression_in_datetime_expression10098( FOLLOW_interval_expression_in_datetime_expression10098_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_day_key_in_interval_expression10148_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_day_key_in_interval_expression10148( FOLLOW_day_key_in_interval_expression10148_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_interval_expression10152_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_interval_expression10152( FOLLOW_LEFT_PAREN_in_interval_expression10152_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_interval_expression10156_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_interval_expression10156( FOLLOW_concatenation_wrapper_in_interval_expression10156_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_interval_expression10158_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_interval_expression10158( FOLLOW_RIGHT_PAREN_in_interval_expression10158_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_to_key_in_interval_expression10162_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_to_key_in_interval_expression10162( FOLLOW_to_key_in_interval_expression10162_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_second_key_in_interval_expression10164_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_second_key_in_interval_expression10164( FOLLOW_second_key_in_interval_expression10164_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_interval_expression10167_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_interval_expression10167( FOLLOW_LEFT_PAREN_in_interval_expression10167_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_interval_expression10171_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_interval_expression10171( FOLLOW_concatenation_wrapper_in_interval_expression10171_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_interval_expression10173_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_interval_expression10173( FOLLOW_RIGHT_PAREN_in_interval_expression10173_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_year_key_in_interval_expression10212_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_year_key_in_interval_expression10212( FOLLOW_year_key_in_interval_expression10212_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_interval_expression10215_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_interval_expression10215( FOLLOW_LEFT_PAREN_in_interval_expression10215_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_interval_expression10217_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_interval_expression10217( FOLLOW_concatenation_wrapper_in_interval_expression10217_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_interval_expression10219_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_interval_expression10219( FOLLOW_RIGHT_PAREN_in_interval_expression10219_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_to_key_in_interval_expression10223_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_to_key_in_interval_expression10223( FOLLOW_to_key_in_interval_expression10223_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_month_key_in_interval_expression10225_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_month_key_in_interval_expression10225( FOLLOW_month_key_in_interval_expression10225_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_expression_in_model_expression10266_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_expression_in_model_expression10266( FOLLOW_multiset_expression_in_model_expression10266_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_BRACKET_in_model_expression10282_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103001612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_BRACKET_in_model_expression10282( FOLLOW_LEFT_BRACKET_in_model_expression10282_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_expression_element_in_model_expression10284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_expression_element_in_model_expression10284( FOLLOW_model_expression_element_in_model_expression10284_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_BRACKET_in_model_expression10286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_BRACKET_in_model_expression10286( FOLLOW_RIGHT_BRACKET_in_model_expression10286_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_model_expression_element10338_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_model_expression_element10338( FOLLOW_any_key_in_model_expression_element10338_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_wrapper_in_model_expression_element10340_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_wrapper_in_model_expression_element10340( FOLLOW_condition_wrapper_in_model_expression_element10340_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_model_expression_element10344_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_model_expression_element10344( FOLLOW_COMMA_in_model_expression_element10344_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_model_expression_element10353_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_model_expression_element10353( FOLLOW_any_key_in_model_expression_element10353_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_wrapper_in_model_expression_element10355_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_wrapper_in_model_expression_element10355( FOLLOW_condition_wrapper_in_model_expression_element10355_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_single_column_for_loop_in_model_expression_element10369_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_single_column_for_loop_in_model_expression_element10369( FOLLOW_single_column_for_loop_in_model_expression_element10369_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_model_expression_element10372_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_model_expression_element10372( FOLLOW_COMMA_in_model_expression_element10372_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_single_column_for_loop_in_model_expression_element10375_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_single_column_for_loop_in_model_expression_element10375( FOLLOW_single_column_for_loop_in_model_expression_element10375_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_column_for_loop_in_model_expression_element10388_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_column_for_loop_in_model_expression_element10388( FOLLOW_multi_column_for_loop_in_model_expression_element10388_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_single_column_for_loop10416_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_single_column_for_loop10416( FOLLOW_for_key_in_single_column_for_loop10416_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_single_column_for_loop10418_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008420000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_single_column_for_loop10418( FOLLOW_column_name_in_single_column_for_loop10418_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_single_column_for_loop10430_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_single_column_for_loop10430( FOLLOW_in_key_in_single_column_for_loop10430_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_single_column_for_loop10432_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_single_column_for_loop10432( FOLLOW_expression_list_in_single_column_for_loop10432_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_like_part_in_single_column_for_loop10445_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_like_part_in_single_column_for_loop10445( FOLLOW_for_like_part_in_single_column_for_loop10445_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_single_column_for_loop10448_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_single_column_for_loop10448( FOLLOW_from_key_in_single_column_for_loop10448_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_single_column_for_loop10452_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_single_column_for_loop10452( FOLLOW_expression_in_single_column_for_loop10452_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_to_key_in_single_column_for_loop10466_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_to_key_in_single_column_for_loop10466( FOLLOW_to_key_in_single_column_for_loop10466_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_single_column_for_loop10470_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_single_column_for_loop10470( FOLLOW_expression_in_single_column_for_loop10470_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_increment_decrement_type_in_single_column_for_loop10472_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_increment_decrement_type_in_single_column_for_loop10472( FOLLOW_for_increment_decrement_type_in_single_column_for_loop10472_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_single_column_for_loop10476_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_single_column_for_loop10476( FOLLOW_expression_in_single_column_for_loop10476_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like_key_in_for_like_part10585_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like_key_in_for_like_part10585( FOLLOW_like_key_in_for_like_part10585_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_for_like_part10587_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_for_like_part10587( FOLLOW_expression_in_for_like_part10587_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_increment_key_in_for_increment_decrement_type10627_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_increment_key_in_for_increment_decrement_type10627( FOLLOW_increment_key_in_for_increment_decrement_type10627_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_decrement_key_in_for_increment_decrement_type10638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_decrement_key_in_for_increment_decrement_type10638( FOLLOW_decrement_key_in_for_increment_decrement_type10638_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_multi_column_for_loop10658_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_multi_column_for_loop10658( FOLLOW_for_key_in_multi_column_for_loop10658_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_multi_column_for_loop10660_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_multi_column_for_loop10660( FOLLOW_LEFT_PAREN_in_multi_column_for_loop10660_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_multi_column_for_loop10662_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_multi_column_for_loop10662( FOLLOW_column_name_in_multi_column_for_loop10662_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multi_column_for_loop10665_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_multi_column_for_loop10665( FOLLOW_COMMA_in_multi_column_for_loop10665_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_multi_column_for_loop10667_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_multi_column_for_loop10667( FOLLOW_column_name_in_multi_column_for_loop10667_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10671_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10671( FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10671_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_multi_column_for_loop10673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_multi_column_for_loop10673( FOLLOW_in_key_in_multi_column_for_loop10673_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_multi_column_for_loop10683_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_multi_column_for_loop10683( FOLLOW_LEFT_PAREN_in_multi_column_for_loop10683_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_multi_column_for_loop10707_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_multi_column_for_loop10707( FOLLOW_subquery_in_multi_column_for_loop10707_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_multi_column_for_loop10731_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_multi_column_for_loop10731( FOLLOW_LEFT_PAREN_in_multi_column_for_loop10731_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_multi_column_for_loop10733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_multi_column_for_loop10733( FOLLOW_expression_list_in_multi_column_for_loop10733_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multi_column_for_loop10736_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_multi_column_for_loop10736( FOLLOW_COMMA_in_multi_column_for_loop10736_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_multi_column_for_loop10738_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_multi_column_for_loop10738( FOLLOW_expression_list_in_multi_column_for_loop10738_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10742_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10742( FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10742_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10766( FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10766_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_multiset_expression10814_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_multiset_expression10814( FOLLOW_unary_expression_in_multiset_expression10814_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_op_in_multiset_expression10827_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_op_in_multiset_expression10827( FOLLOW_multiset_op_in_multiset_expression10827_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_multiset_expression10830_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_multiset_expression10830( FOLLOW_unary_expression_in_multiset_expression10830_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_MINUS_SIGN_in_unary_expression10862_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_MINUS_SIGN_in_unary_expression10862( FOLLOW_MINUS_SIGN_in_unary_expression10862_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10864( FOLLOW_unary_expression_in_unary_expression10864_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PLUS_SIGN_in_unary_expression10884_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PLUS_SIGN_in_unary_expression10884( FOLLOW_PLUS_SIGN_in_unary_expression10884_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10886_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10886( FOLLOW_unary_expression_in_unary_expression10886_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_prior_key_in_unary_expression10906_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_prior_key_in_unary_expression10906( FOLLOW_prior_key_in_unary_expression10906_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10909_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10909( FOLLOW_unary_expression_in_unary_expression10909_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_connect_by_root_key_in_unary_expression10920_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_connect_by_root_key_in_unary_expression10920( FOLLOW_connect_by_root_key_in_unary_expression10920_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10923_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10923( FOLLOW_unary_expression_in_unary_expression10923_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_new_key_in_unary_expression10937_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_new_key_in_unary_expression10937( FOLLOW_new_key_in_unary_expression10937_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10940_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10940( FOLLOW_unary_expression_in_unary_expression10940_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_unary_expression10951_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_unary_expression10951( FOLLOW_distinct_key_in_unary_expression10951_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10954_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10954( FOLLOW_unary_expression_in_unary_expression10954_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_unary_expression10965_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_unary_expression10965( FOLLOW_all_key_in_unary_expression10965_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10968_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10968( FOLLOW_unary_expression_in_unary_expression10968_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_statement_in_unary_expression10981_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_statement_in_unary_expression10981( FOLLOW_case_statement_in_unary_expression10981_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_quantified_expression_in_unary_expression10993_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_quantified_expression_in_unary_expression10993( FOLLOW_quantified_expression_in_unary_expression10993_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_standard_function_in_unary_expression11004_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_standard_function_in_unary_expression11004( FOLLOW_standard_function_in_unary_expression11004_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_atom_in_unary_expression11023_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_atom_in_unary_expression11023( FOLLOW_atom_in_unary_expression11023_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_searched_case_statement_in_case_statement11070_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_searched_case_statement_in_case_statement11070( FOLLOW_searched_case_statement_in_case_statement11070_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_simple_case_statement_in_case_statement11081_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_simple_case_statement_in_case_statement11081( FOLLOW_simple_case_statement_in_case_statement11081_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_simple_case_statement11105_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_simple_case_statement11105( FOLLOW_label_name_in_simple_case_statement11105_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_simple_case_statement11111_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_simple_case_statement11111( FOLLOW_case_key_in_simple_case_statement11111_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_atom_in_simple_case_statement11113_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_atom_in_simple_case_statement11113( FOLLOW_atom_in_simple_case_statement11113_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_simple_case_when_part_in_simple_case_statement11123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000C00000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_simple_case_when_part_in_simple_case_statement11123( FOLLOW_simple_case_when_part_in_simple_case_statement11123_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_else_part_in_simple_case_statement11135_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000800000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_else_part_in_simple_case_statement11135( FOLLOW_case_else_part_in_simple_case_statement11135_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_end_key_in_simple_case_statement11146_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_end_key_in_simple_case_statement11146( FOLLOW_end_key_in_simple_case_statement11146_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_simple_case_statement11151_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_simple_case_statement11151( FOLLOW_case_key_in_simple_case_statement11151_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_simple_case_statement11153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_simple_case_statement11153( FOLLOW_label_name_in_simple_case_statement11153_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_simple_case_when_part11210_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_simple_case_when_part11210( FOLLOW_when_key_in_simple_case_when_part11210_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_simple_case_when_part11215_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_simple_case_when_part11215( FOLLOW_expression_wrapper_in_simple_case_when_part11215_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_simple_case_when_part11217_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004008000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x241103080616C209), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_simple_case_when_part11217( FOLLOW_then_key_in_simple_case_when_part11217_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seq_of_statements_in_simple_case_when_part11223_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seq_of_statements_in_simple_case_when_part11223( FOLLOW_seq_of_statements_in_simple_case_when_part11223_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_simple_case_when_part11229_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_simple_case_when_part11229( FOLLOW_expression_wrapper_in_simple_case_when_part11229_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_searched_case_statement11252_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_searched_case_statement11252( FOLLOW_label_name_in_searched_case_statement11252_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_searched_case_statement11258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_searched_case_statement11258( FOLLOW_case_key_in_searched_case_statement11258_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_searched_case_when_part_in_searched_case_statement11268_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000C00000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_searched_case_when_part_in_searched_case_statement11268( FOLLOW_searched_case_when_part_in_searched_case_statement11268_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_else_part_in_searched_case_statement11279_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000800000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_else_part_in_searched_case_statement11279( FOLLOW_case_else_part_in_searched_case_statement11279_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_end_key_in_searched_case_statement11290_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_end_key_in_searched_case_statement11290( FOLLOW_end_key_in_searched_case_statement11290_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_searched_case_statement11295_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_searched_case_statement11295( FOLLOW_case_key_in_searched_case_statement11295_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_searched_case_statement11297_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_searched_case_statement11297( FOLLOW_label_name_in_searched_case_statement11297_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_searched_case_when_part11348_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_searched_case_when_part11348( FOLLOW_when_key_in_searched_case_when_part11348_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_wrapper_in_searched_case_when_part11351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_wrapper_in_searched_case_when_part11351( FOLLOW_condition_wrapper_in_searched_case_when_part11351_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_searched_case_when_part11353_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004008000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x241103080616C209), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_searched_case_when_part11353( FOLLOW_then_key_in_searched_case_when_part11353_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seq_of_statements_in_searched_case_when_part11359_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seq_of_statements_in_searched_case_when_part11359( FOLLOW_seq_of_statements_in_searched_case_when_part11359_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_searched_case_when_part11363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_searched_case_when_part11363( FOLLOW_expression_wrapper_in_searched_case_when_part11363_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_else_key_in_case_else_part11384_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004008000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x241103080616C209), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_else_key_in_case_else_part11384( FOLLOW_else_key_in_case_else_part11384_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seq_of_statements_in_case_else_part11390_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seq_of_statements_in_case_else_part11390( FOLLOW_seq_of_statements_in_case_else_part11390_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_case_else_part11394_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_case_else_part11394( FOLLOW_expression_wrapper_in_case_else_part11394_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_element_in_atom11441_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_element_in_atom11441( FOLLOW_table_element_in_atom11441_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_outer_join_sign_in_atom11443_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_outer_join_sign_in_atom11443( FOLLOW_outer_join_sign_in_atom11443_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_bind_variable_in_atom11454_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_bind_variable_in_atom11454( FOLLOW_bind_variable_in_atom11454_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_atom11465_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_atom11465( FOLLOW_constant_in_atom11465_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_in_atom11476_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_in_atom11476( FOLLOW_general_element_in_atom11476_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_atom11487_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x041103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_atom11487( FOLLOW_LEFT_PAREN_in_atom11487_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_atom11524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_atom11524( FOLLOW_subquery_in_atom11524_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_atom11526_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_atom11526( FOLLOW_RIGHT_PAREN_in_atom11526_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_operation_part_in_atom11528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_operation_part_in_atom11528( FOLLOW_subquery_operation_part_in_atom11528_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_or_vector_in_atom11549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_or_vector_in_atom11549( FOLLOW_expression_or_vector_in_atom11549_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_atom11551_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_atom11551( FOLLOW_RIGHT_PAREN_in_atom11551_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_or_vector11652_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_expression_or_vector11652( FOLLOW_expression_in_expression_or_vector11652_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_vector_expr_in_expression_or_vector11655_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_vector_expr_in_expression_or_vector11655( FOLLOW_vector_expr_in_expression_or_vector11655_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_vector_expr11715_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_vector_expr11715( FOLLOW_COMMA_in_vector_expr11715_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_vector_expr11717_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_vector_expr11717( FOLLOW_expression_in_vector_expr11717_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_vector_expr11720_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_vector_expr11720( FOLLOW_COMMA_in_vector_expr11720_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_vector_expr11722_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_vector_expr11722( FOLLOW_expression_in_vector_expr11722_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_some_key_in_quantified_expression11771_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_some_key_in_quantified_expression11771( FOLLOW_some_key_in_quantified_expression11771_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exists_key_in_quantified_expression11775_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exists_key_in_quantified_expression11775( FOLLOW_exists_key_in_quantified_expression11775_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_quantified_expression11779_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_quantified_expression11779( FOLLOW_all_key_in_quantified_expression11779_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_quantified_expression11783_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_quantified_expression11783( FOLLOW_any_key_in_quantified_expression11783_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_quantified_expression11810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_quantified_expression11810( FOLLOW_LEFT_PAREN_in_quantified_expression11810_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_quantified_expression11812_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_quantified_expression11812( FOLLOW_subquery_in_quantified_expression11812_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_quantified_expression11814_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_quantified_expression11814( FOLLOW_RIGHT_PAREN_in_quantified_expression11814_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_quantified_expression11831_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_quantified_expression11831( FOLLOW_LEFT_PAREN_in_quantified_expression11831_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_quantified_expression11833_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_quantified_expression11833( FOLLOW_expression_wrapper_in_quantified_expression11833_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_quantified_expression11835_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_quantified_expression11835( FOLLOW_RIGHT_PAREN_in_quantified_expression11835_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_stantard_function_enabling_over_in_standard_function11971_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_stantard_function_enabling_over_in_standard_function11971( FOLLOW_stantard_function_enabling_over_in_standard_function11971_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_function_argument_analytic_in_standard_function11974_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_function_argument_analytic_in_standard_function11974( FOLLOW_function_argument_analytic_in_standard_function11974_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_clause_in_standard_function11976_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_clause_in_standard_function11976( FOLLOW_over_clause_in_standard_function11976_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_stantard_function_enabling_using_in_standard_function11988_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_stantard_function_enabling_using_in_standard_function11988( FOLLOW_stantard_function_enabling_using_in_standard_function11988_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_function_argument_modeling_in_standard_function11991_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_function_argument_modeling_in_standard_function11991( FOLLOW_function_argument_modeling_in_standard_function11991_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_clause_in_standard_function11993_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_clause_in_standard_function11993( FOLLOW_using_clause_in_standard_function11993_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_count_key_in_standard_function12005_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_count_key_in_standard_function12005( FOLLOW_count_key_in_standard_function12005_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12020_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12020( FOLLOW_LEFT_PAREN_in_standard_function12020_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_standard_function12040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_standard_function12040( FOLLOW_ASTERISK_in_standard_function12040_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_standard_function12045_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_standard_function12045( FOLLOW_distinct_key_in_standard_function12045_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_standard_function12047_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_standard_function12047( FOLLOW_unique_key_in_standard_function12047_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_standard_function12049_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_standard_function12049( FOLLOW_all_key_in_standard_function12049_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12053_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12053( FOLLOW_concatenation_wrapper_in_standard_function12053_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12069_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12069( FOLLOW_RIGHT_PAREN_in_standard_function12069_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_clause_in_standard_function12071_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_clause_in_standard_function12071( FOLLOW_over_clause_in_standard_function12071_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cast_key_in_standard_function12084_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cast_key_in_standard_function12084( FOLLOW_cast_key_in_standard_function12084_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlcast_key_in_standard_function12087_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlcast_key_in_standard_function12087( FOLLOW_xmlcast_key_in_standard_function12087_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12104_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000004C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12104( FOLLOW_LEFT_PAREN_in_standard_function12104_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_key_in_standard_function12136_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_key_in_standard_function12136( FOLLOW_multiset_key_in_standard_function12136_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12139_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12139( FOLLOW_LEFT_PAREN_in_standard_function12139_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_standard_function12141_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_standard_function12141( FOLLOW_subquery_in_standard_function12141_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_standard_function12143_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_standard_function12143( FOLLOW_order_by_clause_in_standard_function12143_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12146_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12146( FOLLOW_RIGHT_PAREN_in_standard_function12146_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_standard_function12164_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_standard_function12164( FOLLOW_as_key_in_standard_function12164_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_standard_function12167_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_standard_function12167( FOLLOW_type_spec_in_standard_function12167_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12185_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12185( FOLLOW_concatenation_wrapper_in_standard_function12185_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_standard_function12187_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_standard_function12187( FOLLOW_as_key_in_standard_function12187_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_standard_function12190_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_standard_function12190( FOLLOW_type_spec_in_standard_function12190_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12218_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12218( FOLLOW_RIGHT_PAREN_in_standard_function12218_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_chr_key_in_standard_function12229_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_chr_key_in_standard_function12229( FOLLOW_chr_key_in_standard_function12229_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12244_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12244( FOLLOW_LEFT_PAREN_in_standard_function12244_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12263_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12263( FOLLOW_concatenation_wrapper_in_standard_function12263_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_standard_function12265_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_standard_function12265( FOLLOW_using_key_in_standard_function12265_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nchar_cs_key_in_standard_function12268_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nchar_cs_key_in_standard_function12268( FOLLOW_nchar_cs_key_in_standard_function12268_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12283_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12283( FOLLOW_RIGHT_PAREN_in_standard_function12283_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_collect_key_in_standard_function12294_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_collect_key_in_standard_function12294( FOLLOW_collect_key_in_standard_function12294_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12309_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12309( FOLLOW_LEFT_PAREN_in_standard_function12309_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_standard_function12329_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_standard_function12329( FOLLOW_distinct_key_in_standard_function12329_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_standard_function12331_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_standard_function12331( FOLLOW_unique_key_in_standard_function12331_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12335_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12335( FOLLOW_concatenation_wrapper_in_standard_function12335_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_collect_order_by_part_in_standard_function12337_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_collect_order_by_part_in_standard_function12337( FOLLOW_collect_order_by_part_in_standard_function12337_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12352_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12352( FOLLOW_RIGHT_PAREN_in_standard_function12352_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_stantard_function_enabling_within_or_over_in_standard_function12363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_stantard_function_enabling_within_or_over_in_standard_function12363( FOLLOW_stantard_function_enabling_within_or_over_in_standard_function12363_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_function_argument_in_standard_function12379_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_function_argument_in_standard_function12379( FOLLOW_function_argument_in_standard_function12379_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_within_or_over_part_in_standard_function12381_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_within_or_over_part_in_standard_function12381( FOLLOW_within_or_over_part_in_standard_function12381_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_decompose_key_in_standard_function12393_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_decompose_key_in_standard_function12393( FOLLOW_decompose_key_in_standard_function12393_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12408_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12408( FOLLOW_LEFT_PAREN_in_standard_function12408_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12427_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12427( FOLLOW_concatenation_wrapper_in_standard_function12427_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_canonical_key_in_standard_function12430_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_canonical_key_in_standard_function12430( FOLLOW_canonical_key_in_standard_function12430_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_compatibility_key_in_standard_function12432_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_compatibility_key_in_standard_function12432( FOLLOW_compatibility_key_in_standard_function12432_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12449_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12449( FOLLOW_RIGHT_PAREN_in_standard_function12449_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_extract_key_in_standard_function12460_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_extract_key_in_standard_function12460( FOLLOW_extract_key_in_standard_function12460_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12475( FOLLOW_LEFT_PAREN_in_standard_function12475_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_standard_function12493_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_standard_function12493( FOLLOW_REGULAR_ID_in_standard_function12493_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_standard_function12495_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_standard_function12495( FOLLOW_from_key_in_standard_function12495_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12498_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12498( FOLLOW_concatenation_wrapper_in_standard_function12498_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12513( FOLLOW_RIGHT_PAREN_in_standard_function12513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_value_key_in_standard_function12525_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_value_key_in_standard_function12525( FOLLOW_first_value_key_in_standard_function12525_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_last_value_key_in_standard_function12528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_last_value_key_in_standard_function12528( FOLLOW_last_value_key_in_standard_function12528_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_function_argument_analytic_in_standard_function12532_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_function_argument_analytic_in_standard_function12532( FOLLOW_function_argument_analytic_in_standard_function12532_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_respect_or_ignore_nulls_in_standard_function12547_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_respect_or_ignore_nulls_in_standard_function12547( FOLLOW_respect_or_ignore_nulls_in_standard_function12547_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_clause_in_standard_function12550_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_clause_in_standard_function12550( FOLLOW_over_clause_in_standard_function12550_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_stantard_function_pedictions_in_standard_function12561_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_stantard_function_pedictions_in_standard_function12561( FOLLOW_stantard_function_pedictions_in_standard_function12561_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12576_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12576( FOLLOW_LEFT_PAREN_in_standard_function12576_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12594_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000002000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12594( FOLLOW_expression_wrapper_in_standard_function12594_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function12597_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function12597( FOLLOW_COMMA_in_standard_function12597_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12599_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000002000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12599( FOLLOW_expression_wrapper_in_standard_function12599_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cost_matrix_clause_in_standard_function12603_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cost_matrix_clause_in_standard_function12603( FOLLOW_cost_matrix_clause_in_standard_function12603_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_clause_in_standard_function12606_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_clause_in_standard_function12606( FOLLOW_using_clause_in_standard_function12606_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12622_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12622( FOLLOW_RIGHT_PAREN_in_standard_function12622_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_translate_key_in_standard_function12633_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_translate_key_in_standard_function12633( FOLLOW_translate_key_in_standard_function12633_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12648_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12648( FOLLOW_LEFT_PAREN_in_standard_function12648_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12667_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12667( FOLLOW_expression_wrapper_in_standard_function12667_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_standard_function12670_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_standard_function12670( FOLLOW_using_key_in_standard_function12670_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_char_cs_key_in_standard_function12674_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_char_cs_key_in_standard_function12674( FOLLOW_char_cs_key_in_standard_function12674_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nchar_cs_key_in_standard_function12676_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nchar_cs_key_in_standard_function12676( FOLLOW_nchar_cs_key_in_standard_function12676_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function12703_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function12703( FOLLOW_COMMA_in_standard_function12703_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12705_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12705( FOLLOW_expression_wrapper_in_standard_function12705_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12722_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12722( FOLLOW_RIGHT_PAREN_in_standard_function12722_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_treat_key_in_standard_function12733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_treat_key_in_standard_function12733( FOLLOW_treat_key_in_standard_function12733_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12748_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12748( FOLLOW_LEFT_PAREN_in_standard_function12748_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12766( FOLLOW_expression_wrapper_in_standard_function12766_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_standard_function12768_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_standard_function12768( FOLLOW_as_key_in_standard_function12768_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ref_key_in_standard_function12771_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ref_key_in_standard_function12771( FOLLOW_ref_key_in_standard_function12771_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_standard_function12774_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_standard_function12774( FOLLOW_type_spec_in_standard_function12774_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12789_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12789( FOLLOW_RIGHT_PAREN_in_standard_function12789_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_trim_key_in_standard_function12800_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_trim_key_in_standard_function12800( FOLLOW_trim_key_in_standard_function12800_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12815_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020026128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12815( FOLLOW_LEFT_PAREN_in_standard_function12815_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_leading_key_in_standard_function12835_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_leading_key_in_standard_function12835( FOLLOW_leading_key_in_standard_function12835_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_trailing_key_in_standard_function12837_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_trailing_key_in_standard_function12837( FOLLOW_trailing_key_in_standard_function12837_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_both_key_in_standard_function12839_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_both_key_in_standard_function12839( FOLLOW_both_key_in_standard_function12839_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_quoted_string_in_standard_function12843_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_quoted_string_in_standard_function12843( FOLLOW_quoted_string_in_standard_function12843_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_standard_function12846_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_standard_function12846( FOLLOW_from_key_in_standard_function12846_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12866_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12866( FOLLOW_concatenation_wrapper_in_standard_function12866_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12880( FOLLOW_RIGHT_PAREN_in_standard_function12880_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlagg_key_in_standard_function12891_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlagg_key_in_standard_function12891( FOLLOW_xmlagg_key_in_standard_function12891_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12906_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12906( FOLLOW_LEFT_PAREN_in_standard_function12906_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12925_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12925( FOLLOW_expression_wrapper_in_standard_function12925_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_standard_function12927_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_standard_function12927( FOLLOW_order_by_clause_in_standard_function12927_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12943_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12943( FOLLOW_RIGHT_PAREN_in_standard_function12943_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function12958_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function12958( FOLLOW_PERIOD_in_standard_function12958_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function12960_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function12960( FOLLOW_general_element_part_in_standard_function12960_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlcolattval_key_in_standard_function12974_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlcolattval_key_in_standard_function12974( FOLLOW_xmlcolattval_key_in_standard_function12974_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlforest_key_in_standard_function12977_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlforest_key_in_standard_function12977( FOLLOW_xmlforest_key_in_standard_function12977_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12994_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12994( FOLLOW_LEFT_PAREN_in_standard_function12994_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_multiuse_expression_element_in_standard_function13012_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_multiuse_expression_element_in_standard_function13012( FOLLOW_xml_multiuse_expression_element_in_standard_function13012_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13015_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13015( FOLLOW_COMMA_in_standard_function13015_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_multiuse_expression_element_in_standard_function13018_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_multiuse_expression_element_in_standard_function13018( FOLLOW_xml_multiuse_expression_element_in_standard_function13018_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13034_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13034( FOLLOW_RIGHT_PAREN_in_standard_function13034_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13049( FOLLOW_PERIOD_in_standard_function13049_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13051_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13051( FOLLOW_general_element_part_in_standard_function13051_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlelement_key_in_standard_function13064_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlelement_key_in_standard_function13064( FOLLOW_xmlelement_key_in_standard_function13064_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13079_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13079( FOLLOW_LEFT_PAREN_in_standard_function13079_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_entityescaping_key_in_standard_function13098_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_entityescaping_key_in_standard_function13098( FOLLOW_entityescaping_key_in_standard_function13098_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_noentityescaping_key_in_standard_function13100_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_noentityescaping_key_in_standard_function13100( FOLLOW_noentityescaping_key_in_standard_function13100_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_name_key_in_standard_function13121_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_name_key_in_standard_function13121( FOLLOW_name_key_in_standard_function13121_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_evalname_key_in_standard_function13123_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_evalname_key_in_standard_function13123( FOLLOW_evalname_key_in_standard_function13123_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function13127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function13127( FOLLOW_expression_wrapper_in_standard_function13127_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13148_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13148( FOLLOW_COMMA_in_standard_function13148_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_attributes_clause_in_standard_function13151_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_attributes_clause_in_standard_function13151( FOLLOW_xml_attributes_clause_in_standard_function13151_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13172_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13172( FOLLOW_COMMA_in_standard_function13172_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function13175_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function13175( FOLLOW_expression_wrapper_in_standard_function13175_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_standard_function13177_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_standard_function13177( FOLLOW_column_alias_in_standard_function13177_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13194_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13194( FOLLOW_RIGHT_PAREN_in_standard_function13194_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13209_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13209( FOLLOW_PERIOD_in_standard_function13209_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13211_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13211( FOLLOW_general_element_part_in_standard_function13211_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlexists_key_in_standard_function13224_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlexists_key_in_standard_function13224( FOLLOW_xmlexists_key_in_standard_function13224_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13239_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13239( FOLLOW_LEFT_PAREN_in_standard_function13239_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function13257_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function13257( FOLLOW_expression_wrapper_in_standard_function13257_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_passing_clause_in_standard_function13275_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_passing_clause_in_standard_function13275( FOLLOW_xml_passing_clause_in_standard_function13275_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13290_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13290( FOLLOW_RIGHT_PAREN_in_standard_function13290_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlparse_key_in_standard_function13301_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlparse_key_in_standard_function13301( FOLLOW_xmlparse_key_in_standard_function13301_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13316_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13316( FOLLOW_LEFT_PAREN_in_standard_function13316_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_document_key_in_standard_function13336_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_document_key_in_standard_function13336( FOLLOW_document_key_in_standard_function13336_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_content_key_in_standard_function13338_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_content_key_in_standard_function13338( FOLLOW_content_key_in_standard_function13338_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13341_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13341( FOLLOW_concatenation_wrapper_in_standard_function13341_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_wellformed_key_in_standard_function13343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_wellformed_key_in_standard_function13343( FOLLOW_wellformed_key_in_standard_function13343_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13358_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13358( FOLLOW_RIGHT_PAREN_in_standard_function13358_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13373( FOLLOW_PERIOD_in_standard_function13373_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13375_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13375( FOLLOW_general_element_part_in_standard_function13375_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlpi_key_in_standard_function13388_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlpi_key_in_standard_function13388( FOLLOW_xmlpi_key_in_standard_function13388_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13403_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13403( FOLLOW_LEFT_PAREN_in_standard_function13403_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_name_key_in_standard_function13427_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_name_key_in_standard_function13427( FOLLOW_name_key_in_standard_function13427_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_id_in_standard_function13429_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_id_in_standard_function13429( FOLLOW_id_in_standard_function13429_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_evalname_key_in_standard_function13453_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_evalname_key_in_standard_function13453( FOLLOW_evalname_key_in_standard_function13453_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13455_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13455( FOLLOW_concatenation_wrapper_in_standard_function13455_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13492_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13492( FOLLOW_COMMA_in_standard_function13492_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13495_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13495( FOLLOW_concatenation_wrapper_in_standard_function13495_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13511_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13511( FOLLOW_RIGHT_PAREN_in_standard_function13511_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13526_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13526( FOLLOW_PERIOD_in_standard_function13526_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13528( FOLLOW_general_element_part_in_standard_function13528_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlquery_key_in_standard_function13541_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlquery_key_in_standard_function13541( FOLLOW_xmlquery_key_in_standard_function13541_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13556_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13556( FOLLOW_LEFT_PAREN_in_standard_function13556_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13575_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13575( FOLLOW_concatenation_wrapper_in_standard_function13575_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_passing_clause_in_standard_function13577_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_passing_clause_in_standard_function13577( FOLLOW_xml_passing_clause_in_standard_function13577_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_returning_key_in_standard_function13596_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_returning_key_in_standard_function13596( FOLLOW_returning_key_in_standard_function13596_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_content_key_in_standard_function13599_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000020000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_content_key_in_standard_function13599( FOLLOW_content_key_in_standard_function13599_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_null_key_in_standard_function13603_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_null_key_in_standard_function13603( FOLLOW_null_key_in_standard_function13603_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_on_key_in_standard_function13605_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_on_key_in_standard_function13605( FOLLOW_on_key_in_standard_function13605_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_empty_key_in_standard_function13608_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_empty_key_in_standard_function13608( FOLLOW_empty_key_in_standard_function13608_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13625_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13625( FOLLOW_RIGHT_PAREN_in_standard_function13625_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13640_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13640( FOLLOW_PERIOD_in_standard_function13640_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13642_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13642( FOLLOW_general_element_part_in_standard_function13642_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlroot_key_in_standard_function13655_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlroot_key_in_standard_function13655( FOLLOW_xmlroot_key_in_standard_function13655_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13670_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13670( FOLLOW_LEFT_PAREN_in_standard_function13670_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13688_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13688( FOLLOW_concatenation_wrapper_in_standard_function13688_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlroot_param_version_part_in_standard_function13710_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlroot_param_version_part_in_standard_function13710( FOLLOW_xmlroot_param_version_part_in_standard_function13710_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13733( FOLLOW_COMMA_in_standard_function13733_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlroot_param_standalone_part_in_standard_function13736_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlroot_param_standalone_part_in_standard_function13736( FOLLOW_xmlroot_param_standalone_part_in_standard_function13736_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13752_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13752( FOLLOW_RIGHT_PAREN_in_standard_function13752_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13767_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13767( FOLLOW_PERIOD_in_standard_function13767_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13769_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13769( FOLLOW_general_element_part_in_standard_function13769_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlserialize_key_in_standard_function13782_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlserialize_key_in_standard_function13782( FOLLOW_xmlserialize_key_in_standard_function13782_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13797_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13797( FOLLOW_LEFT_PAREN_in_standard_function13797_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_document_key_in_standard_function13816_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_document_key_in_standard_function13816( FOLLOW_document_key_in_standard_function13816_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_content_key_in_standard_function13818_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_content_key_in_standard_function13818( FOLLOW_content_key_in_standard_function13818_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13837_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13837( FOLLOW_concatenation_wrapper_in_standard_function13837_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_standard_function13840_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_standard_function13840( FOLLOW_as_key_in_standard_function13840_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_standard_function13843_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_standard_function13843( FOLLOW_type_spec_in_standard_function13843_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlserialize_param_enconding_part_in_standard_function13863_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlserialize_param_enconding_part_in_standard_function13863( FOLLOW_xmlserialize_param_enconding_part_in_standard_function13863_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlserialize_param_version_part_in_standard_function13882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlserialize_param_version_part_in_standard_function13882( FOLLOW_xmlserialize_param_version_part_in_standard_function13882_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlserialize_param_ident_part_in_standard_function13901_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlserialize_param_ident_part_in_standard_function13901( FOLLOW_xmlserialize_param_ident_part_in_standard_function13901_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_hide_key_in_standard_function13922_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_hide_key_in_standard_function13922( FOLLOW_hide_key_in_standard_function13922_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_show_key_in_standard_function13924_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_show_key_in_standard_function13924( FOLLOW_show_key_in_standard_function13924_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_defaults_key_in_standard_function13927_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_defaults_key_in_standard_function13927( FOLLOW_defaults_key_in_standard_function13927_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13943_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13943( FOLLOW_RIGHT_PAREN_in_standard_function13943_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13958_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13958( FOLLOW_PERIOD_in_standard_function13958_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13960_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13960( FOLLOW_general_element_part_in_standard_function13960_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmltable_key_in_standard_function13973_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmltable_key_in_standard_function13973( FOLLOW_xmltable_key_in_standard_function13973_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13988_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13988( FOLLOW_LEFT_PAREN_in_standard_function13988_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_namespaces_clause_in_standard_function14006_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_namespaces_clause_in_standard_function14006( FOLLOW_xml_namespaces_clause_in_standard_function14006_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function14025_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function14025( FOLLOW_concatenation_wrapper_in_standard_function14025_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_passing_clause_in_standard_function14043_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_passing_clause_in_standard_function14043( FOLLOW_xml_passing_clause_in_standard_function14043_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_columns_key_in_standard_function14063_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_columns_key_in_standard_function14063( FOLLOW_columns_key_in_standard_function14063_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_table_column_in_standard_function14066_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_table_column_in_standard_function14066( FOLLOW_xml_table_column_in_standard_function14066_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function14069_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function14069( FOLLOW_COMMA_in_standard_function14069_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_table_column_in_standard_function14072_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_table_column_in_standard_function14072( FOLLOW_xml_table_column_in_standard_function14072_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function14089_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function14089( FOLLOW_RIGHT_PAREN_in_standard_function14089_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function14104_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function14104( FOLLOW_PERIOD_in_standard_function14104_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function14106_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function14106( FOLLOW_general_element_part_in_standard_function14106_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_stantard_function_enabling_over14131_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_stantard_function_enabling_over14131( FOLLOW_REGULAR_ID_in_stantard_function_enabling_over14131_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_stantard_function_enabling_using14159_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_stantard_function_enabling_using14159( FOLLOW_REGULAR_ID_in_stantard_function_enabling_using14159_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over14187_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over14187( FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over14187_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_stantard_function_pedictions14215_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_stantard_function_pedictions14215( FOLLOW_REGULAR_ID_in_stantard_function_pedictions14215_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_key_in_over_clause14240_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_key_in_over_clause14240( FOLLOW_over_key_in_over_clause14240_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_over_clause14251_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_over_clause14251( FOLLOW_LEFT_PAREN_in_over_clause14251_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_partition_clause_in_over_clause14265_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_partition_clause_in_over_clause14265( FOLLOW_query_partition_clause_in_over_clause14265_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_over_clause14281_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_over_clause14281( FOLLOW_order_by_clause_in_over_clause14281_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_clause_in_over_clause14283_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_clause_in_over_clause14283( FOLLOW_windowing_clause_in_over_clause14283_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_over_clause14296_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_over_clause14296( FOLLOW_RIGHT_PAREN_in_over_clause14296_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_type_in_windowing_clause14324_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040102000612A289), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_type_in_windowing_clause14324( FOLLOW_windowing_type_in_windowing_clause14324_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_between_key_in_windowing_clause14335_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040102000612A209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_between_key_in_windowing_clause14335( FOLLOW_between_key_in_windowing_clause14335_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_elements_in_windowing_clause14337_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_elements_in_windowing_clause14337( FOLLOW_windowing_elements_in_windowing_clause14337_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_and_key_in_windowing_clause14339_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040102000612A209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_and_key_in_windowing_clause14339( FOLLOW_and_key_in_windowing_clause14339_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_elements_in_windowing_clause14341_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_elements_in_windowing_clause14341( FOLLOW_windowing_elements_in_windowing_clause14341_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_elements_in_windowing_clause14354_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_elements_in_windowing_clause14354( FOLLOW_windowing_elements_in_windowing_clause14354_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rows_key_in_windowing_type14413_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rows_key_in_windowing_type14413( FOLLOW_rows_key_in_windowing_type14413_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_range_key_in_windowing_type14424_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_range_key_in_windowing_type14424( FOLLOW_range_key_in_windowing_type14424_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unbounded_key_in_windowing_elements14444_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unbounded_key_in_windowing_elements14444( FOLLOW_unbounded_key_in_windowing_elements14444_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_preceding_key_in_windowing_elements14447_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_preceding_key_in_windowing_elements14447( FOLLOW_preceding_key_in_windowing_elements14447_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_current_key_in_windowing_elements14458_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_current_key_in_windowing_elements14458( FOLLOW_current_key_in_windowing_elements14458_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_row_key_in_windowing_elements14461_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_row_key_in_windowing_elements14461( FOLLOW_row_key_in_windowing_elements14461_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_windowing_elements14472_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_windowing_elements14472( FOLLOW_concatenation_wrapper_in_windowing_elements14472_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_preceding_key_in_windowing_elements14475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_preceding_key_in_windowing_elements14475( FOLLOW_preceding_key_in_windowing_elements14475_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_following_key_in_windowing_elements14478_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_following_key_in_windowing_elements14478( FOLLOW_following_key_in_windowing_elements14478_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_using_clause14500_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103040612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_using_clause14500( FOLLOW_using_key_in_using_clause14500_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_using_clause14512_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_using_clause14512( FOLLOW_ASTERISK_in_using_clause14512_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_element_in_using_clause14523_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_element_in_using_clause14523( FOLLOW_using_element_in_using_clause14523_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_using_clause14526_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103040612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_using_clause14526( FOLLOW_COMMA_in_using_clause14526_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_element_in_using_clause14529_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_element_in_using_clause14529( FOLLOW_using_element_in_using_clause14529_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_using_element14558_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_using_element14558( FOLLOW_in_key_in_using_element14558_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_out_key_in_using_element14560_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_out_key_in_using_element14560( FOLLOW_out_key_in_using_element14560_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_out_key_in_using_element14563_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_out_key_in_using_element14563( FOLLOW_out_key_in_using_element14563_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_list_elements_in_using_element14567_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_list_elements_in_using_element14567( FOLLOW_select_list_elements_in_using_element14567_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_using_element14569_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_using_element14569( FOLLOW_column_alias_in_using_element14569_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_key_in_collect_order_by_part14615_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_key_in_collect_order_by_part14615( FOLLOW_order_key_in_collect_order_by_part14615_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_collect_order_by_part14618_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_collect_order_by_part14618( FOLLOW_by_key_in_collect_order_by_part14618_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_collect_order_by_part14621_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_collect_order_by_part14621( FOLLOW_concatenation_wrapper_in_collect_order_by_part14621_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_within_key_in_within_or_over_part14641_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000100000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_within_key_in_within_or_over_part14641( FOLLOW_within_key_in_within_or_over_part14641_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_key_in_within_or_over_part14644_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_key_in_within_or_over_part14644( FOLLOW_group_key_in_within_or_over_part14644_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_within_or_over_part14647_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_within_or_over_part14647( FOLLOW_LEFT_PAREN_in_within_or_over_part14647_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_within_or_over_part14649_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_within_or_over_part14649( FOLLOW_order_by_clause_in_within_or_over_part14649_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_within_or_over_part14651_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_within_or_over_part14651( FOLLOW_RIGHT_PAREN_in_within_or_over_part14651_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_clause_in_within_or_over_part14662_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_clause_in_within_or_over_part14662( FOLLOW_over_clause_in_within_or_over_part14662_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cost_key_in_cost_matrix_clause14682_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cost_key_in_cost_matrix_clause14682( FOLLOW_cost_key_in_cost_matrix_clause14682_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_key_in_cost_matrix_clause14694_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_key_in_cost_matrix_clause14694( FOLLOW_model_key_in_cost_matrix_clause14694_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_auto_key_in_cost_matrix_clause14696_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_auto_key_in_cost_matrix_clause14696( FOLLOW_auto_key_in_cost_matrix_clause14696_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_cost_matrix_clause14708_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_cost_matrix_clause14708( FOLLOW_LEFT_PAREN_in_cost_matrix_clause14708_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cost_class_name_in_cost_matrix_clause14710_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cost_class_name_in_cost_matrix_clause14710( FOLLOW_cost_class_name_in_cost_matrix_clause14710_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_cost_matrix_clause14713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_cost_matrix_clause14713( FOLLOW_COMMA_in_cost_matrix_clause14713_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cost_class_name_in_cost_matrix_clause14716_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cost_class_name_in_cost_matrix_clause14716( FOLLOW_cost_class_name_in_cost_matrix_clause14716_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14720_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14720( FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14720_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_key_in_cost_matrix_clause14722_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_key_in_cost_matrix_clause14722( FOLLOW_values_key_in_cost_matrix_clause14722_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_cost_matrix_clause14738_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_cost_matrix_clause14738( FOLLOW_expression_list_in_cost_matrix_clause14738_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_passing_key_in_xml_passing_clause14764_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C309), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_passing_key_in_xml_passing_clause14764( FOLLOW_passing_key_in_xml_passing_clause14764_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_xml_passing_clause14768_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_xml_passing_clause14768( FOLLOW_by_key_in_xml_passing_clause14768_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_value_key_in_xml_passing_clause14771_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_value_key_in_xml_passing_clause14771( FOLLOW_value_key_in_xml_passing_clause14771_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_xml_passing_clause14787_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_xml_passing_clause14787( FOLLOW_expression_wrapper_in_xml_passing_clause14787_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_xml_passing_clause14789_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_xml_passing_clause14789( FOLLOW_column_alias_in_xml_passing_clause14789_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_xml_passing_clause14793_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_xml_passing_clause14793( FOLLOW_COMMA_in_xml_passing_clause14793_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_xml_passing_clause14796_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_xml_passing_clause14796( FOLLOW_expression_wrapper_in_xml_passing_clause14796_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_xml_passing_clause14798_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_xml_passing_clause14798( FOLLOW_column_alias_in_xml_passing_clause14798_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlattributes_key_in_xml_attributes_clause14820_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlattributes_key_in_xml_attributes_clause14820( FOLLOW_xmlattributes_key_in_xml_attributes_clause14820_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_xml_attributes_clause14831_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_xml_attributes_clause14831( FOLLOW_LEFT_PAREN_in_xml_attributes_clause14831_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_entityescaping_key_in_xml_attributes_clause14846_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_entityescaping_key_in_xml_attributes_clause14846( FOLLOW_entityescaping_key_in_xml_attributes_clause14846_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_noentityescaping_key_in_xml_attributes_clause14848_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_noentityescaping_key_in_xml_attributes_clause14848( FOLLOW_noentityescaping_key_in_xml_attributes_clause14848_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_schemacheck_key_in_xml_attributes_clause14865_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_schemacheck_key_in_xml_attributes_clause14865( FOLLOW_schemacheck_key_in_xml_attributes_clause14865_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_noschemacheck_key_in_xml_attributes_clause14867_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_noschemacheck_key_in_xml_attributes_clause14867( FOLLOW_noschemacheck_key_in_xml_attributes_clause14867_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14883_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14883( FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14883_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_xml_attributes_clause14886_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_xml_attributes_clause14886( FOLLOW_COMMA_in_xml_attributes_clause14886_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14889_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14889( FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14889_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14901_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14901( FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14901_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14921_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14921( FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14921_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14932_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000012), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14932( FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14932_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14947_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14947( FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14947_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_xml_namespaces_clause14949_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_xml_namespaces_clause14949( FOLLOW_column_alias_in_xml_namespaces_clause14949_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_xml_namespaces_clause14970_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_xml_namespaces_clause14970( FOLLOW_COMMA_in_xml_namespaces_clause14970_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14973_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14973( FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14973_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_xml_namespaces_clause14975_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_xml_namespaces_clause14975( FOLLOW_column_alias_in_xml_namespaces_clause14975_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_general_default_part_in_xml_namespaces_clause14997_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_general_default_part_in_xml_namespaces_clause14997( FOLLOW_xml_general_default_part_in_xml_namespaces_clause14997_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause15009_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause15009( FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause15009_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_column_name_in_xml_table_column15029_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_column_name_in_xml_table_column15029( FOLLOW_xml_column_name_in_xml_table_column15029_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_xml_table_column15040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_xml_table_column15040( FOLLOW_for_key_in_xml_table_column15040_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ordinality_key_in_xml_table_column15042_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ordinality_key_in_xml_table_column15042( FOLLOW_ordinality_key_in_xml_table_column15042_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_xml_table_column15053_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_xml_table_column15053( FOLLOW_type_spec_in_xml_table_column15053_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_path_key_in_xml_table_column15056_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_path_key_in_xml_table_column15056( FOLLOW_path_key_in_xml_table_column15056_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xml_table_column15058_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xml_table_column15058( FOLLOW_concatenation_wrapper_in_xml_table_column15058_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_general_default_part_in_xml_table_column15068_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_general_default_part_in_xml_table_column15068( FOLLOW_xml_general_default_part_in_xml_table_column15068_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_default_key_in_xml_general_default_part15124_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_default_key_in_xml_general_default_part15124( FOLLOW_default_key_in_xml_general_default_part15124_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xml_general_default_part15127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xml_general_default_part15127( FOLLOW_concatenation_wrapper_in_xml_general_default_part15127_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_xml_multiuse_expression_element15155_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_xml_multiuse_expression_element15155( FOLLOW_expression_in_xml_multiuse_expression_element15155_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_xml_multiuse_expression_element15158_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_xml_multiuse_expression_element15158( FOLLOW_as_key_in_xml_multiuse_expression_element15158_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_id_expression_in_xml_multiuse_expression_element15161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_id_expression_in_xml_multiuse_expression_element15161( FOLLOW_id_expression_in_xml_multiuse_expression_element15161_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_evalname_key_in_xml_multiuse_expression_element15166_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_evalname_key_in_xml_multiuse_expression_element15166( FOLLOW_evalname_key_in_xml_multiuse_expression_element15166_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_xml_multiuse_expression_element15168_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_xml_multiuse_expression_element15168( FOLLOW_concatenation_in_xml_multiuse_expression_element15168_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_version_key_in_xmlroot_param_version_part15279_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_version_key_in_xmlroot_param_version_part15279( FOLLOW_version_key_in_xmlroot_param_version_part15279_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_no_key_in_xmlroot_param_version_part15283_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_no_key_in_xmlroot_param_version_part15283( FOLLOW_no_key_in_xmlroot_param_version_part15283_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_value_key_in_xmlroot_param_version_part15285_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_value_key_in_xmlroot_param_version_part15285( FOLLOW_value_key_in_xmlroot_param_version_part15285_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_xmlroot_param_version_part15287_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_xmlroot_param_version_part15287( FOLLOW_expression_wrapper_in_xmlroot_param_version_part15287_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_standalone_key_in_xmlroot_param_standalone_part15308_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_standalone_key_in_xmlroot_param_standalone_part15308( FOLLOW_standalone_key_in_xmlroot_param_standalone_part15308_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_yes_key_in_xmlroot_param_standalone_part15312_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_yes_key_in_xmlroot_param_standalone_part15312( FOLLOW_yes_key_in_xmlroot_param_standalone_part15312_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_no_key_in_xmlroot_param_standalone_part15314_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_no_key_in_xmlroot_param_standalone_part15314( FOLLOW_no_key_in_xmlroot_param_standalone_part15314_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_value_key_in_xmlroot_param_standalone_part15316_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_value_key_in_xmlroot_param_standalone_part15316( FOLLOW_value_key_in_xmlroot_param_standalone_part15316_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_encoding_key_in_xmlserialize_param_enconding_part15338_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_encoding_key_in_xmlserialize_param_enconding_part15338( FOLLOW_encoding_key_in_xmlserialize_param_enconding_part15338_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part15341_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part15341( FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part15341_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_version_key_in_xmlserialize_param_version_part15361_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_version_key_in_xmlserialize_param_version_part15361( FOLLOW_version_key_in_xmlserialize_param_version_part15361_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part15364_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part15364( FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part15364_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_no_key_in_xmlserialize_param_ident_part15384_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_no_key_in_xmlserialize_param_ident_part15384( FOLLOW_no_key_in_xmlserialize_param_ident_part15384_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_indent_key_in_xmlserialize_param_ident_part15386_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_indent_key_in_xmlserialize_param_ident_part15386( FOLLOW_indent_key_in_xmlserialize_param_ident_part15386_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_indent_key_in_xmlserialize_param_ident_part15397_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0020000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_indent_key_in_xmlserialize_param_ident_part15397( FOLLOW_indent_key_in_xmlserialize_param_ident_part15397_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_size_key_in_xmlserialize_param_ident_part15401_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_size_key_in_xmlserialize_param_ident_part15401( FOLLOW_size_key_in_xmlserialize_param_ident_part15401_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part15404_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part15404( FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part15404_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part15407_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part15407( FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part15407_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_key_in_synpred1_OracleDML1009_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_key_in_synpred1_OracleDML1009( FOLLOW_order_key_in_synpred1_OracleDML1009_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_siblings_key_in_synpred1_OracleDML1011_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_siblings_key_in_synpred1_OracleDML1011( FOLLOW_siblings_key_in_synpred1_OracleDML1011_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_synpred1_OracleDML1014_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_synpred1_OracleDML1014( FOLLOW_by_key_in_synpred1_OracleDML1014_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_synpred2_OracleDML1628_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_synpred2_OracleDML1628( FOLLOW_distinct_key_in_synpred2_OracleDML1628_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_synpred2_OracleDML1630_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_synpred2_OracleDML1630( FOLLOW_unique_key_in_synpred2_OracleDML1630_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_synpred2_OracleDML1632_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_synpred2_OracleDML1632( FOLLOW_all_key_in_synpred2_OracleDML1632_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_synpred3_OracleDML1869_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_synpred3_OracleDML1869( FOLLOW_tableview_name_in_synpred3_OracleDML1869_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_synpred3_OracleDML1871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_synpred3_OracleDML1871( FOLLOW_PERIOD_in_synpred3_OracleDML1871_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_synpred3_OracleDML1873_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_synpred3_OracleDML1873( FOLLOW_ASTERISK_in_synpred3_OracleDML1873_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred4_OracleDML2095_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred4_OracleDML2095( FOLLOW_LEFT_PAREN_in_synpred4_OracleDML2095_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred4_OracleDML2098_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred4_OracleDML2098( FOLLOW_select_key_in_synpred4_OracleDML2098_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred4_OracleDML2100_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred4_OracleDML2100( FOLLOW_with_key_in_synpred4_OracleDML2100_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred5_OracleDML2118_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred5_OracleDML2118( FOLLOW_LEFT_PAREN_in_synpred5_OracleDML2118_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_synpred6_OracleDML2135_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_synpred6_OracleDML2135( FOLLOW_only_key_in_synpred6_OracleDML2135_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred6_OracleDML2137_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred6_OracleDML2137( FOLLOW_LEFT_PAREN_in_synpred6_OracleDML2137_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred10_OracleDML2851_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred10_OracleDML2851( FOLLOW_LEFT_PAREN_in_synpred10_OracleDML2851_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred10_OracleDML2854_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred10_OracleDML2854( FOLLOW_select_key_in_synpred10_OracleDML2854_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred10_OracleDML2856_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred10_OracleDML2856( FOLLOW_with_key_in_synpred10_OracleDML2856_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred11_OracleDML2878_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred11_OracleDML2878( FOLLOW_LEFT_PAREN_in_synpred11_OracleDML2878_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred12_OracleDML3366_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred12_OracleDML3366( FOLLOW_select_key_in_synpred12_OracleDML3366_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_synpred13_OracleDML3392_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_synpred13_OracleDML3392( FOLLOW_any_key_in_synpred13_OracleDML3392_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred14_OracleDML3597_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred14_OracleDML3597( FOLLOW_LEFT_PAREN_in_synpred14_OracleDML3597_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred15_OracleDML3970_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred15_OracleDML3970( FOLLOW_LEFT_PAREN_in_synpred15_OracleDML3970_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_key_in_synpred16_OracleDML4201_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_key_in_synpred16_OracleDML4201( FOLLOW_group_key_in_synpred16_OracleDML4201_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_synpred17_OracleDML4227_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_synpred17_OracleDML4227( FOLLOW_COMMA_in_synpred17_OracleDML4227_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_synpred17_OracleDML4229_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_synpred17_OracleDML4229( FOLLOW_group_by_elements_in_synpred17_OracleDML4229_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_having_key_in_synpred18_OracleDML4281_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_having_key_in_synpred18_OracleDML4281( FOLLOW_having_key_in_synpred18_OracleDML4281_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_synpred19_OracleDML4312_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_synpred19_OracleDML4312( FOLLOW_COMMA_in_synpred19_OracleDML4312_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_synpred19_OracleDML4314_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_synpred19_OracleDML4314( FOLLOW_group_by_elements_in_synpred19_OracleDML4314_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rollup_key_in_synpred20_OracleDML4533_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rollup_key_in_synpred20_OracleDML4533( FOLLOW_rollup_key_in_synpred20_OracleDML4533_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cube_key_in_synpred20_OracleDML4535_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cube_key_in_synpred20_OracleDML4535( FOLLOW_cube_key_in_synpred20_OracleDML4535_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred21_OracleDML4551_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred21_OracleDML4551( FOLLOW_LEFT_PAREN_in_synpred21_OracleDML4551_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_synpred22_OracleDML5218_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_synpred22_OracleDML5218( FOLLOW_all_key_in_synpred22_OracleDML5218_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_synpred23_OracleDML6585_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_synpred23_OracleDML6585( FOLLOW_when_key_in_synpred23_OracleDML6585_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_matched_key_in_synpred23_OracleDML6587_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_matched_key_in_synpred23_OracleDML6587( FOLLOW_matched_key_in_synpred23_OracleDML6587_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_synpred24_OracleDML6617_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000010000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_synpred24_OracleDML6617( FOLLOW_when_key_in_synpred24_OracleDML6617_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_synpred24_OracleDML6619_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_synpred24_OracleDML6619( FOLLOW_not_key_in_synpred24_OracleDML6619_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_matched_key_in_synpred24_OracleDML6621_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_matched_key_in_synpred24_OracleDML6621( FOLLOW_matched_key_in_synpred24_OracleDML6621_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred25_OracleDML7523_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred25_OracleDML7523( FOLLOW_LEFT_PAREN_in_synpred25_OracleDML7523_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unlimited_key_in_synpred26_OracleDML7614_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unlimited_key_in_synpred26_OracleDML7614( FOLLOW_unlimited_key_in_synpred26_OracleDML7614_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred27_OracleDML7771_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred27_OracleDML7771( FOLLOW_LEFT_PAREN_in_synpred27_OracleDML7771_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred27_OracleDML7774_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred27_OracleDML7774( FOLLOW_select_key_in_synpred27_OracleDML7774_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred27_OracleDML7778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred27_OracleDML7778( FOLLOW_with_key_in_synpred27_OracleDML7778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cursor_key_in_synpred28_OracleDML8258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cursor_key_in_synpred28_OracleDML8258( FOLLOW_cursor_key_in_synpred28_OracleDML8258_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred28_OracleDML8260_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred28_OracleDML8260( FOLLOW_LEFT_PAREN_in_synpred28_OracleDML8260_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred28_OracleDML8263_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred28_OracleDML8263( FOLLOW_select_key_in_synpred28_OracleDML8263_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred28_OracleDML8265_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred28_OracleDML8265( FOLLOW_with_key_in_synpred28_OracleDML8265_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred29_OracleDML9645_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred29_OracleDML9645( FOLLOW_LEFT_PAREN_in_synpred29_OracleDML9645_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred29_OracleDML9649_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred29_OracleDML9649( FOLLOW_select_key_in_synpred29_OracleDML9649_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred29_OracleDML9651_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred29_OracleDML9651( FOLLOW_with_key_in_synpred29_OracleDML9651_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_interval_expression_in_synpred30_OracleDML10094_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_interval_expression_in_synpred30_OracleDML10094( FOLLOW_interval_expression_in_synpred30_OracleDML10094_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_synpred31_OracleDML10334_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_synpred31_OracleDML10334( FOLLOW_any_key_in_synpred31_OracleDML10334_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_synpred32_OracleDML10349_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_synpred32_OracleDML10349( FOLLOW_any_key_in_synpred32_OracleDML10349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred33_OracleDML10703_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred33_OracleDML10703( FOLLOW_select_key_in_synpred33_OracleDML10703_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred34_OracleDML10727_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred34_OracleDML10727( FOLLOW_LEFT_PAREN_in_synpred34_OracleDML10727_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_new_key_in_synpred39_OracleDML10937_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_new_key_in_synpred39_OracleDML10937( FOLLOW_new_key_in_synpred39_OracleDML10937_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_synpred39_OracleDML10940_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_synpred39_OracleDML10940( FOLLOW_unary_expression_in_synpred39_OracleDML10940_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_synpred41_OracleDML10965_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_synpred41_OracleDML10965( FOLLOW_all_key_in_synpred41_OracleDML10965_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_synpred41_OracleDML10968_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_synpred41_OracleDML10968( FOLLOW_unary_expression_in_synpred41_OracleDML10968_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_statement_in_synpred42_OracleDML10981_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_statement_in_synpred42_OracleDML10981( FOLLOW_case_statement_in_synpred42_OracleDML10981_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_quantified_expression_in_synpred43_OracleDML10993_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_quantified_expression_in_synpred43_OracleDML10993( FOLLOW_quantified_expression_in_synpred43_OracleDML10993_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_standard_function_in_synpred44_OracleDML11004_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_standard_function_in_synpred44_OracleDML11004( FOLLOW_standard_function_in_synpred44_OracleDML11004_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_synpred45_OracleDML11061_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_synpred45_OracleDML11061( FOLLOW_label_name_in_synpred45_OracleDML11061_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_synpred45_OracleDML11064_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_synpred45_OracleDML11064( FOLLOW_case_key_in_synpred45_OracleDML11064_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_synpred45_OracleDML11066_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_synpred45_OracleDML11066( FOLLOW_when_key_in_synpred45_OracleDML11066_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_element_in_synpred46_OracleDML11434_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_element_in_synpred46_OracleDML11434( FOLLOW_table_element_in_synpred46_OracleDML11434_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_outer_join_sign_in_synpred46_OracleDML11436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_outer_join_sign_in_synpred46_OracleDML11436( FOLLOW_outer_join_sign_in_synpred46_OracleDML11436_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_synpred48_OracleDML11465_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_synpred48_OracleDML11465( FOLLOW_constant_in_synpred48_OracleDML11465_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_in_synpred49_OracleDML11476_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_in_synpred49_OracleDML11476( FOLLOW_general_element_in_synpred49_OracleDML11476_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred50_OracleDML11516_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred50_OracleDML11516( FOLLOW_select_key_in_synpred50_OracleDML11516_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred50_OracleDML11520_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred50_OracleDML11520( FOLLOW_with_key_in_synpred50_OracleDML11520_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred51_OracleDML11799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred51_OracleDML11799( FOLLOW_LEFT_PAREN_in_synpred51_OracleDML11799_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred51_OracleDML11802_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred51_OracleDML11802( FOLLOW_select_key_in_synpred51_OracleDML11802_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred51_OracleDML11804_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred51_OracleDML11804( FOLLOW_with_key_in_synpred51_OracleDML11804_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_key_in_synpred52_OracleDML12121_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_key_in_synpred52_OracleDML12121( FOLLOW_multiset_key_in_synpred52_OracleDML12121_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred52_OracleDML12123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred52_OracleDML12123( FOLLOW_LEFT_PAREN_in_synpred52_OracleDML12123_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred52_OracleDML12127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred52_OracleDML12127( FOLLOW_select_key_in_synpred52_OracleDML12127_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred52_OracleDML12129_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred52_OracleDML12129( FOLLOW_with_key_in_synpred52_OracleDML12129_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_default_key_in_synpred53_OracleDML14993_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_default_key_in_synpred53_OracleDML14993( FOLLOW_default_key_in_synpred53_OracleDML14993_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_default_key_in_synpred54_OracleDML15064_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_default_key_in_synpred54_OracleDML15064( FOLLOW_default_key_in_synpred54_OracleDML15064_bits, 1 );



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    174:70: ( nulls_key last_key )?
 */
static const ANTLR_INT32 dfa18_eot[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa18_eof[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa18_min[54] =
    {
	68, 113, -1, 68, -1, 113, 113, 113, 68, 68, 113, 68, 68, 113, 113, -1, 
	113, 113, 113, 113, 113, 113, 113, 68, 68, 113, 68, 68, 113, 68, 68, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 113, 68, 68, 113, 68, 68, 113, 
	113, 113, 113, 113, 113, 68, 68
    };
static const ANTLR_INT32 dfa18_max[54] =
    {
	383, 383, -1, 500, -1, 383, 383, 383, 467, 467, 383, 500, 500, 383, 383, 
	-1, 383, 383, 383, 383, 383, 383, 383, 500, 500, 383, 505, 505, 383, 452, 
	452, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 500, 500, 383, 505, 
	505, 383, 383, 383, 383, 383, 383, 505, 505
    };
static const ANTLR_INT32 dfa18_accept[54] =
    {
	-1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa18_special[54] =
    {
	18, 25, -1, 4, -1, 27, 31, 26, 50, 47, 16, 43, 12, 48, 30, -1, 34, 39, 
	41, 49, 8, 19, 14, 0, 23, 17, 20, 24, 38, 28, 29, 3, 5, 1, 7, 37, 35, 40, 
	42, 32, 21, 45, 46, 15, 10, 9, 22, 2, 6, 36, 11, 13, 33, 44
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa18_T_empty	 =   NULL;

static const ANTLR_INT32 dfa18_T0[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15
    };

static const ANTLR_INT32 dfa18_T1[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };

static const ANTLR_INT32 dfa18_T2[] =
    {
	27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	26
    };

static const ANTLR_INT32 dfa18_T3[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8
    };

static const ANTLR_INT32 dfa18_T4[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4
    };

static const ANTLR_INT32 dfa18_T5[] =
    {
	30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	29
    };

static const ANTLR_INT32 dfa18_T6[] =
    {
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa18_T7[] =
    {
	30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	29
    };

static const ANTLR_INT32 dfa18_T8[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15
    };

static const ANTLR_INT32 dfa18_T9[] =
    {
	34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	33
    };

static const ANTLR_INT32 dfa18_T10[] =
    {
	48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	47
    };

static const ANTLR_INT32 dfa18_T11[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	16
    };

static const ANTLR_INT32 dfa18_T12[] =
    {
	37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	36
    };

static const ANTLR_INT32 dfa18_T13[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };

static const ANTLR_INT32 dfa18_T14[] =
    {
	32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	31
    };

static const ANTLR_INT32 dfa18_T15[] =
    {
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa18_T16[] =
    {
	51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	50
    };

static const ANTLR_INT32 dfa18_T17[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3
    };

static const ANTLR_INT32 dfa18_T18[] =
    {
	14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	13
    };

static const ANTLR_INT32 dfa18_T19[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8
    };

static const ANTLR_INT32 dfa18_T20[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 15
    };

static const ANTLR_INT32 dfa18_T21[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };

static const ANTLR_INT32 dfa18_T22[] =
    {
	53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	52
    };

static const ANTLR_INT32 dfa18_T23[] =
    {
	42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	41
    };

static const ANTLR_INT32 dfa18_T24[] =
    {
	40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	39
    };

static const ANTLR_INT32 dfa18_T25[] =
    {
	24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	23
    };

static const ANTLR_INT32 dfa18_T26[] =
    {
	45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	44
    };

static const ANTLR_INT32 dfa18_T27[] =
    {
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 4, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 15
    };

static const ANTLR_INT32 dfa18_T28[] =
    {
	27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	26
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa18_transitions[] =
{
    dfa18_T13, dfa18_T17, NULL, dfa18_T4, NULL, dfa18_T19, dfa18_T21, dfa18_T18, 
    dfa18_T27, dfa18_T27, dfa18_T11, dfa18_T8, dfa18_T8, dfa18_T3, dfa18_T3, 
    NULL, dfa18_T1, dfa18_T1, dfa18_T25, dfa18_T28, dfa18_T5, dfa18_T14, 
    dfa18_T9, dfa18_T0, dfa18_T0, dfa18_T12, dfa18_T15, dfa18_T15, dfa18_T24, 
    dfa18_T20, dfa18_T20, dfa18_T3, dfa18_T3, dfa18_T1, dfa18_T1, dfa18_T23, 
    dfa18_T2, dfa18_T2, dfa18_T26, dfa18_T7, dfa18_T7, dfa18_T0, dfa18_T0, 
    dfa18_T10, dfa18_T6, dfa18_T6, dfa18_T16, dfa18_T2, dfa18_T2, dfa18_T22, 
    dfa18_T7, dfa18_T7, dfa18_T6, dfa18_T6
};


/* Declare tracking structure for Cyclic DFA 18
 */
class OracleDMLCyclicDFA18 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA18( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA18_23;

	    		    ANTLR_MARKER index18_23;


	    		    LA18_23 = ctx->LA(1);

	    		     
	    		        index18_23 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_23 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    		    else if ( (LA18_23 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_23 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_23 == LEFT_PAREN || LA18_23 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    			 
	    				ctx->seek(index18_23);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA18_33;

	    		    ANTLR_MARKER index18_33;


	    		    LA18_33 = ctx->LA(1);

	    		     
	    		        index18_33 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_33 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_33 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA18_33 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    			 
	    				ctx->seek(index18_33);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA18_47;

	    		    ANTLR_MARKER index18_47;


	    		    LA18_47 = ctx->LA(1);

	    		     
	    		        index18_47 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_47 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_47 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    		    else if ( (LA18_47 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    			 
	    				ctx->seek(index18_47);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 3:

	    		{
	    		    ANTLR_UINT32 LA18_31;

	    		    ANTLR_MARKER index18_31;


	    		    LA18_31 = ctx->LA(1);

	    		     
	    		        index18_31 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_31 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_31 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA18_31 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    			 
	    				ctx->seek(index18_31);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 4:

	    		{
	    		    ANTLR_UINT32 LA18_3;

	    		    ANTLR_MARKER index18_3;


	    		    LA18_3 = ctx->LA(1);

	    		     
	    		        index18_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_3 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 5;
	    		    }

	    		    else if ( (LA18_3 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (LA18_3 == LEFT_PAREN || LA18_3 == PERIOD || LA18_3 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 5:

	    		{
	    		    ANTLR_UINT32 LA18_32;

	    		    ANTLR_MARKER index18_32;


	    		    LA18_32 = ctx->LA(1);

	    		     
	    		        index18_32 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_32 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_32 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA18_32 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    			 
	    				ctx->seek(index18_32);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 6:

	    		{
	    		    ANTLR_UINT32 LA18_48;

	    		    ANTLR_MARKER index18_48;


	    		    LA18_48 = ctx->LA(1);

	    		     
	    		        index18_48 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_48 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_48 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    		    else if ( (LA18_48 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    			 
	    				ctx->seek(index18_48);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 7:

	    		{
	    		    ANTLR_UINT32 LA18_34;

	    		    ANTLR_MARKER index18_34;


	    		    LA18_34 = ctx->LA(1);

	    		     
	    		        index18_34 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_34 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_34 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA18_34 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    			 
	    				ctx->seek(index18_34);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 8:

	    		{
	    		    ANTLR_UINT32 LA18_20;

	    		    ANTLR_MARKER index18_20;


	    		    LA18_20 = ctx->LA(1);

	    		     
	    		        index18_20 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_20 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA18_20 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_20 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index18_20);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 9:

	    		{
	    		    ANTLR_UINT32 LA18_45;

	    		    ANTLR_MARKER index18_45;


	    		    LA18_45 = ctx->LA(1);

	    		     
	    		        index18_45 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_45 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA18_45 == COMMA || LA18_45 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_45 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_45);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 10:

	    		{
	    		    ANTLR_UINT32 LA18_44;

	    		    ANTLR_MARKER index18_44;


	    		    LA18_44 = ctx->LA(1);

	    		     
	    		        index18_44 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_44 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA18_44 == COMMA || LA18_44 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_44 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_44);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 11:

	    		{
	    		    ANTLR_UINT32 LA18_50;

	    		    ANTLR_MARKER index18_50;


	    		    LA18_50 = ctx->LA(1);

	    		     
	    		        index18_50 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_50 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_50 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    		    else if ( (LA18_50 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    			 
	    				ctx->seek(index18_50);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 12:

	    		{
	    		    ANTLR_UINT32 LA18_12;

	    		    ANTLR_MARKER index18_12;


	    		    LA18_12 = ctx->LA(1);

	    		     
	    		        index18_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_12 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA18_12 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_12 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_12 == LEFT_PAREN || LA18_12 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    			 
	    				ctx->seek(index18_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 13:

	    		{
	    		    ANTLR_UINT32 LA18_51;

	    		    ANTLR_MARKER index18_51;


	    		    LA18_51 = ctx->LA(1);

	    		     
	    		        index18_51 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_51 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_51 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    		    else if ( (LA18_51 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    			 
	    				ctx->seek(index18_51);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 14:

	    		{
	    		    ANTLR_UINT32 LA18_22;

	    		    ANTLR_MARKER index18_22;


	    		    LA18_22 = ctx->LA(1);

	    		     
	    		        index18_22 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_22 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    		    else if ( (LA18_22 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 34;
	    		    }

	    			 
	    				ctx->seek(index18_22);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 15:

	    		{
	    		    ANTLR_UINT32 LA18_43;

	    		    ANTLR_MARKER index18_43;


	    		    LA18_43 = ctx->LA(1);

	    		     
	    		        index18_43 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_43 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 47;
	    		    }

	    		    else if ( (LA18_43 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 48;
	    		    }

	    			 
	    				ctx->seek(index18_43);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 16:

	    		{
	    		    ANTLR_UINT32 LA18_10;

	    		    ANTLR_MARKER index18_10;


	    		    LA18_10 = ctx->LA(1);

	    		     
	    		        index18_10 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_10 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA18_10 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    			 
	    				ctx->seek(index18_10);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 17:

	    		{
	    		    ANTLR_UINT32 LA18_25;

	    		    ANTLR_MARKER index18_25;


	    		    LA18_25 = ctx->LA(1);

	    		     
	    		        index18_25 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_25 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 36;
	    		    }

	    		    else if ( (LA18_25 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 37;
	    		    }

	    			 
	    				ctx->seek(index18_25);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 18:

	    		{
	    		    ANTLR_UINT32 LA18_0;

	    		    ANTLR_MARKER index18_0;


	    		    LA18_0 = ctx->LA(1);

	    		     
	    		        index18_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 1;
	    		    }

	    		    else if ( (LA18_0 == COMMA)  )
	    		    {
	    		        s = 2;
	    		    }

	    			 
	    				ctx->seek(index18_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 19:

	    		{
	    		    ANTLR_UINT32 LA18_21;

	    		    ANTLR_MARKER index18_21;


	    		    LA18_21 = ctx->LA(1);

	    		     
	    		        index18_21 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_21 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 31;
	    		    }

	    		    else if ( (LA18_21 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 32;
	    		    }

	    			 
	    				ctx->seek(index18_21);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 20:

	    		{
	    		    ANTLR_UINT32 LA18_26;

	    		    ANTLR_MARKER index18_26;


	    		    LA18_26 = ctx->LA(1);

	    		     
	    		        index18_26 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_26 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 38;
	    		    }

	    		    else if ( (LA18_26 == COMMA || LA18_26 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_26 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_26);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 21:

	    		{
	    		    ANTLR_UINT32 LA18_40;

	    		    ANTLR_MARKER index18_40;


	    		    LA18_40 = ctx->LA(1);

	    		     
	    		        index18_40 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_40 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    		    else if ( (LA18_40 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_40 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index18_40);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 22:

	    		{
	    		    ANTLR_UINT32 LA18_46;

	    		    ANTLR_MARKER index18_46;


	    		    LA18_46 = ctx->LA(1);

	    		     
	    		        index18_46 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_46 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 50;
	    		    }

	    		    else if ( (LA18_46 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 51;
	    		    }

	    			 
	    				ctx->seek(index18_46);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 23:

	    		{
	    		    ANTLR_UINT32 LA18_24;

	    		    ANTLR_MARKER index18_24;


	    		    LA18_24 = ctx->LA(1);

	    		     
	    		        index18_24 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_24 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    		    else if ( (LA18_24 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_24 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_24 == LEFT_PAREN || LA18_24 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    			 
	    				ctx->seek(index18_24);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 24:

	    		{
	    		    ANTLR_UINT32 LA18_27;

	    		    ANTLR_MARKER index18_27;


	    		    LA18_27 = ctx->LA(1);

	    		     
	    		        index18_27 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_27 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 38;
	    		    }

	    		    else if ( (LA18_27 == COMMA || LA18_27 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_27 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_27);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 25:

	    		{
	    		    ANTLR_UINT32 LA18_1;

	    		    ANTLR_MARKER index18_1;


	    		    LA18_1 = ctx->LA(1);

	    		     
	    		        index18_1 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA18_1 == DELIMITED_ID || LA18_1 == INTRODUCER) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_1);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 26:

	    		{
	    		    ANTLR_UINT32 LA18_7;

	    		    ANTLR_MARKER index18_7;


	    		    LA18_7 = ctx->LA(1);

	    		     
	    		        index18_7 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_7 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 13;
	    		    }

	    		    else if ( (LA18_7 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 14;
	    		    }

	    			 
	    				ctx->seek(index18_7);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 27:

	    		{
	    		    ANTLR_UINT32 LA18_5;

	    		    ANTLR_MARKER index18_5;


	    		    LA18_5 = ctx->LA(1);

	    		     
	    		        index18_5 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_5 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 7;
	    		    }

	    		    else if ( (LA18_5 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_5 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index18_5);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 28:

	    		{
	    		    ANTLR_UINT32 LA18_29;

	    		    ANTLR_MARKER index18_29;


	    		    LA18_29 = ctx->LA(1);

	    		     
	    		        index18_29 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_29 == LEFT_PAREN || LA18_29 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_29 == COMMA || LA18_29 == PERIOD || LA18_29 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_29);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 29:

	    		{
	    		    ANTLR_UINT32 LA18_30;

	    		    ANTLR_MARKER index18_30;


	    		    LA18_30 = ctx->LA(1);

	    		     
	    		        index18_30 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_30 == LEFT_PAREN || LA18_30 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_30 == COMMA || LA18_30 == PERIOD || LA18_30 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_30);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 30:

	    		{
	    		    ANTLR_UINT32 LA18_14;

	    		    ANTLR_MARKER index18_14;


	    		    LA18_14 = ctx->LA(1);

	    		     
	    		        index18_14 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_14 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    		    else if ( (LA18_14 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_14 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index18_14);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 31:

	    		{
	    		    ANTLR_UINT32 LA18_6;

	    		    ANTLR_MARKER index18_6;


	    		    LA18_6 = ctx->LA(1);

	    		     
	    		        index18_6 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_6 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA18_6 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_6 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index18_6);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 32:

	    		{
	    		    ANTLR_UINT32 LA18_39;

	    		    ANTLR_MARKER index18_39;


	    		    LA18_39 = ctx->LA(1);

	    		     
	    		        index18_39 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_39 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    		    else if ( (LA18_39 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_39 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index18_39);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 33:

	    		{
	    		    ANTLR_UINT32 LA18_52;

	    		    ANTLR_MARKER index18_52;


	    		    LA18_52 = ctx->LA(1);

	    		     
	    		        index18_52 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_52 == COMMA || LA18_52 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_52 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA18_52 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_52);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 34:

	    		{
	    		    ANTLR_UINT32 LA18_16;

	    		    ANTLR_MARKER index18_16;


	    		    LA18_16 = ctx->LA(1);

	    		     
	    		        index18_16 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_16 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    		    else if ( (LA18_16 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_16 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index18_16);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 35:

	    		{
	    		    ANTLR_UINT32 LA18_36;

	    		    ANTLR_MARKER index18_36;


	    		    LA18_36 = ctx->LA(1);

	    		     
	    		        index18_36 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_36 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    		    else if ( (LA18_36 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_36 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    			 
	    				ctx->seek(index18_36);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 36:

	    		{
	    		    ANTLR_UINT32 LA18_49;

	    		    ANTLR_MARKER index18_49;


	    		    LA18_49 = ctx->LA(1);

	    		     
	    		        index18_49 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_49 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 52;
	    		    }

	    		    else if ( (LA18_49 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 53;
	    		    }

	    			 
	    				ctx->seek(index18_49);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 37:

	    		{
	    		    ANTLR_UINT32 LA18_35;

	    		    ANTLR_MARKER index18_35;


	    		    LA18_35 = ctx->LA(1);

	    		     
	    		        index18_35 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_35 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 41;
	    		    }

	    		    else if ( (LA18_35 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 42;
	    		    }

	    			 
	    				ctx->seek(index18_35);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 38:

	    		{
	    		    ANTLR_UINT32 LA18_28;

	    		    ANTLR_MARKER index18_28;


	    		    LA18_28 = ctx->LA(1);

	    		     
	    		        index18_28 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_28 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 39;
	    		    }

	    		    else if ( (LA18_28 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 40;
	    		    }

	    			 
	    				ctx->seek(index18_28);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 39:

	    		{
	    		    ANTLR_UINT32 LA18_17;

	    		    ANTLR_MARKER index18_17;


	    		    LA18_17 = ctx->LA(1);

	    		     
	    		        index18_17 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_17 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    		    else if ( (LA18_17 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_17 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index18_17);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 40:

	    		{
	    		    ANTLR_UINT32 LA18_37;

	    		    ANTLR_MARKER index18_37;


	    		    LA18_37 = ctx->LA(1);

	    		     
	    		        index18_37 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_37 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    		    else if ( (LA18_37 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_37 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    			 
	    				ctx->seek(index18_37);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 41:

	    		{
	    		    ANTLR_UINT32 LA18_18;

	    		    ANTLR_MARKER index18_18;


	    		    LA18_18 = ctx->LA(1);

	    		     
	    		        index18_18 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_18 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 23;
	    		    }

	    		    else if ( (LA18_18 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 24;
	    		    }

	    			 
	    				ctx->seek(index18_18);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 42:

	    		{
	    		    ANTLR_UINT32 LA18_38;

	    		    ANTLR_MARKER index18_38;


	    		    LA18_38 = ctx->LA(1);

	    		     
	    		        index18_38 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_38 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 44;
	    		    }

	    		    else if ( (LA18_38 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 45;
	    		    }

	    			 
	    				ctx->seek(index18_38);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 43:

	    		{
	    		    ANTLR_UINT32 LA18_11;

	    		    ANTLR_MARKER index18_11;


	    		    LA18_11 = ctx->LA(1);

	    		     
	    		        index18_11 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_11 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA18_11 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_11 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_11 == LEFT_PAREN || LA18_11 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    			 
	    				ctx->seek(index18_11);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 44:

	    		{
	    		    ANTLR_UINT32 LA18_53;

	    		    ANTLR_MARKER index18_53;


	    		    LA18_53 = ctx->LA(1);

	    		     
	    		        index18_53 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_53 == COMMA || LA18_53 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_53 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA18_53 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_53);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 45:

	    		{
	    		    ANTLR_UINT32 LA18_41;

	    		    ANTLR_MARKER index18_41;


	    		    LA18_41 = ctx->LA(1);

	    		     
	    		        index18_41 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_41 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_41 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_41 == LEFT_PAREN || LA18_41 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_41 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    			 
	    				ctx->seek(index18_41);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 46:

	    		{
	    		    ANTLR_UINT32 LA18_42;

	    		    ANTLR_MARKER index18_42;


	    		    LA18_42 = ctx->LA(1);

	    		     
	    		        index18_42 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_42 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_42 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_42 == LEFT_PAREN || LA18_42 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_42 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    			 
	    				ctx->seek(index18_42);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 47:

	    		{
	    		    ANTLR_UINT32 LA18_9;

	    		    ANTLR_MARKER index18_9;


	    		    LA18_9 = ctx->LA(1);

	    		     
	    		        index18_9 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_9 == COMMA || LA18_9 == PERIOD || LA18_9 == REGULAR_ID || LA18_9 == SQL92_RESERVED_ASC || LA18_9 == SQL92_RESERVED_DESC) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_9 == LEFT_PAREN || LA18_9 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_9);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 48:

	    		{
	    		    ANTLR_UINT32 LA18_13;

	    		    ANTLR_MARKER index18_13;


	    		    LA18_13 = ctx->LA(1);

	    		     
	    		        index18_13 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_13 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    		    else if ( (LA18_13 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_13 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index18_13);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 49:

	    		{
	    		    ANTLR_UINT32 LA18_19;

	    		    ANTLR_MARKER index18_19;


	    		    LA18_19 = ctx->LA(1);

	    		     
	    		        index18_19 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_19 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA18_19 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_19 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    			 
	    				ctx->seek(index18_19);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 50:

	    		{
	    		    ANTLR_UINT32 LA18_8;

	    		    ANTLR_MARKER index18_8;


	    		    LA18_8 = ctx->LA(1);

	    		     
	    		        index18_8 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_8 == COMMA || LA18_8 == PERIOD || LA18_8 == REGULAR_ID || LA18_8 == SQL92_RESERVED_ASC || LA18_8 == SQL92_RESERVED_DESC) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_8 == LEFT_PAREN || LA18_8 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_8);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "174:70: ( nulls_key last_key )?" );
	    ex->set_decisionNum( 18 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA18  cdfa18(
	    18,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"174:70: ( nulls_key last_key )?",
	    dfa18_eot,	    /* EOT table			    */
	    dfa18_eof,	    /* EOF table			    */
	    dfa18_min,	    /* Minimum tokens for each state    */
	    dfa18_max,	    /* Maximum tokens for each state    */
	    dfa18_accept,	/* Accept table			    */
	    dfa18_special,	/* Special transition states	    */
	    dfa18_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 18
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    175:77: ( nulls_key last_key )?
 */
static const ANTLR_INT32 dfa22_eot[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa22_eof[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa22_min[54] =
    {
	68, 113, -1, 68, -1, 113, 113, 113, 68, 68, 113, 68, 68, 113, 113, 113, 
	113, 113, -1, 113, 113, 113, 68, 68, 113, 68, 68, 113, 68, 68, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 113, 68, 68, 113, 68, 68, 113, 
	113, 113, 113, 113, 113, 68, 68
    };
static const ANTLR_INT32 dfa22_max[54] =
    {
	383, 383, -1, 500, -1, 383, 383, 383, 500, 500, 383, 467, 467, 383, 383, 
	383, 383, 383, -1, 383, 383, 383, 500, 500, 383, 505, 505, 383, 452, 452, 
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 500, 500, 383, 505, 
	505, 383, 383, 383, 383, 383, 383, 505, 505
    };
static const ANTLR_INT32 dfa22_accept[54] =
    {
	-1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa22_special[54] =
    {
	43, 9, -1, 18, -1, 30, 26, 16, 42, 12, 25, 50, 47, 33, 38, 40, 49, 7, -1, 
	48, 29, 14, 0, 23, 17, 20, 24, 37, 27, 28, 19, 1, 6, 36, 34, 39, 41, 31, 
	21, 3, 4, 45, 46, 15, 10, 8, 22, 2, 5, 35, 11, 13, 32, 44
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa22_T_empty	 =   NULL;

static const ANTLR_INT32 dfa22_T0[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	18
    };

static const ANTLR_INT32 dfa22_T1[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8
    };

static const ANTLR_INT32 dfa22_T2[] =
    {
	26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	25
    };

static const ANTLR_INT32 dfa22_T3[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };

static const ANTLR_INT32 dfa22_T4[] =
    {
	29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	28
    };

static const ANTLR_INT32 dfa22_T5[] =
    {
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa22_T6[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3
    };

static const ANTLR_INT32 dfa22_T7[] =
    {
	29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	28
    };

static const ANTLR_INT32 dfa22_T8[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	18
    };

static const ANTLR_INT32 dfa22_T9[] =
    {
	32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	31
    };

static const ANTLR_INT32 dfa22_T10[] =
    {
	48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	47
    };

static const ANTLR_INT32 dfa22_T11[] =
    {
	14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	13
    };

static const ANTLR_INT32 dfa22_T12[] =
    {
	35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	34
    };

static const ANTLR_INT32 dfa22_T13[] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4
    };

static const ANTLR_INT32 dfa22_T14[] =
    {
	40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	39
    };

static const ANTLR_INT32 dfa22_T15[] =
    {
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa22_T16[] =
    {
	51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	50
    };

static const ANTLR_INT32 dfa22_T17[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	19
    };

static const ANTLR_INT32 dfa22_T18[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };

static const ANTLR_INT32 dfa22_T19[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 18
    };

static const ANTLR_INT32 dfa22_T20[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8
    };

static const ANTLR_INT32 dfa22_T21[] =
    {
	53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	52
    };

static const ANTLR_INT32 dfa22_T22[] =
    {
	42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	41
    };

static const ANTLR_INT32 dfa22_T23[] =
    {
	38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	37
    };

static const ANTLR_INT32 dfa22_T24[] =
    {
	23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	22
    };

static const ANTLR_INT32 dfa22_T25[] =
    {
	45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	44
    };

static const ANTLR_INT32 dfa22_T26[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };

static const ANTLR_INT32 dfa22_T27[] =
    {
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 4, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 18
    };

static const ANTLR_INT32 dfa22_T28[] =
    {
	26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	25
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa22_transitions[] =
{
    dfa22_T26, dfa22_T6, NULL, dfa22_T13, NULL, dfa22_T20, dfa22_T18, dfa22_T11, 
    dfa22_T8, dfa22_T8, dfa22_T17, dfa22_T27, dfa22_T27, dfa22_T1, dfa22_T1, 
    dfa22_T24, dfa22_T28, dfa22_T4, NULL, dfa22_T3, dfa22_T3, dfa22_T9, 
    dfa22_T0, dfa22_T0, dfa22_T12, dfa22_T15, dfa22_T15, dfa22_T23, dfa22_T19, 
    dfa22_T19, dfa22_T14, dfa22_T1, dfa22_T1, dfa22_T22, dfa22_T2, dfa22_T2, 
    dfa22_T25, dfa22_T7, dfa22_T7, dfa22_T3, dfa22_T3, dfa22_T0, dfa22_T0, 
    dfa22_T10, dfa22_T5, dfa22_T5, dfa22_T16, dfa22_T2, dfa22_T2, dfa22_T21, 
    dfa22_T7, dfa22_T7, dfa22_T5, dfa22_T5
};


/* Declare tracking structure for Cyclic DFA 22
 */
class OracleDMLCyclicDFA22 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA22( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA22_22;

	    		    ANTLR_MARKER index22_22;


	    		    LA22_22 = ctx->LA(1);

	    		     
	    		        index22_22 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_22 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    		    else if ( (LA22_22 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_22 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_22 == LEFT_PAREN || LA22_22 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    			 
	    				ctx->seek(index22_22);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA22_31;

	    		    ANTLR_MARKER index22_31;


	    		    LA22_31 = ctx->LA(1);

	    		     
	    		        index22_31 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_31 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_31 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA22_31 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    			 
	    				ctx->seek(index22_31);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA22_47;

	    		    ANTLR_MARKER index22_47;


	    		    LA22_47 = ctx->LA(1);

	    		     
	    		        index22_47 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_47 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_47 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA22_47 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    			 
	    				ctx->seek(index22_47);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 3:

	    		{
	    		    ANTLR_UINT32 LA22_39;

	    		    ANTLR_MARKER index22_39;


	    		    LA22_39 = ctx->LA(1);

	    		     
	    		        index22_39 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_39 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_39 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA22_39 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index22_39);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 4:

	    		{
	    		    ANTLR_UINT32 LA22_40;

	    		    ANTLR_MARKER index22_40;


	    		    LA22_40 = ctx->LA(1);

	    		     
	    		        index22_40 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_40 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_40 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA22_40 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index22_40);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 5:

	    		{
	    		    ANTLR_UINT32 LA22_48;

	    		    ANTLR_MARKER index22_48;


	    		    LA22_48 = ctx->LA(1);

	    		     
	    		        index22_48 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_48 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_48 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA22_48 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    			 
	    				ctx->seek(index22_48);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 6:

	    		{
	    		    ANTLR_UINT32 LA22_32;

	    		    ANTLR_MARKER index22_32;


	    		    LA22_32 = ctx->LA(1);

	    		     
	    		        index22_32 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_32 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_32 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA22_32 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    			 
	    				ctx->seek(index22_32);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 7:

	    		{
	    		    ANTLR_UINT32 LA22_17;

	    		    ANTLR_MARKER index22_17;


	    		    LA22_17 = ctx->LA(1);

	    		     
	    		        index22_17 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_17 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    		    else if ( (LA22_17 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_17 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    			 
	    				ctx->seek(index22_17);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 8:

	    		{
	    		    ANTLR_UINT32 LA22_45;

	    		    ANTLR_MARKER index22_45;


	    		    LA22_45 = ctx->LA(1);

	    		     
	    		        index22_45 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_45 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA22_45 == COMMA || LA22_45 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_45 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_45);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 9:

	    		{
	    		    ANTLR_UINT32 LA22_1;

	    		    ANTLR_MARKER index22_1;


	    		    LA22_1 = ctx->LA(1);

	    		     
	    		        index22_1 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA22_1 == DELIMITED_ID || LA22_1 == INTRODUCER) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_1);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 10:

	    		{
	    		    ANTLR_UINT32 LA22_44;

	    		    ANTLR_MARKER index22_44;


	    		    LA22_44 = ctx->LA(1);

	    		     
	    		        index22_44 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_44 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA22_44 == COMMA || LA22_44 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_44 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_44);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 11:

	    		{
	    		    ANTLR_UINT32 LA22_50;

	    		    ANTLR_MARKER index22_50;


	    		    LA22_50 = ctx->LA(1);

	    		     
	    		        index22_50 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_50 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_50 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA22_50 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    			 
	    				ctx->seek(index22_50);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 12:

	    		{
	    		    ANTLR_UINT32 LA22_9;

	    		    ANTLR_MARKER index22_9;


	    		    LA22_9 = ctx->LA(1);

	    		     
	    		        index22_9 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_9 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA22_9 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_9 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_9 == LEFT_PAREN || LA22_9 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    			 
	    				ctx->seek(index22_9);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 13:

	    		{
	    		    ANTLR_UINT32 LA22_51;

	    		    ANTLR_MARKER index22_51;


	    		    LA22_51 = ctx->LA(1);

	    		     
	    		        index22_51 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_51 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_51 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA22_51 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    			 
	    				ctx->seek(index22_51);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 14:

	    		{
	    		    ANTLR_UINT32 LA22_21;

	    		    ANTLR_MARKER index22_21;


	    		    LA22_21 = ctx->LA(1);

	    		     
	    		        index22_21 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_21 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 31;
	    		    }

	    		    else if ( (LA22_21 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 32;
	    		    }

	    			 
	    				ctx->seek(index22_21);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 15:

	    		{
	    		    ANTLR_UINT32 LA22_43;

	    		    ANTLR_MARKER index22_43;


	    		    LA22_43 = ctx->LA(1);

	    		     
	    		        index22_43 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_43 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 47;
	    		    }

	    		    else if ( (LA22_43 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 48;
	    		    }

	    			 
	    				ctx->seek(index22_43);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 16:

	    		{
	    		    ANTLR_UINT32 LA22_7;

	    		    ANTLR_MARKER index22_7;


	    		    LA22_7 = ctx->LA(1);

	    		     
	    		        index22_7 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_7 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 13;
	    		    }

	    		    else if ( (LA22_7 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 14;
	    		    }

	    			 
	    				ctx->seek(index22_7);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 17:

	    		{
	    		    ANTLR_UINT32 LA22_24;

	    		    ANTLR_MARKER index22_24;


	    		    LA22_24 = ctx->LA(1);

	    		     
	    		        index22_24 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_24 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 34;
	    		    }

	    		    else if ( (LA22_24 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    			 
	    				ctx->seek(index22_24);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 18:

	    		{
	    		    ANTLR_UINT32 LA22_3;

	    		    ANTLR_MARKER index22_3;


	    		    LA22_3 = ctx->LA(1);

	    		     
	    		        index22_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_3 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 5;
	    		    }

	    		    else if ( (LA22_3 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (LA22_3 == LEFT_PAREN || LA22_3 == PERIOD || LA22_3 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 19:

	    		{
	    		    ANTLR_UINT32 LA22_30;

	    		    ANTLR_MARKER index22_30;


	    		    LA22_30 = ctx->LA(1);

	    		     
	    		        index22_30 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_30 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 39;
	    		    }

	    		    else if ( (LA22_30 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 40;
	    		    }

	    			 
	    				ctx->seek(index22_30);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 20:

	    		{
	    		    ANTLR_UINT32 LA22_25;

	    		    ANTLR_MARKER index22_25;


	    		    LA22_25 = ctx->LA(1);

	    		     
	    		        index22_25 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_25 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 36;
	    		    }

	    		    else if ( (LA22_25 == COMMA || LA22_25 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_25 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_25);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 21:

	    		{
	    		    ANTLR_UINT32 LA22_38;

	    		    ANTLR_MARKER index22_38;


	    		    LA22_38 = ctx->LA(1);

	    		     
	    		        index22_38 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_38 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    		    else if ( (LA22_38 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_38 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    			 
	    				ctx->seek(index22_38);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 22:

	    		{
	    		    ANTLR_UINT32 LA22_46;

	    		    ANTLR_MARKER index22_46;


	    		    LA22_46 = ctx->LA(1);

	    		     
	    		        index22_46 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_46 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 50;
	    		    }

	    		    else if ( (LA22_46 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 51;
	    		    }

	    			 
	    				ctx->seek(index22_46);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 23:

	    		{
	    		    ANTLR_UINT32 LA22_23;

	    		    ANTLR_MARKER index22_23;


	    		    LA22_23 = ctx->LA(1);

	    		     
	    		        index22_23 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_23 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    		    else if ( (LA22_23 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_23 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_23 == LEFT_PAREN || LA22_23 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    			 
	    				ctx->seek(index22_23);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 24:

	    		{
	    		    ANTLR_UINT32 LA22_26;

	    		    ANTLR_MARKER index22_26;


	    		    LA22_26 = ctx->LA(1);

	    		     
	    		        index22_26 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_26 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 36;
	    		    }

	    		    else if ( (LA22_26 == COMMA || LA22_26 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_26 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_26);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 25:

	    		{
	    		    ANTLR_UINT32 LA22_10;

	    		    ANTLR_MARKER index22_10;


	    		    LA22_10 = ctx->LA(1);

	    		     
	    		        index22_10 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_10 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA22_10 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    			 
	    				ctx->seek(index22_10);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 26:

	    		{
	    		    ANTLR_UINT32 LA22_6;

	    		    ANTLR_MARKER index22_6;


	    		    LA22_6 = ctx->LA(1);

	    		     
	    		        index22_6 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_6 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA22_6 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_6 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index22_6);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 27:

	    		{
	    		    ANTLR_UINT32 LA22_28;

	    		    ANTLR_MARKER index22_28;


	    		    LA22_28 = ctx->LA(1);

	    		     
	    		        index22_28 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_28 == LEFT_PAREN || LA22_28 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_28 == COMMA || LA22_28 == PERIOD || LA22_28 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_28);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 28:

	    		{
	    		    ANTLR_UINT32 LA22_29;

	    		    ANTLR_MARKER index22_29;


	    		    LA22_29 = ctx->LA(1);

	    		     
	    		        index22_29 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_29 == LEFT_PAREN || LA22_29 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_29 == COMMA || LA22_29 == PERIOD || LA22_29 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_29);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 29:

	    		{
	    		    ANTLR_UINT32 LA22_20;

	    		    ANTLR_MARKER index22_20;


	    		    LA22_20 = ctx->LA(1);

	    		     
	    		        index22_20 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_20 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    		    else if ( (LA22_20 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_20 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index22_20);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 30:

	    		{
	    		    ANTLR_UINT32 LA22_5;

	    		    ANTLR_MARKER index22_5;


	    		    LA22_5 = ctx->LA(1);

	    		     
	    		        index22_5 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_5 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 7;
	    		    }

	    		    else if ( (LA22_5 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_5 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index22_5);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 31:

	    		{
	    		    ANTLR_UINT32 LA22_37;

	    		    ANTLR_MARKER index22_37;


	    		    LA22_37 = ctx->LA(1);

	    		     
	    		        index22_37 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_37 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    		    else if ( (LA22_37 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_37 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    			 
	    				ctx->seek(index22_37);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 32:

	    		{
	    		    ANTLR_UINT32 LA22_52;

	    		    ANTLR_MARKER index22_52;


	    		    LA22_52 = ctx->LA(1);

	    		     
	    		        index22_52 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_52 == COMMA || LA22_52 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_52 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA22_52 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_52);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 33:

	    		{
	    		    ANTLR_UINT32 LA22_13;

	    		    ANTLR_MARKER index22_13;


	    		    LA22_13 = ctx->LA(1);

	    		     
	    		        index22_13 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_13 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    		    else if ( (LA22_13 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_13 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index22_13);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 34:

	    		{
	    		    ANTLR_UINT32 LA22_34;

	    		    ANTLR_MARKER index22_34;


	    		    LA22_34 = ctx->LA(1);

	    		     
	    		        index22_34 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_34 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    		    else if ( (LA22_34 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_34 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    			 
	    				ctx->seek(index22_34);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 35:

	    		{
	    		    ANTLR_UINT32 LA22_49;

	    		    ANTLR_MARKER index22_49;


	    		    LA22_49 = ctx->LA(1);

	    		     
	    		        index22_49 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_49 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 52;
	    		    }

	    		    else if ( (LA22_49 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 53;
	    		    }

	    			 
	    				ctx->seek(index22_49);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 36:

	    		{
	    		    ANTLR_UINT32 LA22_33;

	    		    ANTLR_MARKER index22_33;


	    		    LA22_33 = ctx->LA(1);

	    		     
	    		        index22_33 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_33 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 41;
	    		    }

	    		    else if ( (LA22_33 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 42;
	    		    }

	    			 
	    				ctx->seek(index22_33);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 37:

	    		{
	    		    ANTLR_UINT32 LA22_27;

	    		    ANTLR_MARKER index22_27;


	    		    LA22_27 = ctx->LA(1);

	    		     
	    		        index22_27 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_27 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 37;
	    		    }

	    		    else if ( (LA22_27 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 38;
	    		    }

	    			 
	    				ctx->seek(index22_27);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 38:

	    		{
	    		    ANTLR_UINT32 LA22_14;

	    		    ANTLR_MARKER index22_14;


	    		    LA22_14 = ctx->LA(1);

	    		     
	    		        index22_14 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_14 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    		    else if ( (LA22_14 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_14 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index22_14);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 39:

	    		{
	    		    ANTLR_UINT32 LA22_35;

	    		    ANTLR_MARKER index22_35;


	    		    LA22_35 = ctx->LA(1);

	    		     
	    		        index22_35 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_35 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    		    else if ( (LA22_35 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_35 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    			 
	    				ctx->seek(index22_35);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 40:

	    		{
	    		    ANTLR_UINT32 LA22_15;

	    		    ANTLR_MARKER index22_15;


	    		    LA22_15 = ctx->LA(1);

	    		     
	    		        index22_15 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_15 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    		    else if ( (LA22_15 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 23;
	    		    }

	    			 
	    				ctx->seek(index22_15);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 41:

	    		{
	    		    ANTLR_UINT32 LA22_36;

	    		    ANTLR_MARKER index22_36;


	    		    LA22_36 = ctx->LA(1);

	    		     
	    		        index22_36 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_36 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 44;
	    		    }

	    		    else if ( (LA22_36 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 45;
	    		    }

	    			 
	    				ctx->seek(index22_36);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 42:

	    		{
	    		    ANTLR_UINT32 LA22_8;

	    		    ANTLR_MARKER index22_8;


	    		    LA22_8 = ctx->LA(1);

	    		     
	    		        index22_8 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_8 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA22_8 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_8 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_8 == LEFT_PAREN || LA22_8 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    			 
	    				ctx->seek(index22_8);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 43:

	    		{
	    		    ANTLR_UINT32 LA22_0;

	    		    ANTLR_MARKER index22_0;


	    		    LA22_0 = ctx->LA(1);

	    		     
	    		        index22_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 1;
	    		    }

	    		    else if ( (LA22_0 == COMMA)  )
	    		    {
	    		        s = 2;
	    		    }

	    			 
	    				ctx->seek(index22_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 44:

	    		{
	    		    ANTLR_UINT32 LA22_53;

	    		    ANTLR_MARKER index22_53;


	    		    LA22_53 = ctx->LA(1);

	    		     
	    		        index22_53 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_53 == COMMA || LA22_53 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_53 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA22_53 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_53);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 45:

	    		{
	    		    ANTLR_UINT32 LA22_41;

	    		    ANTLR_MARKER index22_41;


	    		    LA22_41 = ctx->LA(1);

	    		     
	    		        index22_41 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_41 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_41 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_41 == LEFT_PAREN || LA22_41 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_41 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    			 
	    				ctx->seek(index22_41);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 46:

	    		{
	    		    ANTLR_UINT32 LA22_42;

	    		    ANTLR_MARKER index22_42;


	    		    LA22_42 = ctx->LA(1);

	    		     
	    		        index22_42 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_42 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_42 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_42 == LEFT_PAREN || LA22_42 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_42 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    			 
	    				ctx->seek(index22_42);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 47:

	    		{
	    		    ANTLR_UINT32 LA22_12;

	    		    ANTLR_MARKER index22_12;


	    		    LA22_12 = ctx->LA(1);

	    		     
	    		        index22_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_12 == COMMA || LA22_12 == PERIOD || LA22_12 == REGULAR_ID || LA22_12 == SQL92_RESERVED_ASC || LA22_12 == SQL92_RESERVED_DESC) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_12 == LEFT_PAREN || LA22_12 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 48:

	    		{
	    		    ANTLR_UINT32 LA22_19;

	    		    ANTLR_MARKER index22_19;


	    		    LA22_19 = ctx->LA(1);

	    		     
	    		        index22_19 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_19 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    		    else if ( (LA22_19 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_19 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index22_19);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 49:

	    		{
	    		    ANTLR_UINT32 LA22_16;

	    		    ANTLR_MARKER index22_16;


	    		    LA22_16 = ctx->LA(1);

	    		     
	    		        index22_16 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_16 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 24;
	    		    }

	    		    else if ( (LA22_16 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_16 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    			 
	    				ctx->seek(index22_16);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 50:

	    		{
	    		    ANTLR_UINT32 LA22_11;

	    		    ANTLR_MARKER index22_11;


	    		    LA22_11 = ctx->LA(1);

	    		     
	    		        index22_11 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_11 == COMMA || LA22_11 == PERIOD || LA22_11 == REGULAR_ID || LA22_11 == SQL92_RESERVED_ASC || LA22_11 == SQL92_RESERVED_DESC) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_11 == LEFT_PAREN || LA22_11 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_11);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "175:77: ( nulls_key last_key )?" );
	    ex->set_decisionNum( 22 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA22  cdfa22(
	    22,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"175:77: ( nulls_key last_key )?",
	    dfa22_eot,	    /* EOT table			    */
	    dfa22_eof,	    /* EOF table			    */
	    dfa22_min,	    /* Minimum tokens for each state    */
	    dfa22_max,	    /* Maximum tokens for each state    */
	    dfa22_accept,	/* Accept table			    */
	    dfa22_special,	/* Special transition states	    */
	    dfa22_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 22
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 488:64: ( reference_model )*
 */
static const ANTLR_INT32 dfa108_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa108_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa108_min[13] =
    {
	383, 113, 113, 383, 383, -1, 113, 113, -1, -1, 113, 113, 113
    };
static const ANTLR_INT32 dfa108_max[13] =
    {
	383, 456, 383, 491, 491, -1, 383, 383, -1, -1, 383, 383, 383
    };
static const ANTLR_INT32 dfa108_accept[13] =
    {
	-1, -1, -1, -1, -1, 2, -1, -1, 2, 1, -1, -1, -1
    };
static const ANTLR_INT32 dfa108_special[13] =
    {
	1, 6, 2, 3, 5, -1, 0, 4, -1, -1, 9, 7, 8
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa108_T_empty	 =   NULL;

static const ANTLR_INT32 dfa108_T0[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3
    };

static const ANTLR_INT32 dfa108_T1[] =
    {
	1
    };

static const ANTLR_INT32 dfa108_T2[] =
    {
	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	6
    };

static const ANTLR_INT32 dfa108_T3[] =
    {
	8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9
    };

static const ANTLR_INT32 dfa108_T4[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5
    };

static const ANTLR_INT32 dfa108_T5[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa108_transitions[] =
{
    dfa108_T1, dfa108_T4, dfa108_T2, dfa108_T3, dfa108_T3, NULL, dfa108_T0, 
    dfa108_T0, NULL, NULL, dfa108_T5, dfa108_T0, dfa108_T0
};


/* Declare tracking structure for Cyclic DFA 108
 */
class OracleDMLCyclicDFA108 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA108( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA108_6;

	    		    ANTLR_MARKER index108_6;


	    		    LA108_6 = ctx->LA(1);

	    		     
	    		        index108_6 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA108_6 == PERIOD) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA108_6 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA108_6 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index108_6);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA108_0;

	    		    ANTLR_MARKER index108_0;


	    		    LA108_0 = ctx->LA(1);

	    		     
	    		        index108_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA108_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 1;
	    		    }

	    			 
	    				ctx->seek(index108_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA108_2;

	    		    ANTLR_MARKER index108_2;


	    		    LA108_2 = ctx->LA(1);

	    		     
	    		        index108_2 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA108_2 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (LA108_2 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 7;
	    		    }

	    			 
	    				ctx->seek(index108_2);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 3:

	    		{
	    		    ANTLR_UINT32 LA108_3;

	    		    ANTLR_MARKER index108_3;


	    		    LA108_3 = ctx->LA(1);

	    		     
	    		        index108_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA108_3 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "MAIN")) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA108_3 == SQL92_RESERVED_ON) && ((toUpper(LT(1)->getText()) == "REFERENCE")) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index108_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 4:

	    		{
	    		    ANTLR_UINT32 LA108_7;

	    		    ANTLR_MARKER index108_7;


	    		    LA108_7 = ctx->LA(1);

	    		     
	    		        index108_7 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA108_7 == PERIOD) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA108_7 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA108_7 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index108_7);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 5:

	    		{
	    		    ANTLR_UINT32 LA108_4;

	    		    ANTLR_MARKER index108_4;


	    		    LA108_4 = ctx->LA(1);

	    		     
	    		        index108_4 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA108_4 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "MAIN")) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA108_4 == SQL92_RESERVED_ON) && ((toUpper(LT(1)->getText()) == "REFERENCE")) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index108_4);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 6:

	    		{
	    		    ANTLR_UINT32 LA108_1;

	    		    ANTLR_MARKER index108_1;


	    		    LA108_1 = ctx->LA(1);

	    		     
	    		        index108_1 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA108_1 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 2;
	    		    }

	    		    else if ( (LA108_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA108_1 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA108_1 == SQL92_RESERVED_BY) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "PARTITION")))) )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index108_1);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 7:

	    		{
	    		    ANTLR_UINT32 LA108_11;

	    		    ANTLR_MARKER index108_11;


	    		    LA108_11 = ctx->LA(1);

	    		     
	    		        index108_11 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA108_11 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA108_11 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA108_11 == PERIOD) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 10;
	    		    }

	    			 
	    				ctx->seek(index108_11);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 8:

	    		{
	    		    ANTLR_UINT32 LA108_12;

	    		    ANTLR_MARKER index108_12;


	    		    LA108_12 = ctx->LA(1);

	    		     
	    		        index108_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA108_12 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA108_12 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA108_12 == PERIOD) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 10;
	    		    }

	    			 
	    				ctx->seek(index108_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 9:

	    		{
	    		    ANTLR_UINT32 LA108_10;

	    		    ANTLR_MARKER index108_10;


	    		    LA108_10 = ctx->LA(1);

	    		     
	    		        index108_10 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA108_10 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA108_10 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index108_10);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "()* loopback of 488:64: ( reference_model )*" );
	    ex->set_decisionNum( 108 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA108  cdfa108(
	    108,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"()* loopback of 488:64: ( reference_model )*",
	    dfa108_eot,	    /* EOT table			    */
	    dfa108_eof,	    /* EOF table			    */
	    dfa108_min,	    /* Minimum tokens for each state    */
	    dfa108_max,	    /* Maximum tokens for each state    */
	    dfa108_accept,	/* Accept table			    */
	    dfa108_special,	/* Special transition states	    */
	    dfa108_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 108
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    777:9: ( error_logging_into_part )?
 */
static const ANTLR_INT32 dfa190_eot[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa190_eof[12] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa190_min[12] =
    {
	13, 113, -1, 113, -1, -1, 113, 113, 113, -1, 113, 113
    };
static const ANTLR_INT32 dfa190_max[12] =
    {
	614, 503, -1, 383, -1, -1, 383, 383, 383, -1, 383, 383
    };
static const ANTLR_INT32 dfa190_accept[12] =
    {
	-1, -1, 2, -1, 1, 1, -1, -1, -1, 1, -1, -1
    };
static const ANTLR_INT32 dfa190_special[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa190_T_empty	 =   NULL;

static const ANTLR_INT32 dfa190_T0[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10
    };

static const ANTLR_INT32 dfa190_T1[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9
    };

static const ANTLR_INT32 dfa190_T2[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, -1, -1, 2, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, 2, -1, -1, 
	2, -1, 2, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	2, -1, -1, -1, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

static const ANTLR_INT32 dfa190_T3[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2
    };

static const ANTLR_INT32 dfa190_T4[] =
    {
	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	6
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa190_transitions[] =
{
    dfa190_T2, dfa190_T3, NULL, dfa190_T4, NULL, NULL, dfa190_T1, dfa190_T1, 
    dfa190_T0, NULL, dfa190_T1, dfa190_T1
};


/* Declare tracking structure for Cyclic DFA 190
 */
class OracleDMLCyclicDFA190 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	OracleDMLCyclicDFA190( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static OracleDMLCyclicDFA190  cdfa190(
	    190,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"777:9: ( error_logging_into_part )?",
	    dfa190_eot,	    /* EOT table			    */
	    dfa190_eof,	    /* EOF table			    */
	    dfa190_min,	    /* Minimum tokens for each state    */
	    dfa190_max,	    /* Maximum tokens for each state    */
	    dfa190_accept,	/* Accept table			    */
	    dfa190_special,	/* Special transition states	    */
	    dfa190_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 190
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1113:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) );
 */
static const ANTLR_INT32 dfa269_eot[27] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa269_eof[27] =
    {
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, 11, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11
    };
static const ANTLR_INT32 dfa269_min[27] =
    {
	13, 113, 222, 19, -1, -1, -1, 113, 113, -1, -1, -1, 113, 13, 113, 19, 19, 
	19, 13, 113, 113, 13, 113, -1, 13, 19, 19
    };
static const ANTLR_INT32 dfa269_max[27] =
    {
	614, 383, 320, 627, -1, -1, -1, 383, 383, -1, -1, -1, 383, 614, 383, 627, 
	627, 627, 614, 383, 383, 614, 383, -1, 614, 627, 627
    };
static const ANTLR_INT32 dfa269_accept[27] =
    {
	-1, -1, -1, -1, 2, 3, 5, -1, -1, 1, 1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1
    };
static const ANTLR_INT32 dfa269_special[27] =
    {
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	1, -1, -1, -1, -1, -1, 0, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa269_T_empty	 =   NULL;

static const ANTLR_INT32 dfa269_T0[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, 13, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, 11, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 
	-1, 11, 11, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 11, 11, -1, 
	-1, 11, 11, -1, -1, -1, -1, 11, 11, -1, -1, 11, 11, 11, -1, 11, 11, 11, 
	11, 11, -1, -1, 11, -1, 11, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, 11, 
	11, -1, 11, -1, -1, -1, -1, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa269_T1[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
	-1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 5
    };

static const ANTLR_INT32 dfa269_T2[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, 21, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, 11, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 
	-1, 11, 11, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 11, 11, -1, 
	-1, 11, 11, -1, -1, -1, -1, 11, 11, -1, -1, 11, 11, 11, -1, 11, 11, 11, 
	11, 11, -1, -1, 11, -1, 11, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, 11, 
	11, -1, 11, -1, -1, -1, -1, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa269_T3[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 
	11, -1, 11, -1, -1, 11, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa269_T4[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	16
    };

static const ANTLR_INT32 dfa269_T5[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	19
    };

static const ANTLR_INT32 dfa269_T6[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 11, 
	11, -1, 11, -1, -1, 11, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa269_T7[] =
    {
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15
    };

static const ANTLR_INT32 dfa269_T8[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 11, 
	11, -1, 11, -1, -1, 11, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa269_T9[] =
    {
	10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9
    };

static const ANTLR_INT32 dfa269_T10[] =
    {
	8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	7
    };

static const ANTLR_INT32 dfa269_T11[] =
    {
	26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	25
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa269_transitions[] =
{
    dfa269_T1, dfa269_T10, dfa269_T9, dfa269_T0, NULL, NULL, NULL, dfa269_T7, 
    dfa269_T7, NULL, NULL, NULL, dfa269_T4, dfa269_T8, dfa269_T5, dfa269_T0, 
    dfa269_T2, dfa269_T2, dfa269_T3, dfa269_T7, dfa269_T7, dfa269_T6, dfa269_T11, 
    NULL, dfa269_T3, dfa269_T2, dfa269_T2
};


/* Declare tracking structure for Cyclic DFA 269
 */
class OracleDMLCyclicDFA269 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA269( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA269_24;

	    		    ANTLR_MARKER index269_24;


	    		    LA269_24 = ctx->LA(1);

	    		     
	    		        index269_24 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA269_24 == RIGHT_PAREN) && (this->msynpred( antlr3::ClassForwarder<synpred46_OracleDML>() )) )
	    		    {
	    		        s = 23;
	    		    }

	    		    else if ( (LA269_24 == APPROXIMATE_NUM_LIT || LA269_24 == BINDVAR || ((LA269_24 >= CHAR_STRING) && (LA269_24 <= CHAR_STRING_PERL)) || LA269_24 == COLON || LA269_24 == DELIMITED_ID || LA269_24 == EXACT_NUM_LIT || LA269_24 == INTRODUCER || LA269_24 == LEFT_PAREN || LA269_24 == MINUS_SIGN || LA269_24 == NATIONAL_CHAR_STRING_LIT || ((LA269_24 >= PLSQL_NON_RESERVED_CAST) && (LA269_24 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA269_24 == PLUS_SIGN || LA269_24 == REGULAR_ID || LA269_24 == SQL92_RESERVED_ALL || LA269_24 == SQL92_RESERVED_ANY || LA269_24 == SQL92_RESERVED_CASE || LA269_24 == SQL92_RESERVED_DATE || LA269_24 == SQL92_RESERVED_DEFAULT || LA269_24 == SQL92_RESERVED_DISTINCT || ((LA269_24 >= SQL92_RESERVED_EXISTS) && (LA269_24 <= SQL92_RESERVED_FALSE)) || LA269_24 == SQL92_RESERVED_NULL || LA269_24 == SQL92_RESERVED_PRIOR || LA269_24 == SQL92_RESERVED_TRUE || LA269_24 == UNSIGNED_INTEGER)  )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index269_24);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA269_18;

	    		    ANTLR_MARKER index269_18;


	    		    LA269_18 = ctx->LA(1);

	    		     
	    		        index269_18 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA269_18 == RIGHT_PAREN) && (this->msynpred( antlr3::ClassForwarder<synpred46_OracleDML>() )) )
	    		    {
	    		        s = 23;
	    		    }

	    		    else if ( (LA269_18 == APPROXIMATE_NUM_LIT || LA269_18 == BINDVAR || ((LA269_18 >= CHAR_STRING) && (LA269_18 <= CHAR_STRING_PERL)) || LA269_18 == COLON || LA269_18 == DELIMITED_ID || LA269_18 == EXACT_NUM_LIT || LA269_18 == INTRODUCER || LA269_18 == LEFT_PAREN || LA269_18 == MINUS_SIGN || LA269_18 == NATIONAL_CHAR_STRING_LIT || ((LA269_18 >= PLSQL_NON_RESERVED_CAST) && (LA269_18 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA269_18 == PLUS_SIGN || LA269_18 == REGULAR_ID || LA269_18 == SQL92_RESERVED_ALL || LA269_18 == SQL92_RESERVED_ANY || LA269_18 == SQL92_RESERVED_CASE || LA269_18 == SQL92_RESERVED_DATE || LA269_18 == SQL92_RESERVED_DEFAULT || LA269_18 == SQL92_RESERVED_DISTINCT || ((LA269_18 >= SQL92_RESERVED_EXISTS) && (LA269_18 <= SQL92_RESERVED_FALSE)) || LA269_18 == SQL92_RESERVED_NULL || LA269_18 == SQL92_RESERVED_PRIOR || LA269_18 == SQL92_RESERVED_TRUE || LA269_18 == UNSIGNED_INTEGER)  )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index269_18);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA269_2;

	    		    ANTLR_MARKER index269_2;


	    		    LA269_2 = ctx->LA(1);

	    		     
	    		        index269_2 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA269_2 == PERIOD) && (this->msynpred( antlr3::ClassForwarder<synpred46_OracleDML>() )) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA269_2 == LEFT_PAREN) && (this->msynpred( antlr3::ClassForwarder<synpred46_OracleDML>() )) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (( ((((toUpper(LT(1)->getText()) == "INTERVAL"))||((toUpper(LT(1)->getText()) == "MINVALUE"))||((toUpper(LT(1)->getText()) == "SESSIONTIMEZONE"))||((toUpper(LT(1)->getText()) == "TIMESTAMP"))||((toUpper(LT(1)->getText()) == "MAXVALUE"))||((toUpper(LT(1)->getText()) == "DBTIMEZONE")))) && (this->msynpred( antlr3::ClassForwarder<synpred48_OracleDML>() )) ))  )
	    		    {
	    		        s = 5;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred49_OracleDML>() ))  )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index269_2);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "1113:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) );" );
	    ex->set_decisionNum( 269 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA269  cdfa269(
	    269,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1113:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) );",
	    dfa269_eot,	    /* EOT table			    */
	    dfa269_eof,	    /* EOF table			    */
	    dfa269_min,	    /* Minimum tokens for each state    */
	    dfa269_max,	    /* Maximum tokens for each state    */
	    dfa269_accept,	/* Accept table			    */
	    dfa269_special,	/* Special transition states	    */
	    dfa269_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 269
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1236:17: ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper )
 */
static const ANTLR_INT32 dfa314_eot[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa314_eof[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa314_min[14] =
    {
	383, 13, 113, 0, 0, -1, 113, 113, -1, 113, 0, 0, 113, 113
    };
static const ANTLR_INT32 dfa314_max[14] =
    {
	383, 614, 383, 0, 0, -1, 383, 383, -1, 383, 0, 0, 383, 383
    };
static const ANTLR_INT32 dfa314_accept[14] =
    {
	-1, -1, -1, -1, -1, 2, -1, -1, 1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa314_special[14] =
    {
	11, 0, 5, 2, 4, -1, 3, 1, -1, 6, 7, 9, 10, 8
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa314_T_empty	 =   NULL;

static const ANTLR_INT32 dfa314_T0[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	5, -1, -1, 5, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 5, -1, 5, -1, 
	-1, 5, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 5, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5
    };

static const ANTLR_INT32 dfa314_T1[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10
    };

static const ANTLR_INT32 dfa314_T2[] =
    {
	-1
    };

static const ANTLR_INT32 dfa314_T3[] =
    {
	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	6
    };

static const ANTLR_INT32 dfa314_T4[] =
    {
	13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	12
    };

static const ANTLR_INT32 dfa314_T5[] =
    {
	1
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa314_transitions[] =
{
    dfa314_T5, dfa314_T0, dfa314_T3, dfa314_T2, dfa314_T2, NULL, dfa314_T1, 
    dfa314_T1, NULL, dfa314_T4, dfa314_T2, dfa314_T2, dfa314_T1, dfa314_T1
};


/* Declare tracking structure for Cyclic DFA 314
 */
class OracleDMLCyclicDFA314 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA314( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA314_1;

	    		    ANTLR_MARKER index314_1;


	    		    LA314_1 = ctx->LA(1);

	    		     
	    		        index314_1 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA314_1 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 2;
	    		    }

	    		    else if ( (LA314_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA314_1 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA314_1 == APPROXIMATE_NUM_LIT || LA314_1 == BINDVAR || ((LA314_1 >= CHAR_STRING) && (LA314_1 <= CHAR_STRING_PERL)) || LA314_1 == COLON || LA314_1 == EXACT_NUM_LIT || LA314_1 == LEFT_PAREN || LA314_1 == MINUS_SIGN || LA314_1 == NATIONAL_CHAR_STRING_LIT || ((LA314_1 >= PLSQL_NON_RESERVED_CAST) && (LA314_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA314_1 == PLUS_SIGN || LA314_1 == SQL92_RESERVED_ALL || LA314_1 == SQL92_RESERVED_ANY || LA314_1 == SQL92_RESERVED_CASE || LA314_1 == SQL92_RESERVED_DATE || LA314_1 == SQL92_RESERVED_DEFAULT || LA314_1 == SQL92_RESERVED_DISTINCT || ((LA314_1 >= SQL92_RESERVED_EXISTS) && (LA314_1 <= SQL92_RESERVED_FALSE)) || LA314_1 == SQL92_RESERVED_NULL || LA314_1 == SQL92_RESERVED_PRIOR || LA314_1 == SQL92_RESERVED_TRUE || LA314_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "EVALNAME")) )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index314_1);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA314_7;

	    		    ANTLR_MARKER index314_7;


	    		    LA314_7 = ctx->LA(1);

	    		     
	    		        index314_7 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA314_7 == PERIOD) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA314_7 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA314_7 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index314_7);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA314_3;

	    		    ANTLR_MARKER index314_3;


	    		    LA314_3 = ctx->LA(1);

	    		     
	    		        index314_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((toUpper(LT(1)->getText()) == "NAME"))  )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME"))  )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index314_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 3:

	    		{
	    		    ANTLR_UINT32 LA314_6;

	    		    ANTLR_MARKER index314_6;


	    		    LA314_6 = ctx->LA(1);

	    		     
	    		        index314_6 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA314_6 == PERIOD) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA314_6 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA314_6 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index314_6);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 4:

	    		{
	    		    ANTLR_UINT32 LA314_4;

	    		    ANTLR_MARKER index314_4;


	    		    LA314_4 = ctx->LA(1);

	    		     
	    		        index314_4 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((toUpper(LT(1)->getText()) == "NAME"))  )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME"))  )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index314_4);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 5:

	    		{
	    		    ANTLR_UINT32 LA314_2;

	    		    ANTLR_MARKER index314_2;


	    		    LA314_2 = ctx->LA(1);

	    		     
	    		        index314_2 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA314_2 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (LA314_2 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 7;
	    		    }

	    			 
	    				ctx->seek(index314_2);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 6:

	    		{
	    		    ANTLR_UINT32 LA314_9;

	    		    ANTLR_MARKER index314_9;


	    		    LA314_9 = ctx->LA(1);

	    		     
	    		        index314_9 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA314_9 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA314_9 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 13;
	    		    }

	    			 
	    				ctx->seek(index314_9);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 7:

	    		{
	    		    ANTLR_UINT32 LA314_10;

	    		    ANTLR_MARKER index314_10;


	    		    LA314_10 = ctx->LA(1);

	    		     
	    		        index314_10 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((toUpper(LT(1)->getText()) == "NAME"))  )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME"))  )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index314_10);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 8:

	    		{
	    		    ANTLR_UINT32 LA314_13;

	    		    ANTLR_MARKER index314_13;


	    		    LA314_13 = ctx->LA(1);

	    		     
	    		        index314_13 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA314_13 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA314_13 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA314_13 == PERIOD) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index314_13);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 9:

	    		{
	    		    ANTLR_UINT32 LA314_11;

	    		    ANTLR_MARKER index314_11;


	    		    LA314_11 = ctx->LA(1);

	    		     
	    		        index314_11 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((toUpper(LT(1)->getText()) == "NAME"))  )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME"))  )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index314_11);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 10:

	    		{
	    		    ANTLR_UINT32 LA314_12;

	    		    ANTLR_MARKER index314_12;


	    		    LA314_12 = ctx->LA(1);

	    		     
	    		        index314_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA314_12 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA314_12 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA314_12 == PERIOD) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index314_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 11:

	    		{
	    		    ANTLR_UINT32 LA314_0;

	    		    ANTLR_MARKER index314_0;


	    		    LA314_0 = ctx->LA(1);

	    		     
	    		        index314_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA314_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 1;
	    		    }

	    			 
	    				ctx->seek(index314_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "1236:17: ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper )" );
	    ex->set_decisionNum( 314 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA314  cdfa314(
	    314,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1236:17: ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper )",
	    dfa314_eot,	    /* EOT table			    */
	    dfa314_eof,	    /* EOF table			    */
	    dfa314_min,	    /* Minimum tokens for each state    */
	    dfa314_max,	    /* Maximum tokens for each state    */
	    dfa314_accept,	/* Accept table			    */
	    dfa314_special,	/* Special transition states	    */
	    dfa314_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 314
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start compilation_unit
 * OracleDML.g:121:1: compilation_unit : ( seq_of_statements )* EOF ;
 */
OracleDML::compilation_unit_return
OracleDML::compilation_unit()
{
    OracleDML::compilation_unit_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EOF2 = NULL;
    OracleDML::seq_of_statements_return seq_of_statements1;
    ImplTraits::TreeTypePtr::pointer seq_of_statements1_last = NULL;
    ImplTraits::TreeTypePtr EOF2_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:122:5: ( ( seq_of_statements )* EOF )
        // OracleDML.g:122:11: ( seq_of_statements )* EOF
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:122:11: ( seq_of_statements )*

            for (;;)
            {
                ANTLR_UINT32 alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    ANTLR_UINT32 LA1_0 = this->LA(1);
                    if ( (LA1_0 == LEFT_PAREN || LA1_0 == PLSQL_RESERVED_LOCK || LA1_0 == SQL92_RESERVED_DELETE || LA1_0 == SQL92_RESERVED_INSERT || LA1_0 == SQL92_RESERVED_SELECT || LA1_0 == SQL92_RESERVED_UPDATE || LA1_0 == SQL92_RESERVED_WITH))
                    {
                        alt1=1;
                    }
                    else if ( (LA1_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))))
                    {
                        alt1=1;
                    }

                }
                switch (alt1)
                {
            	case 1:
            	    // OracleDML.g:122:11: seq_of_statements
            	    {
            	        this->followPush(FOLLOW_seq_of_statements_in_compilation_unit670);
            	        seq_of_statements1=seq_of_statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecompilation_unitEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, seq_of_statements1.tree);


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


            EOF2 =  this->matchToken(EOF_TOKEN, &FOLLOW_EOF_TOKEN_in_compilation_unit673);
            if  (this->hasException())
            {
                goto rulecompilation_unitEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            EOF2_tree = std::move(get_psrstate()->get_treeAdaptor()->create(EOF2));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, EOF2_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecompilation_unitEx; /* Prevent compiler warnings */
    rulecompilation_unitEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end compilation_unit */

/**
 * $ANTLR start seq_of_statements
 * OracleDML.g:126:1: seq_of_statements : ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement ) ( SEMICOLON | EOF ) ;
 */
OracleDML::seq_of_statements_return
OracleDML::seq_of_statements()
{
    OracleDML::seq_of_statements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* set10 = NULL;
    OracleDML::select_statement_return select_statement3;
    ImplTraits::TreeTypePtr::pointer select_statement3_last = NULL;
    OracleDML::update_statement_return update_statement4;
    ImplTraits::TreeTypePtr::pointer update_statement4_last = NULL;
    OracleDML::delete_statement_return delete_statement5;
    ImplTraits::TreeTypePtr::pointer delete_statement5_last = NULL;
    OracleDML::insert_statement_return insert_statement6;
    ImplTraits::TreeTypePtr::pointer insert_statement6_last = NULL;
    OracleDML::lock_table_statement_return lock_table_statement7;
    ImplTraits::TreeTypePtr::pointer lock_table_statement7_last = NULL;
    OracleDML::merge_statement_return merge_statement8;
    ImplTraits::TreeTypePtr::pointer merge_statement8_last = NULL;
    OracleDML::explain_statement_return explain_statement9;
    ImplTraits::TreeTypePtr::pointer explain_statement9_last = NULL;
    ImplTraits::TreeTypePtr set10_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:127:5: ( ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement ) ( SEMICOLON | EOF ) )
        // OracleDML.g:128:5: ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement ) ( SEMICOLON | EOF )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:128:5: ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement )
            {
                ANTLR_UINT32 alt2=7;
                {
                    ANTLR_UINT32 LA2_0 = this->LA(1);
                    if ( (LA2_0 == LEFT_PAREN || LA2_0 == SQL92_RESERVED_SELECT || LA2_0 == SQL92_RESERVED_WITH))
                    {
                        alt2=1;
                    }
                    else if ( (LA2_0 == SQL92_RESERVED_UPDATE))
                    {
                        alt2=2;
                    }
                    else if ( (LA2_0 == SQL92_RESERVED_DELETE))
                    {
                        alt2=3;
                    }
                    else if ( (LA2_0 == SQL92_RESERVED_INSERT))
                    {
                        alt2=4;
                    }
                    else if ( (LA2_0 == PLSQL_RESERVED_LOCK))
                    {
                        alt2=5;
                    }
                    else if ( (LA2_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))))
                    {
                        {
                            ANTLR_UINT32 LA2_6 = this->LA(2);
                            if ( (LA2_6 == SQL92_RESERVED_INTO) && ((toUpper(LT(1)->getText()) == "MERGE")))
                            {
                                alt2=6;
                            }
                            else if ( (LA2_6 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "EXPLAIN")))
                            {
                                alt2=7;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 2 );
                                ex->set_state( 6 );


                                goto ruleseq_of_statementsEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 2 );
                        ex->set_state( 0 );


                        goto ruleseq_of_statementsEx;

                    }
                }
                switch (alt2)
                {
            	case 1:
            	    // OracleDML.g:128:10: select_statement
            	    {
            	        this->followPush(FOLLOW_select_statement_in_seq_of_statements700);
            	        select_statement3=select_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, select_statement3.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:129:10: update_statement
            	    {
            	        this->followPush(FOLLOW_update_statement_in_seq_of_statements711);
            	        update_statement4=update_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, update_statement4.tree);


            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:130:10: delete_statement
            	    {
            	        this->followPush(FOLLOW_delete_statement_in_seq_of_statements722);
            	        delete_statement5=delete_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, delete_statement5.tree);


            	    }
            	    break;
            	case 4:
            	    // OracleDML.g:131:10: insert_statement
            	    {
            	        this->followPush(FOLLOW_insert_statement_in_seq_of_statements733);
            	        insert_statement6=insert_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, insert_statement6.tree);


            	    }
            	    break;
            	case 5:
            	    // OracleDML.g:132:10: lock_table_statement
            	    {
            	        this->followPush(FOLLOW_lock_table_statement_in_seq_of_statements744);
            	        lock_table_statement7=lock_table_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, lock_table_statement7.tree);


            	    }
            	    break;
            	case 6:
            	    // OracleDML.g:133:10: merge_statement
            	    {
            	        this->followPush(FOLLOW_merge_statement_in_seq_of_statements755);
            	        merge_statement8=merge_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_statement8.tree);


            	    }
            	    break;
            	case 7:
            	    // OracleDML.g:134:10: explain_statement
            	    {
            	        this->followPush(FOLLOW_explain_statement_in_seq_of_statements766);
            	        explain_statement9=explain_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, explain_statement9.tree);


            	    }
            	    break;

                }
            }

            set10=(ImplTraits::CommonTokenType const*) this->LT(1);

            if ( this->LA(1) == EOF_TOKEN || this->LA(1) == SEMICOLON )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(set10));
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< OracleDMLImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleseq_of_statementsEx;
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleseq_of_statementsEx; /* Prevent compiler warnings */
    ruleseq_of_statementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end seq_of_statements */

/**
 * $ANTLR start explain_statement
 * OracleDML.g:139:1: explain_statement : explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement ) -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? ) ;
 */
OracleDML::explain_statement_return
OracleDML::explain_statement()
{
    OracleDML::explain_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP15 = NULL;
    OracleDML_OracleDMLKeys::explain_key_return explain_key11;
    ImplTraits::TreeTypePtr::pointer explain_key11_last = NULL;
    OracleDML_OracleDMLKeys::plan_key_return plan_key12;
    ImplTraits::TreeTypePtr::pointer plan_key12_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key13;
    ImplTraits::TreeTypePtr::pointer set_key13_last = NULL;
    OracleDML_OracleDMLKeys::statement_id_key_return statement_id_key14;
    ImplTraits::TreeTypePtr::pointer statement_id_key14_last = NULL;
    OracleDML_OracleDMLCommons::quoted_string_return quoted_string16;
    ImplTraits::TreeTypePtr::pointer quoted_string16_last = NULL;
    OracleDML_OracleDMLKeys::into_key_return into_key17;
    ImplTraits::TreeTypePtr::pointer into_key17_last = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name18;
    ImplTraits::TreeTypePtr::pointer tableview_name18_last = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key19;
    ImplTraits::TreeTypePtr::pointer for_key19_last = NULL;
    OracleDML::select_statement_return select_statement20;
    ImplTraits::TreeTypePtr::pointer select_statement20_last = NULL;
    OracleDML::update_statement_return update_statement21;
    ImplTraits::TreeTypePtr::pointer update_statement21_last = NULL;
    OracleDML::delete_statement_return delete_statement22;
    ImplTraits::TreeTypePtr::pointer delete_statement22_last = NULL;
    OracleDML::insert_statement_return insert_statement23;
    ImplTraits::TreeTypePtr::pointer insert_statement23_last = NULL;
    OracleDML::merge_statement_return merge_statement24;
    ImplTraits::TreeTypePtr::pointer merge_statement24_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP15_tree;
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_delete_statement(get_psrstate()->get_treeAdaptor(), "rule delete_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_quoted_string(get_psrstate()->get_treeAdaptor(), "rule quoted_string");
    RewriteRuleSubtreeStream<ImplTraits> stream_plan_key(get_psrstate()->get_treeAdaptor(), "rule plan_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_key(get_psrstate()->get_treeAdaptor(), "rule into_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_statement_id_key(get_psrstate()->get_treeAdaptor(), "rule statement_id_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_explain_key(get_psrstate()->get_treeAdaptor(), "rule explain_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_statement(get_psrstate()->get_treeAdaptor(), "rule merge_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_statement(get_psrstate()->get_treeAdaptor(), "rule update_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_set_key(get_psrstate()->get_treeAdaptor(), "rule set_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_insert_statement(get_psrstate()->get_treeAdaptor(), "rule insert_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:140:5: ( explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement ) -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? ) )
        // OracleDML.g:140:10: explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement )
        {
            this->followPush(FOLLOW_explain_key_in_explain_statement809);
            explain_key11=explain_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexplain_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                explain_key11_last = explain_key11.tree.get();
                stream_explain_key.add(explain_key11.tree);
            }

            this->followPush(FOLLOW_plan_key_in_explain_statement811);
            plan_key12=plan_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexplain_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                plan_key12_last = plan_key12.tree.get();
                stream_plan_key.add(plan_key12.tree);
            }

            // OracleDML.g:141:10: ( set_key statement_id_key EQUALS_OP quoted_string )?
            {
                ANTLR_UINT32 alt3=2;
                {
                    ANTLR_UINT32 LA3_0 = this->LA(1);
                    if ( (LA3_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")))
                    {
                        alt3=1;
                    }
                }
                switch (alt3)
                {
            	case 1:
            	    // OracleDML.g:141:11: set_key statement_id_key EQUALS_OP quoted_string
            	    {
            	        this->followPush(FOLLOW_set_key_in_explain_statement823);
            	        set_key13=set_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            set_key13_last = set_key13.tree.get();
            	            stream_set_key.add(set_key13.tree);
            	        }

            	        this->followPush(FOLLOW_statement_id_key_in_explain_statement825);
            	        statement_id_key14=statement_id_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            statement_id_key14_last = statement_id_key14.tree.get();
            	            stream_statement_id_key.add(statement_id_key14.tree);
            	        }

            	        EQUALS_OP15 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_explain_statement827);
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP15);


            	        this->followPush(FOLLOW_quoted_string_in_explain_statement829);
            	        quoted_string16=quoted_string();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            quoted_string16_last = quoted_string16.tree.get();
            	            stream_quoted_string.add(quoted_string16.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:142:10: ( into_key tableview_name )?
            {
                ANTLR_UINT32 alt4=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_INTO:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // OracleDML.g:142:11: into_key tableview_name
            	    {
            	        this->followPush(FOLLOW_into_key_in_explain_statement843);
            	        into_key17=into_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            into_key17_last = into_key17.tree.get();
            	            stream_into_key.add(into_key17.tree);
            	        }

            	        this->followPush(FOLLOW_tableview_name_in_explain_statement845);
            	        tableview_name18=tableview_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            tableview_name18_last = tableview_name18.tree.get();
            	            stream_tableview_name.add(tableview_name18.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_for_key_in_explain_statement858);
            for_key19=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexplain_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key19_last = for_key19.tree.get();
                stream_for_key.add(for_key19.tree);
            }

            // OracleDML.g:144:10: ( select_statement | update_statement | delete_statement | insert_statement | merge_statement )
            {
                ANTLR_UINT32 alt5=5;
                {
                    ANTLR_UINT32 LA5_0 = this->LA(1);
                    if ( (LA5_0 == LEFT_PAREN || LA5_0 == SQL92_RESERVED_SELECT || LA5_0 == SQL92_RESERVED_WITH))
                    {
                        alt5=1;
                    }
                    else if ( (LA5_0 == SQL92_RESERVED_UPDATE))
                    {
                        alt5=2;
                    }
                    else if ( (LA5_0 == SQL92_RESERVED_DELETE))
                    {
                        alt5=3;
                    }
                    else if ( (LA5_0 == SQL92_RESERVED_INSERT))
                    {
                        alt5=4;
                    }
                    else if ( (LA5_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "MERGE")))
                    {
                        alt5=5;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 5 );
                        ex->set_state( 0 );


                        goto ruleexplain_statementEx;

                    }
                }
                switch (alt5)
                {
            	case 1:
            	    // OracleDML.g:144:12: select_statement
            	    {
            	        this->followPush(FOLLOW_select_statement_in_explain_statement871);
            	        select_statement20=select_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            select_statement20_last = select_statement20.tree.get();
            	            stream_select_statement.add(select_statement20.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:145:12: update_statement
            	    {
            	        this->followPush(FOLLOW_update_statement_in_explain_statement884);
            	        update_statement21=update_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            update_statement21_last = update_statement21.tree.get();
            	            stream_update_statement.add(update_statement21.tree);
            	        }

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:146:12: delete_statement
            	    {
            	        this->followPush(FOLLOW_delete_statement_in_explain_statement897);
            	        delete_statement22=delete_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            delete_statement22_last = delete_statement22.tree.get();
            	            stream_delete_statement.add(delete_statement22.tree);
            	        }

            	    }
            	    break;
            	case 4:
            	    // OracleDML.g:147:12: insert_statement
            	    {
            	        this->followPush(FOLLOW_insert_statement_in_explain_statement910);
            	        insert_statement23=insert_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            insert_statement23_last = insert_statement23.tree.get();
            	            stream_insert_statement.add(insert_statement23.tree);
            	        }

            	    }
            	    break;
            	case 5:
            	    // OracleDML.g:148:12: merge_statement
            	    {
            	        this->followPush(FOLLOW_merge_statement_in_explain_statement923);
            	        merge_statement24=merge_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_statement24_last = merge_statement24.tree.get();
            	            stream_merge_statement.add(merge_statement24.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: delete_statement, insert_statement, update_statement, select_statement, merge_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 150:10: -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? )
            {
            	// OracleDML.g:150:13: ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPLAIN_STATEMENT, "EXPLAIN_STATEMENT"), root_1);
            	// OracleDML.g:150:33: ( select_statement )?
            	if ( stream_select_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_statement.nextTree());
            	}
            	stream_select_statement.reset();

            	// OracleDML.g:150:51: ( update_statement )?
            	if ( stream_update_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_statement.nextTree());
            	}
            	stream_update_statement.reset();

            	// OracleDML.g:150:69: ( delete_statement )?
            	if ( stream_delete_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_delete_statement.nextTree());
            	}
            	stream_delete_statement.reset();

            	// OracleDML.g:150:87: ( insert_statement )?
            	if ( stream_insert_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_insert_statement.nextTree());
            	}
            	stream_insert_statement.reset();

            	// OracleDML.g:150:105: ( merge_statement )?
            	if ( stream_merge_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_statement.nextTree());
            	}
            	stream_merge_statement.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleexplain_statementEx; /* Prevent compiler warnings */
    ruleexplain_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end explain_statement */

/**
 * $ANTLR start select_statement
 * OracleDML.g:153:1: select_statement : ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )* -> ^( SELECT_STATEMENT[(ToraType)T_SELECT] ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) ;
 */
OracleDML::select_statement_return
OracleDML::select_statement()
{
    OracleDML::select_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::subquery_factoring_clause_return subquery_factoring_clause25;
    ImplTraits::TreeTypePtr::pointer subquery_factoring_clause25_last = NULL;
    OracleDML::subquery_return subquery26;
    ImplTraits::TreeTypePtr::pointer subquery26_last = NULL;
    OracleDML::for_update_clause_return for_update_clause27;
    ImplTraits::TreeTypePtr::pointer for_update_clause27_last = NULL;
    OracleDML::order_by_clause_return order_by_clause28;
    ImplTraits::TreeTypePtr::pointer order_by_clause28_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_factoring_clause(get_psrstate()->get_treeAdaptor(), "rule subquery_factoring_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_by_clause(get_psrstate()->get_treeAdaptor(), "rule order_by_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_update_clause(get_psrstate()->get_treeAdaptor(), "rule for_update_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:154:5: ( ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )* -> ^( SELECT_STATEMENT[(ToraType)T_SELECT] ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) )
        // OracleDML.g:154:10: ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )*
        {
            // OracleDML.g:154:10: ( subquery_factoring_clause )?
            {
                ANTLR_UINT32 alt6=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WITH:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6)
                {
            	case 1:
            	    // OracleDML.g:154:10: subquery_factoring_clause
            	    {
            	        this->followPush(FOLLOW_subquery_factoring_clause_in_select_statement984);
            	        subquery_factoring_clause25=subquery_factoring_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselect_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery_factoring_clause25_last = subquery_factoring_clause25.tree.get();
            	            stream_subquery_factoring_clause.add(subquery_factoring_clause25.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_subquery_in_select_statement995);
            subquery26=subquery();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleselect_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                subquery26_last = subquery26.tree.get();
                stream_subquery.add(subquery26.tree);
            }

            // OracleDML.g:156:9: ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt7=3;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    ANTLR_UINT32 LA7_0 = this->LA(1);
                    if ( (LA7_0 == SQL92_RESERVED_FOR))
                    {
                        alt7=1;
                    }
                    else if ( (LA7_0 == SQL92_RESERVED_ORDER) && (this->msynpred( antlr3::ClassForwarder<synpred1_OracleDML>() )))
                    {
                        alt7=2;
                    }

                }
                switch (alt7)
                {
            	case 1:
            	    // OracleDML.g:156:10: for_update_clause
            	    {
            	        this->followPush(FOLLOW_for_update_clause_in_select_statement1006);
            	        for_update_clause27=for_update_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselect_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_update_clause27_last = for_update_clause27.tree.get();
            	            stream_for_update_clause.add(for_update_clause27.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:156:28: ( order_key ( siblings_key )? by_key )=> order_by_clause
            	    {
            	        this->followPush(FOLLOW_order_by_clause_in_select_statement1018);
            	        order_by_clause28=order_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselect_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_by_clause28_last = order_by_clause28.tree.get();
            	            stream_order_by_clause.add(order_by_clause28.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: subquery, for_update_clause, subquery_factoring_clause, order_by_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 157:9: -> ^( SELECT_STATEMENT[(ToraType)T_SELECT] ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
            {
            	// OracleDML.g:157:12: ^( SELECT_STATEMENT[(ToraType)T_SELECT] ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_STATEMENT, (ToraType)T_SELECT), root_1);
            	// OracleDML.g:157:51: ( subquery_factoring_clause )?
            	if ( stream_subquery_factoring_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_factoring_clause.nextTree());
            	}
            	stream_subquery_factoring_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	// OracleDML.g:157:87: ( for_update_clause )*
            	while ( stream_for_update_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_for_update_clause.nextTree());
            	}
            	stream_for_update_clause.reset();

            	// OracleDML.g:157:106: ( order_by_clause )*
            	while ( stream_order_by_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_order_by_clause.nextTree());
            	}
            	stream_order_by_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleselect_statementEx; /* Prevent compiler warnings */
    ruleselect_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end select_statement */

/**
 * $ANTLR start subquery_factoring_clause
 * OracleDML.g:161:1: subquery_factoring_clause : with_key ^ factoring_element ( COMMA ! factoring_element )* ;
 */
OracleDML::subquery_factoring_clause_return
OracleDML::subquery_factoring_clause()
{
    OracleDML::subquery_factoring_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA31 = NULL;
    OracleDML_OracleDMLKeys::with_key_return with_key29;
    ImplTraits::TreeTypePtr::pointer with_key29_last = NULL;
    OracleDML::factoring_element_return factoring_element30;
    ImplTraits::TreeTypePtr::pointer factoring_element30_last = NULL;
    OracleDML::factoring_element_return factoring_element32;
    ImplTraits::TreeTypePtr::pointer factoring_element32_last = NULL;
    ImplTraits::TreeTypePtr COMMA31_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:162:5: ( with_key ^ factoring_element ( COMMA ! factoring_element )* )
        // OracleDML.g:162:10: with_key ^ factoring_element ( COMMA ! factoring_element )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_with_key_in_subquery_factoring_clause1069);
            with_key29=with_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubquery_factoring_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(with_key29.tree, root_0);

            this->followPush(FOLLOW_factoring_element_in_subquery_factoring_clause1072);
            factoring_element30=factoring_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubquery_factoring_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, factoring_element30.tree);


            // OracleDML.g:162:38: ( COMMA ! factoring_element )*

            for (;;)
            {
                ANTLR_UINT32 alt8=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8)
                {
            	case 1:
            	    // OracleDML.g:162:39: COMMA ! factoring_element
            	    {
            	        COMMA31 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_subquery_factoring_clause1075);
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_factoring_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_factoring_element_in_subquery_factoring_clause1078);
            	        factoring_element32=factoring_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_factoring_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, factoring_element32.tree);


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesubquery_factoring_clauseEx; /* Prevent compiler warnings */
    rulesubquery_factoring_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery_factoring_clause */

/**
 * $ANTLR start factoring_element
 * OracleDML.g:165:1: factoring_element : query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )? -> ^( FACTORING query_name ( column_name )* subquery ( search_clause )? ( cycle_clause )? ) ;
 */
OracleDML::factoring_element_return
OracleDML::factoring_element()
{
    OracleDML::factoring_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN34 = NULL;
    ImplTraits::CommonTokenType const* COMMA36 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN38 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN40 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN43 = NULL;
    OracleDML_OracleDMLCommons::query_name_return query_name33;
    ImplTraits::TreeTypePtr::pointer query_name33_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name35;
    ImplTraits::TreeTypePtr::pointer column_name35_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name37;
    ImplTraits::TreeTypePtr::pointer column_name37_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key39;
    ImplTraits::TreeTypePtr::pointer as_key39_last = NULL;
    OracleDML::subquery_return subquery41;
    ImplTraits::TreeTypePtr::pointer subquery41_last = NULL;
    OracleDML::order_by_clause_return order_by_clause42;
    ImplTraits::TreeTypePtr::pointer order_by_clause42_last = NULL;
    OracleDML::search_clause_return search_clause44;
    ImplTraits::TreeTypePtr::pointer search_clause44_last = NULL;
    OracleDML::cycle_clause_return cycle_clause45;
    ImplTraits::TreeTypePtr::pointer cycle_clause45_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN34_tree;
    ImplTraits::TreeTypePtr COMMA36_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN38_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN40_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN43_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_by_clause(get_psrstate()->get_treeAdaptor(), "rule order_by_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_cycle_clause(get_psrstate()->get_treeAdaptor(), "rule cycle_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_search_clause(get_psrstate()->get_treeAdaptor(), "rule search_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_as_key(get_psrstate()->get_treeAdaptor(), "rule as_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_query_name(get_psrstate()->get_treeAdaptor(), "rule query_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:166:5: ( query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )? -> ^( FACTORING query_name ( column_name )* subquery ( search_clause )? ( cycle_clause )? ) )
        // OracleDML.g:166:10: query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )?
        {
            this->followPush(FOLLOW_query_name_in_factoring_element1100);
            query_name33=query_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                query_name33_last = query_name33.tree.get();
                stream_query_name.add(query_name33.tree);
            }

            // OracleDML.g:166:21: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            {
                ANTLR_UINT32 alt10=2;
                switch ( this->LA(1) )
                {
                    case LEFT_PAREN:
                    	{
                    		alt10=1;
                    	}
                        break;
                }

                switch (alt10)
                {
            	case 1:
            	    // OracleDML.g:166:22: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN34 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_factoring_element1103);
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN34);


            	        this->followPush(FOLLOW_column_name_in_factoring_element1105);
            	        column_name35=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name35_last = column_name35.tree.get();
            	            stream_column_name.add(column_name35.tree);
            	        }

            	        // OracleDML.g:166:45: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt9=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt9=1;
            	            	}
            	                break;

            	            }

            	            switch (alt9)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:166:46: COMMA column_name
            	        	    {
            	        	        COMMA36 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_factoring_element1108);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulefactoring_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA36);


            	        	        this->followPush(FOLLOW_column_name_in_factoring_element1110);
            	        	        column_name37=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulefactoring_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name37_last = column_name37.tree.get();
            	        	            stream_column_name.add(column_name37.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop9;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop9: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN38 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_factoring_element1114);
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN38);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_as_key_in_factoring_element1118);
            as_key39=as_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                as_key39_last = as_key39.tree.get();
                stream_as_key.add(as_key39.tree);
            }

            LEFT_PAREN40 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_factoring_element1120);
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN40);


            this->followPush(FOLLOW_subquery_in_factoring_element1122);
            subquery41=subquery();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                subquery41_last = subquery41.tree.get();
                stream_subquery.add(subquery41.tree);
            }

            // OracleDML.g:166:107: ( order_by_clause )?
            {
                ANTLR_UINT32 alt11=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ORDER:
                    	{
                    		alt11=1;
                    	}
                        break;
                }

                switch (alt11)
                {
            	case 1:
            	    // OracleDML.g:166:107: order_by_clause
            	    {
            	        this->followPush(FOLLOW_order_by_clause_in_factoring_element1124);
            	        order_by_clause42=order_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_by_clause42_last = order_by_clause42.tree.get();
            	            stream_order_by_clause.add(order_by_clause42.tree);
            	        }

            	    }
            	    break;

                }
            }

            RIGHT_PAREN43 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_factoring_element1127);
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN43);


            // OracleDML.g:167:10: ( search_clause )?
            {
                ANTLR_UINT32 alt12=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case REGULAR_ID:
                    		    	{
                    		    		switch ( this->LA(3) )
                    		    		{
                    		    		    case REGULAR_ID:
                    		    		    	{
                    		    		    		switch ( this->LA(4) )
                    		    		    		{
                    		    		    		    case SQL92_RESERVED_BY:
                    		    		    		    	{
                    		    		    		    		alt12=1;
                    		    		    		    	}
                    		    		    		        break;
                    		    		    		}

                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt12)
                {
            	case 1:
            	    // OracleDML.g:167:10: search_clause
            	    {
            	        this->followPush(FOLLOW_search_clause_in_factoring_element1138);
            	        search_clause44=search_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            search_clause44_last = search_clause44.tree.get();
            	            stream_search_clause.add(search_clause44.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:168:10: ( cycle_clause )?
            {
                ANTLR_UINT32 alt13=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		alt13=1;
                    	}
                        break;
                }

                switch (alt13)
                {
            	case 1:
            	    // OracleDML.g:168:10: cycle_clause
            	    {
            	        this->followPush(FOLLOW_cycle_clause_in_factoring_element1150);
            	        cycle_clause45=cycle_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            cycle_clause45_last = cycle_clause45.tree.get();
            	            stream_cycle_clause.add(cycle_clause45.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: cycle_clause, search_clause, subquery, query_name, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 169:9: -> ^( FACTORING query_name ( column_name )* subquery ( search_clause )? ( cycle_clause )? )
            {
            	// OracleDML.g:169:12: ^( FACTORING query_name ( column_name )* subquery ( search_clause )? ( cycle_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(FACTORING, "FACTORING"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_query_name.nextTree());
            	// OracleDML.g:169:35: ( column_name )*
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	// OracleDML.g:169:57: ( search_clause )?
            	if ( stream_search_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_search_clause.nextTree());
            	}
            	stream_search_clause.reset();

            	// OracleDML.g:169:72: ( cycle_clause )?
            	if ( stream_cycle_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cycle_clause.nextTree());
            	}
            	stream_cycle_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefactoring_elementEx; /* Prevent compiler warnings */
    rulefactoring_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end factoring_element */

/**
 * $ANTLR start search_clause
 * OracleDML.g:172:1: search_clause : search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name ;
 */
OracleDML::search_clause_return
OracleDML::search_clause()
{
    OracleDML::search_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA58 = NULL;
    OracleDML_OracleDMLKeys::search_key_return search_key46;
    ImplTraits::TreeTypePtr::pointer search_key46_last = NULL;
    OracleDML_OracleDMLKeys::depth_key_return depth_key47;
    ImplTraits::TreeTypePtr::pointer depth_key47_last = NULL;
    OracleDML_OracleDMLKeys::breadth_key_return breadth_key48;
    ImplTraits::TreeTypePtr::pointer breadth_key48_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key49;
    ImplTraits::TreeTypePtr::pointer first_key49_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key50;
    ImplTraits::TreeTypePtr::pointer by_key50_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name51;
    ImplTraits::TreeTypePtr::pointer column_name51_last = NULL;
    OracleDML_OracleDMLKeys::asc_key_return asc_key52;
    ImplTraits::TreeTypePtr::pointer asc_key52_last = NULL;
    OracleDML_OracleDMLKeys::desc_key_return desc_key53;
    ImplTraits::TreeTypePtr::pointer desc_key53_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key54;
    ImplTraits::TreeTypePtr::pointer nulls_key54_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key55;
    ImplTraits::TreeTypePtr::pointer first_key55_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key56;
    ImplTraits::TreeTypePtr::pointer nulls_key56_last = NULL;
    OracleDML_OracleDMLKeys::last_key_return last_key57;
    ImplTraits::TreeTypePtr::pointer last_key57_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name59;
    ImplTraits::TreeTypePtr::pointer column_name59_last = NULL;
    OracleDML_OracleDMLKeys::asc_key_return asc_key60;
    ImplTraits::TreeTypePtr::pointer asc_key60_last = NULL;
    OracleDML_OracleDMLKeys::desc_key_return desc_key61;
    ImplTraits::TreeTypePtr::pointer desc_key61_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key62;
    ImplTraits::TreeTypePtr::pointer nulls_key62_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key63;
    ImplTraits::TreeTypePtr::pointer first_key63_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key64;
    ImplTraits::TreeTypePtr::pointer nulls_key64_last = NULL;
    OracleDML_OracleDMLKeys::last_key_return last_key65;
    ImplTraits::TreeTypePtr::pointer last_key65_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key66;
    ImplTraits::TreeTypePtr::pointer set_key66_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name67;
    ImplTraits::TreeTypePtr::pointer column_name67_last = NULL;
    ImplTraits::TreeTypePtr COMMA58_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:173:5: ( search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name )
        // OracleDML.g:173:10: search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_search_key_in_search_clause1198);
            search_key46=search_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, search_key46.tree);


            // OracleDML.g:173:21: ( depth_key | breadth_key )
            {
                ANTLR_UINT32 alt14=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA14_1 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "DEPTH")))
                		    {
                		        alt14=1;
                		    }
                		    else if ( ((toUpper(LT(1)->getText()) == "BREADTH")))
                		    {
                		        alt14=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 14 );
                		        ex->set_state( 1 );


                		        goto rulesearch_clauseEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 14 );
                    ex->set_state( 0 );


                    goto rulesearch_clauseEx;

                }

                switch (alt14)
                {
            	case 1:
            	    // OracleDML.g:173:23: depth_key
            	    {
            	        this->followPush(FOLLOW_depth_key_in_search_clause1202);
            	        depth_key47=depth_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, depth_key47.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:173:35: breadth_key
            	    {
            	        this->followPush(FOLLOW_breadth_key_in_search_clause1206);
            	        breadth_key48=breadth_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, breadth_key48.tree);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_first_key_in_search_clause1210);
            first_key49=first_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, first_key49.tree);


            this->followPush(FOLLOW_by_key_in_search_clause1212);
            by_key50=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, by_key50.tree);


            this->followPush(FOLLOW_column_name_in_search_clause1227);
            column_name51=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name51.tree);


            // OracleDML.g:174:26: ( asc_key )?
            {
                ANTLR_UINT32 alt15=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ASC:
                    	{
                    		alt15=1;
                    	}
                        break;
                }

                switch (alt15)
                {
            	case 1:
            	    // OracleDML.g:174:26: asc_key
            	    {
            	        this->followPush(FOLLOW_asc_key_in_search_clause1229);
            	        asc_key52=asc_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, asc_key52.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:174:36: ( desc_key )?
            {
                ANTLR_UINT32 alt16=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_DESC:
                    	{
                    		alt16=1;
                    	}
                        break;
                }

                switch (alt16)
                {
            	case 1:
            	    // OracleDML.g:174:36: desc_key
            	    {
            	        this->followPush(FOLLOW_desc_key_in_search_clause1233);
            	        desc_key53=desc_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, desc_key53.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:174:47: ( nulls_key first_key )?
            {
                ANTLR_UINT32 alt17=2;
                {
                    ANTLR_UINT32 LA17_0 = this->LA(1);
                    if ( (LA17_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))))
                    {
                        {
                            ANTLR_UINT32 LA17_1 = this->LA(2);
                            if ( (LA17_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))))
                            {
                                {
                                    ANTLR_UINT32 LA17_3 = this->LA(3);
                                    if ( ((toUpper(LT(1)->getText()) == "NULLS")))
                                    {
                                        alt17=1;
                                    }
                                }
                            }
                        }
                    }
                }
                switch (alt17)
                {
            	case 1:
            	    // OracleDML.g:174:48: nulls_key first_key
            	    {
            	        this->followPush(FOLLOW_nulls_key_in_search_clause1238);
            	        nulls_key54=nulls_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nulls_key54.tree);


            	        this->followPush(FOLLOW_first_key_in_search_clause1240);
            	        first_key55=first_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, first_key55.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:174:70: ( nulls_key last_key )?
            {
                ANTLR_UINT32 alt18=2;
                alt18 = cdfa18.predict(this, this->get_rec(), this->get_istream(), cdfa18 );
                if  (this->hasException())
                {
                    goto rulesearch_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                switch (alt18)
                {
            	case 1:
            	    // OracleDML.g:174:71: nulls_key last_key
            	    {
            	        this->followPush(FOLLOW_nulls_key_in_search_clause1245);
            	        nulls_key56=nulls_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nulls_key56.tree);


            	        this->followPush(FOLLOW_last_key_in_search_clause1247);
            	        last_key57=last_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, last_key57.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:175:14: ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )*

            for (;;)
            {
                ANTLR_UINT32 alt23=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt23=1;
                	}
                    break;

                }

                switch (alt23)
                {
            	case 1:
            	    // OracleDML.g:175:15: COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )?
            	    {
            	        COMMA58 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_search_clause1265);
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        COMMA58_tree = std::move(get_psrstate()->get_treeAdaptor()->create(COMMA58));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, COMMA58_tree);
            	        }


            	        this->followPush(FOLLOW_column_name_in_search_clause1267);
            	        column_name59=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name59.tree);


            	        // OracleDML.g:175:33: ( asc_key )?
            	        {
            	            ANTLR_UINT32 alt19=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_ASC:
            	                	{
            	                		alt19=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt19)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:175:33: asc_key
            	        	    {
            	        	        this->followPush(FOLLOW_asc_key_in_search_clause1269);
            	        	        asc_key60=asc_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, asc_key60.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:175:43: ( desc_key )?
            	        {
            	            ANTLR_UINT32 alt20=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_DESC:
            	                	{
            	                		alt20=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt20)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:175:43: desc_key
            	        	    {
            	        	        this->followPush(FOLLOW_desc_key_in_search_clause1273);
            	        	        desc_key61=desc_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, desc_key61.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:175:54: ( nulls_key first_key )?
            	        {
            	            ANTLR_UINT32 alt21=2;
            	            {
            	                ANTLR_UINT32 LA21_0 = this->LA(1);
            	                if ( (LA21_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA21_1 = this->LA(2);
            	                        if ( (LA21_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))))
            	                        {
            	                            {
            	                                ANTLR_UINT32 LA21_3 = this->LA(3);
            	                                if ( ((toUpper(LT(1)->getText()) == "NULLS")))
            	                                {
            	                                    alt21=1;
            	                                }
            	                            }
            	                        }
            	                    }
            	                }
            	            }
            	            switch (alt21)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:175:55: nulls_key first_key
            	        	    {
            	        	        this->followPush(FOLLOW_nulls_key_in_search_clause1278);
            	        	        nulls_key62=nulls_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nulls_key62.tree);


            	        	        this->followPush(FOLLOW_first_key_in_search_clause1280);
            	        	        first_key63=first_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, first_key63.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:175:77: ( nulls_key last_key )?
            	        {
            	            ANTLR_UINT32 alt22=2;
            	            alt22 = cdfa22.predict(this, this->get_rec(), this->get_istream(), cdfa22 );
            	            if  (this->hasException())
            	            {
            	                goto rulesearch_clauseEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            switch (alt22)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:175:78: nulls_key last_key
            	        	    {
            	        	        this->followPush(FOLLOW_nulls_key_in_search_clause1285);
            	        	        nulls_key64=nulls_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nulls_key64.tree);


            	        	        this->followPush(FOLLOW_last_key_in_search_clause1287);
            	        	        last_key65=last_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, last_key65.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop23;	/* break out of the loop */
            	    break;
                }
            }
            loop23: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_set_key_in_search_clause1307);
            set_key66=set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, set_key66.tree);


            this->followPush(FOLLOW_column_name_in_search_clause1309);
            column_name67=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name67.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesearch_clauseEx; /* Prevent compiler warnings */
    rulesearch_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end search_clause */

/**
 * $ANTLR start cycle_clause
 * OracleDML.g:179:1: cycle_clause : cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression ;
 */
OracleDML::cycle_clause_return
OracleDML::cycle_clause()
{
    OracleDML::cycle_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA70 = NULL;
    OracleDML_OracleDMLKeys::cycle_key_return cycle_key68;
    ImplTraits::TreeTypePtr::pointer cycle_key68_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name69;
    ImplTraits::TreeTypePtr::pointer column_name69_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name71;
    ImplTraits::TreeTypePtr::pointer column_name71_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key72;
    ImplTraits::TreeTypePtr::pointer set_key72_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name73;
    ImplTraits::TreeTypePtr::pointer column_name73_last = NULL;
    OracleDML_OracleDMLKeys::to_key_return to_key74;
    ImplTraits::TreeTypePtr::pointer to_key74_last = NULL;
    OracleDML::expression_return expression75;
    ImplTraits::TreeTypePtr::pointer expression75_last = NULL;
    OracleDML_OracleDMLKeys::default_key_return default_key76;
    ImplTraits::TreeTypePtr::pointer default_key76_last = NULL;
    OracleDML::expression_return expression77;
    ImplTraits::TreeTypePtr::pointer expression77_last = NULL;
    ImplTraits::TreeTypePtr COMMA70_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:180:5: ( cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression )
        // OracleDML.g:180:10: cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_cycle_key_in_cycle_clause1329);
            cycle_key68=cycle_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cycle_key68.tree);


            this->followPush(FOLLOW_column_name_in_cycle_clause1331);
            column_name69=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name69.tree);


            // OracleDML.g:180:32: ( COMMA column_name )*

            for (;;)
            {
                ANTLR_UINT32 alt24=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt24=1;
                	}
                    break;

                }

                switch (alt24)
                {
            	case 1:
            	    // OracleDML.g:180:34: COMMA column_name
            	    {
            	        COMMA70 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_cycle_clause1335);
            	        if  (this->hasException())
            	        {
            	            goto rulecycle_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        COMMA70_tree = std::move(get_psrstate()->get_treeAdaptor()->create(COMMA70));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, COMMA70_tree);
            	        }


            	        this->followPush(FOLLOW_column_name_in_cycle_clause1337);
            	        column_name71=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecycle_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name71.tree);


            	    }
            	    break;

            	default:
            	    goto loop24;	/* break out of the loop */
            	    break;
                }
            }
            loop24: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_set_key_in_cycle_clause1341);
            set_key72=set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, set_key72.tree);


            this->followPush(FOLLOW_column_name_in_cycle_clause1343);
            column_name73=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name73.tree);


            this->followPush(FOLLOW_to_key_in_cycle_clause1345);
            to_key74=to_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, to_key74.tree);


            this->followPush(FOLLOW_expression_in_cycle_clause1347);
            expression75=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression75.tree);


            this->followPush(FOLLOW_default_key_in_cycle_clause1349);
            default_key76=default_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, default_key76.tree);


            this->followPush(FOLLOW_expression_in_cycle_clause1351);
            expression77=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression77.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecycle_clauseEx; /* Prevent compiler warnings */
    rulecycle_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cycle_clause */

/**
 * $ANTLR start subquery
 * OracleDML.g:183:1: subquery : subquery_basic_elements ( subquery_operation_part )* -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) ;
 */
OracleDML::subquery_return
OracleDML::subquery()
{
    OracleDML::subquery_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::subquery_basic_elements_return subquery_basic_elements78;
    ImplTraits::TreeTypePtr::pointer subquery_basic_elements78_last = NULL;
    OracleDML::subquery_operation_part_return subquery_operation_part79;
    ImplTraits::TreeTypePtr::pointer subquery_operation_part79_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_operation_part(get_psrstate()->get_treeAdaptor(), "rule subquery_operation_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_basic_elements(get_psrstate()->get_treeAdaptor(), "rule subquery_basic_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:184:5: ( subquery_basic_elements ( subquery_operation_part )* -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) )
        // OracleDML.g:184:10: subquery_basic_elements ( subquery_operation_part )*
        {
            this->followPush(FOLLOW_subquery_basic_elements_in_subquery1371);
            subquery_basic_elements78=subquery_basic_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubqueryEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                subquery_basic_elements78_last = subquery_basic_elements78.tree.get();
                stream_subquery_basic_elements.add(subquery_basic_elements78.tree);
            }

            // OracleDML.g:184:34: ( subquery_operation_part )*

            for (;;)
            {
                ANTLR_UINT32 alt25=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_MINUS:
                case SQL92_RESERVED_INTERSECT:
                case SQL92_RESERVED_UNION:
                	{
                		alt25=1;
                	}
                    break;

                }

                switch (alt25)
                {
            	case 1:
            	    // OracleDML.g:184:34: subquery_operation_part
            	    {
            	        this->followPush(FOLLOW_subquery_operation_part_in_subquery1373);
            	        subquery_operation_part79=subquery_operation_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubqueryEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery_operation_part79_last = subquery_operation_part79.tree.get();
            	            stream_subquery_operation_part.add(subquery_operation_part79.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop25;	/* break out of the loop */
            	    break;
                }
            }
            loop25: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: subquery_operation_part, subquery_basic_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 185:9: -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
            {
            	// OracleDML.g:185:12: ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SUBQUERY, "SUBQUERY"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_basic_elements.nextTree());
            	// OracleDML.g:185:47: ( subquery_operation_part )*
            	while ( stream_subquery_operation_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_operation_part.nextTree());
            	}
            	stream_subquery_operation_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesubqueryEx; /* Prevent compiler warnings */
    rulesubqueryEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery */

/**
 * $ANTLR start subquery_operation_part
 * OracleDML.g:188:1: subquery_operation_part : ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^) subquery_basic_elements ;
 */
OracleDML::subquery_operation_part_return
OracleDML::subquery_operation_part()
{
    OracleDML::subquery_operation_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::union_key_return union_key80;
    ImplTraits::TreeTypePtr::pointer union_key80_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key81;
    ImplTraits::TreeTypePtr::pointer all_key81_last = NULL;
    OracleDML_OracleDMLKeys::intersect_key_return intersect_key82;
    ImplTraits::TreeTypePtr::pointer intersect_key82_last = NULL;
    OracleDML_OracleDMLKeys::minus_key_return minus_key83;
    ImplTraits::TreeTypePtr::pointer minus_key83_last = NULL;
    OracleDML::subquery_basic_elements_return subquery_basic_elements84;
    ImplTraits::TreeTypePtr::pointer subquery_basic_elements84_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:189:5: ( ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^) subquery_basic_elements )
        // OracleDML.g:189:10: ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^) subquery_basic_elements
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:189:10: ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^)
            {
                ANTLR_UINT32 alt27=3;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_UNION:
                	{
                		alt27=1;
                	}
                    break;
                case SQL92_RESERVED_INTERSECT:
                	{
                		alt27=2;
                	}
                    break;
                case PLSQL_RESERVED_MINUS:
                	{
                		alt27=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 27 );
                    ex->set_state( 0 );


                    goto rulesubquery_operation_partEx;

                }

                switch (alt27)
                {
            	case 1:
            	    // OracleDML.g:189:11: union_key ^ ( all_key )?
            	    {
            	        this->followPush(FOLLOW_union_key_in_subquery_operation_part1414);
            	        union_key80=union_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_operation_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(union_key80.tree, root_0);

            	        // OracleDML.g:189:22: ( all_key )?
            	        {
            	            ANTLR_UINT32 alt26=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_ALL:
            	                	{
            	                		alt26=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt26)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:189:22: all_key
            	        	    {
            	        	        this->followPush(FOLLOW_all_key_in_subquery_operation_part1417);
            	        	        all_key81=all_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesubquery_operation_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, all_key81.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:189:31: intersect_key ^
            	    {
            	        this->followPush(FOLLOW_intersect_key_in_subquery_operation_part1420);
            	        intersect_key82=intersect_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_operation_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(intersect_key82.tree, root_0);

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:189:46: minus_key ^
            	    {
            	        this->followPush(FOLLOW_minus_key_in_subquery_operation_part1423);
            	        minus_key83=minus_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_operation_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(minus_key83.tree, root_0);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_subquery_basic_elements_in_subquery_operation_part1427);
            subquery_basic_elements84=subquery_basic_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubquery_operation_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery_basic_elements84.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesubquery_operation_partEx; /* Prevent compiler warnings */
    rulesubquery_operation_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery_operation_part */

/**
 * $ANTLR start subquery_basic_elements
 * OracleDML.g:192:1: subquery_basic_elements : ( query_block | LEFT_PAREN ^ subquery RIGHT_PAREN );
 */
OracleDML::subquery_basic_elements_return
OracleDML::subquery_basic_elements()
{
    OracleDML::subquery_basic_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN86 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN88 = NULL;
    OracleDML::query_block_return query_block85;
    ImplTraits::TreeTypePtr::pointer query_block85_last = NULL;
    OracleDML::subquery_return subquery87;
    ImplTraits::TreeTypePtr::pointer subquery87_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN86_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN88_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:193:5: ( query_block | LEFT_PAREN ^ subquery RIGHT_PAREN )

            ANTLR_UINT32 alt28;

            alt28=2;

            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt28=1;
            	}
                break;
            case LEFT_PAREN:
            	{
            		alt28=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 28 );
                ex->set_state( 0 );


                goto rulesubquery_basic_elementsEx;

            }

            switch (alt28)
            {
        	case 1:
        	    // OracleDML.g:193:10: query_block
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_query_block_in_subquery_basic_elements1447);
        	        query_block85=query_block();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesubquery_basic_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, query_block85.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:194:10: LEFT_PAREN ^ subquery RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        LEFT_PAREN86 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_subquery_basic_elements1458);
        	        if  (this->hasException())
        	        {
        	            goto rulesubquery_basic_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN86_tree = get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN86);
        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(LEFT_PAREN86_tree, root_0);
        	        }


        	        this->followPush(FOLLOW_subquery_in_subquery_basic_elements1461);
        	        subquery87=subquery();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesubquery_basic_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery87.tree);


        	        RIGHT_PAREN88 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1463);
        	        if  (this->hasException())
        	        {
        	            goto rulesubquery_basic_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN88_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN88));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN88_tree);
        	        }


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulesubquery_basic_elementsEx; /* Prevent compiler warnings */
    rulesubquery_basic_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery_basic_elements */

/**
 * $ANTLR start query_block
 * OracleDML.g:197:1: query_block : select_key selected_list ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? -> ^( select_key selected_list ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) ;
 */
OracleDML::query_block_return
OracleDML::query_block()
{
    OracleDML::query_block_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::select_key_return select_key89;
    ImplTraits::TreeTypePtr::pointer select_key89_last = NULL;
    OracleDML::selected_list_return selected_list90;
    ImplTraits::TreeTypePtr::pointer selected_list90_last = NULL;
    OracleDML_OracleDMLCommons::into_clause_return into_clause91;
    ImplTraits::TreeTypePtr::pointer into_clause91_last = NULL;
    OracleDML::from_clause_return from_clause92;
    ImplTraits::TreeTypePtr::pointer from_clause92_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause93;
    ImplTraits::TreeTypePtr::pointer where_clause93_last = NULL;
    OracleDML::hierarchical_query_clause_return hierarchical_query_clause94;
    ImplTraits::TreeTypePtr::pointer hierarchical_query_clause94_last = NULL;
    OracleDML::group_by_clause_return group_by_clause95;
    ImplTraits::TreeTypePtr::pointer group_by_clause95_last = NULL;
    OracleDML::model_clause_return model_clause96;
    ImplTraits::TreeTypePtr::pointer model_clause96_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_from_clause(get_psrstate()->get_treeAdaptor(), "rule from_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_where_clause(get_psrstate()->get_treeAdaptor(), "rule where_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_clause(get_psrstate()->get_treeAdaptor(), "rule into_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_group_by_clause(get_psrstate()->get_treeAdaptor(), "rule group_by_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_selected_list(get_psrstate()->get_treeAdaptor(), "rule selected_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_clause(get_psrstate()->get_treeAdaptor(), "rule model_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_key(get_psrstate()->get_treeAdaptor(), "rule select_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_hierarchical_query_clause(get_psrstate()->get_treeAdaptor(), "rule hierarchical_query_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:198:5: ( select_key selected_list ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? -> ^( select_key selected_list ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) )
        // OracleDML.g:198:9: select_key selected_list ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )?
        {
            this->followPush(FOLLOW_select_key_in_query_block1482);
            select_key89=select_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_blockEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_key89_last = select_key89.tree.get();
                stream_select_key.add(select_key89.tree);
            }

            this->followPush(FOLLOW_selected_list_in_query_block1492);
            selected_list90=selected_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_blockEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                selected_list90_last = selected_list90.tree.get();
                stream_selected_list.add(selected_list90.tree);
            }

            // OracleDML.g:200:9: ( into_clause )?
            {
                ANTLR_UINT32 alt29=2;
                {
                    ANTLR_UINT32 LA29_0 = this->LA(1);
                    if ( (LA29_0 == SQL92_RESERVED_INTO))
                    {
                        alt29=1;
                    }
                    else if ( (LA29_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "BULK")))
                    {
                        alt29=1;
                    }
                }
                switch (alt29)
                {
            	case 1:
            	    // OracleDML.g:200:9: into_clause
            	    {
            	        this->followPush(FOLLOW_into_clause_in_query_block1502);
            	        into_clause91=into_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            into_clause91_last = into_clause91.tree.get();
            	            stream_into_clause.add(into_clause91.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_from_clause_in_query_block1513);
            from_clause92=from_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_blockEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                from_clause92_last = from_clause92.tree.get();
                stream_from_clause.add(from_clause92.tree);
            }

            // OracleDML.g:202:9: ( where_clause )?
            {
                ANTLR_UINT32 alt30=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt30=1;
                    	}
                        break;
                }

                switch (alt30)
                {
            	case 1:
            	    // OracleDML.g:202:9: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_query_block1524);
            	        where_clause93=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            where_clause93_last = where_clause93.tree.get();
            	            stream_where_clause.add(where_clause93.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:203:9: ( hierarchical_query_clause )?
            {
                ANTLR_UINT32 alt31=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_CONNECT:
                    	{
                    		alt31=1;
                    	}
                        break;
                    case PLSQL_RESERVED_START:
                    	{
                    		alt31=1;
                    	}
                        break;
                }

                switch (alt31)
                {
            	case 1:
            	    // OracleDML.g:203:9: hierarchical_query_clause
            	    {
            	        this->followPush(FOLLOW_hierarchical_query_clause_in_query_block1536);
            	        hierarchical_query_clause94=hierarchical_query_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            hierarchical_query_clause94_last = hierarchical_query_clause94.tree.get();
            	            stream_hierarchical_query_clause.add(hierarchical_query_clause94.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:204:9: ( group_by_clause )?
            {
                ANTLR_UINT32 alt32=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_GROUP:
                    	{
                    		alt32=1;
                    	}
                        break;
                    case SQL92_RESERVED_HAVING:
                    	{
                    		alt32=1;
                    	}
                        break;
                }

                switch (alt32)
                {
            	case 1:
            	    // OracleDML.g:204:9: group_by_clause
            	    {
            	        this->followPush(FOLLOW_group_by_clause_in_query_block1548);
            	        group_by_clause95=group_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            group_by_clause95_last = group_by_clause95.tree.get();
            	            stream_group_by_clause.add(group_by_clause95.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:205:9: ( model_clause )?
            {
                ANTLR_UINT32 alt33=2;
                switch ( this->LA(1) )
                {
                    case PLSQL_NON_RESERVED_MODEL:
                    	{
                    		alt33=1;
                    	}
                        break;
                }

                switch (alt33)
                {
            	case 1:
            	    // OracleDML.g:205:9: model_clause
            	    {
            	        this->followPush(FOLLOW_model_clause_in_query_block1559);
            	        model_clause96=model_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_clause96_last = model_clause96.tree.get();
            	            stream_model_clause.add(model_clause96.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: hierarchical_query_clause, selected_list, select_key, into_clause, where_clause, group_by_clause, model_clause, from_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 206:9: -> ^( select_key selected_list ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            {
            	// OracleDML.g:206:12: ^( select_key selected_list ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_select_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_selected_list.nextTree());
            	// OracleDML.g:206:39: ( into_clause )?
            	if ( stream_into_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_into_clause.nextTree());
            	}
            	stream_into_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_from_clause.nextTree());
            	// OracleDML.g:206:64: ( where_clause )?
            	if ( stream_where_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_where_clause.nextTree());
            	}
            	stream_where_clause.reset();

            	// OracleDML.g:206:78: ( hierarchical_query_clause )?
            	if ( stream_hierarchical_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_hierarchical_query_clause.nextTree());
            	}
            	stream_hierarchical_query_clause.reset();

            	// OracleDML.g:206:105: ( group_by_clause )?
            	if ( stream_group_by_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_group_by_clause.nextTree());
            	}
            	stream_group_by_clause.reset();

            	// OracleDML.g:206:122: ( model_clause )?
            	if ( stream_model_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_clause.nextTree());
            	}
            	stream_model_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulequery_blockEx; /* Prevent compiler warnings */
    rulequery_blockEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end query_block */

/**
 * $ANTLR start selected_list
 * OracleDML.g:209:1: selected_list : ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( selected_element_seq )* ) -> { mode == 1}? ^( SELECT_LIST ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ) -> ^( SELECT_LIST ( distinct_key )? ( unique_key )? ( all_key )? selected_element ( selected_element_seq )* ) ;
 */
OracleDML::selected_list_return
OracleDML::selected_list()
{
    OracleDML::selected_list_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* ASTERISK100 = NULL;
    OracleDML_OracleDMLKeys::distinct_key_return distinct_key97;
    ImplTraits::TreeTypePtr::pointer distinct_key97_last = NULL;
    OracleDML_OracleDMLKeys::unique_key_return unique_key98;
    ImplTraits::TreeTypePtr::pointer unique_key98_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key99;
    ImplTraits::TreeTypePtr::pointer all_key99_last = NULL;
    OracleDML::selected_element_return selected_element101;
    ImplTraits::TreeTypePtr::pointer selected_element101_last = NULL;
    OracleDML::selected_element_seq_return selected_element_seq102;
    ImplTraits::TreeTypePtr::pointer selected_element_seq102_last = NULL;
    ImplTraits::TreeTypePtr ASTERISK100_tree;
    RewriteRuleTokenStream<ImplTraits> stream_ASTERISK(get_psrstate()->get_treeAdaptor(), "token ASTERISK");
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_selected_element_seq(get_psrstate()->get_treeAdaptor(), "rule selected_element_seq");
    RewriteRuleSubtreeStream<ImplTraits> stream_distinct_key(get_psrstate()->get_treeAdaptor(), "rule distinct_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_selected_element(get_psrstate()->get_treeAdaptor(), "rule selected_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_unique_key(get_psrstate()->get_treeAdaptor(), "rule unique_key");

    /* Initialize rule variables
     */

     int mode = 0; 
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:211:5: ( ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( selected_element_seq )* ) -> { mode == 1}? ^( SELECT_LIST ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ) -> ^( SELECT_LIST ( distinct_key )? ( unique_key )? ( all_key )? selected_element ( selected_element_seq )* ) )
        // OracleDML.g:212:9: ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( selected_element_seq )* )
        {
            // OracleDML.g:212:9: ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )?
            {
                ANTLR_UINT32 alt35=2;
                {
                    ANTLR_UINT32 LA35_0 = this->LA(1);
                    if ( (LA35_0 == SQL92_RESERVED_DISTINCT))
                    {
                        {
                            ANTLR_UINT32 LA35_1 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred2_OracleDML>() )))
                            {
                                alt35=1;
                            }
                        }
                    }
                    else if ( (LA35_0 == SQL92_RESERVED_UNIQUE) && (this->msynpred( antlr3::ClassForwarder<synpred2_OracleDML>() )))
                    {
                        alt35=1;
                    }
                    else if ( (LA35_0 == SQL92_RESERVED_ALL))
                    {
                        {
                            ANTLR_UINT32 LA35_3 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred2_OracleDML>() )))
                            {
                                alt35=1;
                            }
                        }
                    }
                }
                switch (alt35)
                {
            	case 1:
            	    // OracleDML.g:212:10: ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key )
            	    {
            	        // OracleDML.g:212:46: ( distinct_key | unique_key | all_key )
            	        {
            	            ANTLR_UINT32 alt34=3;
            	            switch ( this->LA(1) )
            	            {
            	            case SQL92_RESERVED_DISTINCT:
            	            	{
            	            		alt34=1;
            	            	}
            	                break;
            	            case SQL92_RESERVED_UNIQUE:
            	            	{
            	            		alt34=2;
            	            	}
            	                break;
            	            case SQL92_RESERVED_ALL:
            	            	{
            	            		alt34=3;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 34 );
            	                ex->set_state( 0 );


            	                goto ruleselected_listEx;

            	            }

            	            switch (alt34)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:212:47: distinct_key
            	        	    {
            	        	        this->followPush(FOLLOW_distinct_key_in_selected_list1637);
            	        	        distinct_key97=distinct_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleselected_listEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            distinct_key97_last = distinct_key97.tree.get();
            	        	            stream_distinct_key.add(distinct_key97.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:212:60: unique_key
            	        	    {
            	        	        this->followPush(FOLLOW_unique_key_in_selected_list1639);
            	        	        unique_key98=unique_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleselected_listEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            unique_key98_last = unique_key98.tree.get();
            	        	            stream_unique_key.add(unique_key98.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // OracleDML.g:212:71: all_key
            	        	    {
            	        	        this->followPush(FOLLOW_all_key_in_selected_list1641);
            	        	        all_key99=all_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleselected_listEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            all_key99_last = all_key99.tree.get();
            	        	            stream_all_key.add(all_key99.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:213:9: ( ASTERISK | selected_element ( selected_element_seq )* )
            {
                ANTLR_UINT32 alt37=2;
                switch ( this->LA(1) )
                {
                case ASTERISK:
                	{
                		alt37=1;
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case REGULAR_ID:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt37=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 37 );
                    ex->set_state( 0 );


                    goto ruleselected_listEx;

                }

                switch (alt37)
                {
            	case 1:
            	    // OracleDML.g:213:11: ASTERISK
            	    {
            	        ASTERISK100 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_selected_list1656);
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_ASTERISK.add(ASTERISK100);


            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:214:11: selected_element ( selected_element_seq )*
            	    {
            	        this->followPush(FOLLOW_selected_element_in_selected_list1670);
            	        selected_element101=selected_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            selected_element101_last = selected_element101.tree.get();
            	            stream_selected_element.add(selected_element101.tree);
            	        }

            	        // OracleDML.g:214:28: ( selected_element_seq )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt36=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt36=1;
            	            	}
            	                break;

            	            }

            	            switch (alt36)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:214:28: selected_element_seq
            	        	    {
            	        	        this->followPush(FOLLOW_selected_element_seq_in_selected_list1672);
            	        	        selected_element_seq102=selected_element_seq();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleselected_listEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            selected_element_seq102_last = selected_element_seq102.tree.get();
            	        	            stream_selected_element_seq.add(selected_element_seq102.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop36;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop36: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: all_key, all_key, unique_key, selected_element_seq, unique_key, distinct_key, distinct_key, selected_element, ASTERISK
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 216:9: -> { mode == 1}? ^( SELECT_LIST ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK )
            if ( mode == 1) {
            	// OracleDML.g:216:26: ^( SELECT_LIST ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_LIST, "SELECT_LIST"), root_1);
            	// OracleDML.g:216:40: ( distinct_key )?
            	if ( stream_distinct_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_distinct_key.nextTree());
            	}
            	stream_distinct_key.reset();

            	// OracleDML.g:216:54: ( unique_key )?
            	if ( stream_unique_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unique_key.nextTree());
            	}
            	stream_unique_key.reset();

            	// OracleDML.g:216:66: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_ASTERISK.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 217:9: -> ^( SELECT_LIST ( distinct_key )? ( unique_key )? ( all_key )? selected_element ( selected_element_seq )* )
            {
            	// OracleDML.g:217:12: ^( SELECT_LIST ( distinct_key )? ( unique_key )? ( all_key )? selected_element ( selected_element_seq )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_LIST, "SELECT_LIST"), root_1);
            	// OracleDML.g:217:26: ( distinct_key )?
            	if ( stream_distinct_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_distinct_key.nextTree());
            	}
            	stream_distinct_key.reset();

            	// OracleDML.g:217:40: ( unique_key )?
            	if ( stream_unique_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unique_key.nextTree());
            	}
            	stream_unique_key.reset();

            	// OracleDML.g:217:52: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_selected_element.nextTree());
            	// OracleDML.g:217:78: ( selected_element_seq )*
            	while ( stream_selected_element_seq.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_selected_element_seq.nextTree());
            	}
            	stream_selected_element_seq.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleselected_listEx; /* Prevent compiler warnings */
    ruleselected_listEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end selected_list */

/**
 * $ANTLR start selected_element
 * OracleDML.g:220:1: selected_element : select_list_elements ( column_alias )? -> ^( SELECT_ITEM select_list_elements ( column_alias )? ) ;
 */
OracleDML::selected_element_return
OracleDML::selected_element()
{
    OracleDML::selected_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::select_list_elements_return select_list_elements103;
    ImplTraits::TreeTypePtr::pointer select_list_elements103_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias104;
    ImplTraits::TreeTypePtr::pointer column_alias104_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_list_elements(get_psrstate()->get_treeAdaptor(), "rule select_list_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:221:5: ( select_list_elements ( column_alias )? -> ^( SELECT_ITEM select_list_elements ( column_alias )? ) )
        // OracleDML.g:221:10: select_list_elements ( column_alias )?
        {
            this->followPush(FOLLOW_select_list_elements_in_selected_element1758);
            select_list_elements103=select_list_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleselected_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_list_elements103_last = select_list_elements103.tree.get();
                stream_select_list_elements.add(select_list_elements103.tree);
            }

            // OracleDML.g:221:31: ( column_alias )?
            {
                ANTLR_UINT32 alt38=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt38=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case COMMA:
                    		    case SQL92_RESERVED_FROM:
                    		    case SQL92_RESERVED_INTO:
                    		    	{
                    		    		alt38=1;
                    		    	}
                    		        break;
                    		    case REGULAR_ID:
                    		    	{
                    		    		switch ( this->LA(3) )
                    		    		{
                    		    		    case REGULAR_ID:
                    		    		    	{
                    		    		    		alt38=1;
                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt38)
                {
            	case 1:
            	    // OracleDML.g:221:31: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_selected_element1760);
            	        column_alias104=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias104_last = column_alias104.tree.get();
            	            stream_column_alias.add(column_alias104.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_alias, select_list_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 222:9: -> ^( SELECT_ITEM select_list_elements ( column_alias )? )
            {
            	// OracleDML.g:222:12: ^( SELECT_ITEM select_list_elements ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_ITEM, "SELECT_ITEM"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_list_elements.nextTree());
            	// OracleDML.g:222:47: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleselected_elementEx; /* Prevent compiler warnings */
    ruleselected_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end selected_element */

/**
 * $ANTLR start selected_element_seq
 * OracleDML.g:225:1: selected_element_seq : COMMA select_list_elements ( column_alias )? -> ^( SELECT_ITEM[$COMMA] select_list_elements ( column_alias )? ) ;
 */
OracleDML::selected_element_seq_return
OracleDML::selected_element_seq()
{
    OracleDML::selected_element_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA105 = NULL;
    OracleDML::select_list_elements_return select_list_elements106;
    ImplTraits::TreeTypePtr::pointer select_list_elements106_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias107;
    ImplTraits::TreeTypePtr::pointer column_alias107_last = NULL;
    ImplTraits::TreeTypePtr COMMA105_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_list_elements(get_psrstate()->get_treeAdaptor(), "rule select_list_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:226:5: ( COMMA select_list_elements ( column_alias )? -> ^( SELECT_ITEM[$COMMA] select_list_elements ( column_alias )? ) )
        // OracleDML.g:226:10: COMMA select_list_elements ( column_alias )?
        {
            COMMA105 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_selected_element_seq1800);
            if  (this->hasException())
            {
                goto ruleselected_element_seqEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA105);


            this->followPush(FOLLOW_select_list_elements_in_selected_element_seq1802);
            select_list_elements106=select_list_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleselected_element_seqEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_list_elements106_last = select_list_elements106.tree.get();
                stream_select_list_elements.add(select_list_elements106.tree);
            }

            // OracleDML.g:226:37: ( column_alias )?
            {
                ANTLR_UINT32 alt39=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt39=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case COMMA:
                    		    case SQL92_RESERVED_FROM:
                    		    case SQL92_RESERVED_INTO:
                    		    	{
                    		    		alt39=1;
                    		    	}
                    		        break;
                    		    case REGULAR_ID:
                    		    	{
                    		    		switch ( this->LA(3) )
                    		    		{
                    		    		    case REGULAR_ID:
                    		    		    	{
                    		    		    		alt39=1;
                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt39)
                {
            	case 1:
            	    // OracleDML.g:226:37: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_selected_element_seq1804);
            	        column_alias107=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_element_seqEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias107_last = column_alias107.tree.get();
            	            stream_column_alias.add(column_alias107.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_alias, select_list_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 227:9: -> ^( SELECT_ITEM[$COMMA] select_list_elements ( column_alias )? )
            {
            	// OracleDML.g:227:12: ^( SELECT_ITEM[$COMMA] select_list_elements ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_ITEM, COMMA105), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_list_elements.nextTree());
            	// OracleDML.g:227:55: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleselected_element_seqEx; /* Prevent compiler warnings */
    ruleselected_element_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end selected_element_seq */

/**
 * $ANTLR start from_clause
 * OracleDML.g:230:1: from_clause : from_key ^ table_ref_list ;
 */
OracleDML::from_clause_return
OracleDML::from_clause()
{
    OracleDML::from_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::from_key_return from_key108;
    ImplTraits::TreeTypePtr::pointer from_key108_last = NULL;
    OracleDML::table_ref_list_return table_ref_list109;
    ImplTraits::TreeTypePtr::pointer table_ref_list109_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:231:5: ( from_key ^ table_ref_list )
        // OracleDML.g:231:10: from_key ^ table_ref_list
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_from_key_in_from_clause1845);
            from_key108=from_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefrom_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(from_key108.tree, root_0);

            this->followPush(FOLLOW_table_ref_list_in_from_clause1848);
            table_ref_list109=table_ref_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefrom_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref_list109.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefrom_clauseEx; /* Prevent compiler warnings */
    rulefrom_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end from_clause */

/**
 * $ANTLR start select_list_elements
 * OracleDML.g:234:1: select_list_elements : ( ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) ) | expression -> ^( EXPR expression ) );
 */
OracleDML::select_list_elements_return
OracleDML::select_list_elements()
{
    OracleDML::select_list_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* PERIOD111 = NULL;
    ImplTraits::CommonTokenType const* ASTERISK112 = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name110;
    ImplTraits::TreeTypePtr::pointer tableview_name110_last = NULL;
    OracleDML::expression_return expression113;
    ImplTraits::TreeTypePtr::pointer expression113_last = NULL;
    ImplTraits::TreeTypePtr PERIOD111_tree;
    ImplTraits::TreeTypePtr ASTERISK112_tree;
    RewriteRuleTokenStream<ImplTraits> stream_PERIOD(get_psrstate()->get_treeAdaptor(), "token PERIOD");
    RewriteRuleTokenStream<ImplTraits> stream_ASTERISK(get_psrstate()->get_treeAdaptor(), "token ASTERISK");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:235:5: ( ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) ) | expression -> ^( EXPR expression ) )

            ANTLR_UINT32 alt40;

            alt40=2;

            switch ( this->LA(1) )
            {
            case INTRODUCER:
            	{
            		{
            		    ANTLR_UINT32 LA40_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_OracleDML>() )))
            		    {
            		        alt40=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt40=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 40 );
            		        ex->set_state( 1 );


            		        goto ruleselect_list_elementsEx;

            		    }
            		}
            	}
                break;
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA40_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_OracleDML>() )))
            		    {
            		        alt40=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt40=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 40 );
            		        ex->set_state( 2 );


            		        goto ruleselect_list_elementsEx;

            		    }
            		}
            	}
                break;
            case DELIMITED_ID:
            	{
            		{
            		    ANTLR_UINT32 LA40_3 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_OracleDML>() )))
            		    {
            		        alt40=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt40=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 40 );
            		        ex->set_state( 3 );


            		        goto ruleselect_list_elementsEx;

            		    }
            		}
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case EXACT_NUM_LIT:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt40=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 40 );
                ex->set_state( 0 );


                goto ruleselect_list_elementsEx;

            }

            switch (alt40)
            {
        	case 1:
        	    // OracleDML.g:235:10: ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK
        	    {
        	        this->followPush(FOLLOW_tableview_name_in_select_list_elements1877);
        	        tableview_name110=tableview_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_list_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            tableview_name110_last = tableview_name110.tree.get();
        	            stream_tableview_name.add(tableview_name110.tree);
        	        }

        	        PERIOD111 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_select_list_elements1879);
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_list_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_PERIOD.add(PERIOD111);


        	        ASTERISK112 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_select_list_elements1881);
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_list_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_ASTERISK.add(ASTERISK112);


        	        // AST REWRITE
        	        // elements: tableview_name
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 235:76: -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) )
        	        {
        	        	// OracleDML.g:235:79: ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	// OracleDML.g:235:86: ^( DOT_ASTERISK[$ASTERISK] tableview_name )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DOT_ASTERISK, ASTERISK112), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_tableview_name.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:236:10: expression
        	    {
        	        this->followPush(FOLLOW_expression_in_select_list_elements1907);
        	        expression113=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_list_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression113_last = expression113.tree.get();
        	            stream_expression.add(expression113.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 236:21: -> ^( EXPR expression )
        	        {
        	        	// OracleDML.g:236:24: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleselect_list_elementsEx; /* Prevent compiler warnings */
    ruleselect_list_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end select_list_elements */

/**
 * $ANTLR start table_ref_list
 * OracleDML.g:239:1: table_ref_list : table_ref ( table_ref_list_seq )* -> ^( TABLE_REF_ELEMENT table_ref ( table_ref_list_seq )* ) ;
 */
OracleDML::table_ref_list_return
OracleDML::table_ref_list()
{
    OracleDML::table_ref_list_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::table_ref_return table_ref114;
    ImplTraits::TreeTypePtr::pointer table_ref114_last = NULL;
    OracleDML::table_ref_list_seq_return table_ref_list_seq115;
    ImplTraits::TreeTypePtr::pointer table_ref_list_seq115_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_table_ref_list_seq(get_psrstate()->get_treeAdaptor(), "rule table_ref_list_seq");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_ref(get_psrstate()->get_treeAdaptor(), "rule table_ref");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:240:5: ( table_ref ( table_ref_list_seq )* -> ^( TABLE_REF_ELEMENT table_ref ( table_ref_list_seq )* ) )
        // OracleDML.g:240:10: table_ref ( table_ref_list_seq )*
        {
            this->followPush(FOLLOW_table_ref_in_table_ref_list1935);
            table_ref114=table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_ref114_last = table_ref114.tree.get();
                stream_table_ref.add(table_ref114.tree);
            }

            // OracleDML.g:240:20: ( table_ref_list_seq )*

            for (;;)
            {
                ANTLR_UINT32 alt41=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt41=1;
                	}
                    break;

                }

                switch (alt41)
                {
            	case 1:
            	    // OracleDML.g:240:20: table_ref_list_seq
            	    {
            	        this->followPush(FOLLOW_table_ref_list_seq_in_table_ref_list1937);
            	        table_ref_list_seq115=table_ref_list_seq();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_ref_list_seq115_last = table_ref_list_seq115.tree.get();
            	            stream_table_ref_list_seq.add(table_ref_list_seq115.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: table_ref_list_seq, table_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 241:9: -> ^( TABLE_REF_ELEMENT table_ref ( table_ref_list_seq )* )
            {
            	// OracleDML.g:241:12: ^( TABLE_REF_ELEMENT table_ref ( table_ref_list_seq )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, "TABLE_REF_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_ref.nextTree());
            	// OracleDML.g:241:42: ( table_ref_list_seq )*
            	while ( stream_table_ref_list_seq.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_ref_list_seq.nextTree());
            	}
            	stream_table_ref_list_seq.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_listEx; /* Prevent compiler warnings */
    ruletable_ref_listEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_list */

/**
 * $ANTLR start table_ref_list_seq
 * OracleDML.g:244:1: table_ref_list_seq : COMMA table_ref -> ^( TABLE_REF_ELEMENT[$COMMA] table_ref ) ;
 */
OracleDML::table_ref_list_seq_return
OracleDML::table_ref_list_seq()
{
    OracleDML::table_ref_list_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA116 = NULL;
    OracleDML::table_ref_return table_ref117;
    ImplTraits::TreeTypePtr::pointer table_ref117_last = NULL;
    ImplTraits::TreeTypePtr COMMA116_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_ref(get_psrstate()->get_treeAdaptor(), "rule table_ref");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:245:5: ( COMMA table_ref -> ^( TABLE_REF_ELEMENT[$COMMA] table_ref ) )
        // OracleDML.g:245:10: COMMA table_ref
        {
            COMMA116 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_table_ref_list_seq1977);
            if  (this->hasException())
            {
                goto ruletable_ref_list_seqEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA116);


            this->followPush(FOLLOW_table_ref_in_table_ref_list_seq1979);
            table_ref117=table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_list_seqEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_ref117_last = table_ref117.tree.get();
                stream_table_ref.add(table_ref117.tree);
            }

            // AST REWRITE
            // elements: table_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 246:9: -> ^( TABLE_REF_ELEMENT[$COMMA] table_ref )
            {
            	// OracleDML.g:246:12: ^( TABLE_REF_ELEMENT[$COMMA] table_ref )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, COMMA116), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_ref.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_list_seqEx; /* Prevent compiler warnings */
    ruletable_ref_list_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_list_seq */

/**
 * $ANTLR start table_ref
 * OracleDML.g:253:1: table_ref : table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )? -> ^( TABLE_REF[ToraType(T_TABLE_REF)] table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? ) ;
 */
OracleDML::table_ref_return
OracleDML::table_ref()
{
    OracleDML::table_ref_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::table_ref_aux_return table_ref_aux118;
    ImplTraits::TreeTypePtr::pointer table_ref_aux118_last = NULL;
    OracleDML::join_clause_return join_clause119;
    ImplTraits::TreeTypePtr::pointer join_clause119_last = NULL;
    OracleDML::pivot_clause_return pivot_clause120;
    ImplTraits::TreeTypePtr::pointer pivot_clause120_last = NULL;
    OracleDML::unpivot_clause_return unpivot_clause121;
    ImplTraits::TreeTypePtr::pointer unpivot_clause121_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_join_clause(get_psrstate()->get_treeAdaptor(), "rule join_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_ref_aux(get_psrstate()->get_treeAdaptor(), "rule table_ref_aux");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:254:5: ( table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )? -> ^( TABLE_REF[ToraType(T_TABLE_REF)] table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? ) )
        // OracleDML.g:254:10: table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )?
        {
            this->followPush(FOLLOW_table_ref_aux_in_table_ref2020);
            table_ref_aux118=table_ref_aux();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_refEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_ref_aux118_last = table_ref_aux118.tree.get();
                stream_table_ref_aux.add(table_ref_aux118.tree);
            }

            // OracleDML.g:254:24: ( join_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt42=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    ANTLR_UINT32 LA42_2 = this->LA(2);
                		    if ( ((((toUpper(LT(1)->getText()) == "NATURAL"))||((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "CROSS"))||((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT"))||((toUpper(LT(1)->getText()) == "INNER")))))
                		    {
                		        alt42=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt42)
                {
            	case 1:
            	    // OracleDML.g:254:24: join_clause
            	    {
            	        this->followPush(FOLLOW_join_clause_in_table_ref2022);
            	        join_clause119=join_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            join_clause119_last = join_clause119.tree.get();
            	            stream_join_clause.add(join_clause119.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop42;	/* break out of the loop */
            	    break;
                }
            }
            loop42: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:254:37: ( pivot_clause | unpivot_clause )?
            {
                ANTLR_UINT32 alt43=3;
                switch ( this->LA(1) )
                {
                    case PLSQL_NON_RESERVED_PIVOT:
                    	{
                    		alt43=1;
                    	}
                        break;
                    case PLSQL_NON_RESERVED_UNPIVOT:
                    	{
                    		alt43=2;
                    	}
                        break;
                }

                switch (alt43)
                {
            	case 1:
            	    // OracleDML.g:254:38: pivot_clause
            	    {
            	        this->followPush(FOLLOW_pivot_clause_in_table_ref2026);
            	        pivot_clause120=pivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_clause120_last = pivot_clause120.tree.get();
            	            stream_pivot_clause.add(pivot_clause120.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:254:51: unpivot_clause
            	    {
            	        this->followPush(FOLLOW_unpivot_clause_in_table_ref2028);
            	        unpivot_clause121=unpivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            unpivot_clause121_last = unpivot_clause121.tree.get();
            	            stream_unpivot_clause.add(unpivot_clause121.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: table_ref_aux, unpivot_clause, pivot_clause, join_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 255:9: -> ^( TABLE_REF[ToraType(T_TABLE_REF)] table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? )
            {
            	// OracleDML.g:255:12: ^( TABLE_REF[ToraType(T_TABLE_REF)] table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF, ToraType(T_TABLE_REF)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_ref_aux.nextTree());
            	// OracleDML.g:255:61: ( join_clause )*
            	while ( stream_join_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_join_clause.nextTree());
            	}
            	stream_join_clause.reset();

            	// OracleDML.g:255:74: ( pivot_clause )?
            	if ( stream_pivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_clause.nextTree());
            	}
            	stream_pivot_clause.reset();

            	// OracleDML.g:255:88: ( unpivot_clause )?
            	if ( stream_unpivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_clause.nextTree());
            	}
            	stream_unpivot_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_refEx; /* Prevent compiler warnings */
    ruletable_refEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref */

/**
 * $ANTLR start table_ref_aux
 * OracleDML.g:270:1: table_ref_aux : ( ( LEFT_PAREN ( select_key | with_key ) )=> table_ref_aux_ver1 | ( LEFT_PAREN )=> table_ref_aux_ver2 | ( only_key LEFT_PAREN )=> table_ref_aux_ver3 | table_ref_aux_ver4 ) ;
 */
OracleDML::table_ref_aux_return
OracleDML::table_ref_aux()
{
    OracleDML::table_ref_aux_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::table_ref_aux_ver1_return table_ref_aux_ver1122;
    ImplTraits::TreeTypePtr::pointer table_ref_aux_ver1122_last = NULL;
    OracleDML::table_ref_aux_ver2_return table_ref_aux_ver2123;
    ImplTraits::TreeTypePtr::pointer table_ref_aux_ver2123_last = NULL;
    OracleDML::table_ref_aux_ver3_return table_ref_aux_ver3124;
    ImplTraits::TreeTypePtr::pointer table_ref_aux_ver3124_last = NULL;
    OracleDML::table_ref_aux_ver4_return table_ref_aux_ver4125;
    ImplTraits::TreeTypePtr::pointer table_ref_aux_ver4125_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:271:5: ( ( ( LEFT_PAREN ( select_key | with_key ) )=> table_ref_aux_ver1 | ( LEFT_PAREN )=> table_ref_aux_ver2 | ( only_key LEFT_PAREN )=> table_ref_aux_ver3 | table_ref_aux_ver4 ) )
        // OracleDML.g:272:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> table_ref_aux_ver1 | ( LEFT_PAREN )=> table_ref_aux_ver2 | ( only_key LEFT_PAREN )=> table_ref_aux_ver3 | table_ref_aux_ver4 )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:272:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> table_ref_aux_ver1 | ( LEFT_PAREN )=> table_ref_aux_ver2 | ( only_key LEFT_PAREN )=> table_ref_aux_ver3 | table_ref_aux_ver4 )
            {
                ANTLR_UINT32 alt44=4;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_TABLE:
                	{
                		{
                		    ANTLR_UINT32 LA44_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt44=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt44=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 44 );
                		        ex->set_state( 1 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case SQL92_RESERVED_THE:
                	{
                		{
                		    ANTLR_UINT32 LA44_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt44=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt44=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 44 );
                		        ex->set_state( 2 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA44_3 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt44=1;
                		    }
                		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_OracleDML>() )))
                		    {
                		        alt44=2;
                		    }
                		    else if ( (true))
                		    {
                		        alt44=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 44 );
                		        ex->set_state( 3 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case INTRODUCER:
                	{
                		{
                		    ANTLR_UINT32 LA44_4 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt44=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt44=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 44 );
                		        ex->set_state( 4 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA44_5 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt44=1;
                		    }
                		    else if ( (( (this->msynpred( antlr3::ClassForwarder<synpred6_OracleDML>() )) && ((toUpper(LT(1)->getText()) == "ONLY")) )))
                		    {
                		        alt44=3;
                		    }
                		    else if ( (true))
                		    {
                		        alt44=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 44 );
                		        ex->set_state( 5 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case DELIMITED_ID:
                	{
                		{
                		    ANTLR_UINT32 LA44_6 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt44=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt44=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 44 );
                		        ex->set_state( 6 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 44 );
                    ex->set_state( 0 );


                    goto ruletable_ref_auxEx;

                }

                switch (alt44)
                {
            	case 1:
            	    // OracleDML.g:272:10: ( LEFT_PAREN ( select_key | with_key ) )=> table_ref_aux_ver1
            	    {
            	        this->followPush(FOLLOW_table_ref_aux_ver1_in_table_ref_aux2106);
            	        table_ref_aux_ver1122=table_ref_aux_ver1();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref_aux_ver1122.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:273:10: ( LEFT_PAREN )=> table_ref_aux_ver2
            	    {
            	        this->followPush(FOLLOW_table_ref_aux_ver2_in_table_ref_aux2123);
            	        table_ref_aux_ver2123=table_ref_aux_ver2();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref_aux_ver2123.tree);


            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:274:10: ( only_key LEFT_PAREN )=> table_ref_aux_ver3
            	    {
            	        this->followPush(FOLLOW_table_ref_aux_ver3_in_table_ref_aux2142);
            	        table_ref_aux_ver3124=table_ref_aux_ver3();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref_aux_ver3124.tree);


            	    }
            	    break;
            	case 4:
            	    // OracleDML.g:275:10: table_ref_aux_ver4
            	    {
            	        this->followPush(FOLLOW_table_ref_aux_ver4_in_table_ref_aux2153);
            	        table_ref_aux_ver4125=table_ref_aux_ver4();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref_aux_ver4125.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_auxEx; /* Prevent compiler warnings */
    ruletable_ref_auxEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_aux */

/**
 * $ANTLR start table_ref_aux_ver1
 * OracleDML.g:279:1: table_ref_aux_ver1 : ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) ;
 */
OracleDML::table_ref_aux_ver1_return
OracleDML::table_ref_aux_ver1()
{
    OracleDML::table_ref_aux_ver1_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::dml_table_expression_clause_return dml_table_expression_clause126;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause126_last = NULL;
    OracleDML::pivot_clause_return pivot_clause127;
    ImplTraits::TreeTypePtr::pointer pivot_clause127_last = NULL;
    OracleDML::unpivot_clause_return unpivot_clause128;
    ImplTraits::TreeTypePtr::pointer unpivot_clause128_last = NULL;
    OracleDML::flashback_query_clause_return flashback_query_clause129;
    ImplTraits::TreeTypePtr::pointer flashback_query_clause129_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias130;
    ImplTraits::TreeTypePtr::pointer table_alias130_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_dml_table_expression_clause(get_psrstate()->get_treeAdaptor(), "rule dml_table_expression_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_flashback_query_clause(get_psrstate()->get_treeAdaptor(), "rule flashback_query_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:280:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) )
        // OracleDML.g:281:9: ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )?
        {
            this->followPush(FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver12196);
            dml_table_expression_clause126=dml_table_expression_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver1Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                dml_table_expression_clause126_last = dml_table_expression_clause126.tree.get();
                stream_dml_table_expression_clause.add(dml_table_expression_clause126.tree);
            }

            // OracleDML.g:282:9: ( pivot_clause | unpivot_clause )?
            {
                ANTLR_UINT32 alt45=3;
                switch ( this->LA(1) )
                {
                    case PLSQL_NON_RESERVED_PIVOT:
                    	{
                    		alt45=1;
                    	}
                        break;
                    case PLSQL_NON_RESERVED_UNPIVOT:
                    	{
                    		alt45=2;
                    	}
                        break;
                }

                switch (alt45)
                {
            	case 1:
            	    // OracleDML.g:282:10: pivot_clause
            	    {
            	        this->followPush(FOLLOW_pivot_clause_in_table_ref_aux_ver12207);
            	        pivot_clause127=pivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver1Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_clause127_last = pivot_clause127.tree.get();
            	            stream_pivot_clause.add(pivot_clause127.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:282:23: unpivot_clause
            	    {
            	        this->followPush(FOLLOW_unpivot_clause_in_table_ref_aux_ver12209);
            	        unpivot_clause128=unpivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver1Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            unpivot_clause128_last = unpivot_clause128.tree.get();
            	            stream_unpivot_clause.add(unpivot_clause128.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:282:40: ( flashback_query_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt46=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    ANTLR_UINT32 LA46_2 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "VERSIONS")))
                		    {
                		        alt46=1;
                		    }

                		}
                	}
                    break;
                case SQL92_RESERVED_AS:
                	{
                		alt46=1;
                	}
                    break;

                }

                switch (alt46)
                {
            	case 1:
            	    // OracleDML.g:282:40: flashback_query_clause
            	    {
            	        this->followPush(FOLLOW_flashback_query_clause_in_table_ref_aux_ver12213);
            	        flashback_query_clause129=flashback_query_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver1Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            flashback_query_clause129_last = flashback_query_clause129.tree.get();
            	            stream_flashback_query_clause.add(flashback_query_clause129.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop46;	/* break out of the loop */
            	    break;
                }
            }
            loop46: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:282:64: ({...}? table_alias )?
            {
                ANTLR_UINT32 alt47=2;
                switch ( this->LA(1) )
                {
                    case INTRODUCER:
                    	{
                    		{
                    		    ANTLR_UINT32 LA47_1 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt47=1;
                    		    }
                    		}
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA47_2 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt47=1;
                    		    }
                    		}
                    	}
                        break;
                    case DELIMITED_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA47_3 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt47=1;
                    		    }
                    		}
                    	}
                        break;
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		{
                    		    ANTLR_UINT32 LA47_4 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt47=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt47)
                {
            	case 1:
            	    // OracleDML.g:282:65: {...}? table_alias
            	    {
            	        if ( !((isTableAlias(LT(1), LT(2)))) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "isTableAlias(LT(1), LT(2))" );
            	                ex->set_ruleName( "table_ref_aux_ver1" );


            	        }

            	        this->followPush(FOLLOW_table_alias_in_table_ref_aux_ver12219);
            	        table_alias130=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver1Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias130_last = table_alias130.tree.get();
            	            stream_table_alias.add(table_alias130.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: dml_table_expression_clause, flashback_query_clause, pivot_clause, unpivot_clause, table_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 283:9: -> ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            {
            	// OracleDML.g:283:12: ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, "TABLE_REF_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_dml_table_expression_clause.nextTree());
            	// OracleDML.g:283:60: ( pivot_clause )?
            	if ( stream_pivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_clause.nextTree());
            	}
            	stream_pivot_clause.reset();

            	// OracleDML.g:283:74: ( unpivot_clause )?
            	if ( stream_unpivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_clause.nextTree());
            	}
            	stream_unpivot_clause.reset();

            	// OracleDML.g:283:90: ( flashback_query_clause )*
            	while ( stream_flashback_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_flashback_query_clause.nextTree());
            	}
            	stream_flashback_query_clause.reset();

            	// OracleDML.g:283:114: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_aux_ver1Ex; /* Prevent compiler warnings */
    ruletable_ref_aux_ver1Ex: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_aux_ver1 */

/**
 * $ANTLR start table_ref_aux_ver2
 * OracleDML.g:286:1: table_ref_aux_ver2 : ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT ^( TABLE_REF_ELEMENT[$LEFT_PAREN] table_ref ( subquery_operation_part )* RIGHT_PAREN ) ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) ;
 */
OracleDML::table_ref_aux_ver2_return
OracleDML::table_ref_aux_ver2()
{
    OracleDML::table_ref_aux_ver2_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN131 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN134 = NULL;
    OracleDML::table_ref_return table_ref132;
    ImplTraits::TreeTypePtr::pointer table_ref132_last = NULL;
    OracleDML::subquery_operation_part_return subquery_operation_part133;
    ImplTraits::TreeTypePtr::pointer subquery_operation_part133_last = NULL;
    OracleDML::pivot_clause_return pivot_clause135;
    ImplTraits::TreeTypePtr::pointer pivot_clause135_last = NULL;
    OracleDML::unpivot_clause_return unpivot_clause136;
    ImplTraits::TreeTypePtr::pointer unpivot_clause136_last = NULL;
    OracleDML::flashback_query_clause_return flashback_query_clause137;
    ImplTraits::TreeTypePtr::pointer flashback_query_clause137_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias138;
    ImplTraits::TreeTypePtr::pointer table_alias138_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN131_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN134_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_operation_part(get_psrstate()->get_treeAdaptor(), "rule subquery_operation_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_ref(get_psrstate()->get_treeAdaptor(), "rule table_ref");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_flashback_query_clause(get_psrstate()->get_treeAdaptor(), "rule flashback_query_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:287:5: ( ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT ^( TABLE_REF_ELEMENT[$LEFT_PAREN] table_ref ( subquery_operation_part )* RIGHT_PAREN ) ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) )
        // OracleDML.g:288:9: ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )?
        {
            LEFT_PAREN131 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_table_ref_aux_ver22280);
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver2Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN131);


            this->followPush(FOLLOW_table_ref_in_table_ref_aux_ver22282);
            table_ref132=table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver2Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_ref132_last = table_ref132.tree.get();
                stream_table_ref.add(table_ref132.tree);
            }

            // OracleDML.g:288:46: ( subquery_operation_part )*

            for (;;)
            {
                ANTLR_UINT32 alt48=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_MINUS:
                case SQL92_RESERVED_INTERSECT:
                case SQL92_RESERVED_UNION:
                	{
                		alt48=1;
                	}
                    break;

                }

                switch (alt48)
                {
            	case 1:
            	    // OracleDML.g:288:46: subquery_operation_part
            	    {
            	        this->followPush(FOLLOW_subquery_operation_part_in_table_ref_aux_ver22284);
            	        subquery_operation_part133=subquery_operation_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver2Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery_operation_part133_last = subquery_operation_part133.tree.get();
            	            stream_subquery_operation_part.add(subquery_operation_part133.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop48;	/* break out of the loop */
            	    break;
                }
            }
            loop48: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN134 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver22287);
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver2Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN134);


            // OracleDML.g:289:9: ( pivot_clause | unpivot_clause )?
            {
                ANTLR_UINT32 alt49=3;
                switch ( this->LA(1) )
                {
                    case PLSQL_NON_RESERVED_PIVOT:
                    	{
                    		alt49=1;
                    	}
                        break;
                    case PLSQL_NON_RESERVED_UNPIVOT:
                    	{
                    		alt49=2;
                    	}
                        break;
                }

                switch (alt49)
                {
            	case 1:
            	    // OracleDML.g:289:10: pivot_clause
            	    {
            	        this->followPush(FOLLOW_pivot_clause_in_table_ref_aux_ver22298);
            	        pivot_clause135=pivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver2Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_clause135_last = pivot_clause135.tree.get();
            	            stream_pivot_clause.add(pivot_clause135.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:289:23: unpivot_clause
            	    {
            	        this->followPush(FOLLOW_unpivot_clause_in_table_ref_aux_ver22300);
            	        unpivot_clause136=unpivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver2Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            unpivot_clause136_last = unpivot_clause136.tree.get();
            	            stream_unpivot_clause.add(unpivot_clause136.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:289:40: ( flashback_query_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt50=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    ANTLR_UINT32 LA50_2 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "VERSIONS")))
                		    {
                		        alt50=1;
                		    }

                		}
                	}
                    break;
                case SQL92_RESERVED_AS:
                	{
                		alt50=1;
                	}
                    break;

                }

                switch (alt50)
                {
            	case 1:
            	    // OracleDML.g:289:40: flashback_query_clause
            	    {
            	        this->followPush(FOLLOW_flashback_query_clause_in_table_ref_aux_ver22304);
            	        flashback_query_clause137=flashback_query_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver2Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            flashback_query_clause137_last = flashback_query_clause137.tree.get();
            	            stream_flashback_query_clause.add(flashback_query_clause137.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop50;	/* break out of the loop */
            	    break;
                }
            }
            loop50: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:289:64: ({...}? table_alias )?
            {
                ANTLR_UINT32 alt51=2;
                switch ( this->LA(1) )
                {
                    case INTRODUCER:
                    	{
                    		{
                    		    ANTLR_UINT32 LA51_1 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt51=1;
                    		    }
                    		}
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA51_2 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt51=1;
                    		    }
                    		}
                    	}
                        break;
                    case DELIMITED_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA51_3 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt51=1;
                    		    }
                    		}
                    	}
                        break;
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		{
                    		    ANTLR_UINT32 LA51_4 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt51=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt51)
                {
            	case 1:
            	    // OracleDML.g:289:65: {...}? table_alias
            	    {
            	        if ( !((isTableAlias(LT(1), LT(2)))) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "isTableAlias(LT(1), LT(2))" );
            	                ex->set_ruleName( "table_ref_aux_ver2" );


            	        }

            	        this->followPush(FOLLOW_table_alias_in_table_ref_aux_ver22310);
            	        table_alias138=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver2Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias138_last = table_alias138.tree.get();
            	            stream_table_alias.add(table_alias138.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: pivot_clause, RIGHT_PAREN, subquery_operation_part, flashback_query_clause, unpivot_clause, table_alias, table_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 290:9: -> ^( TABLE_REF_ELEMENT ^( TABLE_REF_ELEMENT[$LEFT_PAREN] table_ref ( subquery_operation_part )* RIGHT_PAREN ) ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            {
            	// OracleDML.g:290:12: ^( TABLE_REF_ELEMENT ^( TABLE_REF_ELEMENT[$LEFT_PAREN] table_ref ( subquery_operation_part )* RIGHT_PAREN ) ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, "TABLE_REF_ELEMENT"), root_1);
            	// OracleDML.g:290:32: ^( TABLE_REF_ELEMENT[$LEFT_PAREN] table_ref ( subquery_operation_part )* RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, LEFT_PAREN131), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_table_ref.nextTree());
            	// OracleDML.g:290:75: ( subquery_operation_part )*
            	while ( stream_subquery_operation_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_subquery_operation_part.nextTree());
            	}
            	stream_subquery_operation_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:290:113: ( pivot_clause )?
            	if ( stream_pivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_clause.nextTree());
            	}
            	stream_pivot_clause.reset();

            	// OracleDML.g:290:127: ( unpivot_clause )?
            	if ( stream_unpivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_clause.nextTree());
            	}
            	stream_unpivot_clause.reset();

            	// OracleDML.g:290:143: ( flashback_query_clause )*
            	while ( stream_flashback_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_flashback_query_clause.nextTree());
            	}
            	stream_flashback_query_clause.reset();

            	// OracleDML.g:290:167: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_aux_ver2Ex; /* Prevent compiler warnings */
    ruletable_ref_aux_ver2Ex: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_aux_ver2 */

/**
 * $ANTLR start table_ref_aux_ver3
 * OracleDML.g:293:1: table_ref_aux_ver3 : ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT[$only_key.start] ^( TABLE_REF_ELEMENT[$LEFT_PAREN] dml_table_expression_clause RIGHT_PAREN ) ( flashback_query_clause )* ( table_alias )? ) ;
 */
OracleDML::table_ref_aux_ver3_return
OracleDML::table_ref_aux_ver3()
{
    OracleDML::table_ref_aux_ver3_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN140 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN142 = NULL;
    OracleDML_OracleDMLKeys::only_key_return only_key139;
    ImplTraits::TreeTypePtr::pointer only_key139_last = NULL;
    OracleDML::dml_table_expression_clause_return dml_table_expression_clause141;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause141_last = NULL;
    OracleDML::flashback_query_clause_return flashback_query_clause143;
    ImplTraits::TreeTypePtr::pointer flashback_query_clause143_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias144;
    ImplTraits::TreeTypePtr::pointer table_alias144_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN140_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN142_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_dml_table_expression_clause(get_psrstate()->get_treeAdaptor(), "rule dml_table_expression_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_only_key(get_psrstate()->get_treeAdaptor(), "rule only_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_flashback_query_clause(get_psrstate()->get_treeAdaptor(), "rule flashback_query_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:294:5: ( ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT[$only_key.start] ^( TABLE_REF_ELEMENT[$LEFT_PAREN] dml_table_expression_clause RIGHT_PAREN ) ( flashback_query_clause )* ( table_alias )? ) )
        // OracleDML.g:295:9: ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ( flashback_query_clause )* ({...}? table_alias )?
        {
            this->followPush(FOLLOW_only_key_in_table_ref_aux_ver32383);
            only_key139=only_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver3Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                only_key139_last = only_key139.tree.get();
                stream_only_key.add(only_key139.tree);
            }

            LEFT_PAREN140 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_table_ref_aux_ver32385);
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver3Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN140);


            this->followPush(FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver32387);
            dml_table_expression_clause141=dml_table_expression_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver3Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                dml_table_expression_clause141_last = dml_table_expression_clause141.tree.get();
                stream_dml_table_expression_clause.add(dml_table_expression_clause141.tree);
            }

            RIGHT_PAREN142 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_table_ref_aux_ver32389);
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver3Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN142);


            // OracleDML.g:296:9: ( flashback_query_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt52=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    ANTLR_UINT32 LA52_2 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "VERSIONS")))
                		    {
                		        alt52=1;
                		    }

                		}
                	}
                    break;
                case SQL92_RESERVED_AS:
                	{
                		alt52=1;
                	}
                    break;

                }

                switch (alt52)
                {
            	case 1:
            	    // OracleDML.g:296:9: flashback_query_clause
            	    {
            	        this->followPush(FOLLOW_flashback_query_clause_in_table_ref_aux_ver32399);
            	        flashback_query_clause143=flashback_query_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver3Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            flashback_query_clause143_last = flashback_query_clause143.tree.get();
            	            stream_flashback_query_clause.add(flashback_query_clause143.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop52;	/* break out of the loop */
            	    break;
                }
            }
            loop52: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:296:33: ({...}? table_alias )?
            {
                ANTLR_UINT32 alt53=2;
                switch ( this->LA(1) )
                {
                    case INTRODUCER:
                    	{
                    		{
                    		    ANTLR_UINT32 LA53_1 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt53=1;
                    		    }
                    		}
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA53_2 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt53=1;
                    		    }
                    		}
                    	}
                        break;
                    case DELIMITED_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA53_3 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt53=1;
                    		    }
                    		}
                    	}
                        break;
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		{
                    		    ANTLR_UINT32 LA53_4 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt53=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt53)
                {
            	case 1:
            	    // OracleDML.g:296:34: {...}? table_alias
            	    {
            	        if ( !((isTableAlias(LT(1), LT(2)))) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "isTableAlias(LT(1), LT(2))" );
            	                ex->set_ruleName( "table_ref_aux_ver3" );


            	        }

            	        this->followPush(FOLLOW_table_alias_in_table_ref_aux_ver32405);
            	        table_alias144=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver3Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias144_last = table_alias144.tree.get();
            	            stream_table_alias.add(table_alias144.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: flashback_query_clause, RIGHT_PAREN, dml_table_expression_clause, table_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 297:9: -> ^( TABLE_REF_ELEMENT[$only_key.start] ^( TABLE_REF_ELEMENT[$LEFT_PAREN] dml_table_expression_clause RIGHT_PAREN ) ( flashback_query_clause )* ( table_alias )? )
            {
            	// OracleDML.g:297:12: ^( TABLE_REF_ELEMENT[$only_key.start] ^( TABLE_REF_ELEMENT[$LEFT_PAREN] dml_table_expression_clause RIGHT_PAREN ) ( flashback_query_clause )* ( table_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, (only_key139.start)), root_1);
            	// OracleDML.g:297:49: ^( TABLE_REF_ELEMENT[$LEFT_PAREN] dml_table_expression_clause RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, LEFT_PAREN140), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_dml_table_expression_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:297:123: ( flashback_query_clause )*
            	while ( stream_flashback_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_flashback_query_clause.nextTree());
            	}
            	stream_flashback_query_clause.reset();

            	// OracleDML.g:297:147: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_aux_ver3Ex; /* Prevent compiler warnings */
    ruletable_ref_aux_ver3Ex: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_aux_ver3 */

/**
 * $ANTLR start table_ref_aux_ver4
 * OracleDML.g:300:1: table_ref_aux_ver4 : dml_table_expression_clause ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) ;
 */
OracleDML::table_ref_aux_ver4_return
OracleDML::table_ref_aux_ver4()
{
    OracleDML::table_ref_aux_ver4_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::dml_table_expression_clause_return dml_table_expression_clause145;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause145_last = NULL;
    OracleDML::pivot_clause_return pivot_clause146;
    ImplTraits::TreeTypePtr::pointer pivot_clause146_last = NULL;
    OracleDML::unpivot_clause_return unpivot_clause147;
    ImplTraits::TreeTypePtr::pointer unpivot_clause147_last = NULL;
    OracleDML::flashback_query_clause_return flashback_query_clause148;
    ImplTraits::TreeTypePtr::pointer flashback_query_clause148_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias149;
    ImplTraits::TreeTypePtr::pointer table_alias149_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_dml_table_expression_clause(get_psrstate()->get_treeAdaptor(), "rule dml_table_expression_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_flashback_query_clause(get_psrstate()->get_treeAdaptor(), "rule flashback_query_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:301:5: ( dml_table_expression_clause ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) )
        // OracleDML.g:302:9: dml_table_expression_clause ( pivot_clause | unpivot_clause )? ( flashback_query_clause )* ({...}? table_alias )?
        {
            this->followPush(FOLLOW_dml_table_expression_clause_in_table_ref_aux_ver42462);
            dml_table_expression_clause145=dml_table_expression_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_aux_ver4Ex;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                dml_table_expression_clause145_last = dml_table_expression_clause145.tree.get();
                stream_dml_table_expression_clause.add(dml_table_expression_clause145.tree);
            }

            // OracleDML.g:302:37: ( pivot_clause | unpivot_clause )?
            {
                ANTLR_UINT32 alt54=3;
                switch ( this->LA(1) )
                {
                    case PLSQL_NON_RESERVED_PIVOT:
                    	{
                    		alt54=1;
                    	}
                        break;
                    case PLSQL_NON_RESERVED_UNPIVOT:
                    	{
                    		alt54=2;
                    	}
                        break;
                }

                switch (alt54)
                {
            	case 1:
            	    // OracleDML.g:302:38: pivot_clause
            	    {
            	        this->followPush(FOLLOW_pivot_clause_in_table_ref_aux_ver42465);
            	        pivot_clause146=pivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver4Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_clause146_last = pivot_clause146.tree.get();
            	            stream_pivot_clause.add(pivot_clause146.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:302:51: unpivot_clause
            	    {
            	        this->followPush(FOLLOW_unpivot_clause_in_table_ref_aux_ver42467);
            	        unpivot_clause147=unpivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver4Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            unpivot_clause147_last = unpivot_clause147.tree.get();
            	            stream_unpivot_clause.add(unpivot_clause147.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:303:9: ( flashback_query_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt55=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    ANTLR_UINT32 LA55_2 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "VERSIONS")))
                		    {
                		        alt55=1;
                		    }

                		}
                	}
                    break;
                case SQL92_RESERVED_AS:
                	{
                		alt55=1;
                	}
                    break;

                }

                switch (alt55)
                {
            	case 1:
            	    // OracleDML.g:303:9: flashback_query_clause
            	    {
            	        this->followPush(FOLLOW_flashback_query_clause_in_table_ref_aux_ver42479);
            	        flashback_query_clause148=flashback_query_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver4Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            flashback_query_clause148_last = flashback_query_clause148.tree.get();
            	            stream_flashback_query_clause.add(flashback_query_clause148.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:303:33: ({...}? table_alias )?
            {
                ANTLR_UINT32 alt56=2;
                switch ( this->LA(1) )
                {
                    case INTRODUCER:
                    	{
                    		{
                    		    ANTLR_UINT32 LA56_1 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt56=1;
                    		    }
                    		}
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA56_2 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt56=1;
                    		    }
                    		}
                    	}
                        break;
                    case DELIMITED_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA56_3 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt56=1;
                    		    }
                    		}
                    	}
                        break;
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		{
                    		    ANTLR_UINT32 LA56_4 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt56=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt56)
                {
            	case 1:
            	    // OracleDML.g:303:34: {...}? table_alias
            	    {
            	        if ( !((isTableAlias(LT(1), LT(2)))) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "isTableAlias(LT(1), LT(2))" );
            	                ex->set_ruleName( "table_ref_aux_ver4" );


            	        }

            	        this->followPush(FOLLOW_table_alias_in_table_ref_aux_ver42485);
            	        table_alias149=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_aux_ver4Ex;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias149_last = table_alias149.tree.get();
            	            stream_table_alias.add(table_alias149.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: table_alias, flashback_query_clause, dml_table_expression_clause, unpivot_clause, pivot_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 304:9: -> ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            {
            	// OracleDML.g:304:12: ^( TABLE_REF_ELEMENT dml_table_expression_clause ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, "TABLE_REF_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_dml_table_expression_clause.nextTree());
            	// OracleDML.g:304:60: ( pivot_clause )?
            	if ( stream_pivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_clause.nextTree());
            	}
            	stream_pivot_clause.reset();

            	// OracleDML.g:304:74: ( unpivot_clause )?
            	if ( stream_unpivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_clause.nextTree());
            	}
            	stream_unpivot_clause.reset();

            	// OracleDML.g:304:90: ( flashback_query_clause )*
            	while ( stream_flashback_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_flashback_query_clause.nextTree());
            	}
            	stream_flashback_query_clause.reset();

            	// OracleDML.g:304:114: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_aux_ver4Ex; /* Prevent compiler warnings */
    ruletable_ref_aux_ver4Ex: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_aux_ver4 */

/**
 * $ANTLR start join_clause
 * OracleDML.g:307:1: join_clause : (qpc1= query_partition_clause )? ( cross_key | natural_key )? ( inner_key | outer_join_type )? join_key table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )* -> ^( JOIN_DEF[$join_key.start] ( $qpc1)? table_ref_aux ( $qpc2)? ( join_on_part )* ( join_using_part )* ) ;
 */
OracleDML::join_clause_return
OracleDML::join_clause()
{
    OracleDML::join_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::query_partition_clause_return qpc1;
    ImplTraits::TreeTypePtr::pointer qpc1_last = NULL;
    OracleDML::query_partition_clause_return qpc2;
    ImplTraits::TreeTypePtr::pointer qpc2_last = NULL;
    OracleDML_OracleDMLKeys::cross_key_return cross_key150;
    ImplTraits::TreeTypePtr::pointer cross_key150_last = NULL;
    OracleDML_OracleDMLKeys::natural_key_return natural_key151;
    ImplTraits::TreeTypePtr::pointer natural_key151_last = NULL;
    OracleDML_OracleDMLKeys::inner_key_return inner_key152;
    ImplTraits::TreeTypePtr::pointer inner_key152_last = NULL;
    OracleDML::outer_join_type_return outer_join_type153;
    ImplTraits::TreeTypePtr::pointer outer_join_type153_last = NULL;
    OracleDML_OracleDMLKeys::join_key_return join_key154;
    ImplTraits::TreeTypePtr::pointer join_key154_last = NULL;
    OracleDML::table_ref_aux_return table_ref_aux155;
    ImplTraits::TreeTypePtr::pointer table_ref_aux155_last = NULL;
    OracleDML::join_on_part_return join_on_part156;
    ImplTraits::TreeTypePtr::pointer join_on_part156_last = NULL;
    OracleDML::join_using_part_return join_using_part157;
    ImplTraits::TreeTypePtr::pointer join_using_part157_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_inner_key(get_psrstate()->get_treeAdaptor(), "rule inner_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_join_using_part(get_psrstate()->get_treeAdaptor(), "rule join_using_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_join_on_part(get_psrstate()->get_treeAdaptor(), "rule join_on_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_join_key(get_psrstate()->get_treeAdaptor(), "rule join_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_outer_join_type(get_psrstate()->get_treeAdaptor(), "rule outer_join_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_query_partition_clause(get_psrstate()->get_treeAdaptor(), "rule query_partition_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_cross_key(get_psrstate()->get_treeAdaptor(), "rule cross_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_natural_key(get_psrstate()->get_treeAdaptor(), "rule natural_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_ref_aux(get_psrstate()->get_treeAdaptor(), "rule table_ref_aux");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:308:5: ( (qpc1= query_partition_clause )? ( cross_key | natural_key )? ( inner_key | outer_join_type )? join_key table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )* -> ^( JOIN_DEF[$join_key.start] ( $qpc1)? table_ref_aux ( $qpc2)? ( join_on_part )* ( join_using_part )* ) )
        // OracleDML.g:308:9: (qpc1= query_partition_clause )? ( cross_key | natural_key )? ( inner_key | outer_join_type )? join_key table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )*
        {
            // OracleDML.g:308:13: (qpc1= query_partition_clause )?
            {
                ANTLR_UINT32 alt57=2;
                {
                    ANTLR_UINT32 LA57_0 = this->LA(1);
                    if ( (LA57_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "NATURAL"))||((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "CROSS"))||((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT"))||((toUpper(LT(1)->getText()) == "INNER")))))
                    {
                        {
                            ANTLR_UINT32 LA57_1 = this->LA(2);
                            if ( (LA57_1 == SQL92_RESERVED_BY) && ((toUpper(LT(1)->getText()) == "PARTITION")))
                            {
                                alt57=1;
                            }
                        }
                    }
                }
                switch (alt57)
                {
            	case 1:
            	    // OracleDML.g:308:13: qpc1= query_partition_clause
            	    {
            	        this->followPush(FOLLOW_query_partition_clause_in_join_clause2536);
            	        qpc1=query_partition_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            qpc1_last = qpc1.tree.get();
            	            stream_query_partition_clause.add(qpc1.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:309:9: ( cross_key | natural_key )?
            {
                ANTLR_UINT32 alt58=3;
                {
                    ANTLR_UINT32 LA58_0 = this->LA(1);
                    if ( (LA58_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "NATURAL"))||((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "CROSS"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT"))||((toUpper(LT(1)->getText()) == "INNER")))))
                    {
                        {
                            ANTLR_UINT32 LA58_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "CROSS")))
                            {
                                alt58=1;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "NATURAL")))
                            {
                                alt58=2;
                            }
                        }
                    }
                }
                switch (alt58)
                {
            	case 1:
            	    // OracleDML.g:309:10: cross_key
            	    {
            	        this->followPush(FOLLOW_cross_key_in_join_clause2548);
            	        cross_key150=cross_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            cross_key150_last = cross_key150.tree.get();
            	            stream_cross_key.add(cross_key150.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:309:20: natural_key
            	    {
            	        this->followPush(FOLLOW_natural_key_in_join_clause2550);
            	        natural_key151=natural_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            natural_key151_last = natural_key151.tree.get();
            	            stream_natural_key.add(natural_key151.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:309:34: ( inner_key | outer_join_type )?
            {
                ANTLR_UINT32 alt59=3;
                {
                    ANTLR_UINT32 LA59_0 = this->LA(1);
                    if ( (LA59_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT"))||((toUpper(LT(1)->getText()) == "INNER")))))
                    {
                        {
                            ANTLR_UINT32 LA59_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "INNER")))
                            {
                                alt59=1;
                            }
                            else if ( ((((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT")))))
                            {
                                alt59=2;
                            }
                        }
                    }
                }
                switch (alt59)
                {
            	case 1:
            	    // OracleDML.g:309:35: inner_key
            	    {
            	        this->followPush(FOLLOW_inner_key_in_join_clause2555);
            	        inner_key152=inner_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            inner_key152_last = inner_key152.tree.get();
            	            stream_inner_key.add(inner_key152.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:309:45: outer_join_type
            	    {
            	        this->followPush(FOLLOW_outer_join_type_in_join_clause2557);
            	        outer_join_type153=outer_join_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            outer_join_type153_last = outer_join_type153.tree.get();
            	            stream_outer_join_type.add(outer_join_type153.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_join_key_in_join_clause2561);
            join_key154=join_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                join_key154_last = join_key154.tree.get();
                stream_join_key.add(join_key154.tree);
            }

            this->followPush(FOLLOW_table_ref_aux_in_join_clause2571);
            table_ref_aux155=table_ref_aux();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_ref_aux155_last = table_ref_aux155.tree.get();
                stream_table_ref_aux.add(table_ref_aux155.tree);
            }

            // OracleDML.g:311:13: (qpc2= query_partition_clause )?
            {
                ANTLR_UINT32 alt60=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA60_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "PARTITION")))
                    		    {
                    		        alt60=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt60)
                {
            	case 1:
            	    // OracleDML.g:311:13: qpc2= query_partition_clause
            	    {
            	        this->followPush(FOLLOW_query_partition_clause_in_join_clause2583);
            	        qpc2=query_partition_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            qpc2_last = qpc2.tree.get();
            	            stream_query_partition_clause.add(qpc2.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:312:5: ( join_on_part | join_using_part )*

            for (;;)
            {
                ANTLR_UINT32 alt61=3;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_ON:
                	{
                		alt61=1;
                	}
                    break;
                case PLSQL_NON_RESERVED_USING:
                	{
                		alt61=2;
                	}
                    break;

                }

                switch (alt61)
                {
            	case 1:
            	    // OracleDML.g:312:10: join_on_part
            	    {
            	        this->followPush(FOLLOW_join_on_part_in_join_clause2595);
            	        join_on_part156=join_on_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            join_on_part156_last = join_on_part156.tree.get();
            	            stream_join_on_part.add(join_on_part156.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:313:10: join_using_part
            	    {
            	        this->followPush(FOLLOW_join_using_part_in_join_clause2606);
            	        join_using_part157=join_using_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            join_using_part157_last = join_using_part157.tree.get();
            	            stream_join_using_part.add(join_using_part157.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop61;	/* break out of the loop */
            	    break;
                }
            }
            loop61: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: table_ref_aux, qpc1, join_on_part, qpc2, join_using_part
            // token labels: 
            // rule labels: retval, qpc1, qpc2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
            RewriteRuleSubtreeStream<ImplTraits> stream_qpc1(get_psrstate()->get_treeAdaptor(), "rule qpc1",qpc1_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_qpc2(get_psrstate()->get_treeAdaptor(), "rule qpc2",qpc2_last); // rewrite alias

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 315:9: -> ^( JOIN_DEF[$join_key.start] ( $qpc1)? table_ref_aux ( $qpc2)? ( join_on_part )* ( join_using_part )* )
            {
            	// OracleDML.g:315:12: ^( JOIN_DEF[$join_key.start] ( $qpc1)? table_ref_aux ( $qpc2)? ( join_on_part )* ( join_using_part )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(JOIN_DEF, (join_key154.start)), root_1);
            	// OracleDML.g:315:41: ( $qpc1)?
            	if ( stream_qpc1.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_qpc1.nextTree());
            	}
            	stream_qpc1.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_ref_aux.nextTree());
            	// OracleDML.g:317:28: ( $qpc2)?
            	if ( stream_qpc2.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_qpc2.nextTree());
            	}
            	stream_qpc2.reset();

            	// OracleDML.g:317:34: ( join_on_part )*
            	while ( stream_join_on_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_join_on_part.nextTree());
            	}
            	stream_join_on_part.reset();

            	// OracleDML.g:317:48: ( join_using_part )*
            	while ( stream_join_using_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_join_using_part.nextTree());
            	}
            	stream_join_using_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulejoin_clauseEx; /* Prevent compiler warnings */
    rulejoin_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end join_clause */

/**
 * $ANTLR start join_on_part
 * OracleDML.g:320:1: join_on_part : on_key condition -> ^( on_key ^( LOGIC_EXPR condition ) ) ;
 */
OracleDML::join_on_part_return
OracleDML::join_on_part()
{
    OracleDML::join_on_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::on_key_return on_key158;
    ImplTraits::TreeTypePtr::pointer on_key158_last = NULL;
    OracleDML::condition_return condition159;
    ImplTraits::TreeTypePtr::pointer condition159_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");
    RewriteRuleSubtreeStream<ImplTraits> stream_on_key(get_psrstate()->get_treeAdaptor(), "rule on_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:321:5: ( on_key condition -> ^( on_key ^( LOGIC_EXPR condition ) ) )
        // OracleDML.g:321:10: on_key condition
        {
            this->followPush(FOLLOW_on_key_in_join_on_part2689);
            on_key158=on_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_on_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                on_key158_last = on_key158.tree.get();
                stream_on_key.add(on_key158.tree);
            }

            this->followPush(FOLLOW_condition_in_join_on_part2691);
            condition159=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_on_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition159_last = condition159.tree.get();
                stream_condition.add(condition159.tree);
            }

            // AST REWRITE
            // elements: on_key, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 322:9: -> ^( on_key ^( LOGIC_EXPR condition ) )
            {
            	// OracleDML.g:322:12: ^( on_key ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_on_key.nextNode(), root_1);
            	// OracleDML.g:322:21: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulejoin_on_partEx; /* Prevent compiler warnings */
    rulejoin_on_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end join_on_part */

/**
 * $ANTLR start join_using_part
 * OracleDML.g:325:1: join_using_part : using_key ^ LEFT_PAREN column_name ( COMMA ^ column_name )* RIGHT_PAREN ;
 */
OracleDML::join_using_part_return
OracleDML::join_using_part()
{
    OracleDML::join_using_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN161 = NULL;
    ImplTraits::CommonTokenType const* COMMA163 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN165 = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key160;
    ImplTraits::TreeTypePtr::pointer using_key160_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name162;
    ImplTraits::TreeTypePtr::pointer column_name162_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name164;
    ImplTraits::TreeTypePtr::pointer column_name164_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN161_tree;
    ImplTraits::TreeTypePtr COMMA163_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN165_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:326:5: ( using_key ^ LEFT_PAREN column_name ( COMMA ^ column_name )* RIGHT_PAREN )
        // OracleDML.g:326:10: using_key ^ LEFT_PAREN column_name ( COMMA ^ column_name )* RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_using_key_in_join_using_part2732);
            using_key160=using_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_using_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(using_key160.tree, root_0);

            LEFT_PAREN161 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_join_using_part2735);
            if  (this->hasException())
            {
                goto rulejoin_using_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN161_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN161));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN161_tree);
            }


            this->followPush(FOLLOW_column_name_in_join_using_part2737);
            column_name162=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_using_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name162.tree);


            // OracleDML.g:326:44: ( COMMA ^ column_name )*

            for (;;)
            {
                ANTLR_UINT32 alt62=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt62=1;
                	}
                    break;

                }

                switch (alt62)
                {
            	case 1:
            	    // OracleDML.g:326:45: COMMA ^ column_name
            	    {
            	        COMMA163 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_join_using_part2740);
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_using_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        COMMA163_tree = get_psrstate()->get_treeAdaptor()->create(COMMA163);
            	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(COMMA163_tree, root_0);
            	        }


            	        this->followPush(FOLLOW_column_name_in_join_using_part2743);
            	        column_name164=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_using_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name164.tree);


            	    }
            	    break;

            	default:
            	    goto loop62;	/* break out of the loop */
            	    break;
                }
            }
            loop62: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN165 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_join_using_part2747);
            if  (this->hasException())
            {
                goto rulejoin_using_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN165_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN165));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN165_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulejoin_using_partEx; /* Prevent compiler warnings */
    rulejoin_using_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end join_using_part */

/**
 * $ANTLR start outer_join_type
 * OracleDML.g:329:1: outer_join_type : ( full_key | left_key | right_key ) ( outer_key !)? ;
 */
OracleDML::outer_join_type_return
OracleDML::outer_join_type()
{
    OracleDML::outer_join_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::full_key_return full_key166;
    ImplTraits::TreeTypePtr::pointer full_key166_last = NULL;
    OracleDML_OracleDMLKeys::left_key_return left_key167;
    ImplTraits::TreeTypePtr::pointer left_key167_last = NULL;
    OracleDML_OracleDMLKeys::right_key_return right_key168;
    ImplTraits::TreeTypePtr::pointer right_key168_last = NULL;
    OracleDML_OracleDMLKeys::outer_key_return outer_key169;
    ImplTraits::TreeTypePtr::pointer outer_key169_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:330:5: ( ( full_key | left_key | right_key ) ( outer_key !)? )
        // OracleDML.g:331:5: ( full_key | left_key | right_key ) ( outer_key !)?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:331:5: ( full_key | left_key | right_key )
            {
                ANTLR_UINT32 alt63=3;
                {
                    ANTLR_UINT32 LA63_0 = this->LA(1);
                    if ( (LA63_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT")))))
                    {
                        {
                            ANTLR_UINT32 LA63_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "FULL")))
                            {
                                alt63=1;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "LEFT")))
                            {
                                alt63=2;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "RIGHT")))
                            {
                                alt63=3;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 63 );
                                ex->set_state( 1 );


                                goto ruleouter_join_typeEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 63 );
                        ex->set_state( 0 );


                        goto ruleouter_join_typeEx;

                    }
                }
                switch (alt63)
                {
            	case 1:
            	    // OracleDML.g:331:10: full_key
            	    {
            	        this->followPush(FOLLOW_full_key_in_outer_join_type2777);
            	        full_key166=full_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleouter_join_typeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, full_key166.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:332:10: left_key
            	    {
            	        this->followPush(FOLLOW_left_key_in_outer_join_type2788);
            	        left_key167=left_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleouter_join_typeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, left_key167.tree);


            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:333:10: right_key
            	    {
            	        this->followPush(FOLLOW_right_key_in_outer_join_type2799);
            	        right_key168=right_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleouter_join_typeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, right_key168.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:335:18: ( outer_key !)?
            {
                ANTLR_UINT32 alt64=2;
                {
                    ANTLR_UINT32 LA64_0 = this->LA(1);
                    if ( (LA64_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "OUTER")))))
                    {
                        {
                            ANTLR_UINT32 LA64_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "OUTER")))
                            {
                                alt64=1;
                            }
                        }
                    }
                }
                switch (alt64)
                {
            	case 1:
            	    // OracleDML.g:335:18: outer_key !
            	    {
            	        this->followPush(FOLLOW_outer_key_in_outer_join_type2815);
            	        outer_key169=outer_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleouter_join_typeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleouter_join_typeEx; /* Prevent compiler warnings */
    ruleouter_join_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end outer_join_type */

/**
 * $ANTLR start query_partition_clause
 * OracleDML.g:338:1: query_partition_clause : partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* ) -> ^( partition_key ( LEFT_PAREN )? ( subquery )? ( expression_list )? ( EXPR expression )* ( RIGHT_PAREN )? ) ;
 */
OracleDML::query_partition_clause_return
OracleDML::query_partition_clause()
{
    OracleDML::query_partition_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN172 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN174 = NULL;
    ImplTraits::CommonTokenType const* COMMA177 = NULL;
    OracleDML_OracleDMLKeys::partition_key_return partition_key170;
    ImplTraits::TreeTypePtr::pointer partition_key170_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key171;
    ImplTraits::TreeTypePtr::pointer by_key171_last = NULL;
    OracleDML::subquery_return subquery173;
    ImplTraits::TreeTypePtr::pointer subquery173_last = NULL;
    OracleDML::expression_list_return expression_list175;
    ImplTraits::TreeTypePtr::pointer expression_list175_last = NULL;
    OracleDML::expression_return expression176;
    ImplTraits::TreeTypePtr::pointer expression176_last = NULL;
    OracleDML::expression_return expression178;
    ImplTraits::TreeTypePtr::pointer expression178_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN172_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN174_tree;
    ImplTraits::TreeTypePtr COMMA177_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_list(get_psrstate()->get_treeAdaptor(), "rule expression_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_partition_key(get_psrstate()->get_treeAdaptor(), "rule partition_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:339:5: ( partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* ) -> ^( partition_key ( LEFT_PAREN )? ( subquery )? ( expression_list )? ( EXPR expression )* ( RIGHT_PAREN )? ) )
        // OracleDML.g:339:10: partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* )
        {
            this->followPush(FOLLOW_partition_key_in_query_partition_clause2837);
            partition_key170=partition_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_partition_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                partition_key170_last = partition_key170.tree.get();
                stream_partition_key.add(partition_key170.tree);
            }

            this->followPush(FOLLOW_by_key_in_query_partition_clause2839);
            by_key171=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_partition_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                by_key171_last = by_key171.tree.get();
                stream_by_key.add(by_key171.tree);
            }

            // OracleDML.g:340:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* )
            {
                ANTLR_UINT32 alt66=3;
                switch ( this->LA(1) )
                {
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA66_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred10_OracleDML>() )))
                		    {
                		        alt66=1;
                		    }
                		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred11_OracleDML>() )))
                		    {
                		        alt66=2;
                		    }
                		    else if ( (true))
                		    {
                		        alt66=3;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 66 );
                		        ex->set_state( 1 );


                		        goto rulequery_partition_clauseEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case REGULAR_ID:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt66=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 66 );
                    ex->set_state( 0 );


                    goto rulequery_partition_clauseEx;

                }

                switch (alt66)
                {
            	case 1:
            	    // OracleDML.g:340:10: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
            	    {
            	        LEFT_PAREN172 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_query_partition_clause2862);
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN172);


            	        this->followPush(FOLLOW_subquery_in_query_partition_clause2864);
            	        subquery173=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery173_last = subquery173.tree.get();
            	            stream_subquery.add(subquery173.tree);
            	        }

            	        RIGHT_PAREN174 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_query_partition_clause2866);
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN174);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:341:10: ( LEFT_PAREN )=> expression_list
            	    {
            	        this->followPush(FOLLOW_expression_list_in_query_partition_clause2882);
            	        expression_list175=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_list175_last = expression_list175.tree.get();
            	            stream_expression_list.add(expression_list175.tree);
            	        }

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:342:10: expression ( COMMA expression )*
            	    {
            	        this->followPush(FOLLOW_expression_in_query_partition_clause2893);
            	        expression176=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression176_last = expression176.tree.get();
            	            stream_expression.add(expression176.tree);
            	        }

            	        // OracleDML.g:342:21: ( COMMA expression )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt65=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt65=1;
            	            	}
            	                break;

            	            }

            	            switch (alt65)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:342:22: COMMA expression
            	        	    {
            	        	        COMMA177 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_query_partition_clause2896);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_partition_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA177);


            	        	        this->followPush(FOLLOW_expression_in_query_partition_clause2898);
            	        	        expression178=expression();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_partition_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            expression178_last = expression178.tree.get();
            	        	            stream_expression.add(expression178.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop65;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop65: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: RIGHT_PAREN, LEFT_PAREN, expression, subquery, expression_list, partition_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 344:9: -> ^( partition_key ( LEFT_PAREN )? ( subquery )? ( expression_list )? ( EXPR expression )* ( RIGHT_PAREN )? )
            {
            	// OracleDML.g:344:12: ^( partition_key ( LEFT_PAREN )? ( subquery )? ( expression_list )? ( EXPR expression )* ( RIGHT_PAREN )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_partition_key.nextNode(), root_1);
            	// OracleDML.g:344:28: ( LEFT_PAREN )?
            	if ( stream_LEFT_PAREN.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
            	}
            	stream_LEFT_PAREN.reset();

            	// OracleDML.g:344:40: ( subquery )?
            	if ( stream_subquery.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	}
            	stream_subquery.reset();

            	// OracleDML.g:344:50: ( expression_list )?
            	if ( stream_expression_list.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_list.nextTree());
            	}
            	stream_expression_list.reset();

            	// OracleDML.g:344:67: ( EXPR expression )*
            	while ( stream_expression.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"));
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            	}
            	stream_expression.reset();

            	// OracleDML.g:344:86: ( RIGHT_PAREN )?
            	if ( stream_RIGHT_PAREN.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	}
            	stream_RIGHT_PAREN.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulequery_partition_clauseEx; /* Prevent compiler warnings */
    rulequery_partition_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end query_partition_clause */

/**
 * $ANTLR start flashback_query_clause
 * OracleDML.g:347:1: flashback_query_clause : ( versions_key between_key ( scn_key | timestamp_key ) expression -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) ) | as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) ) );
 */
OracleDML::flashback_query_clause_return
OracleDML::flashback_query_clause()
{
    OracleDML::flashback_query_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::versions_key_return versions_key179;
    ImplTraits::TreeTypePtr::pointer versions_key179_last = NULL;
    OracleDML_OracleDMLKeys::between_key_return between_key180;
    ImplTraits::TreeTypePtr::pointer between_key180_last = NULL;
    OracleDML_OracleDMLKeys::scn_key_return scn_key181;
    ImplTraits::TreeTypePtr::pointer scn_key181_last = NULL;
    OracleDML_OracleDMLKeys::timestamp_key_return timestamp_key182;
    ImplTraits::TreeTypePtr::pointer timestamp_key182_last = NULL;
    OracleDML::expression_return expression183;
    ImplTraits::TreeTypePtr::pointer expression183_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key184;
    ImplTraits::TreeTypePtr::pointer as_key184_last = NULL;
    OracleDML_OracleDMLKeys::of_key_return of_key185;
    ImplTraits::TreeTypePtr::pointer of_key185_last = NULL;
    OracleDML_OracleDMLKeys::scn_key_return scn_key186;
    ImplTraits::TreeTypePtr::pointer scn_key186_last = NULL;
    OracleDML_OracleDMLKeys::timestamp_key_return timestamp_key187;
    ImplTraits::TreeTypePtr::pointer timestamp_key187_last = NULL;
    OracleDML_OracleDMLKeys::snapshot_key_return snapshot_key188;
    ImplTraits::TreeTypePtr::pointer snapshot_key188_last = NULL;
    OracleDML::expression_return expression189;
    ImplTraits::TreeTypePtr::pointer expression189_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_snapshot_key(get_psrstate()->get_treeAdaptor(), "rule snapshot_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_scn_key(get_psrstate()->get_treeAdaptor(), "rule scn_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_versions_key(get_psrstate()->get_treeAdaptor(), "rule versions_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_between_key(get_psrstate()->get_treeAdaptor(), "rule between_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_as_key(get_psrstate()->get_treeAdaptor(), "rule as_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_timestamp_key(get_psrstate()->get_treeAdaptor(), "rule timestamp_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_of_key(get_psrstate()->get_treeAdaptor(), "rule of_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:348:5: ( versions_key between_key ( scn_key | timestamp_key ) expression -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) ) | as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) ) )

            ANTLR_UINT32 alt69;

            alt69=2;

            {
                ANTLR_UINT32 LA69_0 = this->LA(1);
                if ( (LA69_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "VERSIONS")))
                {
                    alt69=1;
                }
                else if ( (LA69_0 == SQL92_RESERVED_AS))
                {
                    alt69=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 69 );
                    ex->set_state( 0 );


                    goto ruleflashback_query_clauseEx;

                }
            }
            switch (alt69)
            {
        	case 1:
        	    // OracleDML.g:348:10: versions_key between_key ( scn_key | timestamp_key ) expression
        	    {
        	        this->followPush(FOLLOW_versions_key_in_flashback_query_clause2959);
        	        versions_key179=versions_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            versions_key179_last = versions_key179.tree.get();
        	            stream_versions_key.add(versions_key179.tree);
        	        }

        	        this->followPush(FOLLOW_between_key_in_flashback_query_clause2961);
        	        between_key180=between_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            between_key180_last = between_key180.tree.get();
        	            stream_between_key.add(between_key180.tree);
        	        }

        	        // OracleDML.g:348:35: ( scn_key | timestamp_key )
        	        {
        	            ANTLR_UINT32 alt67=2;
        	            switch ( this->LA(1) )
        	            {
        	            case REGULAR_ID:
        	            	{
        	            		{
        	            		    ANTLR_UINT32 LA67_1 = this->LA(2);
        	            		    if ( ((toUpper(LT(1)->getText()) == "SCN")))
        	            		    {
        	            		        alt67=1;
        	            		    }
        	            		    else if ( ((toUpper(LT(1)->getText()) == "TIMESTAMP")))
        	            		    {
        	            		        alt67=2;
        	            		    }
        	            		    else
        	            		    {
        	            		        if (this->get_backtracking()>0)
        	            		        {
        	            		            this->set_failedflag( true );
        	            		            return retval;
        	            		        }


        	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		        ex->set_decisionNum( 67 );
        	            		        ex->set_state( 1 );


        	            		        goto ruleflashback_query_clauseEx;

        	            		    }
        	            		}
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 67 );
        	                ex->set_state( 0 );


        	                goto ruleflashback_query_clauseEx;

        	            }

        	            switch (alt67)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:348:36: scn_key
        	        	    {
        	        	        this->followPush(FOLLOW_scn_key_in_flashback_query_clause2964);
        	        	        scn_key181=scn_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            scn_key181_last = scn_key181.tree.get();
        	        	            stream_scn_key.add(scn_key181.tree);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:348:44: timestamp_key
        	        	    {
        	        	        this->followPush(FOLLOW_timestamp_key_in_flashback_query_clause2966);
        	        	        timestamp_key182=timestamp_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            timestamp_key182_last = timestamp_key182.tree.get();
        	        	            stream_timestamp_key.add(timestamp_key182.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_expression_in_flashback_query_clause2969);
        	        expression183=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression183_last = expression183.tree.get();
        	            stream_expression.add(expression183.tree);
        	        }

        	        // AST REWRITE
        	        // elements: scn_key, expression, versions_key, timestamp_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 348:70: -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:348:73: ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_versions_key.nextNode(), root_1);
        	        	// OracleDML.g:348:88: ( scn_key )?
        	        	if ( stream_scn_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_scn_key.nextTree());
        	        	}
        	        	stream_scn_key.reset();

        	        	// OracleDML.g:348:97: ( timestamp_key )?
        	        	if ( stream_timestamp_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_timestamp_key.nextTree());
        	        	}
        	        	stream_timestamp_key.reset();

        	        	// OracleDML.g:348:112: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:349:10: as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression
        	    {
        	        this->followPush(FOLLOW_as_key_in_flashback_query_clause2999);
        	        as_key184=as_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            as_key184_last = as_key184.tree.get();
        	            stream_as_key.add(as_key184.tree);
        	        }

        	        this->followPush(FOLLOW_of_key_in_flashback_query_clause3001);
        	        of_key185=of_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            of_key185_last = of_key185.tree.get();
        	            stream_of_key.add(of_key185.tree);
        	        }

        	        // OracleDML.g:349:24: ( scn_key | timestamp_key | snapshot_key )
        	        {
        	            ANTLR_UINT32 alt68=3;
        	            switch ( this->LA(1) )
        	            {
        	            case REGULAR_ID:
        	            	{
        	            		{
        	            		    ANTLR_UINT32 LA68_1 = this->LA(2);
        	            		    if ( ((toUpper(LT(1)->getText()) == "SCN")))
        	            		    {
        	            		        alt68=1;
        	            		    }
        	            		    else if ( ((toUpper(LT(1)->getText()) == "TIMESTAMP")))
        	            		    {
        	            		        alt68=2;
        	            		    }
        	            		    else if ( ((toUpper(LT(1)->getText()) == "SNAPSHOT")))
        	            		    {
        	            		        alt68=3;
        	            		    }
        	            		    else
        	            		    {
        	            		        if (this->get_backtracking()>0)
        	            		        {
        	            		            this->set_failedflag( true );
        	            		            return retval;
        	            		        }


        	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		        ex->set_decisionNum( 68 );
        	            		        ex->set_state( 1 );


        	            		        goto ruleflashback_query_clauseEx;

        	            		    }
        	            		}
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 68 );
        	                ex->set_state( 0 );


        	                goto ruleflashback_query_clauseEx;

        	            }

        	            switch (alt68)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:349:25: scn_key
        	        	    {
        	        	        this->followPush(FOLLOW_scn_key_in_flashback_query_clause3004);
        	        	        scn_key186=scn_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            scn_key186_last = scn_key186.tree.get();
        	        	            stream_scn_key.add(scn_key186.tree);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:349:33: timestamp_key
        	        	    {
        	        	        this->followPush(FOLLOW_timestamp_key_in_flashback_query_clause3006);
        	        	        timestamp_key187=timestamp_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            timestamp_key187_last = timestamp_key187.tree.get();
        	        	            stream_timestamp_key.add(timestamp_key187.tree);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // OracleDML.g:349:47: snapshot_key
        	        	    {
        	        	        this->followPush(FOLLOW_snapshot_key_in_flashback_query_clause3008);
        	        	        snapshot_key188=snapshot_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            snapshot_key188_last = snapshot_key188.tree.get();
        	        	            stream_snapshot_key.add(snapshot_key188.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_expression_in_flashback_query_clause3011);
        	        expression189=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression189_last = expression189.tree.get();
        	            stream_expression.add(expression189.tree);
        	        }

        	        // AST REWRITE
        	        // elements: scn_key, as_key, snapshot_key, expression, timestamp_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 349:72: -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:349:75: ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_as_key.nextNode(), root_1);
        	        	// OracleDML.g:349:84: ( scn_key )?
        	        	if ( stream_scn_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_scn_key.nextTree());
        	        	}
        	        	stream_scn_key.reset();

        	        	// OracleDML.g:349:93: ( timestamp_key )?
        	        	if ( stream_timestamp_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_timestamp_key.nextTree());
        	        	}
        	        	stream_timestamp_key.reset();

        	        	// OracleDML.g:349:108: ( snapshot_key )?
        	        	if ( stream_snapshot_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_snapshot_key.nextTree());
        	        	}
        	        	stream_snapshot_key.reset();

        	        	// OracleDML.g:349:122: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleflashback_query_clauseEx; /* Prevent compiler warnings */
    ruleflashback_query_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end flashback_query_clause */

/**
 * $ANTLR start pivot_clause
 * OracleDML.g:352:1: pivot_clause : pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN -> ^( pivot_key ( xml_key )? LEFT_PAREN ( pivot_element )+ pivot_for_clause pivot_in_clause RIGHT_PAREN ) ;
 */
OracleDML::pivot_clause_return
OracleDML::pivot_clause()
{
    OracleDML::pivot_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN192 = NULL;
    ImplTraits::CommonTokenType const* COMMA194 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN198 = NULL;
    OracleDML_OracleDMLKeys::pivot_key_return pivot_key190;
    ImplTraits::TreeTypePtr::pointer pivot_key190_last = NULL;
    OracleDML_OracleDMLKeys::xml_key_return xml_key191;
    ImplTraits::TreeTypePtr::pointer xml_key191_last = NULL;
    OracleDML::pivot_element_return pivot_element193;
    ImplTraits::TreeTypePtr::pointer pivot_element193_last = NULL;
    OracleDML::pivot_element_return pivot_element195;
    ImplTraits::TreeTypePtr::pointer pivot_element195_last = NULL;
    OracleDML::pivot_for_clause_return pivot_for_clause196;
    ImplTraits::TreeTypePtr::pointer pivot_for_clause196_last = NULL;
    OracleDML::pivot_in_clause_return pivot_in_clause197;
    ImplTraits::TreeTypePtr::pointer pivot_in_clause197_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN192_tree;
    ImplTraits::TreeTypePtr COMMA194_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN198_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_in_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_in_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_element(get_psrstate()->get_treeAdaptor(), "rule pivot_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_key(get_psrstate()->get_treeAdaptor(), "rule pivot_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_for_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_for_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_xml_key(get_psrstate()->get_treeAdaptor(), "rule xml_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:353:5: ( pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN -> ^( pivot_key ( xml_key )? LEFT_PAREN ( pivot_element )+ pivot_for_clause pivot_in_clause RIGHT_PAREN ) )
        // OracleDML.g:353:10: pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN
        {
            this->followPush(FOLLOW_pivot_key_in_pivot_clause3052);
            pivot_key190=pivot_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_key190_last = pivot_key190.tree.get();
                stream_pivot_key.add(pivot_key190.tree);
            }

            // OracleDML.g:353:20: ( xml_key )?
            {
                ANTLR_UINT32 alt70=2;
                {
                    ANTLR_UINT32 LA70_0 = this->LA(1);
                    if ( (LA70_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "XML")))
                    {
                        alt70=1;
                    }
                }
                switch (alt70)
                {
            	case 1:
            	    // OracleDML.g:353:20: xml_key
            	    {
            	        this->followPush(FOLLOW_xml_key_in_pivot_clause3054);
            	        xml_key191=xml_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            xml_key191_last = xml_key191.tree.get();
            	            stream_xml_key.add(xml_key191.tree);
            	        }

            	    }
            	    break;

                }
            }

            LEFT_PAREN192 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_pivot_clause3065);
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN192);


            this->followPush(FOLLOW_pivot_element_in_pivot_clause3079);
            pivot_element193=pivot_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_element193_last = pivot_element193.tree.get();
                stream_pivot_element.add(pivot_element193.tree);
            }

            // OracleDML.g:355:27: ( COMMA pivot_element )*

            for (;;)
            {
                ANTLR_UINT32 alt71=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt71=1;
                	}
                    break;

                }

                switch (alt71)
                {
            	case 1:
            	    // OracleDML.g:355:28: COMMA pivot_element
            	    {
            	        COMMA194 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_pivot_clause3082);
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA194);


            	        this->followPush(FOLLOW_pivot_element_in_pivot_clause3084);
            	        pivot_element195=pivot_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_element195_last = pivot_element195.tree.get();
            	            stream_pivot_element.add(pivot_element195.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop71;	/* break out of the loop */
            	    break;
                }
            }
            loop71: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_pivot_for_clause_in_pivot_clause3100);
            pivot_for_clause196=pivot_for_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_for_clause196_last = pivot_for_clause196.tree.get();
                stream_pivot_for_clause.add(pivot_for_clause196.tree);
            }

            this->followPush(FOLLOW_pivot_in_clause_in_pivot_clause3114);
            pivot_in_clause197=pivot_in_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_in_clause197_last = pivot_in_clause197.tree.get();
                stream_pivot_in_clause.add(pivot_in_clause197.tree);
            }

            RIGHT_PAREN198 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_pivot_clause3126);
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN198);


            // AST REWRITE
            // elements: pivot_key, RIGHT_PAREN, pivot_for_clause, pivot_in_clause, xml_key, pivot_element, LEFT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 359:9: -> ^( pivot_key ( xml_key )? LEFT_PAREN ( pivot_element )+ pivot_for_clause pivot_in_clause RIGHT_PAREN )
            {
            	// OracleDML.g:359:12: ^( pivot_key ( xml_key )? LEFT_PAREN ( pivot_element )+ pivot_for_clause pivot_in_clause RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_pivot_key.nextNode(), root_1);
            	// OracleDML.g:359:24: ( xml_key )?
            	if ( stream_xml_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_xml_key.nextTree());
            	}
            	stream_xml_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
            	if ( !(stream_pivot_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "pivot_element empty" );
            		goto rulepivot_clauseEx;
            	}
            	while ( stream_pivot_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_element.nextTree());
            	}
            	stream_pivot_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_for_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_in_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_clauseEx; /* Prevent compiler warnings */
    rulepivot_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_clause */

/**
 * $ANTLR start pivot_element
 * OracleDML.g:362:1: pivot_element : aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )? -> ^( PIVOT_ELEMENT ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN ) ) ) ( column_alias )? ) ;
 */
OracleDML::pivot_element_return
OracleDML::pivot_element()
{
    OracleDML::pivot_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN200 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN202 = NULL;
    OracleDML_OracleDMLCommons::aggregate_function_name_return aggregate_function_name199;
    ImplTraits::TreeTypePtr::pointer aggregate_function_name199_last = NULL;
    OracleDML::expression_return expression201;
    ImplTraits::TreeTypePtr::pointer expression201_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias203;
    ImplTraits::TreeTypePtr::pointer column_alias203_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN200_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN202_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_aggregate_function_name(get_psrstate()->get_treeAdaptor(), "rule aggregate_function_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:363:5: ( aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )? -> ^( PIVOT_ELEMENT ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN ) ) ) ( column_alias )? ) )
        // OracleDML.g:363:10: aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )?
        {
            this->followPush(FOLLOW_aggregate_function_name_in_pivot_element3174);
            aggregate_function_name199=aggregate_function_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                aggregate_function_name199_last = aggregate_function_name199.tree.get();
                stream_aggregate_function_name.add(aggregate_function_name199.tree);
            }

            LEFT_PAREN200 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_pivot_element3176);
            if  (this->hasException())
            {
                goto rulepivot_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN200);


            this->followPush(FOLLOW_expression_in_pivot_element3178);
            expression201=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression201_last = expression201.tree.get();
                stream_expression.add(expression201.tree);
            }

            RIGHT_PAREN202 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_pivot_element3180);
            if  (this->hasException())
            {
                goto rulepivot_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN202);


            // OracleDML.g:363:68: ( column_alias )?
            {
                ANTLR_UINT32 alt72=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt72=1;
                    	}
                        break;
                }

                switch (alt72)
                {
            	case 1:
            	    // OracleDML.g:363:68: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_pivot_element3182);
            	        column_alias203=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias203_last = column_alias203.tree.get();
            	            stream_column_alias.add(column_alias203.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression, column_alias, RIGHT_PAREN, aggregate_function_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 364:9: -> ^( PIVOT_ELEMENT ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN ) ) ) ( column_alias )? )
            {
            	// OracleDML.g:364:12: ^( PIVOT_ELEMENT ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN ) ) ) ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(PIVOT_ELEMENT, "PIVOT_ELEMENT"), root_1);
            	// OracleDML.g:364:28: ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN ) ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	// OracleDML.g:364:35: ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN ) )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ROUTINE_CALL, "ROUTINE_CALL"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_aggregate_function_name.nextTree());
            	// OracleDML.g:364:74: ^( ARGUMENTS[$LEFT_PAREN] ^( ARGUMENT ^( EXPR expression ) ) RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_4 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_4 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ARGUMENTS, LEFT_PAREN200), root_4);
            	// OracleDML.g:364:99: ^( ARGUMENT ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_5 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_5 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ARGUMENT, "ARGUMENT"), root_5);
            	// OracleDML.g:364:110: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_6 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_6 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_6);
            	get_psrstate()->get_treeAdaptor()->addChild(root_6, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_5, root_6);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_4, root_5);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_4, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, root_4);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:364:145: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_elementEx; /* Prevent compiler warnings */
    rulepivot_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_element */

/**
 * $ANTLR start pivot_for_clause
 * OracleDML.g:367:1: pivot_for_clause : for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) -> ^( for_key LEFT_PAREN ( column_name )+ RIGHT_PAREN ) ;
 */
OracleDML::pivot_for_clause_return
OracleDML::pivot_for_clause()
{
    OracleDML::pivot_for_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN206 = NULL;
    ImplTraits::CommonTokenType const* COMMA208 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN210 = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key204;
    ImplTraits::TreeTypePtr::pointer for_key204_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name205;
    ImplTraits::TreeTypePtr::pointer column_name205_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name207;
    ImplTraits::TreeTypePtr::pointer column_name207_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name209;
    ImplTraits::TreeTypePtr::pointer column_name209_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN206_tree;
    ImplTraits::TreeTypePtr COMMA208_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN210_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:368:5: ( for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) -> ^( for_key LEFT_PAREN ( column_name )+ RIGHT_PAREN ) )
        // OracleDML.g:368:10: for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
        {
            this->followPush(FOLLOW_for_key_in_pivot_for_clause3247);
            for_key204=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_for_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key204_last = for_key204.tree.get();
                stream_for_key.add(for_key204.tree);
            }

            // OracleDML.g:369:5: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            {
                ANTLR_UINT32 alt74=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt74=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt74=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 74 );
                    ex->set_state( 0 );


                    goto rulepivot_for_clauseEx;

                }

                switch (alt74)
                {
            	case 1:
            	    // OracleDML.g:369:10: column_name
            	    {
            	        this->followPush(FOLLOW_column_name_in_pivot_for_clause3259);
            	        column_name205=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_for_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name205_last = column_name205.tree.get();
            	            stream_column_name.add(column_name205.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:370:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN206 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_pivot_for_clause3270);
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_for_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN206);


            	        this->followPush(FOLLOW_column_name_in_pivot_for_clause3272);
            	        column_name207=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_for_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name207_last = column_name207.tree.get();
            	            stream_column_name.add(column_name207.tree);
            	        }

            	        // OracleDML.g:370:33: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt73=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt73=1;
            	            	}
            	                break;

            	            }

            	            switch (alt73)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:370:34: COMMA column_name
            	        	    {
            	        	        COMMA208 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_pivot_for_clause3275);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_for_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA208);


            	        	        this->followPush(FOLLOW_column_name_in_pivot_for_clause3277);
            	        	        column_name209=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_for_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name209_last = column_name209.tree.get();
            	        	            stream_column_name.add(column_name209.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop73;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop73: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN210 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_pivot_for_clause3281);
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_for_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN210);


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_name, RIGHT_PAREN, for_key, LEFT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 372:9: -> ^( for_key LEFT_PAREN ( column_name )+ RIGHT_PAREN )
            {
            	// OracleDML.g:372:12: ^( for_key LEFT_PAREN ( column_name )+ RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_for_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
            	if ( !(stream_column_name.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
            		goto rulepivot_for_clauseEx;
            	}
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_for_clauseEx; /* Prevent compiler warnings */
    rulepivot_for_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_for_clause */

/**
 * $ANTLR start pivot_in_clause
 * OracleDML.g:375:1: pivot_in_clause : in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN -> {mode == 1}? ^( in_key subquery ) -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) ) -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ;
 */
OracleDML::pivot_in_clause_return
OracleDML::pivot_in_clause()
{
    OracleDML::pivot_in_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN212 = NULL;
    ImplTraits::CommonTokenType const* COMMA215 = NULL;
    ImplTraits::CommonTokenType const* COMMA218 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN220 = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key211;
    ImplTraits::TreeTypePtr::pointer in_key211_last = NULL;
    OracleDML::subquery_return subquery213;
    ImplTraits::TreeTypePtr::pointer subquery213_last = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key214;
    ImplTraits::TreeTypePtr::pointer any_key214_last = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key216;
    ImplTraits::TreeTypePtr::pointer any_key216_last = NULL;
    OracleDML::pivot_in_clause_element_return pivot_in_clause_element217;
    ImplTraits::TreeTypePtr::pointer pivot_in_clause_element217_last = NULL;
    OracleDML::pivot_in_clause_element_return pivot_in_clause_element219;
    ImplTraits::TreeTypePtr::pointer pivot_in_clause_element219_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN212_tree;
    ImplTraits::TreeTypePtr COMMA215_tree;
    ImplTraits::TreeTypePtr COMMA218_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN220_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_any_key(get_psrstate()->get_treeAdaptor(), "rule any_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_in_clause_element(get_psrstate()->get_treeAdaptor(), "rule pivot_in_clause_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:377:5: ( in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN -> {mode == 1}? ^( in_key subquery ) -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) ) -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
        // OracleDML.g:377:10: in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN
        {
            this->followPush(FOLLOW_in_key_in_pivot_in_clause3336);
            in_key211=in_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                in_key211_last = in_key211.tree.get();
                stream_in_key.add(in_key211.tree);
            }

            LEFT_PAREN212 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_pivot_in_clause3346);
            if  (this->hasException())
            {
                goto rulepivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN212);


            // OracleDML.g:379:13: ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* )
            {
                ANTLR_UINT32 alt77=3;
                {
                    ANTLR_UINT32 LA77_0 = this->LA(1);
                    if ( (LA77_0 == SQL92_RESERVED_SELECT) && (this->msynpred( antlr3::ClassForwarder<synpred12_OracleDML>() )))
                    {
                        alt77=1;
                    }
                    else if ( (LA77_0 == LEFT_PAREN))
                    {
                        {
                            ANTLR_UINT32 LA77_2 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred12_OracleDML>() )))
                            {
                                alt77=1;
                            }
                            else if ( (true))
                            {
                                alt77=3;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 77 );
                                ex->set_state( 2 );


                                goto rulepivot_in_clauseEx;

                            }
                        }
                    }
                    else if ( (LA77_0 == SQL92_RESERVED_ANY))
                    {
                        {
                            ANTLR_UINT32 LA77_3 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred13_OracleDML>() )))
                            {
                                alt77=2;
                            }
                            else if ( (true))
                            {
                                alt77=3;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 77 );
                                ex->set_state( 3 );


                                goto rulepivot_in_clauseEx;

                            }
                        }
                    }
                    else if ( (LA77_0 == APPROXIMATE_NUM_LIT || LA77_0 == BINDVAR || ((LA77_0 >= CHAR_STRING) && (LA77_0 <= CHAR_STRING_PERL)) || LA77_0 == COLON || LA77_0 == DELIMITED_ID || LA77_0 == EXACT_NUM_LIT || LA77_0 == INTRODUCER || LA77_0 == MINUS_SIGN || LA77_0 == NATIONAL_CHAR_STRING_LIT || ((LA77_0 >= PLSQL_NON_RESERVED_CAST) && (LA77_0 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA77_0 == PLUS_SIGN || LA77_0 == REGULAR_ID || LA77_0 == SQL92_RESERVED_ALL || LA77_0 == SQL92_RESERVED_CASE || ((LA77_0 >= SQL92_RESERVED_CURSOR) && (LA77_0 <= SQL92_RESERVED_DATE)) || LA77_0 == SQL92_RESERVED_DEFAULT || LA77_0 == SQL92_RESERVED_DISTINCT || ((LA77_0 >= SQL92_RESERVED_EXISTS) && (LA77_0 <= SQL92_RESERVED_FALSE)) || ((LA77_0 >= SQL92_RESERVED_NOT) && (LA77_0 <= SQL92_RESERVED_NULL)) || LA77_0 == SQL92_RESERVED_PRIOR || LA77_0 == SQL92_RESERVED_TRUE || LA77_0 == UNSIGNED_INTEGER))
                    {
                        alt77=3;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 77 );
                        ex->set_state( 0 );


                        goto rulepivot_in_clauseEx;

                    }
                }
                switch (alt77)
                {
            	case 1:
            	    // OracleDML.g:379:18: ( select_key )=> subquery
            	    {
            	        this->followPush(FOLLOW_subquery_in_pivot_in_clause3370);
            	        subquery213=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery213_last = subquery213.tree.get();
            	            stream_subquery.add(subquery213.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:380:18: ( any_key )=> any_key ( COMMA any_key )*
            	    {
            	        this->followPush(FOLLOW_any_key_in_pivot_in_clause3396);
            	        any_key214=any_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            any_key214_last = any_key214.tree.get();
            	            stream_any_key.add(any_key214.tree);
            	        }

            	        // OracleDML.g:380:38: ( COMMA any_key )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt75=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt75=1;
            	            	}
            	                break;

            	            }

            	            switch (alt75)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:380:39: COMMA any_key
            	        	    {
            	        	        COMMA215 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_pivot_in_clause3399);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_in_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA215);


            	        	        this->followPush(FOLLOW_any_key_in_pivot_in_clause3401);
            	        	        any_key216=any_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_in_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            any_key216_last = any_key216.tree.get();
            	        	            stream_any_key.add(any_key216.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop75;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop75: ; /* Jump out to here if this rule does not match */


            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 2;
            	        }


            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:381:18: pivot_in_clause_element ( COMMA pivot_in_clause_element )*
            	    {
            	        this->followPush(FOLLOW_pivot_in_clause_element_in_pivot_in_clause3424);
            	        pivot_in_clause_element217=pivot_in_clause_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_in_clause_element217_last = pivot_in_clause_element217.tree.get();
            	            stream_pivot_in_clause_element.add(pivot_in_clause_element217.tree);
            	        }

            	        // OracleDML.g:381:42: ( COMMA pivot_in_clause_element )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt76=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt76=1;
            	            	}
            	                break;

            	            }

            	            switch (alt76)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:381:43: COMMA pivot_in_clause_element
            	        	    {
            	        	        COMMA218 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_pivot_in_clause3427);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_in_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA218);


            	        	        this->followPush(FOLLOW_pivot_in_clause_element_in_pivot_in_clause3429);
            	        	        pivot_in_clause_element219=pivot_in_clause_element();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_in_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            pivot_in_clause_element219_last = pivot_in_clause_element219.tree.get();
            	        	            stream_pivot_in_clause_element.add(pivot_in_clause_element219.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop76;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop76: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            RIGHT_PAREN220 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_pivot_in_clause3455);
            if  (this->hasException())
            {
                goto rulepivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN220);


            // AST REWRITE
            // elements: in_key, any_key, in_key, pivot_in_clause_element, in_key, subquery
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 384:9: -> {mode == 1}? ^( in_key subquery )
            if (mode == 1) {
            	// OracleDML.g:384:24: ^( in_key subquery )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 385:9: -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) )
            if (mode == 2) {
            	// OracleDML.g:385:24: ^( in_key ^( ANY_MODE ( any_key )+ ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	// OracleDML.g:385:33: ^( ANY_MODE ( any_key )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ANY_MODE, "ANY_MODE"), root_2);
            	if ( !(stream_any_key.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "any_key empty" );
            		goto rulepivot_in_clauseEx;
            	}
            	while ( stream_any_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_any_key.nextTree());
            	}
            	stream_any_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 386:9: -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
            {
            	// OracleDML.g:386:12: ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	// OracleDML.g:386:21: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ELEMENTS_MODE, "ELEMENTS_MODE"), root_2);
            	if ( !(stream_pivot_in_clause_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "pivot_in_clause_element empty" );
            		goto rulepivot_in_clauseEx;
            	}
            	while ( stream_pivot_in_clause_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_pivot_in_clause_element.nextTree());
            	}
            	stream_pivot_in_clause_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_in_clauseEx; /* Prevent compiler warnings */
    rulepivot_in_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_in_clause */

/**
 * $ANTLR start pivot_in_clause_element
 * OracleDML.g:389:1: pivot_in_clause_element : pivot_in_clause_elements ( column_alias )? -> ^( PIVOT_IN_ELEMENT pivot_in_clause_elements ( column_alias )? ) ;
 */
OracleDML::pivot_in_clause_element_return
OracleDML::pivot_in_clause_element()
{
    OracleDML::pivot_in_clause_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::pivot_in_clause_elements_return pivot_in_clause_elements221;
    ImplTraits::TreeTypePtr::pointer pivot_in_clause_elements221_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias222;
    ImplTraits::TreeTypePtr::pointer column_alias222_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_in_clause_elements(get_psrstate()->get_treeAdaptor(), "rule pivot_in_clause_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:390:5: ( pivot_in_clause_elements ( column_alias )? -> ^( PIVOT_IN_ELEMENT pivot_in_clause_elements ( column_alias )? ) )
        // OracleDML.g:390:10: pivot_in_clause_elements ( column_alias )?
        {
            this->followPush(FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3535);
            pivot_in_clause_elements221=pivot_in_clause_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_in_clause_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_in_clause_elements221_last = pivot_in_clause_elements221.tree.get();
                stream_pivot_in_clause_elements.add(pivot_in_clause_elements221.tree);
            }

            // OracleDML.g:390:35: ( column_alias )?
            {
                ANTLR_UINT32 alt78=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt78=1;
                    	}
                        break;
                }

                switch (alt78)
                {
            	case 1:
            	    // OracleDML.g:390:35: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_pivot_in_clause_element3537);
            	        column_alias222=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_in_clause_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias222_last = column_alias222.tree.get();
            	            stream_column_alias.add(column_alias222.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: pivot_in_clause_elements, column_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 391:9: -> ^( PIVOT_IN_ELEMENT pivot_in_clause_elements ( column_alias )? )
            {
            	// OracleDML.g:391:12: ^( PIVOT_IN_ELEMENT pivot_in_clause_elements ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(PIVOT_IN_ELEMENT, "PIVOT_IN_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_in_clause_elements.nextTree());
            	// OracleDML.g:391:56: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_in_clause_elementEx; /* Prevent compiler warnings */
    rulepivot_in_clause_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_in_clause_element */

/**
 * $ANTLR start pivot_in_clause_elements
 * OracleDML.g:394:1: pivot_in_clause_elements : ( expression -> ^( EXPR expression ) | ( LEFT_PAREN )=> expression_list );
 */
OracleDML::pivot_in_clause_elements_return
OracleDML::pivot_in_clause_elements()
{
    OracleDML::pivot_in_clause_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression223;
    ImplTraits::TreeTypePtr::pointer expression223_last = NULL;
    OracleDML::expression_list_return expression_list224;
    ImplTraits::TreeTypePtr::pointer expression_list224_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:395:5: ( expression -> ^( EXPR expression ) | ( LEFT_PAREN )=> expression_list )

            ANTLR_UINT32 alt79;

            alt79=2;

            switch ( this->LA(1) )
            {
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case REGULAR_ID:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt79=1;
            	}
                break;
            case LEFT_PAREN:
            	{
            		{
            		    ANTLR_UINT32 LA79_25 = this->LA(2);
            		    if ( (true))
            		    {
            		        alt79=1;
            		    }
            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred14_OracleDML>() )))
            		    {
            		        alt79=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 79 );
            		        ex->set_state( 25 );


            		        goto rulepivot_in_clause_elementsEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 79 );
                ex->set_state( 0 );


                goto rulepivot_in_clause_elementsEx;

            }

            switch (alt79)
            {
        	case 1:
        	    // OracleDML.g:395:10: expression
        	    {
        	        this->followPush(FOLLOW_expression_in_pivot_in_clause_elements3577);
        	        expression223=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepivot_in_clause_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression223_last = expression223.tree.get();
        	            stream_expression.add(expression223.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 395:21: -> ^( EXPR expression )
        	        {
        	        	// OracleDML.g:395:24: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:396:10: ( LEFT_PAREN )=> expression_list
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_expression_list_in_pivot_in_clause_elements3601);
        	        expression_list224=expression_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepivot_in_clause_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_list224.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_in_clause_elementsEx; /* Prevent compiler warnings */
    rulepivot_in_clause_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_in_clause_elements */

/**
 * $ANTLR start unpivot_clause
 * OracleDML.g:399:1: unpivot_clause : unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause ) ;
 */
OracleDML::unpivot_clause_return
OracleDML::unpivot_clause()
{
    OracleDML::unpivot_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN229 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN231 = NULL;
    ImplTraits::CommonTokenType const* COMMA233 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN235 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN238 = NULL;
    OracleDML_OracleDMLKeys::unpivot_key_return unpivot_key225;
    ImplTraits::TreeTypePtr::pointer unpivot_key225_last = NULL;
    OracleDML_OracleDMLKeys::include_key_return include_key226;
    ImplTraits::TreeTypePtr::pointer include_key226_last = NULL;
    OracleDML_OracleDMLKeys::exclude_key_return exclude_key227;
    ImplTraits::TreeTypePtr::pointer exclude_key227_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key228;
    ImplTraits::TreeTypePtr::pointer nulls_key228_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name230;
    ImplTraits::TreeTypePtr::pointer column_name230_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name232;
    ImplTraits::TreeTypePtr::pointer column_name232_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name234;
    ImplTraits::TreeTypePtr::pointer column_name234_last = NULL;
    OracleDML::pivot_for_clause_return pivot_for_clause236;
    ImplTraits::TreeTypePtr::pointer pivot_for_clause236_last = NULL;
    OracleDML::unpivot_in_clause_return unpivot_in_clause237;
    ImplTraits::TreeTypePtr::pointer unpivot_in_clause237_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN229_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN231_tree;
    ImplTraits::TreeTypePtr COMMA233_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN235_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN238_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_nulls_key(get_psrstate()->get_treeAdaptor(), "rule nulls_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_exclude_key(get_psrstate()->get_treeAdaptor(), "rule exclude_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_include_key(get_psrstate()->get_treeAdaptor(), "rule include_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_key(get_psrstate()->get_treeAdaptor(), "rule unpivot_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_for_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_for_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_in_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_in_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:400:5: ( unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause ) )
        // OracleDML.g:400:10: unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN
        {
            this->followPush(FOLLOW_unpivot_key_in_unpivot_clause3621);
            unpivot_key225=unpivot_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                unpivot_key225_last = unpivot_key225.tree.get();
                stream_unpivot_key.add(unpivot_key225.tree);
            }

            // OracleDML.g:401:9: ( ( include_key | exclude_key ) nulls_key )?
            {
                ANTLR_UINT32 alt81=2;
                {
                    ANTLR_UINT32 LA81_0 = this->LA(1);
                    if ( (LA81_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INCLUDE"))||((toUpper(LT(1)->getText()) == "EXCLUDE")))))
                    {
                        alt81=1;
                    }
                }
                switch (alt81)
                {
            	case 1:
            	    // OracleDML.g:401:10: ( include_key | exclude_key ) nulls_key
            	    {
            	        // OracleDML.g:401:10: ( include_key | exclude_key )
            	        {
            	            ANTLR_UINT32 alt80=2;
            	            {
            	                ANTLR_UINT32 LA80_0 = this->LA(1);
            	                if ( (LA80_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INCLUDE"))||((toUpper(LT(1)->getText()) == "EXCLUDE")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA80_1 = this->LA(2);
            	                        if ( ((toUpper(LT(1)->getText()) == "INCLUDE")))
            	                        {
            	                            alt80=1;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "EXCLUDE")))
            	                        {
            	                            alt80=2;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return retval;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 80 );
            	                            ex->set_state( 1 );


            	                            goto ruleunpivot_clauseEx;

            	                        }
            	                    }
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 80 );
            	                    ex->set_state( 0 );


            	                    goto ruleunpivot_clauseEx;

            	                }
            	            }
            	            switch (alt80)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:401:11: include_key
            	        	    {
            	        	        this->followPush(FOLLOW_include_key_in_unpivot_clause3634);
            	        	        include_key226=include_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            include_key226_last = include_key226.tree.get();
            	        	            stream_include_key.add(include_key226.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:401:23: exclude_key
            	        	    {
            	        	        this->followPush(FOLLOW_exclude_key_in_unpivot_clause3636);
            	        	        exclude_key227=exclude_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            exclude_key227_last = exclude_key227.tree.get();
            	        	            stream_exclude_key.add(exclude_key227.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_nulls_key_in_unpivot_clause3639);
            	        nulls_key228=nulls_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            nulls_key228_last = nulls_key228.tree.get();
            	            stream_nulls_key.add(nulls_key228.tree);
            	        }

            	    }
            	    break;

                }
            }

            LEFT_PAREN229 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_clause3651);
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN229);


            // OracleDML.g:403:13: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            {
                ANTLR_UINT32 alt83=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt83=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt83=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 83 );
                    ex->set_state( 0 );


                    goto ruleunpivot_clauseEx;

                }

                switch (alt83)
                {
            	case 1:
            	    // OracleDML.g:403:18: column_name
            	    {
            	        this->followPush(FOLLOW_column_name_in_unpivot_clause3670);
            	        column_name230=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name230_last = column_name230.tree.get();
            	            stream_column_name.add(column_name230.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:404:18: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN231 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_clause3689);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN231);


            	        this->followPush(FOLLOW_column_name_in_unpivot_clause3691);
            	        column_name232=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name232_last = column_name232.tree.get();
            	            stream_column_name.add(column_name232.tree);
            	        }

            	        // OracleDML.g:404:41: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt82=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt82=1;
            	            	}
            	                break;

            	            }

            	            switch (alt82)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:404:42: COMMA column_name
            	        	    {
            	        	        COMMA233 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_unpivot_clause3694);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA233);


            	        	        this->followPush(FOLLOW_column_name_in_unpivot_clause3696);
            	        	        column_name234=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name234_last = column_name234.tree.get();
            	        	            stream_column_name.add(column_name234.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop82;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop82: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN235 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_clause3700);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN235);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_pivot_for_clause_in_unpivot_clause3728);
            pivot_for_clause236=pivot_for_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_for_clause236_last = pivot_for_clause236.tree.get();
                stream_pivot_for_clause.add(pivot_for_clause236.tree);
            }

            this->followPush(FOLLOW_unpivot_in_clause_in_unpivot_clause3742);
            unpivot_in_clause237=unpivot_in_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                unpivot_in_clause237_last = unpivot_in_clause237.tree.get();
                stream_unpivot_in_clause.add(unpivot_in_clause237.tree);
            }

            RIGHT_PAREN238 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_clause3752);
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN238);


            // AST REWRITE
            // elements: include_key, nulls_key, column_name, unpivot_key, unpivot_in_clause, pivot_for_clause, exclude_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 409:9: -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause )
            {
            	// OracleDML.g:409:12: ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_unpivot_key.nextNode(), root_1);
            	// OracleDML.g:409:26: ( include_key )?
            	if ( stream_include_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_include_key.nextTree());
            	}
            	stream_include_key.reset();

            	// OracleDML.g:409:39: ( exclude_key )?
            	if ( stream_exclude_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_exclude_key.nextTree());
            	}
            	stream_exclude_key.reset();

            	// OracleDML.g:409:52: ( nulls_key )?
            	if ( stream_nulls_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_nulls_key.nextTree());
            	}
            	stream_nulls_key.reset();

            	if ( !(stream_column_name.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
            		goto ruleunpivot_clauseEx;
            	}
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_for_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_in_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleunpivot_clauseEx; /* Prevent compiler warnings */
    ruleunpivot_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end unpivot_clause */

/**
 * $ANTLR start unpivot_in_clause
 * OracleDML.g:412:1: unpivot_in_clause : in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ ) ;
 */
OracleDML::unpivot_in_clause_return
OracleDML::unpivot_in_clause()
{
    OracleDML::unpivot_in_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN240 = NULL;
    ImplTraits::CommonTokenType const* COMMA242 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN244 = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key239;
    ImplTraits::TreeTypePtr::pointer in_key239_last = NULL;
    OracleDML::unpivot_in_elements_return unpivot_in_elements241;
    ImplTraits::TreeTypePtr::pointer unpivot_in_elements241_last = NULL;
    OracleDML::unpivot_in_elements_return unpivot_in_elements243;
    ImplTraits::TreeTypePtr::pointer unpivot_in_elements243_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN240_tree;
    ImplTraits::TreeTypePtr COMMA242_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN244_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_in_elements(get_psrstate()->get_treeAdaptor(), "rule unpivot_in_elements");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:413:5: ( in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ ) )
        // OracleDML.g:413:10: in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN
        {
            this->followPush(FOLLOW_in_key_in_unpivot_in_clause3802);
            in_key239=in_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                in_key239_last = in_key239.tree.get();
                stream_in_key.add(in_key239.tree);
            }

            LEFT_PAREN240 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_in_clause3812);
            if  (this->hasException())
            {
                goto ruleunpivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN240);


            this->followPush(FOLLOW_unpivot_in_elements_in_unpivot_in_clause3826);
            unpivot_in_elements241=unpivot_in_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                unpivot_in_elements241_last = unpivot_in_elements241.tree.get();
                stream_unpivot_in_elements.add(unpivot_in_elements241.tree);
            }

            // OracleDML.g:415:33: ( COMMA unpivot_in_elements )*

            for (;;)
            {
                ANTLR_UINT32 alt84=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt84=1;
                	}
                    break;

                }

                switch (alt84)
                {
            	case 1:
            	    // OracleDML.g:415:34: COMMA unpivot_in_elements
            	    {
            	        COMMA242 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_unpivot_in_clause3829);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA242);


            	        this->followPush(FOLLOW_unpivot_in_elements_in_unpivot_in_clause3831);
            	        unpivot_in_elements243=unpivot_in_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            unpivot_in_elements243_last = unpivot_in_elements243.tree.get();
            	            stream_unpivot_in_elements.add(unpivot_in_elements243.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop84;	/* break out of the loop */
            	    break;
                }
            }
            loop84: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN244 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3843);
            if  (this->hasException())
            {
                goto ruleunpivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN244);


            // AST REWRITE
            // elements: unpivot_in_elements, in_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 417:9: -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ )
            {
            	// OracleDML.g:417:12: ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	if ( !(stream_unpivot_in_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "unpivot_in_elements empty" );
            		goto ruleunpivot_in_clauseEx;
            	}
            	while ( stream_unpivot_in_elements.hasNext() ) {
            		// OracleDML.g:417:21: ^( UNPIVOT_IN_ELEMENT unpivot_in_elements )
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(UNPIVOT_IN_ELEMENT, "UNPIVOT_IN_ELEMENT"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_unpivot_in_elements.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_unpivot_in_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleunpivot_in_clauseEx; /* Prevent compiler warnings */
    ruleunpivot_in_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end unpivot_in_clause */

/**
 * $ANTLR start unpivot_in_elements
 * OracleDML.g:420:1: unpivot_in_elements : ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )? -> ( column_name )+ ( ^( PIVOT_ALIAS ( constant )+ ) )? ;
 */
OracleDML::unpivot_in_elements_return
OracleDML::unpivot_in_elements()
{
    OracleDML::unpivot_in_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN246 = NULL;
    ImplTraits::CommonTokenType const* COMMA248 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN250 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN253 = NULL;
    ImplTraits::CommonTokenType const* COMMA255 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN257 = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name245;
    ImplTraits::TreeTypePtr::pointer column_name245_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name247;
    ImplTraits::TreeTypePtr::pointer column_name247_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name249;
    ImplTraits::TreeTypePtr::pointer column_name249_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key251;
    ImplTraits::TreeTypePtr::pointer as_key251_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant252;
    ImplTraits::TreeTypePtr::pointer constant252_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant254;
    ImplTraits::TreeTypePtr::pointer constant254_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant256;
    ImplTraits::TreeTypePtr::pointer constant256_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN246_tree;
    ImplTraits::TreeTypePtr COMMA248_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN250_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN253_tree;
    ImplTraits::TreeTypePtr COMMA255_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN257_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_constant(get_psrstate()->get_treeAdaptor(), "rule constant");
    RewriteRuleSubtreeStream<ImplTraits> stream_as_key(get_psrstate()->get_treeAdaptor(), "rule as_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:421:5: ( ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )? -> ( column_name )+ ( ^( PIVOT_ALIAS ( constant )+ ) )? )
        // OracleDML.g:421:9: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )?
        {
            // OracleDML.g:421:9: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            {
                ANTLR_UINT32 alt86=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt86=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt86=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 86 );
                    ex->set_state( 0 );


                    goto ruleunpivot_in_elementsEx;

                }

                switch (alt86)
                {
            	case 1:
            	    // OracleDML.g:421:14: column_name
            	    {
            	        this->followPush(FOLLOW_column_name_in_unpivot_in_elements3888);
            	        column_name245=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name245_last = column_name245.tree.get();
            	            stream_column_name.add(column_name245.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:422:14: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN246 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_in_elements3903);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN246);


            	        this->followPush(FOLLOW_column_name_in_unpivot_in_elements3905);
            	        column_name247=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name247_last = column_name247.tree.get();
            	            stream_column_name.add(column_name247.tree);
            	        }

            	        // OracleDML.g:422:37: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt85=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt85=1;
            	            	}
            	                break;

            	            }

            	            switch (alt85)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:422:38: COMMA column_name
            	        	    {
            	        	        COMMA248 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_unpivot_in_elements3908);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA248);


            	        	        this->followPush(FOLLOW_column_name_in_unpivot_in_elements3910);
            	        	        column_name249=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name249_last = column_name249.tree.get();
            	        	            stream_column_name.add(column_name249.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop85;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop85: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN250 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3914);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN250);


            	    }
            	    break;

                }
            }

            // OracleDML.g:424:9: ( as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )?
            {
                ANTLR_UINT32 alt89=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_AS:
                    	{
                    		alt89=1;
                    	}
                        break;
                }

                switch (alt89)
                {
            	case 1:
            	    // OracleDML.g:424:14: as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN )
            	    {
            	        this->followPush(FOLLOW_as_key_in_unpivot_in_elements3939);
            	        as_key251=as_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            as_key251_last = as_key251.tree.get();
            	            stream_as_key.add(as_key251.tree);
            	        }

            	        // OracleDML.g:425:9: ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN )
            	        {
            	            ANTLR_UINT32 alt88=2;
            	            {
            	                ANTLR_UINT32 LA88_0 = this->LA(1);
            	                if ( (LA88_0 == APPROXIMATE_NUM_LIT || ((LA88_0 >= CHAR_STRING) && (LA88_0 <= CHAR_STRING_PERL)) || LA88_0 == EXACT_NUM_LIT || LA88_0 == NATIONAL_CHAR_STRING_LIT || LA88_0 == REGULAR_ID || LA88_0 == SQL92_RESERVED_DATE || LA88_0 == SQL92_RESERVED_DEFAULT || LA88_0 == SQL92_RESERVED_FALSE || LA88_0 == SQL92_RESERVED_NULL || LA88_0 == SQL92_RESERVED_TRUE || LA88_0 == UNSIGNED_INTEGER))
            	                {
            	                    alt88=1;
            	                }
            	                else if ( (LA88_0 == LEFT_PAREN) && (this->msynpred( antlr3::ClassForwarder<synpred15_OracleDML>() )))
            	                {
            	                    alt88=2;
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 88 );
            	                    ex->set_state( 0 );


            	                    goto ruleunpivot_in_elementsEx;

            	                }
            	            }
            	            switch (alt88)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:425:14: constant
            	        	    {
            	        	        this->followPush(FOLLOW_constant_in_unpivot_in_elements3954);
            	        	        constant252=constant();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            constant252_last = constant252.tree.get();
            	        	            stream_constant.add(constant252.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:426:14: ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN
            	        	    {
            	        	        LEFT_PAREN253 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_in_elements3974);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN253);


            	        	        this->followPush(FOLLOW_constant_in_unpivot_in_elements3976);
            	        	        constant254=constant();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            constant254_last = constant254.tree.get();
            	        	            stream_constant.add(constant254.tree);
            	        	        }

            	        	        // OracleDML.g:426:49: ( COMMA constant )*

            	        	        for (;;)
            	        	        {
            	        	            ANTLR_UINT32 alt87=2;
            	        	            switch ( this->LA(1) )
            	        	            {
            	        	            case COMMA:
            	        	            	{
            	        	            		alt87=1;
            	        	            	}
            	        	                break;

            	        	            }

            	        	            switch (alt87)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:426:50: COMMA constant
            	        	        	    {
            	        	        	        COMMA255 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_unpivot_in_elements3979);
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleunpivot_in_elementsEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }
            	        	        	         
            	        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA255);


            	        	        	        this->followPush(FOLLOW_constant_in_unpivot_in_elements3981);
            	        	        	        constant256=constant();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleunpivot_in_elementsEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            constant256_last = constant256.tree.get();
            	        	        	            stream_constant.add(constant256.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop87;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop87: ; /* Jump out to here if this rule does not match */


            	        	        RIGHT_PAREN257 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3985);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN257);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: constant, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 429:9: -> ( column_name )+ ( ^( PIVOT_ALIAS ( constant )+ ) )?
            {
            	if ( !(stream_column_name.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
            		goto ruleunpivot_in_elementsEx;
            	}
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	// OracleDML.g:429:25: ( ^( PIVOT_ALIAS ( constant )+ ) )?
            	if ( stream_constant.hasNext() ) {
            		// OracleDML.g:429:25: ^( PIVOT_ALIAS ( constant )+ )
            		{
            		ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(PIVOT_ALIAS, "PIVOT_ALIAS"), root_1);
            		if ( !(stream_constant.hasNext()) ) {
            			ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "constant empty" );
            			goto ruleunpivot_in_elementsEx;
            		}
            		while ( stream_constant.hasNext() ) {
            			get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_constant.nextTree());
            		}
            		stream_constant.reset();

            		get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            		}
            	}
            	stream_constant.reset();

            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleunpivot_in_elementsEx; /* Prevent compiler warnings */
    ruleunpivot_in_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end unpivot_in_elements */

/**
 * $ANTLR start hierarchical_query_clause
 * OracleDML.g:432:1: hierarchical_query_clause : ( connect_key by_key ( nocycle_key )? condition ( start_part )? -> ^( HIERARCHICAL ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ( start_part )? ) | start_part connect_key by_key ( nocycle_key )? condition -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) );
 */
OracleDML::hierarchical_query_clause_return
OracleDML::hierarchical_query_clause()
{
    OracleDML::hierarchical_query_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::connect_key_return connect_key258;
    ImplTraits::TreeTypePtr::pointer connect_key258_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key259;
    ImplTraits::TreeTypePtr::pointer by_key259_last = NULL;
    OracleDML_OracleDMLKeys::nocycle_key_return nocycle_key260;
    ImplTraits::TreeTypePtr::pointer nocycle_key260_last = NULL;
    OracleDML::condition_return condition261;
    ImplTraits::TreeTypePtr::pointer condition261_last = NULL;
    OracleDML::start_part_return start_part262;
    ImplTraits::TreeTypePtr::pointer start_part262_last = NULL;
    OracleDML::start_part_return start_part263;
    ImplTraits::TreeTypePtr::pointer start_part263_last = NULL;
    OracleDML_OracleDMLKeys::connect_key_return connect_key264;
    ImplTraits::TreeTypePtr::pointer connect_key264_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key265;
    ImplTraits::TreeTypePtr::pointer by_key265_last = NULL;
    OracleDML_OracleDMLKeys::nocycle_key_return nocycle_key266;
    ImplTraits::TreeTypePtr::pointer nocycle_key266_last = NULL;
    OracleDML::condition_return condition267;
    ImplTraits::TreeTypePtr::pointer condition267_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_connect_key(get_psrstate()->get_treeAdaptor(), "rule connect_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");
    RewriteRuleSubtreeStream<ImplTraits> stream_start_part(get_psrstate()->get_treeAdaptor(), "rule start_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_nocycle_key(get_psrstate()->get_treeAdaptor(), "rule nocycle_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:433:5: ( connect_key by_key ( nocycle_key )? condition ( start_part )? -> ^( HIERARCHICAL ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ( start_part )? ) | start_part connect_key by_key ( nocycle_key )? condition -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) )

            ANTLR_UINT32 alt93;

            alt93=2;

            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_CONNECT:
            	{
            		alt93=1;
            	}
                break;
            case PLSQL_RESERVED_START:
            	{
            		alt93=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 93 );
                ex->set_state( 0 );


                goto rulehierarchical_query_clauseEx;

            }

            switch (alt93)
            {
        	case 1:
        	    // OracleDML.g:433:10: connect_key by_key ( nocycle_key )? condition ( start_part )?
        	    {
        	        this->followPush(FOLLOW_connect_key_in_hierarchical_query_clause4047);
        	        connect_key258=connect_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            connect_key258_last = connect_key258.tree.get();
        	            stream_connect_key.add(connect_key258.tree);
        	        }

        	        this->followPush(FOLLOW_by_key_in_hierarchical_query_clause4049);
        	        by_key259=by_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            by_key259_last = by_key259.tree.get();
        	            stream_by_key.add(by_key259.tree);
        	        }

        	        // OracleDML.g:433:29: ( nocycle_key )?
        	        {
        	            ANTLR_UINT32 alt90=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA90_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "NOCYCLE")))
        	                		    {
        	                		        alt90=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt90)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:433:29: nocycle_key
        	        	    {
        	        	        this->followPush(FOLLOW_nocycle_key_in_hierarchical_query_clause4051);
        	        	        nocycle_key260=nocycle_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulehierarchical_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            nocycle_key260_last = nocycle_key260.tree.get();
        	        	            stream_nocycle_key.add(nocycle_key260.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_condition_in_hierarchical_query_clause4054);
        	        condition261=condition();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            condition261_last = condition261.tree.get();
        	            stream_condition.add(condition261.tree);
        	        }

        	        // OracleDML.g:433:52: ( start_part )?
        	        {
        	            ANTLR_UINT32 alt91=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PLSQL_RESERVED_START:
        	                	{
        	                		alt91=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt91)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:433:52: start_part
        	        	    {
        	        	        this->followPush(FOLLOW_start_part_in_hierarchical_query_clause4056);
        	        	        start_part262=start_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulehierarchical_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            start_part262_last = start_part262.tree.get();
        	        	            stream_start_part.add(start_part262.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: start_part, nocycle_key, condition, connect_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 434:9: -> ^( HIERARCHICAL ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ( start_part )? )
        	        {
        	        	// OracleDML.g:434:12: ^( HIERARCHICAL ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ( start_part )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(HIERARCHICAL, "HIERARCHICAL"), root_1);
        	        	// OracleDML.g:434:27: ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_connect_key.nextNode(), root_2);
        	        	// OracleDML.g:434:41: ( nocycle_key )?
        	        	if ( stream_nocycle_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_nocycle_key.nextTree());
        	        	}
        	        	stream_nocycle_key.reset();

        	        	// OracleDML.g:434:54: ^( LOGIC_EXPR condition )
        	        	{
        	        	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_condition.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	// OracleDML.g:434:79: ( start_part )?
        	        	if ( stream_start_part.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_start_part.nextTree());
        	        	}
        	        	stream_start_part.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:435:10: start_part connect_key by_key ( nocycle_key )? condition
        	    {
        	        this->followPush(FOLLOW_start_part_in_hierarchical_query_clause4098);
        	        start_part263=start_part();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            start_part263_last = start_part263.tree.get();
        	            stream_start_part.add(start_part263.tree);
        	        }

        	        this->followPush(FOLLOW_connect_key_in_hierarchical_query_clause4100);
        	        connect_key264=connect_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            connect_key264_last = connect_key264.tree.get();
        	            stream_connect_key.add(connect_key264.tree);
        	        }

        	        this->followPush(FOLLOW_by_key_in_hierarchical_query_clause4102);
        	        by_key265=by_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            by_key265_last = by_key265.tree.get();
        	            stream_by_key.add(by_key265.tree);
        	        }

        	        // OracleDML.g:435:40: ( nocycle_key )?
        	        {
        	            ANTLR_UINT32 alt92=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA92_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "NOCYCLE")))
        	                		    {
        	                		        alt92=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt92)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:435:40: nocycle_key
        	        	    {
        	        	        this->followPush(FOLLOW_nocycle_key_in_hierarchical_query_clause4104);
        	        	        nocycle_key266=nocycle_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulehierarchical_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            nocycle_key266_last = nocycle_key266.tree.get();
        	        	            stream_nocycle_key.add(nocycle_key266.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_condition_in_hierarchical_query_clause4107);
        	        condition267=condition();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            condition267_last = condition267.tree.get();
        	            stream_condition.add(condition267.tree);
        	        }

        	        // AST REWRITE
        	        // elements: start_part, condition, nocycle_key, connect_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 436:9: -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
        	        {
        	        	// OracleDML.g:436:12: ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(HIERARCHICAL, "HIERARCHICAL"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_start_part.nextTree());
        	        	// OracleDML.g:436:39: ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_connect_key.nextNode(), root_2);
        	        	// OracleDML.g:436:53: ( nocycle_key )?
        	        	if ( stream_nocycle_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_nocycle_key.nextTree());
        	        	}
        	        	stream_nocycle_key.reset();

        	        	// OracleDML.g:436:66: ^( LOGIC_EXPR condition )
        	        	{
        	        	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_condition.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulehierarchical_query_clauseEx; /* Prevent compiler warnings */
    rulehierarchical_query_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end hierarchical_query_clause */

/**
 * $ANTLR start start_part
 * OracleDML.g:439:1: start_part : start_key with_key condition -> ^( start_key ^( LOGIC_EXPR condition ) ) ;
 */
OracleDML::start_part_return
OracleDML::start_part()
{
    OracleDML::start_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::start_key_return start_key268;
    ImplTraits::TreeTypePtr::pointer start_key268_last = NULL;
    OracleDML_OracleDMLKeys::with_key_return with_key269;
    ImplTraits::TreeTypePtr::pointer with_key269_last = NULL;
    OracleDML::condition_return condition270;
    ImplTraits::TreeTypePtr::pointer condition270_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_start_key(get_psrstate()->get_treeAdaptor(), "rule start_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_with_key(get_psrstate()->get_treeAdaptor(), "rule with_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:440:5: ( start_key with_key condition -> ^( start_key ^( LOGIC_EXPR condition ) ) )
        // OracleDML.g:440:10: start_key with_key condition
        {
            this->followPush(FOLLOW_start_key_in_start_part4157);
            start_key268=start_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestart_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                start_key268_last = start_key268.tree.get();
                stream_start_key.add(start_key268.tree);
            }

            this->followPush(FOLLOW_with_key_in_start_part4159);
            with_key269=with_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestart_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                with_key269_last = with_key269.tree.get();
                stream_with_key.add(with_key269.tree);
            }

            this->followPush(FOLLOW_condition_in_start_part4161);
            condition270=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestart_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition270_last = condition270.tree.get();
                stream_condition.add(condition270.tree);
            }

            // AST REWRITE
            // elements: start_key, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 441:9: -> ^( start_key ^( LOGIC_EXPR condition ) )
            {
            	// OracleDML.g:441:12: ^( start_key ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_start_key.nextNode(), root_1);
            	// OracleDML.g:441:24: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestart_partEx; /* Prevent compiler warnings */
    rulestart_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end start_part */

/**
 * $ANTLR start group_by_clause
 * OracleDML.g:444:1: group_by_clause : ( ( group_key )=> group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) ( having_clause )? -> ^( GROUP_BY_CLAUSE[$group_key.start] ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) ( having_clause )? ) | ( having_key )=> having_clause ( group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) )? -> ^( GROUP_BY_CLAUSE[$having_clause.start] having_clause ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )? ) );
 */
OracleDML::group_by_clause_return
OracleDML::group_by_clause()
{
    OracleDML::group_by_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN273 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN274 = NULL;
    ImplTraits::CommonTokenType const* COMMA276 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN282 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN283 = NULL;
    ImplTraits::CommonTokenType const* COMMA285 = NULL;
    OracleDML_OracleDMLKeys::group_key_return group_key271;
    ImplTraits::TreeTypePtr::pointer group_key271_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key272;
    ImplTraits::TreeTypePtr::pointer by_key272_last = NULL;
    OracleDML::group_by_elements_return group_by_elements275;
    ImplTraits::TreeTypePtr::pointer group_by_elements275_last = NULL;
    OracleDML::group_by_elements_return group_by_elements277;
    ImplTraits::TreeTypePtr::pointer group_by_elements277_last = NULL;
    OracleDML::having_clause_return having_clause278;
    ImplTraits::TreeTypePtr::pointer having_clause278_last = NULL;
    OracleDML::having_clause_return having_clause279;
    ImplTraits::TreeTypePtr::pointer having_clause279_last = NULL;
    OracleDML_OracleDMLKeys::group_key_return group_key280;
    ImplTraits::TreeTypePtr::pointer group_key280_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key281;
    ImplTraits::TreeTypePtr::pointer by_key281_last = NULL;
    OracleDML::group_by_elements_return group_by_elements284;
    ImplTraits::TreeTypePtr::pointer group_by_elements284_last = NULL;
    OracleDML::group_by_elements_return group_by_elements286;
    ImplTraits::TreeTypePtr::pointer group_by_elements286_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN273_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN274_tree;
    ImplTraits::TreeTypePtr COMMA276_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN282_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN283_tree;
    ImplTraits::TreeTypePtr COMMA285_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_having_clause(get_psrstate()->get_treeAdaptor(), "rule having_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_group_key(get_psrstate()->get_treeAdaptor(), "rule group_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_group_by_elements(get_psrstate()->get_treeAdaptor(), "rule group_by_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:445:5: ( ( group_key )=> group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) ( having_clause )? -> ^( GROUP_BY_CLAUSE[$group_key.start] ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) ( having_clause )? ) | ( having_key )=> having_clause ( group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) )? -> ^( GROUP_BY_CLAUSE[$having_clause.start] having_clause ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )? ) )

            ANTLR_UINT32 alt100;

            alt100=2;

            {
                ANTLR_UINT32 LA100_0 = this->LA(1);
                if ( (LA100_0 == SQL92_RESERVED_GROUP) && (this->msynpred( antlr3::ClassForwarder<synpred16_OracleDML>() )))
                {
                    alt100=1;
                }
                else if ( (LA100_0 == SQL92_RESERVED_HAVING) && (this->msynpred( antlr3::ClassForwarder<synpred18_OracleDML>() )))
                {
                    alt100=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 100 );
                    ex->set_state( 0 );


                    goto rulegroup_by_clauseEx;

                }
            }
            switch (alt100)
            {
        	case 1:
        	    // OracleDML.g:445:9: ( group_key )=> group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) ( having_clause )?
        	    {
        	        this->followPush(FOLLOW_group_key_in_group_by_clause4206);
        	        group_key271=group_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            group_key271_last = group_key271.tree.get();
        	            stream_group_key.add(group_key271.tree);
        	        }

        	        this->followPush(FOLLOW_by_key_in_group_by_clause4208);
        	        by_key272=by_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            by_key272_last = by_key272.tree.get();
        	            stream_by_key.add(by_key272.tree);
        	        }

        	        // OracleDML.g:446:4: ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )
        	        {
        	            ANTLR_UINT32 alt95=2;
        	            switch ( this->LA(1) )
        	            {
        	            case LEFT_PAREN:
        	            	{
        	            		switch ( this->LA(2) )
        	            		{
        	            		case RIGHT_PAREN:
        	            			{
        	            				alt95=1;
        	            			}
        	            		    break;
        	            		case APPROXIMATE_NUM_LIT:
        	            		case BINDVAR:
        	            		case CHAR_STRING:
        	            		case CHAR_STRING_PERL:
        	            		case COLON:
        	            		case DELIMITED_ID:
        	            		case EXACT_NUM_LIT:
        	            		case INTRODUCER:
        	            		case LEFT_PAREN:
        	            		case MINUS_SIGN:
        	            		case NATIONAL_CHAR_STRING_LIT:
        	            		case PLSQL_NON_RESERVED_CAST:
        	            		case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	            		case PLUS_SIGN:
        	            		case REGULAR_ID:
        	            		case SQL92_RESERVED_ALL:
        	            		case SQL92_RESERVED_ANY:
        	            		case SQL92_RESERVED_CASE:
        	            		case SQL92_RESERVED_CURSOR:
        	            		case SQL92_RESERVED_DATE:
        	            		case SQL92_RESERVED_DEFAULT:
        	            		case SQL92_RESERVED_DISTINCT:
        	            		case SQL92_RESERVED_EXISTS:
        	            		case SQL92_RESERVED_FALSE:
        	            		case SQL92_RESERVED_NOT:
        	            		case SQL92_RESERVED_NULL:
        	            		case SQL92_RESERVED_PRIOR:
        	            		case SQL92_RESERVED_SELECT:
        	            		case SQL92_RESERVED_TRUE:
        	            		case UNSIGNED_INTEGER:
        	            			{
        	            				alt95=2;
        	            			}
        	            		    break;

        	            		default:
        	            		    if (this->get_backtracking()>0)
        	            		    {
        	            		        this->set_failedflag( true );
        	            		        return retval;
        	            		    }

        	            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		    ex->set_decisionNum( 95 );
        	            		    ex->set_state( 1 );


        	            		    goto rulegroup_by_clauseEx;

        	            		}

        	            	}
        	                break;
        	            case APPROXIMATE_NUM_LIT:
        	            case BINDVAR:
        	            case CHAR_STRING:
        	            case CHAR_STRING_PERL:
        	            case COLON:
        	            case DELIMITED_ID:
        	            case EXACT_NUM_LIT:
        	            case INTRODUCER:
        	            case MINUS_SIGN:
        	            case NATIONAL_CHAR_STRING_LIT:
        	            case PLSQL_NON_RESERVED_CAST:
        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	            case PLUS_SIGN:
        	            case REGULAR_ID:
        	            case SQL92_RESERVED_ALL:
        	            case SQL92_RESERVED_ANY:
        	            case SQL92_RESERVED_CASE:
        	            case SQL92_RESERVED_CURSOR:
        	            case SQL92_RESERVED_DATE:
        	            case SQL92_RESERVED_DEFAULT:
        	            case SQL92_RESERVED_DISTINCT:
        	            case SQL92_RESERVED_EXISTS:
        	            case SQL92_RESERVED_FALSE:
        	            case SQL92_RESERVED_NOT:
        	            case SQL92_RESERVED_NULL:
        	            case SQL92_RESERVED_PRIOR:
        	            case SQL92_RESERVED_TRUE:
        	            case UNSIGNED_INTEGER:
        	            	{
        	            		alt95=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 95 );
        	                ex->set_state( 0 );


        	                goto rulegroup_by_clauseEx;

        	            }

        	            switch (alt95)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:446:5: LEFT_PAREN RIGHT_PAREN
        	        	    {
        	        	        LEFT_PAREN273 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_group_by_clause4214);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN273);


        	        	        RIGHT_PAREN274 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_group_by_clause4216);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN274);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:447:6: group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
        	        	    {
        	        	        this->followPush(FOLLOW_group_by_elements_in_group_by_clause4223);
        	        	        group_by_elements275=group_by_elements();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            group_by_elements275_last = group_by_elements275.tree.get();
        	        	            stream_group_by_elements.add(group_by_elements275.tree);
        	        	        }

        	        	        // OracleDML.g:447:24: ( ( COMMA group_by_elements )=> COMMA group_by_elements )*

        	        	        for (;;)
        	        	        {
        	        	            ANTLR_UINT32 alt94=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case COMMA:
        	        	            	{
        	        	            		{
        	        	            		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	            		    */
        	        	            		    ANTLR_UINT32 LA94_2 = this->LA(2);
        	        	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred17_OracleDML>() )))
        	        	            		    {
        	        	            		        alt94=1;
        	        	            		    }

        	        	            		}
        	        	            	}
        	        	                break;

        	        	            }

        	        	            switch (alt94)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:447:25: ( COMMA group_by_elements )=> COMMA group_by_elements
        	        	        	    {
        	        	        	        COMMA276 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_group_by_clause4233);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA276);


        	        	        	        this->followPush(FOLLOW_group_by_elements_in_group_by_clause4235);
        	        	        	        group_by_elements277=group_by_elements();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) 
        	        	        	        {
        	        	        	            group_by_elements277_last = group_by_elements277.tree.get();
        	        	        	            stream_group_by_elements.add(group_by_elements277.tree);
        	        	        	        }

        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop94;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop94: ; /* Jump out to here if this rule does not match */


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:449:3: ( having_clause )?
        	        {
        	            ANTLR_UINT32 alt96=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_HAVING:
        	                	{
        	                		alt96=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt96)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:449:3: having_clause
        	        	    {
        	        	        this->followPush(FOLLOW_having_clause_in_group_by_clause4246);
        	        	        having_clause278=having_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            having_clause278_last = having_clause278.tree.get();
        	        	            stream_having_clause.add(having_clause278.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: group_key, having_clause, group_by_elements
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 450:3: -> ^( GROUP_BY_CLAUSE[$group_key.start] ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) ( having_clause )? )
        	        {
        	        	// OracleDML.g:450:6: ^( GROUP_BY_CLAUSE[$group_key.start] ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) ( having_clause )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUP_BY_CLAUSE, (group_key271.start)), root_1);
        	        	// OracleDML.g:450:42: ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_group_key.nextNode(), root_2);
        	        	// OracleDML.g:450:54: ( ^( GROUP_BY_ELEMENT group_by_elements ) )*
        	        	while ( stream_group_by_elements.hasNext() ) {
        	        		// OracleDML.g:450:54: ^( GROUP_BY_ELEMENT group_by_elements )
        	        		{
        	        		ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        		root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUP_BY_ELEMENT, "GROUP_BY_ELEMENT"), root_3);
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_group_by_elements.nextTree());
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        		}
        	        	}
        	        	stream_group_by_elements.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	// OracleDML.g:450:94: ( having_clause )?
        	        	if ( stream_having_clause.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_having_clause.nextTree());
        	        	}
        	        	stream_having_clause.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:451:9: ( having_key )=> having_clause ( group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) )?
        	    {
        	        this->followPush(FOLLOW_having_clause_in_group_by_clause4286);
        	        having_clause279=having_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            having_clause279_last = having_clause279.tree.get();
        	            stream_having_clause.add(having_clause279.tree);
        	        }

        	        // OracleDML.g:452:3: ( group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) )?
        	        {
        	            ANTLR_UINT32 alt99=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_GROUP:
        	                	{
        	                		alt99=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt99)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:452:4: group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )
        	        	    {
        	        	        this->followPush(FOLLOW_group_key_in_group_by_clause4291);
        	        	        group_key280=group_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            group_key280_last = group_key280.tree.get();
        	        	            stream_group_key.add(group_key280.tree);
        	        	        }

        	        	        this->followPush(FOLLOW_by_key_in_group_by_clause4293);
        	        	        by_key281=by_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            by_key281_last = by_key281.tree.get();
        	        	            stream_by_key.add(by_key281.tree);
        	        	        }

        	        	        // OracleDML.g:453:4: ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )
        	        	        {
        	        	            ANTLR_UINT32 alt98=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case LEFT_PAREN:
        	        	            	{
        	        	            		switch ( this->LA(2) )
        	        	            		{
        	        	            		case RIGHT_PAREN:
        	        	            			{
        	        	            				alt98=1;
        	        	            			}
        	        	            		    break;
        	        	            		case APPROXIMATE_NUM_LIT:
        	        	            		case BINDVAR:
        	        	            		case CHAR_STRING:
        	        	            		case CHAR_STRING_PERL:
        	        	            		case COLON:
        	        	            		case DELIMITED_ID:
        	        	            		case EXACT_NUM_LIT:
        	        	            		case INTRODUCER:
        	        	            		case LEFT_PAREN:
        	        	            		case MINUS_SIGN:
        	        	            		case NATIONAL_CHAR_STRING_LIT:
        	        	            		case PLSQL_NON_RESERVED_CAST:
        	        	            		case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	        	            		case PLUS_SIGN:
        	        	            		case REGULAR_ID:
        	        	            		case SQL92_RESERVED_ALL:
        	        	            		case SQL92_RESERVED_ANY:
        	        	            		case SQL92_RESERVED_CASE:
        	        	            		case SQL92_RESERVED_CURSOR:
        	        	            		case SQL92_RESERVED_DATE:
        	        	            		case SQL92_RESERVED_DEFAULT:
        	        	            		case SQL92_RESERVED_DISTINCT:
        	        	            		case SQL92_RESERVED_EXISTS:
        	        	            		case SQL92_RESERVED_FALSE:
        	        	            		case SQL92_RESERVED_NOT:
        	        	            		case SQL92_RESERVED_NULL:
        	        	            		case SQL92_RESERVED_PRIOR:
        	        	            		case SQL92_RESERVED_SELECT:
        	        	            		case SQL92_RESERVED_TRUE:
        	        	            		case UNSIGNED_INTEGER:
        	        	            			{
        	        	            				alt98=2;
        	        	            			}
        	        	            		    break;

        	        	            		default:
        	        	            		    if (this->get_backtracking()>0)
        	        	            		    {
        	        	            		        this->set_failedflag( true );
        	        	            		        return retval;
        	        	            		    }

        	        	            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	            		    ex->set_decisionNum( 98 );
        	        	            		    ex->set_state( 1 );


        	        	            		    goto rulegroup_by_clauseEx;

        	        	            		}

        	        	            	}
        	        	                break;
        	        	            case APPROXIMATE_NUM_LIT:
        	        	            case BINDVAR:
        	        	            case CHAR_STRING:
        	        	            case CHAR_STRING_PERL:
        	        	            case COLON:
        	        	            case DELIMITED_ID:
        	        	            case EXACT_NUM_LIT:
        	        	            case INTRODUCER:
        	        	            case MINUS_SIGN:
        	        	            case NATIONAL_CHAR_STRING_LIT:
        	        	            case PLSQL_NON_RESERVED_CAST:
        	        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	        	            case PLUS_SIGN:
        	        	            case REGULAR_ID:
        	        	            case SQL92_RESERVED_ALL:
        	        	            case SQL92_RESERVED_ANY:
        	        	            case SQL92_RESERVED_CASE:
        	        	            case SQL92_RESERVED_CURSOR:
        	        	            case SQL92_RESERVED_DATE:
        	        	            case SQL92_RESERVED_DEFAULT:
        	        	            case SQL92_RESERVED_DISTINCT:
        	        	            case SQL92_RESERVED_EXISTS:
        	        	            case SQL92_RESERVED_FALSE:
        	        	            case SQL92_RESERVED_NOT:
        	        	            case SQL92_RESERVED_NULL:
        	        	            case SQL92_RESERVED_PRIOR:
        	        	            case SQL92_RESERVED_TRUE:
        	        	            case UNSIGNED_INTEGER:
        	        	            	{
        	        	            		alt98=2;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                if (this->get_backtracking()>0)
        	        	                {
        	        	                    this->set_failedflag( true );
        	        	                    return retval;
        	        	                }

        	        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                ex->set_decisionNum( 98 );
        	        	                ex->set_state( 0 );


        	        	                goto rulegroup_by_clauseEx;

        	        	            }

        	        	            switch (alt98)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:453:5: LEFT_PAREN RIGHT_PAREN
        	        	        	    {
        	        	        	        LEFT_PAREN282 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_group_by_clause4299);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN282);


        	        	        	        RIGHT_PAREN283 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_group_by_clause4301);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN283);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:454:6: group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_group_by_elements_in_group_by_clause4308);
        	        	        	        group_by_elements284=group_by_elements();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) 
        	        	        	        {
        	        	        	            group_by_elements284_last = group_by_elements284.tree.get();
        	        	        	            stream_group_by_elements.add(group_by_elements284.tree);
        	        	        	        }

        	        	        	        // OracleDML.g:454:24: ( ( COMMA group_by_elements )=> COMMA group_by_elements )*

        	        	        	        for (;;)
        	        	        	        {
        	        	        	            ANTLR_UINT32 alt97=2;
        	        	        	            switch ( this->LA(1) )
        	        	        	            {
        	        	        	            case COMMA:
        	        	        	            	{
        	        	        	            		{
        	        	        	            		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	        	            		    */
        	        	        	            		    ANTLR_UINT32 LA97_2 = this->LA(2);
        	        	        	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_OracleDML>() )))
        	        	        	            		    {
        	        	        	            		        alt97=1;
        	        	        	            		    }

        	        	        	            		}
        	        	        	            	}
        	        	        	                break;

        	        	        	            }

        	        	        	            switch (alt97)
        	        	        	            {
        	        	        	        	case 1:
        	        	        	        	    // OracleDML.g:454:25: ( COMMA group_by_elements )=> COMMA group_by_elements
        	        	        	        	    {
        	        	        	        	        COMMA285 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_group_by_clause4318);
        	        	        	        	        if  (this->hasException())
        	        	        	        	        {
        	        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        	        }
        	        	        	        	        if (this->hasFailed())
        	        	        	        	        {
        	        	        	        	            return retval;
        	        	        	        	        }
        	        	        	        	         
        	        	        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA285);


        	        	        	        	        this->followPush(FOLLOW_group_by_elements_in_group_by_clause4320);
        	        	        	        	        group_by_elements286=group_by_elements();

        	        	        	        	        this->followPop();
        	        	        	        	        if  (this->hasException())
        	        	        	        	        {
        	        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        	        }
        	        	        	        	        if (this->hasFailed())
        	        	        	        	        {
        	        	        	        	            return retval;
        	        	        	        	        }

        	        	        	        	        if ( this->get_backtracking()==0 ) 
        	        	        	        	        {
        	        	        	        	            group_by_elements286_last = group_by_elements286.tree.get();
        	        	        	        	            stream_group_by_elements.add(group_by_elements286.tree);
        	        	        	        	        }

        	        	        	        	    }
        	        	        	        	    break;

        	        	        	        	default:
        	        	        	        	    goto loop97;	/* break out of the loop */
        	        	        	        	    break;
        	        	        	            }
        	        	        	        }
        	        	        	        loop97: ; /* Jump out to here if this rule does not match */


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: group_by_elements, having_clause, group_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 457:3: -> ^( GROUP_BY_CLAUSE[$having_clause.start] having_clause ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )? )
        	        {
        	        	// OracleDML.g:457:6: ^( GROUP_BY_CLAUSE[$having_clause.start] having_clause ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUP_BY_CLAUSE, (having_clause279.start)), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_having_clause.nextTree());
        	        	// OracleDML.g:457:60: ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )?
        	        	if ( stream_group_by_elements.hasNext()||stream_group_key.hasNext() ) {
        	        		// OracleDML.g:457:60: ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* )
        	        		{
        	        		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_group_key.nextNode(), root_2);
        	        		// OracleDML.g:457:72: ( ^( GROUP_BY_ELEMENT group_by_elements ) )*
        	        		while ( stream_group_by_elements.hasNext() ) {
        	        			// OracleDML.g:457:72: ^( GROUP_BY_ELEMENT group_by_elements )
        	        			{
        	        			ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        			root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUP_BY_ELEMENT, "GROUP_BY_ELEMENT"), root_3);
        	        			get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_group_by_elements.nextTree());
        	        			get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        			}
        	        		}
        	        		stream_group_by_elements.reset();

        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        		}
        	        	}
        	        	stream_group_by_elements.reset();
        	        	stream_group_key.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulegroup_by_clauseEx; /* Prevent compiler warnings */
    rulegroup_by_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end group_by_clause */

/**
 * $ANTLR start group_by_elements
 * OracleDML.g:460:1: group_by_elements : ( grouping_sets_clause | rollup_cube_clause | expression -> ^( EXPR expression ) );
 */
OracleDML::group_by_elements_return
OracleDML::group_by_elements()
{
    OracleDML::group_by_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::grouping_sets_clause_return grouping_sets_clause287;
    ImplTraits::TreeTypePtr::pointer grouping_sets_clause287_last = NULL;
    OracleDML::rollup_cube_clause_return rollup_cube_clause288;
    ImplTraits::TreeTypePtr::pointer rollup_cube_clause288_last = NULL;
    OracleDML::expression_return expression289;
    ImplTraits::TreeTypePtr::pointer expression289_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:461:5: ( grouping_sets_clause | rollup_cube_clause | expression -> ^( EXPR expression ) )

            ANTLR_UINT32 alt101;

            alt101=3;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA101_1 = this->LA(2);
            		    if ( ((toUpper(LT(1)->getText()) == "GROUPING")))
            		    {
            		        alt101=1;
            		    }
            		    else if ( ((((toUpper(LT(1)->getText()) == "ROLLUP"))||((toUpper(LT(1)->getText()) == "CUBE")))))
            		    {
            		        alt101=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt101=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 101 );
            		        ex->set_state( 1 );


            		        goto rulegroup_by_elementsEx;

            		    }
            		}
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt101=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 101 );
                ex->set_state( 0 );


                goto rulegroup_by_elementsEx;

            }

            switch (alt101)
            {
        	case 1:
        	    // OracleDML.g:461:10: grouping_sets_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_grouping_sets_clause_in_group_by_elements4375);
        	        grouping_sets_clause287=grouping_sets_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, grouping_sets_clause287.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:462:10: rollup_cube_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_rollup_cube_clause_in_group_by_elements4386);
        	        rollup_cube_clause288=rollup_cube_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, rollup_cube_clause288.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:463:10: expression
        	    {
        	        this->followPush(FOLLOW_expression_in_group_by_elements4398);
        	        expression289=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression289_last = expression289.tree.get();
        	            stream_expression.add(expression289.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 463:21: -> ^( EXPR expression )
        	        {
        	        	// OracleDML.g:463:24: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulegroup_by_elementsEx; /* Prevent compiler warnings */
    rulegroup_by_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end group_by_elements */

/**
 * $ANTLR start rollup_cube_clause
 * OracleDML.g:466:1: rollup_cube_clause : ( rollup_key ^| cube_key ^) LEFT_PAREN grouping_sets_elements ( COMMA ! grouping_sets_elements )* RIGHT_PAREN ;
 */
OracleDML::rollup_cube_clause_return
OracleDML::rollup_cube_clause()
{
    OracleDML::rollup_cube_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN292 = NULL;
    ImplTraits::CommonTokenType const* COMMA294 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN296 = NULL;
    OracleDML_OracleDMLKeys::rollup_key_return rollup_key290;
    ImplTraits::TreeTypePtr::pointer rollup_key290_last = NULL;
    OracleDML_OracleDMLKeys::cube_key_return cube_key291;
    ImplTraits::TreeTypePtr::pointer cube_key291_last = NULL;
    OracleDML::grouping_sets_elements_return grouping_sets_elements293;
    ImplTraits::TreeTypePtr::pointer grouping_sets_elements293_last = NULL;
    OracleDML::grouping_sets_elements_return grouping_sets_elements295;
    ImplTraits::TreeTypePtr::pointer grouping_sets_elements295_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN292_tree;
    ImplTraits::TreeTypePtr COMMA294_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN296_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:467:5: ( ( rollup_key ^| cube_key ^) LEFT_PAREN grouping_sets_elements ( COMMA ! grouping_sets_elements )* RIGHT_PAREN )
        // OracleDML.g:467:10: ( rollup_key ^| cube_key ^) LEFT_PAREN grouping_sets_elements ( COMMA ! grouping_sets_elements )* RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:467:10: ( rollup_key ^| cube_key ^)
            {
                ANTLR_UINT32 alt102=2;
                {
                    ANTLR_UINT32 LA102_0 = this->LA(1);
                    if ( (LA102_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "ROLLUP"))||((toUpper(LT(1)->getText()) == "CUBE")))))
                    {
                        {
                            ANTLR_UINT32 LA102_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "ROLLUP")))
                            {
                                alt102=1;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "CUBE")))
                            {
                                alt102=2;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 102 );
                                ex->set_state( 1 );


                                goto rulerollup_cube_clauseEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 102 );
                        ex->set_state( 0 );


                        goto rulerollup_cube_clauseEx;

                    }
                }
                switch (alt102)
                {
            	case 1:
            	    // OracleDML.g:467:11: rollup_key ^
            	    {
            	        this->followPush(FOLLOW_rollup_key_in_rollup_cube_clause4427);
            	        rollup_key290=rollup_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerollup_cube_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(rollup_key290.tree, root_0);

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:467:23: cube_key ^
            	    {
            	        this->followPush(FOLLOW_cube_key_in_rollup_cube_clause4430);
            	        cube_key291=cube_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerollup_cube_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(cube_key291.tree, root_0);

            	    }
            	    break;

                }
            }

            LEFT_PAREN292 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_rollup_cube_clause4434);
            if  (this->hasException())
            {
                goto rulerollup_cube_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN292_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN292));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN292_tree);
            }


            this->followPush(FOLLOW_grouping_sets_elements_in_rollup_cube_clause4436);
            grouping_sets_elements293=grouping_sets_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerollup_cube_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, grouping_sets_elements293.tree);


            // OracleDML.g:467:68: ( COMMA ! grouping_sets_elements )*

            for (;;)
            {
                ANTLR_UINT32 alt103=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt103=1;
                	}
                    break;

                }

                switch (alt103)
                {
            	case 1:
            	    // OracleDML.g:467:69: COMMA ! grouping_sets_elements
            	    {
            	        COMMA294 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_rollup_cube_clause4439);
            	        if  (this->hasException())
            	        {
            	            goto rulerollup_cube_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_grouping_sets_elements_in_rollup_cube_clause4442);
            	        grouping_sets_elements295=grouping_sets_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerollup_cube_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, grouping_sets_elements295.tree);


            	    }
            	    break;

            	default:
            	    goto loop103;	/* break out of the loop */
            	    break;
                }
            }
            loop103: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN296 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_rollup_cube_clause4446);
            if  (this->hasException())
            {
                goto rulerollup_cube_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN296_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN296));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN296_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulerollup_cube_clauseEx; /* Prevent compiler warnings */
    rulerollup_cube_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end rollup_cube_clause */

/**
 * $ANTLR start grouping_sets_clause
 * OracleDML.g:470:1: grouping_sets_clause : grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ ) ;
 */
OracleDML::grouping_sets_clause_return
OracleDML::grouping_sets_clause()
{
    OracleDML::grouping_sets_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN299 = NULL;
    ImplTraits::CommonTokenType const* COMMA301 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN303 = NULL;
    OracleDML_OracleDMLKeys::grouping_key_return grouping_key297;
    ImplTraits::TreeTypePtr::pointer grouping_key297_last = NULL;
    OracleDML_OracleDMLKeys::sets_key_return sets_key298;
    ImplTraits::TreeTypePtr::pointer sets_key298_last = NULL;
    OracleDML::grouping_sets_elements_return grouping_sets_elements300;
    ImplTraits::TreeTypePtr::pointer grouping_sets_elements300_last = NULL;
    OracleDML::grouping_sets_elements_return grouping_sets_elements302;
    ImplTraits::TreeTypePtr::pointer grouping_sets_elements302_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN299_tree;
    ImplTraits::TreeTypePtr COMMA301_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN303_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_grouping_key(get_psrstate()->get_treeAdaptor(), "rule grouping_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_sets_key(get_psrstate()->get_treeAdaptor(), "rule sets_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_grouping_sets_elements(get_psrstate()->get_treeAdaptor(), "rule grouping_sets_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:471:5: ( grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ ) )
        // OracleDML.g:471:10: grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN
        {
            this->followPush(FOLLOW_grouping_key_in_grouping_sets_clause4467);
            grouping_key297=grouping_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                grouping_key297_last = grouping_key297.tree.get();
                stream_grouping_key.add(grouping_key297.tree);
            }

            this->followPush(FOLLOW_sets_key_in_grouping_sets_clause4469);
            sets_key298=sets_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                sets_key298_last = sets_key298.tree.get();
                stream_sets_key.add(sets_key298.tree);
            }

            LEFT_PAREN299 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_grouping_sets_clause4480);
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN299);


            this->followPush(FOLLOW_grouping_sets_elements_in_grouping_sets_clause4482);
            grouping_sets_elements300=grouping_sets_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                grouping_sets_elements300_last = grouping_sets_elements300.tree.get();
                stream_grouping_sets_elements.add(grouping_sets_elements300.tree);
            }

            // OracleDML.g:472:43: ( COMMA grouping_sets_elements )*

            for (;;)
            {
                ANTLR_UINT32 alt104=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt104=1;
                	}
                    break;

                }

                switch (alt104)
                {
            	case 1:
            	    // OracleDML.g:472:44: COMMA grouping_sets_elements
            	    {
            	        COMMA301 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_grouping_sets_clause4485);
            	        if  (this->hasException())
            	        {
            	            goto rulegrouping_sets_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA301);


            	        this->followPush(FOLLOW_grouping_sets_elements_in_grouping_sets_clause4487);
            	        grouping_sets_elements302=grouping_sets_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegrouping_sets_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            grouping_sets_elements302_last = grouping_sets_elements302.tree.get();
            	            stream_grouping_sets_elements.add(grouping_sets_elements302.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop104;	/* break out of the loop */
            	    break;
                }
            }
            loop104: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN303 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4491);
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN303);


            // AST REWRITE
            // elements: grouping_sets_elements, grouping_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 473:9: -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ )
            {
            	// OracleDML.g:473:12: ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_grouping_key.nextNode(), root_1);
            	if ( !(stream_grouping_sets_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "grouping_sets_elements empty" );
            		goto rulegrouping_sets_clauseEx;
            	}
            	while ( stream_grouping_sets_elements.hasNext() ) {
            		// OracleDML.g:473:27: ^( GROUPIN_SET grouping_sets_elements )
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUPIN_SET, "GROUPIN_SET"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_grouping_sets_elements.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_grouping_sets_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulegrouping_sets_clauseEx; /* Prevent compiler warnings */
    rulegrouping_sets_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end grouping_sets_clause */

/**
 * $ANTLR start grouping_sets_elements
 * OracleDML.g:476:1: grouping_sets_elements : ( ( rollup_key | cube_key )=> rollup_cube_clause | ( LEFT_PAREN )=> expression_list | expression -> ^( EXPR expression ) );
 */
OracleDML::grouping_sets_elements_return
OracleDML::grouping_sets_elements()
{
    OracleDML::grouping_sets_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::rollup_cube_clause_return rollup_cube_clause304;
    ImplTraits::TreeTypePtr::pointer rollup_cube_clause304_last = NULL;
    OracleDML::expression_list_return expression_list305;
    ImplTraits::TreeTypePtr::pointer expression_list305_last = NULL;
    OracleDML::expression_return expression306;
    ImplTraits::TreeTypePtr::pointer expression306_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:477:5: ( ( rollup_key | cube_key )=> rollup_cube_clause | ( LEFT_PAREN )=> expression_list | expression -> ^( EXPR expression ) )

            ANTLR_UINT32 alt105;

            alt105=3;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA105_1 = this->LA(2);
            		    if ( (( ((((toUpper(LT(1)->getText()) == "ROLLUP"))||((toUpper(LT(1)->getText()) == "CUBE")))) && (this->msynpred( antlr3::ClassForwarder<synpred20_OracleDML>() )) )))
            		    {
            		        alt105=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt105=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 105 );
            		        ex->set_state( 1 );


            		        goto rulegrouping_sets_elementsEx;

            		    }
            		}
            	}
                break;
            case LEFT_PAREN:
            	{
            		{
            		    ANTLR_UINT32 LA105_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred21_OracleDML>() )))
            		    {
            		        alt105=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt105=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 105 );
            		        ex->set_state( 2 );


            		        goto rulegrouping_sets_elementsEx;

            		    }
            		}
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt105=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 105 );
                ex->set_state( 0 );


                goto rulegrouping_sets_elementsEx;

            }

            switch (alt105)
            {
        	case 1:
        	    // OracleDML.g:477:10: ( rollup_key | cube_key )=> rollup_cube_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_rollup_cube_clause_in_grouping_sets_elements4539);
        	        rollup_cube_clause304=rollup_cube_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegrouping_sets_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, rollup_cube_clause304.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:478:10: ( LEFT_PAREN )=> expression_list
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_expression_list_in_grouping_sets_elements4555);
        	        expression_list305=expression_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegrouping_sets_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_list305.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:479:10: expression
        	    {
        	        this->followPush(FOLLOW_expression_in_grouping_sets_elements4566);
        	        expression306=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegrouping_sets_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression306_last = expression306.tree.get();
        	            stream_expression.add(expression306.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 479:21: -> ^( EXPR expression )
        	        {
        	        	// OracleDML.g:479:24: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulegrouping_sets_elementsEx; /* Prevent compiler warnings */
    rulegrouping_sets_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end grouping_sets_elements */

/**
 * $ANTLR start having_clause
 * OracleDML.g:482:1: having_clause : having_key condition -> ^( having_key ^( LOGIC_EXPR condition ) ) ;
 */
OracleDML::having_clause_return
OracleDML::having_clause()
{
    OracleDML::having_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::having_key_return having_key307;
    ImplTraits::TreeTypePtr::pointer having_key307_last = NULL;
    OracleDML::condition_return condition308;
    ImplTraits::TreeTypePtr::pointer condition308_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_having_key(get_psrstate()->get_treeAdaptor(), "rule having_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:483:5: ( having_key condition -> ^( having_key ^( LOGIC_EXPR condition ) ) )
        // OracleDML.g:483:10: having_key condition
        {
            this->followPush(FOLLOW_having_key_in_having_clause4594);
            having_key307=having_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulehaving_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                having_key307_last = having_key307.tree.get();
                stream_having_key.add(having_key307.tree);
            }

            this->followPush(FOLLOW_condition_in_having_clause4596);
            condition308=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto rulehaving_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition308_last = condition308.tree.get();
                stream_condition.add(condition308.tree);
            }

            // AST REWRITE
            // elements: condition, having_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 484:9: -> ^( having_key ^( LOGIC_EXPR condition ) )
            {
            	// OracleDML.g:484:12: ^( having_key ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_having_key.nextNode(), root_1);
            	// OracleDML.g:484:25: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulehaving_clauseEx; /* Prevent compiler warnings */
    rulehaving_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end having_clause */

/**
 * $ANTLR start model_clause
 * OracleDML.g:487:1: model_clause : model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model -> ^( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model ) ;
 */
OracleDML::model_clause_return
OracleDML::model_clause()
{
    OracleDML::model_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::model_key_return model_key309;
    ImplTraits::TreeTypePtr::pointer model_key309_last = NULL;
    OracleDML::cell_reference_options_return cell_reference_options310;
    ImplTraits::TreeTypePtr::pointer cell_reference_options310_last = NULL;
    OracleDML::return_rows_clause_return return_rows_clause311;
    ImplTraits::TreeTypePtr::pointer return_rows_clause311_last = NULL;
    OracleDML::reference_model_return reference_model312;
    ImplTraits::TreeTypePtr::pointer reference_model312_last = NULL;
    OracleDML::main_model_return main_model313;
    ImplTraits::TreeTypePtr::pointer main_model313_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_return_rows_clause(get_psrstate()->get_treeAdaptor(), "rule return_rows_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_key(get_psrstate()->get_treeAdaptor(), "rule model_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_cell_reference_options(get_psrstate()->get_treeAdaptor(), "rule cell_reference_options");
    RewriteRuleSubtreeStream<ImplTraits> stream_reference_model(get_psrstate()->get_treeAdaptor(), "rule reference_model");
    RewriteRuleSubtreeStream<ImplTraits> stream_main_model(get_psrstate()->get_treeAdaptor(), "rule main_model");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:488:5: ( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model -> ^( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model ) )
        // OracleDML.g:488:10: model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model
        {
            this->followPush(FOLLOW_model_key_in_model_clause4636);
            model_key309=model_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_key309_last = model_key309.tree.get();
                stream_model_key.add(model_key309.tree);
            }

            // OracleDML.g:488:20: ( cell_reference_options )*

            for (;;)
            {
                ANTLR_UINT32 alt106=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		switch ( this->LA(2) )
                		{
                		case REGULAR_ID:
                			{
                				{
                				   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                				    */
                				    ANTLR_UINT32 LA106_3 = this->LA(3);
                				    if ( ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                				    {
                				        alt106=1;
                				    }

                				}
                			}
                		    break;

                		}

                	}
                    break;
                case SQL92_RESERVED_UNIQUE:
                	{
                		alt106=1;
                	}
                    break;

                }

                switch (alt106)
                {
            	case 1:
            	    // OracleDML.g:488:20: cell_reference_options
            	    {
            	        this->followPush(FOLLOW_cell_reference_options_in_model_clause4638);
            	        cell_reference_options310=cell_reference_options();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            cell_reference_options310_last = cell_reference_options310.tree.get();
            	            stream_cell_reference_options.add(cell_reference_options310.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop106;	/* break out of the loop */
            	    break;
                }
            }
            loop106: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:488:44: ( return_rows_clause )?
            {
                ANTLR_UINT32 alt107=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case REGULAR_ID:
                    		    	{
                    		    		switch ( this->LA(3) )
                    		    		{
                    		    		    case REGULAR_ID:
                    		    		    	{
                    		    		    		switch ( this->LA(4) )
                    		    		    		{
                    		    		    		    case REGULAR_ID:
                    		    		    		    	{
                    		    		    		    		alt107=1;
                    		    		    		    	}
                    		    		    		        break;
                    		    		    		}

                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		    case SQL92_RESERVED_ALL:
                    		    	{
                    		    		alt107=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt107)
                {
            	case 1:
            	    // OracleDML.g:488:44: return_rows_clause
            	    {
            	        this->followPush(FOLLOW_return_rows_clause_in_model_clause4641);
            	        return_rows_clause311=return_rows_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            return_rows_clause311_last = return_rows_clause311.tree.get();
            	            stream_return_rows_clause.add(return_rows_clause311.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:488:64: ( reference_model )*

            for (;;)
            {
                ANTLR_UINT32 alt108=2;
                alt108 = cdfa108.predict(this, this->get_rec(), this->get_istream(), cdfa108 );
                if  (this->hasException())
                {
                    goto rulemodel_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                switch (alt108)
                {
            	case 1:
            	    // OracleDML.g:488:64: reference_model
            	    {
            	        this->followPush(FOLLOW_reference_model_in_model_clause4644);
            	        reference_model312=reference_model();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            reference_model312_last = reference_model312.tree.get();
            	            stream_reference_model.add(reference_model312.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop108;	/* break out of the loop */
            	    break;
                }
            }
            loop108: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_main_model_in_model_clause4647);
            main_model313=main_model();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                main_model313_last = main_model313.tree.get();
                stream_main_model.add(main_model313.tree);
            }

            // AST REWRITE
            // elements: cell_reference_options, return_rows_clause, model_key, main_model, reference_model
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 489:9: -> ^( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model )
            {
            	// OracleDML.g:489:12: ^( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_model_key.nextNode(), root_1);
            	// OracleDML.g:489:24: ( cell_reference_options )*
            	while ( stream_cell_reference_options.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cell_reference_options.nextTree());
            	}
            	stream_cell_reference_options.reset();

            	// OracleDML.g:489:48: ( return_rows_clause )?
            	if ( stream_return_rows_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_return_rows_clause.nextTree());
            	}
            	stream_return_rows_clause.reset();

            	// OracleDML.g:489:68: ( reference_model )*
            	while ( stream_reference_model.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_reference_model.nextTree());
            	}
            	stream_reference_model.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_main_model.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_clauseEx; /* Prevent compiler warnings */
    rulemodel_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_clause */

/**
 * $ANTLR start cell_reference_options
 * OracleDML.g:492:1: cell_reference_options : ( ( ignore_key ^| keep_key ^) nav_key | unique_key ^ ( dimension_key | single_key reference_key ) );
 */
OracleDML::cell_reference_options_return
OracleDML::cell_reference_options()
{
    OracleDML::cell_reference_options_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::ignore_key_return ignore_key314;
    ImplTraits::TreeTypePtr::pointer ignore_key314_last = NULL;
    OracleDML_OracleDMLKeys::keep_key_return keep_key315;
    ImplTraits::TreeTypePtr::pointer keep_key315_last = NULL;
    OracleDML_OracleDMLKeys::nav_key_return nav_key316;
    ImplTraits::TreeTypePtr::pointer nav_key316_last = NULL;
    OracleDML_OracleDMLKeys::unique_key_return unique_key317;
    ImplTraits::TreeTypePtr::pointer unique_key317_last = NULL;
    OracleDML_OracleDMLKeys::dimension_key_return dimension_key318;
    ImplTraits::TreeTypePtr::pointer dimension_key318_last = NULL;
    OracleDML_OracleDMLKeys::single_key_return single_key319;
    ImplTraits::TreeTypePtr::pointer single_key319_last = NULL;
    OracleDML_OracleDMLKeys::reference_key_return reference_key320;
    ImplTraits::TreeTypePtr::pointer reference_key320_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:493:5: ( ( ignore_key ^| keep_key ^) nav_key | unique_key ^ ( dimension_key | single_key reference_key ) )

            ANTLR_UINT32 alt111;

            alt111=2;

            {
                ANTLR_UINT32 LA111_0 = this->LA(1);
                if ( (LA111_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                {
                    alt111=1;
                }
                else if ( (LA111_0 == SQL92_RESERVED_UNIQUE))
                {
                    alt111=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 111 );
                    ex->set_state( 0 );


                    goto rulecell_reference_optionsEx;

                }
            }
            switch (alt111)
            {
        	case 1:
        	    // OracleDML.g:493:10: ( ignore_key ^| keep_key ^) nav_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:493:10: ( ignore_key ^| keep_key ^)
        	        {
        	            ANTLR_UINT32 alt109=2;
        	            {
        	                ANTLR_UINT32 LA109_0 = this->LA(1);
        	                if ( (LA109_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA109_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "IGNORE")))
        	                        {
        	                            alt109=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "KEEP")))
        	                        {
        	                            alt109=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 109 );
        	                            ex->set_state( 1 );


        	                            goto rulecell_reference_optionsEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 109 );
        	                    ex->set_state( 0 );


        	                    goto rulecell_reference_optionsEx;

        	                }
        	            }
        	            switch (alt109)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:493:11: ignore_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_ignore_key_in_cell_reference_options4693);
        	        	        ignore_key314=ignore_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(ignore_key314.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:493:23: keep_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_keep_key_in_cell_reference_options4696);
        	        	        keep_key315=keep_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(keep_key315.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_nav_key_in_cell_reference_options4700);
        	        nav_key316=nav_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecell_reference_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nav_key316.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:494:10: unique_key ^ ( dimension_key | single_key reference_key )
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_unique_key_in_cell_reference_options4711);
        	        unique_key317=unique_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecell_reference_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(unique_key317.tree, root_0);

        	        // OracleDML.g:494:22: ( dimension_key | single_key reference_key )
        	        {
        	            ANTLR_UINT32 alt110=2;
        	            {
        	                ANTLR_UINT32 LA110_0 = this->LA(1);
        	                if ( (LA110_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "SINGLE")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA110_1 = this->LA(2);
        	                        if ( (LA110_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "SINGLE")))))
        	                        {
        	                            {
        	                                ANTLR_UINT32 LA110_2 = this->LA(3);
        	                                if ( ((toUpper(LT(1)->getText()) == "DIMENSION")))
        	                                {
        	                                    alt110=1;
        	                                }
        	                                else if ( ((toUpper(LT(1)->getText()) == "SINGLE")))
        	                                {
        	                                    alt110=2;
        	                                }
        	                                else
        	                                {
        	                                    if (this->get_backtracking()>0)
        	                                    {
        	                                        this->set_failedflag( true );
        	                                        return retval;
        	                                    }


        	                                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                                    ex->set_decisionNum( 110 );
        	                                    ex->set_state( 2 );


        	                                    goto rulecell_reference_optionsEx;

        	                                }
        	                            }
        	                        }
        	                        else if ( (LA110_1 == LEFT_PAREN || LA110_1 == SQL92_RESERVED_UNIQUE) && ((toUpper(LT(1)->getText()) == "DIMENSION")))
        	                        {
        	                            alt110=1;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 110 );
        	                            ex->set_state( 1 );


        	                            goto rulecell_reference_optionsEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 110 );
        	                    ex->set_state( 0 );


        	                    goto rulecell_reference_optionsEx;

        	                }
        	            }
        	            switch (alt110)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:494:23: dimension_key
        	        	    {
        	        	        this->followPush(FOLLOW_dimension_key_in_cell_reference_options4715);
        	        	        dimension_key318=dimension_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, dimension_key318.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:494:37: single_key reference_key
        	        	    {
        	        	        this->followPush(FOLLOW_single_key_in_cell_reference_options4717);
        	        	        single_key319=single_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, single_key319.tree);


        	        	        this->followPush(FOLLOW_reference_key_in_cell_reference_options4719);
        	        	        reference_key320=reference_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, reference_key320.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulecell_reference_optionsEx; /* Prevent compiler warnings */
    rulecell_reference_optionsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cell_reference_options */

/**
 * $ANTLR start return_rows_clause
 * OracleDML.g:497:1: return_rows_clause : return_key ^ ( updated_key | all_key ) rows_key !;
 */
OracleDML::return_rows_clause_return
OracleDML::return_rows_clause()
{
    OracleDML::return_rows_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::return_key_return return_key321;
    ImplTraits::TreeTypePtr::pointer return_key321_last = NULL;
    OracleDML_OracleDMLKeys::updated_key_return updated_key322;
    ImplTraits::TreeTypePtr::pointer updated_key322_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key323;
    ImplTraits::TreeTypePtr::pointer all_key323_last = NULL;
    OracleDML_OracleDMLKeys::rows_key_return rows_key324;
    ImplTraits::TreeTypePtr::pointer rows_key324_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:498:5: ( return_key ^ ( updated_key | all_key ) rows_key !)
        // OracleDML.g:498:10: return_key ^ ( updated_key | all_key ) rows_key !
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_return_key_in_return_rows_clause4740);
            return_key321=return_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereturn_rows_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(return_key321.tree, root_0);

            // OracleDML.g:498:22: ( updated_key | all_key )
            {
                ANTLR_UINT32 alt112=2;
                {
                    ANTLR_UINT32 LA112_0 = this->LA(1);
                    if ( (LA112_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "UPDATED")))
                    {
                        alt112=1;
                    }
                    else if ( (LA112_0 == SQL92_RESERVED_ALL))
                    {
                        alt112=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 112 );
                        ex->set_state( 0 );


                        goto rulereturn_rows_clauseEx;

                    }
                }
                switch (alt112)
                {
            	case 1:
            	    // OracleDML.g:498:23: updated_key
            	    {
            	        this->followPush(FOLLOW_updated_key_in_return_rows_clause4744);
            	        updated_key322=updated_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulereturn_rows_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, updated_key322.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:498:35: all_key
            	    {
            	        this->followPush(FOLLOW_all_key_in_return_rows_clause4746);
            	        all_key323=all_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulereturn_rows_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, all_key323.tree);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_rows_key_in_return_rows_clause4749);
            rows_key324=rows_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereturn_rows_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulereturn_rows_clauseEx; /* Prevent compiler warnings */
    rulereturn_rows_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end return_rows_clause */

/**
 * $ANTLR start reference_model
 * OracleDML.g:501:1: reference_model : reference_key ^ reference_model_name on_key ! LEFT_PAREN subquery RIGHT_PAREN model_column_clauses ( cell_reference_options )* ;
 */
OracleDML::reference_model_return
OracleDML::reference_model()
{
    OracleDML::reference_model_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN328 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN330 = NULL;
    OracleDML_OracleDMLKeys::reference_key_return reference_key325;
    ImplTraits::TreeTypePtr::pointer reference_key325_last = NULL;
    OracleDML_OracleDMLCommons::reference_model_name_return reference_model_name326;
    ImplTraits::TreeTypePtr::pointer reference_model_name326_last = NULL;
    OracleDML_OracleDMLKeys::on_key_return on_key327;
    ImplTraits::TreeTypePtr::pointer on_key327_last = NULL;
    OracleDML::subquery_return subquery329;
    ImplTraits::TreeTypePtr::pointer subquery329_last = NULL;
    OracleDML::model_column_clauses_return model_column_clauses331;
    ImplTraits::TreeTypePtr::pointer model_column_clauses331_last = NULL;
    OracleDML::cell_reference_options_return cell_reference_options332;
    ImplTraits::TreeTypePtr::pointer cell_reference_options332_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN328_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN330_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:502:5: ( reference_key ^ reference_model_name on_key ! LEFT_PAREN subquery RIGHT_PAREN model_column_clauses ( cell_reference_options )* )
        // OracleDML.g:502:10: reference_key ^ reference_model_name on_key ! LEFT_PAREN subquery RIGHT_PAREN model_column_clauses ( cell_reference_options )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_reference_key_in_reference_model4770);
            reference_key325=reference_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(reference_key325.tree, root_0);

            this->followPush(FOLLOW_reference_model_name_in_reference_model4773);
            reference_model_name326=reference_model_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, reference_model_name326.tree);


            this->followPush(FOLLOW_on_key_in_reference_model4775);
            on_key327=on_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            LEFT_PAREN328 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_reference_model4791);
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN328_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN328));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN328_tree);
            }


            this->followPush(FOLLOW_subquery_in_reference_model4793);
            subquery329=subquery();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery329.tree);


            RIGHT_PAREN330 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_reference_model4795);
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN330_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN330));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN330_tree);
            }


            this->followPush(FOLLOW_model_column_clauses_in_reference_model4797);
            model_column_clauses331=model_column_clauses();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, model_column_clauses331.tree);


            // OracleDML.g:504:13: ( cell_reference_options )*

            for (;;)
            {
                ANTLR_UINT32 alt113=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    ANTLR_UINT32 LA113_0 = this->LA(1);
                    if ( (LA113_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "IGNORE"))||((toUpper(LT(1)->getText()) == "REFERENCE")))))
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            ANTLR_UINT32 LA113_1 = this->LA(2);
                            if ( (LA113_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "IGNORE"))||((toUpper(LT(1)->getText()) == "REFERENCE")))))
                            {
                                {
                                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                                    */
                                    ANTLR_UINT32 LA113_4 = this->LA(3);
                                    if ( ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                                    {
                                        alt113=1;
                                    }

                                }
                            }

                        }
                    }
                    else if ( (LA113_0 == SQL92_RESERVED_UNIQUE))
                    {
                        alt113=1;
                    }

                }
                switch (alt113)
                {
            	case 1:
            	    // OracleDML.g:504:13: cell_reference_options
            	    {
            	        this->followPush(FOLLOW_cell_reference_options_in_reference_model4812);
            	        cell_reference_options332=cell_reference_options();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulereference_modelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cell_reference_options332.tree);


            	    }
            	    break;

            	default:
            	    goto loop113;	/* break out of the loop */
            	    break;
                }
            }
            loop113: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulereference_modelEx; /* Prevent compiler warnings */
    rulereference_modelEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end reference_model */

/**
 * $ANTLR start main_model
 * OracleDML.g:507:1: main_model : ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause ) ;
 */
OracleDML::main_model_return
OracleDML::main_model()
{
    OracleDML::main_model_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::main_key_return main_key333;
    ImplTraits::TreeTypePtr::pointer main_key333_last = NULL;
    OracleDML_OracleDMLCommons::main_model_name_return main_model_name334;
    ImplTraits::TreeTypePtr::pointer main_model_name334_last = NULL;
    OracleDML::model_column_clauses_return model_column_clauses335;
    ImplTraits::TreeTypePtr::pointer model_column_clauses335_last = NULL;
    OracleDML::cell_reference_options_return cell_reference_options336;
    ImplTraits::TreeTypePtr::pointer cell_reference_options336_last = NULL;
    OracleDML::model_rules_clause_return model_rules_clause337;
    ImplTraits::TreeTypePtr::pointer model_rules_clause337_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_main_key(get_psrstate()->get_treeAdaptor(), "rule main_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_main_model_name(get_psrstate()->get_treeAdaptor(), "rule main_model_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_column_clauses(get_psrstate()->get_treeAdaptor(), "rule model_column_clauses");
    RewriteRuleSubtreeStream<ImplTraits> stream_cell_reference_options(get_psrstate()->get_treeAdaptor(), "rule cell_reference_options");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_rules_clause(get_psrstate()->get_treeAdaptor(), "rule model_rules_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:508:5: ( ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause ) )
        // OracleDML.g:508:10: ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause
        {
            // OracleDML.g:508:10: ( main_key main_model_name )?
            {
                ANTLR_UINT32 alt114=2;
                {
                    ANTLR_UINT32 LA114_0 = this->LA(1);
                    if ( (LA114_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "PARTITION")))))
                    {
                        {
                            ANTLR_UINT32 LA114_1 = this->LA(2);
                            if ( (LA114_1 == DELIMITED_ID || LA114_1 == INTRODUCER || LA114_1 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "MAIN")))
                            {
                                alt114=1;
                            }
                        }
                    }
                }
                switch (alt114)
                {
            	case 1:
            	    // OracleDML.g:508:11: main_key main_model_name
            	    {
            	        this->followPush(FOLLOW_main_key_in_main_model4834);
            	        main_key333=main_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemain_modelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            main_key333_last = main_key333.tree.get();
            	            stream_main_key.add(main_key333.tree);
            	        }

            	        this->followPush(FOLLOW_main_model_name_in_main_model4836);
            	        main_model_name334=main_model_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemain_modelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            main_model_name334_last = main_model_name334.tree.get();
            	            stream_main_model_name.add(main_model_name334.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_model_column_clauses_in_main_model4840);
            model_column_clauses335=model_column_clauses();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemain_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_column_clauses335_last = model_column_clauses335.tree.get();
                stream_model_column_clauses.add(model_column_clauses335.tree);
            }

            // OracleDML.g:508:59: ( cell_reference_options )*

            for (;;)
            {
                ANTLR_UINT32 alt115=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    ANTLR_UINT32 LA115_0 = this->LA(1);
                    if ( (LA115_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "RULES"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            ANTLR_UINT32 LA115_1 = this->LA(2);
                            if ( (LA115_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "RULES"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                            {
                                {
                                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                                    */
                                    ANTLR_UINT32 LA115_5 = this->LA(3);
                                    if ( ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                                    {
                                        alt115=1;
                                    }

                                }
                            }

                        }
                    }
                    else if ( (LA115_0 == SQL92_RESERVED_UNIQUE))
                    {
                        alt115=1;
                    }

                }
                switch (alt115)
                {
            	case 1:
            	    // OracleDML.g:508:59: cell_reference_options
            	    {
            	        this->followPush(FOLLOW_cell_reference_options_in_main_model4842);
            	        cell_reference_options336=cell_reference_options();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemain_modelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            cell_reference_options336_last = cell_reference_options336.tree.get();
            	            stream_cell_reference_options.add(cell_reference_options336.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop115;	/* break out of the loop */
            	    break;
                }
            }
            loop115: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_model_rules_clause_in_main_model4845);
            model_rules_clause337=model_rules_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemain_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_rules_clause337_last = model_rules_clause337.tree.get();
                stream_model_rules_clause.add(model_rules_clause337.tree);
            }

            // AST REWRITE
            // elements: main_model_name, cell_reference_options, model_rules_clause, model_column_clauses
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 509:9: -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause )
            {
            	// OracleDML.g:509:12: ^( MAIN_MODEL ( main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MAIN_MODEL, "MAIN_MODEL"), root_1);
            	// OracleDML.g:509:25: ( main_model_name )?
            	if ( stream_main_model_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_main_model_name.nextTree());
            	}
            	stream_main_model_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_column_clauses.nextTree());
            	// OracleDML.g:509:63: ( cell_reference_options )*
            	while ( stream_cell_reference_options.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cell_reference_options.nextTree());
            	}
            	stream_cell_reference_options.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_rules_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemain_modelEx; /* Prevent compiler warnings */
    rulemain_modelEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end main_model */

/**
 * $ANTLR start model_column_clauses
 * OracleDML.g:512:1: model_column_clauses : ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list -> ^( MODEL_COLUMN ( model_column_partition_part )? ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ) ;
 */
OracleDML::model_column_clauses_return
OracleDML::model_column_clauses()
{
    OracleDML::model_column_clauses_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::model_column_partition_part_return model_column_partition_part338;
    ImplTraits::TreeTypePtr::pointer model_column_partition_part338_last = NULL;
    OracleDML_OracleDMLKeys::dimension_key_return dimension_key339;
    ImplTraits::TreeTypePtr::pointer dimension_key339_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key340;
    ImplTraits::TreeTypePtr::pointer by_key340_last = NULL;
    OracleDML::model_column_list_return model_column_list341;
    ImplTraits::TreeTypePtr::pointer model_column_list341_last = NULL;
    OracleDML_OracleDMLKeys::measures_key_return measures_key342;
    ImplTraits::TreeTypePtr::pointer measures_key342_last = NULL;
    OracleDML::model_column_list_return model_column_list343;
    ImplTraits::TreeTypePtr::pointer model_column_list343_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_model_column_list(get_psrstate()->get_treeAdaptor(), "rule model_column_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_dimension_key(get_psrstate()->get_treeAdaptor(), "rule dimension_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_column_partition_part(get_psrstate()->get_treeAdaptor(), "rule model_column_partition_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_measures_key(get_psrstate()->get_treeAdaptor(), "rule measures_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:513:5: ( ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list -> ^( MODEL_COLUMN ( model_column_partition_part )? ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ) )
        // OracleDML.g:513:10: ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list
        {
            // OracleDML.g:513:10: ( model_column_partition_part )?
            {
                ANTLR_UINT32 alt116=2;
                {
                    ANTLR_UINT32 LA116_0 = this->LA(1);
                    if ( (LA116_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "PARTITION")))))
                    {
                        {
                            ANTLR_UINT32 LA116_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "PARTITION")))
                            {
                                alt116=1;
                            }
                        }
                    }
                }
                switch (alt116)
                {
            	case 1:
            	    // OracleDML.g:513:10: model_column_partition_part
            	    {
            	        this->followPush(FOLLOW_model_column_partition_part_in_model_column_clauses4889);
            	        model_column_partition_part338=model_column_partition_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_column_clausesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_column_partition_part338_last = model_column_partition_part338.tree.get();
            	            stream_model_column_partition_part.add(model_column_partition_part338.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_dimension_key_in_model_column_clauses4900);
            dimension_key339=dimension_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                dimension_key339_last = dimension_key339.tree.get();
                stream_dimension_key.add(dimension_key339.tree);
            }

            this->followPush(FOLLOW_by_key_in_model_column_clauses4902);
            by_key340=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                by_key340_last = by_key340.tree.get();
                stream_by_key.add(by_key340.tree);
            }

            this->followPush(FOLLOW_model_column_list_in_model_column_clauses4904);
            model_column_list341=model_column_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_column_list341_last = model_column_list341.tree.get();
                stream_model_column_list.add(model_column_list341.tree);
            }

            this->followPush(FOLLOW_measures_key_in_model_column_clauses4906);
            measures_key342=measures_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                measures_key342_last = measures_key342.tree.get();
                stream_measures_key.add(measures_key342.tree);
            }

            this->followPush(FOLLOW_model_column_list_in_model_column_clauses4908);
            model_column_list343=model_column_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_column_list343_last = model_column_list343.tree.get();
                stream_model_column_list.add(model_column_list343.tree);
            }

            // AST REWRITE
            // elements: model_column_partition_part, model_column_list, measures_key, dimension_key, model_column_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 515:9: -> ^( MODEL_COLUMN ( model_column_partition_part )? ^( dimension_key model_column_list ) ^( measures_key model_column_list ) )
            {
            	// OracleDML.g:515:12: ^( MODEL_COLUMN ( model_column_partition_part )? ^( dimension_key model_column_list ) ^( measures_key model_column_list ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_COLUMN, "MODEL_COLUMN"), root_1);
            	// OracleDML.g:515:27: ( model_column_partition_part )?
            	if ( stream_model_column_partition_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_column_partition_part.nextTree());
            	}
            	stream_model_column_partition_part.reset();

            	// OracleDML.g:515:56: ^( dimension_key model_column_list )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_dimension_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_model_column_list.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:515:91: ^( measures_key model_column_list )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_measures_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_model_column_list.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_column_clausesEx; /* Prevent compiler warnings */
    rulemodel_column_clausesEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_column_clauses */

/**
 * $ANTLR start model_column_partition_part
 * OracleDML.g:518:1: model_column_partition_part : partition_key ^ by_key ! model_column_list ;
 */
OracleDML::model_column_partition_part_return
OracleDML::model_column_partition_part()
{
    OracleDML::model_column_partition_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::partition_key_return partition_key344;
    ImplTraits::TreeTypePtr::pointer partition_key344_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key345;
    ImplTraits::TreeTypePtr::pointer by_key345_last = NULL;
    OracleDML::model_column_list_return model_column_list346;
    ImplTraits::TreeTypePtr::pointer model_column_list346_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:519:5: ( partition_key ^ by_key ! model_column_list )
        // OracleDML.g:519:10: partition_key ^ by_key ! model_column_list
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_partition_key_in_model_column_partition_part4957);
            partition_key344=partition_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_partition_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(partition_key344.tree, root_0);

            this->followPush(FOLLOW_by_key_in_model_column_partition_part4960);
            by_key345=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_partition_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_model_column_list_in_model_column_partition_part4963);
            model_column_list346=model_column_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_partition_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, model_column_list346.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_column_partition_partEx; /* Prevent compiler warnings */
    rulemodel_column_partition_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_column_partition_part */

/**
 * $ANTLR start model_column_list
 * OracleDML.g:522:1: model_column_list : LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN -> ^( MODEL_COLUMNS ( model_column )+ ) ;
 */
OracleDML::model_column_list_return
OracleDML::model_column_list()
{
    OracleDML::model_column_list_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN347 = NULL;
    ImplTraits::CommonTokenType const* COMMA349 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN351 = NULL;
    OracleDML::model_column_return model_column348;
    ImplTraits::TreeTypePtr::pointer model_column348_last = NULL;
    OracleDML::model_column_return model_column350;
    ImplTraits::TreeTypePtr::pointer model_column350_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN347_tree;
    ImplTraits::TreeTypePtr COMMA349_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN351_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_column(get_psrstate()->get_treeAdaptor(), "rule model_column");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:523:5: ( LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN -> ^( MODEL_COLUMNS ( model_column )+ ) )
        // OracleDML.g:523:10: LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN
        {
            LEFT_PAREN347 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_model_column_list4983);
            if  (this->hasException())
            {
                goto rulemodel_column_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN347);


            this->followPush(FOLLOW_model_column_in_model_column_list4985);
            model_column348=model_column();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_column348_last = model_column348.tree.get();
                stream_model_column.add(model_column348.tree);
            }

            // OracleDML.g:523:34: ( COMMA model_column )*

            for (;;)
            {
                ANTLR_UINT32 alt117=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt117=1;
                	}
                    break;

                }

                switch (alt117)
                {
            	case 1:
            	    // OracleDML.g:523:35: COMMA model_column
            	    {
            	        COMMA349 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_model_column_list4988);
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_column_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA349);


            	        this->followPush(FOLLOW_model_column_in_model_column_list4990);
            	        model_column350=model_column();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_column_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_column350_last = model_column350.tree.get();
            	            stream_model_column.add(model_column350.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop117;	/* break out of the loop */
            	    break;
                }
            }
            loop117: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN351 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_model_column_list4995);
            if  (this->hasException())
            {
                goto rulemodel_column_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN351);


            // AST REWRITE
            // elements: model_column
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 524:9: -> ^( MODEL_COLUMNS ( model_column )+ )
            {
            	// OracleDML.g:524:12: ^( MODEL_COLUMNS ( model_column )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_COLUMNS, "MODEL_COLUMNS"), root_1);
            	if ( !(stream_model_column.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "model_column empty" );
            		goto rulemodel_column_listEx;
            	}
            	while ( stream_model_column.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_column.nextTree());
            	}
            	stream_model_column.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_column_listEx; /* Prevent compiler warnings */
    rulemodel_column_listEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_column_list */

/**
 * $ANTLR start model_column
 * OracleDML.g:527:1: model_column : expression ( column_alias )? -> ^( MODEL_COLUMN ^( EXPR expression ) ( column_alias )? ) ;
 */
OracleDML::model_column_return
OracleDML::model_column()
{
    OracleDML::model_column_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression352;
    ImplTraits::TreeTypePtr::pointer expression352_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias353;
    ImplTraits::TreeTypePtr::pointer column_alias353_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:528:5: ( expression ( column_alias )? -> ^( MODEL_COLUMN ^( EXPR expression ) ( column_alias )? ) )
        // OracleDML.g:528:10: expression ( column_alias )?
        {
            this->followPush(FOLLOW_expression_in_model_column5032);
            expression352=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_columnEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression352_last = expression352.tree.get();
                stream_expression.add(expression352.tree);
            }

            // OracleDML.g:528:21: ( column_alias )?
            {
                ANTLR_UINT32 alt118=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt118=1;
                    	}
                        break;
                }

                switch (alt118)
                {
            	case 1:
            	    // OracleDML.g:528:21: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_model_column5034);
            	        column_alias353=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_columnEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias353_last = column_alias353.tree.get();
            	            stream_column_alias.add(column_alias353.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_alias, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 529:9: -> ^( MODEL_COLUMN ^( EXPR expression ) ( column_alias )? )
            {
            	// OracleDML.g:529:12: ^( MODEL_COLUMN ^( EXPR expression ) ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_COLUMN, "MODEL_COLUMN"), root_1);
            	// OracleDML.g:529:27: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:529:46: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_columnEx; /* Prevent compiler warnings */
    rulemodel_columnEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_column */

/**
 * $ANTLR start model_rules_clause
 * OracleDML.g:532:1: model_rules_clause : ( model_rules_part )? LEFT_PAREN ( model_rules_element ( COMMA model_rules_element )* )? RIGHT_PAREN -> ^( MODEL_RULES ( model_rules_part )? ( model_rules_element )* ) ;
 */
OracleDML::model_rules_clause_return
OracleDML::model_rules_clause()
{
    OracleDML::model_rules_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN355 = NULL;
    ImplTraits::CommonTokenType const* COMMA357 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN359 = NULL;
    OracleDML::model_rules_part_return model_rules_part354;
    ImplTraits::TreeTypePtr::pointer model_rules_part354_last = NULL;
    OracleDML::model_rules_element_return model_rules_element356;
    ImplTraits::TreeTypePtr::pointer model_rules_element356_last = NULL;
    OracleDML::model_rules_element_return model_rules_element358;
    ImplTraits::TreeTypePtr::pointer model_rules_element358_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN355_tree;
    ImplTraits::TreeTypePtr COMMA357_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN359_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_rules_element(get_psrstate()->get_treeAdaptor(), "rule model_rules_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_rules_part(get_psrstate()->get_treeAdaptor(), "rule model_rules_part");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:533:5: ( ( model_rules_part )? LEFT_PAREN ( model_rules_element ( COMMA model_rules_element )* )? RIGHT_PAREN -> ^( MODEL_RULES ( model_rules_part )? ( model_rules_element )* ) )
        // OracleDML.g:533:10: ( model_rules_part )? LEFT_PAREN ( model_rules_element ( COMMA model_rules_element )* )? RIGHT_PAREN
        {
            // OracleDML.g:533:10: ( model_rules_part )?
            {
                ANTLR_UINT32 alt119=2;
                {
                    ANTLR_UINT32 LA119_0 = this->LA(1);
                    if ( (LA119_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "RULES")))
                    {
                        alt119=1;
                    }
                }
                switch (alt119)
                {
            	case 1:
            	    // OracleDML.g:533:10: model_rules_part
            	    {
            	        this->followPush(FOLLOW_model_rules_part_in_model_rules_clause5078);
            	        model_rules_part354=model_rules_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_rules_part354_last = model_rules_part354.tree.get();
            	            stream_model_rules_part.add(model_rules_part354.tree);
            	        }

            	    }
            	    break;

                }
            }

            LEFT_PAREN355 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_model_rules_clause5081);
            if  (this->hasException())
            {
                goto rulemodel_rules_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN355);


            // OracleDML.g:533:39: ( model_rules_element ( COMMA model_rules_element )* )?
            {
                ANTLR_UINT32 alt121=2;
                switch ( this->LA(1) )
                {
                    case APPROXIMATE_NUM_LIT:
                    case BINDVAR:
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case COLON:
                    case DELIMITED_ID:
                    case EXACT_NUM_LIT:
                    case INTRODUCER:
                    case LEFT_PAREN:
                    case MINUS_SIGN:
                    case NATIONAL_CHAR_STRING_LIT:
                    case PLSQL_NON_RESERVED_CAST:
                    case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                    case PLUS_SIGN:
                    case REGULAR_ID:
                    case SQL92_RESERVED_ALL:
                    case SQL92_RESERVED_ANY:
                    case SQL92_RESERVED_CASE:
                    case SQL92_RESERVED_DATE:
                    case SQL92_RESERVED_DEFAULT:
                    case SQL92_RESERVED_DISTINCT:
                    case SQL92_RESERVED_EXISTS:
                    case SQL92_RESERVED_FALSE:
                    case SQL92_RESERVED_NULL:
                    case SQL92_RESERVED_PRIOR:
                    case SQL92_RESERVED_TRUE:
                    case SQL92_RESERVED_UPDATE:
                    case UNSIGNED_INTEGER:
                    	{
                    		alt121=1;
                    	}
                        break;
                }

                switch (alt121)
                {
            	case 1:
            	    // OracleDML.g:533:40: model_rules_element ( COMMA model_rules_element )*
            	    {
            	        this->followPush(FOLLOW_model_rules_element_in_model_rules_clause5084);
            	        model_rules_element356=model_rules_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_rules_element356_last = model_rules_element356.tree.get();
            	            stream_model_rules_element.add(model_rules_element356.tree);
            	        }

            	        // OracleDML.g:533:60: ( COMMA model_rules_element )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt120=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt120=1;
            	            	}
            	                break;

            	            }

            	            switch (alt120)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:533:61: COMMA model_rules_element
            	        	    {
            	        	        COMMA357 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_model_rules_clause5087);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA357);


            	        	        this->followPush(FOLLOW_model_rules_element_in_model_rules_clause5089);
            	        	        model_rules_element358=model_rules_element();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            model_rules_element358_last = model_rules_element358.tree.get();
            	        	            stream_model_rules_element.add(model_rules_element358.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop120;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop120: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            RIGHT_PAREN359 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_model_rules_clause5095);
            if  (this->hasException())
            {
                goto rulemodel_rules_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN359);


            // AST REWRITE
            // elements: model_rules_element, model_rules_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 534:9: -> ^( MODEL_RULES ( model_rules_part )? ( model_rules_element )* )
            {
            	// OracleDML.g:534:12: ^( MODEL_RULES ( model_rules_part )? ( model_rules_element )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_RULES, "MODEL_RULES"), root_1);
            	// OracleDML.g:534:26: ( model_rules_part )?
            	if ( stream_model_rules_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_rules_part.nextTree());
            	}
            	stream_model_rules_part.reset();

            	// OracleDML.g:534:44: ( model_rules_element )*
            	while ( stream_model_rules_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_rules_element.nextTree());
            	}
            	stream_model_rules_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_rules_clauseEx; /* Prevent compiler warnings */
    rulemodel_rules_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_rules_clause */

/**
 * $ANTLR start model_rules_part
 * OracleDML.g:537:1: model_rules_part : rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )? -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? ) ;
 */
OracleDML::model_rules_part_return
OracleDML::model_rules_part()
{
    OracleDML::model_rules_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::rules_key_return rules_key360;
    ImplTraits::TreeTypePtr::pointer rules_key360_last = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key361;
    ImplTraits::TreeTypePtr::pointer update_key361_last = NULL;
    OracleDML_OracleDMLKeys::upsert_key_return upsert_key362;
    ImplTraits::TreeTypePtr::pointer upsert_key362_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key363;
    ImplTraits::TreeTypePtr::pointer all_key363_last = NULL;
    OracleDML_OracleDMLKeys::automatic_key_return automatic_key364;
    ImplTraits::TreeTypePtr::pointer automatic_key364_last = NULL;
    OracleDML_OracleDMLKeys::sequential_key_return sequential_key365;
    ImplTraits::TreeTypePtr::pointer sequential_key365_last = NULL;
    OracleDML_OracleDMLKeys::order_key_return order_key366;
    ImplTraits::TreeTypePtr::pointer order_key366_last = NULL;
    OracleDML::model_iterate_clause_return model_iterate_clause367;
    ImplTraits::TreeTypePtr::pointer model_iterate_clause367_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_sequential_key(get_psrstate()->get_treeAdaptor(), "rule sequential_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_key(get_psrstate()->get_treeAdaptor(), "rule order_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_rules_key(get_psrstate()->get_treeAdaptor(), "rule rules_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_iterate_clause(get_psrstate()->get_treeAdaptor(), "rule model_iterate_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_key(get_psrstate()->get_treeAdaptor(), "rule update_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_automatic_key(get_psrstate()->get_treeAdaptor(), "rule automatic_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_upsert_key(get_psrstate()->get_treeAdaptor(), "rule upsert_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:538:5: ( rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )? -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? ) )
        // OracleDML.g:538:10: rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )?
        {
            this->followPush(FOLLOW_rules_key_in_model_rules_part5135);
            rules_key360=rules_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_rules_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                rules_key360_last = rules_key360.tree.get();
                stream_rules_key.add(rules_key360.tree);
            }

            // OracleDML.g:538:20: ( update_key | upsert_key ( all_key )? )?
            {
                ANTLR_UINT32 alt123=3;
                {
                    ANTLR_UINT32 LA123_0 = this->LA(1);
                    if ( (LA123_0 == SQL92_RESERVED_UPDATE))
                    {
                        alt123=1;
                    }
                    else if ( (LA123_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "ITERATE"))||((toUpper(LT(1)->getText()) == "UPSERT"))||((toUpper(LT(1)->getText()) == "SEQUENTIAL"))||((toUpper(LT(1)->getText()) == "AUTOMATIC")))))
                    {
                        {
                            ANTLR_UINT32 LA123_2 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "UPSERT")))
                            {
                                alt123=2;
                            }
                        }
                    }
                }
                switch (alt123)
                {
            	case 1:
            	    // OracleDML.g:538:21: update_key
            	    {
            	        this->followPush(FOLLOW_update_key_in_model_rules_part5138);
            	        update_key361=update_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            update_key361_last = update_key361.tree.get();
            	            stream_update_key.add(update_key361.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:538:32: upsert_key ( all_key )?
            	    {
            	        this->followPush(FOLLOW_upsert_key_in_model_rules_part5140);
            	        upsert_key362=upsert_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            upsert_key362_last = upsert_key362.tree.get();
            	            stream_upsert_key.add(upsert_key362.tree);
            	        }

            	        // OracleDML.g:538:43: ( all_key )?
            	        {
            	            ANTLR_UINT32 alt122=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_ALL:
            	                	{
            	                		alt122=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt122)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:538:43: all_key
            	        	    {
            	        	        this->followPush(FOLLOW_all_key_in_model_rules_part5142);
            	        	        all_key363=all_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            all_key363_last = all_key363.tree.get();
            	        	            stream_all_key.add(all_key363.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:538:54: ( ( automatic_key | sequential_key ) order_key )?
            {
                ANTLR_UINT32 alt125=2;
                {
                    ANTLR_UINT32 LA125_0 = this->LA(1);
                    if ( (LA125_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "ITERATE"))||((toUpper(LT(1)->getText()) == "SEQUENTIAL"))||((toUpper(LT(1)->getText()) == "AUTOMATIC")))))
                    {
                        {
                            ANTLR_UINT32 LA125_1 = this->LA(2);
                            if ( (LA125_1 == SQL92_RESERVED_ORDER) && ((((toUpper(LT(1)->getText()) == "SEQUENTIAL"))||((toUpper(LT(1)->getText()) == "AUTOMATIC")))))
                            {
                                alt125=1;
                            }
                        }
                    }
                }
                switch (alt125)
                {
            	case 1:
            	    // OracleDML.g:538:55: ( automatic_key | sequential_key ) order_key
            	    {
            	        // OracleDML.g:538:55: ( automatic_key | sequential_key )
            	        {
            	            ANTLR_UINT32 alt124=2;
            	            {
            	                ANTLR_UINT32 LA124_0 = this->LA(1);
            	                if ( (LA124_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SEQUENTIAL"))||((toUpper(LT(1)->getText()) == "AUTOMATIC")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA124_1 = this->LA(2);
            	                        if ( ((toUpper(LT(1)->getText()) == "AUTOMATIC")))
            	                        {
            	                            alt124=1;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "SEQUENTIAL")))
            	                        {
            	                            alt124=2;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return retval;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 124 );
            	                            ex->set_state( 1 );


            	                            goto rulemodel_rules_partEx;

            	                        }
            	                    }
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 124 );
            	                    ex->set_state( 0 );


            	                    goto rulemodel_rules_partEx;

            	                }
            	            }
            	            switch (alt124)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:538:56: automatic_key
            	        	    {
            	        	        this->followPush(FOLLOW_automatic_key_in_model_rules_part5149);
            	        	        automatic_key364=automatic_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            automatic_key364_last = automatic_key364.tree.get();
            	        	            stream_automatic_key.add(automatic_key364.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:538:70: sequential_key
            	        	    {
            	        	        this->followPush(FOLLOW_sequential_key_in_model_rules_part5151);
            	        	        sequential_key365=sequential_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            sequential_key365_last = sequential_key365.tree.get();
            	        	            stream_sequential_key.add(sequential_key365.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_order_key_in_model_rules_part5154);
            	        order_key366=order_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_key366_last = order_key366.tree.get();
            	            stream_order_key.add(order_key366.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:538:98: ( model_iterate_clause )?
            {
                ANTLR_UINT32 alt126=2;
                {
                    ANTLR_UINT32 LA126_0 = this->LA(1);
                    if ( (LA126_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "ITERATE")))
                    {
                        alt126=1;
                    }
                }
                switch (alt126)
                {
            	case 1:
            	    // OracleDML.g:538:98: model_iterate_clause
            	    {
            	        this->followPush(FOLLOW_model_iterate_clause_in_model_rules_part5158);
            	        model_iterate_clause367=model_iterate_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_iterate_clause367_last = model_iterate_clause367.tree.get();
            	            stream_model_iterate_clause.add(model_iterate_clause367.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: upsert_key, update_key, all_key, rules_key, model_iterate_clause, sequential_key, automatic_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 539:9: -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? )
            {
            	// OracleDML.g:539:12: ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_rules_key.nextNode(), root_1);
            	// OracleDML.g:539:24: ( update_key )?
            	if ( stream_update_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_key.nextTree());
            	}
            	stream_update_key.reset();

            	// OracleDML.g:539:36: ( upsert_key )?
            	if ( stream_upsert_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_upsert_key.nextTree());
            	}
            	stream_upsert_key.reset();

            	// OracleDML.g:539:48: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:539:57: ( automatic_key )?
            	if ( stream_automatic_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_automatic_key.nextTree());
            	}
            	stream_automatic_key.reset();

            	// OracleDML.g:539:72: ( sequential_key )?
            	if ( stream_sequential_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_sequential_key.nextTree());
            	}
            	stream_sequential_key.reset();

            	// OracleDML.g:539:88: ( model_iterate_clause )?
            	if ( stream_model_iterate_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_iterate_clause.nextTree());
            	}
            	stream_model_iterate_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_rules_partEx; /* Prevent compiler warnings */
    rulemodel_rules_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_rules_part */

/**
 * $ANTLR start model_rules_element
 * OracleDML.g:542:1: model_rules_element : ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? ) ;
 */
OracleDML::model_rules_element_return
OracleDML::model_rules_element()
{
    OracleDML::model_rules_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP373 = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key368;
    ImplTraits::TreeTypePtr::pointer update_key368_last = NULL;
    OracleDML_OracleDMLKeys::upsert_key_return upsert_key369;
    ImplTraits::TreeTypePtr::pointer upsert_key369_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key370;
    ImplTraits::TreeTypePtr::pointer all_key370_last = NULL;
    OracleDML::cell_assignment_return cell_assignment371;
    ImplTraits::TreeTypePtr::pointer cell_assignment371_last = NULL;
    OracleDML::order_by_clause_return order_by_clause372;
    ImplTraits::TreeTypePtr::pointer order_by_clause372_last = NULL;
    OracleDML::expression_return expression374;
    ImplTraits::TreeTypePtr::pointer expression374_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP373_tree;
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_by_clause(get_psrstate()->get_treeAdaptor(), "rule order_by_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_key(get_psrstate()->get_treeAdaptor(), "rule update_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_cell_assignment(get_psrstate()->get_treeAdaptor(), "rule cell_assignment");
    RewriteRuleSubtreeStream<ImplTraits> stream_upsert_key(get_psrstate()->get_treeAdaptor(), "rule upsert_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:543:5: ( ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? ) )
        // OracleDML.g:543:10: ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression
        {
            // OracleDML.g:543:10: ( update_key | upsert_key ( ( all_key )=> all_key )? )?
            {
                ANTLR_UINT32 alt128=3;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_UPDATE:
                    	{
                    		alt128=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA128_2 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "UPSERT")))
                    		    {
                    		        alt128=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt128)
                {
            	case 1:
            	    // OracleDML.g:543:11: update_key
            	    {
            	        this->followPush(FOLLOW_update_key_in_model_rules_element5212);
            	        update_key368=update_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            update_key368_last = update_key368.tree.get();
            	            stream_update_key.add(update_key368.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:543:22: upsert_key ( ( all_key )=> all_key )?
            	    {
            	        this->followPush(FOLLOW_upsert_key_in_model_rules_element5214);
            	        upsert_key369=upsert_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            upsert_key369_last = upsert_key369.tree.get();
            	            stream_upsert_key.add(upsert_key369.tree);
            	        }

            	        // OracleDML.g:543:33: ( ( all_key )=> all_key )?
            	        {
            	            ANTLR_UINT32 alt127=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_ALL:
            	                	{
            	                		{
            	                		    ANTLR_UINT32 LA127_1 = this->LA(2);
            	                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
            	                		    {
            	                		        alt127=1;
            	                		    }
            	                		}
            	                	}
            	                    break;
            	            }

            	            switch (alt127)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:543:34: ( all_key )=> all_key
            	        	    {
            	        	        this->followPush(FOLLOW_all_key_in_model_rules_element5222);
            	        	        all_key370=all_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            all_key370_last = all_key370.tree.get();
            	        	            stream_all_key.add(all_key370.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_cell_assignment_in_model_rules_element5236);
            cell_assignment371=cell_assignment();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_rules_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                cell_assignment371_last = cell_assignment371.tree.get();
                stream_cell_assignment.add(cell_assignment371.tree);
            }

            // OracleDML.g:545:17: ( order_by_clause )?
            {
                ANTLR_UINT32 alt129=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ORDER:
                    	{
                    		alt129=1;
                    	}
                        break;
                }

                switch (alt129)
                {
            	case 1:
            	    // OracleDML.g:545:17: order_by_clause
            	    {
            	        this->followPush(FOLLOW_order_by_clause_in_model_rules_element5254);
            	        order_by_clause372=order_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_by_clause372_last = order_by_clause372.tree.get();
            	            stream_order_by_clause.add(order_by_clause372.tree);
            	        }

            	    }
            	    break;

                }
            }

            EQUALS_OP373 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_model_rules_element5269);
            if  (this->hasException())
            {
                goto rulemodel_rules_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP373);


            this->followPush(FOLLOW_expression_in_model_rules_element5271);
            expression374=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_rules_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression374_last = expression374.tree.get();
                stream_expression.add(expression374.tree);
            }

            // AST REWRITE
            // elements: all_key, update_key, order_by_clause, upsert_key, expression, cell_assignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 547:9: -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? )
            {
            	// OracleDML.g:547:12: ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_RULE, "MODEL_RULE"), root_1);
            	// OracleDML.g:547:25: ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ASSIGN, EQUALS_OP373), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_cell_assignment.nextTree());
            	// OracleDML.g:547:62: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:547:82: ( update_key )?
            	if ( stream_update_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_key.nextTree());
            	}
            	stream_update_key.reset();

            	// OracleDML.g:547:94: ( upsert_key )?
            	if ( stream_upsert_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_upsert_key.nextTree());
            	}
            	stream_upsert_key.reset();

            	// OracleDML.g:547:106: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:547:115: ( order_by_clause )?
            	if ( stream_order_by_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_order_by_clause.nextTree());
            	}
            	stream_order_by_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_rules_elementEx; /* Prevent compiler warnings */
    rulemodel_rules_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_rules_element */

/**
 * $ANTLR start cell_assignment
 * OracleDML.g:550:1: cell_assignment : model_expression ;
 */
OracleDML::cell_assignment_return
OracleDML::cell_assignment()
{
    OracleDML::cell_assignment_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::model_expression_return model_expression375;
    ImplTraits::TreeTypePtr::pointer model_expression375_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:551:5: ( model_expression )
        // OracleDML.g:551:10: model_expression
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_model_expression_in_cell_assignment5330);
            model_expression375=model_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecell_assignmentEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, model_expression375.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecell_assignmentEx; /* Prevent compiler warnings */
    rulecell_assignmentEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cell_assignment */

/**
 * $ANTLR start model_iterate_clause
 * OracleDML.g:554:1: model_iterate_clause : iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )? -> ^( iterate_key ^( EXPR expression ) ( until_part )? ) ;
 */
OracleDML::model_iterate_clause_return
OracleDML::model_iterate_clause()
{
    OracleDML::model_iterate_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN377 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN379 = NULL;
    OracleDML_OracleDMLKeys::iterate_key_return iterate_key376;
    ImplTraits::TreeTypePtr::pointer iterate_key376_last = NULL;
    OracleDML::expression_return expression378;
    ImplTraits::TreeTypePtr::pointer expression378_last = NULL;
    OracleDML::until_part_return until_part380;
    ImplTraits::TreeTypePtr::pointer until_part380_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN377_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN379_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_iterate_key(get_psrstate()->get_treeAdaptor(), "rule iterate_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_until_part(get_psrstate()->get_treeAdaptor(), "rule until_part");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:555:5: ( iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )? -> ^( iterate_key ^( EXPR expression ) ( until_part )? ) )
        // OracleDML.g:555:10: iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )?
        {
            this->followPush(FOLLOW_iterate_key_in_model_iterate_clause5350);
            iterate_key376=iterate_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_iterate_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                iterate_key376_last = iterate_key376.tree.get();
                stream_iterate_key.add(iterate_key376.tree);
            }

            LEFT_PAREN377 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_model_iterate_clause5352);
            if  (this->hasException())
            {
                goto rulemodel_iterate_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN377);


            this->followPush(FOLLOW_expression_in_model_iterate_clause5354);
            expression378=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_iterate_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression378_last = expression378.tree.get();
                stream_expression.add(expression378.tree);
            }

            RIGHT_PAREN379 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_model_iterate_clause5356);
            if  (this->hasException())
            {
                goto rulemodel_iterate_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN379);


            // OracleDML.g:555:56: ( until_part )?
            {
                ANTLR_UINT32 alt130=2;
                {
                    ANTLR_UINT32 LA130_0 = this->LA(1);
                    if ( (LA130_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "UNTIL")))
                    {
                        alt130=1;
                    }
                }
                switch (alt130)
                {
            	case 1:
            	    // OracleDML.g:555:56: until_part
            	    {
            	        this->followPush(FOLLOW_until_part_in_model_iterate_clause5358);
            	        until_part380=until_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_iterate_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            until_part380_last = until_part380.tree.get();
            	            stream_until_part.add(until_part380.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression, iterate_key, until_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 556:9: -> ^( iterate_key ^( EXPR expression ) ( until_part )? )
            {
            	// OracleDML.g:556:11: ^( iterate_key ^( EXPR expression ) ( until_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_iterate_key.nextNode(), root_1);
            	// OracleDML.g:556:25: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:556:44: ( until_part )?
            	if ( stream_until_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_until_part.nextTree());
            	}
            	stream_until_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_iterate_clauseEx; /* Prevent compiler warnings */
    rulemodel_iterate_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_iterate_clause */

/**
 * $ANTLR start until_part
 * OracleDML.g:559:1: until_part : until_key LEFT_PAREN condition RIGHT_PAREN -> ^( until_key ^( LOGIC_EXPR condition ) ) ;
 */
OracleDML::until_part_return
OracleDML::until_part()
{
    OracleDML::until_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN382 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN384 = NULL;
    OracleDML_OracleDMLKeys::until_key_return until_key381;
    ImplTraits::TreeTypePtr::pointer until_key381_last = NULL;
    OracleDML::condition_return condition383;
    ImplTraits::TreeTypePtr::pointer condition383_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN382_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN384_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_until_key(get_psrstate()->get_treeAdaptor(), "rule until_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:560:5: ( until_key LEFT_PAREN condition RIGHT_PAREN -> ^( until_key ^( LOGIC_EXPR condition ) ) )
        // OracleDML.g:560:10: until_key LEFT_PAREN condition RIGHT_PAREN
        {
            this->followPush(FOLLOW_until_key_in_until_part5401);
            until_key381=until_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuntil_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                until_key381_last = until_key381.tree.get();
                stream_until_key.add(until_key381.tree);
            }

            LEFT_PAREN382 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_until_part5403);
            if  (this->hasException())
            {
                goto ruleuntil_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN382);


            this->followPush(FOLLOW_condition_in_until_part5405);
            condition383=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuntil_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition383_last = condition383.tree.get();
                stream_condition.add(condition383.tree);
            }

            RIGHT_PAREN384 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_until_part5407);
            if  (this->hasException())
            {
                goto ruleuntil_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN384);


            // AST REWRITE
            // elements: condition, until_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 561:9: -> ^( until_key ^( LOGIC_EXPR condition ) )
            {
            	// OracleDML.g:561:12: ^( until_key ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_until_key.nextNode(), root_1);
            	// OracleDML.g:561:24: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleuntil_partEx; /* Prevent compiler warnings */
    ruleuntil_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end until_part */

/**
 * $ANTLR start order_by_clause
 * OracleDML.g:564:1: order_by_clause : order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )* -> ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) ;
 */
OracleDML::order_by_clause_return
OracleDML::order_by_clause()
{
    OracleDML::order_by_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA389 = NULL;
    OracleDML_OracleDMLKeys::order_key_return order_key385;
    ImplTraits::TreeTypePtr::pointer order_key385_last = NULL;
    OracleDML_OracleDMLKeys::siblings_key_return siblings_key386;
    ImplTraits::TreeTypePtr::pointer siblings_key386_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key387;
    ImplTraits::TreeTypePtr::pointer by_key387_last = NULL;
    OracleDML::order_by_elements_return order_by_elements388;
    ImplTraits::TreeTypePtr::pointer order_by_elements388_last = NULL;
    OracleDML::order_by_elements_return order_by_elements390;
    ImplTraits::TreeTypePtr::pointer order_by_elements390_last = NULL;
    ImplTraits::TreeTypePtr COMMA389_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_key(get_psrstate()->get_treeAdaptor(), "rule order_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_siblings_key(get_psrstate()->get_treeAdaptor(), "rule siblings_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_by_elements(get_psrstate()->get_treeAdaptor(), "rule order_by_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:565:5: ( order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )* -> ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) )
        // OracleDML.g:565:10: order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )*
        {
            this->followPush(FOLLOW_order_key_in_order_by_clause5447);
            order_key385=order_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorder_by_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                order_key385_last = order_key385.tree.get();
                stream_order_key.add(order_key385.tree);
            }

            // OracleDML.g:565:20: ( siblings_key )?
            {
                ANTLR_UINT32 alt131=2;
                {
                    ANTLR_UINT32 LA131_0 = this->LA(1);
                    if ( (LA131_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SIBLINGS")))
                    {
                        alt131=1;
                    }
                }
                switch (alt131)
                {
            	case 1:
            	    // OracleDML.g:565:20: siblings_key
            	    {
            	        this->followPush(FOLLOW_siblings_key_in_order_by_clause5449);
            	        siblings_key386=siblings_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            siblings_key386_last = siblings_key386.tree.get();
            	            stream_siblings_key.add(siblings_key386.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_by_key_in_order_by_clause5452);
            by_key387=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorder_by_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                by_key387_last = by_key387.tree.get();
                stream_by_key.add(by_key387.tree);
            }

            this->followPush(FOLLOW_order_by_elements_in_order_by_clause5454);
            order_by_elements388=order_by_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorder_by_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                order_by_elements388_last = order_by_elements388.tree.get();
                stream_order_by_elements.add(order_by_elements388.tree);
            }

            // OracleDML.g:565:59: ( COMMA order_by_elements )*

            for (;;)
            {
                ANTLR_UINT32 alt132=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt132=1;
                	}
                    break;

                }

                switch (alt132)
                {
            	case 1:
            	    // OracleDML.g:565:60: COMMA order_by_elements
            	    {
            	        COMMA389 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_order_by_clause5457);
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA389);


            	        this->followPush(FOLLOW_order_by_elements_in_order_by_clause5459);
            	        order_by_elements390=order_by_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_by_elements390_last = order_by_elements390.tree.get();
            	            stream_order_by_elements.add(order_by_elements390.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop132;	/* break out of the loop */
            	    break;
                }
            }
            loop132: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: order_key, siblings_key, order_by_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 566:9: -> ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
            {
            	// OracleDML.g:566:12: ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_order_key.nextNode(), root_1);
            	// OracleDML.g:566:24: ( siblings_key )?
            	if ( stream_siblings_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_siblings_key.nextTree());
            	}
            	stream_siblings_key.reset();

            	// OracleDML.g:566:38: ^( ORDER_BY_ELEMENTS ( order_by_elements )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ORDER_BY_ELEMENTS, "ORDER_BY_ELEMENTS"), root_2);
            	if ( !(stream_order_by_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "order_by_elements empty" );
            		goto ruleorder_by_clauseEx;
            	}
            	while ( stream_order_by_elements.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_order_by_elements.nextTree());
            	}
            	stream_order_by_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleorder_by_clauseEx; /* Prevent compiler warnings */
    ruleorder_by_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end order_by_clause */

/**
 * $ANTLR start order_by_elements
 * OracleDML.g:569:1: order_by_elements : expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )? -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? ) ;
 */
OracleDML::order_by_elements_return
OracleDML::order_by_elements()
{
    OracleDML::order_by_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression391;
    ImplTraits::TreeTypePtr::pointer expression391_last = NULL;
    OracleDML_OracleDMLKeys::asc_key_return asc_key392;
    ImplTraits::TreeTypePtr::pointer asc_key392_last = NULL;
    OracleDML_OracleDMLKeys::desc_key_return desc_key393;
    ImplTraits::TreeTypePtr::pointer desc_key393_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key394;
    ImplTraits::TreeTypePtr::pointer nulls_key394_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key395;
    ImplTraits::TreeTypePtr::pointer first_key395_last = NULL;
    OracleDML_OracleDMLKeys::last_key_return last_key396;
    ImplTraits::TreeTypePtr::pointer last_key396_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_desc_key(get_psrstate()->get_treeAdaptor(), "rule desc_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_nulls_key(get_psrstate()->get_treeAdaptor(), "rule nulls_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_last_key(get_psrstate()->get_treeAdaptor(), "rule last_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_asc_key(get_psrstate()->get_treeAdaptor(), "rule asc_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_first_key(get_psrstate()->get_treeAdaptor(), "rule first_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:570:5: ( expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )? -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? ) )
        // OracleDML.g:570:10: expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )?
        {
            this->followPush(FOLLOW_expression_in_order_by_elements5505);
            expression391=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorder_by_elementsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression391_last = expression391.tree.get();
                stream_expression.add(expression391.tree);
            }

            // OracleDML.g:570:21: ( asc_key | desc_key )?
            {
                ANTLR_UINT32 alt133=3;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ASC:
                    	{
                    		alt133=1;
                    	}
                        break;
                    case SQL92_RESERVED_DESC:
                    	{
                    		alt133=2;
                    	}
                        break;
                }

                switch (alt133)
                {
            	case 1:
            	    // OracleDML.g:570:22: asc_key
            	    {
            	        this->followPush(FOLLOW_asc_key_in_order_by_elements5508);
            	        asc_key392=asc_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            asc_key392_last = asc_key392.tree.get();
            	            stream_asc_key.add(asc_key392.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:570:30: desc_key
            	    {
            	        this->followPush(FOLLOW_desc_key_in_order_by_elements5510);
            	        desc_key393=desc_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            desc_key393_last = desc_key393.tree.get();
            	            stream_desc_key.add(desc_key393.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:570:41: ( nulls_key ( first_key | last_key ) )?
            {
                ANTLR_UINT32 alt135=2;
                {
                    ANTLR_UINT32 LA135_0 = this->LA(1);
                    if ( (LA135_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "RANGE"))||((toUpper(LT(1)->getText()) == "ROWS"))||((toUpper(LT(1)->getText()) == "LOG"))||((toUpper(LT(1)->getText()) == "NULLS")))))
                    {
                        {
                            ANTLR_UINT32 LA135_1 = this->LA(2);
                            if ( (LA135_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "RANGE"))||((toUpper(LT(1)->getText()) == "ROWS"))||((toUpper(LT(1)->getText()) == "LOG"))||((toUpper(LT(1)->getText()) == "NULLS")))))
                            {
                                {
                                    ANTLR_UINT32 LA135_3 = this->LA(3);
                                    if ( ((toUpper(LT(1)->getText()) == "NULLS")))
                                    {
                                        alt135=1;
                                    }
                                }
                            }
                        }
                    }
                }
                switch (alt135)
                {
            	case 1:
            	    // OracleDML.g:570:42: nulls_key ( first_key | last_key )
            	    {
            	        this->followPush(FOLLOW_nulls_key_in_order_by_elements5515);
            	        nulls_key394=nulls_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            nulls_key394_last = nulls_key394.tree.get();
            	            stream_nulls_key.add(nulls_key394.tree);
            	        }

            	        // OracleDML.g:570:52: ( first_key | last_key )
            	        {
            	            ANTLR_UINT32 alt134=2;
            	            {
            	                ANTLR_UINT32 LA134_0 = this->LA(1);
            	                if ( (LA134_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "FIRST"))||((toUpper(LT(1)->getText()) == "LAST")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA134_1 = this->LA(2);
            	                        if ( ((toUpper(LT(1)->getText()) == "FIRST")))
            	                        {
            	                            alt134=1;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "LAST")))
            	                        {
            	                            alt134=2;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return retval;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 134 );
            	                            ex->set_state( 1 );


            	                            goto ruleorder_by_elementsEx;

            	                        }
            	                    }
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 134 );
            	                    ex->set_state( 0 );


            	                    goto ruleorder_by_elementsEx;

            	                }
            	            }
            	            switch (alt134)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:570:53: first_key
            	        	    {
            	        	        this->followPush(FOLLOW_first_key_in_order_by_elements5518);
            	        	        first_key395=first_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleorder_by_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            first_key395_last = first_key395.tree.get();
            	        	            stream_first_key.add(first_key395.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:570:63: last_key
            	        	    {
            	        	        this->followPush(FOLLOW_last_key_in_order_by_elements5520);
            	        	        last_key396=last_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleorder_by_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            last_key396_last = last_key396.tree.get();
            	        	            stream_last_key.add(last_key396.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: asc_key, last_key, expression, nulls_key, first_key, desc_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 571:9: -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? )
            {
            	// OracleDML.g:571:12: ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ORDER_BY_ELEMENT, "ORDER_BY_ELEMENT"), root_1);
            	// OracleDML.g:571:31: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:571:50: ( asc_key )?
            	if ( stream_asc_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_asc_key.nextTree());
            	}
            	stream_asc_key.reset();

            	// OracleDML.g:571:59: ( desc_key )?
            	if ( stream_desc_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_desc_key.nextTree());
            	}
            	stream_desc_key.reset();

            	// OracleDML.g:571:69: ( nulls_key )?
            	if ( stream_nulls_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_nulls_key.nextTree());
            	}
            	stream_nulls_key.reset();

            	// OracleDML.g:571:80: ( first_key )?
            	if ( stream_first_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_first_key.nextTree());
            	}
            	stream_first_key.reset();

            	// OracleDML.g:571:91: ( last_key )?
            	if ( stream_last_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_last_key.nextTree());
            	}
            	stream_last_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleorder_by_elementsEx; /* Prevent compiler warnings */
    ruleorder_by_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end order_by_elements */

/**
 * $ANTLR start for_update_clause
 * OracleDML.g:574:1: for_update_clause : for_key update_key ( for_update_of_part )? ( for_update_options )? -> ^( for_key update_key ( for_update_of_part )? ( for_update_options )? ) ;
 */
OracleDML::for_update_clause_return
OracleDML::for_update_clause()
{
    OracleDML::for_update_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::for_key_return for_key397;
    ImplTraits::TreeTypePtr::pointer for_key397_last = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key398;
    ImplTraits::TreeTypePtr::pointer update_key398_last = NULL;
    OracleDML::for_update_of_part_return for_update_of_part399;
    ImplTraits::TreeTypePtr::pointer for_update_of_part399_last = NULL;
    OracleDML::for_update_options_return for_update_options400;
    ImplTraits::TreeTypePtr::pointer for_update_options400_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_for_update_of_part(get_psrstate()->get_treeAdaptor(), "rule for_update_of_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_update_options(get_psrstate()->get_treeAdaptor(), "rule for_update_options");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_key(get_psrstate()->get_treeAdaptor(), "rule update_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:575:5: ( for_key update_key ( for_update_of_part )? ( for_update_options )? -> ^( for_key update_key ( for_update_of_part )? ( for_update_options )? ) )
        // OracleDML.g:575:10: for_key update_key ( for_update_of_part )? ( for_update_options )?
        {
            this->followPush(FOLLOW_for_key_in_for_update_clause5578);
            for_key397=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key397_last = for_key397.tree.get();
                stream_for_key.add(for_key397.tree);
            }

            this->followPush(FOLLOW_update_key_in_for_update_clause5580);
            update_key398=update_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                update_key398_last = update_key398.tree.get();
                stream_update_key.add(update_key398.tree);
            }

            // OracleDML.g:575:29: ( for_update_of_part )?
            {
                ANTLR_UINT32 alt136=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_OF:
                    	{
                    		alt136=1;
                    	}
                        break;
                }

                switch (alt136)
                {
            	case 1:
            	    // OracleDML.g:575:29: for_update_of_part
            	    {
            	        this->followPush(FOLLOW_for_update_of_part_in_for_update_clause5582);
            	        for_update_of_part399=for_update_of_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefor_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_update_of_part399_last = for_update_of_part399.tree.get();
            	            stream_for_update_of_part.add(for_update_of_part399.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:575:49: ( for_update_options )?
            {
                ANTLR_UINT32 alt137=2;
                {
                    ANTLR_UINT32 LA137_0 = this->LA(1);
                    if ( (LA137_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT"))||((toUpper(LT(1)->getText()) == "LOG")))))
                    {
                        {
                            ANTLR_UINT32 LA137_1 = this->LA(2);
                            if ( (LA137_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT"))||((toUpper(LT(1)->getText()) == "LOG")))))
                            {
                                {
                                    ANTLR_UINT32 LA137_4 = this->LA(3);
                                    if ( ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT")))))
                                    {
                                        alt137=1;
                                    }
                                }
                            }
                            else if ( (LA137_1 == APPROXIMATE_NUM_LIT || LA137_1 == BINDVAR || ((LA137_1 >= CHAR_STRING) && (LA137_1 <= CHAR_STRING_PERL)) || LA137_1 == COLON || LA137_1 == DELIMITED_ID || LA137_1 == EXACT_NUM_LIT || LA137_1 == INTRODUCER || LA137_1 == LEFT_PAREN || LA137_1 == MINUS_SIGN || LA137_1 == NATIONAL_CHAR_STRING_LIT || ((LA137_1 >= PLSQL_NON_RESERVED_CAST) && (LA137_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA137_1 == PLUS_SIGN || LA137_1 == SQL92_RESERVED_ALL || LA137_1 == SQL92_RESERVED_ANY || LA137_1 == SQL92_RESERVED_CASE || ((LA137_1 >= SQL92_RESERVED_CURSOR) && (LA137_1 <= SQL92_RESERVED_DATE)) || LA137_1 == SQL92_RESERVED_DEFAULT || LA137_1 == SQL92_RESERVED_DISTINCT || ((LA137_1 >= SQL92_RESERVED_EXISTS) && (LA137_1 <= SQL92_RESERVED_FALSE)) || ((LA137_1 >= SQL92_RESERVED_NOT) && (LA137_1 <= SQL92_RESERVED_NULL)) || LA137_1 == SQL92_RESERVED_PRIOR || LA137_1 == SQL92_RESERVED_TRUE || LA137_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "WAIT")))
                            {
                                alt137=1;
                            }
                        }
                    }
                    else if ( (LA137_0 == PLSQL_RESERVED_NOWAIT))
                    {
                        alt137=1;
                    }
                }
                switch (alt137)
                {
            	case 1:
            	    // OracleDML.g:575:49: for_update_options
            	    {
            	        this->followPush(FOLLOW_for_update_options_in_for_update_clause5585);
            	        for_update_options400=for_update_options();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefor_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_update_options400_last = for_update_options400.tree.get();
            	            stream_for_update_options.add(for_update_options400.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: update_key, for_update_of_part, for_key, for_update_options
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 576:9: -> ^( for_key update_key ( for_update_of_part )? ( for_update_options )? )
            {
            	// OracleDML.g:576:12: ^( for_key update_key ( for_update_of_part )? ( for_update_options )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_for_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_key.nextTree());
            	// OracleDML.g:576:33: ( for_update_of_part )?
            	if ( stream_for_update_of_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_for_update_of_part.nextTree());
            	}
            	stream_for_update_of_part.reset();

            	// OracleDML.g:576:53: ( for_update_options )?
            	if ( stream_for_update_options.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_for_update_options.nextTree());
            	}
            	stream_for_update_options.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_update_clauseEx; /* Prevent compiler warnings */
    rulefor_update_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_update_clause */

/**
 * $ANTLR start for_update_of_part
 * OracleDML.g:579:1: for_update_of_part : of_key ^ column_name ( COMMA ! column_name )* ;
 */
OracleDML::for_update_of_part_return
OracleDML::for_update_of_part()
{
    OracleDML::for_update_of_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA403 = NULL;
    OracleDML_OracleDMLKeys::of_key_return of_key401;
    ImplTraits::TreeTypePtr::pointer of_key401_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name402;
    ImplTraits::TreeTypePtr::pointer column_name402_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name404;
    ImplTraits::TreeTypePtr::pointer column_name404_last = NULL;
    ImplTraits::TreeTypePtr COMMA403_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:580:5: ( of_key ^ column_name ( COMMA ! column_name )* )
        // OracleDML.g:580:10: of_key ^ column_name ( COMMA ! column_name )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_of_key_in_for_update_of_part5628);
            of_key401=of_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_update_of_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(of_key401.tree, root_0);

            this->followPush(FOLLOW_column_name_in_for_update_of_part5631);
            column_name402=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_update_of_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name402.tree);


            // OracleDML.g:580:30: ( COMMA ! column_name )*

            for (;;)
            {
                ANTLR_UINT32 alt138=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt138=1;
                	}
                    break;

                }

                switch (alt138)
                {
            	case 1:
            	    // OracleDML.g:580:31: COMMA ! column_name
            	    {
            	        COMMA403 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_for_update_of_part5634);
            	        if  (this->hasException())
            	        {
            	            goto rulefor_update_of_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_column_name_in_for_update_of_part5637);
            	        column_name404=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefor_update_of_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name404.tree);


            	    }
            	    break;

            	default:
            	    goto loop138;	/* break out of the loop */
            	    break;
                }
            }
            loop138: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_update_of_partEx; /* Prevent compiler warnings */
    rulefor_update_of_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_update_of_part */

/**
 * $ANTLR start for_update_options
 * OracleDML.g:583:1: for_update_options : ( skip_key locked_key !| nowait_key | wait_key expression -> ^( wait_key ^( EXPR expression ) ) );
 */
OracleDML::for_update_options_return
OracleDML::for_update_options()
{
    OracleDML::for_update_options_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::skip_key_return skip_key405;
    ImplTraits::TreeTypePtr::pointer skip_key405_last = NULL;
    OracleDML_OracleDMLKeys::locked_key_return locked_key406;
    ImplTraits::TreeTypePtr::pointer locked_key406_last = NULL;
    OracleDML_OracleDMLKeys::nowait_key_return nowait_key407;
    ImplTraits::TreeTypePtr::pointer nowait_key407_last = NULL;
    OracleDML_OracleDMLKeys::wait_key_return wait_key408;
    ImplTraits::TreeTypePtr::pointer wait_key408_last = NULL;
    OracleDML::expression_return expression409;
    ImplTraits::TreeTypePtr::pointer expression409_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_wait_key(get_psrstate()->get_treeAdaptor(), "rule wait_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:584:5: ( skip_key locked_key !| nowait_key | wait_key expression -> ^( wait_key ^( EXPR expression ) ) )

            ANTLR_UINT32 alt139;

            alt139=3;

            {
                ANTLR_UINT32 LA139_0 = this->LA(1);
                if ( (LA139_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT")))))
                {
                    {
                        ANTLR_UINT32 LA139_1 = this->LA(2);
                        if ( (LA139_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT")))))
                        {
                            {
                                ANTLR_UINT32 LA139_3 = this->LA(3);
                                if ( ((toUpper(LT(1)->getText()) == "SKIP")))
                                {
                                    alt139=1;
                                }
                                else if ( ((toUpper(LT(1)->getText()) == "WAIT")))
                                {
                                    alt139=3;
                                }
                                else
                                {
                                    if (this->get_backtracking()>0)
                                    {
                                        this->set_failedflag( true );
                                        return retval;
                                    }


                                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                    ex->set_decisionNum( 139 );
                                    ex->set_state( 3 );


                                    goto rulefor_update_optionsEx;

                                }
                            }
                        }
                        else if ( (LA139_1 == APPROXIMATE_NUM_LIT || LA139_1 == BINDVAR || ((LA139_1 >= CHAR_STRING) && (LA139_1 <= CHAR_STRING_PERL)) || LA139_1 == COLON || LA139_1 == DELIMITED_ID || LA139_1 == EXACT_NUM_LIT || LA139_1 == INTRODUCER || LA139_1 == LEFT_PAREN || LA139_1 == MINUS_SIGN || LA139_1 == NATIONAL_CHAR_STRING_LIT || ((LA139_1 >= PLSQL_NON_RESERVED_CAST) && (LA139_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA139_1 == PLUS_SIGN || LA139_1 == SQL92_RESERVED_ALL || LA139_1 == SQL92_RESERVED_ANY || LA139_1 == SQL92_RESERVED_CASE || ((LA139_1 >= SQL92_RESERVED_CURSOR) && (LA139_1 <= SQL92_RESERVED_DATE)) || LA139_1 == SQL92_RESERVED_DEFAULT || LA139_1 == SQL92_RESERVED_DISTINCT || ((LA139_1 >= SQL92_RESERVED_EXISTS) && (LA139_1 <= SQL92_RESERVED_FALSE)) || ((LA139_1 >= SQL92_RESERVED_NOT) && (LA139_1 <= SQL92_RESERVED_NULL)) || LA139_1 == SQL92_RESERVED_PRIOR || LA139_1 == SQL92_RESERVED_TRUE || LA139_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "WAIT")))
                        {
                            alt139=3;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 139 );
                            ex->set_state( 1 );


                            goto rulefor_update_optionsEx;

                        }
                    }
                }
                else if ( (LA139_0 == PLSQL_RESERVED_NOWAIT))
                {
                    alt139=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 139 );
                    ex->set_state( 0 );


                    goto rulefor_update_optionsEx;

                }
            }
            switch (alt139)
            {
        	case 1:
        	    // OracleDML.g:584:10: skip_key locked_key !
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_skip_key_in_for_update_options5659);
        	        skip_key405=skip_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, skip_key405.tree);


        	        this->followPush(FOLLOW_locked_key_in_for_update_options5661);
        	        locked_key406=locked_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:585:10: nowait_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_nowait_key_in_for_update_options5673);
        	        nowait_key407=nowait_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nowait_key407.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:586:10: wait_key expression
        	    {
        	        this->followPush(FOLLOW_wait_key_in_for_update_options5684);
        	        wait_key408=wait_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            wait_key408_last = wait_key408.tree.get();
        	            stream_wait_key.add(wait_key408.tree);
        	        }

        	        this->followPush(FOLLOW_expression_in_for_update_options5686);
        	        expression409=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression409_last = expression409.tree.get();
        	            stream_expression.add(expression409.tree);
        	        }

        	        // AST REWRITE
        	        // elements: wait_key, expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 586:30: -> ^( wait_key ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:586:33: ^( wait_key ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_wait_key.nextNode(), root_1);
        	        	// OracleDML.g:586:44: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_update_optionsEx; /* Prevent compiler warnings */
    rulefor_update_optionsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_update_options */

/**
 * $ANTLR start update_statement
 * OracleDML.g:591:1: update_statement : update_key ^ general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ;
 */
OracleDML::update_statement_return
OracleDML::update_statement()
{
    OracleDML::update_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::update_key_return update_key410;
    ImplTraits::TreeTypePtr::pointer update_key410_last = NULL;
    OracleDML::general_table_ref_return general_table_ref411;
    ImplTraits::TreeTypePtr::pointer general_table_ref411_last = NULL;
    OracleDML::update_set_clause_return update_set_clause412;
    ImplTraits::TreeTypePtr::pointer update_set_clause412_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause413;
    ImplTraits::TreeTypePtr::pointer where_clause413_last = NULL;
    OracleDML::static_returning_clause_return static_returning_clause414;
    ImplTraits::TreeTypePtr::pointer static_returning_clause414_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause415;
    ImplTraits::TreeTypePtr::pointer error_logging_clause415_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:592:5: ( update_key ^ general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
        // OracleDML.g:592:10: update_key ^ general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_update_key_in_update_statement5720);
            update_key410=update_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleupdate_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(update_key410.tree, root_0);

            this->followPush(FOLLOW_general_table_ref_in_update_statement5723);
            general_table_ref411=general_table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleupdate_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_table_ref411.tree);


            this->followPush(FOLLOW_update_set_clause_in_update_statement5733);
            update_set_clause412=update_set_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleupdate_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, update_set_clause412.tree);


            // OracleDML.g:594:9: ( where_clause )?
            {
                ANTLR_UINT32 alt140=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt140=1;
                    	}
                        break;
                }

                switch (alt140)
                {
            	case 1:
            	    // OracleDML.g:594:9: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_update_statement5743);
            	        where_clause413=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, where_clause413.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:594:23: ( static_returning_clause )?
            {
                ANTLR_UINT32 alt141=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA141_1 = this->LA(2);
                    		    if ( ((((toUpper(LT(1)->getText()) == "RETURN"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
                    		    {
                    		        alt141=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt141)
                {
            	case 1:
            	    // OracleDML.g:594:23: static_returning_clause
            	    {
            	        this->followPush(FOLLOW_static_returning_clause_in_update_statement5746);
            	        static_returning_clause414=static_returning_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, static_returning_clause414.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:594:48: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt142=2;
                {
                    ANTLR_UINT32 LA142_0 = this->LA(1);
                    if ( (LA142_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt142=1;
                    }
                }
                switch (alt142)
                {
            	case 1:
            	    // OracleDML.g:594:48: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_update_statement5749);
            	        error_logging_clause415=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, error_logging_clause415.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleupdate_statementEx; /* Prevent compiler warnings */
    ruleupdate_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end update_statement */

/**
 * $ANTLR start update_set_clause
 * OracleDML.g:598:1: update_set_clause : set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression ) -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ ) -> ^( set_key ^( value_key id ^( EXPR expression ) ) ) ;
 */
OracleDML::update_set_clause_return
OracleDML::update_set_clause()
{
    OracleDML::update_set_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA418 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN421 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN423 = NULL;
    ImplTraits::CommonTokenType const* EQUALS_OP424 = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key416;
    ImplTraits::TreeTypePtr::pointer set_key416_last = NULL;
    OracleDML::column_based_update_set_clause_return column_based_update_set_clause417;
    ImplTraits::TreeTypePtr::pointer column_based_update_set_clause417_last = NULL;
    OracleDML::column_based_update_set_clause_return column_based_update_set_clause419;
    ImplTraits::TreeTypePtr::pointer column_based_update_set_clause419_last = NULL;
    OracleDML_OracleDMLKeys::value_key_return value_key420;
    ImplTraits::TreeTypePtr::pointer value_key420_last = NULL;
    OracleDML_OracleDMLCommons::id_return id422;
    ImplTraits::TreeTypePtr::pointer id422_last = NULL;
    OracleDML::expression_return expression425;
    ImplTraits::TreeTypePtr::pointer expression425_last = NULL;
    ImplTraits::TreeTypePtr COMMA418_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN421_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN423_tree;
    ImplTraits::TreeTypePtr EQUALS_OP424_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_id(get_psrstate()->get_treeAdaptor(), "rule id");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_value_key(get_psrstate()->get_treeAdaptor(), "rule value_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_based_update_set_clause(get_psrstate()->get_treeAdaptor(), "rule column_based_update_set_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_set_key(get_psrstate()->get_treeAdaptor(), "rule set_key");

    /* Initialize rule variables
     */

        int mode = 1;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:600:5: ( set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression ) -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ ) -> ^( set_key ^( value_key id ^( EXPR expression ) ) ) )
        // OracleDML.g:600:10: set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression )
        {
            this->followPush(FOLLOW_set_key_in_update_set_clause5779);
            set_key416=set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleupdate_set_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                set_key416_last = set_key416.tree.get();
                stream_set_key.add(set_key416.tree);
            }

            // OracleDML.g:601:5: ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression )
            {
                ANTLR_UINT32 alt144=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case LEFT_PAREN:
                	{
                		alt144=1;
                	}
                    break;
                case REGULAR_ID:
                	{
                		switch ( this->LA(2) )
                		{
                		case EQUALS_OP:
                		case PERIOD:
                			{
                				alt144=1;
                			}
                		    break;
                		case LEFT_PAREN:
                			{
                				alt144=2;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return retval;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 144 );
                		    ex->set_state( 2 );


                		    goto ruleupdate_set_clauseEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 144 );
                    ex->set_state( 0 );


                    goto ruleupdate_set_clauseEx;

                }

                switch (alt144)
                {
            	case 1:
            	    // OracleDML.g:601:10: column_based_update_set_clause ( COMMA column_based_update_set_clause )*
            	    {
            	        this->followPush(FOLLOW_column_based_update_set_clause_in_update_set_clause5790);
            	        column_based_update_set_clause417=column_based_update_set_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_based_update_set_clause417_last = column_based_update_set_clause417.tree.get();
            	            stream_column_based_update_set_clause.add(column_based_update_set_clause417.tree);
            	        }

            	        // OracleDML.g:601:41: ( COMMA column_based_update_set_clause )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt143=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt143=1;
            	            	}
            	                break;

            	            }

            	            switch (alt143)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:601:42: COMMA column_based_update_set_clause
            	        	    {
            	        	        COMMA418 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_update_set_clause5793);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleupdate_set_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA418);


            	        	        this->followPush(FOLLOW_column_based_update_set_clause_in_update_set_clause5795);
            	        	        column_based_update_set_clause419=column_based_update_set_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleupdate_set_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_based_update_set_clause419_last = column_based_update_set_clause419.tree.get();
            	        	            stream_column_based_update_set_clause.add(column_based_update_set_clause419.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop143;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop143: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:602:10: value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression
            	    {
            	        this->followPush(FOLLOW_value_key_in_update_set_clause5808);
            	        value_key420=value_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            value_key420_last = value_key420.tree.get();
            	            stream_value_key.add(value_key420.tree);
            	        }

            	        LEFT_PAREN421 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_update_set_clause5810);
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN421);


            	        this->followPush(FOLLOW_id_in_update_set_clause5812);
            	        id422=id(T_UNKNOWN, T_USE);

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            id422_last = id422.tree.get();
            	            stream_id.add(id422.tree);
            	        }

            	        RIGHT_PAREN423 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_update_set_clause5815);
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN423);


            	        EQUALS_OP424 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_update_set_clause5817);
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP424);


            	        this->followPush(FOLLOW_expression_in_update_set_clause5819);
            	        expression425=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression425_last = expression425.tree.get();
            	            stream_expression.add(expression425.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 0;
            	        }


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: value_key, id, set_key, column_based_update_set_clause, set_key, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 604:9: -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ )
            if (mode == 1) {
            	// OracleDML.g:604:24: ^( set_key ( column_based_update_set_clause )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_set_key.nextNode(), root_1);
            	if ( !(stream_column_based_update_set_clause.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_based_update_set_clause empty" );
            		goto ruleupdate_set_clauseEx;
            	}
            	while ( stream_column_based_update_set_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_based_update_set_clause.nextTree());
            	}
            	stream_column_based_update_set_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 605:9: -> ^( set_key ^( value_key id ^( EXPR expression ) ) )
            {
            	// OracleDML.g:605:12: ^( set_key ^( value_key id ^( EXPR expression ) ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_set_key.nextNode(), root_1);
            	// OracleDML.g:605:22: ^( value_key id ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_value_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_id.nextTree());
            	// OracleDML.g:605:37: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleupdate_set_clauseEx; /* Prevent compiler warnings */
    ruleupdate_set_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end update_set_clause */

/**
 * $ANTLR start column_based_update_set_clause
 * OracleDML.g:608:1: column_based_update_set_clause : ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery ) );
 */
OracleDML::column_based_update_set_clause_return
OracleDML::column_based_update_set_clause()
{
    OracleDML::column_based_update_set_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP427 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN429 = NULL;
    ImplTraits::CommonTokenType const* COMMA431 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN433 = NULL;
    ImplTraits::CommonTokenType const* EQUALS_OP434 = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name426;
    ImplTraits::TreeTypePtr::pointer column_name426_last = NULL;
    OracleDML::expression_return expression428;
    ImplTraits::TreeTypePtr::pointer expression428_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name430;
    ImplTraits::TreeTypePtr::pointer column_name430_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name432;
    ImplTraits::TreeTypePtr::pointer column_name432_last = NULL;
    OracleDML::subquery_return subquery435;
    ImplTraits::TreeTypePtr::pointer subquery435_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP427_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN429_tree;
    ImplTraits::TreeTypePtr COMMA431_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN433_tree;
    ImplTraits::TreeTypePtr EQUALS_OP434_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:609:5: ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery ) )

            ANTLR_UINT32 alt146;

            alt146=2;

            switch ( this->LA(1) )
            {
            case DELIMITED_ID:
            case INTRODUCER:
            case REGULAR_ID:
            	{
            		alt146=1;
            	}
                break;
            case LEFT_PAREN:
            	{
            		alt146=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 146 );
                ex->set_state( 0 );


                goto rulecolumn_based_update_set_clauseEx;

            }

            switch (alt146)
            {
        	case 1:
        	    // OracleDML.g:609:10: column_name EQUALS_OP expression
        	    {
        	        this->followPush(FOLLOW_column_name_in_column_based_update_set_clause5891);
        	        column_name426=column_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            column_name426_last = column_name426.tree.get();
        	            stream_column_name.add(column_name426.tree);
        	        }

        	        EQUALS_OP427 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_column_based_update_set_clause5893);
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP427);


        	        this->followPush(FOLLOW_expression_in_column_based_update_set_clause5895);
        	        expression428=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression428_last = expression428.tree.get();
        	            stream_expression.add(expression428.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression, column_name
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 609:43: -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:609:46: ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ASSIGN, EQUALS_OP427), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
        	        	// OracleDML.g:609:79: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:610:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery
        	    {
        	        LEFT_PAREN429 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5921);
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN429);


        	        this->followPush(FOLLOW_column_name_in_column_based_update_set_clause5923);
        	        column_name430=column_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            column_name430_last = column_name430.tree.get();
        	            stream_column_name.add(column_name430.tree);
        	        }

        	        // OracleDML.g:610:33: ( COMMA column_name )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt145=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt145=1;
        	            	}
        	                break;

        	            }

        	            switch (alt145)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:610:34: COMMA column_name
        	        	    {
        	        	        COMMA431 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_column_based_update_set_clause5926);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecolumn_based_update_set_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA431);


        	        	        this->followPush(FOLLOW_column_name_in_column_based_update_set_clause5928);
        	        	        column_name432=column_name();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecolumn_based_update_set_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            column_name432_last = column_name432.tree.get();
        	        	            stream_column_name.add(column_name432.tree);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop145;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop145: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN433 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5932);
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN433);


        	        EQUALS_OP434 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_column_based_update_set_clause5934);
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP434);


        	        this->followPush(FOLLOW_subquery_in_column_based_update_set_clause5936);
        	        subquery435=subquery();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            subquery435_last = subquery435.tree.get();
        	            stream_subquery.add(subquery435.tree);
        	        }

        	        // AST REWRITE
        	        // elements: column_name, subquery
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 610:85: -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery )
        	        {
        	        	// OracleDML.g:610:88: ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ASSIGN, EQUALS_OP434), root_1);
        	        	if ( !(stream_column_name.hasNext()) ) {
        	        		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
        	        		goto rulecolumn_based_update_set_clauseEx;
        	        	}
        	        	while ( stream_column_name.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
        	        	}
        	        	stream_column_name.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulecolumn_based_update_set_clauseEx; /* Prevent compiler warnings */
    rulecolumn_based_update_set_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end column_based_update_set_clause */

/**
 * $ANTLR start delete_statement
 * OracleDML.g:615:1: delete_statement : delete_key ^ ( from_key !)? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ;
 */
OracleDML::delete_statement_return
OracleDML::delete_statement()
{
    OracleDML::delete_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::delete_key_return delete_key436;
    ImplTraits::TreeTypePtr::pointer delete_key436_last = NULL;
    OracleDML_OracleDMLKeys::from_key_return from_key437;
    ImplTraits::TreeTypePtr::pointer from_key437_last = NULL;
    OracleDML::general_table_ref_return general_table_ref438;
    ImplTraits::TreeTypePtr::pointer general_table_ref438_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause439;
    ImplTraits::TreeTypePtr::pointer where_clause439_last = NULL;
    OracleDML::static_returning_clause_return static_returning_clause440;
    ImplTraits::TreeTypePtr::pointer static_returning_clause440_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause441;
    ImplTraits::TreeTypePtr::pointer error_logging_clause441_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:616:5: ( delete_key ^ ( from_key !)? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
        // OracleDML.g:616:10: delete_key ^ ( from_key !)? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_delete_key_in_delete_statement5970);
            delete_key436=delete_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledelete_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(delete_key436.tree, root_0);

            // OracleDML.g:616:30: ( from_key !)?
            {
                ANTLR_UINT32 alt147=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_FROM:
                    	{
                    		alt147=1;
                    	}
                        break;
                }

                switch (alt147)
                {
            	case 1:
            	    // OracleDML.g:616:30: from_key !
            	    {
            	        this->followPush(FOLLOW_from_key_in_delete_statement5973);
            	        from_key437=from_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelete_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_general_table_ref_in_delete_statement5985);
            general_table_ref438=general_table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledelete_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_table_ref438.tree);


            // OracleDML.g:618:9: ( where_clause )?
            {
                ANTLR_UINT32 alt148=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt148=1;
                    	}
                        break;
                }

                switch (alt148)
                {
            	case 1:
            	    // OracleDML.g:618:9: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_delete_statement5995);
            	        where_clause439=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelete_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, where_clause439.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:618:23: ( static_returning_clause )?
            {
                ANTLR_UINT32 alt149=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA149_1 = this->LA(2);
                    		    if ( ((((toUpper(LT(1)->getText()) == "RETURN"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
                    		    {
                    		        alt149=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt149)
                {
            	case 1:
            	    // OracleDML.g:618:23: static_returning_clause
            	    {
            	        this->followPush(FOLLOW_static_returning_clause_in_delete_statement5998);
            	        static_returning_clause440=static_returning_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelete_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, static_returning_clause440.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:618:48: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt150=2;
                {
                    ANTLR_UINT32 LA150_0 = this->LA(1);
                    if ( (LA150_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt150=1;
                    }
                }
                switch (alt150)
                {
            	case 1:
            	    // OracleDML.g:618:48: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_delete_statement6001);
            	        error_logging_clause441=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelete_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, error_logging_clause441.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruledelete_statementEx; /* Prevent compiler warnings */
    ruledelete_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end delete_statement */

/**
 * $ANTLR start insert_statement
 * OracleDML.g:621:1: insert_statement : insert_key ^ ( single_table_insert | multi_table_insert ) ;
 */
OracleDML::insert_statement_return
OracleDML::insert_statement()
{
    OracleDML::insert_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::insert_key_return insert_key442;
    ImplTraits::TreeTypePtr::pointer insert_key442_last = NULL;
    OracleDML::single_table_insert_return single_table_insert443;
    ImplTraits::TreeTypePtr::pointer single_table_insert443_last = NULL;
    OracleDML::multi_table_insert_return multi_table_insert444;
    ImplTraits::TreeTypePtr::pointer multi_table_insert444_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:622:5: ( insert_key ^ ( single_table_insert | multi_table_insert ) )
        // OracleDML.g:622:10: insert_key ^ ( single_table_insert | multi_table_insert )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_insert_key_in_insert_statement6022);
            insert_key442=insert_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinsert_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(insert_key442.tree, root_0);

            // OracleDML.g:623:5: ( single_table_insert | multi_table_insert )
            {
                ANTLR_UINT32 alt151=2;
                {
                    ANTLR_UINT32 LA151_0 = this->LA(1);
                    if ( (LA151_0 == SQL92_RESERVED_INTO))
                    {
                        alt151=1;
                    }
                    else if ( (LA151_0 == SQL92_RESERVED_ALL))
                    {
                        alt151=2;
                    }
                    else if ( (LA151_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "FIRST")))
                    {
                        alt151=2;
                    }
                    else if ( (LA151_0 == SQL92_RESERVED_WHEN))
                    {
                        alt151=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 151 );
                        ex->set_state( 0 );


                        goto ruleinsert_statementEx;

                    }
                }
                switch (alt151)
                {
            	case 1:
            	    // OracleDML.g:623:10: single_table_insert
            	    {
            	        this->followPush(FOLLOW_single_table_insert_in_insert_statement6034);
            	        single_table_insert443=single_table_insert();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, single_table_insert443.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:624:10: multi_table_insert
            	    {
            	        this->followPush(FOLLOW_multi_table_insert_in_insert_statement6045);
            	        multi_table_insert444=multi_table_insert();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multi_table_insert444.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleinsert_statementEx; /* Prevent compiler warnings */
    ruleinsert_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end insert_statement */

/**
 * $ANTLR start single_table_insert
 * OracleDML.g:630:1: single_table_insert : insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? ) ;
 */
OracleDML::single_table_insert_return
OracleDML::single_table_insert()
{
    OracleDML::single_table_insert_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::insert_into_clause_return insert_into_clause445;
    ImplTraits::TreeTypePtr::pointer insert_into_clause445_last = NULL;
    OracleDML::values_clause_return values_clause446;
    ImplTraits::TreeTypePtr::pointer values_clause446_last = NULL;
    OracleDML::static_returning_clause_return static_returning_clause447;
    ImplTraits::TreeTypePtr::pointer static_returning_clause447_last = NULL;
    OracleDML::select_statement_return select_statement448;
    ImplTraits::TreeTypePtr::pointer select_statement448_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause449;
    ImplTraits::TreeTypePtr::pointer error_logging_clause449_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_static_returning_clause(get_psrstate()->get_treeAdaptor(), "rule static_returning_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_values_clause(get_psrstate()->get_treeAdaptor(), "rule values_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_insert_into_clause(get_psrstate()->get_treeAdaptor(), "rule insert_into_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_clause(get_psrstate()->get_treeAdaptor(), "rule error_logging_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:631:5: ( insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? ) )
        // OracleDML.g:631:10: insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )?
        {
            this->followPush(FOLLOW_insert_into_clause_in_single_table_insert6073);
            insert_into_clause445=insert_into_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesingle_table_insertEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                insert_into_clause445_last = insert_into_clause445.tree.get();
                stream_insert_into_clause.add(insert_into_clause445.tree);
            }

            // OracleDML.g:632:5: ( values_clause ( static_returning_clause )? | select_statement )
            {
                ANTLR_UINT32 alt153=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_VALUES:
                	{
                		alt153=1;
                	}
                    break;
                case LEFT_PAREN:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_WITH:
                	{
                		alt153=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 153 );
                    ex->set_state( 0 );


                    goto rulesingle_table_insertEx;

                }

                switch (alt153)
                {
            	case 1:
            	    // OracleDML.g:632:10: values_clause ( static_returning_clause )?
            	    {
            	        this->followPush(FOLLOW_values_clause_in_single_table_insert6084);
            	        values_clause446=values_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            values_clause446_last = values_clause446.tree.get();
            	            stream_values_clause.add(values_clause446.tree);
            	        }

            	        // OracleDML.g:632:24: ( static_returning_clause )?
            	        {
            	            ANTLR_UINT32 alt152=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		{
            	                		    ANTLR_UINT32 LA152_1 = this->LA(2);
            	                		    if ( ((((toUpper(LT(1)->getText()) == "RETURN"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
            	                		    {
            	                		        alt152=1;
            	                		    }
            	                		}
            	                	}
            	                    break;
            	            }

            	            switch (alt152)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:632:24: static_returning_clause
            	        	    {
            	        	        this->followPush(FOLLOW_static_returning_clause_in_single_table_insert6086);
            	        	        static_returning_clause447=static_returning_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesingle_table_insertEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            static_returning_clause447_last = static_returning_clause447.tree.get();
            	        	            stream_static_returning_clause.add(static_returning_clause447.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:633:10: select_statement
            	    {
            	        this->followPush(FOLLOW_select_statement_in_single_table_insert6098);
            	        select_statement448=select_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            select_statement448_last = select_statement448.tree.get();
            	            stream_select_statement.add(select_statement448.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:635:9: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt154=2;
                {
                    ANTLR_UINT32 LA154_0 = this->LA(1);
                    if ( (LA154_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt154=1;
                    }
                }
                switch (alt154)
                {
            	case 1:
            	    // OracleDML.g:635:9: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_single_table_insert6114);
            	        error_logging_clause449=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_clause449_last = error_logging_clause449.tree.get();
            	            stream_error_logging_clause.add(error_logging_clause449.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: insert_into_clause, static_returning_clause, select_statement, values_clause, error_logging_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 636:9: -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? )
            {
            	// OracleDML.g:636:12: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SINGLE_TABLE_MODE, "SINGLE_TABLE_MODE"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_insert_into_clause.nextTree());
            	// OracleDML.g:636:51: ( values_clause )?
            	if ( stream_values_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_values_clause.nextTree());
            	}
            	stream_values_clause.reset();

            	// OracleDML.g:636:66: ( static_returning_clause )?
            	if ( stream_static_returning_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_static_returning_clause.nextTree());
            	}
            	stream_static_returning_clause.reset();

            	// OracleDML.g:636:91: ( select_statement )?
            	if ( stream_select_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_statement.nextTree());
            	}
            	stream_select_statement.reset();

            	// OracleDML.g:636:109: ( error_logging_clause )?
            	if ( stream_error_logging_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_clause.nextTree());
            	}
            	stream_error_logging_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesingle_table_insertEx; /* Prevent compiler warnings */
    rulesingle_table_insertEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end single_table_insert */

/**
 * $ANTLR start multi_table_insert
 * OracleDML.g:639:1: multi_table_insert : ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement -> ^( MULTI_TABLE_MODE ( multi_table_element )* ( conditional_insert_clause )? select_statement ) ;
 */
OracleDML::multi_table_insert_return
OracleDML::multi_table_insert()
{
    OracleDML::multi_table_insert_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::all_key_return all_key450;
    ImplTraits::TreeTypePtr::pointer all_key450_last = NULL;
    OracleDML::multi_table_element_return multi_table_element451;
    ImplTraits::TreeTypePtr::pointer multi_table_element451_last = NULL;
    OracleDML::conditional_insert_clause_return conditional_insert_clause452;
    ImplTraits::TreeTypePtr::pointer conditional_insert_clause452_last = NULL;
    OracleDML::select_statement_return select_statement453;
    ImplTraits::TreeTypePtr::pointer select_statement453_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_multi_table_element(get_psrstate()->get_treeAdaptor(), "rule multi_table_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_conditional_insert_clause(get_psrstate()->get_treeAdaptor(), "rule conditional_insert_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:640:5: ( ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement -> ^( MULTI_TABLE_MODE ( multi_table_element )* ( conditional_insert_clause )? select_statement ) )
        // OracleDML.g:641:5: ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement
        {
            // OracleDML.g:641:5: ( all_key ( multi_table_element )+ | conditional_insert_clause )
            {
                ANTLR_UINT32 alt156=2;
                {
                    ANTLR_UINT32 LA156_0 = this->LA(1);
                    if ( (LA156_0 == SQL92_RESERVED_ALL))
                    {
                        switch ( this->LA(2) )
                        {
                        case SQL92_RESERVED_INTO:
                        	{
                        		alt156=1;
                        	}
                            break;
                        case SQL92_RESERVED_WHEN:
                        	{
                        		alt156=2;
                        	}
                            break;

                        default:
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }

                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 156 );
                            ex->set_state( 1 );


                            goto rulemulti_table_insertEx;

                        }

                    }
                    else if ( (LA156_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "FIRST")))
                    {
                        alt156=2;
                    }
                    else if ( (LA156_0 == SQL92_RESERVED_WHEN))
                    {
                        alt156=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 156 );
                        ex->set_state( 0 );


                        goto rulemulti_table_insertEx;

                    }
                }
                switch (alt156)
                {
            	case 1:
            	    // OracleDML.g:641:10: all_key ( multi_table_element )+
            	    {
            	        this->followPush(FOLLOW_all_key_in_multi_table_insert6173);
            	        all_key450=all_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            all_key450_last = all_key450.tree.get();
            	            stream_all_key.add(all_key450.tree);
            	        }

            	        // OracleDML.g:641:18: ( multi_table_element )+
            	        {
            	            int cnt155=0;

            	            for (;;)
            	            {
            	                ANTLR_UINT32 alt155=2;
            	        	switch ( this->LA(1) )
            	        	{
            	        	case SQL92_RESERVED_INTO:
            	        		{
            	        			alt155=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt155)
            	        	{
            	        	    case 1:
            	        	        // OracleDML.g:641:18: multi_table_element
            	        	        {
            	        	            this->followPush(FOLLOW_multi_table_element_in_multi_table_insert6175);
            	        	            multi_table_element451=multi_table_element();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulemulti_table_insertEx;
            	        	            }
            	        	            if (this->hasFailed())
            	        	            {
            	        	                return retval;
            	        	            }

            	        	            if ( this->get_backtracking()==0 ) 
            	        	            {
            	        	                multi_table_element451_last = multi_table_element451.tree.get();
            	        	                stream_multi_table_element.add(multi_table_element451.tree);
            	        	            }

            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt155 >= 1 )
            	        		{
            	        		    goto loop155;
            	        		}
            	        		if (this->get_backtracking()>0)
            	        		{
            	        		    this->set_failedflag( true );
            	        		    return retval;
            	        		}

            	        		/* mismatchedSetEx()
            	        		 */
            	        		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	        		goto rulemulti_table_insertEx;
            	        	}
            	        	cnt155++;
            	            }
            	            loop155: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:642:10: conditional_insert_clause
            	    {
            	        this->followPush(FOLLOW_conditional_insert_clause_in_multi_table_insert6187);
            	        conditional_insert_clause452=conditional_insert_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            conditional_insert_clause452_last = conditional_insert_clause452.tree.get();
            	            stream_conditional_insert_clause.add(conditional_insert_clause452.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_select_statement_in_multi_table_insert6203);
            select_statement453=select_statement();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_table_insertEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_statement453_last = select_statement453.tree.get();
                stream_select_statement.add(select_statement453.tree);
            }

            // AST REWRITE
            // elements: select_statement, multi_table_element, conditional_insert_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 645:9: -> ^( MULTI_TABLE_MODE ( multi_table_element )* ( conditional_insert_clause )? select_statement )
            {
            	// OracleDML.g:645:12: ^( MULTI_TABLE_MODE ( multi_table_element )* ( conditional_insert_clause )? select_statement )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MULTI_TABLE_MODE, "MULTI_TABLE_MODE"), root_1);
            	// OracleDML.g:645:31: ( multi_table_element )*
            	while ( stream_multi_table_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_multi_table_element.nextTree());
            	}
            	stream_multi_table_element.reset();

            	// OracleDML.g:645:52: ( conditional_insert_clause )?
            	if ( stream_conditional_insert_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_conditional_insert_clause.nextTree());
            	}
            	stream_conditional_insert_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_statement.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemulti_table_insertEx; /* Prevent compiler warnings */
    rulemulti_table_insertEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multi_table_insert */

/**
 * $ANTLR start multi_table_element
 * OracleDML.g:648:1: multi_table_element : insert_into_clause ( values_clause )? ( error_logging_clause )? -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) ;
 */
OracleDML::multi_table_element_return
OracleDML::multi_table_element()
{
    OracleDML::multi_table_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::insert_into_clause_return insert_into_clause454;
    ImplTraits::TreeTypePtr::pointer insert_into_clause454_last = NULL;
    OracleDML::values_clause_return values_clause455;
    ImplTraits::TreeTypePtr::pointer values_clause455_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause456;
    ImplTraits::TreeTypePtr::pointer error_logging_clause456_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_values_clause(get_psrstate()->get_treeAdaptor(), "rule values_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_insert_into_clause(get_psrstate()->get_treeAdaptor(), "rule insert_into_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_clause(get_psrstate()->get_treeAdaptor(), "rule error_logging_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:649:5: ( insert_into_clause ( values_clause )? ( error_logging_clause )? -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) )
        // OracleDML.g:649:10: insert_into_clause ( values_clause )? ( error_logging_clause )?
        {
            this->followPush(FOLLOW_insert_into_clause_in_multi_table_element6245);
            insert_into_clause454=insert_into_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_table_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                insert_into_clause454_last = insert_into_clause454.tree.get();
                stream_insert_into_clause.add(insert_into_clause454.tree);
            }

            // OracleDML.g:649:29: ( values_clause )?
            {
                ANTLR_UINT32 alt157=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_VALUES:
                    	{
                    		alt157=1;
                    	}
                        break;
                }

                switch (alt157)
                {
            	case 1:
            	    // OracleDML.g:649:29: values_clause
            	    {
            	        this->followPush(FOLLOW_values_clause_in_multi_table_element6247);
            	        values_clause455=values_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_table_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            values_clause455_last = values_clause455.tree.get();
            	            stream_values_clause.add(values_clause455.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:649:44: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt158=2;
                {
                    ANTLR_UINT32 LA158_0 = this->LA(1);
                    if ( (LA158_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt158=1;
                    }
                }
                switch (alt158)
                {
            	case 1:
            	    // OracleDML.g:649:44: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_multi_table_element6250);
            	        error_logging_clause456=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_table_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_clause456_last = error_logging_clause456.tree.get();
            	            stream_error_logging_clause.add(error_logging_clause456.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: error_logging_clause, insert_into_clause, values_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 650:9: -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
            {
            	// OracleDML.g:650:12: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_ELEMENT, "TABLE_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_insert_into_clause.nextTree());
            	// OracleDML.g:650:47: ( values_clause )?
            	if ( stream_values_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_values_clause.nextTree());
            	}
            	stream_values_clause.reset();

            	// OracleDML.g:650:62: ( error_logging_clause )?
            	if ( stream_error_logging_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_clause.nextTree());
            	}
            	stream_error_logging_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemulti_table_elementEx; /* Prevent compiler warnings */
    rulemulti_table_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multi_table_element */

/**
 * $ANTLR start conditional_insert_clause
 * OracleDML.g:653:1: conditional_insert_clause : ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) ;
 */
OracleDML::conditional_insert_clause_return
OracleDML::conditional_insert_clause()
{
    OracleDML::conditional_insert_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::all_key_return all_key457;
    ImplTraits::TreeTypePtr::pointer all_key457_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key458;
    ImplTraits::TreeTypePtr::pointer first_key458_last = NULL;
    OracleDML::conditional_insert_when_part_return conditional_insert_when_part459;
    ImplTraits::TreeTypePtr::pointer conditional_insert_when_part459_last = NULL;
    OracleDML::conditional_insert_else_part_return conditional_insert_else_part460;
    ImplTraits::TreeTypePtr::pointer conditional_insert_else_part460_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_conditional_insert_when_part(get_psrstate()->get_treeAdaptor(), "rule conditional_insert_when_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_conditional_insert_else_part(get_psrstate()->get_treeAdaptor(), "rule conditional_insert_else_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_first_key(get_psrstate()->get_treeAdaptor(), "rule first_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:654:5: ( ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) )
        // OracleDML.g:654:10: ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )?
        {
            // OracleDML.g:654:10: ( all_key | first_key )?
            {
                ANTLR_UINT32 alt159=3;
                {
                    ANTLR_UINT32 LA159_0 = this->LA(1);
                    if ( (LA159_0 == SQL92_RESERVED_ALL))
                    {
                        alt159=1;
                    }
                    else if ( (LA159_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "FIRST")))
                    {
                        alt159=2;
                    }
                }
                switch (alt159)
                {
            	case 1:
            	    // OracleDML.g:654:11: all_key
            	    {
            	        this->followPush(FOLLOW_all_key_in_conditional_insert_clause6294);
            	        all_key457=all_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            all_key457_last = all_key457.tree.get();
            	            stream_all_key.add(all_key457.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:654:19: first_key
            	    {
            	        this->followPush(FOLLOW_first_key_in_conditional_insert_clause6296);
            	        first_key458=first_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            first_key458_last = first_key458.tree.get();
            	            stream_first_key.add(first_key458.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:655:9: ( conditional_insert_when_part )+
            {
                int cnt160=0;

                for (;;)
                {
                    ANTLR_UINT32 alt160=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_WHEN:
            		{
            			alt160=1;
            		}
            	    break;

            	}

            	switch (alt160)
            	{
            	    case 1:
            	        // OracleDML.g:655:9: conditional_insert_when_part
            	        {
            	            this->followPush(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause6308);
            	            conditional_insert_when_part459=conditional_insert_when_part();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleconditional_insert_clauseEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) 
            	            {
            	                conditional_insert_when_part459_last = conditional_insert_when_part459.tree.get();
            	                stream_conditional_insert_when_part.add(conditional_insert_when_part459.tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt160 >= 1 )
            		{
            		    goto loop160;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleconditional_insert_clauseEx;
            	}
            	cnt160++;
                }
                loop160: ;	/* Jump to here if this rule does not match */
            }

            // OracleDML.g:655:39: ( conditional_insert_else_part )?
            {
                ANTLR_UINT32 alt161=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ELSE:
                    	{
                    		alt161=1;
                    	}
                        break;
                }

                switch (alt161)
                {
            	case 1:
            	    // OracleDML.g:655:39: conditional_insert_else_part
            	    {
            	        this->followPush(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause6311);
            	        conditional_insert_else_part460=conditional_insert_else_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            conditional_insert_else_part460_last = conditional_insert_else_part460.tree.get();
            	            stream_conditional_insert_else_part.add(conditional_insert_else_part460.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: conditional_insert_when_part, first_key, all_key, conditional_insert_else_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 656:9: -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
            {
            	// OracleDML.g:656:12: ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(CONDITIONAL_INSERT, "CONDITIONAL_INSERT"), root_1);
            	// OracleDML.g:656:33: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:656:42: ( first_key )?
            	if ( stream_first_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_first_key.nextTree());
            	}
            	stream_first_key.reset();

            	if ( !(stream_conditional_insert_when_part.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "conditional_insert_when_part empty" );
            		goto ruleconditional_insert_clauseEx;
            	}
            	while ( stream_conditional_insert_when_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_conditional_insert_when_part.nextTree());
            	}
            	stream_conditional_insert_when_part.reset();

            	// OracleDML.g:656:83: ( conditional_insert_else_part )?
            	if ( stream_conditional_insert_else_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_conditional_insert_else_part.nextTree());
            	}
            	stream_conditional_insert_else_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconditional_insert_clauseEx; /* Prevent compiler warnings */
    ruleconditional_insert_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end conditional_insert_clause */

/**
 * $ANTLR start conditional_insert_when_part
 * OracleDML.g:659:1: conditional_insert_when_part : when_key condition then_key ( multi_table_element )+ -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ ) ;
 */
OracleDML::conditional_insert_when_part_return
OracleDML::conditional_insert_when_part()
{
    OracleDML::conditional_insert_when_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::when_key_return when_key461;
    ImplTraits::TreeTypePtr::pointer when_key461_last = NULL;
    OracleDML::condition_return condition462;
    ImplTraits::TreeTypePtr::pointer condition462_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key463;
    ImplTraits::TreeTypePtr::pointer then_key463_last = NULL;
    OracleDML::multi_table_element_return multi_table_element464;
    ImplTraits::TreeTypePtr::pointer multi_table_element464_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_then_key(get_psrstate()->get_treeAdaptor(), "rule then_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");
    RewriteRuleSubtreeStream<ImplTraits> stream_multi_table_element(get_psrstate()->get_treeAdaptor(), "rule multi_table_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_when_key(get_psrstate()->get_treeAdaptor(), "rule when_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:660:5: ( when_key condition then_key ( multi_table_element )+ -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ ) )
        // OracleDML.g:660:10: when_key condition then_key ( multi_table_element )+
        {
            this->followPush(FOLLOW_when_key_in_conditional_insert_when_part6359);
            when_key461=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_insert_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                when_key461_last = when_key461.tree.get();
                stream_when_key.add(when_key461.tree);
            }

            this->followPush(FOLLOW_condition_in_conditional_insert_when_part6361);
            condition462=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_insert_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition462_last = condition462.tree.get();
                stream_condition.add(condition462.tree);
            }

            this->followPush(FOLLOW_then_key_in_conditional_insert_when_part6363);
            then_key463=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_insert_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                then_key463_last = then_key463.tree.get();
                stream_then_key.add(then_key463.tree);
            }

            // OracleDML.g:660:38: ( multi_table_element )+
            {
                int cnt162=0;

                for (;;)
                {
                    ANTLR_UINT32 alt162=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_INTO:
            		{
            			alt162=1;
            		}
            	    break;

            	}

            	switch (alt162)
            	{
            	    case 1:
            	        // OracleDML.g:660:38: multi_table_element
            	        {
            	            this->followPush(FOLLOW_multi_table_element_in_conditional_insert_when_part6365);
            	            multi_table_element464=multi_table_element();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleconditional_insert_when_partEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) 
            	            {
            	                multi_table_element464_last = multi_table_element464.tree.get();
            	                stream_multi_table_element.add(multi_table_element464.tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt162 >= 1 )
            		{
            		    goto loop162;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleconditional_insert_when_partEx;
            	}
            	cnt162++;
                }
                loop162: ;	/* Jump to here if this rule does not match */
            }

            // AST REWRITE
            // elements: condition, multi_table_element, when_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 661:9: -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ )
            {
            	// OracleDML.g:661:12: ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_when_key.nextNode(), root_1);
            	// OracleDML.g:661:23: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	if ( !(stream_multi_table_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "multi_table_element empty" );
            		goto ruleconditional_insert_when_partEx;
            	}
            	while ( stream_multi_table_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_multi_table_element.nextTree());
            	}
            	stream_multi_table_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconditional_insert_when_partEx; /* Prevent compiler warnings */
    ruleconditional_insert_when_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end conditional_insert_when_part */

/**
 * $ANTLR start conditional_insert_else_part
 * OracleDML.g:664:1: conditional_insert_else_part : else_key ^ ( multi_table_element )+ ;
 */
OracleDML::conditional_insert_else_part_return
OracleDML::conditional_insert_else_part()
{
    OracleDML::conditional_insert_else_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::else_key_return else_key465;
    ImplTraits::TreeTypePtr::pointer else_key465_last = NULL;
    OracleDML::multi_table_element_return multi_table_element466;
    ImplTraits::TreeTypePtr::pointer multi_table_element466_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:665:5: ( else_key ^ ( multi_table_element )+ )
        // OracleDML.g:665:10: else_key ^ ( multi_table_element )+
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_else_key_in_conditional_insert_else_part6409);
            else_key465=else_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_insert_else_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(else_key465.tree, root_0);

            // OracleDML.g:665:20: ( multi_table_element )+
            {
                int cnt163=0;

                for (;;)
                {
                    ANTLR_UINT32 alt163=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_INTO:
            		{
            			alt163=1;
            		}
            	    break;

            	}

            	switch (alt163)
            	{
            	    case 1:
            	        // OracleDML.g:665:20: multi_table_element
            	        {
            	            this->followPush(FOLLOW_multi_table_element_in_conditional_insert_else_part6412);
            	            multi_table_element466=multi_table_element();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleconditional_insert_else_partEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multi_table_element466.tree);


            	        }
            	        break;

            	    default:

            		if ( cnt163 >= 1 )
            		{
            		    goto loop163;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleconditional_insert_else_partEx;
            	}
            	cnt163++;
                }
                loop163: ;	/* Jump to here if this rule does not match */
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconditional_insert_else_partEx; /* Prevent compiler warnings */
    ruleconditional_insert_else_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end conditional_insert_else_part */

/**
 * $ANTLR start insert_into_clause
 * OracleDML.g:668:1: insert_into_clause : into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) ) ;
 */
OracleDML::insert_into_clause_return
OracleDML::insert_into_clause()
{
    OracleDML::insert_into_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN469 = NULL;
    ImplTraits::CommonTokenType const* COMMA471 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN473 = NULL;
    OracleDML_OracleDMLKeys::into_key_return into_key467;
    ImplTraits::TreeTypePtr::pointer into_key467_last = NULL;
    OracleDML::general_table_ref_return general_table_ref468;
    ImplTraits::TreeTypePtr::pointer general_table_ref468_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name470;
    ImplTraits::TreeTypePtr::pointer column_name470_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name472;
    ImplTraits::TreeTypePtr::pointer column_name472_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN469_tree;
    ImplTraits::TreeTypePtr COMMA471_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN473_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_general_table_ref(get_psrstate()->get_treeAdaptor(), "rule general_table_ref");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_key(get_psrstate()->get_treeAdaptor(), "rule into_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:669:5: ( into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) ) )
        // OracleDML.g:669:10: into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
        {
            this->followPush(FOLLOW_into_key_in_insert_into_clause6433);
            into_key467=into_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinsert_into_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                into_key467_last = into_key467.tree.get();
                stream_into_key.add(into_key467.tree);
            }

            this->followPush(FOLLOW_general_table_ref_in_insert_into_clause6435);
            general_table_ref468=general_table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinsert_into_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                general_table_ref468_last = general_table_ref468.tree.get();
                stream_general_table_ref.add(general_table_ref468.tree);
            }

            // OracleDML.g:670:9: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            {
                ANTLR_UINT32 alt165=2;
                switch ( this->LA(1) )
                {
                    case LEFT_PAREN:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case DELIMITED_ID:
                    		    case INTRODUCER:
                    		    case REGULAR_ID:
                    		    	{
                    		    		alt165=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt165)
                {
            	case 1:
            	    // OracleDML.g:670:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN469 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_insert_into_clause6447);
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_into_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN469);


            	        this->followPush(FOLLOW_column_name_in_insert_into_clause6449);
            	        column_name470=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_into_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name470_last = column_name470.tree.get();
            	            stream_column_name.add(column_name470.tree);
            	        }

            	        // OracleDML.g:670:33: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt164=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt164=1;
            	            	}
            	                break;

            	            }

            	            switch (alt164)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:670:34: COMMA column_name
            	        	    {
            	        	        COMMA471 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_insert_into_clause6452);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinsert_into_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA471);


            	        	        this->followPush(FOLLOW_column_name_in_insert_into_clause6454);
            	        	        column_name472=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinsert_into_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name472_last = column_name472.tree.get();
            	        	            stream_column_name.add(column_name472.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop164;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop164: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN473 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_insert_into_clause6458);
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_into_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN473);


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: general_table_ref, into_key, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 671:9: -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) )
            {
            	// OracleDML.g:671:12: ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_into_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_general_table_ref.nextTree());
            	// OracleDML.g:671:41: ^( COLUMNS ( column_name )* )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(COLUMNS, "COLUMNS"), root_2);
            	// OracleDML.g:671:51: ( column_name )*
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleinsert_into_clauseEx; /* Prevent compiler warnings */
    ruleinsert_into_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end insert_into_clause */

/**
 * $ANTLR start values_clause
 * OracleDML.g:674:1: values_clause : values_key ^ ( expression_list | record_name ) ;
 */
OracleDML::values_clause_return
OracleDML::values_clause()
{
    OracleDML::values_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::values_key_return values_key474;
    ImplTraits::TreeTypePtr::pointer values_key474_last = NULL;
    OracleDML::expression_list_return expression_list475;
    ImplTraits::TreeTypePtr::pointer expression_list475_last = NULL;
    OracleDML_OracleDMLCommons::record_name_return record_name476;
    ImplTraits::TreeTypePtr::pointer record_name476_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:675:5: ( values_key ^ ( expression_list | record_name ) )
        // OracleDML.g:675:10: values_key ^ ( expression_list | record_name )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_values_key_in_values_clause6503);
            values_key474=values_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevalues_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(values_key474.tree, root_0);

            // OracleDML.g:675:22: ( expression_list | record_name )
            {
                ANTLR_UINT32 alt166=2;
                switch ( this->LA(1) )
                {
                case LEFT_PAREN:
                	{
                		alt166=1;
                	}
                    break;
                case BINDVAR:
                case COLON:
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt166=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 166 );
                    ex->set_state( 0 );


                    goto rulevalues_clauseEx;

                }

                switch (alt166)
                {
            	case 1:
            	    // OracleDML.g:675:23: expression_list
            	    {
            	        this->followPush(FOLLOW_expression_list_in_values_clause6507);
            	        expression_list475=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevalues_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_list475.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:675:41: record_name
            	    {
            	        this->followPush(FOLLOW_record_name_in_values_clause6511);
            	        record_name476=record_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevalues_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, record_name476.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulevalues_clauseEx; /* Prevent compiler warnings */
    rulevalues_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end values_clause */

/**
 * $ANTLR start merge_statement
 * OracleDML.g:679:1: merge_statement : merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_insert_seq | ( when_key not_key matched_key )=> merge_insert_update_seq )? ( error_logging_clause )? -> ^( merge_key tableview_name ( table_alias )? ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_insert_seq )? ( merge_insert_update_seq )? ( error_logging_clause )? ) ;
 */
OracleDML::merge_statement_return
OracleDML::merge_statement()
{
    OracleDML::merge_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN484 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN486 = NULL;
    OracleDML_OracleDMLKeys::merge_key_return merge_key477;
    ImplTraits::TreeTypePtr::pointer merge_key477_last = NULL;
    OracleDML_OracleDMLKeys::into_key_return into_key478;
    ImplTraits::TreeTypePtr::pointer into_key478_last = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name479;
    ImplTraits::TreeTypePtr::pointer tableview_name479_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias480;
    ImplTraits::TreeTypePtr::pointer table_alias480_last = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key481;
    ImplTraits::TreeTypePtr::pointer using_key481_last = NULL;
    OracleDML::selected_tableview_return selected_tableview482;
    ImplTraits::TreeTypePtr::pointer selected_tableview482_last = NULL;
    OracleDML_OracleDMLKeys::on_key_return on_key483;
    ImplTraits::TreeTypePtr::pointer on_key483_last = NULL;
    OracleDML::condition_return condition485;
    ImplTraits::TreeTypePtr::pointer condition485_last = NULL;
    OracleDML::merge_update_insert_seq_return merge_update_insert_seq487;
    ImplTraits::TreeTypePtr::pointer merge_update_insert_seq487_last = NULL;
    OracleDML::merge_insert_update_seq_return merge_insert_update_seq488;
    ImplTraits::TreeTypePtr::pointer merge_insert_update_seq488_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause489;
    ImplTraits::TreeTypePtr::pointer error_logging_clause489_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN484_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN486_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_using_key(get_psrstate()->get_treeAdaptor(), "rule using_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_key(get_psrstate()->get_treeAdaptor(), "rule into_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_insert_update_seq(get_psrstate()->get_treeAdaptor(), "rule merge_insert_update_seq");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_key(get_psrstate()->get_treeAdaptor(), "rule merge_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_clause(get_psrstate()->get_treeAdaptor(), "rule error_logging_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_selected_tableview(get_psrstate()->get_treeAdaptor(), "rule selected_tableview");
    RewriteRuleSubtreeStream<ImplTraits> stream_on_key(get_psrstate()->get_treeAdaptor(), "rule on_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_update_insert_seq(get_psrstate()->get_treeAdaptor(), "rule merge_update_insert_seq");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:680:5: ( merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_insert_seq | ( when_key not_key matched_key )=> merge_insert_update_seq )? ( error_logging_clause )? -> ^( merge_key tableview_name ( table_alias )? ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_insert_seq )? ( merge_insert_update_seq )? ( error_logging_clause )? ) )
        // OracleDML.g:680:10: merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_insert_seq | ( when_key not_key matched_key )=> merge_insert_update_seq )? ( error_logging_clause )?
        {
            this->followPush(FOLLOW_merge_key_in_merge_statement6533);
            merge_key477=merge_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                merge_key477_last = merge_key477.tree.get();
                stream_merge_key.add(merge_key477.tree);
            }

            this->followPush(FOLLOW_into_key_in_merge_statement6535);
            into_key478=into_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                into_key478_last = into_key478.tree.get();
                stream_into_key.add(into_key478.tree);
            }

            this->followPush(FOLLOW_tableview_name_in_merge_statement6537);
            tableview_name479=tableview_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                tableview_name479_last = tableview_name479.tree.get();
                stream_tableview_name.add(tableview_name479.tree);
            }

            // OracleDML.g:680:44: ( table_alias )?
            {
                ANTLR_UINT32 alt167=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    	{
                    		alt167=1;
                    	}
                        break;
                }

                switch (alt167)
                {
            	case 1:
            	    // OracleDML.g:680:44: table_alias
            	    {
            	        this->followPush(FOLLOW_table_alias_in_merge_statement6539);
            	        table_alias480=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias480_last = table_alias480.tree.get();
            	            stream_table_alias.add(table_alias480.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_using_key_in_merge_statement6550);
            using_key481=using_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                using_key481_last = using_key481.tree.get();
                stream_using_key.add(using_key481.tree);
            }

            this->followPush(FOLLOW_selected_tableview_in_merge_statement6552);
            selected_tableview482=selected_tableview();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                selected_tableview482_last = selected_tableview482.tree.get();
                stream_selected_tableview.add(selected_tableview482.tree);
            }

            this->followPush(FOLLOW_on_key_in_merge_statement6554);
            on_key483=on_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                on_key483_last = on_key483.tree.get();
                stream_on_key.add(on_key483.tree);
            }

            LEFT_PAREN484 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_merge_statement6556);
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN484);


            this->followPush(FOLLOW_condition_in_merge_statement6558);
            condition485=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition485_last = condition485.tree.get();
                stream_condition.add(condition485.tree);
            }

            RIGHT_PAREN486 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_merge_statement6560);
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN486);


            // OracleDML.g:682:9: ( ( when_key matched_key )=> merge_update_insert_seq | ( when_key not_key matched_key )=> merge_insert_update_seq )?
            {
                ANTLR_UINT32 alt168=3;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHEN:
                    	{
                    		{
                    		    ANTLR_UINT32 LA168_1 = this->LA(2);
                    		    if ( (LA168_1 == REGULAR_ID) && (this->msynpred( antlr3::ClassForwarder<synpred23_OracleDML>() )))
                    		    {
                    		        alt168=1;
                    		    }
                    		    else if ( (LA168_1 == SQL92_RESERVED_NOT) && (this->msynpred( antlr3::ClassForwarder<synpred24_OracleDML>() )))
                    		    {
                    		        alt168=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt168)
                {
            	case 1:
            	    // OracleDML.g:683:13: ( when_key matched_key )=> merge_update_insert_seq
            	    {
            	        this->followPush(FOLLOW_merge_update_insert_seq_in_merge_statement6592);
            	        merge_update_insert_seq487=merge_update_insert_seq();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_update_insert_seq487_last = merge_update_insert_seq487.tree.get();
            	            stream_merge_update_insert_seq.add(merge_update_insert_seq487.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:685:13: ( when_key not_key matched_key )=> merge_insert_update_seq
            	    {
            	        this->followPush(FOLLOW_merge_insert_update_seq_in_merge_statement6626);
            	        merge_insert_update_seq488=merge_insert_update_seq();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_insert_update_seq488_last = merge_insert_update_seq488.tree.get();
            	            stream_merge_insert_update_seq.add(merge_insert_update_seq488.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:687:9: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt169=2;
                {
                    ANTLR_UINT32 LA169_0 = this->LA(1);
                    if ( (LA169_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt169=1;
                    }
                }
                switch (alt169)
                {
            	case 1:
            	    // OracleDML.g:687:9: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_merge_statement6647);
            	        error_logging_clause489=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_clause489_last = error_logging_clause489.tree.get();
            	            stream_error_logging_clause.add(error_logging_clause489.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: condition, using_key, error_logging_clause, selected_tableview, table_alias, merge_update_insert_seq, tableview_name, merge_insert_update_seq, merge_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 688:9: -> ^( merge_key tableview_name ( table_alias )? ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_insert_seq )? ( merge_insert_update_seq )? ( error_logging_clause )? )
            {
            	// OracleDML.g:688:12: ^( merge_key tableview_name ( table_alias )? ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_insert_seq )? ( merge_insert_update_seq )? ( error_logging_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_merge_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_tableview_name.nextTree());
            	// OracleDML.g:688:39: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	// OracleDML.g:688:52: ^( using_key selected_tableview ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_using_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_selected_tableview.nextTree());
            	// OracleDML.g:688:83: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:689:13: ( merge_update_insert_seq )?
            	if ( stream_merge_update_insert_seq.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_update_insert_seq.nextTree());
            	}
            	stream_merge_update_insert_seq.reset();

            	// OracleDML.g:689:38: ( merge_insert_update_seq )?
            	if ( stream_merge_insert_update_seq.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_insert_update_seq.nextTree());
            	}
            	stream_merge_insert_update_seq.reset();

            	// OracleDML.g:690:13: ( error_logging_clause )?
            	if ( stream_error_logging_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_clause.nextTree());
            	}
            	stream_error_logging_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_statementEx; /* Prevent compiler warnings */
    rulemerge_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_statement */

/**
 * $ANTLR start merge_update_insert_seq
 * OracleDML.g:694:1: merge_update_insert_seq : merge_update_clause ( merge_insert_clause )? ;
 */
OracleDML::merge_update_insert_seq_return
OracleDML::merge_update_insert_seq()
{
    OracleDML::merge_update_insert_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::merge_update_clause_return merge_update_clause490;
    ImplTraits::TreeTypePtr::pointer merge_update_clause490_last = NULL;
    OracleDML::merge_insert_clause_return merge_insert_clause491;
    ImplTraits::TreeTypePtr::pointer merge_insert_clause491_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:695:5: ( merge_update_clause ( merge_insert_clause )? )
        // OracleDML.g:695:7: merge_update_clause ( merge_insert_clause )?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_merge_update_clause_in_merge_update_insert_seq6730);
            merge_update_clause490=merge_update_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_insert_seqEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_update_clause490.tree);


            // OracleDML.g:695:27: ( merge_insert_clause )?
            {
                ANTLR_UINT32 alt170=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHEN:
                    	{
                    		alt170=1;
                    	}
                        break;
                }

                switch (alt170)
                {
            	case 1:
            	    // OracleDML.g:695:27: merge_insert_clause
            	    {
            	        this->followPush(FOLLOW_merge_insert_clause_in_merge_update_insert_seq6732);
            	        merge_insert_clause491=merge_insert_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_insert_seqEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_insert_clause491.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_update_insert_seqEx; /* Prevent compiler warnings */
    rulemerge_update_insert_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_update_insert_seq */

/**
 * $ANTLR start merge_insert_update_seq
 * OracleDML.g:698:1: merge_insert_update_seq : merge_insert_clause ( merge_update_clause )? ;
 */
OracleDML::merge_insert_update_seq_return
OracleDML::merge_insert_update_seq()
{
    OracleDML::merge_insert_update_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::merge_insert_clause_return merge_insert_clause492;
    ImplTraits::TreeTypePtr::pointer merge_insert_clause492_last = NULL;
    OracleDML::merge_update_clause_return merge_update_clause493;
    ImplTraits::TreeTypePtr::pointer merge_update_clause493_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:699:5: ( merge_insert_clause ( merge_update_clause )? )
        // OracleDML.g:699:7: merge_insert_clause ( merge_update_clause )?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_merge_insert_clause_in_merge_insert_update_seq6750);
            merge_insert_clause492=merge_insert_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_update_seqEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_insert_clause492.tree);


            // OracleDML.g:699:27: ( merge_update_clause )?
            {
                ANTLR_UINT32 alt171=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHEN:
                    	{
                    		alt171=1;
                    	}
                        break;
                }

                switch (alt171)
                {
            	case 1:
            	    // OracleDML.g:699:27: merge_update_clause
            	    {
            	        this->followPush(FOLLOW_merge_update_clause_in_merge_insert_update_seq6752);
            	        merge_update_clause493=merge_update_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_update_seqEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_update_clause493.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_insert_update_seqEx; /* Prevent compiler warnings */
    rulemerge_insert_update_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_insert_update_seq */

/**
 * $ANTLR start merge_update_clause
 * OracleDML.g:702:1: merge_update_clause : when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )? -> ^( MERGE_UPDATE[$when_key.start] matched_key then_key update_key set_key ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) ;
 */
OracleDML::merge_update_clause_return
OracleDML::merge_update_clause()
{
    OracleDML::merge_update_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA500 = NULL;
    OracleDML_OracleDMLKeys::when_key_return when_key494;
    ImplTraits::TreeTypePtr::pointer when_key494_last = NULL;
    OracleDML_OracleDMLKeys::matched_key_return matched_key495;
    ImplTraits::TreeTypePtr::pointer matched_key495_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key496;
    ImplTraits::TreeTypePtr::pointer then_key496_last = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key497;
    ImplTraits::TreeTypePtr::pointer update_key497_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key498;
    ImplTraits::TreeTypePtr::pointer set_key498_last = NULL;
    OracleDML::merge_element_return merge_element499;
    ImplTraits::TreeTypePtr::pointer merge_element499_last = NULL;
    OracleDML::merge_element_return merge_element501;
    ImplTraits::TreeTypePtr::pointer merge_element501_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause502;
    ImplTraits::TreeTypePtr::pointer where_clause502_last = NULL;
    OracleDML::merge_update_delete_part_return merge_update_delete_part503;
    ImplTraits::TreeTypePtr::pointer merge_update_delete_part503_last = NULL;
    ImplTraits::TreeTypePtr COMMA500_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_then_key(get_psrstate()->get_treeAdaptor(), "rule then_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_update_delete_part(get_psrstate()->get_treeAdaptor(), "rule merge_update_delete_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_element(get_psrstate()->get_treeAdaptor(), "rule merge_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_where_clause(get_psrstate()->get_treeAdaptor(), "rule where_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_set_key(get_psrstate()->get_treeAdaptor(), "rule set_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_key(get_psrstate()->get_treeAdaptor(), "rule update_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_when_key(get_psrstate()->get_treeAdaptor(), "rule when_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_matched_key(get_psrstate()->get_treeAdaptor(), "rule matched_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:703:5: ( when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )? -> ^( MERGE_UPDATE[$when_key.start] matched_key then_key update_key set_key ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) )
        // OracleDML.g:703:10: when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )?
        {
            this->followPush(FOLLOW_when_key_in_merge_update_clause6773);
            when_key494=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                when_key494_last = when_key494.tree.get();
                stream_when_key.add(when_key494.tree);
            }

            this->followPush(FOLLOW_matched_key_in_merge_update_clause6775);
            matched_key495=matched_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                matched_key495_last = matched_key495.tree.get();
                stream_matched_key.add(matched_key495.tree);
            }

            this->followPush(FOLLOW_then_key_in_merge_update_clause6777);
            then_key496=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                then_key496_last = then_key496.tree.get();
                stream_then_key.add(then_key496.tree);
            }

            this->followPush(FOLLOW_update_key_in_merge_update_clause6779);
            update_key497=update_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                update_key497_last = update_key497.tree.get();
                stream_update_key.add(update_key497.tree);
            }

            this->followPush(FOLLOW_set_key_in_merge_update_clause6781);
            set_key498=set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                set_key498_last = set_key498.tree.get();
                stream_set_key.add(set_key498.tree);
            }

            this->followPush(FOLLOW_merge_element_in_merge_update_clause6792);
            merge_element499=merge_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                merge_element499_last = merge_element499.tree.get();
                stream_merge_element.add(merge_element499.tree);
            }

            // OracleDML.g:704:23: ( COMMA merge_element )*

            for (;;)
            {
                ANTLR_UINT32 alt172=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt172=1;
                	}
                    break;

                }

                switch (alt172)
                {
            	case 1:
            	    // OracleDML.g:704:24: COMMA merge_element
            	    {
            	        COMMA500 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_merge_update_clause6795);
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA500);


            	        this->followPush(FOLLOW_merge_element_in_merge_update_clause6797);
            	        merge_element501=merge_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_element501_last = merge_element501.tree.get();
            	            stream_merge_element.add(merge_element501.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop172;	/* break out of the loop */
            	    break;
                }
            }
            loop172: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:705:9: ( where_clause )?
            {
                ANTLR_UINT32 alt173=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt173=1;
                    	}
                        break;
                }

                switch (alt173)
                {
            	case 1:
            	    // OracleDML.g:705:9: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_merge_update_clause6809);
            	        where_clause502=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            where_clause502_last = where_clause502.tree.get();
            	            stream_where_clause.add(where_clause502.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:705:23: ( merge_update_delete_part )?
            {
                ANTLR_UINT32 alt174=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_DELETE:
                    	{
                    		alt174=1;
                    	}
                        break;
                }

                switch (alt174)
                {
            	case 1:
            	    // OracleDML.g:705:23: merge_update_delete_part
            	    {
            	        this->followPush(FOLLOW_merge_update_delete_part_in_merge_update_clause6812);
            	        merge_update_delete_part503=merge_update_delete_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_update_delete_part503_last = merge_update_delete_part503.tree.get();
            	            stream_merge_update_delete_part.add(merge_update_delete_part503.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: where_clause, set_key, update_key, merge_update_delete_part, then_key, matched_key, merge_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 706:9: -> ^( MERGE_UPDATE[$when_key.start] matched_key then_key update_key set_key ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
            {
            	// OracleDML.g:706:11: ^( MERGE_UPDATE[$when_key.start] matched_key then_key update_key set_key ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MERGE_UPDATE, (when_key494.start)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_matched_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_then_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_set_key.nextTree());
            	if ( !(stream_merge_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "merge_element empty" );
            		goto rulemerge_update_clauseEx;
            	}
            	while ( stream_merge_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_element.nextTree());
            	}
            	stream_merge_element.reset();

            	// OracleDML.g:706:98: ( where_clause )?
            	if ( stream_where_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_where_clause.nextTree());
            	}
            	stream_where_clause.reset();

            	// OracleDML.g:706:112: ( merge_update_delete_part )?
            	if ( stream_merge_update_delete_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_update_delete_part.nextTree());
            	}
            	stream_merge_update_delete_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_update_clauseEx; /* Prevent compiler warnings */
    rulemerge_update_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_update_clause */

/**
 * $ANTLR start merge_element
 * OracleDML.g:709:1: merge_element : column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) ;
 */
OracleDML::merge_element_return
OracleDML::merge_element()
{
    OracleDML::merge_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP505 = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name504;
    ImplTraits::TreeTypePtr::pointer column_name504_last = NULL;
    OracleDML::expression_return expression506;
    ImplTraits::TreeTypePtr::pointer expression506_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP505_tree;
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:710:5: ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) )
        // OracleDML.g:710:10: column_name EQUALS_OP expression
        {
            this->followPush(FOLLOW_column_name_in_merge_element6864);
            column_name504=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                column_name504_last = column_name504.tree.get();
                stream_column_name.add(column_name504.tree);
            }

            EQUALS_OP505 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_merge_element6866);
            if  (this->hasException())
            {
                goto rulemerge_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP505);


            this->followPush(FOLLOW_expression_in_merge_element6868);
            expression506=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression506_last = expression506.tree.get();
                stream_expression.add(expression506.tree);
            }

            // AST REWRITE
            // elements: column_name, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 711:9: -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
            {
            	// OracleDML.g:711:12: ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ASSIGN, EQUALS_OP505), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	// OracleDML.g:711:45: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_elementEx; /* Prevent compiler warnings */
    rulemerge_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_element */

/**
 * $ANTLR start merge_update_delete_part
 * OracleDML.g:714:1: merge_update_delete_part : delete_key ^ where_clause ;
 */
OracleDML::merge_update_delete_part_return
OracleDML::merge_update_delete_part()
{
    OracleDML::merge_update_delete_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::delete_key_return delete_key507;
    ImplTraits::TreeTypePtr::pointer delete_key507_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause508;
    ImplTraits::TreeTypePtr::pointer where_clause508_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:715:5: ( delete_key ^ where_clause )
        // OracleDML.g:715:10: delete_key ^ where_clause
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_delete_key_in_merge_update_delete_part6911);
            delete_key507=delete_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_delete_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(delete_key507.tree, root_0);

            this->followPush(FOLLOW_where_clause_in_merge_update_delete_part6914);
            where_clause508=where_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_delete_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, where_clause508.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_update_delete_partEx; /* Prevent compiler warnings */
    rulemerge_update_delete_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_update_delete_part */

/**
 * $ANTLR start merge_insert_clause
 * OracleDML.g:718:1: merge_insert_clause : when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )? -> ^( MERGE_INSERT[$when_key.start] not_key matched_key then_key insert_key ^( COLUMNS ( column_name )* ) values_key expression_list ( where_clause )? ) ;
 */
OracleDML::merge_insert_clause_return
OracleDML::merge_insert_clause()
{
    OracleDML::merge_insert_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN514 = NULL;
    ImplTraits::CommonTokenType const* COMMA516 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN518 = NULL;
    OracleDML_OracleDMLKeys::when_key_return when_key509;
    ImplTraits::TreeTypePtr::pointer when_key509_last = NULL;
    OracleDML_OracleDMLKeys::not_key_return not_key510;
    ImplTraits::TreeTypePtr::pointer not_key510_last = NULL;
    OracleDML_OracleDMLKeys::matched_key_return matched_key511;
    ImplTraits::TreeTypePtr::pointer matched_key511_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key512;
    ImplTraits::TreeTypePtr::pointer then_key512_last = NULL;
    OracleDML_OracleDMLKeys::insert_key_return insert_key513;
    ImplTraits::TreeTypePtr::pointer insert_key513_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name515;
    ImplTraits::TreeTypePtr::pointer column_name515_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name517;
    ImplTraits::TreeTypePtr::pointer column_name517_last = NULL;
    OracleDML_OracleDMLKeys::values_key_return values_key519;
    ImplTraits::TreeTypePtr::pointer values_key519_last = NULL;
    OracleDML::expression_list_return expression_list520;
    ImplTraits::TreeTypePtr::pointer expression_list520_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause521;
    ImplTraits::TreeTypePtr::pointer where_clause521_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN514_tree;
    ImplTraits::TreeTypePtr COMMA516_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN518_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_then_key(get_psrstate()->get_treeAdaptor(), "rule then_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_list(get_psrstate()->get_treeAdaptor(), "rule expression_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_insert_key(get_psrstate()->get_treeAdaptor(), "rule insert_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_values_key(get_psrstate()->get_treeAdaptor(), "rule values_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_where_clause(get_psrstate()->get_treeAdaptor(), "rule where_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_not_key(get_psrstate()->get_treeAdaptor(), "rule not_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_when_key(get_psrstate()->get_treeAdaptor(), "rule when_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_matched_key(get_psrstate()->get_treeAdaptor(), "rule matched_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:719:5: ( when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )? -> ^( MERGE_INSERT[$when_key.start] not_key matched_key then_key insert_key ^( COLUMNS ( column_name )* ) values_key expression_list ( where_clause )? ) )
        // OracleDML.g:719:10: when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )?
        {
            this->followPush(FOLLOW_when_key_in_merge_insert_clause6934);
            when_key509=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                when_key509_last = when_key509.tree.get();
                stream_when_key.add(when_key509.tree);
            }

            this->followPush(FOLLOW_not_key_in_merge_insert_clause6936);
            not_key510=not_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                not_key510_last = not_key510.tree.get();
                stream_not_key.add(not_key510.tree);
            }

            this->followPush(FOLLOW_matched_key_in_merge_insert_clause6938);
            matched_key511=matched_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                matched_key511_last = matched_key511.tree.get();
                stream_matched_key.add(matched_key511.tree);
            }

            this->followPush(FOLLOW_then_key_in_merge_insert_clause6940);
            then_key512=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                then_key512_last = then_key512.tree.get();
                stream_then_key.add(then_key512.tree);
            }

            this->followPush(FOLLOW_insert_key_in_merge_insert_clause6942);
            insert_key513=insert_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                insert_key513_last = insert_key513.tree.get();
                stream_insert_key.add(insert_key513.tree);
            }

            // OracleDML.g:720:9: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            {
                ANTLR_UINT32 alt176=2;
                switch ( this->LA(1) )
                {
                    case LEFT_PAREN:
                    	{
                    		alt176=1;
                    	}
                        break;
                }

                switch (alt176)
                {
            	case 1:
            	    // OracleDML.g:720:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN514 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_merge_insert_clause6954);
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN514);


            	        this->followPush(FOLLOW_column_name_in_merge_insert_clause6956);
            	        column_name515=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name515_last = column_name515.tree.get();
            	            stream_column_name.add(column_name515.tree);
            	        }

            	        // OracleDML.g:720:33: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt175=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt175=1;
            	            	}
            	                break;

            	            }

            	            switch (alt175)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:720:34: COMMA column_name
            	        	    {
            	        	        COMMA516 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_merge_insert_clause6959);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemerge_insert_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA516);


            	        	        this->followPush(FOLLOW_column_name_in_merge_insert_clause6961);
            	        	        column_name517=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemerge_insert_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name517_last = column_name517.tree.get();
            	        	            stream_column_name.add(column_name517.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop175;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop175: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN518 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_merge_insert_clause6965);
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN518);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_values_key_in_merge_insert_clause6977);
            values_key519=values_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                values_key519_last = values_key519.tree.get();
                stream_values_key.add(values_key519.tree);
            }

            this->followPush(FOLLOW_expression_list_in_merge_insert_clause6979);
            expression_list520=expression_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression_list520_last = expression_list520.tree.get();
                stream_expression_list.add(expression_list520.tree);
            }

            // OracleDML.g:721:36: ( where_clause )?
            {
                ANTLR_UINT32 alt177=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt177=1;
                    	}
                        break;
                }

                switch (alt177)
                {
            	case 1:
            	    // OracleDML.g:721:36: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_merge_insert_clause6981);
            	        where_clause521=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            where_clause521_last = where_clause521.tree.get();
            	            stream_where_clause.add(where_clause521.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: not_key, insert_key, values_key, then_key, matched_key, where_clause, expression_list, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 722:9: -> ^( MERGE_INSERT[$when_key.start] not_key matched_key then_key insert_key ^( COLUMNS ( column_name )* ) values_key expression_list ( where_clause )? )
            {
            	// OracleDML.g:722:12: ^( MERGE_INSERT[$when_key.start] not_key matched_key then_key insert_key ^( COLUMNS ( column_name )* ) values_key expression_list ( where_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MERGE_INSERT, (when_key509.start)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_not_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_matched_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_then_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_insert_key.nextTree());
            	// OracleDML.g:722:84: ^( COLUMNS ( column_name )* )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(COLUMNS, "COLUMNS"), root_2);
            	// OracleDML.g:722:94: ( column_name )*
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_values_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_list.nextTree());
            	// OracleDML.g:722:135: ( where_clause )?
            	if ( stream_where_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_where_clause.nextTree());
            	}
            	stream_where_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_insert_clauseEx; /* Prevent compiler warnings */
    rulemerge_insert_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_insert_clause */

/**
 * $ANTLR start selected_tableview
 * OracleDML.g:725:1: selected_tableview : ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )? -> ^( SELECTED_TABLEVIEW ( tableview_name )? ( select_statement )? ( table_alias )? ) ;
 */
OracleDML::selected_tableview_return
OracleDML::selected_tableview()
{
    OracleDML::selected_tableview_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN523 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN525 = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name522;
    ImplTraits::TreeTypePtr::pointer tableview_name522_last = NULL;
    OracleDML::select_statement_return select_statement524;
    ImplTraits::TreeTypePtr::pointer select_statement524_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias526;
    ImplTraits::TreeTypePtr::pointer table_alias526_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN523_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN525_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:726:5: ( ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )? -> ^( SELECTED_TABLEVIEW ( tableview_name )? ( select_statement )? ( table_alias )? ) )
        // OracleDML.g:726:10: ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )?
        {
            // OracleDML.g:726:10: ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN )
            {
                ANTLR_UINT32 alt178=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt178=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt178=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 178 );
                    ex->set_state( 0 );


                    goto ruleselected_tableviewEx;

                }

                switch (alt178)
                {
            	case 1:
            	    // OracleDML.g:726:12: tableview_name
            	    {
            	        this->followPush(FOLLOW_tableview_name_in_selected_tableview7042);
            	        tableview_name522=tableview_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            tableview_name522_last = tableview_name522.tree.get();
            	            stream_tableview_name.add(tableview_name522.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:726:29: LEFT_PAREN select_statement RIGHT_PAREN
            	    {
            	        LEFT_PAREN523 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_selected_tableview7046);
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN523);


            	        this->followPush(FOLLOW_select_statement_in_selected_tableview7048);
            	        select_statement524=select_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            select_statement524_last = select_statement524.tree.get();
            	            stream_select_statement.add(select_statement524.tree);
            	        }

            	        RIGHT_PAREN525 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_selected_tableview7050);
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN525);


            	    }
            	    break;

                }
            }

            // OracleDML.g:726:70: ( table_alias )?
            {
                ANTLR_UINT32 alt179=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    	{
                    		alt179=1;
                    	}
                        break;
                }

                switch (alt179)
                {
            	case 1:
            	    // OracleDML.g:726:70: table_alias
            	    {
            	        this->followPush(FOLLOW_table_alias_in_selected_tableview7053);
            	        table_alias526=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias526_last = table_alias526.tree.get();
            	            stream_table_alias.add(table_alias526.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: table_alias, tableview_name, select_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 727:9: -> ^( SELECTED_TABLEVIEW ( tableview_name )? ( select_statement )? ( table_alias )? )
            {
            	// OracleDML.g:727:12: ^( SELECTED_TABLEVIEW ( tableview_name )? ( select_statement )? ( table_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECTED_TABLEVIEW, "SELECTED_TABLEVIEW"), root_1);
            	// OracleDML.g:727:33: ( tableview_name )?
            	if ( stream_tableview_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_tableview_name.nextTree());
            	}
            	stream_tableview_name.reset();

            	// OracleDML.g:727:49: ( select_statement )?
            	if ( stream_select_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_statement.nextTree());
            	}
            	stream_select_statement.reset();

            	// OracleDML.g:727:67: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleselected_tableviewEx; /* Prevent compiler warnings */
    ruleselected_tableviewEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end selected_tableview */

/**
 * $ANTLR start lock_table_statement
 * OracleDML.g:732:1: lock_table_statement : lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )? -> ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) ;
 */
OracleDML::lock_table_statement_return
OracleDML::lock_table_statement()
{
    OracleDML::lock_table_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA530 = NULL;
    OracleDML_OracleDMLKeys::lock_key_return lock_key527;
    ImplTraits::TreeTypePtr::pointer lock_key527_last = NULL;
    OracleDML_OracleDMLKeys::table_key_return table_key528;
    ImplTraits::TreeTypePtr::pointer table_key528_last = NULL;
    OracleDML::lock_table_element_return lock_table_element529;
    ImplTraits::TreeTypePtr::pointer lock_table_element529_last = NULL;
    OracleDML::lock_table_element_return lock_table_element531;
    ImplTraits::TreeTypePtr::pointer lock_table_element531_last = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key532;
    ImplTraits::TreeTypePtr::pointer in_key532_last = NULL;
    OracleDML::lock_mode_return lock_mode533;
    ImplTraits::TreeTypePtr::pointer lock_mode533_last = NULL;
    OracleDML_OracleDMLKeys::mode_key_return mode_key534;
    ImplTraits::TreeTypePtr::pointer mode_key534_last = NULL;
    OracleDML::wait_nowait_part_return wait_nowait_part535;
    ImplTraits::TreeTypePtr::pointer wait_nowait_part535_last = NULL;
    ImplTraits::TreeTypePtr COMMA530_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_lock_table_element(get_psrstate()->get_treeAdaptor(), "rule lock_table_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_mode_key(get_psrstate()->get_treeAdaptor(), "rule mode_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_key(get_psrstate()->get_treeAdaptor(), "rule table_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_lock_mode(get_psrstate()->get_treeAdaptor(), "rule lock_mode");
    RewriteRuleSubtreeStream<ImplTraits> stream_wait_nowait_part(get_psrstate()->get_treeAdaptor(), "rule wait_nowait_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_lock_key(get_psrstate()->get_treeAdaptor(), "rule lock_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:733:5: ( lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )? -> ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) )
        // OracleDML.g:733:10: lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )?
        {
            this->followPush(FOLLOW_lock_key_in_lock_table_statement7099);
            lock_key527=lock_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                lock_key527_last = lock_key527.tree.get();
                stream_lock_key.add(lock_key527.tree);
            }

            this->followPush(FOLLOW_table_key_in_lock_table_statement7101);
            table_key528=table_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_key528_last = table_key528.tree.get();
                stream_table_key.add(table_key528.tree);
            }

            this->followPush(FOLLOW_lock_table_element_in_lock_table_statement7112);
            lock_table_element529=lock_table_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                lock_table_element529_last = lock_table_element529.tree.get();
                stream_lock_table_element.add(lock_table_element529.tree);
            }

            // OracleDML.g:734:28: ( COMMA lock_table_element )*

            for (;;)
            {
                ANTLR_UINT32 alt180=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt180=1;
                	}
                    break;

                }

                switch (alt180)
                {
            	case 1:
            	    // OracleDML.g:734:29: COMMA lock_table_element
            	    {
            	        COMMA530 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_lock_table_statement7115);
            	        if  (this->hasException())
            	        {
            	            goto rulelock_table_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA530);


            	        this->followPush(FOLLOW_lock_table_element_in_lock_table_statement7117);
            	        lock_table_element531=lock_table_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelock_table_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            lock_table_element531_last = lock_table_element531.tree.get();
            	            stream_lock_table_element.add(lock_table_element531.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop180;	/* break out of the loop */
            	    break;
                }
            }
            loop180: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_in_key_in_lock_table_statement7130);
            in_key532=in_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                in_key532_last = in_key532.tree.get();
                stream_in_key.add(in_key532.tree);
            }

            this->followPush(FOLLOW_lock_mode_in_lock_table_statement7132);
            lock_mode533=lock_mode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                lock_mode533_last = lock_mode533.tree.get();
                stream_lock_mode.add(lock_mode533.tree);
            }

            this->followPush(FOLLOW_mode_key_in_lock_table_statement7134);
            mode_key534=mode_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                mode_key534_last = mode_key534.tree.get();
                stream_mode_key.add(mode_key534.tree);
            }

            // OracleDML.g:735:35: ( wait_nowait_part )?
            {
                ANTLR_UINT32 alt181=2;
                {
                    ANTLR_UINT32 LA181_0 = this->LA(1);
                    if ( (LA181_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "WAIT")))
                    {
                        alt181=1;
                    }
                    else if ( (LA181_0 == PLSQL_RESERVED_NOWAIT))
                    {
                        alt181=1;
                    }
                }
                switch (alt181)
                {
            	case 1:
            	    // OracleDML.g:735:35: wait_nowait_part
            	    {
            	        this->followPush(FOLLOW_wait_nowait_part_in_lock_table_statement7136);
            	        wait_nowait_part535=wait_nowait_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelock_table_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            wait_nowait_part535_last = wait_nowait_part535.tree.get();
            	            stream_wait_nowait_part.add(wait_nowait_part535.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: lock_mode, wait_nowait_part, lock_table_element, lock_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 736:9: -> ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
            {
            	// OracleDML.g:736:12: ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_lock_key.nextNode(), root_1);
            	if ( !(stream_lock_table_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "lock_table_element empty" );
            		goto rulelock_table_statementEx;
            	}
            	while ( stream_lock_table_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_lock_table_element.nextTree());
            	}
            	stream_lock_table_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_lock_mode.nextTree());
            	// OracleDML.g:736:53: ( wait_nowait_part )?
            	if ( stream_wait_nowait_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_wait_nowait_part.nextTree());
            	}
            	stream_wait_nowait_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelock_table_statementEx; /* Prevent compiler warnings */
    rulelock_table_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end lock_table_statement */

/**
 * $ANTLR start wait_nowait_part
 * OracleDML.g:739:1: wait_nowait_part : ( wait_key expression -> ^( wait_key ^( EXPR expression ) ) | nowait_key );
 */
OracleDML::wait_nowait_part_return
OracleDML::wait_nowait_part()
{
    OracleDML::wait_nowait_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::wait_key_return wait_key536;
    ImplTraits::TreeTypePtr::pointer wait_key536_last = NULL;
    OracleDML::expression_return expression537;
    ImplTraits::TreeTypePtr::pointer expression537_last = NULL;
    OracleDML_OracleDMLKeys::nowait_key_return nowait_key538;
    ImplTraits::TreeTypePtr::pointer nowait_key538_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_wait_key(get_psrstate()->get_treeAdaptor(), "rule wait_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:740:5: ( wait_key expression -> ^( wait_key ^( EXPR expression ) ) | nowait_key )

            ANTLR_UINT32 alt182;

            alt182=2;

            {
                ANTLR_UINT32 LA182_0 = this->LA(1);
                if ( (LA182_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "WAIT")))
                {
                    alt182=1;
                }
                else if ( (LA182_0 == PLSQL_RESERVED_NOWAIT))
                {
                    alt182=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 182 );
                    ex->set_state( 0 );


                    goto rulewait_nowait_partEx;

                }
            }
            switch (alt182)
            {
        	case 1:
        	    // OracleDML.g:740:10: wait_key expression
        	    {
        	        this->followPush(FOLLOW_wait_key_in_wait_nowait_part7179);
        	        wait_key536=wait_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewait_nowait_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            wait_key536_last = wait_key536.tree.get();
        	            stream_wait_key.add(wait_key536.tree);
        	        }

        	        this->followPush(FOLLOW_expression_in_wait_nowait_part7181);
        	        expression537=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewait_nowait_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression537_last = expression537.tree.get();
        	            stream_expression.add(expression537.tree);
        	        }

        	        // AST REWRITE
        	        // elements: wait_key, expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 740:30: -> ^( wait_key ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:740:33: ^( wait_key ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_wait_key.nextNode(), root_1);
        	        	// OracleDML.g:740:44: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:741:10: nowait_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_nowait_key_in_wait_nowait_part7204);
        	        nowait_key538=nowait_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewait_nowait_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nowait_key538.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulewait_nowait_partEx; /* Prevent compiler warnings */
    rulewait_nowait_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end wait_nowait_part */

/**
 * $ANTLR start lock_table_element
 * OracleDML.g:746:1: lock_table_element : tableview_name ( partition_extension_clause )? -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) ;
 */
OracleDML::lock_table_element_return
OracleDML::lock_table_element()
{
    OracleDML::lock_table_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLCommons::tableview_name_return tableview_name539;
    ImplTraits::TreeTypePtr::pointer tableview_name539_last = NULL;
    OracleDML_OracleDMLCommons::partition_extension_clause_return partition_extension_clause540;
    ImplTraits::TreeTypePtr::pointer partition_extension_clause540_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_partition_extension_clause(get_psrstate()->get_treeAdaptor(), "rule partition_extension_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:747:5: ( tableview_name ( partition_extension_clause )? -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) )
        // OracleDML.g:747:10: tableview_name ( partition_extension_clause )?
        {
            this->followPush(FOLLOW_tableview_name_in_lock_table_element7226);
            tableview_name539=tableview_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                tableview_name539_last = tableview_name539.tree.get();
                stream_tableview_name.add(tableview_name539.tree);
            }

            // OracleDML.g:747:25: ( partition_extension_clause )?
            {
                ANTLR_UINT32 alt183=2;
                {
                    ANTLR_UINT32 LA183_0 = this->LA(1);
                    if ( (LA183_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "SUBPARTITION")))))
                    {
                        alt183=1;
                    }
                }
                switch (alt183)
                {
            	case 1:
            	    // OracleDML.g:747:25: partition_extension_clause
            	    {
            	        this->followPush(FOLLOW_partition_extension_clause_in_lock_table_element7228);
            	        partition_extension_clause540=partition_extension_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelock_table_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            partition_extension_clause540_last = partition_extension_clause540.tree.get();
            	            stream_partition_extension_clause.add(partition_extension_clause540.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: tableview_name, partition_extension_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 748:9: -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
            {
            	// OracleDML.g:748:12: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOCK_TABLE_ELEMENT, "LOCK_TABLE_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_tableview_name.nextTree());
            	// OracleDML.g:748:48: ( partition_extension_clause )?
            	if ( stream_partition_extension_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_partition_extension_clause.nextTree());
            	}
            	stream_partition_extension_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelock_table_elementEx; /* Prevent compiler warnings */
    rulelock_table_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end lock_table_element */

/**
 * $ANTLR start lock_mode
 * OracleDML.g:751:1: lock_mode : ( row_key share_key | row_key exclusive_key | share_key ( update_key )? | share_key row_key exclusive_key | exclusive_key );
 */
OracleDML::lock_mode_return
OracleDML::lock_mode()
{
    OracleDML::lock_mode_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::row_key_return row_key541;
    ImplTraits::TreeTypePtr::pointer row_key541_last = NULL;
    OracleDML_OracleDMLKeys::share_key_return share_key542;
    ImplTraits::TreeTypePtr::pointer share_key542_last = NULL;
    OracleDML_OracleDMLKeys::row_key_return row_key543;
    ImplTraits::TreeTypePtr::pointer row_key543_last = NULL;
    OracleDML_OracleDMLKeys::exclusive_key_return exclusive_key544;
    ImplTraits::TreeTypePtr::pointer exclusive_key544_last = NULL;
    OracleDML_OracleDMLKeys::share_key_return share_key545;
    ImplTraits::TreeTypePtr::pointer share_key545_last = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key546;
    ImplTraits::TreeTypePtr::pointer update_key546_last = NULL;
    OracleDML_OracleDMLKeys::share_key_return share_key547;
    ImplTraits::TreeTypePtr::pointer share_key547_last = NULL;
    OracleDML_OracleDMLKeys::row_key_return row_key548;
    ImplTraits::TreeTypePtr::pointer row_key548_last = NULL;
    OracleDML_OracleDMLKeys::exclusive_key_return exclusive_key549;
    ImplTraits::TreeTypePtr::pointer exclusive_key549_last = NULL;
    OracleDML_OracleDMLKeys::exclusive_key_return exclusive_key550;
    ImplTraits::TreeTypePtr::pointer exclusive_key550_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:752:5: ( row_key share_key | row_key exclusive_key | share_key ( update_key )? | share_key row_key exclusive_key | exclusive_key )

            ANTLR_UINT32 alt185;

            alt185=5;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case PLSQL_RESERVED_SHARE:
            			{
            				alt185=1;
            			}
            		    break;
            		case PLSQL_RESERVED_EXCLUSIVE:
            			{
            				alt185=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 185 );
            		    ex->set_state( 1 );


            		    goto rulelock_modeEx;

            		}

            	}
                break;
            case PLSQL_RESERVED_SHARE:
            	{
            		switch ( this->LA(2) )
            		{
            		case PLSQL_RESERVED_MODE:
            		case SQL92_RESERVED_UPDATE:
            			{
            				alt185=3;
            			}
            		    break;
            		case REGULAR_ID:
            			{
            				alt185=4;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 185 );
            		    ex->set_state( 2 );


            		    goto rulelock_modeEx;

            		}

            	}
                break;
            case PLSQL_RESERVED_EXCLUSIVE:
            	{
            		alt185=5;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 185 );
                ex->set_state( 0 );


                goto rulelock_modeEx;

            }

            switch (alt185)
            {
        	case 1:
        	    // OracleDML.g:752:10: row_key share_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_row_key_in_lock_mode7268);
        	        row_key541=row_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, row_key541.tree);


        	        this->followPush(FOLLOW_share_key_in_lock_mode7270);
        	        share_key542=share_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, share_key542.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:753:10: row_key exclusive_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_row_key_in_lock_mode7281);
        	        row_key543=row_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, row_key543.tree);


        	        this->followPush(FOLLOW_exclusive_key_in_lock_mode7283);
        	        exclusive_key544=exclusive_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, exclusive_key544.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:754:10: share_key ( update_key )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_share_key_in_lock_mode7294);
        	        share_key545=share_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, share_key545.tree);


        	        // OracleDML.g:754:20: ( update_key )?
        	        {
        	            ANTLR_UINT32 alt184=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_UPDATE:
        	                	{
        	                		alt184=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt184)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:754:20: update_key
        	        	    {
        	        	        this->followPush(FOLLOW_update_key_in_lock_mode7296);
        	        	        update_key546=update_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelock_modeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, update_key546.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:755:10: share_key row_key exclusive_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_share_key_in_lock_mode7308);
        	        share_key547=share_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, share_key547.tree);


        	        this->followPush(FOLLOW_row_key_in_lock_mode7310);
        	        row_key548=row_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, row_key548.tree);


        	        this->followPush(FOLLOW_exclusive_key_in_lock_mode7312);
        	        exclusive_key549=exclusive_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, exclusive_key549.tree);


        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:756:10: exclusive_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_exclusive_key_in_lock_mode7323);
        	        exclusive_key550=exclusive_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, exclusive_key550.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulelock_modeEx; /* Prevent compiler warnings */
    rulelock_modeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end lock_mode */

/**
 * $ANTLR start general_table_ref
 * OracleDML.g:762:1: general_table_ref : ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )? -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? ) ;
 */
OracleDML::general_table_ref_return
OracleDML::general_table_ref()
{
    OracleDML::general_table_ref_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN553 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN555 = NULL;
    OracleDML::dml_table_expression_clause_return dml_table_expression_clause551;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause551_last = NULL;
    OracleDML_OracleDMLKeys::only_key_return only_key552;
    ImplTraits::TreeTypePtr::pointer only_key552_last = NULL;
    OracleDML::dml_table_expression_clause_return dml_table_expression_clause554;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause554_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias556;
    ImplTraits::TreeTypePtr::pointer table_alias556_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN553_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN555_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_dml_table_expression_clause(get_psrstate()->get_treeAdaptor(), "rule dml_table_expression_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_only_key(get_psrstate()->get_treeAdaptor(), "rule only_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:763:5: ( ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )? -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? ) )
        // OracleDML.g:763:10: ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )?
        {
            // OracleDML.g:763:10: ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN )
            {
                ANTLR_UINT32 alt186=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case LEFT_PAREN:
                case SQL92_RESERVED_TABLE:
                case SQL92_RESERVED_THE:
                	{
                		alt186=1;
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA186_5 = this->LA(2);
                		    if ( (!( ((toUpper(LT(1)->getText()) == "ONLY")) )))
                		    {
                		        alt186=1;
                		    }
                		    else if ( ((toUpper(LT(1)->getText()) == "ONLY")))
                		    {
                		        alt186=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 186 );
                		        ex->set_state( 5 );


                		        goto rulegeneral_table_refEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 186 );
                    ex->set_state( 0 );


                    goto rulegeneral_table_refEx;

                }

                switch (alt186)
                {
            	case 1:
            	    // OracleDML.g:763:15: dml_table_expression_clause
            	    {
            	        this->followPush(FOLLOW_dml_table_expression_clause_in_general_table_ref7351);
            	        dml_table_expression_clause551=dml_table_expression_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            dml_table_expression_clause551_last = dml_table_expression_clause551.tree.get();
            	            stream_dml_table_expression_clause.add(dml_table_expression_clause551.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:764:14: only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN
            	    {
            	        this->followPush(FOLLOW_only_key_in_general_table_ref7366);
            	        only_key552=only_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            only_key552_last = only_key552.tree.get();
            	            stream_only_key.add(only_key552.tree);
            	        }

            	        LEFT_PAREN553 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_general_table_ref7368);
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN553);


            	        this->followPush(FOLLOW_dml_table_expression_clause_in_general_table_ref7370);
            	        dml_table_expression_clause554=dml_table_expression_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            dml_table_expression_clause554_last = dml_table_expression_clause554.tree.get();
            	            stream_dml_table_expression_clause.add(dml_table_expression_clause554.tree);
            	        }

            	        RIGHT_PAREN555 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_general_table_ref7372);
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN555);


            	    }
            	    break;

                }
            }

            // OracleDML.g:765:14: ( table_alias )?
            {
                ANTLR_UINT32 alt187=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		alt187=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA187_2 = this->LA(2);
                    		    if ( (!( ((((toUpper(LT(1)->getText()) == "RETURN"))||((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "LOG"))||((toUpper(LT(1)->getText()) == "RETURNING")))) )))
                    		    {
                    		        alt187=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt187)
                {
            	case 1:
            	    // OracleDML.g:765:14: table_alias
            	    {
            	        this->followPush(FOLLOW_table_alias_in_general_table_ref7387);
            	        table_alias556=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias556_last = table_alias556.tree.get();
            	            stream_table_alias.add(table_alias556.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: dml_table_expression_clause, table_alias, only_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 766:9: -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? )
            {
            	// OracleDML.g:766:12: ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF, "TABLE_REF"), root_1);
            	// OracleDML.g:766:24: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_dml_table_expression_clause.nextTree());
            	// OracleDML.g:766:65: ( only_key )?
            	if ( stream_only_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_only_key.nextTree());
            	}
            	stream_only_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulegeneral_table_refEx; /* Prevent compiler warnings */
    rulegeneral_table_refEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end general_table_ref */

/**
 * $ANTLR start static_returning_clause
 * OracleDML.g:769:1: static_returning_clause : ( returning_key | return_key ) expression ( COMMA expression )* into_clause -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause ) ;
 */
OracleDML::static_returning_clause_return
OracleDML::static_returning_clause()
{
    OracleDML::static_returning_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA560 = NULL;
    OracleDML_OracleDMLKeys::returning_key_return returning_key557;
    ImplTraits::TreeTypePtr::pointer returning_key557_last = NULL;
    OracleDML_OracleDMLKeys::return_key_return return_key558;
    ImplTraits::TreeTypePtr::pointer return_key558_last = NULL;
    OracleDML::expression_return expression559;
    ImplTraits::TreeTypePtr::pointer expression559_last = NULL;
    OracleDML::expression_return expression561;
    ImplTraits::TreeTypePtr::pointer expression561_last = NULL;
    OracleDML_OracleDMLCommons::into_clause_return into_clause562;
    ImplTraits::TreeTypePtr::pointer into_clause562_last = NULL;
    ImplTraits::TreeTypePtr COMMA560_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_returning_key(get_psrstate()->get_treeAdaptor(), "rule returning_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_return_key(get_psrstate()->get_treeAdaptor(), "rule return_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_clause(get_psrstate()->get_treeAdaptor(), "rule into_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:770:5: ( ( returning_key | return_key ) expression ( COMMA expression )* into_clause -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause ) )
        // OracleDML.g:770:10: ( returning_key | return_key ) expression ( COMMA expression )* into_clause
        {
            // OracleDML.g:770:10: ( returning_key | return_key )
            {
                ANTLR_UINT32 alt188=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA188_1 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "RETURNING")))
                		    {
                		        alt188=1;
                		    }
                		    else if ( ((toUpper(LT(1)->getText()) == "RETURN")))
                		    {
                		        alt188=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 188 );
                		        ex->set_state( 1 );


                		        goto rulestatic_returning_clauseEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 188 );
                    ex->set_state( 0 );


                    goto rulestatic_returning_clauseEx;

                }

                switch (alt188)
                {
            	case 1:
            	    // OracleDML.g:770:11: returning_key
            	    {
            	        this->followPush(FOLLOW_returning_key_in_static_returning_clause7431);
            	        returning_key557=returning_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestatic_returning_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            returning_key557_last = returning_key557.tree.get();
            	            stream_returning_key.add(returning_key557.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:770:25: return_key
            	    {
            	        this->followPush(FOLLOW_return_key_in_static_returning_clause7433);
            	        return_key558=return_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestatic_returning_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            return_key558_last = return_key558.tree.get();
            	            stream_return_key.add(return_key558.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_expression_in_static_returning_clause7436);
            expression559=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestatic_returning_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression559_last = expression559.tree.get();
                stream_expression.add(expression559.tree);
            }

            // OracleDML.g:770:48: ( COMMA expression )*

            for (;;)
            {
                ANTLR_UINT32 alt189=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt189=1;
                	}
                    break;

                }

                switch (alt189)
                {
            	case 1:
            	    // OracleDML.g:770:49: COMMA expression
            	    {
            	        COMMA560 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_static_returning_clause7439);
            	        if  (this->hasException())
            	        {
            	            goto rulestatic_returning_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA560);


            	        this->followPush(FOLLOW_expression_in_static_returning_clause7441);
            	        expression561=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestatic_returning_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression561_last = expression561.tree.get();
            	            stream_expression.add(expression561.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop189;	/* break out of the loop */
            	    break;
                }
            }
            loop189: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_into_clause_in_static_returning_clause7454);
            into_clause562=into_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestatic_returning_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                into_clause562_last = into_clause562.tree.get();
                stream_into_clause.add(into_clause562.tree);
            }

            // AST REWRITE
            // elements: expression, into_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 772:9: -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause )
            {
            	// OracleDML.g:772:12: ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(STATIC_RETURNING, "STATIC_RETURNING"), root_1);
            	if ( !(stream_expression.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "expression empty" );
            		goto rulestatic_returning_clauseEx;
            	}
            	while ( stream_expression.hasNext() ) {
            		// OracleDML.g:772:31: ^( EXPR expression )
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_expression.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_into_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestatic_returning_clauseEx; /* Prevent compiler warnings */
    rulestatic_returning_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end static_returning_clause */

/**
 * $ANTLR start error_logging_clause
 * OracleDML.g:775:1: error_logging_clause : log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )? -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? ) ;
 */
OracleDML::error_logging_clause_return
OracleDML::error_logging_clause()
{
    OracleDML::error_logging_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::log_key_return log_key563;
    ImplTraits::TreeTypePtr::pointer log_key563_last = NULL;
    OracleDML_OracleDMLKeys::errors_key_return errors_key564;
    ImplTraits::TreeTypePtr::pointer errors_key564_last = NULL;
    OracleDML::error_logging_into_part_return error_logging_into_part565;
    ImplTraits::TreeTypePtr::pointer error_logging_into_part565_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper566;
    ImplTraits::TreeTypePtr::pointer expression_wrapper566_last = NULL;
    OracleDML::error_logging_reject_part_return error_logging_reject_part567;
    ImplTraits::TreeTypePtr::pointer error_logging_reject_part567_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_reject_part(get_psrstate()->get_treeAdaptor(), "rule error_logging_reject_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_wrapper(get_psrstate()->get_treeAdaptor(), "rule expression_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_errors_key(get_psrstate()->get_treeAdaptor(), "rule errors_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_into_part(get_psrstate()->get_treeAdaptor(), "rule error_logging_into_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_log_key(get_psrstate()->get_treeAdaptor(), "rule log_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:776:5: ( log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )? -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? ) )
        // OracleDML.g:776:10: log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )?
        {
            this->followPush(FOLLOW_log_key_in_error_logging_clause7497);
            log_key563=log_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                log_key563_last = log_key563.tree.get();
                stream_log_key.add(log_key563.tree);
            }

            this->followPush(FOLLOW_errors_key_in_error_logging_clause7499);
            errors_key564=errors_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                errors_key564_last = errors_key564.tree.get();
                stream_errors_key.add(errors_key564.tree);
            }

            // OracleDML.g:777:9: ( error_logging_into_part )?
            {
                ANTLR_UINT32 alt190=2;
                alt190 = cdfa190.predict(this, this->get_rec(), this->get_istream(), cdfa190 );
                if  (this->hasException())
                {
                    goto ruleerror_logging_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                switch (alt190)
                {
            	case 1:
            	    // OracleDML.g:777:9: error_logging_into_part
            	    {
            	        this->followPush(FOLLOW_error_logging_into_part_in_error_logging_clause7510);
            	        error_logging_into_part565=error_logging_into_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_into_part565_last = error_logging_into_part565.tree.get();
            	            stream_error_logging_into_part.add(error_logging_into_part565.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:778:9: ( ( LEFT_PAREN )=> expression_wrapper )?
            {
                ANTLR_UINT32 alt191=2;
                {
                    ANTLR_UINT32 LA191_0 = this->LA(1);
                    if ( (LA191_0 == SQL92_RESERVED_CURSOR) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == SQL92_RESERVED_NOT) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == MINUS_SIGN) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == PLUS_SIGN) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == SQL92_RESERVED_PRIOR) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "REJECT")))
                    {
                        {
                            ANTLR_UINT32 LA191_7 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                            {
                                alt191=1;
                            }
                        }
                    }
                    else if ( (LA191_0 == SQL92_RESERVED_DISTINCT) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == SQL92_RESERVED_ALL) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == DELIMITED_ID) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == SQL92_RESERVED_CASE) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == SQL92_RESERVED_EXISTS) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == SQL92_RESERVED_ANY) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == PLSQL_NON_RESERVED_CAST) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == INTRODUCER) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == BINDVAR) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == COLON) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == APPROXIMATE_NUM_LIT || LA191_0 == EXACT_NUM_LIT || LA191_0 == UNSIGNED_INTEGER) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == SQL92_RESERVED_DATE) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (((LA191_0 >= CHAR_STRING) && (LA191_0 <= CHAR_STRING_PERL)) || LA191_0 == NATIONAL_CHAR_STRING_LIT) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == SQL92_RESERVED_NULL) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == SQL92_RESERVED_TRUE) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == SQL92_RESERVED_FALSE) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == SQL92_RESERVED_DEFAULT) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                    {
                        alt191=1;
                    }
                    else if ( (LA191_0 == LEFT_PAREN))
                    {
                        {
                            ANTLR_UINT32 LA191_25 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                            {
                                alt191=1;
                            }
                        }
                    }
                }
                switch (alt191)
                {
            	case 1:
            	    // OracleDML.g:778:10: ( LEFT_PAREN )=> expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_error_logging_clause7527);
            	        expression_wrapper566=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_wrapper566_last = expression_wrapper566.tree.get();
            	            stream_expression_wrapper.add(expression_wrapper566.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:779:9: ( error_logging_reject_part )?
            {
                ANTLR_UINT32 alt192=2;
                {
                    ANTLR_UINT32 LA192_0 = this->LA(1);
                    if ( (LA192_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "REJECT")))
                    {
                        alt192=1;
                    }
                }
                switch (alt192)
                {
            	case 1:
            	    // OracleDML.g:779:9: error_logging_reject_part
            	    {
            	        this->followPush(FOLLOW_error_logging_reject_part_in_error_logging_clause7539);
            	        error_logging_reject_part567=error_logging_reject_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_reject_part567_last = error_logging_reject_part567.tree.get();
            	            stream_error_logging_reject_part.add(error_logging_reject_part567.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: error_logging_reject_part, expression_wrapper, log_key, error_logging_into_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 780:9: -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? )
            {
            	// OracleDML.g:780:12: ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_log_key.nextNode(), root_1);
            	// OracleDML.g:780:22: ( error_logging_into_part )?
            	if ( stream_error_logging_into_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_into_part.nextTree());
            	}
            	stream_error_logging_into_part.reset();

            	// OracleDML.g:780:47: ( expression_wrapper )?
            	if ( stream_expression_wrapper.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_wrapper.nextTree());
            	}
            	stream_expression_wrapper.reset();

            	// OracleDML.g:780:67: ( error_logging_reject_part )?
            	if ( stream_error_logging_reject_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_reject_part.nextTree());
            	}
            	stream_error_logging_reject_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleerror_logging_clauseEx; /* Prevent compiler warnings */
    ruleerror_logging_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end error_logging_clause */

/**
 * $ANTLR start error_logging_into_part
 * OracleDML.g:783:1: error_logging_into_part : into_key ^ tableview_name ;
 */
OracleDML::error_logging_into_part_return
OracleDML::error_logging_into_part()
{
    OracleDML::error_logging_into_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::into_key_return into_key568;
    ImplTraits::TreeTypePtr::pointer into_key568_last = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name569;
    ImplTraits::TreeTypePtr::pointer tableview_name569_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:784:5: ( into_key ^ tableview_name )
        // OracleDML.g:784:10: into_key ^ tableview_name
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_into_key_in_error_logging_into_part7583);
            into_key568=into_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_into_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(into_key568.tree, root_0);

            this->followPush(FOLLOW_tableview_name_in_error_logging_into_part7586);
            tableview_name569=tableview_name();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_into_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, tableview_name569.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleerror_logging_into_partEx; /* Prevent compiler warnings */
    ruleerror_logging_into_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end error_logging_into_part */

/**
 * $ANTLR start error_logging_reject_part
 * OracleDML.g:787:1: error_logging_reject_part : reject_key ^ limit_key ! ( ( unlimited_key )=> unlimited_key | expression_wrapper ) ;
 */
OracleDML::error_logging_reject_part_return
OracleDML::error_logging_reject_part()
{
    OracleDML::error_logging_reject_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::reject_key_return reject_key570;
    ImplTraits::TreeTypePtr::pointer reject_key570_last = NULL;
    OracleDML_OracleDMLKeys::limit_key_return limit_key571;
    ImplTraits::TreeTypePtr::pointer limit_key571_last = NULL;
    OracleDML_OracleDMLKeys::unlimited_key_return unlimited_key572;
    ImplTraits::TreeTypePtr::pointer unlimited_key572_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper573;
    ImplTraits::TreeTypePtr::pointer expression_wrapper573_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:788:5: ( reject_key ^ limit_key ! ( ( unlimited_key )=> unlimited_key | expression_wrapper ) )
        // OracleDML.g:788:10: reject_key ^ limit_key ! ( ( unlimited_key )=> unlimited_key | expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_reject_key_in_error_logging_reject_part7606);
            reject_key570=reject_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_reject_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(reject_key570.tree, root_0);

            this->followPush(FOLLOW_limit_key_in_error_logging_reject_part7609);
            limit_key571=limit_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_reject_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            // OracleDML.g:788:33: ( ( unlimited_key )=> unlimited_key | expression_wrapper )
            {
                ANTLR_UINT32 alt193=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA193_1 = this->LA(2);
                		    if ( (( ((toUpper(LT(1)->getText()) == "UNLIMITED")) && (this->msynpred( antlr3::ClassForwarder<synpred26_OracleDML>() )) )))
                		    {
                		        alt193=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt193=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 193 );
                		        ex->set_state( 1 );


                		        goto ruleerror_logging_reject_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt193=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 193 );
                    ex->set_state( 0 );


                    goto ruleerror_logging_reject_partEx;

                }

                switch (alt193)
                {
            	case 1:
            	    // OracleDML.g:788:34: ( unlimited_key )=> unlimited_key
            	    {
            	        this->followPush(FOLLOW_unlimited_key_in_error_logging_reject_part7617);
            	        unlimited_key572=unlimited_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_reject_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unlimited_key572.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:788:65: expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_error_logging_reject_part7619);
            	        expression_wrapper573=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_reject_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper573.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleerror_logging_reject_partEx; /* Prevent compiler warnings */
    ruleerror_logging_reject_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end error_logging_reject_part */

/**
 * $ANTLR start dml_table_expression_clause
 * OracleDML.g:791:1: dml_table_expression_clause : ( table_collection_expression -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) ) | LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN -> ^( TABLE_EXPRESSION ^( NESTED_SUBQUERY[$LEFT_PAREN] ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN ) ) | tableview_name ( sample_clause )? -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) );
 */
OracleDML::dml_table_expression_clause_return
OracleDML::dml_table_expression_clause()
{
    OracleDML::dml_table_expression_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN575 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN578 = NULL;
    OracleDML::table_collection_expression_return table_collection_expression574;
    ImplTraits::TreeTypePtr::pointer table_collection_expression574_last = NULL;
    OracleDML::select_statement_return select_statement576;
    ImplTraits::TreeTypePtr::pointer select_statement576_last = NULL;
    OracleDML::subquery_restriction_clause_return subquery_restriction_clause577;
    ImplTraits::TreeTypePtr::pointer subquery_restriction_clause577_last = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name579;
    ImplTraits::TreeTypePtr::pointer tableview_name579_last = NULL;
    OracleDML::sample_clause_return sample_clause580;
    ImplTraits::TreeTypePtr::pointer sample_clause580_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN575_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN578_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_sample_clause(get_psrstate()->get_treeAdaptor(), "rule sample_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_collection_expression(get_psrstate()->get_treeAdaptor(), "rule table_collection_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_restriction_clause(get_psrstate()->get_treeAdaptor(), "rule subquery_restriction_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:792:5: ( table_collection_expression -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) ) | LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN -> ^( TABLE_EXPRESSION ^( NESTED_SUBQUERY[$LEFT_PAREN] ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN ) ) | tableview_name ( sample_clause )? -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) )

            ANTLR_UINT32 alt196;

            alt196=3;

            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_TABLE:
            case SQL92_RESERVED_THE:
            	{
            		alt196=1;
            	}
                break;
            case LEFT_PAREN:
            	{
            		alt196=2;
            	}
                break;
            case DELIMITED_ID:
            case INTRODUCER:
            case REGULAR_ID:
            	{
            		alt196=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 196 );
                ex->set_state( 0 );


                goto ruledml_table_expression_clauseEx;

            }

            switch (alt196)
            {
        	case 1:
        	    // OracleDML.g:792:10: table_collection_expression
        	    {
        	        this->followPush(FOLLOW_table_collection_expression_in_dml_table_expression_clause7640);
        	        table_collection_expression574=table_collection_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            table_collection_expression574_last = table_collection_expression574.tree.get();
        	            stream_table_collection_expression.add(table_collection_expression574.tree);
        	        }

        	        // AST REWRITE
        	        // elements: table_collection_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 792:38: -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) )
        	        {
        	        	// OracleDML.g:792:41: ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_EXPRESSION, "TABLE_EXPRESSION"), root_1);
        	        	// OracleDML.g:792:60: ^( COLLECTION_MODE table_collection_expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(COLLECTION_MODE, "COLLECTION_MODE"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_table_collection_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:793:10: LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN
        	    {
        	        LEFT_PAREN575 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7663);
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN575);


        	        this->followPush(FOLLOW_select_statement_in_dml_table_expression_clause7665);
        	        select_statement576=select_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            select_statement576_last = select_statement576.tree.get();
        	            stream_select_statement.add(select_statement576.tree);
        	        }

        	        // OracleDML.g:793:38: ( subquery_restriction_clause )?
        	        {
        	            ANTLR_UINT32 alt194=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_WITH:
        	                	{
        	                		alt194=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt194)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:793:38: subquery_restriction_clause
        	        	    {
        	        	        this->followPush(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7667);
        	        	        subquery_restriction_clause577=subquery_restriction_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruledml_table_expression_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            subquery_restriction_clause577_last = subquery_restriction_clause577.tree.get();
        	        	            stream_subquery_restriction_clause.add(subquery_restriction_clause577.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN578 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7670);
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN578);


        	        // AST REWRITE
        	        // elements: RIGHT_PAREN, select_statement, subquery_restriction_clause
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 794:10: -> ^( TABLE_EXPRESSION ^( NESTED_SUBQUERY[$LEFT_PAREN] ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN ) )
        	        {
        	        	// OracleDML.g:794:13: ^( TABLE_EXPRESSION ^( NESTED_SUBQUERY[$LEFT_PAREN] ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_EXPRESSION, "TABLE_EXPRESSION"), root_1);
        	        	// OracleDML.g:794:32: ^( NESTED_SUBQUERY[$LEFT_PAREN] ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_SUBQUERY, LEFT_PAREN575), root_2);
        	        	// OracleDML.g:794:63: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_MODE, "SELECT_MODE"), root_3);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_select_statement.nextTree());
        	        	// OracleDML.g:794:94: ( subquery_restriction_clause )?
        	        	if ( stream_subquery_restriction_clause.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_subquery_restriction_clause.nextTree());
        	        	}
        	        	stream_subquery_restriction_clause.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_RIGHT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:795:10: tableview_name ( sample_clause )?
        	    {
        	        this->followPush(FOLLOW_tableview_name_in_dml_table_expression_clause7712);
        	        tableview_name579=tableview_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            tableview_name579_last = tableview_name579.tree.get();
        	            stream_tableview_name.add(tableview_name579.tree);
        	        }

        	        // OracleDML.g:795:25: ( sample_clause )?
        	        {
        	            ANTLR_UINT32 alt195=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA195_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "SAMPLE")))
        	                		    {
        	                		        alt195=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt195)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:795:25: sample_clause
        	        	    {
        	        	        this->followPush(FOLLOW_sample_clause_in_dml_table_expression_clause7714);
        	        	        sample_clause580=sample_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruledml_table_expression_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            sample_clause580_last = sample_clause580.tree.get();
        	        	            stream_sample_clause.add(sample_clause580.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: sample_clause, tableview_name
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 795:40: -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) )
        	        {
        	        	// OracleDML.g:795:43: ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_EXPRESSION, "TABLE_EXPRESSION"), root_1);
        	        	// OracleDML.g:795:62: ^( DIRECT_MODE tableview_name ( sample_clause )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DIRECT_MODE, "DIRECT_MODE"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_tableview_name.nextTree());
        	        	// OracleDML.g:795:91: ( sample_clause )?
        	        	if ( stream_sample_clause.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_sample_clause.nextTree());
        	        	}
        	        	stream_sample_clause.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruledml_table_expression_clauseEx; /* Prevent compiler warnings */
    ruledml_table_expression_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end dml_table_expression_clause */

/**
 * $ANTLR start table_collection_expression
 * OracleDML.g:798:1: table_collection_expression : ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN ) -> ^( EXPR ( subquery )? ( expression )? ) ;
 */
OracleDML::table_collection_expression_return
OracleDML::table_collection_expression()
{
    OracleDML::table_collection_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN583 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN585 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN586 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN588 = NULL;
    OracleDML_OracleDMLKeys::table_key_return table_key581;
    ImplTraits::TreeTypePtr::pointer table_key581_last = NULL;
    OracleDML_OracleDMLKeys::the_key_return the_key582;
    ImplTraits::TreeTypePtr::pointer the_key582_last = NULL;
    OracleDML::subquery_return subquery584;
    ImplTraits::TreeTypePtr::pointer subquery584_last = NULL;
    OracleDML::expression_return expression587;
    ImplTraits::TreeTypePtr::pointer expression587_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN583_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN585_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN586_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN588_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_key(get_psrstate()->get_treeAdaptor(), "rule table_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_the_key(get_psrstate()->get_treeAdaptor(), "rule the_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:799:5: ( ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN ) -> ^( EXPR ( subquery )? ( expression )? ) )
        // OracleDML.g:799:10: ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN )
        {
            // OracleDML.g:799:10: ( table_key | the_key )
            {
                ANTLR_UINT32 alt197=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_TABLE:
                	{
                		alt197=1;
                	}
                    break;
                case SQL92_RESERVED_THE:
                	{
                		alt197=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 197 );
                    ex->set_state( 0 );


                    goto ruletable_collection_expressionEx;

                }

                switch (alt197)
                {
            	case 1:
            	    // OracleDML.g:799:12: table_key
            	    {
            	        this->followPush(FOLLOW_table_key_in_table_collection_expression7752);
            	        table_key581=table_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_key581_last = table_key581.tree.get();
            	            stream_table_key.add(table_key581.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:799:24: the_key
            	    {
            	        this->followPush(FOLLOW_the_key_in_table_collection_expression7756);
            	        the_key582=the_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            the_key582_last = the_key582.tree.get();
            	            stream_the_key.add(the_key582.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:800:10: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN )
            {
                ANTLR_UINT32 alt198=2;
                switch ( this->LA(1) )
                {
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA198_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred27_OracleDML>() )))
                		    {
                		        alt198=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt198=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 198 );
                		        ex->set_state( 1 );


                		        goto ruletable_collection_expressionEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 198 );
                    ex->set_state( 0 );


                    goto ruletable_collection_expressionEx;

                }

                switch (alt198)
                {
            	case 1:
            	    // OracleDML.g:800:12: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
            	    {
            	        LEFT_PAREN583 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_table_collection_expression7784);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN583);


            	        this->followPush(FOLLOW_subquery_in_table_collection_expression7786);
            	        subquery584=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery584_last = subquery584.tree.get();
            	            stream_subquery.add(subquery584.tree);
            	        }

            	        RIGHT_PAREN585 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_table_collection_expression7788);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN585);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:801:12: LEFT_PAREN expression RIGHT_PAREN
            	    {
            	        LEFT_PAREN586 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_table_collection_expression7801);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN586);


            	        this->followPush(FOLLOW_expression_in_table_collection_expression7803);
            	        expression587=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression587_last = expression587.tree.get();
            	            stream_expression.add(expression587.tree);
            	        }

            	        RIGHT_PAREN588 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_table_collection_expression7805);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN588);


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: subquery, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 803:9: -> ^( EXPR ( subquery )? ( expression )? )
            {
            	// OracleDML.g:803:12: ^( EXPR ( subquery )? ( expression )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	// OracleDML.g:803:19: ( subquery )?
            	if ( stream_subquery.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	}
            	stream_subquery.reset();

            	// OracleDML.g:803:29: ( expression )?
            	if ( stream_expression.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            	}
            	stream_expression.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_collection_expressionEx; /* Prevent compiler warnings */
    ruletable_collection_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_collection_expression */

/**
 * $ANTLR start subquery_restriction_clause
 * OracleDML.g:806:1: subquery_restriction_clause : with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? ) -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? ) ;
 */
OracleDML::subquery_restriction_clause_return
OracleDML::subquery_restriction_clause()
{
    OracleDML::subquery_restriction_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::with_key_return with_key589;
    ImplTraits::TreeTypePtr::pointer with_key589_last = NULL;
    OracleDML_OracleDMLKeys::read_key_return read_key590;
    ImplTraits::TreeTypePtr::pointer read_key590_last = NULL;
    OracleDML_OracleDMLKeys::only_key_return only_key591;
    ImplTraits::TreeTypePtr::pointer only_key591_last = NULL;
    OracleDML_OracleDMLKeys::check_key_return check_key592;
    ImplTraits::TreeTypePtr::pointer check_key592_last = NULL;
    OracleDML_OracleDMLKeys::option_key_return option_key593;
    ImplTraits::TreeTypePtr::pointer option_key593_last = NULL;
    OracleDML_OracleDMLKeys::constraint_key_return constraint_key594;
    ImplTraits::TreeTypePtr::pointer constraint_key594_last = NULL;
    OracleDML_OracleDMLCommons::constraint_name_return constraint_name595;
    ImplTraits::TreeTypePtr::pointer constraint_name595_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_with_key(get_psrstate()->get_treeAdaptor(), "rule with_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_constraint_key(get_psrstate()->get_treeAdaptor(), "rule constraint_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_check_key(get_psrstate()->get_treeAdaptor(), "rule check_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_option_key(get_psrstate()->get_treeAdaptor(), "rule option_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_constraint_name(get_psrstate()->get_treeAdaptor(), "rule constraint_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_read_key(get_psrstate()->get_treeAdaptor(), "rule read_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_only_key(get_psrstate()->get_treeAdaptor(), "rule only_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:807:5: ( with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? ) -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? ) )
        // OracleDML.g:807:10: with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? )
        {
            this->followPush(FOLLOW_with_key_in_subquery_restriction_clause7858);
            with_key589=with_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubquery_restriction_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                with_key589_last = with_key589.tree.get();
                stream_with_key.add(with_key589.tree);
            }

            // OracleDML.g:808:5: ( read_key only_key | check_key option_key ( constraint_key constraint_name )? )
            {
                ANTLR_UINT32 alt200=2;
                {
                    ANTLR_UINT32 LA200_0 = this->LA(1);
                    if ( (LA200_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "READ")))
                    {
                        alt200=1;
                    }
                    else if ( (LA200_0 == SQL92_RESERVED_CHECK))
                    {
                        alt200=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 200 );
                        ex->set_state( 0 );


                        goto rulesubquery_restriction_clauseEx;

                    }
                }
                switch (alt200)
                {
            	case 1:
            	    // OracleDML.g:808:10: read_key only_key
            	    {
            	        this->followPush(FOLLOW_read_key_in_subquery_restriction_clause7869);
            	        read_key590=read_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_restriction_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            read_key590_last = read_key590.tree.get();
            	            stream_read_key.add(read_key590.tree);
            	        }

            	        this->followPush(FOLLOW_only_key_in_subquery_restriction_clause7871);
            	        only_key591=only_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_restriction_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            only_key591_last = only_key591.tree.get();
            	            stream_only_key.add(only_key591.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:809:10: check_key option_key ( constraint_key constraint_name )?
            	    {
            	        this->followPush(FOLLOW_check_key_in_subquery_restriction_clause7882);
            	        check_key592=check_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_restriction_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            check_key592_last = check_key592.tree.get();
            	            stream_check_key.add(check_key592.tree);
            	        }

            	        this->followPush(FOLLOW_option_key_in_subquery_restriction_clause7884);
            	        option_key593=option_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_restriction_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            option_key593_last = option_key593.tree.get();
            	            stream_option_key.add(option_key593.tree);
            	        }

            	        // OracleDML.g:809:31: ( constraint_key constraint_name )?
            	        {
            	            ANTLR_UINT32 alt199=2;
            	            {
            	                ANTLR_UINT32 LA199_0 = this->LA(1);
            	                if ( (LA199_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "CONSTRAINT")))
            	                {
            	                    alt199=1;
            	                }
            	            }
            	            switch (alt199)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:809:32: constraint_key constraint_name
            	        	    {
            	        	        this->followPush(FOLLOW_constraint_key_in_subquery_restriction_clause7887);
            	        	        constraint_key594=constraint_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesubquery_restriction_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            constraint_key594_last = constraint_key594.tree.get();
            	        	            stream_constraint_key.add(constraint_key594.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_constraint_name_in_subquery_restriction_clause7889);
            	        	        constraint_name595=constraint_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesubquery_restriction_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            constraint_name595_last = constraint_name595.tree.get();
            	        	            stream_constraint_name.add(constraint_name595.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: with_key, check_key, read_key, constraint_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 811:9: -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? )
            {
            	// OracleDML.g:811:12: ^( with_key ( read_key )? ( check_key )? ( constraint_name )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_with_key.nextNode(), root_1);
            	// OracleDML.g:811:23: ( read_key )?
            	if ( stream_read_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_read_key.nextTree());
            	}
            	stream_read_key.reset();

            	// OracleDML.g:811:33: ( check_key )?
            	if ( stream_check_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_check_key.nextTree());
            	}
            	stream_check_key.reset();

            	// OracleDML.g:811:44: ( constraint_name )?
            	if ( stream_constraint_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_constraint_name.nextTree());
            	}
            	stream_constraint_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesubquery_restriction_clauseEx; /* Prevent compiler warnings */
    rulesubquery_restriction_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery_restriction_clause */

/**
 * $ANTLR start sample_clause
 * OracleDML.g:814:1: sample_clause : sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )? -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? ) ;
 */
OracleDML::sample_clause_return
OracleDML::sample_clause()
{
    OracleDML::sample_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN598 = NULL;
    ImplTraits::CommonTokenType const* COMMA599 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN600 = NULL;
    OracleDML::expression_return e1;
    ImplTraits::TreeTypePtr::pointer e1_last = NULL;
    OracleDML::expression_return e2;
    ImplTraits::TreeTypePtr::pointer e2_last = NULL;
    OracleDML_OracleDMLKeys::sample_key_return sample_key596;
    ImplTraits::TreeTypePtr::pointer sample_key596_last = NULL;
    OracleDML_OracleDMLKeys::block_key_return block_key597;
    ImplTraits::TreeTypePtr::pointer block_key597_last = NULL;
    OracleDML::seed_part_return seed_part601;
    ImplTraits::TreeTypePtr::pointer seed_part601_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN598_tree;
    ImplTraits::TreeTypePtr COMMA599_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN600_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_seed_part(get_psrstate()->get_treeAdaptor(), "rule seed_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_sample_key(get_psrstate()->get_treeAdaptor(), "rule sample_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_block_key(get_psrstate()->get_treeAdaptor(), "rule block_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:815:5: ( sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )? -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? ) )
        // OracleDML.g:815:10: sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )?
        {
            this->followPush(FOLLOW_sample_key_in_sample_clause7940);
            sample_key596=sample_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesample_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                sample_key596_last = sample_key596.tree.get();
                stream_sample_key.add(sample_key596.tree);
            }

            // OracleDML.g:815:21: ( block_key )?
            {
                ANTLR_UINT32 alt201=2;
                {
                    ANTLR_UINT32 LA201_0 = this->LA(1);
                    if ( (LA201_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "BLOCK")))
                    {
                        alt201=1;
                    }
                }
                switch (alt201)
                {
            	case 1:
            	    // OracleDML.g:815:21: block_key
            	    {
            	        this->followPush(FOLLOW_block_key_in_sample_clause7942);
            	        block_key597=block_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesample_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            block_key597_last = block_key597.tree.get();
            	            stream_block_key.add(block_key597.tree);
            	        }

            	    }
            	    break;

                }
            }

            LEFT_PAREN598 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_sample_clause7954);
            if  (this->hasException())
            {
                goto rulesample_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN598);


            this->followPush(FOLLOW_expression_in_sample_clause7958);
            e1=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesample_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                e1_last = e1.tree.get();
                stream_expression.add(e1.tree);
            }

            // OracleDML.g:816:34: ( COMMA e2= expression )?
            {
                ANTLR_UINT32 alt202=2;
                switch ( this->LA(1) )
                {
                    case COMMA:
                    	{
                    		alt202=1;
                    	}
                        break;
                }

                switch (alt202)
                {
            	case 1:
            	    // OracleDML.g:816:35: COMMA e2= expression
            	    {
            	        COMMA599 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_sample_clause7961);
            	        if  (this->hasException())
            	        {
            	            goto rulesample_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA599);


            	        this->followPush(FOLLOW_expression_in_sample_clause7965);
            	        e2=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesample_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            e2_last = e2.tree.get();
            	            stream_expression.add(e2.tree);
            	        }

            	    }
            	    break;

                }
            }

            RIGHT_PAREN600 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_sample_clause7969);
            if  (this->hasException())
            {
                goto rulesample_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN600);


            // OracleDML.g:817:9: ( seed_part )?
            {
                ANTLR_UINT32 alt203=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA203_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "SEED")))
                    		    {
                    		        alt203=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt203)
                {
            	case 1:
            	    // OracleDML.g:817:9: seed_part
            	    {
            	        this->followPush(FOLLOW_seed_part_in_sample_clause7979);
            	        seed_part601=seed_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesample_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            seed_part601_last = seed_part601.tree.get();
            	            stream_seed_part.add(seed_part601.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: e1, sample_key, e2, block_key, seed_part
            // token labels: 
            // rule labels: retval, e1, e2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
            RewriteRuleSubtreeStream<ImplTraits> stream_e1(get_psrstate()->get_treeAdaptor(), "rule e1",e1_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_e2(get_psrstate()->get_treeAdaptor(), "rule e2",e2_last); // rewrite alias

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 818:9: -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? )
            {
            	// OracleDML.g:818:12: ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_sample_key.nextNode(), root_1);
            	// OracleDML.g:818:25: ( block_key )?
            	if ( stream_block_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_block_key.nextTree());
            	}
            	stream_block_key.reset();

            	// OracleDML.g:818:36: ^( EXPR $e1)
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_e1.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:818:48: ( ^( EXPR $e2) )?
            	if ( stream_e2.hasNext() ) {
            		// OracleDML.g:818:48: ^( EXPR $e2)
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_e2.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_e2.reset();

            	// OracleDML.g:818:61: ( seed_part )?
            	if ( stream_seed_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_seed_part.nextTree());
            	}
            	stream_seed_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesample_clauseEx; /* Prevent compiler warnings */
    rulesample_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end sample_clause */

/**
 * $ANTLR start seed_part
 * OracleDML.g:821:1: seed_part : seed_key LEFT_PAREN expression RIGHT_PAREN -> ^( seed_key LEFT_PAREN ^( EXPR expression ) RIGHT_PAREN ) ;
 */
OracleDML::seed_part_return
OracleDML::seed_part()
{
    OracleDML::seed_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN603 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN605 = NULL;
    OracleDML_OracleDMLKeys::seed_key_return seed_key602;
    ImplTraits::TreeTypePtr::pointer seed_key602_last = NULL;
    OracleDML::expression_return expression604;
    ImplTraits::TreeTypePtr::pointer expression604_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN603_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN605_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_seed_key(get_psrstate()->get_treeAdaptor(), "rule seed_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:822:5: ( seed_key LEFT_PAREN expression RIGHT_PAREN -> ^( seed_key LEFT_PAREN ^( EXPR expression ) RIGHT_PAREN ) )
        // OracleDML.g:822:10: seed_key LEFT_PAREN expression RIGHT_PAREN
        {
            this->followPush(FOLLOW_seed_key_in_seed_part8035);
            seed_key602=seed_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleseed_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                seed_key602_last = seed_key602.tree.get();
                stream_seed_key.add(seed_key602.tree);
            }

            LEFT_PAREN603 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_seed_part8037);
            if  (this->hasException())
            {
                goto ruleseed_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN603);


            this->followPush(FOLLOW_expression_in_seed_part8039);
            expression604=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleseed_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression604_last = expression604.tree.get();
                stream_expression.add(expression604.tree);
            }

            RIGHT_PAREN605 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_seed_part8041);
            if  (this->hasException())
            {
                goto ruleseed_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN605);


            // AST REWRITE
            // elements: LEFT_PAREN, RIGHT_PAREN, expression, seed_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 823:9: -> ^( seed_key LEFT_PAREN ^( EXPR expression ) RIGHT_PAREN )
            {
            	// OracleDML.g:823:12: ^( seed_key LEFT_PAREN ^( EXPR expression ) RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_seed_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
            	// OracleDML.g:823:34: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleseed_partEx; /* Prevent compiler warnings */
    ruleseed_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end seed_part */

/**
 * $ANTLR start cursor_expression
 * OracleDML.g:829:1: cursor_expression : cursor_key LEFT_PAREN subquery RIGHT_PAREN ;
 */
OracleDML::cursor_expression_return
OracleDML::cursor_expression()
{
    OracleDML::cursor_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN607 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN609 = NULL;
    OracleDML_OracleDMLKeys::cursor_key_return cursor_key606;
    ImplTraits::TreeTypePtr::pointer cursor_key606_last = NULL;
    OracleDML::subquery_return subquery608;
    ImplTraits::TreeTypePtr::pointer subquery608_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN607_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN609_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:830:5: ( cursor_key LEFT_PAREN subquery RIGHT_PAREN )
        // OracleDML.g:830:10: cursor_key LEFT_PAREN subquery RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_cursor_key_in_cursor_expression8088);
            cursor_key606=cursor_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecursor_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cursor_key606.tree);


            LEFT_PAREN607 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_cursor_expression8090);
            if  (this->hasException())
            {
                goto rulecursor_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN607_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN607));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN607_tree);
            }


            this->followPush(FOLLOW_subquery_in_cursor_expression8092);
            subquery608=subquery();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecursor_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery608.tree);


            RIGHT_PAREN609 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_cursor_expression8094);
            if  (this->hasException())
            {
                goto rulecursor_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN609_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN609));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN609_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecursor_expressionEx; /* Prevent compiler warnings */
    rulecursor_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cursor_expression */

/**
 * $ANTLR start expression_list
 * OracleDML.g:833:1: expression_list : LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN -> ^( EXPR_LIST[$LEFT_PAREN] ( ^( EXPR expression ) )* RIGHT_PAREN ) ;
 */
OracleDML::expression_list_return
OracleDML::expression_list()
{
    OracleDML::expression_list_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN610 = NULL;
    ImplTraits::CommonTokenType const* COMMA612 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN614 = NULL;
    OracleDML::expression_return expression611;
    ImplTraits::TreeTypePtr::pointer expression611_last = NULL;
    OracleDML::expression_return expression613;
    ImplTraits::TreeTypePtr::pointer expression613_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN610_tree;
    ImplTraits::TreeTypePtr COMMA612_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN614_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:834:5: ( LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN -> ^( EXPR_LIST[$LEFT_PAREN] ( ^( EXPR expression ) )* RIGHT_PAREN ) )
        // OracleDML.g:834:10: LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN
        {
            LEFT_PAREN610 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_expression_list8114);
            if  (this->hasException())
            {
                goto ruleexpression_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN610);


            // OracleDML.g:834:21: ( expression )?
            {
                ANTLR_UINT32 alt204=2;
                switch ( this->LA(1) )
                {
                    case APPROXIMATE_NUM_LIT:
                    case BINDVAR:
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case COLON:
                    case DELIMITED_ID:
                    case EXACT_NUM_LIT:
                    case INTRODUCER:
                    case LEFT_PAREN:
                    case MINUS_SIGN:
                    case NATIONAL_CHAR_STRING_LIT:
                    case PLSQL_NON_RESERVED_CAST:
                    case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                    case PLUS_SIGN:
                    case REGULAR_ID:
                    case SQL92_RESERVED_ALL:
                    case SQL92_RESERVED_ANY:
                    case SQL92_RESERVED_CASE:
                    case SQL92_RESERVED_CURSOR:
                    case SQL92_RESERVED_DATE:
                    case SQL92_RESERVED_DEFAULT:
                    case SQL92_RESERVED_DISTINCT:
                    case SQL92_RESERVED_EXISTS:
                    case SQL92_RESERVED_FALSE:
                    case SQL92_RESERVED_NOT:
                    case SQL92_RESERVED_NULL:
                    case SQL92_RESERVED_PRIOR:
                    case SQL92_RESERVED_TRUE:
                    case UNSIGNED_INTEGER:
                    	{
                    		alt204=1;
                    	}
                        break;
                }

                switch (alt204)
                {
            	case 1:
            	    // OracleDML.g:834:21: expression
            	    {
            	        this->followPush(FOLLOW_expression_in_expression_list8116);
            	        expression611=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression611_last = expression611.tree.get();
            	            stream_expression.add(expression611.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:834:33: ( COMMA expression )*

            for (;;)
            {
                ANTLR_UINT32 alt205=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt205=1;
                	}
                    break;

                }

                switch (alt205)
                {
            	case 1:
            	    // OracleDML.g:834:34: COMMA expression
            	    {
            	        COMMA612 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_expression_list8120);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA612);


            	        this->followPush(FOLLOW_expression_in_expression_list8122);
            	        expression613=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression613_last = expression613.tree.get();
            	            stream_expression.add(expression613.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop205;	/* break out of the loop */
            	    break;
                }
            }
            loop205: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN614 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_expression_list8126);
            if  (this->hasException())
            {
                goto ruleexpression_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN614);


            // AST REWRITE
            // elements: expression, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 835:9: -> ^( EXPR_LIST[$LEFT_PAREN] ( ^( EXPR expression ) )* RIGHT_PAREN )
            {
            	// OracleDML.g:835:12: ^( EXPR_LIST[$LEFT_PAREN] ( ^( EXPR expression ) )* RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, LEFT_PAREN610), root_1);
            	// OracleDML.g:835:37: ( ^( EXPR expression ) )*
            	while ( stream_expression.hasNext() ) {
            		// OracleDML.g:835:37: ^( EXPR expression )
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_expression.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleexpression_listEx; /* Prevent compiler warnings */
    ruleexpression_listEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end expression_list */

/**
 * $ANTLR start condition
 * OracleDML.g:838:1: condition : expression ;
 */
OracleDML::condition_return
OracleDML::condition()
{
    OracleDML::condition_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression615;
    ImplTraits::TreeTypePtr::pointer expression615_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:839:5: ( expression )
        // OracleDML.g:839:11: expression
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_expression_in_condition8171);
            expression615=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression615.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconditionEx; /* Prevent compiler warnings */
    ruleconditionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end condition */

/**
 * $ANTLR start condition_wrapper
 * OracleDML.g:842:1: condition_wrapper : expression -> ^( LOGIC_EXPR expression ) ;
 */
OracleDML::condition_wrapper_return
OracleDML::condition_wrapper()
{
    OracleDML::condition_wrapper_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression616;
    ImplTraits::TreeTypePtr::pointer expression616_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:843:5: ( expression -> ^( LOGIC_EXPR expression ) )
        // OracleDML.g:843:10: expression
        {
            this->followPush(FOLLOW_expression_in_condition_wrapper8191);
            expression616=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecondition_wrapperEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression616_last = expression616.tree.get();
                stream_expression.add(expression616.tree);
            }

            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 844:9: -> ^( LOGIC_EXPR expression )
            {
            	// OracleDML.g:844:12: ^( LOGIC_EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecondition_wrapperEx; /* Prevent compiler warnings */
    rulecondition_wrapperEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end condition_wrapper */

/**
 * $ANTLR start logical_or_expression_seq
 * OracleDML.g:847:1: logical_or_expression_seq : ( or_key ^ logical_and_expression ) ;
 */
OracleDML::logical_or_expression_seq_return
OracleDML::logical_or_expression_seq()
{
    OracleDML::logical_or_expression_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::or_key_return or_key617;
    ImplTraits::TreeTypePtr::pointer or_key617_last = NULL;
    OracleDML::logical_and_expression_return logical_and_expression618;
    ImplTraits::TreeTypePtr::pointer logical_and_expression618_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:848:2: ( ( or_key ^ logical_and_expression ) )
        // OracleDML.g:848:7: ( or_key ^ logical_and_expression )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:848:7: ( or_key ^ logical_and_expression )
            // OracleDML.g:848:8: or_key ^ logical_and_expression
            {
                this->followPush(FOLLOW_or_key_in_logical_or_expression_seq8225);
                or_key617=or_key();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulelogical_or_expression_seqEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(or_key617.tree, root_0);

                this->followPush(FOLLOW_logical_and_expression_in_logical_or_expression_seq8228);
                logical_and_expression618=logical_and_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulelogical_or_expression_seqEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, logical_and_expression618.tree);


            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelogical_or_expression_seqEx; /* Prevent compiler warnings */
    rulelogical_or_expression_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end logical_or_expression_seq */

/**
 * $ANTLR start expression
 * OracleDML.g:851:1: expression : ( ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression -> cursor_expression | logical_and_expression ( logical_or_expression_seq )* -> { mode == 1 }? ^( DISJUNCTION logical_and_expression ( logical_or_expression_seq )* ) -> logical_and_expression );
 */
OracleDML::expression_return
OracleDML::expression()
{
    OracleDML::expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::cursor_expression_return cursor_expression619;
    ImplTraits::TreeTypePtr::pointer cursor_expression619_last = NULL;
    OracleDML::logical_and_expression_return logical_and_expression620;
    ImplTraits::TreeTypePtr::pointer logical_and_expression620_last = NULL;
    OracleDML::logical_or_expression_seq_return logical_or_expression_seq621;
    ImplTraits::TreeTypePtr::pointer logical_or_expression_seq621_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_logical_or_expression_seq(get_psrstate()->get_treeAdaptor(), "rule logical_or_expression_seq");
    RewriteRuleSubtreeStream<ImplTraits> stream_logical_and_expression(get_psrstate()->get_treeAdaptor(), "rule logical_and_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_cursor_expression(get_psrstate()->get_treeAdaptor(), "rule cursor_expression");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:853:5: ( ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression -> cursor_expression | logical_and_expression ( logical_or_expression_seq )* -> { mode == 1 }? ^( DISJUNCTION logical_and_expression ( logical_or_expression_seq )* ) -> logical_and_expression )

            ANTLR_UINT32 alt207;

            alt207=2;

            {
                ANTLR_UINT32 LA207_0 = this->LA(1);
                if ( (LA207_0 == SQL92_RESERVED_CURSOR) && (this->msynpred( antlr3::ClassForwarder<synpred28_OracleDML>() )))
                {
                    alt207=1;
                }
                else if ( (LA207_0 == APPROXIMATE_NUM_LIT || LA207_0 == BINDVAR || ((LA207_0 >= CHAR_STRING) && (LA207_0 <= CHAR_STRING_PERL)) || LA207_0 == COLON || LA207_0 == DELIMITED_ID || LA207_0 == EXACT_NUM_LIT || LA207_0 == INTRODUCER || LA207_0 == LEFT_PAREN || LA207_0 == MINUS_SIGN || LA207_0 == NATIONAL_CHAR_STRING_LIT || ((LA207_0 >= PLSQL_NON_RESERVED_CAST) && (LA207_0 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA207_0 == PLUS_SIGN || LA207_0 == REGULAR_ID || LA207_0 == SQL92_RESERVED_ALL || LA207_0 == SQL92_RESERVED_ANY || LA207_0 == SQL92_RESERVED_CASE || LA207_0 == SQL92_RESERVED_DATE || LA207_0 == SQL92_RESERVED_DEFAULT || LA207_0 == SQL92_RESERVED_DISTINCT || ((LA207_0 >= SQL92_RESERVED_EXISTS) && (LA207_0 <= SQL92_RESERVED_FALSE)) || ((LA207_0 >= SQL92_RESERVED_NOT) && (LA207_0 <= SQL92_RESERVED_NULL)) || LA207_0 == SQL92_RESERVED_PRIOR || LA207_0 == SQL92_RESERVED_TRUE || LA207_0 == UNSIGNED_INTEGER))
                {
                    alt207=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 207 );
                    ex->set_state( 0 );


                    goto ruleexpressionEx;

                }
            }
            switch (alt207)
            {
        	case 1:
        	    // OracleDML.g:853:10: ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression
        	    {
        	        this->followPush(FOLLOW_cursor_expression_in_expression8271);
        	        cursor_expression619=cursor_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            cursor_expression619_last = cursor_expression619.tree.get();
        	            stream_cursor_expression.add(cursor_expression619.tree);
        	        }

        	        // AST REWRITE
        	        // elements: cursor_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 853:77: -> cursor_expression
        	        {
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_cursor_expression.nextTree());
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:854:10: logical_and_expression ( logical_or_expression_seq )*
        	    {
        	        this->followPush(FOLLOW_logical_and_expression_in_expression8286);
        	        logical_and_expression620=logical_and_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            logical_and_expression620_last = logical_and_expression620.tree.get();
        	            stream_logical_and_expression.add(logical_and_expression620.tree);
        	        }

        	        // OracleDML.g:854:33: ( logical_or_expression_seq )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt206=2;
        	            switch ( this->LA(1) )
        	            {
        	            case SQL92_RESERVED_OR:
        	            	{
        	            		alt206=1;
        	            	}
        	                break;

        	            }

        	            switch (alt206)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:854:35: logical_or_expression_seq
        	        	    {
        	        	        this->followPush(FOLLOW_logical_or_expression_seq_in_expression8290);
        	        	        logical_or_expression_seq621=logical_or_expression_seq();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            logical_or_expression_seq621_last = logical_or_expression_seq621.tree.get();
        	        	            stream_logical_or_expression_seq.add(logical_or_expression_seq621.tree);
        	        	        }

        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	            mode = 1; 
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop206;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop206: ; /* Jump out to here if this rule does not match */


        	        // AST REWRITE
        	        // elements: logical_or_expression_seq, logical_and_expression, logical_and_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 855:9: -> { mode == 1 }? ^( DISJUNCTION logical_and_expression ( logical_or_expression_seq )* )
        	        if ( mode == 1 ) {
        	        	// OracleDML.g:855:27: ^( DISJUNCTION logical_and_expression ( logical_or_expression_seq )* )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DISJUNCTION, "DISJUNCTION"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_logical_and_expression.nextTree());
        	        	// OracleDML.g:855:64: ( logical_or_expression_seq )*
        	        	while ( stream_logical_or_expression_seq.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_logical_or_expression_seq.nextTree());
        	        	}
        	        	stream_logical_or_expression_seq.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }

        	        else // 856:9: -> logical_and_expression
        	        {
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_logical_and_expression.nextTree());
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end expression */

/**
 * $ANTLR start expression_wrapper
 * OracleDML.g:859:1: expression_wrapper : expression -> ^( EXPR expression ) ;
 */
OracleDML::expression_wrapper_return
OracleDML::expression_wrapper()
{
    OracleDML::expression_wrapper_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression622;
    ImplTraits::TreeTypePtr::pointer expression622_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:860:5: ( expression -> ^( EXPR expression ) )
        // OracleDML.g:860:10: expression
        {
            this->followPush(FOLLOW_expression_in_expression_wrapper8348);
            expression622=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpression_wrapperEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression622_last = expression622.tree.get();
                stream_expression.add(expression622.tree);
            }

            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 861:9: -> ^( EXPR expression )
            {
            	// OracleDML.g:861:12: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleexpression_wrapperEx; /* Prevent compiler warnings */
    ruleexpression_wrapperEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end expression_wrapper */

/**
 * $ANTLR start logical_and_expression_seq
 * OracleDML.g:864:1: logical_and_expression_seq : ( and_key ^ negated_expression ) ;
 */
OracleDML::logical_and_expression_seq_return
OracleDML::logical_and_expression_seq()
{
    OracleDML::logical_and_expression_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::and_key_return and_key623;
    ImplTraits::TreeTypePtr::pointer and_key623_last = NULL;
    OracleDML::negated_expression_return negated_expression624;
    ImplTraits::TreeTypePtr::pointer negated_expression624_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:865:5: ( ( and_key ^ negated_expression ) )
        // OracleDML.g:865:10: ( and_key ^ negated_expression )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:865:10: ( and_key ^ negated_expression )
            // OracleDML.g:865:11: and_key ^ negated_expression
            {
                this->followPush(FOLLOW_and_key_in_logical_and_expression_seq8385);
                and_key623=and_key();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulelogical_and_expression_seqEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(and_key623.tree, root_0);

                this->followPush(FOLLOW_negated_expression_in_logical_and_expression_seq8388);
                negated_expression624=negated_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulelogical_and_expression_seqEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, negated_expression624.tree);


            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelogical_and_expression_seqEx; /* Prevent compiler warnings */
    rulelogical_and_expression_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end logical_and_expression_seq */

/**
 * $ANTLR start logical_and_expression
 * OracleDML.g:868:1: logical_and_expression : negated_expression ( logical_and_expression_seq )* -> { mode == 1 }? ^( CONJUNCTION negated_expression ( logical_and_expression_seq )* ) -> negated_expression ;
 */
OracleDML::logical_and_expression_return
OracleDML::logical_and_expression()
{
    OracleDML::logical_and_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::negated_expression_return negated_expression625;
    ImplTraits::TreeTypePtr::pointer negated_expression625_last = NULL;
    OracleDML::logical_and_expression_seq_return logical_and_expression_seq626;
    ImplTraits::TreeTypePtr::pointer logical_and_expression_seq626_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_negated_expression(get_psrstate()->get_treeAdaptor(), "rule negated_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_logical_and_expression_seq(get_psrstate()->get_treeAdaptor(), "rule logical_and_expression_seq");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:870:5: ( negated_expression ( logical_and_expression_seq )* -> { mode == 1 }? ^( CONJUNCTION negated_expression ( logical_and_expression_seq )* ) -> negated_expression )
        // OracleDML.g:870:10: negated_expression ( logical_and_expression_seq )*
        {
            this->followPush(FOLLOW_negated_expression_in_logical_and_expression8417);
            negated_expression625=negated_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelogical_and_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                negated_expression625_last = negated_expression625.tree.get();
                stream_negated_expression.add(negated_expression625.tree);
            }

            // OracleDML.g:870:29: ( logical_and_expression_seq )*

            for (;;)
            {
                ANTLR_UINT32 alt208=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_AND:
                	{
                		alt208=1;
                	}
                    break;

                }

                switch (alt208)
                {
            	case 1:
            	    // OracleDML.g:870:30: logical_and_expression_seq
            	    {
            	        this->followPush(FOLLOW_logical_and_expression_seq_in_logical_and_expression8420);
            	        logical_and_expression_seq626=logical_and_expression_seq();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelogical_and_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            logical_and_expression_seq626_last = logical_and_expression_seq626.tree.get();
            	            stream_logical_and_expression_seq.add(logical_and_expression_seq626.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop208;	/* break out of the loop */
            	    break;
                }
            }
            loop208: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: negated_expression, negated_expression, logical_and_expression_seq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 871:10: -> { mode == 1 }? ^( CONJUNCTION negated_expression ( logical_and_expression_seq )* )
            if ( mode == 1 ) {
            	// OracleDML.g:871:28: ^( CONJUNCTION negated_expression ( logical_and_expression_seq )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(CONJUNCTION, "CONJUNCTION"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_negated_expression.nextTree());
            	// OracleDML.g:871:61: ( logical_and_expression_seq )*
            	while ( stream_logical_and_expression_seq.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_logical_and_expression_seq.nextTree());
            	}
            	stream_logical_and_expression_seq.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 872:10: -> negated_expression
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_negated_expression.nextTree());
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelogical_and_expressionEx; /* Prevent compiler warnings */
    rulelogical_and_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end logical_and_expression */

/**
 * $ANTLR start negated_expression
 * OracleDML.g:875:1: negated_expression : ( not_key ^ negated_expression | equality_expression );
 */
OracleDML::negated_expression_return
OracleDML::negated_expression()
{
    OracleDML::negated_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::not_key_return not_key627;
    ImplTraits::TreeTypePtr::pointer not_key627_last = NULL;
    OracleDML::negated_expression_return negated_expression628;
    ImplTraits::TreeTypePtr::pointer negated_expression628_last = NULL;
    OracleDML::equality_expression_return equality_expression629;
    ImplTraits::TreeTypePtr::pointer equality_expression629_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:876:5: ( not_key ^ negated_expression | equality_expression )

            ANTLR_UINT32 alt209;

            alt209=2;

            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_NOT:
            	{
            		alt209=1;
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case REGULAR_ID:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt209=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 209 );
                ex->set_state( 0 );


                goto rulenegated_expressionEx;

            }

            switch (alt209)
            {
        	case 1:
        	    // OracleDML.g:876:10: not_key ^ negated_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_not_key_in_negated_expression8480);
        	        not_key627=not_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenegated_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(not_key627.tree, root_0);

        	        this->followPush(FOLLOW_negated_expression_in_negated_expression8483);
        	        negated_expression628=negated_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenegated_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, negated_expression628.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:877:10: equality_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_equality_expression_in_negated_expression8494);
        	        equality_expression629=equality_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenegated_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, equality_expression629.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulenegated_expressionEx; /* Prevent compiler warnings */
    rulenegated_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end negated_expression */

/**
 * $ANTLR start equality_expression
 * OracleDML.g:880:1: equality_expression : ( multiset_comparsion -> multiset_comparsion ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )? ;
 */
OracleDML::equality_expression_return
OracleDML::equality_expression()
{
    OracleDML::equality_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN642 = NULL;
    ImplTraits::CommonTokenType const* COMMA645 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN647 = NULL;
    OracleDML::multiset_comparsion_return multiset_comparsion630;
    ImplTraits::TreeTypePtr::pointer multiset_comparsion630_last = NULL;
    OracleDML_OracleDMLKeys::is_key_return is_key631;
    ImplTraits::TreeTypePtr::pointer is_key631_last = NULL;
    OracleDML_OracleDMLKeys::not_key_return not_key632;
    ImplTraits::TreeTypePtr::pointer not_key632_last = NULL;
    OracleDML_OracleDMLKeys::null_key_return null_key633;
    ImplTraits::TreeTypePtr::pointer null_key633_last = NULL;
    OracleDML_OracleDMLKeys::nan_key_return nan_key634;
    ImplTraits::TreeTypePtr::pointer nan_key634_last = NULL;
    OracleDML_OracleDMLKeys::present_key_return present_key635;
    ImplTraits::TreeTypePtr::pointer present_key635_last = NULL;
    OracleDML_OracleDMLKeys::infinite_key_return infinite_key636;
    ImplTraits::TreeTypePtr::pointer infinite_key636_last = NULL;
    OracleDML_OracleDMLKeys::a_key_return a_key637;
    ImplTraits::TreeTypePtr::pointer a_key637_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key638;
    ImplTraits::TreeTypePtr::pointer set_key638_last = NULL;
    OracleDML_OracleDMLKeys::empty_key_return empty_key639;
    ImplTraits::TreeTypePtr::pointer empty_key639_last = NULL;
    OracleDML_OracleDMLKeys::of_key_return of_key640;
    ImplTraits::TreeTypePtr::pointer of_key640_last = NULL;
    OracleDML_OracleDMLKeys::type_key_return type_key641;
    ImplTraits::TreeTypePtr::pointer type_key641_last = NULL;
    OracleDML_OracleDMLKeys::only_key_return only_key643;
    ImplTraits::TreeTypePtr::pointer only_key643_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec644;
    ImplTraits::TreeTypePtr::pointer type_spec644_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec646;
    ImplTraits::TreeTypePtr::pointer type_spec646_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN642_tree;
    ImplTraits::TreeTypePtr COMMA645_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN647_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_multiset_comparsion(get_psrstate()->get_treeAdaptor(), "rule multiset_comparsion");
    RewriteRuleSubtreeStream<ImplTraits> stream_type_spec(get_psrstate()->get_treeAdaptor(), "rule type_spec");
    RewriteRuleSubtreeStream<ImplTraits> stream_is_key(get_psrstate()->get_treeAdaptor(), "rule is_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_present_key(get_psrstate()->get_treeAdaptor(), "rule present_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_null_key(get_psrstate()->get_treeAdaptor(), "rule null_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_nan_key(get_psrstate()->get_treeAdaptor(), "rule nan_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_a_key(get_psrstate()->get_treeAdaptor(), "rule a_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_empty_key(get_psrstate()->get_treeAdaptor(), "rule empty_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_not_key(get_psrstate()->get_treeAdaptor(), "rule not_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_set_key(get_psrstate()->get_treeAdaptor(), "rule set_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_infinite_key(get_psrstate()->get_treeAdaptor(), "rule infinite_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_of_key(get_psrstate()->get_treeAdaptor(), "rule of_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_only_key(get_psrstate()->get_treeAdaptor(), "rule only_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_type_key(get_psrstate()->get_treeAdaptor(), "rule type_key");

    /* Initialize rule variables
     */

        int isNegated = false;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:882:5: ( ( multiset_comparsion -> multiset_comparsion ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )? )
        // OracleDML.g:882:10: ( multiset_comparsion -> multiset_comparsion ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )?
        {
            // OracleDML.g:882:10: ( multiset_comparsion -> multiset_comparsion )
            // OracleDML.g:882:11: multiset_comparsion
            {
                this->followPush(FOLLOW_multiset_comparsion_in_equality_expression8523);
                multiset_comparsion630=multiset_comparsion();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleequality_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    multiset_comparsion630_last = multiset_comparsion630.tree.get();
                    stream_multiset_comparsion.add(multiset_comparsion630.tree);
                }

                // AST REWRITE
                // elements: multiset_comparsion
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 882:31: -> multiset_comparsion
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_multiset_comparsion.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:883:5: ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )?
            {
                ANTLR_UINT32 alt215=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_IS:
                    	{
                    		alt215=1;
                    	}
                        break;
                }

                switch (alt215)
                {
            	case 1:
            	    // OracleDML.g:883:10: is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) )
            	    {
            	        this->followPush(FOLLOW_is_key_in_equality_expression8539);
            	        is_key631=is_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleequality_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            is_key631_last = is_key631.tree.get();
            	            stream_is_key.add(is_key631.tree);
            	        }

            	        // OracleDML.g:883:17: ( not_key )?
            	        {
            	            ANTLR_UINT32 alt210=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_NOT:
            	                	{
            	                		alt210=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt210)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:883:18: not_key
            	        	    {
            	        	        this->followPush(FOLLOW_not_key_in_equality_expression8542);
            	        	        not_key632=not_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            not_key632_last = not_key632.tree.get();
            	        	            stream_not_key.add(not_key632.tree);
            	        	        }

            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            isNegated = true;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:884:9: ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) )
            	        {
            	            ANTLR_UINT32 alt214=7;
            	            {
            	                ANTLR_UINT32 LA214_0 = this->LA(1);
            	                if ( (LA214_0 == SQL92_RESERVED_NULL))
            	                {
            	                    alt214=1;
            	                }
            	                else if ( (LA214_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EMPTY"))||((toUpper(LT(1)->getText()) == "PRESENT"))||((toUpper(LT(1)->getText()) == "INFINITE"))||((toUpper(LT(1)->getText()) == "A"))||((toUpper(LT(1)->getText()) == "NAN")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA214_2 = this->LA(2);
            	                        if ( (LA214_2 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "A")))
            	                        {
            	                            alt214=5;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "NAN")))
            	                        {
            	                            alt214=2;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "PRESENT")))
            	                        {
            	                            alt214=3;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "INFINITE")))
            	                        {
            	                            alt214=4;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "EMPTY")))
            	                        {
            	                            alt214=6;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return retval;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 214 );
            	                            ex->set_state( 2 );


            	                            goto ruleequality_expressionEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA214_0 == SQL92_RESERVED_OF))
            	                {
            	                    alt214=7;
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 214 );
            	                    ex->set_state( 0 );


            	                    goto ruleequality_expressionEx;

            	                }
            	            }
            	            switch (alt214)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:884:14: null_key
            	        	    {
            	        	        this->followPush(FOLLOW_null_key_in_equality_expression8561);
            	        	        null_key633=null_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            null_key633_last = null_key633.tree.get();
            	        	            stream_null_key.add(null_key633.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 885:17: -> {isNegated}? ^( IS_NOT_NULL $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:885:33: ^( IS_NOT_NULL $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_NULL, "IS_NOT_NULL"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 886:17: -> ^( IS_NULL $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:886:20: ^( IS_NULL $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NULL, "IS_NULL"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:887:14: nan_key
            	        	    {
            	        	        this->followPush(FOLLOW_nan_key_in_equality_expression8628);
            	        	        nan_key634=nan_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            nan_key634_last = nan_key634.tree.get();
            	        	            stream_nan_key.add(nan_key634.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 888:17: -> {isNegated}? ^( IS_NOT_NAN $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:888:33: ^( IS_NOT_NAN $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_NAN, "IS_NOT_NAN"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 889:17: -> ^( IS_NAN $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:889:20: ^( IS_NAN $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NAN, "IS_NAN"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // OracleDML.g:890:14: present_key
            	        	    {
            	        	        this->followPush(FOLLOW_present_key_in_equality_expression8695);
            	        	        present_key635=present_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            present_key635_last = present_key635.tree.get();
            	        	            stream_present_key.add(present_key635.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 891:17: -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:891:33: ^( IS_NOT_PRESENT $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_PRESENT, "IS_NOT_PRESENT"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 892:17: -> ^( IS_PRESENT $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:892:20: ^( IS_PRESENT $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_PRESENT, "IS_PRESENT"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // OracleDML.g:893:14: infinite_key
            	        	    {
            	        	        this->followPush(FOLLOW_infinite_key_in_equality_expression8762);
            	        	        infinite_key636=infinite_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            infinite_key636_last = infinite_key636.tree.get();
            	        	            stream_infinite_key.add(infinite_key636.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 894:17: -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:894:33: ^( IS_NOT_INFINITE $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_INFINITE, "IS_NOT_INFINITE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 895:17: -> ^( IS_INFINITE $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:895:20: ^( IS_INFINITE $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_INFINITE, "IS_INFINITE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // OracleDML.g:896:14: a_key set_key
            	        	    {
            	        	        this->followPush(FOLLOW_a_key_in_equality_expression8829);
            	        	        a_key637=a_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            a_key637_last = a_key637.tree.get();
            	        	            stream_a_key.add(a_key637.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_set_key_in_equality_expression8831);
            	        	        set_key638=set_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            set_key638_last = set_key638.tree.get();
            	        	            stream_set_key.add(set_key638.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 897:17: -> {isNegated}? ^( IS_NOT_A_SET $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:897:33: ^( IS_NOT_A_SET $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_A_SET, "IS_NOT_A_SET"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 898:17: -> ^( IS_A_SET $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:898:20: ^( IS_A_SET $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_A_SET, "IS_A_SET"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // OracleDML.g:899:14: empty_key
            	        	    {
            	        	        this->followPush(FOLLOW_empty_key_in_equality_expression8898);
            	        	        empty_key639=empty_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            empty_key639_last = empty_key639.tree.get();
            	        	            stream_empty_key.add(empty_key639.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 900:17: -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:900:33: ^( IS_NOT_EMPTY $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_EMPTY, "IS_NOT_EMPTY"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 901:17: -> ^( IS_EMPTY $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:901:20: ^( IS_EMPTY $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_EMPTY, "IS_EMPTY"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 7:
            	        	    // OracleDML.g:902:14: of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN
            	        	    {
            	        	        this->followPush(FOLLOW_of_key_in_equality_expression8965);
            	        	        of_key640=of_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            of_key640_last = of_key640.tree.get();
            	        	            stream_of_key.add(of_key640.tree);
            	        	        }

            	        	        // OracleDML.g:902:21: ( type_key )?
            	        	        {
            	        	            ANTLR_UINT32 alt211=2;
            	        	            {
            	        	                ANTLR_UINT32 LA211_0 = this->LA(1);
            	        	                if ( (LA211_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "TYPE")))
            	        	                {
            	        	                    alt211=1;
            	        	                }
            	        	            }
            	        	            switch (alt211)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:902:21: type_key
            	        	        	    {
            	        	        	        this->followPush(FOLLOW_type_key_in_equality_expression8967);
            	        	        	        type_key641=type_key();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleequality_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            type_key641_last = type_key641.tree.get();
            	        	        	            stream_type_key.add(type_key641.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	        LEFT_PAREN642 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_equality_expression8970);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN642);


            	        	        // OracleDML.g:902:42: ( only_key )?
            	        	        {
            	        	            ANTLR_UINT32 alt212=2;
            	        	            switch ( this->LA(1) )
            	        	            {
            	        	                case REGULAR_ID:
            	        	                	{
            	        	                		{
            	        	                		    ANTLR_UINT32 LA212_1 = this->LA(2);
            	        	                		    if ( ((toUpper(LT(1)->getText()) == "ONLY")))
            	        	                		    {
            	        	                		        alt212=1;
            	        	                		    }
            	        	                		}
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt212)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:902:42: only_key
            	        	        	    {
            	        	        	        this->followPush(FOLLOW_only_key_in_equality_expression8972);
            	        	        	        only_key643=only_key();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleequality_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            only_key643_last = only_key643.tree.get();
            	        	        	            stream_only_key.add(only_key643.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	        this->followPush(FOLLOW_type_spec_in_equality_expression8975);
            	        	        type_spec644=type_spec();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            type_spec644_last = type_spec644.tree.get();
            	        	            stream_type_spec.add(type_spec644.tree);
            	        	        }

            	        	        // OracleDML.g:902:62: ( COMMA type_spec )*

            	        	        for (;;)
            	        	        {
            	        	            ANTLR_UINT32 alt213=2;
            	        	            switch ( this->LA(1) )
            	        	            {
            	        	            case COMMA:
            	        	            	{
            	        	            		alt213=1;
            	        	            	}
            	        	                break;

            	        	            }

            	        	            switch (alt213)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:902:63: COMMA type_spec
            	        	        	    {
            	        	        	        COMMA645 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_equality_expression8978);
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleequality_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }
            	        	        	         
            	        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA645);


            	        	        	        this->followPush(FOLLOW_type_spec_in_equality_expression8980);
            	        	        	        type_spec646=type_spec();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleequality_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            type_spec646_last = type_spec646.tree.get();
            	        	        	            stream_type_spec.add(type_spec646.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop213;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop213: ; /* Jump out to here if this rule does not match */


            	        	        RIGHT_PAREN647 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_equality_expression8984);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN647);


            	        	        // AST REWRITE
            	        	        // elements: type_spec, type_spec, equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 903:17: -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ )
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:903:33: ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_OF_TYPE, "IS_NOT_OF_TYPE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	if ( !(stream_type_spec.hasNext()) ) {
            	        	        		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "type_spec empty" );
            	        	        		goto ruleequality_expressionEx;
            	        	        	}
            	        	        	while ( stream_type_spec.hasNext() ) {
            	        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_type_spec.nextTree());
            	        	        	}
            	        	        	stream_type_spec.reset();

            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 904:17: -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ )
            	        	        {
            	        	        	// OracleDML.g:904:20: ^( IS_OF_TYPE $equality_expression ( type_spec )+ )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_OF_TYPE, "IS_OF_TYPE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	if ( !(stream_type_spec.hasNext()) ) {
            	        	        		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "type_spec empty" );
            	        	        		goto ruleequality_expressionEx;
            	        	        	}
            	        	        	while ( stream_type_spec.hasNext() ) {
            	        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_type_spec.nextTree());
            	        	        	}
            	        	        	stream_type_spec.reset();

            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleequality_expressionEx; /* Prevent compiler warnings */
    ruleequality_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end equality_expression */

/**
 * $ANTLR start multiset_comparsion
 * OracleDML.g:910:1: multiset_comparsion : ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) ) )? ;
 */
OracleDML::multiset_comparsion_return
OracleDML::multiset_comparsion()
{
    OracleDML::multiset_comparsion_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::relational_expression_return relational_expression648;
    ImplTraits::TreeTypePtr::pointer relational_expression648_last = NULL;
    OracleDML::multiset_type_return multiset_type649;
    ImplTraits::TreeTypePtr::pointer multiset_type649_last = NULL;
    OracleDML_OracleDMLKeys::of_key_return of_key650;
    ImplTraits::TreeTypePtr::pointer of_key650_last = NULL;
    OracleDML::concatenation_return concatenation651;
    ImplTraits::TreeTypePtr::pointer concatenation651_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_multiset_type(get_psrstate()->get_treeAdaptor(), "rule multiset_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_relational_expression(get_psrstate()->get_treeAdaptor(), "rule relational_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_of_key(get_psrstate()->get_treeAdaptor(), "rule of_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:911:5: ( ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) ) )? )
        // OracleDML.g:911:10: ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) ) )?
        {
            // OracleDML.g:911:10: ( relational_expression -> relational_expression )
            // OracleDML.g:911:11: relational_expression
            {
                this->followPush(FOLLOW_relational_expression_in_multiset_comparsion9081);
                relational_expression648=relational_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulemultiset_comparsionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    relational_expression648_last = relational_expression648.tree.get();
                    stream_relational_expression.add(relational_expression648.tree);
                }

                // AST REWRITE
                // elements: relational_expression
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 911:33: -> relational_expression
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_relational_expression.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:912:5: ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) ) )?
            {
                ANTLR_UINT32 alt217=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA217_1 = this->LA(2);
                    		    if ( ((((toUpper(LT(1)->getText()) == "SUBMULTISET"))||((toUpper(LT(1)->getText()) == "MEMBER")))))
                    		    {
                    		        alt217=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt217)
                {
            	case 1:
            	    // OracleDML.g:912:10: multiset_type ( of_key )? concatenation
            	    {
            	        this->followPush(FOLLOW_multiset_type_in_multiset_comparsion9097);
            	        multiset_type649=multiset_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiset_comparsionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            multiset_type649_last = multiset_type649.tree.get();
            	            stream_multiset_type.add(multiset_type649.tree);
            	        }

            	        // OracleDML.g:912:24: ( of_key )?
            	        {
            	            ANTLR_UINT32 alt216=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_OF:
            	                	{
            	                		alt216=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt216)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:912:24: of_key
            	        	    {
            	        	        this->followPush(FOLLOW_of_key_in_multiset_comparsion9099);
            	        	        of_key650=of_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemultiset_comparsionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            of_key650_last = of_key650.tree.get();
            	        	            stream_of_key.add(of_key650.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_concatenation_in_multiset_comparsion9102);
            	        concatenation651=concatenation();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiset_comparsionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            concatenation651_last = concatenation651.tree.get();
            	            stream_concatenation.add(concatenation651.tree);
            	        }

            	        // AST REWRITE
            	        // elements: concatenation, multiset_comparsion, multiset_type
            	        // token labels: 
            	        // rule labels: retval
            	        // token list labels: 
            	        // rule list labels: 
            	        // wildcard labels: 
            	        if ( this->get_backtracking()==0 ) {
            	        retval.tree = std::move(root_0);
            	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        // 913:9: -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) )
            	        {
            	        	// OracleDML.g:913:12: ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) )
            	        	{
            	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_multiset_type.nextNode(), root_1);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	// OracleDML.g:913:49: ^( EXPR concatenation )
            	        	{
            	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_concatenation.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	        	}
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	}
            	        }


            	        //retval.tree = std::move(root_0);
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemultiset_comparsionEx; /* Prevent compiler warnings */
    rulemultiset_comparsionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multiset_comparsion */

/**
 * $ANTLR start multiset_type
 * OracleDML.g:916:1: multiset_type : ( member_key | submultiset_key );
 */
OracleDML::multiset_type_return
OracleDML::multiset_type()
{
    OracleDML::multiset_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::member_key_return member_key652;
    ImplTraits::TreeTypePtr::pointer member_key652_last = NULL;
    OracleDML_OracleDMLKeys::submultiset_key_return submultiset_key653;
    ImplTraits::TreeTypePtr::pointer submultiset_key653_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:917:5: ( member_key | submultiset_key )

            ANTLR_UINT32 alt218;

            alt218=2;

            {
                ANTLR_UINT32 LA218_0 = this->LA(1);
                if ( (LA218_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SUBMULTISET"))||((toUpper(LT(1)->getText()) == "MEMBER")))))
                {
                    {
                        ANTLR_UINT32 LA218_1 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "MEMBER")))
                        {
                            alt218=1;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "SUBMULTISET")))
                        {
                            alt218=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 218 );
                            ex->set_state( 1 );


                            goto rulemultiset_typeEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 218 );
                    ex->set_state( 0 );


                    goto rulemultiset_typeEx;

                }
            }
            switch (alt218)
            {
        	case 1:
        	    // OracleDML.g:917:10: member_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_member_key_in_multiset_type9147);
        	        member_key652=member_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiset_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, member_key652.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:918:10: submultiset_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_submultiset_key_in_multiset_type9158);
        	        submultiset_key653=submultiset_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiset_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, submultiset_key653.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulemultiset_typeEx; /* Prevent compiler warnings */
    rulemultiset_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multiset_type */

/**
 * $ANTLR start relational_expression
 * OracleDML.g:921:1: relational_expression : compound_expression ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )* ;
 */
OracleDML::relational_expression_return
OracleDML::relational_expression()
{
    OracleDML::relational_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP655 = NULL;
    ImplTraits::CommonTokenType const* LESS_THAN_OP657 = NULL;
    ImplTraits::CommonTokenType const* GREATER_THAN_OP658 = NULL;
    OracleDML::compound_expression_return compound_expression654;
    ImplTraits::TreeTypePtr::pointer compound_expression654_last = NULL;
    OracleDML_OracleDMLCommons::not_equal_op_return not_equal_op656;
    ImplTraits::TreeTypePtr::pointer not_equal_op656_last = NULL;
    OracleDML_OracleDMLCommons::less_than_or_equals_op_return less_than_or_equals_op659;
    ImplTraits::TreeTypePtr::pointer less_than_or_equals_op659_last = NULL;
    OracleDML_OracleDMLCommons::greater_than_or_equals_op_return greater_than_or_equals_op660;
    ImplTraits::TreeTypePtr::pointer greater_than_or_equals_op660_last = NULL;
    OracleDML::compound_expression_return compound_expression661;
    ImplTraits::TreeTypePtr::pointer compound_expression661_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP655_tree;
    ImplTraits::TreeTypePtr LESS_THAN_OP657_tree;
    ImplTraits::TreeTypePtr GREATER_THAN_OP658_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:922:5: ( compound_expression ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )* )
        // OracleDML.g:922:10: compound_expression ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_compound_expression_in_relational_expression9178);
            compound_expression654=compound_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerelational_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, compound_expression654.tree);


            // OracleDML.g:923:5: ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt220=2;
                switch ( this->LA(1) )
                {
                case EQUALS_OP:
                	{
                		alt220=1;
                	}
                    break;
                case NOT_EQUAL_OP:
                	{
                		alt220=1;
                	}
                    break;
                case LESS_THAN_OP:
                	{
                		alt220=1;
                	}
                    break;
                case EXCLAMATION_OPERATOR_PART:
                	{
                		alt220=1;
                	}
                    break;
                case CARRET_OPERATOR_PART:
                	{
                		alt220=1;
                	}
                    break;
                case GREATER_THAN_OP:
                	{
                		alt220=1;
                	}
                    break;
                case LESS_THAN_OR_EQUALS_OP:
                	{
                		alt220=1;
                	}
                    break;
                case GREATER_THAN_OR_EQUALS_OP:
                	{
                		alt220=1;
                	}
                    break;

                }

                switch (alt220)
                {
            	case 1:
            	    // OracleDML.g:923:7: ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression
            	    {
            	        // OracleDML.g:923:7: ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^)
            	        {
            	            ANTLR_UINT32 alt219=6;
            	            switch ( this->LA(1) )
            	            {
            	            case EQUALS_OP:
            	            	{
            	            		alt219=1;
            	            	}
            	                break;
            	            case CARRET_OPERATOR_PART:
            	            case EXCLAMATION_OPERATOR_PART:
            	            case NOT_EQUAL_OP:
            	            	{
            	            		alt219=2;
            	            	}
            	                break;
            	            case LESS_THAN_OP:
            	            	{
            	            		switch ( this->LA(2) )
            	            		{
            	            		case GREATER_THAN_OP:
            	            			{
            	            				alt219=2;
            	            			}
            	            		    break;
            	            		case EQUALS_OP:
            	            			{
            	            				alt219=5;
            	            			}
            	            		    break;
            	            		case APPROXIMATE_NUM_LIT:
            	            		case BINDVAR:
            	            		case CHAR_STRING:
            	            		case CHAR_STRING_PERL:
            	            		case COLON:
            	            		case DELIMITED_ID:
            	            		case EXACT_NUM_LIT:
            	            		case INTRODUCER:
            	            		case LEFT_PAREN:
            	            		case MINUS_SIGN:
            	            		case NATIONAL_CHAR_STRING_LIT:
            	            		case PLSQL_NON_RESERVED_CAST:
            	            		case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            	            		case PLUS_SIGN:
            	            		case REGULAR_ID:
            	            		case SQL92_RESERVED_ALL:
            	            		case SQL92_RESERVED_ANY:
            	            		case SQL92_RESERVED_CASE:
            	            		case SQL92_RESERVED_DATE:
            	            		case SQL92_RESERVED_DEFAULT:
            	            		case SQL92_RESERVED_DISTINCT:
            	            		case SQL92_RESERVED_EXISTS:
            	            		case SQL92_RESERVED_FALSE:
            	            		case SQL92_RESERVED_NULL:
            	            		case SQL92_RESERVED_PRIOR:
            	            		case SQL92_RESERVED_TRUE:
            	            		case UNSIGNED_INTEGER:
            	            			{
            	            				alt219=3;
            	            			}
            	            		    break;

            	            		default:
            	            		    if (this->get_backtracking()>0)
            	            		    {
            	            		        this->set_failedflag( true );
            	            		        return retval;
            	            		    }

            	            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		    ex->set_decisionNum( 219 );
            	            		    ex->set_state( 3 );


            	            		    goto rulerelational_expressionEx;

            	            		}

            	            	}
            	                break;
            	            case GREATER_THAN_OP:
            	            	{
            	            		switch ( this->LA(2) )
            	            		{
            	            		case EQUALS_OP:
            	            			{
            	            				alt219=6;
            	            			}
            	            		    break;
            	            		case APPROXIMATE_NUM_LIT:
            	            		case BINDVAR:
            	            		case CHAR_STRING:
            	            		case CHAR_STRING_PERL:
            	            		case COLON:
            	            		case DELIMITED_ID:
            	            		case EXACT_NUM_LIT:
            	            		case INTRODUCER:
            	            		case LEFT_PAREN:
            	            		case MINUS_SIGN:
            	            		case NATIONAL_CHAR_STRING_LIT:
            	            		case PLSQL_NON_RESERVED_CAST:
            	            		case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            	            		case PLUS_SIGN:
            	            		case REGULAR_ID:
            	            		case SQL92_RESERVED_ALL:
            	            		case SQL92_RESERVED_ANY:
            	            		case SQL92_RESERVED_CASE:
            	            		case SQL92_RESERVED_DATE:
            	            		case SQL92_RESERVED_DEFAULT:
            	            		case SQL92_RESERVED_DISTINCT:
            	            		case SQL92_RESERVED_EXISTS:
            	            		case SQL92_RESERVED_FALSE:
            	            		case SQL92_RESERVED_NULL:
            	            		case SQL92_RESERVED_PRIOR:
            	            		case SQL92_RESERVED_TRUE:
            	            		case UNSIGNED_INTEGER:
            	            			{
            	            				alt219=4;
            	            			}
            	            		    break;

            	            		default:
            	            		    if (this->get_backtracking()>0)
            	            		    {
            	            		        this->set_failedflag( true );
            	            		        return retval;
            	            		    }

            	            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		    ex->set_decisionNum( 219 );
            	            		    ex->set_state( 4 );


            	            		    goto rulerelational_expressionEx;

            	            		}

            	            	}
            	                break;
            	            case LESS_THAN_OR_EQUALS_OP:
            	            	{
            	            		alt219=5;
            	            	}
            	                break;
            	            case GREATER_THAN_OR_EQUALS_OP:
            	            	{
            	            		alt219=6;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 219 );
            	                ex->set_state( 0 );


            	                goto rulerelational_expressionEx;

            	            }

            	            switch (alt219)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:923:9: EQUALS_OP ^
            	        	    {
            	        	        EQUALS_OP655 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_relational_expression9188);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        EQUALS_OP655_tree = get_psrstate()->get_treeAdaptor()->create(EQUALS_OP655);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(EQUALS_OP655_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:923:22: not_equal_op ^
            	        	    {
            	        	        this->followPush(FOLLOW_not_equal_op_in_relational_expression9193);
            	        	        not_equal_op656=not_equal_op();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(not_equal_op656.tree, root_0);

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // OracleDML.g:923:38: LESS_THAN_OP ^
            	        	    {
            	        	        LESS_THAN_OP657 =  this->matchToken(LESS_THAN_OP, &FOLLOW_LESS_THAN_OP_in_relational_expression9198);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        LESS_THAN_OP657_tree = get_psrstate()->get_treeAdaptor()->create(LESS_THAN_OP657);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(LESS_THAN_OP657_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // OracleDML.g:923:54: GREATER_THAN_OP ^
            	        	    {
            	        	        GREATER_THAN_OP658 =  this->matchToken(GREATER_THAN_OP, &FOLLOW_GREATER_THAN_OP_in_relational_expression9203);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        GREATER_THAN_OP658_tree = get_psrstate()->get_treeAdaptor()->create(GREATER_THAN_OP658);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(GREATER_THAN_OP658_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // OracleDML.g:923:73: less_than_or_equals_op ^
            	        	    {
            	        	        this->followPush(FOLLOW_less_than_or_equals_op_in_relational_expression9208);
            	        	        less_than_or_equals_op659=less_than_or_equals_op();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(less_than_or_equals_op659.tree, root_0);

            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // OracleDML.g:923:99: greater_than_or_equals_op ^
            	        	    {
            	        	        this->followPush(FOLLOW_greater_than_or_equals_op_in_relational_expression9213);
            	        	        greater_than_or_equals_op660=greater_than_or_equals_op();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(greater_than_or_equals_op660.tree, root_0);

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_compound_expression_in_relational_expression9218);
            	        compound_expression661=compound_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerelational_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, compound_expression661.tree);


            	    }
            	    break;

            	default:
            	    goto loop220;	/* break out of the loop */
            	    break;
                }
            }
            loop220: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulerelational_expressionEx; /* Prevent compiler warnings */
    rulerelational_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end relational_expression */

/**
 * $ANTLR start compound_expression
 * OracleDML.g:926:1: compound_expression : ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )? ;
 */
OracleDML::compound_expression_return
OracleDML::compound_expression()
{
    OracleDML::compound_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::concatenation_return concatenation662;
    ImplTraits::TreeTypePtr::pointer concatenation662_last = NULL;
    OracleDML_OracleDMLKeys::not_key_return not_key663;
    ImplTraits::TreeTypePtr::pointer not_key663_last = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key664;
    ImplTraits::TreeTypePtr::pointer in_key664_last = NULL;
    OracleDML::in_elements_return in_elements665;
    ImplTraits::TreeTypePtr::pointer in_elements665_last = NULL;
    OracleDML_OracleDMLKeys::between_key_return between_key666;
    ImplTraits::TreeTypePtr::pointer between_key666_last = NULL;
    OracleDML::between_elements_return between_elements667;
    ImplTraits::TreeTypePtr::pointer between_elements667_last = NULL;
    OracleDML::like_type_return like_type668;
    ImplTraits::TreeTypePtr::pointer like_type668_last = NULL;
    OracleDML::concatenation_return concatenation669;
    ImplTraits::TreeTypePtr::pointer concatenation669_last = NULL;
    OracleDML::like_escape_part_return like_escape_part670;
    ImplTraits::TreeTypePtr::pointer like_escape_part670_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_between_elements(get_psrstate()->get_treeAdaptor(), "rule between_elements");
    RewriteRuleSubtreeStream<ImplTraits> stream_like_escape_part(get_psrstate()->get_treeAdaptor(), "rule like_escape_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_between_key(get_psrstate()->get_treeAdaptor(), "rule between_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_not_key(get_psrstate()->get_treeAdaptor(), "rule not_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_like_type(get_psrstate()->get_treeAdaptor(), "rule like_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_elements(get_psrstate()->get_treeAdaptor(), "rule in_elements");

    /* Initialize rule variables
     */

        int isNegated = false;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:928:5: ( ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )? )
        // OracleDML.g:928:10: ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )?
        {
            // OracleDML.g:928:10: ( concatenation -> concatenation )
            // OracleDML.g:928:11: concatenation
            {
                this->followPush(FOLLOW_concatenation_in_compound_expression9249);
                concatenation662=concatenation();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulecompound_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    concatenation662_last = concatenation662.tree.get();
                    stream_concatenation.add(concatenation662.tree);
                }

                // AST REWRITE
                // elements: concatenation
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 928:25: -> concatenation
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_concatenation.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:929:5: ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )?
            {
                ANTLR_UINT32 alt224=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_NOT:
                    	{
                    		alt224=1;
                    	}
                        break;
                    case SQL92_RESERVED_IN:
                    	{
                    		alt224=1;
                    	}
                        break;
                    case SQL92_RESERVED_BETWEEN:
                    	{
                    		alt224=1;
                    	}
                        break;
                    case SQL92_RESERVED_LIKE:
                    	{
                    		alt224=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA224_5 = this->LA(2);
                    		    if ( ((((toUpper(LT(1)->getText()) == "LIKE4"))||((toUpper(LT(1)->getText()) == "LIKE2"))||((toUpper(LT(1)->getText()) == "LIKEC")))))
                    		    {
                    		        alt224=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt224)
                {
            	case 1:
            	    // OracleDML.g:929:10: ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) )
            	    {
            	        // OracleDML.g:929:10: ( not_key )?
            	        {
            	            ANTLR_UINT32 alt221=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_NOT:
            	                	{
            	                		alt221=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt221)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:929:11: not_key
            	        	    {
            	        	        this->followPush(FOLLOW_not_key_in_compound_expression9266);
            	        	        not_key663=not_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            not_key663_last = not_key663.tree.get();
            	        	            stream_not_key.add(not_key663.tree);
            	        	        }

            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            isNegated = true;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:930:9: ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) )
            	        {
            	            ANTLR_UINT32 alt223=3;
            	            {
            	                ANTLR_UINT32 LA223_0 = this->LA(1);
            	                if ( (LA223_0 == SQL92_RESERVED_IN))
            	                {
            	                    alt223=1;
            	                }
            	                else if ( (LA223_0 == SQL92_RESERVED_BETWEEN))
            	                {
            	                    alt223=2;
            	                }
            	                else if ( (LA223_0 == SQL92_RESERVED_LIKE))
            	                {
            	                    alt223=3;
            	                }
            	                else if ( (LA223_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "LIKE4"))||((toUpper(LT(1)->getText()) == "LIKE2"))||((toUpper(LT(1)->getText()) == "LIKEC")))))
            	                {
            	                    alt223=3;
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 223 );
            	                    ex->set_state( 0 );


            	                    goto rulecompound_expressionEx;

            	                }
            	            }
            	            switch (alt223)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:930:14: in_key in_elements
            	        	    {
            	        	        this->followPush(FOLLOW_in_key_in_compound_expression9286);
            	        	        in_key664=in_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            in_key664_last = in_key664.tree.get();
            	        	            stream_in_key.add(in_key664.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_in_elements_in_compound_expression9288);
            	        	        in_elements665=in_elements();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            in_elements665_last = in_elements665.tree.get();
            	        	            stream_in_elements.add(in_elements665.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: in_elements, in_elements, compound_expression, compound_expression, in_key
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 931:17: -> {isNegated}? ^( NOT_IN $compound_expression in_elements )
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:931:33: ^( NOT_IN $compound_expression in_elements )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NOT_IN, "NOT_IN"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_in_elements.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 932:17: -> ^( in_key $compound_expression in_elements )
            	        	        {
            	        	        	// OracleDML.g:932:20: ^( in_key $compound_expression in_elements )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_in_elements.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:933:14: between_key between_elements
            	        	    {
            	        	        this->followPush(FOLLOW_between_key_in_compound_expression9359);
            	        	        between_key666=between_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            between_key666_last = between_key666.tree.get();
            	        	            stream_between_key.add(between_key666.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_between_elements_in_compound_expression9361);
            	        	        between_elements667=between_elements();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            between_elements667_last = between_elements667.tree.get();
            	        	            stream_between_elements.add(between_elements667.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: compound_expression, between_key, compound_expression, between_elements, between_elements
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 934:17: -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements )
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:934:33: ^( NOT_BETWEEN $compound_expression between_elements )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_between_elements.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 935:17: -> ^( between_key $compound_expression between_elements )
            	        	        {
            	        	        	// OracleDML.g:935:20: ^( between_key $compound_expression between_elements )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_between_key.nextNode(), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_between_elements.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // OracleDML.g:936:14: like_type concatenation ( like_escape_part )?
            	        	    {
            	        	        this->followPush(FOLLOW_like_type_in_compound_expression9432);
            	        	        like_type668=like_type();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            like_type668_last = like_type668.tree.get();
            	        	            stream_like_type.add(like_type668.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_concatenation_in_compound_expression9434);
            	        	        concatenation669=concatenation();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            concatenation669_last = concatenation669.tree.get();
            	        	            stream_concatenation.add(concatenation669.tree);
            	        	        }

            	        	        // OracleDML.g:936:38: ( like_escape_part )?
            	        	        {
            	        	            ANTLR_UINT32 alt222=2;
            	        	            switch ( this->LA(1) )
            	        	            {
            	        	                case REGULAR_ID:
            	        	                	{
            	        	                		{
            	        	                		    ANTLR_UINT32 LA222_1 = this->LA(2);
            	        	                		    if ( ((toUpper(LT(1)->getText()) == "ESCAPE")))
            	        	                		    {
            	        	                		        alt222=1;
            	        	                		    }
            	        	                		}
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt222)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:936:38: like_escape_part
            	        	        	    {
            	        	        	        this->followPush(FOLLOW_like_escape_part_in_compound_expression9436);
            	        	        	        like_escape_part670=like_escape_part();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto rulecompound_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            like_escape_part670_last = like_escape_part670.tree.get();
            	        	        	            stream_like_escape_part.add(like_escape_part670.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: concatenation, like_escape_part, like_escape_part, concatenation, compound_expression, compound_expression, like_type
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 937:17: -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:937:33: ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NOT_LIKE, "NOT_LIKE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	// OracleDML.g:937:65: ^( EXPR concatenation )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_concatenation.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	        	        	}
            	        	        	// OracleDML.g:937:87: ( like_escape_part )?
            	        	        	if ( stream_like_escape_part.hasNext() ) {
            	        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_like_escape_part.nextTree());
            	        	        	}
            	        	        	stream_like_escape_part.reset();

            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 938:17: -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
            	        	        {
            	        	        	// OracleDML.g:938:20: ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_like_type.nextNode(), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	// OracleDML.g:938:54: ^( EXPR concatenation )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_concatenation.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	        	        	}
            	        	        	// OracleDML.g:938:76: ( like_escape_part )?
            	        	        	if ( stream_like_escape_part.hasNext() ) {
            	        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_like_escape_part.nextTree());
            	        	        	}
            	        	        	stream_like_escape_part.reset();

            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecompound_expressionEx; /* Prevent compiler warnings */
    rulecompound_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end compound_expression */

/**
 * $ANTLR start like_type
 * OracleDML.g:943:1: like_type : ( like_key | likec_key | like2_key | like4_key );
 */
OracleDML::like_type_return
OracleDML::like_type()
{
    OracleDML::like_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::like_key_return like_key671;
    ImplTraits::TreeTypePtr::pointer like_key671_last = NULL;
    OracleDML_OracleDMLKeys::likec_key_return likec_key672;
    ImplTraits::TreeTypePtr::pointer likec_key672_last = NULL;
    OracleDML_OracleDMLKeys::like2_key_return like2_key673;
    ImplTraits::TreeTypePtr::pointer like2_key673_last = NULL;
    OracleDML_OracleDMLKeys::like4_key_return like4_key674;
    ImplTraits::TreeTypePtr::pointer like4_key674_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:944:5: ( like_key | likec_key | like2_key | like4_key )

            ANTLR_UINT32 alt225;

            alt225=4;

            {
                ANTLR_UINT32 LA225_0 = this->LA(1);
                if ( (LA225_0 == SQL92_RESERVED_LIKE))
                {
                    alt225=1;
                }
                else if ( (LA225_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "LIKE4"))||((toUpper(LT(1)->getText()) == "LIKE2"))||((toUpper(LT(1)->getText()) == "LIKEC")))))
                {
                    {
                        ANTLR_UINT32 LA225_2 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "LIKEC")))
                        {
                            alt225=2;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "LIKE2")))
                        {
                            alt225=3;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "LIKE4")))
                        {
                            alt225=4;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 225 );
                            ex->set_state( 2 );


                            goto rulelike_typeEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 225 );
                    ex->set_state( 0 );


                    goto rulelike_typeEx;

                }
            }
            switch (alt225)
            {
        	case 1:
        	    // OracleDML.g:944:10: like_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_like_key_in_like_type9545);
        	        like_key671=like_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelike_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, like_key671.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:945:10: likec_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_likec_key_in_like_type9556);
        	        likec_key672=likec_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelike_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, likec_key672.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:946:10: like2_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_like2_key_in_like_type9567);
        	        like2_key673=like2_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelike_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, like2_key673.tree);


        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:947:10: like4_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_like4_key_in_like_type9578);
        	        like4_key674=like4_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelike_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, like4_key674.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulelike_typeEx; /* Prevent compiler warnings */
    rulelike_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end like_type */

/**
 * $ANTLR start like_escape_part
 * OracleDML.g:950:1: like_escape_part : escape_key concatenation -> ^( EXPR concatenation ) ;
 */
OracleDML::like_escape_part_return
OracleDML::like_escape_part()
{
    OracleDML::like_escape_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::escape_key_return escape_key675;
    ImplTraits::TreeTypePtr::pointer escape_key675_last = NULL;
    OracleDML::concatenation_return concatenation676;
    ImplTraits::TreeTypePtr::pointer concatenation676_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_escape_key(get_psrstate()->get_treeAdaptor(), "rule escape_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:951:5: ( escape_key concatenation -> ^( EXPR concatenation ) )
        // OracleDML.g:951:10: escape_key concatenation
        {
            this->followPush(FOLLOW_escape_key_in_like_escape_part9598);
            escape_key675=escape_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelike_escape_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                escape_key675_last = escape_key675.tree.get();
                stream_escape_key.add(escape_key675.tree);
            }

            this->followPush(FOLLOW_concatenation_in_like_escape_part9600);
            concatenation676=concatenation();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelike_escape_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                concatenation676_last = concatenation676.tree.get();
                stream_concatenation.add(concatenation676.tree);
            }

            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 952:9: -> ^( EXPR concatenation )
            {
            	// OracleDML.g:952:12: ^( EXPR concatenation )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelike_escape_partEx; /* Prevent compiler warnings */
    rulelike_escape_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end like_escape_part */

/**
 * $ANTLR start in_elements
 * OracleDML.g:955:1: in_elements : ( ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN -> ^( NESTED_SUBQUERY[$LEFT_PAREN] subquery RIGHT_PAREN ) | LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN -> ^( EXPR_LIST[$LEFT_PAREN] ( concatenation_wrapper )+ RIGHT_PAREN ) | constant -> ^( EXPR_LIST constant ) | bind_variable -> ^( EXPR_LIST bind_variable ) | general_element -> ^( EXPR_LIST general_element ) );
 */
OracleDML::in_elements_return
OracleDML::in_elements()
{
    OracleDML::in_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN677 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN679 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN680 = NULL;
    ImplTraits::CommonTokenType const* COMMA682 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN684 = NULL;
    OracleDML::subquery_return subquery678;
    ImplTraits::TreeTypePtr::pointer subquery678_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper681;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper681_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper683;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper683_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant685;
    ImplTraits::TreeTypePtr::pointer constant685_last = NULL;
    OracleDML_OracleDMLCommons::bind_variable_return bind_variable686;
    ImplTraits::TreeTypePtr::pointer bind_variable686_last = NULL;
    OracleDML_OracleDMLCommons::general_element_return general_element687;
    ImplTraits::TreeTypePtr::pointer general_element687_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN677_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN679_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN680_tree;
    ImplTraits::TreeTypePtr COMMA682_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN684_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation_wrapper(get_psrstate()->get_treeAdaptor(), "rule concatenation_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_bind_variable(get_psrstate()->get_treeAdaptor(), "rule bind_variable");
    RewriteRuleSubtreeStream<ImplTraits> stream_constant(get_psrstate()->get_treeAdaptor(), "rule constant");
    RewriteRuleSubtreeStream<ImplTraits> stream_general_element(get_psrstate()->get_treeAdaptor(), "rule general_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:957:5: ( ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN -> ^( NESTED_SUBQUERY[$LEFT_PAREN] subquery RIGHT_PAREN ) | LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN -> ^( EXPR_LIST[$LEFT_PAREN] ( concatenation_wrapper )+ RIGHT_PAREN ) | constant -> ^( EXPR_LIST constant ) | bind_variable -> ^( EXPR_LIST bind_variable ) | general_element -> ^( EXPR_LIST general_element ) )

            ANTLR_UINT32 alt227;

            alt227=5;

            switch ( this->LA(1) )
            {
            case LEFT_PAREN:
            	{
            		{
            		    ANTLR_UINT32 LA227_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred29_OracleDML>() )))
            		    {
            		        alt227=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt227=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 227 );
            		        ex->set_state( 1 );


            		        goto rulein_elementsEx;

            		    }
            		}
            	}
                break;
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA227_2 = this->LA(2);
            		    if ( ((((toUpper(LT(1)->getText()) == "INTERVAL"))||((toUpper(LT(1)->getText()) == "MINVALUE"))||((toUpper(LT(1)->getText()) == "SESSIONTIMEZONE"))||((toUpper(LT(1)->getText()) == "TIMESTAMP"))||((toUpper(LT(1)->getText()) == "MAXVALUE"))||((toUpper(LT(1)->getText()) == "DBTIMEZONE")))))
            		    {
            		        alt227=3;
            		    }
            		    else if ( (true))
            		    {
            		        alt227=5;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 227 );
            		        ex->set_state( 2 );


            		        goto rulein_elementsEx;

            		    }
            		}
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case EXACT_NUM_LIT:
            case NATIONAL_CHAR_STRING_LIT:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt227=3;
            	}
                break;
            case BINDVAR:
            case COLON:
            	{
            		alt227=4;
            	}
                break;
            case DELIMITED_ID:
            case INTRODUCER:
            	{
            		alt227=5;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 227 );
                ex->set_state( 0 );


                goto rulein_elementsEx;

            }

            switch (alt227)
            {
        	case 1:
        	    // OracleDML.g:957:10: ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
        	    {
        	        LEFT_PAREN677 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_in_elements9658);
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN677);


        	        this->followPush(FOLLOW_subquery_in_in_elements9660);
        	        subquery678=subquery();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            subquery678_last = subquery678.tree.get();
        	            stream_subquery.add(subquery678.tree);
        	        }

        	        RIGHT_PAREN679 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_in_elements9662);
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN679);


        	        // AST REWRITE
        	        // elements: subquery, RIGHT_PAREN
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 958:10: -> ^( NESTED_SUBQUERY[$LEFT_PAREN] subquery RIGHT_PAREN )
        	        {
        	        	// OracleDML.g:958:13: ^( NESTED_SUBQUERY[$LEFT_PAREN] subquery RIGHT_PAREN )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_SUBQUERY, LEFT_PAREN677), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:959:10: LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN
        	    {
        	        LEFT_PAREN680 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_in_elements9693);
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN680);


        	        this->followPush(FOLLOW_concatenation_wrapper_in_in_elements9695);
        	        concatenation_wrapper681=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            concatenation_wrapper681_last = concatenation_wrapper681.tree.get();
        	            stream_concatenation_wrapper.add(concatenation_wrapper681.tree);
        	        }

        	        // OracleDML.g:959:43: ( COMMA concatenation_wrapper )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt226=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt226=1;
        	            	}
        	                break;

        	            }

        	            switch (alt226)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:959:44: COMMA concatenation_wrapper
        	        	    {
        	        	        COMMA682 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_in_elements9698);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulein_elementsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA682);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_in_elements9700);
        	        	        concatenation_wrapper683=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulein_elementsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            concatenation_wrapper683_last = concatenation_wrapper683.tree.get();
        	        	            stream_concatenation_wrapper.add(concatenation_wrapper683.tree);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop226;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop226: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN684 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_in_elements9704);
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN684);


        	        // AST REWRITE
        	        // elements: concatenation_wrapper, RIGHT_PAREN
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 960:10: -> ^( EXPR_LIST[$LEFT_PAREN] ( concatenation_wrapper )+ RIGHT_PAREN )
        	        {
        	        	// OracleDML.g:960:13: ^( EXPR_LIST[$LEFT_PAREN] ( concatenation_wrapper )+ RIGHT_PAREN )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, LEFT_PAREN680), root_1);
        	        	if ( !(stream_concatenation_wrapper.hasNext()) ) {
        	        		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "concatenation_wrapper empty" );
        	        		goto rulein_elementsEx;
        	        	}
        	        	while ( stream_concatenation_wrapper.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation_wrapper.nextTree());
        	        	}
        	        	stream_concatenation_wrapper.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:961:10: constant
        	    {
        	        this->followPush(FOLLOW_constant_in_in_elements9736);
        	        constant685=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            constant685_last = constant685.tree.get();
        	            stream_constant.add(constant685.tree);
        	        }

        	        // AST REWRITE
        	        // elements: constant
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 962:10: -> ^( EXPR_LIST constant )
        	        {
        	        	// OracleDML.g:962:13: ^( EXPR_LIST constant )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, "EXPR_LIST"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_constant.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:963:10: bind_variable
        	    {
        	        this->followPush(FOLLOW_bind_variable_in_in_elements9764);
        	        bind_variable686=bind_variable();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            bind_variable686_last = bind_variable686.tree.get();
        	            stream_bind_variable.add(bind_variable686.tree);
        	        }

        	        // AST REWRITE
        	        // elements: bind_variable
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 964:10: -> ^( EXPR_LIST bind_variable )
        	        {
        	        	// OracleDML.g:964:13: ^( EXPR_LIST bind_variable )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, "EXPR_LIST"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_bind_variable.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:965:10: general_element
        	    {
        	        this->followPush(FOLLOW_general_element_in_in_elements9792);
        	        general_element687=general_element();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            general_element687_last = general_element687.tree.get();
        	            stream_general_element.add(general_element687.tree);
        	        }

        	        // AST REWRITE
        	        // elements: general_element
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 966:10: -> ^( EXPR_LIST general_element )
        	        {
        	        	// OracleDML.g:966:13: ^( EXPR_LIST general_element )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, "EXPR_LIST"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_general_element.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulein_elementsEx; /* Prevent compiler warnings */
    rulein_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end in_elements */

/**
 * $ANTLR start between_elements
 * OracleDML.g:969:1: between_elements : cn1= concatenation and_key cn2= concatenation -> ^( EXPR $cn1) ^( EXPR $cn2) ;
 */
OracleDML::between_elements_return
OracleDML::between_elements()
{
    OracleDML::between_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::concatenation_return cn1;
    ImplTraits::TreeTypePtr::pointer cn1_last = NULL;
    OracleDML::concatenation_return cn2;
    ImplTraits::TreeTypePtr::pointer cn2_last = NULL;
    OracleDML_OracleDMLKeys::and_key_return and_key688;
    ImplTraits::TreeTypePtr::pointer and_key688_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_and_key(get_psrstate()->get_treeAdaptor(), "rule and_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:970:5: (cn1= concatenation and_key cn2= concatenation -> ^( EXPR $cn1) ^( EXPR $cn2) )
        // OracleDML.g:970:10: cn1= concatenation and_key cn2= concatenation
        {
            this->followPush(FOLLOW_concatenation_in_between_elements9831);
            cn1=concatenation();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetween_elementsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                cn1_last = cn1.tree.get();
                stream_concatenation.add(cn1.tree);
            }

            this->followPush(FOLLOW_and_key_in_between_elements9833);
            and_key688=and_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetween_elementsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                and_key688_last = and_key688.tree.get();
                stream_and_key.add(and_key688.tree);
            }

            this->followPush(FOLLOW_concatenation_in_between_elements9837);
            cn2=concatenation();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetween_elementsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                cn2_last = cn2.tree.get();
                stream_concatenation.add(cn2.tree);
            }

            // AST REWRITE
            // elements: cn2, cn1
            // token labels: 
            // rule labels: retval, cn2, cn1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
            RewriteRuleSubtreeStream<ImplTraits> stream_cn2(get_psrstate()->get_treeAdaptor(), "rule cn2",cn2_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_cn1(get_psrstate()->get_treeAdaptor(), "rule cn1",cn1_last); // rewrite alias

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 971:9: -> ^( EXPR $cn1) ^( EXPR $cn2)
            {
            	// OracleDML.g:971:12: ^( EXPR $cn1)
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cn1.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            	// OracleDML.g:971:25: ^( EXPR $cn2)
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cn2.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulebetween_elementsEx; /* Prevent compiler warnings */
    rulebetween_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end between_elements */

/**
 * $ANTLR start concatenation
 * OracleDML.g:974:1: concatenation : additive_expression ( concatenation_op ^ additive_expression )* ;
 */
OracleDML::concatenation_return
OracleDML::concatenation()
{
    OracleDML::concatenation_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::additive_expression_return additive_expression689;
    ImplTraits::TreeTypePtr::pointer additive_expression689_last = NULL;
    OracleDML_OracleDMLCommons::concatenation_op_return concatenation_op690;
    ImplTraits::TreeTypePtr::pointer concatenation_op690_last = NULL;
    OracleDML::additive_expression_return additive_expression691;
    ImplTraits::TreeTypePtr::pointer additive_expression691_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:975:5: ( additive_expression ( concatenation_op ^ additive_expression )* )
        // OracleDML.g:975:10: additive_expression ( concatenation_op ^ additive_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_additive_expression_in_concatenation9882);
            additive_expression689=additive_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconcatenationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, additive_expression689.tree);


            // OracleDML.g:975:30: ( concatenation_op ^ additive_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt228=2;
                switch ( this->LA(1) )
                {
                case CONCATENATION_OP:
                	{
                		alt228=1;
                	}
                    break;
                case VERTICAL_BAR:
                	{
                		alt228=1;
                	}
                    break;

                }

                switch (alt228)
                {
            	case 1:
            	    // OracleDML.g:975:31: concatenation_op ^ additive_expression
            	    {
            	        this->followPush(FOLLOW_concatenation_op_in_concatenation9885);
            	        concatenation_op690=concatenation_op();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconcatenationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(concatenation_op690.tree, root_0);

            	        this->followPush(FOLLOW_additive_expression_in_concatenation9888);
            	        additive_expression691=additive_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconcatenationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, additive_expression691.tree);


            	    }
            	    break;

            	default:
            	    goto loop228;	/* break out of the loop */
            	    break;
                }
            }
            loop228: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconcatenationEx; /* Prevent compiler warnings */
    ruleconcatenationEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end concatenation */

/**
 * $ANTLR start concatenation_wrapper
 * OracleDML.g:978:1: concatenation_wrapper : concatenation -> ^( EXPR concatenation ) ;
 */
OracleDML::concatenation_wrapper_return
OracleDML::concatenation_wrapper()
{
    OracleDML::concatenation_wrapper_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::concatenation_return concatenation692;
    ImplTraits::TreeTypePtr::pointer concatenation692_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:979:5: ( concatenation -> ^( EXPR concatenation ) )
        // OracleDML.g:979:10: concatenation
        {
            this->followPush(FOLLOW_concatenation_in_concatenation_wrapper9910);
            concatenation692=concatenation();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconcatenation_wrapperEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                concatenation692_last = concatenation692.tree.get();
                stream_concatenation.add(concatenation692.tree);
            }

            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 980:9: -> ^( EXPR concatenation )
            {
            	// OracleDML.g:980:12: ^( EXPR concatenation )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconcatenation_wrapperEx; /* Prevent compiler warnings */
    ruleconcatenation_wrapperEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end concatenation_wrapper */

/**
 * $ANTLR start additive_expression
 * OracleDML.g:983:1: additive_expression : multiply_expression ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )* ;
 */
OracleDML::additive_expression_return
OracleDML::additive_expression()
{
    OracleDML::additive_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* PLUS_SIGN694 = NULL;
    ImplTraits::CommonTokenType const* MINUS_SIGN695 = NULL;
    OracleDML::multiply_expression_return multiply_expression693;
    ImplTraits::TreeTypePtr::pointer multiply_expression693_last = NULL;
    OracleDML::multiply_expression_return multiply_expression696;
    ImplTraits::TreeTypePtr::pointer multiply_expression696_last = NULL;
    ImplTraits::TreeTypePtr PLUS_SIGN694_tree;
    ImplTraits::TreeTypePtr MINUS_SIGN695_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:984:5: ( multiply_expression ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )* )
        // OracleDML.g:984:10: multiply_expression ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_multiply_expression_in_additive_expression9946);
            multiply_expression693=multiply_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadditive_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multiply_expression693.tree);


            // OracleDML.g:984:30: ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt230=2;
                switch ( this->LA(1) )
                {
                case PLUS_SIGN:
                	{
                		alt230=1;
                	}
                    break;
                case MINUS_SIGN:
                	{
                		alt230=1;
                	}
                    break;

                }

                switch (alt230)
                {
            	case 1:
            	    // OracleDML.g:984:32: ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression
            	    {
            	        // OracleDML.g:984:32: ( PLUS_SIGN ^| MINUS_SIGN ^)
            	        {
            	            ANTLR_UINT32 alt229=2;
            	            switch ( this->LA(1) )
            	            {
            	            case PLUS_SIGN:
            	            	{
            	            		alt229=1;
            	            	}
            	                break;
            	            case MINUS_SIGN:
            	            	{
            	            		alt229=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 229 );
            	                ex->set_state( 0 );


            	                goto ruleadditive_expressionEx;

            	            }

            	            switch (alt229)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:984:34: PLUS_SIGN ^
            	        	    {
            	        	        PLUS_SIGN694 =  this->matchToken(PLUS_SIGN, &FOLLOW_PLUS_SIGN_in_additive_expression9952);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleadditive_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        PLUS_SIGN694_tree = get_psrstate()->get_treeAdaptor()->create(PLUS_SIGN694);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(PLUS_SIGN694_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:984:47: MINUS_SIGN ^
            	        	    {
            	        	        MINUS_SIGN695 =  this->matchToken(MINUS_SIGN, &FOLLOW_MINUS_SIGN_in_additive_expression9957);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleadditive_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        MINUS_SIGN695_tree = get_psrstate()->get_treeAdaptor()->create(MINUS_SIGN695);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(MINUS_SIGN695_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_multiply_expression_in_additive_expression9962);
            	        multiply_expression696=multiply_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleadditive_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multiply_expression696.tree);


            	    }
            	    break;

            	default:
            	    goto loop230;	/* break out of the loop */
            	    break;
                }
            }
            loop230: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleadditive_expressionEx; /* Prevent compiler warnings */
    ruleadditive_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end additive_expression */

/**
 * $ANTLR start multiply_expression
 * OracleDML.g:987:1: multiply_expression : datetime_expression ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )* ;
 */
OracleDML::multiply_expression_return
OracleDML::multiply_expression()
{
    OracleDML::multiply_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* ASTERISK698 = NULL;
    ImplTraits::CommonTokenType const* SOLIDUS699 = NULL;
    OracleDML::datetime_expression_return datetime_expression697;
    ImplTraits::TreeTypePtr::pointer datetime_expression697_last = NULL;
    OracleDML::datetime_expression_return datetime_expression700;
    ImplTraits::TreeTypePtr::pointer datetime_expression700_last = NULL;
    ImplTraits::TreeTypePtr ASTERISK698_tree;
    ImplTraits::TreeTypePtr SOLIDUS699_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:988:5: ( datetime_expression ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )* )
        // OracleDML.g:988:10: datetime_expression ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_datetime_expression_in_multiply_expression9984);
            datetime_expression697=datetime_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultiply_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, datetime_expression697.tree);


            // OracleDML.g:988:30: ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt232=2;
                switch ( this->LA(1) )
                {
                case ASTERISK:
                	{
                		alt232=1;
                	}
                    break;
                case SOLIDUS:
                	{
                		alt232=1;
                	}
                    break;

                }

                switch (alt232)
                {
            	case 1:
            	    // OracleDML.g:988:32: ( ASTERISK ^| SOLIDUS ^) datetime_expression
            	    {
            	        // OracleDML.g:988:32: ( ASTERISK ^| SOLIDUS ^)
            	        {
            	            ANTLR_UINT32 alt231=2;
            	            switch ( this->LA(1) )
            	            {
            	            case ASTERISK:
            	            	{
            	            		alt231=1;
            	            	}
            	                break;
            	            case SOLIDUS:
            	            	{
            	            		alt231=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 231 );
            	                ex->set_state( 0 );


            	                goto rulemultiply_expressionEx;

            	            }

            	            switch (alt231)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:988:34: ASTERISK ^
            	        	    {
            	        	        ASTERISK698 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_multiply_expression9990);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemultiply_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        ASTERISK698_tree = get_psrstate()->get_treeAdaptor()->create(ASTERISK698);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(ASTERISK698_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:988:46: SOLIDUS ^
            	        	    {
            	        	        SOLIDUS699 =  this->matchToken(SOLIDUS, &FOLLOW_SOLIDUS_in_multiply_expression9995);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemultiply_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        SOLIDUS699_tree = get_psrstate()->get_treeAdaptor()->create(SOLIDUS699);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(SOLIDUS699_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_datetime_expression_in_multiply_expression10000);
            	        datetime_expression700=datetime_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiply_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, datetime_expression700.tree);


            	    }
            	    break;

            	default:
            	    goto loop232;	/* break out of the loop */
            	    break;
                }
            }
            loop232: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemultiply_expressionEx; /* Prevent compiler warnings */
    rulemultiply_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multiply_expression */

/**
 * $ANTLR start datetime_expression
 * OracleDML.g:991:1: datetime_expression : ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )? ;
 */
OracleDML::datetime_expression_return
OracleDML::datetime_expression()
{
    OracleDML::datetime_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::model_expression_return model_expression701;
    ImplTraits::TreeTypePtr::pointer model_expression701_last = NULL;
    OracleDML_OracleDMLKeys::at_key_return at_key702;
    ImplTraits::TreeTypePtr::pointer at_key702_last = NULL;
    OracleDML_OracleDMLKeys::local_key_return local_key703;
    ImplTraits::TreeTypePtr::pointer local_key703_last = NULL;
    OracleDML_OracleDMLKeys::time_key_return time_key704;
    ImplTraits::TreeTypePtr::pointer time_key704_last = NULL;
    OracleDML_OracleDMLKeys::zone_key_return zone_key705;
    ImplTraits::TreeTypePtr::pointer zone_key705_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper706;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper706_last = NULL;
    OracleDML::interval_expression_return interval_expression707;
    ImplTraits::TreeTypePtr::pointer interval_expression707_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_at_key(get_psrstate()->get_treeAdaptor(), "rule at_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation_wrapper(get_psrstate()->get_treeAdaptor(), "rule concatenation_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_expression(get_psrstate()->get_treeAdaptor(), "rule model_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_local_key(get_psrstate()->get_treeAdaptor(), "rule local_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_zone_key(get_psrstate()->get_treeAdaptor(), "rule zone_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_interval_expression(get_psrstate()->get_treeAdaptor(), "rule interval_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_time_key(get_psrstate()->get_treeAdaptor(), "rule time_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:992:5: ( ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )? )
        // OracleDML.g:992:10: ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )?
        {
            // OracleDML.g:992:10: ( model_expression -> model_expression )
            // OracleDML.g:992:11: model_expression
            {
                this->followPush(FOLLOW_model_expression_in_datetime_expression10023);
                model_expression701=model_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruledatetime_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    model_expression701_last = model_expression701.tree.get();
                    stream_model_expression.add(model_expression701.tree);
                }

                // AST REWRITE
                // elements: model_expression
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 992:28: -> model_expression
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_model_expression.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:993:5: ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )?
            {
                ANTLR_UINT32 alt234=3;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA234_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "AT")))
                    		    {
                    		        alt234=1;
                    		    }
                    		    else if ( (( ((((toUpper(LT(1)->getText()) == "YEAR"))||((toUpper(LT(1)->getText()) == "DAY")))) && (this->msynpred( antlr3::ClassForwarder<synpred30_OracleDML>() )) )))
                    		    {
                    		        alt234=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt234)
                {
            	case 1:
            	    // OracleDML.g:993:10: at_key ( local_key | time_key zone_key concatenation_wrapper )
            	    {
            	        this->followPush(FOLLOW_at_key_in_datetime_expression10039);
            	        at_key702=at_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledatetime_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            at_key702_last = at_key702.tree.get();
            	            stream_at_key.add(at_key702.tree);
            	        }

            	        // OracleDML.g:993:17: ( local_key | time_key zone_key concatenation_wrapper )
            	        {
            	            ANTLR_UINT32 alt233=2;
            	            switch ( this->LA(1) )
            	            {
            	            case REGULAR_ID:
            	            	{
            	            		{
            	            		    ANTLR_UINT32 LA233_1 = this->LA(2);
            	            		    if ( ((toUpper(LT(1)->getText()) == "LOCAL")))
            	            		    {
            	            		        alt233=1;
            	            		    }
            	            		    else if ( ((toUpper(LT(1)->getText()) == "TIME")))
            	            		    {
            	            		        alt233=2;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 233 );
            	            		        ex->set_state( 1 );


            	            		        goto ruledatetime_expressionEx;

            	            		    }
            	            		}
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 233 );
            	                ex->set_state( 0 );


            	                goto ruledatetime_expressionEx;

            	            }

            	            switch (alt233)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:993:18: local_key
            	        	    {
            	        	        this->followPush(FOLLOW_local_key_in_datetime_expression10042);
            	        	        local_key703=local_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruledatetime_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            local_key703_last = local_key703.tree.get();
            	        	            stream_local_key.add(local_key703.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:993:28: time_key zone_key concatenation_wrapper
            	        	    {
            	        	        this->followPush(FOLLOW_time_key_in_datetime_expression10044);
            	        	        time_key704=time_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruledatetime_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            time_key704_last = time_key704.tree.get();
            	        	            stream_time_key.add(time_key704.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_zone_key_in_datetime_expression10046);
            	        	        zone_key705=zone_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruledatetime_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            zone_key705_last = zone_key705.tree.get();
            	        	            stream_zone_key.add(zone_key705.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_concatenation_wrapper_in_datetime_expression10048);
            	        	        concatenation_wrapper706=concatenation_wrapper();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruledatetime_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            concatenation_wrapper706_last = concatenation_wrapper706.tree.get();
            	        	            stream_concatenation_wrapper.add(concatenation_wrapper706.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        // AST REWRITE
            	        // elements: time_key, at_key, datetime_expression, concatenation_wrapper, local_key
            	        // token labels: 
            	        // rule labels: retval
            	        // token list labels: 
            	        // rule list labels: 
            	        // wildcard labels: 
            	        if ( this->get_backtracking()==0 ) {
            	        retval.tree = std::move(root_0);
            	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        // 994:13: -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) )
            	        {
            	        	// OracleDML.g:994:16: ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) )
            	        	{
            	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DATETIME_OP, "DATETIME_OP"), root_1);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	// OracleDML.g:994:51: ^( at_key ( local_key )? ( time_key )? concatenation_wrapper )
            	        	{
            	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_at_key.nextNode(), root_2);
            	        	// OracleDML.g:994:60: ( local_key )?
            	        	if ( stream_local_key.hasNext() ) {
            	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_local_key.nextTree());
            	        	}
            	        	stream_local_key.reset();

            	        	// OracleDML.g:994:71: ( time_key )?
            	        	if ( stream_time_key.hasNext() ) {
            	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_time_key.nextTree());
            	        	}
            	        	stream_time_key.reset();

            	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_concatenation_wrapper.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	        	}
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	}
            	        }


            	        //retval.tree = std::move(root_0);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:995:10: ( interval_expression )=> interval_expression
            	    {
            	        this->followPush(FOLLOW_interval_expression_in_datetime_expression10098);
            	        interval_expression707=interval_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledatetime_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            interval_expression707_last = interval_expression707.tree.get();
            	            stream_interval_expression.add(interval_expression707.tree);
            	        }

            	        // AST REWRITE
            	        // elements: datetime_expression, interval_expression
            	        // token labels: 
            	        // rule labels: retval
            	        // token list labels: 
            	        // rule list labels: 
            	        // wildcard labels: 
            	        if ( this->get_backtracking()==0 ) {
            	        retval.tree = std::move(root_0);
            	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        // 996:13: -> ^( DATETIME_OP $datetime_expression interval_expression )
            	        {
            	        	// OracleDML.g:996:16: ^( DATETIME_OP $datetime_expression interval_expression )
            	        	{
            	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DATETIME_OP, "DATETIME_OP"), root_1);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_interval_expression.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	}
            	        }


            	        //retval.tree = std::move(root_0);
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruledatetime_expressionEx; /* Prevent compiler warnings */
    ruledatetime_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end datetime_expression */

/**
 * $ANTLR start interval_expression
 * OracleDML.g:1000:1: interval_expression : ( day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )? -> ^( day_key ( $cn1)? to_key second_key ( $cn2)? ) | year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key -> ^( year_key to_key month_key concatenation_wrapper ) );
 */
OracleDML::interval_expression_return
OracleDML::interval_expression()
{
    OracleDML::interval_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN709 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN710 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN713 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN714 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN716 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN718 = NULL;
    OracleDML::concatenation_wrapper_return cn1;
    ImplTraits::TreeTypePtr::pointer cn1_last = NULL;
    OracleDML::concatenation_wrapper_return cn2;
    ImplTraits::TreeTypePtr::pointer cn2_last = NULL;
    OracleDML_OracleDMLKeys::day_key_return day_key708;
    ImplTraits::TreeTypePtr::pointer day_key708_last = NULL;
    OracleDML_OracleDMLKeys::to_key_return to_key711;
    ImplTraits::TreeTypePtr::pointer to_key711_last = NULL;
    OracleDML_OracleDMLKeys::second_key_return second_key712;
    ImplTraits::TreeTypePtr::pointer second_key712_last = NULL;
    OracleDML_OracleDMLKeys::year_key_return year_key715;
    ImplTraits::TreeTypePtr::pointer year_key715_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper717;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper717_last = NULL;
    OracleDML_OracleDMLKeys::to_key_return to_key719;
    ImplTraits::TreeTypePtr::pointer to_key719_last = NULL;
    OracleDML_OracleDMLKeys::month_key_return month_key720;
    ImplTraits::TreeTypePtr::pointer month_key720_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN709_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN710_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN713_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN714_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN716_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN718_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_year_key(get_psrstate()->get_treeAdaptor(), "rule year_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_day_key(get_psrstate()->get_treeAdaptor(), "rule day_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_second_key(get_psrstate()->get_treeAdaptor(), "rule second_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation_wrapper(get_psrstate()->get_treeAdaptor(), "rule concatenation_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_to_key(get_psrstate()->get_treeAdaptor(), "rule to_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_month_key(get_psrstate()->get_treeAdaptor(), "rule month_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1001:5: ( day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )? -> ^( day_key ( $cn1)? to_key second_key ( $cn2)? ) | year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key -> ^( year_key to_key month_key concatenation_wrapper ) )

            ANTLR_UINT32 alt238;

            alt238=2;

            {
                ANTLR_UINT32 LA238_0 = this->LA(1);
                if ( (LA238_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "YEAR"))||((toUpper(LT(1)->getText()) == "DAY")))))
                {
                    {
                        ANTLR_UINT32 LA238_1 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "DAY")))
                        {
                            alt238=1;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "YEAR")))
                        {
                            alt238=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 238 );
                            ex->set_state( 1 );


                            goto ruleinterval_expressionEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 238 );
                    ex->set_state( 0 );


                    goto ruleinterval_expressionEx;

                }
            }
            switch (alt238)
            {
        	case 1:
        	    // OracleDML.g:1001:10: day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?
        	    {
        	        this->followPush(FOLLOW_day_key_in_interval_expression10148);
        	        day_key708=day_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            day_key708_last = day_key708.tree.get();
        	            stream_day_key.add(day_key708.tree);
        	        }

        	        // OracleDML.g:1001:19: ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )?
        	        {
        	            ANTLR_UINT32 alt235=2;
        	            switch ( this->LA(1) )
        	            {
        	                case LEFT_PAREN:
        	                	{
        	                		alt235=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt235)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1001:20: LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN
        	        	    {
        	        	        LEFT_PAREN709 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_interval_expression10152);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN709);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_interval_expression10156);
        	        	        cn1=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            cn1_last = cn1.tree.get();
        	        	            stream_concatenation_wrapper.add(cn1.tree);
        	        	        }

        	        	        RIGHT_PAREN710 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_interval_expression10158);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN710);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_to_key_in_interval_expression10162);
        	        to_key711=to_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            to_key711_last = to_key711.tree.get();
        	            stream_to_key.add(to_key711.tree);
        	        }

        	        this->followPush(FOLLOW_second_key_in_interval_expression10164);
        	        second_key712=second_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            second_key712_last = second_key712.tree.get();
        	            stream_second_key.add(second_key712.tree);
        	        }

        	        // OracleDML.g:1001:89: ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?
        	        {
        	            ANTLR_UINT32 alt236=2;
        	            switch ( this->LA(1) )
        	            {
        	                case LEFT_PAREN:
        	                	{
        	                		alt236=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt236)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1001:90: LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN
        	        	    {
        	        	        LEFT_PAREN713 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_interval_expression10167);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN713);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_interval_expression10171);
        	        	        cn2=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            cn2_last = cn2.tree.get();
        	        	            stream_concatenation_wrapper.add(cn2.tree);
        	        	        }

        	        	        RIGHT_PAREN714 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_interval_expression10173);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN714);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: second_key, cn2, to_key, cn1, day_key
        	        // token labels: 
        	        // rule labels: retval, cn2, cn1
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
        	        RewriteRuleSubtreeStream<ImplTraits> stream_cn2(get_psrstate()->get_treeAdaptor(), "rule cn2",cn2_last); // rewrite alias
        	        RewriteRuleSubtreeStream<ImplTraits> stream_cn1(get_psrstate()->get_treeAdaptor(), "rule cn1",cn1_last); // rewrite alias

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 1002:9: -> ^( day_key ( $cn1)? to_key second_key ( $cn2)? )
        	        {
        	        	// OracleDML.g:1002:12: ^( day_key ( $cn1)? to_key second_key ( $cn2)? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_day_key.nextNode(), root_1);
        	        	// OracleDML.g:1002:23: ( $cn1)?
        	        	if ( stream_cn1.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cn1.nextTree());
        	        	}
        	        	stream_cn1.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_to_key.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_second_key.nextTree());
        	        	// OracleDML.g:1002:47: ( $cn2)?
        	        	if ( stream_cn2.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cn2.nextTree());
        	        	}
        	        	stream_cn2.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1003:10: year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key
        	    {
        	        this->followPush(FOLLOW_year_key_in_interval_expression10212);
        	        year_key715=year_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            year_key715_last = year_key715.tree.get();
        	            stream_year_key.add(year_key715.tree);
        	        }

        	        // OracleDML.g:1003:19: ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )?
        	        {
        	            ANTLR_UINT32 alt237=2;
        	            switch ( this->LA(1) )
        	            {
        	                case LEFT_PAREN:
        	                	{
        	                		alt237=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt237)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1003:20: LEFT_PAREN concatenation_wrapper RIGHT_PAREN
        	        	    {
        	        	        LEFT_PAREN716 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_interval_expression10215);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN716);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_interval_expression10217);
        	        	        concatenation_wrapper717=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            concatenation_wrapper717_last = concatenation_wrapper717.tree.get();
        	        	            stream_concatenation_wrapper.add(concatenation_wrapper717.tree);
        	        	        }

        	        	        RIGHT_PAREN718 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_interval_expression10219);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN718);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_to_key_in_interval_expression10223);
        	        to_key719=to_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            to_key719_last = to_key719.tree.get();
        	            stream_to_key.add(to_key719.tree);
        	        }

        	        this->followPush(FOLLOW_month_key_in_interval_expression10225);
        	        month_key720=month_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            month_key720_last = month_key720.tree.get();
        	            stream_month_key.add(month_key720.tree);
        	        }

        	        // AST REWRITE
        	        // elements: concatenation_wrapper, year_key, to_key, month_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 1004:9: -> ^( year_key to_key month_key concatenation_wrapper )
        	        {
        	        	// OracleDML.g:1004:12: ^( year_key to_key month_key concatenation_wrapper )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_year_key.nextNode(), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_to_key.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_month_key.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation_wrapper.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleinterval_expressionEx; /* Prevent compiler warnings */
    ruleinterval_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end interval_expression */

/**
 * $ANTLR start model_expression
 * OracleDML.g:1007:1: model_expression : ( multiset_expression -> multiset_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )? ;
 */
OracleDML::model_expression_return
OracleDML::model_expression()
{
    OracleDML::model_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_BRACKET722 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_BRACKET724 = NULL;
    OracleDML::multiset_expression_return multiset_expression721;
    ImplTraits::TreeTypePtr::pointer multiset_expression721_last = NULL;
    OracleDML::model_expression_element_return model_expression_element723;
    ImplTraits::TreeTypePtr::pointer model_expression_element723_last = NULL;
    ImplTraits::TreeTypePtr LEFT_BRACKET722_tree;
    ImplTraits::TreeTypePtr RIGHT_BRACKET724_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_BRACKET(get_psrstate()->get_treeAdaptor(), "token LEFT_BRACKET");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_BRACKET(get_psrstate()->get_treeAdaptor(), "token RIGHT_BRACKET");
    RewriteRuleSubtreeStream<ImplTraits> stream_multiset_expression(get_psrstate()->get_treeAdaptor(), "rule multiset_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_expression_element(get_psrstate()->get_treeAdaptor(), "rule model_expression_element");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1008:5: ( ( multiset_expression -> multiset_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )? )
        // OracleDML.g:1008:10: ( multiset_expression -> multiset_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )?
        {
            // OracleDML.g:1008:10: ( multiset_expression -> multiset_expression )
            // OracleDML.g:1008:11: multiset_expression
            {
                this->followPush(FOLLOW_multiset_expression_in_model_expression10266);
                multiset_expression721=multiset_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulemodel_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    multiset_expression721_last = multiset_expression721.tree.get();
                    stream_multiset_expression.add(multiset_expression721.tree);
                }

                // AST REWRITE
                // elements: multiset_expression
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 1008:31: -> multiset_expression
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_multiset_expression.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:1009:9: ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )?
            {
                ANTLR_UINT32 alt239=2;
                switch ( this->LA(1) )
                {
                    case LEFT_BRACKET:
                    	{
                    		alt239=1;
                    	}
                        break;
                }

                switch (alt239)
                {
            	case 1:
            	    // OracleDML.g:1009:10: LEFT_BRACKET model_expression_element RIGHT_BRACKET
            	    {
            	        LEFT_BRACKET722 =  this->matchToken(LEFT_BRACKET, &FOLLOW_LEFT_BRACKET_in_model_expression10282);
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET722);


            	        this->followPush(FOLLOW_model_expression_element_in_model_expression10284);
            	        model_expression_element723=model_expression_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_expression_element723_last = model_expression_element723.tree.get();
            	            stream_model_expression_element.add(model_expression_element723.tree);
            	        }

            	        RIGHT_BRACKET724 =  this->matchToken(RIGHT_BRACKET, &FOLLOW_RIGHT_BRACKET_in_model_expression10286);
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET724);


            	        // AST REWRITE
            	        // elements: model_expression, model_expression_element
            	        // token labels: 
            	        // rule labels: retval
            	        // token list labels: 
            	        // rule list labels: 
            	        // wildcard labels: 
            	        if ( this->get_backtracking()==0 ) {
            	        retval.tree = std::move(root_0);
            	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        // 1010:13: -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element )
            	        {
            	        	// OracleDML.g:1010:16: ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element )
            	        	{
            	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_EXPRESSION, LEFT_BRACKET722), root_1);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_expression_element.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	}
            	        }


            	        //retval.tree = std::move(root_0);
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_expressionEx; /* Prevent compiler warnings */
    rulemodel_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_expression */

/**
 * $ANTLR start model_expression_element
 * OracleDML.g:1013:1: model_expression_element : ( ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )* | single_column_for_loop ( COMMA ! single_column_for_loop )* | multi_column_for_loop );
 */
OracleDML::model_expression_element_return
OracleDML::model_expression_element()
{
    OracleDML::model_expression_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA727 = NULL;
    ImplTraits::CommonTokenType const* COMMA731 = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key725;
    ImplTraits::TreeTypePtr::pointer any_key725_last = NULL;
    OracleDML::condition_wrapper_return condition_wrapper726;
    ImplTraits::TreeTypePtr::pointer condition_wrapper726_last = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key728;
    ImplTraits::TreeTypePtr::pointer any_key728_last = NULL;
    OracleDML::condition_wrapper_return condition_wrapper729;
    ImplTraits::TreeTypePtr::pointer condition_wrapper729_last = NULL;
    OracleDML::single_column_for_loop_return single_column_for_loop730;
    ImplTraits::TreeTypePtr::pointer single_column_for_loop730_last = NULL;
    OracleDML::single_column_for_loop_return single_column_for_loop732;
    ImplTraits::TreeTypePtr::pointer single_column_for_loop732_last = NULL;
    OracleDML::multi_column_for_loop_return multi_column_for_loop733;
    ImplTraits::TreeTypePtr::pointer multi_column_for_loop733_last = NULL;
    ImplTraits::TreeTypePtr COMMA727_tree;
    ImplTraits::TreeTypePtr COMMA731_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1014:5: ( ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )* | single_column_for_loop ( COMMA ! single_column_for_loop )* | multi_column_for_loop )

            ANTLR_UINT32 alt244;

            alt244=3;

            switch ( this->LA(1) )
            {
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case REGULAR_ID:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt244=1;
            	}
                break;
            case SQL92_RESERVED_FOR:
            	{
            		switch ( this->LA(2) )
            		{
            		case DELIMITED_ID:
            		case INTRODUCER:
            		case REGULAR_ID:
            			{
            				alt244=2;
            			}
            		    break;
            		case LEFT_PAREN:
            			{
            				alt244=3;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 244 );
            		    ex->set_state( 2 );


            		    goto rulemodel_expression_elementEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 244 );
                ex->set_state( 0 );


                goto rulemodel_expression_elementEx;

            }

            switch (alt244)
            {
        	case 1:
        	    // OracleDML.g:1014:10: ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )*
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:1014:10: ( ( any_key )=> any_key | condition_wrapper )
        	        {
        	            ANTLR_UINT32 alt240=2;
        	            switch ( this->LA(1) )
        	            {
        	            case SQL92_RESERVED_ANY:
        	            	{
        	            		{
        	            		    ANTLR_UINT32 LA240_1 = this->LA(2);
        	            		    if ( (LA240_1 == COMMA) && (this->msynpred( antlr3::ClassForwarder<synpred31_OracleDML>() )))
        	            		    {
        	            		        alt240=1;
        	            		    }
        	            		    else if ( (LA240_1 == RIGHT_BRACKET) && (this->msynpred( antlr3::ClassForwarder<synpred31_OracleDML>() )))
        	            		    {
        	            		        alt240=1;
        	            		    }
        	            		    else if ( (LA240_1 == LEFT_PAREN))
        	            		    {
        	            		        alt240=2;
        	            		    }
        	            		    else
        	            		    {
        	            		        if (this->get_backtracking()>0)
        	            		        {
        	            		            this->set_failedflag( true );
        	            		            return retval;
        	            		        }


        	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		        ex->set_decisionNum( 240 );
        	            		        ex->set_state( 1 );


        	            		        goto rulemodel_expression_elementEx;

        	            		    }
        	            		}
        	            	}
        	                break;
        	            case APPROXIMATE_NUM_LIT:
        	            case BINDVAR:
        	            case CHAR_STRING:
        	            case CHAR_STRING_PERL:
        	            case COLON:
        	            case DELIMITED_ID:
        	            case EXACT_NUM_LIT:
        	            case INTRODUCER:
        	            case LEFT_PAREN:
        	            case MINUS_SIGN:
        	            case NATIONAL_CHAR_STRING_LIT:
        	            case PLSQL_NON_RESERVED_CAST:
        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	            case PLUS_SIGN:
        	            case REGULAR_ID:
        	            case SQL92_RESERVED_ALL:
        	            case SQL92_RESERVED_CASE:
        	            case SQL92_RESERVED_CURSOR:
        	            case SQL92_RESERVED_DATE:
        	            case SQL92_RESERVED_DEFAULT:
        	            case SQL92_RESERVED_DISTINCT:
        	            case SQL92_RESERVED_EXISTS:
        	            case SQL92_RESERVED_FALSE:
        	            case SQL92_RESERVED_NOT:
        	            case SQL92_RESERVED_NULL:
        	            case SQL92_RESERVED_PRIOR:
        	            case SQL92_RESERVED_TRUE:
        	            case UNSIGNED_INTEGER:
        	            	{
        	            		alt240=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 240 );
        	                ex->set_state( 0 );


        	                goto rulemodel_expression_elementEx;

        	            }

        	            switch (alt240)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1014:11: ( any_key )=> any_key
        	        	    {
        	        	        this->followPush(FOLLOW_any_key_in_model_expression_element10338);
        	        	        any_key725=any_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, any_key725.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1014:31: condition_wrapper
        	        	    {
        	        	        this->followPush(FOLLOW_condition_wrapper_in_model_expression_element10340);
        	        	        condition_wrapper726=condition_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, condition_wrapper726.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1014:50: ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt242=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt242=1;
        	            	}
        	                break;

        	            }

        	            switch (alt242)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1014:51: COMMA ! ( ( any_key )=> any_key | condition_wrapper )
        	        	    {
        	        	        COMMA727 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_model_expression_element10344);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        // OracleDML.g:1014:58: ( ( any_key )=> any_key | condition_wrapper )
        	        	        {
        	        	            ANTLR_UINT32 alt241=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case SQL92_RESERVED_ANY:
        	        	            	{
        	        	            		{
        	        	            		    ANTLR_UINT32 LA241_1 = this->LA(2);
        	        	            		    if ( (LA241_1 == RIGHT_BRACKET) && (this->msynpred( antlr3::ClassForwarder<synpred32_OracleDML>() )))
        	        	            		    {
        	        	            		        alt241=1;
        	        	            		    }
        	        	            		    else if ( (LA241_1 == COMMA) && (this->msynpred( antlr3::ClassForwarder<synpred32_OracleDML>() )))
        	        	            		    {
        	        	            		        alt241=1;
        	        	            		    }
        	        	            		    else if ( (LA241_1 == LEFT_PAREN))
        	        	            		    {
        	        	            		        alt241=2;
        	        	            		    }
        	        	            		    else
        	        	            		    {
        	        	            		        if (this->get_backtracking()>0)
        	        	            		        {
        	        	            		            this->set_failedflag( true );
        	        	            		            return retval;
        	        	            		        }


        	        	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	            		        ex->set_decisionNum( 241 );
        	        	            		        ex->set_state( 1 );


        	        	            		        goto rulemodel_expression_elementEx;

        	        	            		    }
        	        	            		}
        	        	            	}
        	        	                break;
        	        	            case APPROXIMATE_NUM_LIT:
        	        	            case BINDVAR:
        	        	            case CHAR_STRING:
        	        	            case CHAR_STRING_PERL:
        	        	            case COLON:
        	        	            case DELIMITED_ID:
        	        	            case EXACT_NUM_LIT:
        	        	            case INTRODUCER:
        	        	            case LEFT_PAREN:
        	        	            case MINUS_SIGN:
        	        	            case NATIONAL_CHAR_STRING_LIT:
        	        	            case PLSQL_NON_RESERVED_CAST:
        	        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	        	            case PLUS_SIGN:
        	        	            case REGULAR_ID:
        	        	            case SQL92_RESERVED_ALL:
        	        	            case SQL92_RESERVED_CASE:
        	        	            case SQL92_RESERVED_CURSOR:
        	        	            case SQL92_RESERVED_DATE:
        	        	            case SQL92_RESERVED_DEFAULT:
        	        	            case SQL92_RESERVED_DISTINCT:
        	        	            case SQL92_RESERVED_EXISTS:
        	        	            case SQL92_RESERVED_FALSE:
        	        	            case SQL92_RESERVED_NOT:
        	        	            case SQL92_RESERVED_NULL:
        	        	            case SQL92_RESERVED_PRIOR:
        	        	            case SQL92_RESERVED_TRUE:
        	        	            case UNSIGNED_INTEGER:
        	        	            	{
        	        	            		alt241=2;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                if (this->get_backtracking()>0)
        	        	                {
        	        	                    this->set_failedflag( true );
        	        	                    return retval;
        	        	                }

        	        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                ex->set_decisionNum( 241 );
        	        	                ex->set_state( 0 );


        	        	                goto rulemodel_expression_elementEx;

        	        	            }

        	        	            switch (alt241)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1014:59: ( any_key )=> any_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_any_key_in_model_expression_element10353);
        	        	        	        any_key728=any_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulemodel_expression_elementEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, any_key728.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1014:79: condition_wrapper
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_condition_wrapper_in_model_expression_element10355);
        	        	        	        condition_wrapper729=condition_wrapper();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulemodel_expression_elementEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, condition_wrapper729.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop242;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop242: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1015:10: single_column_for_loop ( COMMA ! single_column_for_loop )*
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_single_column_for_loop_in_model_expression_element10369);
        	        single_column_for_loop730=single_column_for_loop();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemodel_expression_elementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, single_column_for_loop730.tree);


        	        // OracleDML.g:1015:33: ( COMMA ! single_column_for_loop )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt243=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt243=1;
        	            	}
        	                break;

        	            }

        	            switch (alt243)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1015:34: COMMA ! single_column_for_loop
        	        	    {
        	        	        COMMA731 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_model_expression_element10372);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_single_column_for_loop_in_model_expression_element10375);
        	        	        single_column_for_loop732=single_column_for_loop();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, single_column_for_loop732.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop243;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop243: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:1016:10: multi_column_for_loop
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_multi_column_for_loop_in_model_expression_element10388);
        	        multi_column_for_loop733=multi_column_for_loop();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemodel_expression_elementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multi_column_for_loop733.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_expression_elementEx; /* Prevent compiler warnings */
    rulemodel_expression_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_expression_element */

/**
 * $ANTLR start single_column_for_loop
 * OracleDML.g:1019:1: single_column_for_loop : for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression ) -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) ) -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? ) ;
 */
OracleDML::single_column_for_loop_return
OracleDML::single_column_for_loop()
{
    OracleDML::single_column_for_loop_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return ex1;
    ImplTraits::TreeTypePtr::pointer ex1_last = NULL;
    OracleDML::expression_return ex2;
    ImplTraits::TreeTypePtr::pointer ex2_last = NULL;
    OracleDML::expression_return ex3;
    ImplTraits::TreeTypePtr::pointer ex3_last = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key734;
    ImplTraits::TreeTypePtr::pointer for_key734_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name735;
    ImplTraits::TreeTypePtr::pointer column_name735_last = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key736;
    ImplTraits::TreeTypePtr::pointer in_key736_last = NULL;
    OracleDML::expression_list_return expression_list737;
    ImplTraits::TreeTypePtr::pointer expression_list737_last = NULL;
    OracleDML::for_like_part_return for_like_part738;
    ImplTraits::TreeTypePtr::pointer for_like_part738_last = NULL;
    OracleDML_OracleDMLKeys::from_key_return from_key739;
    ImplTraits::TreeTypePtr::pointer from_key739_last = NULL;
    OracleDML_OracleDMLKeys::to_key_return to_key740;
    ImplTraits::TreeTypePtr::pointer to_key740_last = NULL;
    OracleDML::for_increment_decrement_type_return for_increment_decrement_type741;
    ImplTraits::TreeTypePtr::pointer for_increment_decrement_type741_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_list(get_psrstate()->get_treeAdaptor(), "rule expression_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_like_part(get_psrstate()->get_treeAdaptor(), "rule for_like_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_to_key(get_psrstate()->get_treeAdaptor(), "rule to_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_increment_decrement_type(get_psrstate()->get_treeAdaptor(), "rule for_increment_decrement_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_from_key(get_psrstate()->get_treeAdaptor(), "rule from_key");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1021:5: ( for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression ) -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) ) -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? ) )
        // OracleDML.g:1021:10: for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression )
        {
            this->followPush(FOLLOW_for_key_in_single_column_for_loop10416);
            for_key734=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesingle_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key734_last = for_key734.tree.get();
                stream_for_key.add(for_key734.tree);
            }

            this->followPush(FOLLOW_column_name_in_single_column_for_loop10418);
            column_name735=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesingle_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                column_name735_last = column_name735.tree.get();
                stream_column_name.add(column_name735.tree);
            }

            // OracleDML.g:1022:5: ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression )
            {
                ANTLR_UINT32 alt246=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_IN:
                	{
                		alt246=1;
                	}
                    break;
                case SQL92_RESERVED_FROM:
                case SQL92_RESERVED_LIKE:
                	{
                		alt246=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 246 );
                    ex->set_state( 0 );


                    goto rulesingle_column_for_loopEx;

                }

                switch (alt246)
                {
            	case 1:
            	    // OracleDML.g:1022:10: in_key expression_list
            	    {
            	        this->followPush(FOLLOW_in_key_in_single_column_for_loop10430);
            	        in_key736=in_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            in_key736_last = in_key736.tree.get();
            	            stream_in_key.add(in_key736.tree);
            	        }

            	        this->followPush(FOLLOW_expression_list_in_single_column_for_loop10432);
            	        expression_list737=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_list737_last = expression_list737.tree.get();
            	            stream_expression_list.add(expression_list737.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1023:10: ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression
            	    {
            	        // OracleDML.g:1023:10: ( for_like_part )?
            	        {
            	            ANTLR_UINT32 alt245=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_LIKE:
            	                	{
            	                		alt245=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt245)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1023:10: for_like_part
            	        	    {
            	        	        this->followPush(FOLLOW_for_like_part_in_single_column_for_loop10445);
            	        	        for_like_part738=for_like_part();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesingle_column_for_loopEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            for_like_part738_last = for_like_part738.tree.get();
            	        	            stream_for_like_part.add(for_like_part738.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_from_key_in_single_column_for_loop10448);
            	        from_key739=from_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            from_key739_last = from_key739.tree.get();
            	            stream_from_key.add(from_key739.tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_single_column_for_loop10452);
            	        ex1=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            ex1_last = ex1.tree.get();
            	            stream_expression.add(ex1.tree);
            	        }

            	        this->followPush(FOLLOW_to_key_in_single_column_for_loop10466);
            	        to_key740=to_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            to_key740_last = to_key740.tree.get();
            	            stream_to_key.add(to_key740.tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_single_column_for_loop10470);
            	        ex2=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            ex2_last = ex2.tree.get();
            	            stream_expression.add(ex2.tree);
            	        }

            	        this->followPush(FOLLOW_for_increment_decrement_type_in_single_column_for_loop10472);
            	        for_increment_decrement_type741=for_increment_decrement_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_increment_decrement_type741_last = for_increment_decrement_type741.tree.get();
            	            stream_for_increment_decrement_type.add(for_increment_decrement_type741.tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_single_column_for_loop10476);
            	        ex3=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            ex3_last = ex3.tree.get();
            	            stream_expression.add(ex3.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_name, from_key, for_increment_decrement_type, ex3, expression_list, column_name, to_key, ex2, ex1, in_key, for_like_part
            // token labels: 
            // rule labels: retval, ex3, ex2, ex1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
            RewriteRuleSubtreeStream<ImplTraits> stream_ex3(get_psrstate()->get_treeAdaptor(), "rule ex3",ex3_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_ex2(get_psrstate()->get_treeAdaptor(), "rule ex2",ex2_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_ex1(get_psrstate()->get_treeAdaptor(), "rule ex1",ex1_last); // rewrite alias

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1026:9: -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) )
            if (mode == 1) {
            	// OracleDML.g:1026:24: ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(FOR_SINGLE_COLUMN, (for_key734.start)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	// OracleDML.g:1026:72: ^( in_key expression_list )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression_list.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1027:9: -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? )
            {
            	// OracleDML.g:1027:12: ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(FOR_SINGLE_COLUMN, (for_key734.start)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	// OracleDML.g:1027:60: ^( from_key ^( EXPR $ex1) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_from_key.nextNode(), root_2);
            	// OracleDML.g:1027:71: ^( EXPR $ex1)
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_ex1.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:1027:85: ^( to_key ^( EXPR $ex2) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_to_key.nextNode(), root_2);
            	// OracleDML.g:1027:94: ^( EXPR $ex2)
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_ex2.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:1027:108: ^( for_increment_decrement_type ^( EXPR $ex3) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_for_increment_decrement_type.nextNode(), root_2);
            	// OracleDML.g:1027:139: ^( EXPR $ex3)
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_ex3.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:1027:153: ( for_like_part )?
            	if ( stream_for_like_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_for_like_part.nextTree());
            	}
            	stream_for_like_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesingle_column_for_loopEx; /* Prevent compiler warnings */
    rulesingle_column_for_loopEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end single_column_for_loop */

/**
 * $ANTLR start for_like_part
 * OracleDML.g:1030:1: for_like_part : like_key expression -> ^( like_key ^( EXPR expression ) ) ;
 */
OracleDML::for_like_part_return
OracleDML::for_like_part()
{
    OracleDML::for_like_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::like_key_return like_key742;
    ImplTraits::TreeTypePtr::pointer like_key742_last = NULL;
    OracleDML::expression_return expression743;
    ImplTraits::TreeTypePtr::pointer expression743_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_like_key(get_psrstate()->get_treeAdaptor(), "rule like_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1031:5: ( like_key expression -> ^( like_key ^( EXPR expression ) ) )
        // OracleDML.g:1031:10: like_key expression
        {
            this->followPush(FOLLOW_like_key_in_for_like_part10585);
            like_key742=like_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_like_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                like_key742_last = like_key742.tree.get();
                stream_like_key.add(like_key742.tree);
            }

            this->followPush(FOLLOW_expression_in_for_like_part10587);
            expression743=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_like_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression743_last = expression743.tree.get();
                stream_expression.add(expression743.tree);
            }

            // AST REWRITE
            // elements: like_key, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1032:9: -> ^( like_key ^( EXPR expression ) )
            {
            	// OracleDML.g:1032:12: ^( like_key ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_like_key.nextNode(), root_1);
            	// OracleDML.g:1032:23: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_like_partEx; /* Prevent compiler warnings */
    rulefor_like_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_like_part */

/**
 * $ANTLR start for_increment_decrement_type
 * OracleDML.g:1035:1: for_increment_decrement_type : ( increment_key | decrement_key );
 */
OracleDML::for_increment_decrement_type_return
OracleDML::for_increment_decrement_type()
{
    OracleDML::for_increment_decrement_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::increment_key_return increment_key744;
    ImplTraits::TreeTypePtr::pointer increment_key744_last = NULL;
    OracleDML_OracleDMLKeys::decrement_key_return decrement_key745;
    ImplTraits::TreeTypePtr::pointer decrement_key745_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1036:5: ( increment_key | decrement_key )

            ANTLR_UINT32 alt247;

            alt247=2;

            {
                ANTLR_UINT32 LA247_0 = this->LA(1);
                if ( (LA247_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DECREMENT"))||((toUpper(LT(1)->getText()) == "INCREMENT")))))
                {
                    {
                        ANTLR_UINT32 LA247_1 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "INCREMENT")))
                        {
                            alt247=1;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "DECREMENT")))
                        {
                            alt247=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 247 );
                            ex->set_state( 1 );


                            goto rulefor_increment_decrement_typeEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 247 );
                    ex->set_state( 0 );


                    goto rulefor_increment_decrement_typeEx;

                }
            }
            switch (alt247)
            {
        	case 1:
        	    // OracleDML.g:1036:10: increment_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_increment_key_in_for_increment_decrement_type10627);
        	        increment_key744=increment_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_increment_decrement_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, increment_key744.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1037:10: decrement_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_decrement_key_in_for_increment_decrement_type10638);
        	        decrement_key745=decrement_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_increment_decrement_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, decrement_key745.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_increment_decrement_typeEx; /* Prevent compiler warnings */
    rulefor_increment_decrement_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_increment_decrement_type */

/**
 * $ANTLR start multi_column_for_loop
 * OracleDML.g:1040:1: multi_column_for_loop : for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) ) ;
 */
OracleDML::multi_column_for_loop_return
OracleDML::multi_column_for_loop()
{
    OracleDML::multi_column_for_loop_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN747 = NULL;
    ImplTraits::CommonTokenType const* COMMA749 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN751 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN753 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN755 = NULL;
    ImplTraits::CommonTokenType const* COMMA757 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN759 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN760 = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key746;
    ImplTraits::TreeTypePtr::pointer for_key746_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name748;
    ImplTraits::TreeTypePtr::pointer column_name748_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name750;
    ImplTraits::TreeTypePtr::pointer column_name750_last = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key752;
    ImplTraits::TreeTypePtr::pointer in_key752_last = NULL;
    OracleDML::subquery_return subquery754;
    ImplTraits::TreeTypePtr::pointer subquery754_last = NULL;
    OracleDML::expression_list_return expression_list756;
    ImplTraits::TreeTypePtr::pointer expression_list756_last = NULL;
    OracleDML::expression_list_return expression_list758;
    ImplTraits::TreeTypePtr::pointer expression_list758_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN747_tree;
    ImplTraits::TreeTypePtr COMMA749_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN751_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN753_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN755_tree;
    ImplTraits::TreeTypePtr COMMA757_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN759_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN760_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_list(get_psrstate()->get_treeAdaptor(), "rule expression_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1041:5: ( for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) ) )
        // OracleDML.g:1041:10: for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN
        {
            this->followPush(FOLLOW_for_key_in_multi_column_for_loop10658);
            for_key746=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key746_last = for_key746.tree.get();
                stream_for_key.add(for_key746.tree);
            }

            LEFT_PAREN747 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_multi_column_for_loop10660);
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN747);


            this->followPush(FOLLOW_column_name_in_multi_column_for_loop10662);
            column_name748=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                column_name748_last = column_name748.tree.get();
                stream_column_name.add(column_name748.tree);
            }

            // OracleDML.g:1041:41: ( COMMA column_name )*

            for (;;)
            {
                ANTLR_UINT32 alt248=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt248=1;
                	}
                    break;

                }

                switch (alt248)
                {
            	case 1:
            	    // OracleDML.g:1041:42: COMMA column_name
            	    {
            	        COMMA749 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_multi_column_for_loop10665);
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA749);


            	        this->followPush(FOLLOW_column_name_in_multi_column_for_loop10667);
            	        column_name750=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name750_last = column_name750.tree.get();
            	            stream_column_name.add(column_name750.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop248;	/* break out of the loop */
            	    break;
                }
            }
            loop248: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN751 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10671);
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN751);


            this->followPush(FOLLOW_in_key_in_multi_column_for_loop10673);
            in_key752=in_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                in_key752_last = in_key752.tree.get();
                stream_in_key.add(in_key752.tree);
            }

            LEFT_PAREN753 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_multi_column_for_loop10683);
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN753);


            // OracleDML.g:1043:13: ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN )
            {
                ANTLR_UINT32 alt250=2;
                {
                    ANTLR_UINT32 LA250_0 = this->LA(1);
                    if ( (LA250_0 == SQL92_RESERVED_SELECT) && (this->msynpred( antlr3::ClassForwarder<synpred33_OracleDML>() )))
                    {
                        alt250=1;
                    }
                    else if ( (LA250_0 == LEFT_PAREN))
                    {
                        {
                            ANTLR_UINT32 LA250_2 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred33_OracleDML>() )))
                            {
                                alt250=1;
                            }
                            else if ( (this->msynpred( antlr3::ClassForwarder<synpred34_OracleDML>() )))
                            {
                                alt250=2;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 250 );
                                ex->set_state( 2 );


                                goto rulemulti_column_for_loopEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 250 );
                        ex->set_state( 0 );


                        goto rulemulti_column_for_loopEx;

                    }
                }
                switch (alt250)
                {
            	case 1:
            	    // OracleDML.g:1043:18: ( select_key )=> subquery
            	    {
            	        this->followPush(FOLLOW_subquery_in_multi_column_for_loop10707);
            	        subquery754=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery754_last = subquery754.tree.get();
            	            stream_subquery.add(subquery754.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1044:18: ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN755 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_multi_column_for_loop10731);
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN755);


            	        this->followPush(FOLLOW_expression_list_in_multi_column_for_loop10733);
            	        expression_list756=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_list756_last = expression_list756.tree.get();
            	            stream_expression_list.add(expression_list756.tree);
            	        }

            	        // OracleDML.g:1044:60: ( COMMA expression_list )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt249=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt249=1;
            	            	}
            	                break;

            	            }

            	            switch (alt249)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1044:61: COMMA expression_list
            	        	    {
            	        	        COMMA757 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_multi_column_for_loop10736);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemulti_column_for_loopEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA757);


            	        	        this->followPush(FOLLOW_expression_list_in_multi_column_for_loop10738);
            	        	        expression_list758=expression_list();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemulti_column_for_loopEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            expression_list758_last = expression_list758.tree.get();
            	        	            stream_expression_list.add(expression_list758.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop249;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop249: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN759 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10742);
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN759);


            	    }
            	    break;

                }
            }

            RIGHT_PAREN760 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10766);
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN760);


            // AST REWRITE
            // elements: in_key, subquery, expression_list, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1047:9: -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) )
            {
            	// OracleDML.g:1047:12: ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(FOR_MULTI_COLUMN, (for_key746.start)), root_1);
            	if ( !(stream_column_name.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
            		goto rulemulti_column_for_loopEx;
            	}
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	// OracleDML.g:1047:60: ^( in_key ( subquery )? ( expression_list )* )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_2);
            	// OracleDML.g:1047:69: ( subquery )?
            	if ( stream_subquery.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_subquery.nextTree());
            	}
            	stream_subquery.reset();

            	// OracleDML.g:1047:79: ( expression_list )*
            	while ( stream_expression_list.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression_list.nextTree());
            	}
            	stream_expression_list.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemulti_column_for_loopEx; /* Prevent compiler warnings */
    rulemulti_column_for_loopEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multi_column_for_loop */

/**
 * $ANTLR start multiset_expression
 * OracleDML.g:1050:1: multiset_expression : unary_expression ( multiset_op ^ unary_expression )* ;
 */
OracleDML::multiset_expression_return
OracleDML::multiset_expression()
{
    OracleDML::multiset_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::unary_expression_return unary_expression761;
    ImplTraits::TreeTypePtr::pointer unary_expression761_last = NULL;
    OracleDML_OracleDMLCommons::multiset_op_return multiset_op762;
    ImplTraits::TreeTypePtr::pointer multiset_op762_last = NULL;
    OracleDML::unary_expression_return unary_expression763;
    ImplTraits::TreeTypePtr::pointer unary_expression763_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1051:5: ( unary_expression ( multiset_op ^ unary_expression )* )
        // OracleDML.g:1051:10: unary_expression ( multiset_op ^ unary_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_unary_expression_in_multiset_expression10814);
            unary_expression761=unary_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultiset_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression761.tree);


            // OracleDML.g:1052:10: ( multiset_op ^ unary_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt251=2;
                switch ( this->LA(1) )
                {
                case PLSQL_NON_RESERVED_MULTISET:
                	{
                		alt251=1;
                	}
                    break;

                }

                switch (alt251)
                {
            	case 1:
            	    // OracleDML.g:1052:12: multiset_op ^ unary_expression
            	    {
            	        this->followPush(FOLLOW_multiset_op_in_multiset_expression10827);
            	        multiset_op762=multiset_op();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiset_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(multiset_op762.tree, root_0);

            	        this->followPush(FOLLOW_unary_expression_in_multiset_expression10830);
            	        unary_expression763=unary_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiset_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression763.tree);


            	    }
            	    break;

            	default:
            	    goto loop251;	/* break out of the loop */
            	    break;
                }
            }
            loop251: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemultiset_expressionEx; /* Prevent compiler warnings */
    rulemultiset_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multiset_expression */

/**
 * $ANTLR start unary_expression
 * OracleDML.g:1055:1: unary_expression options {backtrack=true; } : ( MINUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression ) | PLUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression ) | prior_key ^ unary_expression | connect_by_root_key ^ unary_expression |{...}? => new_key ^ unary_expression | distinct_key ^ unary_expression | all_key ^ unary_expression |{...}? case_statement[false] | quantified_expression | standard_function -> ^( STANDARD_FUNCTION standard_function ) | atom );
 */
OracleDML::unary_expression_return
OracleDML::unary_expression()
{
    OracleDML::unary_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* MINUS_SIGN764 = NULL;
    ImplTraits::CommonTokenType const* PLUS_SIGN766 = NULL;
    OracleDML::unary_expression_return unary_expression765;
    ImplTraits::TreeTypePtr::pointer unary_expression765_last = NULL;
    OracleDML::unary_expression_return unary_expression767;
    ImplTraits::TreeTypePtr::pointer unary_expression767_last = NULL;
    OracleDML_OracleDMLKeys::prior_key_return prior_key768;
    ImplTraits::TreeTypePtr::pointer prior_key768_last = NULL;
    OracleDML::unary_expression_return unary_expression769;
    ImplTraits::TreeTypePtr::pointer unary_expression769_last = NULL;
    OracleDML_OracleDMLKeys::connect_by_root_key_return connect_by_root_key770;
    ImplTraits::TreeTypePtr::pointer connect_by_root_key770_last = NULL;
    OracleDML::unary_expression_return unary_expression771;
    ImplTraits::TreeTypePtr::pointer unary_expression771_last = NULL;
    OracleDML_OracleDMLKeys::new_key_return new_key772;
    ImplTraits::TreeTypePtr::pointer new_key772_last = NULL;
    OracleDML::unary_expression_return unary_expression773;
    ImplTraits::TreeTypePtr::pointer unary_expression773_last = NULL;
    OracleDML_OracleDMLKeys::distinct_key_return distinct_key774;
    ImplTraits::TreeTypePtr::pointer distinct_key774_last = NULL;
    OracleDML::unary_expression_return unary_expression775;
    ImplTraits::TreeTypePtr::pointer unary_expression775_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key776;
    ImplTraits::TreeTypePtr::pointer all_key776_last = NULL;
    OracleDML::unary_expression_return unary_expression777;
    ImplTraits::TreeTypePtr::pointer unary_expression777_last = NULL;
    OracleDML::case_statement_return case_statement778;
    ImplTraits::TreeTypePtr::pointer case_statement778_last = NULL;
    OracleDML::quantified_expression_return quantified_expression779;
    ImplTraits::TreeTypePtr::pointer quantified_expression779_last = NULL;
    OracleDML::standard_function_return standard_function780;
    ImplTraits::TreeTypePtr::pointer standard_function780_last = NULL;
    OracleDML::atom_return atom781;
    ImplTraits::TreeTypePtr::pointer atom781_last = NULL;
    ImplTraits::TreeTypePtr MINUS_SIGN764_tree;
    ImplTraits::TreeTypePtr PLUS_SIGN766_tree;
    RewriteRuleTokenStream<ImplTraits> stream_PLUS_SIGN(get_psrstate()->get_treeAdaptor(), "token PLUS_SIGN");
    RewriteRuleTokenStream<ImplTraits> stream_MINUS_SIGN(get_psrstate()->get_treeAdaptor(), "token MINUS_SIGN");
    RewriteRuleSubtreeStream<ImplTraits> stream_unary_expression(get_psrstate()->get_treeAdaptor(), "rule unary_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_standard_function(get_psrstate()->get_treeAdaptor(), "rule standard_function");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1060:5: ( MINUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression ) | PLUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression ) | prior_key ^ unary_expression | connect_by_root_key ^ unary_expression |{...}? => new_key ^ unary_expression | distinct_key ^ unary_expression | all_key ^ unary_expression |{...}? case_statement[false] | quantified_expression | standard_function -> ^( STANDARD_FUNCTION standard_function ) | atom )

            ANTLR_UINT32 alt252;

            alt252=11;

            switch ( this->LA(1) )
            {
            case MINUS_SIGN:
            	{
            		alt252=1;
            	}
                break;
            case PLUS_SIGN:
            	{
            		alt252=2;
            	}
                break;
            case SQL92_RESERVED_PRIOR:
            	{
            		alt252=3;
            	}
                break;
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            	{
            		alt252=4;
            	}
                break;
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA252_5 = this->LA(2);
            		    if ( (( (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && (this->msynpred( antlr3::ClassForwarder<synpred39_OracleDML>() )) )) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt252=5;
            		    }
            		    else if ( (( (( (((LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE))) && ((!m_case_statement_stack.peek().isStatement)) )) && (this->msynpred( antlr3::ClassForwarder<synpred42_OracleDML>() )) )))
            		    {
            		        alt252=8;
            		    }
            		    else if ( (( (this->msynpred( antlr3::ClassForwarder<synpred43_OracleDML>() )) && ((toUpper(LT(1)->getText()) == "SOME")) )))
            		    {
            		        alt252=9;
            		    }
            		    else if ( (( ((((toUpper(LT(1)->getText()) == "XMLCAST"))||((toUpper(LT(1)->getText()) == "XMLEXISTS"))||((toUpper(LT(1)->getText()) == "XMLCOLATTVAL"))||((toUpper(LT(1)->getText()) == "DECOMPOSE"))||((enablesWithinOrOverClause(LT(1)->getText())))||((isStandardPredictionFunction(LT(1)->getText())))||((toUpper(LT(1)->getText()) == "TRANSLATE"))||((toUpper(LT(1)->getText()) == "TREAT"))||((toUpper(LT(1)->getText()) == "XMLAGG"))||((toUpper(LT(1)->getText()) == "COLLECT"))||((toUpper(LT(1)->getText()) == "XMLELEMENT"))||((toUpper(LT(1)->getText()) == "LAST_VALUE"))||((enablesOverClause(LT(1)->getText())))||((enablesUsingClause(LT(1)->getText())))||((toUpper(LT(1)->getText()) == "EXTRACT"))||((toUpper(LT(1)->getText()) == "XMLQUERY"))||((toUpper(LT(1)->getText()) == "TRIM"))||((toUpper(LT(1)->getText()) == "XMLPI"))||((toUpper(LT(1)->getText()) == "FIRST_VALUE"))||((toUpper(LT(1)->getText()) == "COUNT" ))||((toUpper(LT(1)->getText()) == "XMLTABLE"))||((toUpper(LT(1)->getText()) == "XMLPARSE"))||((toUpper(LT(1)->getText()) == "CHR"))||((toUpper(LT(1)->getText()) == "XMLSERIALIZE"))||((toUpper(LT(1)->getText()) == "XMLROOT"))||((toUpper(LT(1)->getText()) == "XMLFOREST")))) && (this->msynpred( antlr3::ClassForwarder<synpred44_OracleDML>() )) )))
            		    {
            		        alt252=10;
            		    }
            		    else if ( (true))
            		    {
            		        alt252=11;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 252 );
            		        ex->set_state( 5 );


            		        goto ruleunary_expressionEx;

            		    }
            		}
            	}
                break;
            case SQL92_RESERVED_DISTINCT:
            	{
            		alt252=6;
            	}
                break;
            case SQL92_RESERVED_ALL:
            	{
            		{
            		    ANTLR_UINT32 LA252_7 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred41_OracleDML>() )))
            		    {
            		        alt252=7;
            		    }
            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred43_OracleDML>() )))
            		    {
            		        alt252=9;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 252 );
            		        ex->set_state( 7 );


            		        goto ruleunary_expressionEx;

            		    }
            		}
            	}
                break;
            case DELIMITED_ID:
            	{
            		{
            		    ANTLR_UINT32 LA252_8 = this->LA(2);
            		    if ( (( (( (((LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE))) && ((!m_case_statement_stack.peek().isStatement)) )) && (this->msynpred( antlr3::ClassForwarder<synpred42_OracleDML>() )) )))
            		    {
            		        alt252=8;
            		    }
            		    else if ( (true))
            		    {
            		        alt252=11;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 252 );
            		        ex->set_state( 8 );


            		        goto ruleunary_expressionEx;

            		    }
            		}
            	}
                break;
            case SQL92_RESERVED_CASE:
            	{
            		alt252=8;
            	}
                break;
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_EXISTS:
            	{
            		alt252=9;
            	}
                break;
            case PLSQL_NON_RESERVED_CAST:
            	{
            		alt252=10;
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case NATIONAL_CHAR_STRING_LIT:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt252=11;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 252 );
                ex->set_state( 0 );


                goto ruleunary_expressionEx;

            }

            switch (alt252)
            {
        	case 1:
        	    // OracleDML.g:1060:10: MINUS_SIGN unary_expression
        	    {
        	        MINUS_SIGN764 =  this->matchToken(MINUS_SIGN, &FOLLOW_MINUS_SIGN_in_unary_expression10862);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_MINUS_SIGN.add(MINUS_SIGN764);


        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10864);
        	        unary_expression765=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            unary_expression765_last = unary_expression765.tree.get();
        	            stream_unary_expression.add(unary_expression765.tree);
        	        }

        	        // AST REWRITE
        	        // elements: unary_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 1060:38: -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression )
        	        {
        	        	// OracleDML.g:1060:41: ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(UNARY_OPERATOR, MINUS_SIGN764), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unary_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1061:10: PLUS_SIGN unary_expression
        	    {
        	        PLUS_SIGN766 =  this->matchToken(PLUS_SIGN, &FOLLOW_PLUS_SIGN_in_unary_expression10884);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_PLUS_SIGN.add(PLUS_SIGN766);


        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10886);
        	        unary_expression767=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            unary_expression767_last = unary_expression767.tree.get();
        	            stream_unary_expression.add(unary_expression767.tree);
        	        }

        	        // AST REWRITE
        	        // elements: unary_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 1061:37: -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression )
        	        {
        	        	// OracleDML.g:1061:40: ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(UNARY_OPERATOR, PLUS_SIGN766), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unary_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:1062:10: prior_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_prior_key_in_unary_expression10906);
        	        prior_key768=prior_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(prior_key768.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10909);
        	        unary_expression769=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression769.tree);


        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:1063:10: connect_by_root_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_connect_by_root_key_in_unary_expression10920);
        	        connect_by_root_key770=connect_by_root_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(connect_by_root_key770.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10923);
        	        unary_expression771=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression771.tree);


        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:1064:10: {...}? => new_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        if ( !((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) )
        	        {
        	            if (this->get_backtracking()>0)
        	            {
        	                this->set_failedflag( true );
        	                return retval;
        	            }

        	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "LT(1)->getText() == \"NEW\" && LT(2)->getText() != \".\"" );
        	                ex->set_ruleName( "unary_expression" );


        	        }

        	        this->followPush(FOLLOW_new_key_in_unary_expression10937);
        	        new_key772=new_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(new_key772.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10940);
        	        unary_expression773=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression773.tree);


        	    }
        	    break;
        	case 6:
        	    // OracleDML.g:1065:10: distinct_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_distinct_key_in_unary_expression10951);
        	        distinct_key774=distinct_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(distinct_key774.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10954);
        	        unary_expression775=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression775.tree);


        	    }
        	    break;
        	case 7:
        	    // OracleDML.g:1066:10: all_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_all_key_in_unary_expression10965);
        	        all_key776=all_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(all_key776.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10968);
        	        unary_expression777=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression777.tree);


        	    }
        	    break;
        	case 8:
        	    // OracleDML.g:1067:10: {...}? case_statement[false]
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        if ( !(((LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE))) )
        	        {
        	            if (this->get_backtracking()>0)
        	            {
        	                this->set_failedflag( true );
        	                return retval;
        	            }

        	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "(LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE)" );
        	                ex->set_ruleName( "unary_expression" );


        	        }

        	        this->followPush(FOLLOW_case_statement_in_unary_expression10981);
        	        case_statement778=case_statement(false);

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, case_statement778.tree);


        	    }
        	    break;
        	case 9:
        	    // OracleDML.g:1068:10: quantified_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_quantified_expression_in_unary_expression10993);
        	        quantified_expression779=quantified_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, quantified_expression779.tree);


        	    }
        	    break;
        	case 10:
        	    // OracleDML.g:1069:10: standard_function
        	    {
        	        this->followPush(FOLLOW_standard_function_in_unary_expression11004);
        	        standard_function780=standard_function();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            standard_function780_last = standard_function780.tree.get();
        	            stream_standard_function.add(standard_function780.tree);
        	        }

        	        // AST REWRITE
        	        // elements: standard_function
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 1069:28: -> ^( STANDARD_FUNCTION standard_function )
        	        {
        	        	// OracleDML.g:1069:31: ^( STANDARD_FUNCTION standard_function )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(STANDARD_FUNCTION, "STANDARD_FUNCTION"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_standard_function.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 11:
        	    // OracleDML.g:1070:10: atom
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_atom_in_unary_expression11023);
        	        atom781=atom();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, atom781.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleunary_expressionEx; /* Prevent compiler warnings */
    ruleunary_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end unary_expression */

/**
 * $ANTLR start case_statement
 * OracleDML.g:1073:1: case_statement[int isStatementParameter] : ( ( ( label_name )? case_key when_key )=> searched_case_statement | simple_case_statement );
 */
OracleDML::case_statement_return
OracleDML::case_statement(int isStatementParameter)
{
    OracleDML::case_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::searched_case_statement_return searched_case_statement782;
    ImplTraits::TreeTypePtr::pointer searched_case_statement782_last = NULL;
    OracleDML::simple_case_statement_return simple_case_statement783;
    ImplTraits::TreeTypePtr::pointer simple_case_statement783_last = NULL;

    /* Initialize rule variables
     */
    m_case_statement_stack.push(case_statementScope()); 
    m_case_statement_stack.peek().isStatement = isStatementParameter;
    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1078:5: ( ( ( label_name )? case_key when_key )=> searched_case_statement | simple_case_statement )

            ANTLR_UINT32 alt253;

            alt253=2;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case SQL92_RESERVED_CASE:
            			{
            				{
            				    ANTLR_UINT32 LA253_3 = this->LA(3);
            				    if ( (LA253_3 == SQL92_RESERVED_WHEN) && (this->msynpred( antlr3::ClassForwarder<synpred45_OracleDML>() )))
            				    {
            				        alt253=1;
            				    }
            				    else if ( (LA253_3 == APPROXIMATE_NUM_LIT || LA253_3 == BINDVAR || ((LA253_3 >= CHAR_STRING) && (LA253_3 <= CHAR_STRING_PERL)) || LA253_3 == COLON || LA253_3 == DELIMITED_ID || LA253_3 == EXACT_NUM_LIT || LA253_3 == INTRODUCER || LA253_3 == LEFT_PAREN || LA253_3 == NATIONAL_CHAR_STRING_LIT || LA253_3 == REGULAR_ID || LA253_3 == SQL92_RESERVED_DATE || LA253_3 == SQL92_RESERVED_DEFAULT || LA253_3 == SQL92_RESERVED_FALSE || LA253_3 == SQL92_RESERVED_NULL || LA253_3 == SQL92_RESERVED_TRUE || LA253_3 == UNSIGNED_INTEGER))
            				    {
            				        alt253=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            m_case_statement_stack.pop(); 

            				            return retval;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 253 );
            				        ex->set_state( 3 );


            				        goto rulecase_statementEx;

            				    }
            				}
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        m_case_statement_stack.pop(); 

            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 253 );
            		    ex->set_state( 1 );


            		    goto rulecase_statementEx;

            		}

            	}
                break;
            case DELIMITED_ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case SQL92_RESERVED_CASE:
            			{
            				{
            				    ANTLR_UINT32 LA253_3 = this->LA(3);
            				    if ( (LA253_3 == SQL92_RESERVED_WHEN) && (this->msynpred( antlr3::ClassForwarder<synpred45_OracleDML>() )))
            				    {
            				        alt253=1;
            				    }
            				    else if ( (LA253_3 == APPROXIMATE_NUM_LIT || LA253_3 == BINDVAR || ((LA253_3 >= CHAR_STRING) && (LA253_3 <= CHAR_STRING_PERL)) || LA253_3 == COLON || LA253_3 == DELIMITED_ID || LA253_3 == EXACT_NUM_LIT || LA253_3 == INTRODUCER || LA253_3 == LEFT_PAREN || LA253_3 == NATIONAL_CHAR_STRING_LIT || LA253_3 == REGULAR_ID || LA253_3 == SQL92_RESERVED_DATE || LA253_3 == SQL92_RESERVED_DEFAULT || LA253_3 == SQL92_RESERVED_FALSE || LA253_3 == SQL92_RESERVED_NULL || LA253_3 == SQL92_RESERVED_TRUE || LA253_3 == UNSIGNED_INTEGER))
            				    {
            				        alt253=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            m_case_statement_stack.pop(); 

            				            return retval;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 253 );
            				        ex->set_state( 3 );


            				        goto rulecase_statementEx;

            				    }
            				}
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        m_case_statement_stack.pop(); 

            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 253 );
            		    ex->set_state( 2 );


            		    goto rulecase_statementEx;

            		}

            	}
                break;
            case SQL92_RESERVED_CASE:
            	{
            		{
            		    ANTLR_UINT32 LA253_3 = this->LA(2);
            		    if ( (LA253_3 == SQL92_RESERVED_WHEN) && (this->msynpred( antlr3::ClassForwarder<synpred45_OracleDML>() )))
            		    {
            		        alt253=1;
            		    }
            		    else if ( (LA253_3 == APPROXIMATE_NUM_LIT || LA253_3 == BINDVAR || ((LA253_3 >= CHAR_STRING) && (LA253_3 <= CHAR_STRING_PERL)) || LA253_3 == COLON || LA253_3 == DELIMITED_ID || LA253_3 == EXACT_NUM_LIT || LA253_3 == INTRODUCER || LA253_3 == LEFT_PAREN || LA253_3 == NATIONAL_CHAR_STRING_LIT || LA253_3 == REGULAR_ID || LA253_3 == SQL92_RESERVED_DATE || LA253_3 == SQL92_RESERVED_DEFAULT || LA253_3 == SQL92_RESERVED_FALSE || LA253_3 == SQL92_RESERVED_NULL || LA253_3 == SQL92_RESERVED_TRUE || LA253_3 == UNSIGNED_INTEGER))
            		    {
            		        alt253=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            m_case_statement_stack.pop(); 

            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 253 );
            		        ex->set_state( 3 );


            		        goto rulecase_statementEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    m_case_statement_stack.pop(); 

                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 253 );
                ex->set_state( 0 );


                goto rulecase_statementEx;

            }

            switch (alt253)
            {
        	case 1:
        	    // OracleDML.g:1078:10: ( ( label_name )? case_key when_key )=> searched_case_statement
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_searched_case_statement_in_case_statement11070);
        	        searched_case_statement782=searched_case_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecase_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            m_case_statement_stack.pop(); 

        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, searched_case_statement782.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1079:10: simple_case_statement
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_simple_case_statement_in_case_statement11081);
        	        simple_case_statement783=simple_case_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecase_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            m_case_statement_stack.pop(); 

        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, simple_case_statement783.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulecase_statementEx; /* Prevent compiler warnings */
    rulecase_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    m_case_statement_stack.pop(); 

    return retval;
}
/* $ANTLR end case_statement */

/**
 * $ANTLR start simple_case_statement
 * OracleDML.g:1084:1: simple_case_statement : ({...}? ( label_name )? ) ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |) -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? end_key ) ;
 */
OracleDML::simple_case_statement_return
OracleDML::simple_case_statement()
{
    OracleDML::simple_case_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::case_key_return ck1;
    ImplTraits::TreeTypePtr::pointer ck1_last = NULL;
    OracleDML_OracleDMLCommons::label_name_return label_name784;
    ImplTraits::TreeTypePtr::pointer label_name784_last = NULL;
    OracleDML::atom_return atom785;
    ImplTraits::TreeTypePtr::pointer atom785_last = NULL;
    OracleDML::simple_case_when_part_return simple_case_when_part786;
    ImplTraits::TreeTypePtr::pointer simple_case_when_part786_last = NULL;
    OracleDML::case_else_part_return case_else_part787;
    ImplTraits::TreeTypePtr::pointer case_else_part787_last = NULL;
    OracleDML_OracleDMLKeys::end_key_return end_key788;
    ImplTraits::TreeTypePtr::pointer end_key788_last = NULL;
    OracleDML_OracleDMLKeys::case_key_return case_key789;
    ImplTraits::TreeTypePtr::pointer case_key789_last = NULL;
    OracleDML_OracleDMLCommons::label_name_return label_name790;
    ImplTraits::TreeTypePtr::pointer label_name790_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_atom(get_psrstate()->get_treeAdaptor(), "rule atom");
    RewriteRuleSubtreeStream<ImplTraits> stream_simple_case_when_part(get_psrstate()->get_treeAdaptor(), "rule simple_case_when_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_label_name(get_psrstate()->get_treeAdaptor(), "rule label_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_case_else_part(get_psrstate()->get_treeAdaptor(), "rule case_else_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_case_key(get_psrstate()->get_treeAdaptor(), "rule case_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_end_key(get_psrstate()->get_treeAdaptor(), "rule end_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1085:5: ( ({...}? ( label_name )? ) ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |) -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? end_key ) )
        // OracleDML.g:1085:9: ({...}? ( label_name )? ) ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |)
        {
            // OracleDML.g:1085:9: ({...}? ( label_name )? )
            // OracleDML.g:1085:10: {...}? ( label_name )?
            {
                if ( !((!m_case_statement_stack.peek().isStatement)) )
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!$case_statement::isStatement" );
                        ex->set_ruleName( "simple_case_statement" );


                }

                // OracleDML.g:1085:43: ( label_name )?
                {
                    ANTLR_UINT32 alt254=2;
                    switch ( this->LA(1) )
                    {
                        case DELIMITED_ID:
                        case REGULAR_ID:
                        	{
                        		alt254=1;
                        	}
                            break;
                    }

                    switch (alt254)
                    {
                	case 1:
                	    // OracleDML.g:1085:43: label_name
                	    {
                	        this->followPush(FOLLOW_label_name_in_simple_case_statement11105);
                	        label_name784=label_name();

                	        this->followPop();
                	        if  (this->hasException())
                	        {
                	            goto rulesimple_case_statementEx;
                	        }
                	        if (this->hasFailed())
                	        {
                	            return retval;
                	        }

                	        if ( this->get_backtracking()==0 ) 
                	        {
                	            label_name784_last = label_name784.tree.get();
                	            stream_label_name.add(label_name784.tree);
                	        }

                	    }
                	    break;

                    }
                }

            }


            this->followPush(FOLLOW_case_key_in_simple_case_statement11111);
            ck1=case_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                ck1_last = ck1.tree.get();
                stream_case_key.add(ck1.tree);
            }

            this->followPush(FOLLOW_atom_in_simple_case_statement11113);
            atom785=atom();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                atom785_last = atom785.tree.get();
                stream_atom.add(atom785.tree);
            }

            // OracleDML.g:1086:9: ( simple_case_when_part )+
            {
                int cnt255=0;

                for (;;)
                {
                    ANTLR_UINT32 alt255=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_WHEN:
            		{
            			alt255=1;
            		}
            	    break;

            	}

            	switch (alt255)
            	{
            	    case 1:
            	        // OracleDML.g:1086:9: simple_case_when_part
            	        {
            	            this->followPush(FOLLOW_simple_case_when_part_in_simple_case_statement11123);
            	            simple_case_when_part786=simple_case_when_part();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesimple_case_statementEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) 
            	            {
            	                simple_case_when_part786_last = simple_case_when_part786.tree.get();
            	                stream_simple_case_when_part.add(simple_case_when_part786.tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt255 >= 1 )
            		{
            		    goto loop255;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulesimple_case_statementEx;
            	}
            	cnt255++;
                }
                loop255: ;	/* Jump to here if this rule does not match */
            }

            // OracleDML.g:1087:9: ( case_else_part )?
            {
                ANTLR_UINT32 alt256=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ELSE:
                    	{
                    		alt256=1;
                    	}
                        break;
                }

                switch (alt256)
                {
            	case 1:
            	    // OracleDML.g:1087:9: case_else_part
            	    {
            	        this->followPush(FOLLOW_case_else_part_in_simple_case_statement11135);
            	        case_else_part787=case_else_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesimple_case_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            case_else_part787_last = case_else_part787.tree.get();
            	            stream_case_else_part.add(case_else_part787.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_end_key_in_simple_case_statement11146);
            end_key788=end_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                end_key788_last = end_key788.tree.get();
                stream_end_key.add(end_key788.tree);
            }

            // OracleDML.g:1088:17: ({...}? case_key ( label_name )? |)
            {
                ANTLR_UINT32 alt258=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_CASE:
                	{
                		alt258=1;
                	}
                    break;
                case EOF_TOKEN:
                case ASTERISK:
                case CARRET_OPERATOR_PART:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COMMA:
                case CONCATENATION_OP:
                case DELIMITED_ID:
                case EQUALS_OP:
                case EXCLAMATION_OPERATOR_PART:
                case GREATER_THAN_OP:
                case GREATER_THAN_OR_EQUALS_OP:
                case INTRODUCER:
                case LEFT_BRACKET:
                case LEFT_PAREN:
                case LESS_THAN_OP:
                case LESS_THAN_OR_EQUALS_OP:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case NOT_EQUAL_OP:
                case PLSQL_NON_RESERVED_MODEL:
                case PLSQL_NON_RESERVED_MULTISET:
                case PLSQL_NON_RESERVED_PIVOT:
                case PLSQL_NON_RESERVED_UNPIVOT:
                case PLSQL_NON_RESERVED_USING:
                case PLSQL_RESERVED_MINUS:
                case PLSQL_RESERVED_START:
                case PLUS_SIGN:
                case REGULAR_ID:
                case RIGHT_BRACKET:
                case RIGHT_PAREN:
                case SEMICOLON:
                case SOLIDUS:
                case SQL92_RESERVED_AND:
                case SQL92_RESERVED_AS:
                case SQL92_RESERVED_ASC:
                case SQL92_RESERVED_BETWEEN:
                case SQL92_RESERVED_CONNECT:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_DESC:
                case SQL92_RESERVED_ELSE:
                case SQL92_RESERVED_END:
                case SQL92_RESERVED_FOR:
                case SQL92_RESERVED_FROM:
                case SQL92_RESERVED_GROUP:
                case SQL92_RESERVED_HAVING:
                case SQL92_RESERVED_IN:
                case SQL92_RESERVED_INTERSECT:
                case SQL92_RESERVED_INTO:
                case SQL92_RESERVED_IS:
                case SQL92_RESERVED_LIKE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_ON:
                case SQL92_RESERVED_OR:
                case SQL92_RESERVED_ORDER:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_THEN:
                case SQL92_RESERVED_TO:
                case SQL92_RESERVED_UNION:
                case SQL92_RESERVED_WHEN:
                case SQL92_RESERVED_WHERE:
                case SQL92_RESERVED_WITH:
                case VERTICAL_BAR:
                	{
                		alt258=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 258 );
                    ex->set_state( 0 );


                    goto rulesimple_case_statementEx;

                }

                switch (alt258)
                {
            	case 1:
            	    // OracleDML.g:1088:18: {...}? case_key ( label_name )?
            	    {
            	        if ( !((!m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!$case_statement::isStatement" );
            	                ex->set_ruleName( "simple_case_statement" );


            	        }

            	        this->followPush(FOLLOW_case_key_in_simple_case_statement11151);
            	        case_key789=case_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesimple_case_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            case_key789_last = case_key789.tree.get();
            	            stream_case_key.add(case_key789.tree);
            	        }

            	        // OracleDML.g:1088:60: ( label_name )?
            	        {
            	            ANTLR_UINT32 alt257=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		alt257=1;
            	                	}
            	                    break;
            	                case DELIMITED_ID:
            	                	{
            	                		alt257=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt257)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1088:60: label_name
            	        	    {
            	        	        this->followPush(FOLLOW_label_name_in_simple_case_statement11153);
            	        	        label_name790=label_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesimple_case_statementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            label_name790_last = label_name790.tree.get();
            	        	            stream_label_name.add(label_name790.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1088:74: 
            	    {
            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: label_name, simple_case_when_part, atom, case_else_part, end_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1089:9: -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? end_key )
            {
            	// OracleDML.g:1089:12: ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? end_key )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SIMPLE_CASE, (ck1.start)), root_1);
            	// OracleDML.g:1089:38: ( label_name )*
            	while ( stream_label_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_label_name.nextTree());
            	}
            	stream_label_name.reset();

            	// OracleDML.g:1089:50: ^( EXPR atom )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_atom.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	if ( !(stream_simple_case_when_part.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "simple_case_when_part empty" );
            		goto rulesimple_case_statementEx;
            	}
            	while ( stream_simple_case_when_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_simple_case_when_part.nextTree());
            	}
            	stream_simple_case_when_part.reset();

            	// OracleDML.g:1089:86: ( case_else_part )?
            	if ( stream_case_else_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_case_else_part.nextTree());
            	}
            	stream_case_else_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_end_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesimple_case_statementEx; /* Prevent compiler warnings */
    rulesimple_case_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end simple_case_statement */

/**
 * $ANTLR start simple_case_when_part
 * OracleDML.g:1092:1: simple_case_when_part : when_key ^ew1= expression_wrapper then_key ! ({...}? seq_of_statements |ew2= expression_wrapper ) ;
 */
OracleDML::simple_case_when_part_return
OracleDML::simple_case_when_part()
{
    OracleDML::simple_case_when_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_wrapper_return ew1;
    ImplTraits::TreeTypePtr::pointer ew1_last = NULL;
    OracleDML::expression_wrapper_return ew2;
    ImplTraits::TreeTypePtr::pointer ew2_last = NULL;
    OracleDML_OracleDMLKeys::when_key_return when_key791;
    ImplTraits::TreeTypePtr::pointer when_key791_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key792;
    ImplTraits::TreeTypePtr::pointer then_key792_last = NULL;
    OracleDML::seq_of_statements_return seq_of_statements793;
    ImplTraits::TreeTypePtr::pointer seq_of_statements793_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1093:5: ( when_key ^ew1= expression_wrapper then_key ! ({...}? seq_of_statements |ew2= expression_wrapper ) )
        // OracleDML.g:1093:10: when_key ^ew1= expression_wrapper then_key ! ({...}? seq_of_statements |ew2= expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_when_key_in_simple_case_when_part11210);
            when_key791=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(when_key791.tree, root_0);

            this->followPush(FOLLOW_expression_wrapper_in_simple_case_when_part11215);
            ew1=expression_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, ew1.tree);


            this->followPush(FOLLOW_then_key_in_simple_case_when_part11217);
            then_key792=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            // OracleDML.g:1093:53: ({...}? seq_of_statements |ew2= expression_wrapper )
            {
                ANTLR_UINT32 alt259=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_LOCK:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_INSERT:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_UPDATE:
                case SQL92_RESERVED_WITH:
                	{
                		alt259=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA259_3 = this->LA(2);
                		    if ( ((m_case_statement_stack.peek().isStatement)))
                		    {
                		        alt259=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt259=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 259 );
                		        ex->set_state( 3 );


                		        goto rulesimple_case_when_partEx;

                		    }
                		}
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA259_8 = this->LA(2);
                		    if ( (( ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))) && ((m_case_statement_stack.peek().isStatement)) )))
                		    {
                		        alt259=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt259=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 259 );
                		        ex->set_state( 8 );


                		        goto rulesimple_case_when_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt259=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 259 );
                    ex->set_state( 0 );


                    goto rulesimple_case_when_partEx;

                }

                switch (alt259)
                {
            	case 1:
            	    // OracleDML.g:1093:54: {...}? seq_of_statements
            	    {
            	        if ( !((m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "$case_statement::isStatement" );
            	                ex->set_ruleName( "simple_case_when_part" );


            	        }

            	        this->followPush(FOLLOW_seq_of_statements_in_simple_case_when_part11223);
            	        seq_of_statements793=seq_of_statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesimple_case_when_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, seq_of_statements793.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1093:106: ew2= expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_simple_case_when_part11229);
            	        ew2=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesimple_case_when_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, ew2.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesimple_case_when_partEx; /* Prevent compiler warnings */
    rulesimple_case_when_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end simple_case_when_part */

/**
 * $ANTLR start searched_case_statement
 * OracleDML.g:1096:1: searched_case_statement : ({...}? ( label_name )? ) ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |) -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? end_key ) ;
 */
OracleDML::searched_case_statement_return
OracleDML::searched_case_statement()
{
    OracleDML::searched_case_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::case_key_return ck1;
    ImplTraits::TreeTypePtr::pointer ck1_last = NULL;
    OracleDML_OracleDMLCommons::label_name_return label_name794;
    ImplTraits::TreeTypePtr::pointer label_name794_last = NULL;
    OracleDML::searched_case_when_part_return searched_case_when_part795;
    ImplTraits::TreeTypePtr::pointer searched_case_when_part795_last = NULL;
    OracleDML::case_else_part_return case_else_part796;
    ImplTraits::TreeTypePtr::pointer case_else_part796_last = NULL;
    OracleDML_OracleDMLKeys::end_key_return end_key797;
    ImplTraits::TreeTypePtr::pointer end_key797_last = NULL;
    OracleDML_OracleDMLKeys::case_key_return case_key798;
    ImplTraits::TreeTypePtr::pointer case_key798_last = NULL;
    OracleDML_OracleDMLCommons::label_name_return label_name799;
    ImplTraits::TreeTypePtr::pointer label_name799_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_searched_case_when_part(get_psrstate()->get_treeAdaptor(), "rule searched_case_when_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_label_name(get_psrstate()->get_treeAdaptor(), "rule label_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_case_else_part(get_psrstate()->get_treeAdaptor(), "rule case_else_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_case_key(get_psrstate()->get_treeAdaptor(), "rule case_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_end_key(get_psrstate()->get_treeAdaptor(), "rule end_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1097:5: ( ({...}? ( label_name )? ) ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |) -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? end_key ) )
        // OracleDML.g:1097:9: ({...}? ( label_name )? ) ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |)
        {
            // OracleDML.g:1097:9: ({...}? ( label_name )? )
            // OracleDML.g:1097:10: {...}? ( label_name )?
            {
                if ( !((!m_case_statement_stack.peek().isStatement)) )
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!$case_statement::isStatement" );
                        ex->set_ruleName( "searched_case_statement" );


                }

                // OracleDML.g:1097:43: ( label_name )?
                {
                    ANTLR_UINT32 alt260=2;
                    switch ( this->LA(1) )
                    {
                        case DELIMITED_ID:
                        case REGULAR_ID:
                        	{
                        		alt260=1;
                        	}
                            break;
                    }

                    switch (alt260)
                    {
                	case 1:
                	    // OracleDML.g:1097:43: label_name
                	    {
                	        this->followPush(FOLLOW_label_name_in_searched_case_statement11252);
                	        label_name794=label_name();

                	        this->followPop();
                	        if  (this->hasException())
                	        {
                	            goto rulesearched_case_statementEx;
                	        }
                	        if (this->hasFailed())
                	        {
                	            return retval;
                	        }

                	        if ( this->get_backtracking()==0 ) 
                	        {
                	            label_name794_last = label_name794.tree.get();
                	            stream_label_name.add(label_name794.tree);
                	        }

                	    }
                	    break;

                    }
                }

            }


            this->followPush(FOLLOW_case_key_in_searched_case_statement11258);
            ck1=case_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                ck1_last = ck1.tree.get();
                stream_case_key.add(ck1.tree);
            }

            // OracleDML.g:1098:9: ( searched_case_when_part )+
            {
                int cnt261=0;

                for (;;)
                {
                    ANTLR_UINT32 alt261=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_WHEN:
            		{
            			alt261=1;
            		}
            	    break;

            	}

            	switch (alt261)
            	{
            	    case 1:
            	        // OracleDML.g:1098:9: searched_case_when_part
            	        {
            	            this->followPush(FOLLOW_searched_case_when_part_in_searched_case_statement11268);
            	            searched_case_when_part795=searched_case_when_part();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesearched_case_statementEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) 
            	            {
            	                searched_case_when_part795_last = searched_case_when_part795.tree.get();
            	                stream_searched_case_when_part.add(searched_case_when_part795.tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt261 >= 1 )
            		{
            		    goto loop261;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulesearched_case_statementEx;
            	}
            	cnt261++;
                }
                loop261: ;	/* Jump to here if this rule does not match */
            }

            // OracleDML.g:1099:9: ( case_else_part )?
            {
                ANTLR_UINT32 alt262=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ELSE:
                    	{
                    		alt262=1;
                    	}
                        break;
                }

                switch (alt262)
                {
            	case 1:
            	    // OracleDML.g:1099:9: case_else_part
            	    {
            	        this->followPush(FOLLOW_case_else_part_in_searched_case_statement11279);
            	        case_else_part796=case_else_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearched_case_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            case_else_part796_last = case_else_part796.tree.get();
            	            stream_case_else_part.add(case_else_part796.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_end_key_in_searched_case_statement11290);
            end_key797=end_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                end_key797_last = end_key797.tree.get();
                stream_end_key.add(end_key797.tree);
            }

            // OracleDML.g:1100:17: ({...}? case_key ( label_name )? |)
            {
                ANTLR_UINT32 alt264=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_CASE:
                	{
                		alt264=1;
                	}
                    break;
                case EOF_TOKEN:
                case ASTERISK:
                case CARRET_OPERATOR_PART:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COMMA:
                case CONCATENATION_OP:
                case DELIMITED_ID:
                case EQUALS_OP:
                case EXCLAMATION_OPERATOR_PART:
                case GREATER_THAN_OP:
                case GREATER_THAN_OR_EQUALS_OP:
                case INTRODUCER:
                case LEFT_BRACKET:
                case LEFT_PAREN:
                case LESS_THAN_OP:
                case LESS_THAN_OR_EQUALS_OP:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case NOT_EQUAL_OP:
                case PLSQL_NON_RESERVED_MODEL:
                case PLSQL_NON_RESERVED_MULTISET:
                case PLSQL_NON_RESERVED_PIVOT:
                case PLSQL_NON_RESERVED_UNPIVOT:
                case PLSQL_NON_RESERVED_USING:
                case PLSQL_RESERVED_MINUS:
                case PLSQL_RESERVED_START:
                case PLUS_SIGN:
                case REGULAR_ID:
                case RIGHT_BRACKET:
                case RIGHT_PAREN:
                case SEMICOLON:
                case SOLIDUS:
                case SQL92_RESERVED_AND:
                case SQL92_RESERVED_AS:
                case SQL92_RESERVED_ASC:
                case SQL92_RESERVED_BETWEEN:
                case SQL92_RESERVED_CONNECT:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_DESC:
                case SQL92_RESERVED_ELSE:
                case SQL92_RESERVED_END:
                case SQL92_RESERVED_FOR:
                case SQL92_RESERVED_FROM:
                case SQL92_RESERVED_GROUP:
                case SQL92_RESERVED_HAVING:
                case SQL92_RESERVED_IN:
                case SQL92_RESERVED_INTERSECT:
                case SQL92_RESERVED_INTO:
                case SQL92_RESERVED_IS:
                case SQL92_RESERVED_LIKE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_ON:
                case SQL92_RESERVED_OR:
                case SQL92_RESERVED_ORDER:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_THEN:
                case SQL92_RESERVED_TO:
                case SQL92_RESERVED_UNION:
                case SQL92_RESERVED_WHEN:
                case SQL92_RESERVED_WHERE:
                case SQL92_RESERVED_WITH:
                case VERTICAL_BAR:
                	{
                		alt264=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 264 );
                    ex->set_state( 0 );


                    goto rulesearched_case_statementEx;

                }

                switch (alt264)
                {
            	case 1:
            	    // OracleDML.g:1100:18: {...}? case_key ( label_name )?
            	    {
            	        if ( !((!m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!$case_statement::isStatement" );
            	                ex->set_ruleName( "searched_case_statement" );


            	        }

            	        this->followPush(FOLLOW_case_key_in_searched_case_statement11295);
            	        case_key798=case_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearched_case_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            case_key798_last = case_key798.tree.get();
            	            stream_case_key.add(case_key798.tree);
            	        }

            	        // OracleDML.g:1100:60: ( label_name )?
            	        {
            	            ANTLR_UINT32 alt263=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		alt263=1;
            	                	}
            	                    break;
            	                case DELIMITED_ID:
            	                	{
            	                		alt263=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt263)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1100:60: label_name
            	        	    {
            	        	        this->followPush(FOLLOW_label_name_in_searched_case_statement11297);
            	        	        label_name799=label_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearched_case_statementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            label_name799_last = label_name799.tree.get();
            	        	            stream_label_name.add(label_name799.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1100:74: 
            	    {
            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: case_else_part, label_name, searched_case_when_part, end_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1101:9: -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? end_key )
            {
            	// OracleDML.g:1101:12: ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? end_key )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SEARCHED_CASE, (ck1.start)), root_1);
            	// OracleDML.g:1101:40: ( label_name )*
            	while ( stream_label_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_label_name.nextTree());
            	}
            	stream_label_name.reset();

            	if ( !(stream_searched_case_when_part.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "searched_case_when_part empty" );
            		goto rulesearched_case_statementEx;
            	}
            	while ( stream_searched_case_when_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_searched_case_when_part.nextTree());
            	}
            	stream_searched_case_when_part.reset();

            	// OracleDML.g:1101:77: ( case_else_part )?
            	if ( stream_case_else_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_case_else_part.nextTree());
            	}
            	stream_case_else_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_end_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesearched_case_statementEx; /* Prevent compiler warnings */
    rulesearched_case_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end searched_case_statement */

/**
 * $ANTLR start searched_case_when_part
 * OracleDML.g:1104:1: searched_case_when_part : when_key ^ condition_wrapper then_key ! ({...}? seq_of_statements | expression_wrapper ) ;
 */
OracleDML::searched_case_when_part_return
OracleDML::searched_case_when_part()
{
    OracleDML::searched_case_when_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::when_key_return when_key800;
    ImplTraits::TreeTypePtr::pointer when_key800_last = NULL;
    OracleDML::condition_wrapper_return condition_wrapper801;
    ImplTraits::TreeTypePtr::pointer condition_wrapper801_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key802;
    ImplTraits::TreeTypePtr::pointer then_key802_last = NULL;
    OracleDML::seq_of_statements_return seq_of_statements803;
    ImplTraits::TreeTypePtr::pointer seq_of_statements803_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper804;
    ImplTraits::TreeTypePtr::pointer expression_wrapper804_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1105:5: ( when_key ^ condition_wrapper then_key ! ({...}? seq_of_statements | expression_wrapper ) )
        // OracleDML.g:1105:10: when_key ^ condition_wrapper then_key ! ({...}? seq_of_statements | expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_when_key_in_searched_case_when_part11348);
            when_key800=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(when_key800.tree, root_0);

            this->followPush(FOLLOW_condition_wrapper_in_searched_case_when_part11351);
            condition_wrapper801=condition_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, condition_wrapper801.tree);


            this->followPush(FOLLOW_then_key_in_searched_case_when_part11353);
            then_key802=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            // OracleDML.g:1105:48: ({...}? seq_of_statements | expression_wrapper )
            {
                ANTLR_UINT32 alt265=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_LOCK:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_INSERT:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_UPDATE:
                case SQL92_RESERVED_WITH:
                	{
                		alt265=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA265_3 = this->LA(2);
                		    if ( ((m_case_statement_stack.peek().isStatement)))
                		    {
                		        alt265=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt265=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 265 );
                		        ex->set_state( 3 );


                		        goto rulesearched_case_when_partEx;

                		    }
                		}
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA265_8 = this->LA(2);
                		    if ( (( ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))) && ((m_case_statement_stack.peek().isStatement)) )))
                		    {
                		        alt265=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt265=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 265 );
                		        ex->set_state( 8 );


                		        goto rulesearched_case_when_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt265=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 265 );
                    ex->set_state( 0 );


                    goto rulesearched_case_when_partEx;

                }

                switch (alt265)
                {
            	case 1:
            	    // OracleDML.g:1105:49: {...}? seq_of_statements
            	    {
            	        if ( !((m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "$case_statement::isStatement" );
            	                ex->set_ruleName( "searched_case_when_part" );


            	        }

            	        this->followPush(FOLLOW_seq_of_statements_in_searched_case_when_part11359);
            	        seq_of_statements803=seq_of_statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearched_case_when_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, seq_of_statements803.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1105:101: expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_searched_case_when_part11363);
            	        expression_wrapper804=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearched_case_when_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper804.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesearched_case_when_partEx; /* Prevent compiler warnings */
    rulesearched_case_when_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end searched_case_when_part */

/**
 * $ANTLR start case_else_part
 * OracleDML.g:1108:1: case_else_part : else_key ^ ({...}? seq_of_statements | expression_wrapper ) ;
 */
OracleDML::case_else_part_return
OracleDML::case_else_part()
{
    OracleDML::case_else_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::else_key_return else_key805;
    ImplTraits::TreeTypePtr::pointer else_key805_last = NULL;
    OracleDML::seq_of_statements_return seq_of_statements806;
    ImplTraits::TreeTypePtr::pointer seq_of_statements806_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper807;
    ImplTraits::TreeTypePtr::pointer expression_wrapper807_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1109:5: ( else_key ^ ({...}? seq_of_statements | expression_wrapper ) )
        // OracleDML.g:1109:10: else_key ^ ({...}? seq_of_statements | expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_else_key_in_case_else_part11384);
            else_key805=else_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecase_else_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(else_key805.tree, root_0);

            // OracleDML.g:1109:20: ({...}? seq_of_statements | expression_wrapper )
            {
                ANTLR_UINT32 alt266=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_LOCK:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_INSERT:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_UPDATE:
                case SQL92_RESERVED_WITH:
                	{
                		alt266=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA266_3 = this->LA(2);
                		    if ( ((m_case_statement_stack.peek().isStatement)))
                		    {
                		        alt266=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt266=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 266 );
                		        ex->set_state( 3 );


                		        goto rulecase_else_partEx;

                		    }
                		}
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA266_8 = this->LA(2);
                		    if ( (( ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))) && ((m_case_statement_stack.peek().isStatement)) )))
                		    {
                		        alt266=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt266=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 266 );
                		        ex->set_state( 8 );


                		        goto rulecase_else_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt266=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 266 );
                    ex->set_state( 0 );


                    goto rulecase_else_partEx;

                }

                switch (alt266)
                {
            	case 1:
            	    // OracleDML.g:1109:21: {...}? seq_of_statements
            	    {
            	        if ( !((m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "$case_statement::isStatement" );
            	                ex->set_ruleName( "case_else_part" );


            	        }

            	        this->followPush(FOLLOW_seq_of_statements_in_case_else_part11390);
            	        seq_of_statements806=seq_of_statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecase_else_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, seq_of_statements806.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1109:73: expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_case_else_part11394);
            	        expression_wrapper807=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecase_else_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper807.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecase_else_partEx; /* Prevent compiler warnings */
    rulecase_else_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end case_else_part */

/**
 * $ANTLR start atom
 * OracleDML.g:1113:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) );
 */
OracleDML::atom_return
OracleDML::atom()
{
    OracleDML::atom_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN813 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN815 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN818 = NULL;
    OracleDML_OracleDMLCommons::table_element_return table_element808;
    ImplTraits::TreeTypePtr::pointer table_element808_last = NULL;
    OracleDML_OracleDMLCommons::outer_join_sign_return outer_join_sign809;
    ImplTraits::TreeTypePtr::pointer outer_join_sign809_last = NULL;
    OracleDML_OracleDMLCommons::bind_variable_return bind_variable810;
    ImplTraits::TreeTypePtr::pointer bind_variable810_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant811;
    ImplTraits::TreeTypePtr::pointer constant811_last = NULL;
    OracleDML_OracleDMLCommons::general_element_return general_element812;
    ImplTraits::TreeTypePtr::pointer general_element812_last = NULL;
    OracleDML::subquery_return subquery814;
    ImplTraits::TreeTypePtr::pointer subquery814_last = NULL;
    OracleDML::subquery_operation_part_return subquery_operation_part816;
    ImplTraits::TreeTypePtr::pointer subquery_operation_part816_last = NULL;
    OracleDML::expression_or_vector_return expression_or_vector817;
    ImplTraits::TreeTypePtr::pointer expression_or_vector817_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN813_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN815_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN818_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_operation_part(get_psrstate()->get_treeAdaptor(), "rule subquery_operation_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_or_vector(get_psrstate()->get_treeAdaptor(), "rule expression_or_vector");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1119:5: ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) )

            ANTLR_UINT32 alt269;

            alt269=5;

            alt269 = cdfa269.predict(this, this->get_rec(), this->get_istream(), cdfa269 );
            if  (this->hasException())
            {
                goto ruleatomEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            switch (alt269)
            {
        	case 1:
        	    // OracleDML.g:1119:10: ( table_element outer_join_sign )=> table_element outer_join_sign
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_table_element_in_atom11441);
        	        table_element808=table_element();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_element808.tree);


        	        this->followPush(FOLLOW_outer_join_sign_in_atom11443);
        	        outer_join_sign809=outer_join_sign();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, outer_join_sign809.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1120:10: bind_variable
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_bind_variable_in_atom11454);
        	        bind_variable810=bind_variable();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, bind_variable810.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:1121:10: constant
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_constant_in_atom11465);
        	        constant811=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, constant811.tree);


        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:1122:10: general_element
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_general_element_in_atom11476);
        	        general_element812=general_element();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element812.tree);


        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:1123:10: LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN )
        	    {
        	        LEFT_PAREN813 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_atom11487);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN813);


        	        // OracleDML.g:1124:10: ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN )
        	        {
        	            ANTLR_UINT32 alt268=2;
        	            {
        	                ANTLR_UINT32 LA268_0 = this->LA(1);
        	                if ( (LA268_0 == SQL92_RESERVED_SELECT) && (this->msynpred( antlr3::ClassForwarder<synpred50_OracleDML>() )))
        	                {
        	                    alt268=1;
        	                }
        	                else if ( (LA268_0 == LEFT_PAREN))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA268_2 = this->LA(2);
        	                        if ( (this->msynpred( antlr3::ClassForwarder<synpred50_OracleDML>() )))
        	                        {
        	                            alt268=1;
        	                        }
        	                        else if ( (true))
        	                        {
        	                            alt268=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 268 );
        	                            ex->set_state( 2 );


        	                            goto ruleatomEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA268_0 == APPROXIMATE_NUM_LIT || LA268_0 == BINDVAR || ((LA268_0 >= CHAR_STRING) && (LA268_0 <= CHAR_STRING_PERL)) || LA268_0 == COLON || LA268_0 == DELIMITED_ID || LA268_0 == EXACT_NUM_LIT || LA268_0 == INTRODUCER || LA268_0 == MINUS_SIGN || LA268_0 == NATIONAL_CHAR_STRING_LIT || ((LA268_0 >= PLSQL_NON_RESERVED_CAST) && (LA268_0 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA268_0 == PLUS_SIGN || LA268_0 == REGULAR_ID || LA268_0 == SQL92_RESERVED_ALL || LA268_0 == SQL92_RESERVED_ANY || LA268_0 == SQL92_RESERVED_CASE || ((LA268_0 >= SQL92_RESERVED_CURSOR) && (LA268_0 <= SQL92_RESERVED_DATE)) || LA268_0 == SQL92_RESERVED_DEFAULT || LA268_0 == SQL92_RESERVED_DISTINCT || ((LA268_0 >= SQL92_RESERVED_EXISTS) && (LA268_0 <= SQL92_RESERVED_FALSE)) || ((LA268_0 >= SQL92_RESERVED_NOT) && (LA268_0 <= SQL92_RESERVED_NULL)) || LA268_0 == SQL92_RESERVED_PRIOR || LA268_0 == SQL92_RESERVED_TRUE || LA268_0 == UNSIGNED_INTEGER))
        	                {
        	                    alt268=2;
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 268 );
        	                    ex->set_state( 0 );


        	                    goto ruleatomEx;

        	                }
        	            }
        	            switch (alt268)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1125:15: ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )*
        	        	    {
        	        	        this->followPush(FOLLOW_subquery_in_atom11524);
        	        	        subquery814=subquery();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            subquery814_last = subquery814.tree.get();
        	        	            stream_subquery.add(subquery814.tree);
        	        	        }

        	        	        RIGHT_PAREN815 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_atom11526);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN815);


        	        	        // OracleDML.g:1125:63: ( subquery_operation_part )*

        	        	        for (;;)
        	        	        {
        	        	            ANTLR_UINT32 alt267=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case SQL92_RESERVED_UNION:
        	        	            	{
        	        	            		alt267=1;
        	        	            	}
        	        	                break;
        	        	            case SQL92_RESERVED_INTERSECT:
        	        	            	{
        	        	            		alt267=1;
        	        	            	}
        	        	                break;
        	        	            case PLSQL_RESERVED_MINUS:
        	        	            	{
        	        	            		alt267=1;
        	        	            	}
        	        	                break;

        	        	            }

        	        	            switch (alt267)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1125:63: subquery_operation_part
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_subquery_operation_part_in_atom11528);
        	        	        	        subquery_operation_part816=subquery_operation_part();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto ruleatomEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) 
        	        	        	        {
        	        	        	            subquery_operation_part816_last = subquery_operation_part816.tree.get();
        	        	        	            stream_subquery_operation_part.add(subquery_operation_part816.tree);
        	        	        	        }

        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop267;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop267: ; /* Jump out to here if this rule does not match */


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	             mode = 1; 
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1126:17: expression_or_vector RIGHT_PAREN
        	        	    {
        	        	        this->followPush(FOLLOW_expression_or_vector_in_atom11549);
        	        	        expression_or_vector817=expression_or_vector();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            expression_or_vector817_last = expression_or_vector817.tree.get();
        	        	            stream_expression_or_vector.add(expression_or_vector817.tree);
        	        	        }

        	        	        RIGHT_PAREN818 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_atom11551);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN818);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: RIGHT_PAREN, expression_or_vector, subquery_operation_part, LEFT_PAREN, LEFT_PAREN, RIGHT_PAREN, subquery
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 1128:10: -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* )
        	        if ( mode == 1 ) {
        	        	// OracleDML.g:1128:28: ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_SUBQUERY, "NESTED_SUBQUERY"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
        	        	// OracleDML.g:1128:78: ( subquery_operation_part )*
        	        	while ( stream_subquery_operation_part.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_operation_part.nextTree());
        	        	}
        	        	stream_subquery_operation_part.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }

        	        else // 1129:10: -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN )
        	        {
        	        	// OracleDML.g:1129:28: ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_EXPR, "NESTED_EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_or_vector.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleatomEx; /* Prevent compiler warnings */
    ruleatomEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end atom */

/**
 * $ANTLR start expression_or_vector
 * OracleDML.g:1132:1: expression_or_vector : expression ( vector_expr )? -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr ) -> expression ;
 */
OracleDML::expression_or_vector_return
OracleDML::expression_or_vector()
{
    OracleDML::expression_or_vector_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression819;
    ImplTraits::TreeTypePtr::pointer expression819_last = NULL;
    OracleDML::vector_expr_return vector_expr820;
    ImplTraits::TreeTypePtr::pointer vector_expr820_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_vector_expr(get_psrstate()->get_treeAdaptor(), "rule vector_expr");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1134:5: ( expression ( vector_expr )? -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr ) -> expression )
        // OracleDML.g:1134:10: expression ( vector_expr )?
        {
            this->followPush(FOLLOW_expression_in_expression_or_vector11652);
            expression819=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpression_or_vectorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression819_last = expression819.tree.get();
                stream_expression.add(expression819.tree);
            }

            // OracleDML.g:1134:21: ( vector_expr )?
            {
                ANTLR_UINT32 alt270=2;
                switch ( this->LA(1) )
                {
                    case COMMA:
                    	{
                    		alt270=1;
                    	}
                        break;
                }

                switch (alt270)
                {
            	case 1:
            	    // OracleDML.g:1134:22: vector_expr
            	    {
            	        this->followPush(FOLLOW_vector_expr_in_expression_or_vector11655);
            	        vector_expr820=vector_expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_or_vectorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            vector_expr820_last = vector_expr820.tree.get();
            	            stream_vector_expr.add(vector_expr820.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression, vector_expr, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1135:9: -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr )
            if (mode == 1) {
            	// OracleDML.g:1135:25: ^( VECTOR_EXPR ^( EXPR expression ) vector_expr )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(VECTOR_EXPR, "VECTOR_EXPR"), root_1);
            	// OracleDML.g:1135:39: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_vector_expr.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1136:9: -> expression
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_expression.nextTree());
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleexpression_or_vectorEx; /* Prevent compiler warnings */
    ruleexpression_or_vectorEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end expression_or_vector */

/**
 * $ANTLR start vector_expr
 * OracleDML.g:1139:1: vector_expr : COMMA expression ( COMMA expression )* -> ( ^( EXPR expression ) )+ ;
 */
OracleDML::vector_expr_return
OracleDML::vector_expr()
{
    OracleDML::vector_expr_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA821 = NULL;
    ImplTraits::CommonTokenType const* COMMA823 = NULL;
    OracleDML::expression_return expression822;
    ImplTraits::TreeTypePtr::pointer expression822_last = NULL;
    OracleDML::expression_return expression824;
    ImplTraits::TreeTypePtr::pointer expression824_last = NULL;
    ImplTraits::TreeTypePtr COMMA821_tree;
    ImplTraits::TreeTypePtr COMMA823_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1140:5: ( COMMA expression ( COMMA expression )* -> ( ^( EXPR expression ) )+ )
        // OracleDML.g:1140:10: COMMA expression ( COMMA expression )*
        {
            COMMA821 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_vector_expr11715);
            if  (this->hasException())
            {
                goto rulevector_exprEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA821);


            this->followPush(FOLLOW_expression_in_vector_expr11717);
            expression822=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevector_exprEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression822_last = expression822.tree.get();
                stream_expression.add(expression822.tree);
            }

            // OracleDML.g:1140:27: ( COMMA expression )*

            for (;;)
            {
                ANTLR_UINT32 alt271=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt271=1;
                	}
                    break;

                }

                switch (alt271)
                {
            	case 1:
            	    // OracleDML.g:1140:28: COMMA expression
            	    {
            	        COMMA823 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_vector_expr11720);
            	        if  (this->hasException())
            	        {
            	            goto rulevector_exprEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA823);


            	        this->followPush(FOLLOW_expression_in_vector_expr11722);
            	        expression824=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevector_exprEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression824_last = expression824.tree.get();
            	            stream_expression.add(expression824.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop271;	/* break out of the loop */
            	    break;
                }
            }
            loop271: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1141:9: -> ( ^( EXPR expression ) )+
            {
            	if ( !(stream_expression.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "expression empty" );
            		goto rulevector_exprEx;
            	}
            	while ( stream_expression.hasNext() ) {
            		// OracleDML.g:1141:12: ^( EXPR expression )
            		{
            		ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            		}
            	}
            	stream_expression.reset();

            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulevector_exprEx; /* Prevent compiler warnings */
    rulevector_exprEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end vector_expr */

/**
 * $ANTLR start quantified_expression
 * OracleDML.g:1144:1: quantified_expression : ( some_key | exists_key | all_key | any_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) ) -> ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? LEFT_PAREN expression_wrapper RIGHT_PAREN ) ;
 */
OracleDML::quantified_expression_return
OracleDML::quantified_expression()
{
    OracleDML::quantified_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN829 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN831 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN832 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN834 = NULL;
    OracleDML_OracleDMLKeys::some_key_return some_key825;
    ImplTraits::TreeTypePtr::pointer some_key825_last = NULL;
    OracleDML_OracleDMLKeys::exists_key_return exists_key826;
    ImplTraits::TreeTypePtr::pointer exists_key826_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key827;
    ImplTraits::TreeTypePtr::pointer all_key827_last = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key828;
    ImplTraits::TreeTypePtr::pointer any_key828_last = NULL;
    OracleDML::subquery_return subquery830;
    ImplTraits::TreeTypePtr::pointer subquery830_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper833;
    ImplTraits::TreeTypePtr::pointer expression_wrapper833_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN829_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN831_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN832_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN834_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_wrapper(get_psrstate()->get_treeAdaptor(), "rule expression_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_some_key(get_psrstate()->get_treeAdaptor(), "rule some_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_any_key(get_psrstate()->get_treeAdaptor(), "rule any_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_exists_key(get_psrstate()->get_treeAdaptor(), "rule exists_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1146:5: ( ( some_key | exists_key | all_key | any_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) ) -> ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? LEFT_PAREN expression_wrapper RIGHT_PAREN ) )
        // OracleDML.g:1146:10: ( some_key | exists_key | all_key | any_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN )
        {
            // OracleDML.g:1146:10: ( some_key | exists_key | all_key | any_key )
            {
                ANTLR_UINT32 alt272=4;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		alt272=1;
                	}
                    break;
                case SQL92_RESERVED_EXISTS:
                	{
                		alt272=2;
                	}
                    break;
                case SQL92_RESERVED_ALL:
                	{
                		alt272=3;
                	}
                    break;
                case SQL92_RESERVED_ANY:
                	{
                		alt272=4;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 272 );
                    ex->set_state( 0 );


                    goto rulequantified_expressionEx;

                }

                switch (alt272)
                {
            	case 1:
            	    // OracleDML.g:1146:12: some_key
            	    {
            	        this->followPush(FOLLOW_some_key_in_quantified_expression11771);
            	        some_key825=some_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            some_key825_last = some_key825.tree.get();
            	            stream_some_key.add(some_key825.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1146:23: exists_key
            	    {
            	        this->followPush(FOLLOW_exists_key_in_quantified_expression11775);
            	        exists_key826=exists_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            exists_key826_last = exists_key826.tree.get();
            	            stream_exists_key.add(exists_key826.tree);
            	        }

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:1146:36: all_key
            	    {
            	        this->followPush(FOLLOW_all_key_in_quantified_expression11779);
            	        all_key827=all_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            all_key827_last = all_key827.tree.get();
            	            stream_all_key.add(all_key827.tree);
            	        }

            	    }
            	    break;
            	case 4:
            	    // OracleDML.g:1146:46: any_key
            	    {
            	        this->followPush(FOLLOW_any_key_in_quantified_expression11783);
            	        any_key828=any_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            any_key828_last = any_key828.tree.get();
            	            stream_any_key.add(any_key828.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:1147:10: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN )
            {
                ANTLR_UINT32 alt273=2;
                switch ( this->LA(1) )
                {
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA273_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred51_OracleDML>() )))
                		    {
                		        alt273=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt273=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 273 );
                		        ex->set_state( 1 );


                		        goto rulequantified_expressionEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 273 );
                    ex->set_state( 0 );


                    goto rulequantified_expressionEx;

                }

                switch (alt273)
                {
            	case 1:
            	    // OracleDML.g:1147:12: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
            	    {
            	        LEFT_PAREN829 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_quantified_expression11810);
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN829);


            	        this->followPush(FOLLOW_subquery_in_quantified_expression11812);
            	        subquery830=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery830_last = subquery830.tree.get();
            	            stream_subquery.add(subquery830.tree);
            	        }

            	        RIGHT_PAREN831 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_quantified_expression11814);
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN831);


            	        if ( this->get_backtracking()==0 )
            	        {
            	             mode = 1; 
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1148:14: LEFT_PAREN expression_wrapper RIGHT_PAREN
            	    {
            	        LEFT_PAREN832 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_quantified_expression11831);
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN832);


            	        this->followPush(FOLLOW_expression_wrapper_in_quantified_expression11833);
            	        expression_wrapper833=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_wrapper833_last = expression_wrapper833.tree.get();
            	            stream_expression_wrapper.add(expression_wrapper833.tree);
            	        }

            	        RIGHT_PAREN834 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_quantified_expression11835);
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN834);


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: some_key, exists_key, some_key, any_key, exists_key, RIGHT_PAREN, all_key, LEFT_PAREN, any_key, all_key, subquery, expression_wrapper, LEFT_PAREN, RIGHT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1150:10: -> { mode == 1 }? ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) )
            if ( mode == 1 ) {
            	// OracleDML.g:1150:28: ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_EXPR, "NESTED_EXPR"), root_1);
            	// OracleDML.g:1150:42: ( some_key )?
            	if ( stream_some_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_some_key.nextTree());
            	}
            	stream_some_key.reset();

            	// OracleDML.g:1150:52: ( exists_key )?
            	if ( stream_exists_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_exists_key.nextTree());
            	}
            	stream_exists_key.reset();

            	// OracleDML.g:1150:64: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:1150:73: ( any_key )?
            	if ( stream_any_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_any_key.nextTree());
            	}
            	stream_any_key.reset();

            	// OracleDML.g:1150:82: ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_SUBQUERY, "NESTED_SUBQUERY"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_LEFT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_subquery.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1151:10: -> ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? LEFT_PAREN expression_wrapper RIGHT_PAREN )
            {
            	// OracleDML.g:1151:28: ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? LEFT_PAREN expression_wrapper RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_EXPR, "NESTED_EXPR"), root_1);
            	// OracleDML.g:1151:42: ( some_key )?
            	if ( stream_some_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_some_key.nextTree());
            	}
            	stream_some_key.reset();

            	// OracleDML.g:1151:52: ( exists_key )?
            	if ( stream_exists_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_exists_key.nextTree());
            	}
            	stream_exists_key.reset();

            	// OracleDML.g:1151:64: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:1151:73: ( any_key )?
            	if ( stream_any_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_any_key.nextTree());
            	}
            	stream_any_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_wrapper.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulequantified_expressionEx; /* Prevent compiler warnings */
    rulequantified_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end quantified_expression */

/**
 * $ANTLR start standard_function
 * OracleDML.g:1154:1: standard_function : ( stantard_function_enabling_over ^ function_argument_analytic ( over_clause )? | stantard_function_enabling_using ^ function_argument_modeling ( using_clause )? | count_key ^ LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )? | ( cast_key ^| xmlcast_key ^) LEFT_PAREN ( ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )? | concatenation_wrapper as_key ! type_spec ) RIGHT_PAREN | chr_key ^ LEFT_PAREN concatenation_wrapper using_key ! nchar_cs_key RIGHT_PAREN | collect_key ^ LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN | stantard_function_enabling_within_or_over ^ function_argument ( within_or_over_part )+ | decompose_key ^ LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN | extract_key ^ LEFT_PAREN REGULAR_ID from_key ! concatenation_wrapper RIGHT_PAREN | ( first_value_key ^| last_value_key ^) function_argument_analytic ( respect_or_ignore_nulls )? over_clause | stantard_function_pedictions ^ LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN | translate_key ^ LEFT_PAREN expression_wrapper ( using_key ! ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN | treat_key ^ LEFT_PAREN expression_wrapper as_key ! ( ref_key )? type_spec RIGHT_PAREN | trim_key ^ LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN | xmlagg_key ^ LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )? | ( xmlcolattval_key ^| xmlforest_key ^) LEFT_PAREN xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlelement_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA ! xml_attributes_clause )? ( COMMA ! expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlexists_key ^ LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN | xmlparse_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlpi_key ^ LEFT_PAREN ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper ) ( COMMA ! concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlquery_key ^ LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key ! content_key ! ( null_key on_key ! empty_key !)? RIGHT_PAREN ( PERIOD general_element_part )? | xmlroot_key ^ LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA ! xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlserialize_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key ! type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmltable_key ^ LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )? );
 */
OracleDML::standard_function_return
OracleDML::standard_function()
{
    OracleDML::standard_function_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN842 = NULL;
    ImplTraits::CommonTokenType const* ASTERISK843 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN848 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN852 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN854 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN857 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN863 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN865 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN869 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN871 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN876 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN881 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN885 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN887 = NULL;
    ImplTraits::CommonTokenType const* REGULAR_ID888 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN891 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN898 = NULL;
    ImplTraits::CommonTokenType const* COMMA900 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN904 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN906 = NULL;
    ImplTraits::CommonTokenType const* COMMA911 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN913 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN915 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN920 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN922 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN929 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN931 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN934 = NULL;
    ImplTraits::CommonTokenType const* PERIOD935 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN939 = NULL;
    ImplTraits::CommonTokenType const* COMMA941 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN943 = NULL;
    ImplTraits::CommonTokenType const* PERIOD944 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN947 = NULL;
    ImplTraits::CommonTokenType const* COMMA953 = NULL;
    ImplTraits::CommonTokenType const* COMMA955 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN958 = NULL;
    ImplTraits::CommonTokenType const* PERIOD959 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN962 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN965 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN967 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN972 = NULL;
    ImplTraits::CommonTokenType const* PERIOD973 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN976 = NULL;
    ImplTraits::CommonTokenType const* COMMA981 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN983 = NULL;
    ImplTraits::CommonTokenType const* PERIOD984 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN987 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN995 = NULL;
    ImplTraits::CommonTokenType const* PERIOD996 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN999 = NULL;
    ImplTraits::CommonTokenType const* COMMA1002 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1004 = NULL;
    ImplTraits::CommonTokenType const* PERIOD1005 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN1008 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1020 = NULL;
    ImplTraits::CommonTokenType const* PERIOD1021 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN1024 = NULL;
    ImplTraits::CommonTokenType const* COMMA1030 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1032 = NULL;
    ImplTraits::CommonTokenType const* PERIOD1033 = NULL;
    OracleDML::stantard_function_enabling_over_return stantard_function_enabling_over835;
    ImplTraits::TreeTypePtr::pointer stantard_function_enabling_over835_last = NULL;
    OracleDML_OracleDMLCommons::function_argument_analytic_return function_argument_analytic836;
    ImplTraits::TreeTypePtr::pointer function_argument_analytic836_last = NULL;
    OracleDML::over_clause_return over_clause837;
    ImplTraits::TreeTypePtr::pointer over_clause837_last = NULL;
    OracleDML::stantard_function_enabling_using_return stantard_function_enabling_using838;
    ImplTraits::TreeTypePtr::pointer stantard_function_enabling_using838_last = NULL;
    OracleDML_OracleDMLCommons::function_argument_modeling_return function_argument_modeling839;
    ImplTraits::TreeTypePtr::pointer function_argument_modeling839_last = NULL;
    OracleDML::using_clause_return using_clause840;
    ImplTraits::TreeTypePtr::pointer using_clause840_last = NULL;
    OracleDML_OracleDMLKeys::count_key_return count_key841;
    ImplTraits::TreeTypePtr::pointer count_key841_last = NULL;
    OracleDML_OracleDMLKeys::distinct_key_return distinct_key844;
    ImplTraits::TreeTypePtr::pointer distinct_key844_last = NULL;
    OracleDML_OracleDMLKeys::unique_key_return unique_key845;
    ImplTraits::TreeTypePtr::pointer unique_key845_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key846;
    ImplTraits::TreeTypePtr::pointer all_key846_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper847;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper847_last = NULL;
    OracleDML::over_clause_return over_clause849;
    ImplTraits::TreeTypePtr::pointer over_clause849_last = NULL;
    OracleDML_OracleDMLKeys::cast_key_return cast_key850;
    ImplTraits::TreeTypePtr::pointer cast_key850_last = NULL;
    OracleDML_OracleDMLKeys::xmlcast_key_return xmlcast_key851;
    ImplTraits::TreeTypePtr::pointer xmlcast_key851_last = NULL;
    OracleDML_OracleDMLKeys::multiset_key_return multiset_key853;
    ImplTraits::TreeTypePtr::pointer multiset_key853_last = NULL;
    OracleDML::subquery_return subquery855;
    ImplTraits::TreeTypePtr::pointer subquery855_last = NULL;
    OracleDML::order_by_clause_return order_by_clause856;
    ImplTraits::TreeTypePtr::pointer order_by_clause856_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key858;
    ImplTraits::TreeTypePtr::pointer as_key858_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec859;
    ImplTraits::TreeTypePtr::pointer type_spec859_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper860;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper860_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key861;
    ImplTraits::TreeTypePtr::pointer as_key861_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec862;
    ImplTraits::TreeTypePtr::pointer type_spec862_last = NULL;
    OracleDML_OracleDMLKeys::chr_key_return chr_key864;
    ImplTraits::TreeTypePtr::pointer chr_key864_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper866;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper866_last = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key867;
    ImplTraits::TreeTypePtr::pointer using_key867_last = NULL;
    OracleDML_OracleDMLKeys::nchar_cs_key_return nchar_cs_key868;
    ImplTraits::TreeTypePtr::pointer nchar_cs_key868_last = NULL;
    OracleDML_OracleDMLKeys::collect_key_return collect_key870;
    ImplTraits::TreeTypePtr::pointer collect_key870_last = NULL;
    OracleDML_OracleDMLKeys::distinct_key_return distinct_key872;
    ImplTraits::TreeTypePtr::pointer distinct_key872_last = NULL;
    OracleDML_OracleDMLKeys::unique_key_return unique_key873;
    ImplTraits::TreeTypePtr::pointer unique_key873_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper874;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper874_last = NULL;
    OracleDML::collect_order_by_part_return collect_order_by_part875;
    ImplTraits::TreeTypePtr::pointer collect_order_by_part875_last = NULL;
    OracleDML::stantard_function_enabling_within_or_over_return stantard_function_enabling_within_or_over877;
    ImplTraits::TreeTypePtr::pointer stantard_function_enabling_within_or_over877_last = NULL;
    OracleDML_OracleDMLCommons::function_argument_return function_argument878;
    ImplTraits::TreeTypePtr::pointer function_argument878_last = NULL;
    OracleDML::within_or_over_part_return within_or_over_part879;
    ImplTraits::TreeTypePtr::pointer within_or_over_part879_last = NULL;
    OracleDML_OracleDMLKeys::decompose_key_return decompose_key880;
    ImplTraits::TreeTypePtr::pointer decompose_key880_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper882;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper882_last = NULL;
    OracleDML_OracleDMLKeys::canonical_key_return canonical_key883;
    ImplTraits::TreeTypePtr::pointer canonical_key883_last = NULL;
    OracleDML_OracleDMLKeys::compatibility_key_return compatibility_key884;
    ImplTraits::TreeTypePtr::pointer compatibility_key884_last = NULL;
    OracleDML_OracleDMLKeys::extract_key_return extract_key886;
    ImplTraits::TreeTypePtr::pointer extract_key886_last = NULL;
    OracleDML_OracleDMLKeys::from_key_return from_key889;
    ImplTraits::TreeTypePtr::pointer from_key889_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper890;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper890_last = NULL;
    OracleDML_OracleDMLKeys::first_value_key_return first_value_key892;
    ImplTraits::TreeTypePtr::pointer first_value_key892_last = NULL;
    OracleDML_OracleDMLKeys::last_value_key_return last_value_key893;
    ImplTraits::TreeTypePtr::pointer last_value_key893_last = NULL;
    OracleDML_OracleDMLCommons::function_argument_analytic_return function_argument_analytic894;
    ImplTraits::TreeTypePtr::pointer function_argument_analytic894_last = NULL;
    OracleDML_OracleDMLCommons::respect_or_ignore_nulls_return respect_or_ignore_nulls895;
    ImplTraits::TreeTypePtr::pointer respect_or_ignore_nulls895_last = NULL;
    OracleDML::over_clause_return over_clause896;
    ImplTraits::TreeTypePtr::pointer over_clause896_last = NULL;
    OracleDML::stantard_function_pedictions_return stantard_function_pedictions897;
    ImplTraits::TreeTypePtr::pointer stantard_function_pedictions897_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper899;
    ImplTraits::TreeTypePtr::pointer expression_wrapper899_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper901;
    ImplTraits::TreeTypePtr::pointer expression_wrapper901_last = NULL;
    OracleDML::cost_matrix_clause_return cost_matrix_clause902;
    ImplTraits::TreeTypePtr::pointer cost_matrix_clause902_last = NULL;
    OracleDML::using_clause_return using_clause903;
    ImplTraits::TreeTypePtr::pointer using_clause903_last = NULL;
    OracleDML_OracleDMLKeys::translate_key_return translate_key905;
    ImplTraits::TreeTypePtr::pointer translate_key905_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper907;
    ImplTraits::TreeTypePtr::pointer expression_wrapper907_last = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key908;
    ImplTraits::TreeTypePtr::pointer using_key908_last = NULL;
    OracleDML_OracleDMLKeys::char_cs_key_return char_cs_key909;
    ImplTraits::TreeTypePtr::pointer char_cs_key909_last = NULL;
    OracleDML_OracleDMLKeys::nchar_cs_key_return nchar_cs_key910;
    ImplTraits::TreeTypePtr::pointer nchar_cs_key910_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper912;
    ImplTraits::TreeTypePtr::pointer expression_wrapper912_last = NULL;
    OracleDML_OracleDMLKeys::treat_key_return treat_key914;
    ImplTraits::TreeTypePtr::pointer treat_key914_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper916;
    ImplTraits::TreeTypePtr::pointer expression_wrapper916_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key917;
    ImplTraits::TreeTypePtr::pointer as_key917_last = NULL;
    OracleDML_OracleDMLKeys::ref_key_return ref_key918;
    ImplTraits::TreeTypePtr::pointer ref_key918_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec919;
    ImplTraits::TreeTypePtr::pointer type_spec919_last = NULL;
    OracleDML_OracleDMLKeys::trim_key_return trim_key921;
    ImplTraits::TreeTypePtr::pointer trim_key921_last = NULL;
    OracleDML_OracleDMLKeys::leading_key_return leading_key923;
    ImplTraits::TreeTypePtr::pointer leading_key923_last = NULL;
    OracleDML_OracleDMLKeys::trailing_key_return trailing_key924;
    ImplTraits::TreeTypePtr::pointer trailing_key924_last = NULL;
    OracleDML_OracleDMLKeys::both_key_return both_key925;
    ImplTraits::TreeTypePtr::pointer both_key925_last = NULL;
    OracleDML_OracleDMLCommons::quoted_string_return quoted_string926;
    ImplTraits::TreeTypePtr::pointer quoted_string926_last = NULL;
    OracleDML_OracleDMLKeys::from_key_return from_key927;
    ImplTraits::TreeTypePtr::pointer from_key927_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper928;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper928_last = NULL;
    OracleDML_OracleDMLKeys::xmlagg_key_return xmlagg_key930;
    ImplTraits::TreeTypePtr::pointer xmlagg_key930_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper932;
    ImplTraits::TreeTypePtr::pointer expression_wrapper932_last = NULL;
    OracleDML::order_by_clause_return order_by_clause933;
    ImplTraits::TreeTypePtr::pointer order_by_clause933_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part936;
    ImplTraits::TreeTypePtr::pointer general_element_part936_last = NULL;
    OracleDML_OracleDMLKeys::xmlcolattval_key_return xmlcolattval_key937;
    ImplTraits::TreeTypePtr::pointer xmlcolattval_key937_last = NULL;
    OracleDML_OracleDMLKeys::xmlforest_key_return xmlforest_key938;
    ImplTraits::TreeTypePtr::pointer xmlforest_key938_last = NULL;
    OracleDML::xml_multiuse_expression_element_return xml_multiuse_expression_element940;
    ImplTraits::TreeTypePtr::pointer xml_multiuse_expression_element940_last = NULL;
    OracleDML::xml_multiuse_expression_element_return xml_multiuse_expression_element942;
    ImplTraits::TreeTypePtr::pointer xml_multiuse_expression_element942_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part945;
    ImplTraits::TreeTypePtr::pointer general_element_part945_last = NULL;
    OracleDML_OracleDMLKeys::xmlelement_key_return xmlelement_key946;
    ImplTraits::TreeTypePtr::pointer xmlelement_key946_last = NULL;
    OracleDML_OracleDMLKeys::entityescaping_key_return entityescaping_key948;
    ImplTraits::TreeTypePtr::pointer entityescaping_key948_last = NULL;
    OracleDML_OracleDMLKeys::noentityescaping_key_return noentityescaping_key949;
    ImplTraits::TreeTypePtr::pointer noentityescaping_key949_last = NULL;
    OracleDML_OracleDMLKeys::name_key_return name_key950;
    ImplTraits::TreeTypePtr::pointer name_key950_last = NULL;
    OracleDML_OracleDMLKeys::evalname_key_return evalname_key951;
    ImplTraits::TreeTypePtr::pointer evalname_key951_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper952;
    ImplTraits::TreeTypePtr::pointer expression_wrapper952_last = NULL;
    OracleDML::xml_attributes_clause_return xml_attributes_clause954;
    ImplTraits::TreeTypePtr::pointer xml_attributes_clause954_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper956;
    ImplTraits::TreeTypePtr::pointer expression_wrapper956_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias957;
    ImplTraits::TreeTypePtr::pointer column_alias957_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part960;
    ImplTraits::TreeTypePtr::pointer general_element_part960_last = NULL;
    OracleDML_OracleDMLKeys::xmlexists_key_return xmlexists_key961;
    ImplTraits::TreeTypePtr::pointer xmlexists_key961_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper963;
    ImplTraits::TreeTypePtr::pointer expression_wrapper963_last = NULL;
    OracleDML::xml_passing_clause_return xml_passing_clause964;
    ImplTraits::TreeTypePtr::pointer xml_passing_clause964_last = NULL;
    OracleDML_OracleDMLKeys::xmlparse_key_return xmlparse_key966;
    ImplTraits::TreeTypePtr::pointer xmlparse_key966_last = NULL;
    OracleDML_OracleDMLKeys::document_key_return document_key968;
    ImplTraits::TreeTypePtr::pointer document_key968_last = NULL;
    OracleDML_OracleDMLKeys::content_key_return content_key969;
    ImplTraits::TreeTypePtr::pointer content_key969_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper970;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper970_last = NULL;
    OracleDML_OracleDMLKeys::wellformed_key_return wellformed_key971;
    ImplTraits::TreeTypePtr::pointer wellformed_key971_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part974;
    ImplTraits::TreeTypePtr::pointer general_element_part974_last = NULL;
    OracleDML_OracleDMLKeys::xmlpi_key_return xmlpi_key975;
    ImplTraits::TreeTypePtr::pointer xmlpi_key975_last = NULL;
    OracleDML_OracleDMLKeys::name_key_return name_key977;
    ImplTraits::TreeTypePtr::pointer name_key977_last = NULL;
    OracleDML_OracleDMLCommons::id_return id978;
    ImplTraits::TreeTypePtr::pointer id978_last = NULL;
    OracleDML_OracleDMLKeys::evalname_key_return evalname_key979;
    ImplTraits::TreeTypePtr::pointer evalname_key979_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper980;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper980_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper982;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper982_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part985;
    ImplTraits::TreeTypePtr::pointer general_element_part985_last = NULL;
    OracleDML_OracleDMLKeys::xmlquery_key_return xmlquery_key986;
    ImplTraits::TreeTypePtr::pointer xmlquery_key986_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper988;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper988_last = NULL;
    OracleDML::xml_passing_clause_return xml_passing_clause989;
    ImplTraits::TreeTypePtr::pointer xml_passing_clause989_last = NULL;
    OracleDML_OracleDMLKeys::returning_key_return returning_key990;
    ImplTraits::TreeTypePtr::pointer returning_key990_last = NULL;
    OracleDML_OracleDMLKeys::content_key_return content_key991;
    ImplTraits::TreeTypePtr::pointer content_key991_last = NULL;
    OracleDML_OracleDMLKeys::null_key_return null_key992;
    ImplTraits::TreeTypePtr::pointer null_key992_last = NULL;
    OracleDML_OracleDMLKeys::on_key_return on_key993;
    ImplTraits::TreeTypePtr::pointer on_key993_last = NULL;
    OracleDML_OracleDMLKeys::empty_key_return empty_key994;
    ImplTraits::TreeTypePtr::pointer empty_key994_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part997;
    ImplTraits::TreeTypePtr::pointer general_element_part997_last = NULL;
    OracleDML_OracleDMLKeys::xmlroot_key_return xmlroot_key998;
    ImplTraits::TreeTypePtr::pointer xmlroot_key998_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1000;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1000_last = NULL;
    OracleDML::xmlroot_param_version_part_return xmlroot_param_version_part1001;
    ImplTraits::TreeTypePtr::pointer xmlroot_param_version_part1001_last = NULL;
    OracleDML::xmlroot_param_standalone_part_return xmlroot_param_standalone_part1003;
    ImplTraits::TreeTypePtr::pointer xmlroot_param_standalone_part1003_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part1006;
    ImplTraits::TreeTypePtr::pointer general_element_part1006_last = NULL;
    OracleDML_OracleDMLKeys::xmlserialize_key_return xmlserialize_key1007;
    ImplTraits::TreeTypePtr::pointer xmlserialize_key1007_last = NULL;
    OracleDML_OracleDMLKeys::document_key_return document_key1009;
    ImplTraits::TreeTypePtr::pointer document_key1009_last = NULL;
    OracleDML_OracleDMLKeys::content_key_return content_key1010;
    ImplTraits::TreeTypePtr::pointer content_key1010_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1011;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1011_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key1012;
    ImplTraits::TreeTypePtr::pointer as_key1012_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec1013;
    ImplTraits::TreeTypePtr::pointer type_spec1013_last = NULL;
    OracleDML::xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part1014;
    ImplTraits::TreeTypePtr::pointer xmlserialize_param_enconding_part1014_last = NULL;
    OracleDML::xmlserialize_param_version_part_return xmlserialize_param_version_part1015;
    ImplTraits::TreeTypePtr::pointer xmlserialize_param_version_part1015_last = NULL;
    OracleDML::xmlserialize_param_ident_part_return xmlserialize_param_ident_part1016;
    ImplTraits::TreeTypePtr::pointer xmlserialize_param_ident_part1016_last = NULL;
    OracleDML_OracleDMLKeys::hide_key_return hide_key1017;
    ImplTraits::TreeTypePtr::pointer hide_key1017_last = NULL;
    OracleDML_OracleDMLKeys::show_key_return show_key1018;
    ImplTraits::TreeTypePtr::pointer show_key1018_last = NULL;
    OracleDML_OracleDMLKeys::defaults_key_return defaults_key1019;
    ImplTraits::TreeTypePtr::pointer defaults_key1019_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part1022;
    ImplTraits::TreeTypePtr::pointer general_element_part1022_last = NULL;
    OracleDML_OracleDMLKeys::xmltable_key_return xmltable_key1023;
    ImplTraits::TreeTypePtr::pointer xmltable_key1023_last = NULL;
    OracleDML::xml_namespaces_clause_return xml_namespaces_clause1025;
    ImplTraits::TreeTypePtr::pointer xml_namespaces_clause1025_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1026;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1026_last = NULL;
    OracleDML::xml_passing_clause_return xml_passing_clause1027;
    ImplTraits::TreeTypePtr::pointer xml_passing_clause1027_last = NULL;
    OracleDML_OracleDMLKeys::columns_key_return columns_key1028;
    ImplTraits::TreeTypePtr::pointer columns_key1028_last = NULL;
    OracleDML::xml_table_column_return xml_table_column1029;
    ImplTraits::TreeTypePtr::pointer xml_table_column1029_last = NULL;
    OracleDML::xml_table_column_return xml_table_column1031;
    ImplTraits::TreeTypePtr::pointer xml_table_column1031_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part1034;
    ImplTraits::TreeTypePtr::pointer general_element_part1034_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN842_tree;
    ImplTraits::TreeTypePtr ASTERISK843_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN848_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN852_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN854_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN857_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN863_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN865_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN869_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN871_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN876_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN881_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN885_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN887_tree;
    ImplTraits::TreeTypePtr REGULAR_ID888_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN891_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN898_tree;
    ImplTraits::TreeTypePtr COMMA900_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN904_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN906_tree;
    ImplTraits::TreeTypePtr COMMA911_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN913_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN915_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN920_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN922_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN929_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN931_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN934_tree;
    ImplTraits::TreeTypePtr PERIOD935_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN939_tree;
    ImplTraits::TreeTypePtr COMMA941_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN943_tree;
    ImplTraits::TreeTypePtr PERIOD944_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN947_tree;
    ImplTraits::TreeTypePtr COMMA953_tree;
    ImplTraits::TreeTypePtr COMMA955_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN958_tree;
    ImplTraits::TreeTypePtr PERIOD959_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN962_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN965_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN967_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN972_tree;
    ImplTraits::TreeTypePtr PERIOD973_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN976_tree;
    ImplTraits::TreeTypePtr COMMA981_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN983_tree;
    ImplTraits::TreeTypePtr PERIOD984_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN987_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN995_tree;
    ImplTraits::TreeTypePtr PERIOD996_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN999_tree;
    ImplTraits::TreeTypePtr COMMA1002_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1004_tree;
    ImplTraits::TreeTypePtr PERIOD1005_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN1008_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1020_tree;
    ImplTraits::TreeTypePtr PERIOD1021_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN1024_tree;
    ImplTraits::TreeTypePtr COMMA1030_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1032_tree;
    ImplTraits::TreeTypePtr PERIOD1033_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1155:5: ( stantard_function_enabling_over ^ function_argument_analytic ( over_clause )? | stantard_function_enabling_using ^ function_argument_modeling ( using_clause )? | count_key ^ LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )? | ( cast_key ^| xmlcast_key ^) LEFT_PAREN ( ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )? | concatenation_wrapper as_key ! type_spec ) RIGHT_PAREN | chr_key ^ LEFT_PAREN concatenation_wrapper using_key ! nchar_cs_key RIGHT_PAREN | collect_key ^ LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN | stantard_function_enabling_within_or_over ^ function_argument ( within_or_over_part )+ | decompose_key ^ LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN | extract_key ^ LEFT_PAREN REGULAR_ID from_key ! concatenation_wrapper RIGHT_PAREN | ( first_value_key ^| last_value_key ^) function_argument_analytic ( respect_or_ignore_nulls )? over_clause | stantard_function_pedictions ^ LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN | translate_key ^ LEFT_PAREN expression_wrapper ( using_key ! ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN | treat_key ^ LEFT_PAREN expression_wrapper as_key ! ( ref_key )? type_spec RIGHT_PAREN | trim_key ^ LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN | xmlagg_key ^ LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )? | ( xmlcolattval_key ^| xmlforest_key ^) LEFT_PAREN xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlelement_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA ! xml_attributes_clause )? ( COMMA ! expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlexists_key ^ LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN | xmlparse_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlpi_key ^ LEFT_PAREN ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper ) ( COMMA ! concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlquery_key ^ LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key ! content_key ! ( null_key on_key ! empty_key !)? RIGHT_PAREN ( PERIOD general_element_part )? | xmlroot_key ^ LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA ! xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlserialize_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key ! type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmltable_key ^ LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )? )

            ANTLR_UINT32 alt334;

            alt334=24;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA334_1 = this->LA(2);
            		    if ( ((enablesOverClause(LT(1)->getText()))))
            		    {
            		        alt334=1;
            		    }
            		    else if ( ((enablesUsingClause(LT(1)->getText()))))
            		    {
            		        alt334=2;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "COUNT" )))
            		    {
            		        alt334=3;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLCAST")))
            		    {
            		        alt334=4;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "CHR")))
            		    {
            		        alt334=5;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "COLLECT")))
            		    {
            		        alt334=6;
            		    }
            		    else if ( ((enablesWithinOrOverClause(LT(1)->getText()))))
            		    {
            		        alt334=7;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "DECOMPOSE")))
            		    {
            		        alt334=8;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "EXTRACT")))
            		    {
            		        alt334=9;
            		    }
            		    else if ( ((((toUpper(LT(1)->getText()) == "LAST_VALUE"))||((toUpper(LT(1)->getText()) == "FIRST_VALUE")))))
            		    {
            		        alt334=10;
            		    }
            		    else if ( ((isStandardPredictionFunction(LT(1)->getText()))))
            		    {
            		        alt334=11;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "TRANSLATE")))
            		    {
            		        alt334=12;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "TREAT")))
            		    {
            		        alt334=13;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "TRIM")))
            		    {
            		        alt334=14;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLAGG")))
            		    {
            		        alt334=15;
            		    }
            		    else if ( ((((toUpper(LT(1)->getText()) == "XMLCOLATTVAL"))||((toUpper(LT(1)->getText()) == "XMLFOREST")))))
            		    {
            		        alt334=16;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLELEMENT")))
            		    {
            		        alt334=17;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLEXISTS")))
            		    {
            		        alt334=18;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLPARSE")))
            		    {
            		        alt334=19;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLPI")))
            		    {
            		        alt334=20;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLQUERY")))
            		    {
            		        alt334=21;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLROOT")))
            		    {
            		        alt334=22;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLSERIALIZE")))
            		    {
            		        alt334=23;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLTABLE")))
            		    {
            		        alt334=24;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 334 );
            		        ex->set_state( 1 );


            		        goto rulestandard_functionEx;

            		    }
            		}
            	}
                break;
            case PLSQL_NON_RESERVED_CAST:
            	{
            		alt334=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 334 );
                ex->set_state( 0 );


                goto rulestandard_functionEx;

            }

            switch (alt334)
            {
        	case 1:
        	    // OracleDML.g:1155:10: stantard_function_enabling_over ^ function_argument_analytic ( over_clause )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_stantard_function_enabling_over_in_standard_function11971);
        	        stantard_function_enabling_over835=stantard_function_enabling_over();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(stantard_function_enabling_over835.tree, root_0);

        	        this->followPush(FOLLOW_function_argument_analytic_in_standard_function11974);
        	        function_argument_analytic836=function_argument_analytic();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, function_argument_analytic836.tree);


        	        // OracleDML.g:1155:70: ( over_clause )?
        	        {
        	            ANTLR_UINT32 alt274=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case LEFT_PAREN:
        	                		    	{
        	                		    		{
        	                		    		    ANTLR_UINT32 LA274_3 = this->LA(3);
        	                		    		    if ( (LA274_3 == REGULAR_ID))
        	                		    		    {
        	                		    		        {
        	                		    		            ANTLR_UINT32 LA274_6 = this->LA(4);
        	                		    		            if ( (LA274_6 == SQL92_RESERVED_BY) && ((toUpper(LT(1)->getText()) == "OVER")))
        	                		    		            {
        	                		    		                alt274=1;
        	                		    		            }
        	                		    		        }
        	                		    		    }
        	                		    		    else if ( (LA274_3 == RIGHT_PAREN || LA274_3 == SQL92_RESERVED_ORDER) && ((toUpper(LT(1)->getText()) == "OVER")))
        	                		    		    {
        	                		    		        alt274=1;
        	                		    		    }
        	                		    		}
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	            }

        	            switch (alt274)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1155:70: over_clause
        	        	    {
        	        	        this->followPush(FOLLOW_over_clause_in_standard_function11976);
        	        	        over_clause837=over_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, over_clause837.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1156:10: stantard_function_enabling_using ^ function_argument_modeling ( using_clause )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_stantard_function_enabling_using_in_standard_function11988);
        	        stantard_function_enabling_using838=stantard_function_enabling_using();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(stantard_function_enabling_using838.tree, root_0);

        	        this->followPush(FOLLOW_function_argument_modeling_in_standard_function11991);
        	        function_argument_modeling839=function_argument_modeling();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, function_argument_modeling839.tree);


        	        // OracleDML.g:1156:71: ( using_clause )?
        	        {
        	            ANTLR_UINT32 alt275=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PLSQL_NON_RESERVED_USING:
        	                	{
        	                		alt275=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt275)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1156:71: using_clause
        	        	    {
        	        	        this->followPush(FOLLOW_using_clause_in_standard_function11993);
        	        	        using_clause840=using_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, using_clause840.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:1157:10: count_key ^ LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_count_key_in_standard_function12005);
        	        count_key841=count_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(count_key841.tree, root_0);

        	        LEFT_PAREN842 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12020);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN842_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN842));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN842_tree);
        	        }


        	        // OracleDML.g:1159:17: ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper )
        	        {
        	            ANTLR_UINT32 alt277=2;
        	            switch ( this->LA(1) )
        	            {
        	            case ASTERISK:
        	            	{
        	            		alt277=1;
        	            	}
        	                break;
        	            case APPROXIMATE_NUM_LIT:
        	            case BINDVAR:
        	            case CHAR_STRING:
        	            case CHAR_STRING_PERL:
        	            case COLON:
        	            case DELIMITED_ID:
        	            case EXACT_NUM_LIT:
        	            case INTRODUCER:
        	            case LEFT_PAREN:
        	            case MINUS_SIGN:
        	            case NATIONAL_CHAR_STRING_LIT:
        	            case PLSQL_NON_RESERVED_CAST:
        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	            case PLUS_SIGN:
        	            case REGULAR_ID:
        	            case SQL92_RESERVED_ALL:
        	            case SQL92_RESERVED_ANY:
        	            case SQL92_RESERVED_CASE:
        	            case SQL92_RESERVED_DATE:
        	            case SQL92_RESERVED_DEFAULT:
        	            case SQL92_RESERVED_DISTINCT:
        	            case SQL92_RESERVED_EXISTS:
        	            case SQL92_RESERVED_FALSE:
        	            case SQL92_RESERVED_NULL:
        	            case SQL92_RESERVED_PRIOR:
        	            case SQL92_RESERVED_TRUE:
        	            case SQL92_RESERVED_UNIQUE:
        	            case UNSIGNED_INTEGER:
        	            	{
        	            		alt277=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 277 );
        	                ex->set_state( 0 );


        	                goto rulestandard_functionEx;

        	            }

        	            switch (alt277)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1159:19: ASTERISK
        	        	    {
        	        	        ASTERISK843 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_standard_function12040);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        ASTERISK843_tree = std::move(get_psrstate()->get_treeAdaptor()->create(ASTERISK843));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, ASTERISK843_tree);
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1159:30: ( distinct_key | unique_key | all_key )? concatenation_wrapper
        	        	    {
        	        	        // OracleDML.g:1159:30: ( distinct_key | unique_key | all_key )?
        	        	        {
        	        	            ANTLR_UINT32 alt276=4;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case SQL92_RESERVED_DISTINCT:
        	        	                	{
        	        	                		alt276=1;
        	        	                	}
        	        	                    break;
        	        	                case SQL92_RESERVED_UNIQUE:
        	        	                	{
        	        	                		alt276=2;
        	        	                	}
        	        	                    break;
        	        	                case SQL92_RESERVED_ALL:
        	        	                	{
        	        	                		alt276=3;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt276)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1159:31: distinct_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_distinct_key_in_standard_function12045);
        	        	        	        distinct_key844=distinct_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, distinct_key844.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1159:44: unique_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_unique_key_in_standard_function12047);
        	        	        	        unique_key845=unique_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unique_key845.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 3:
        	        	        	    // OracleDML.g:1159:55: all_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_all_key_in_standard_function12049);
        	        	        	        all_key846=all_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, all_key846.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12053);
        	        	        concatenation_wrapper847=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper847.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN848 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12069);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN848_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN848));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN848_tree);
        	        }


        	        // OracleDML.g:1160:25: ( over_clause )?
        	        {
        	            ANTLR_UINT32 alt278=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case LEFT_PAREN:
        	                		    	{
        	                		    		{
        	                		    		    ANTLR_UINT32 LA278_3 = this->LA(3);
        	                		    		    if ( (LA278_3 == REGULAR_ID))
        	                		    		    {
        	                		    		        {
        	                		    		            ANTLR_UINT32 LA278_6 = this->LA(4);
        	                		    		            if ( (LA278_6 == SQL92_RESERVED_BY) && ((toUpper(LT(1)->getText()) == "OVER")))
        	                		    		            {
        	                		    		                alt278=1;
        	                		    		            }
        	                		    		        }
        	                		    		    }
        	                		    		    else if ( (LA278_3 == RIGHT_PAREN || LA278_3 == SQL92_RESERVED_ORDER) && ((toUpper(LT(1)->getText()) == "OVER")))
        	                		    		    {
        	                		    		        alt278=1;
        	                		    		    }
        	                		    		}
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	            }

        	            switch (alt278)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1160:25: over_clause
        	        	    {
        	        	        this->followPush(FOLLOW_over_clause_in_standard_function12071);
        	        	        over_clause849=over_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, over_clause849.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:1161:10: ( cast_key ^| xmlcast_key ^) LEFT_PAREN ( ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )? | concatenation_wrapper as_key ! type_spec ) RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:1161:10: ( cast_key ^| xmlcast_key ^)
        	        {
        	            ANTLR_UINT32 alt279=2;
        	            {
        	                ANTLR_UINT32 LA279_0 = this->LA(1);
        	                if ( (LA279_0 == PLSQL_NON_RESERVED_CAST))
        	                {
        	                    alt279=1;
        	                }
        	                else if ( (LA279_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "XMLCAST")))
        	                {
        	                    alt279=2;
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 279 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt279)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1161:11: cast_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_cast_key_in_standard_function12084);
        	        	        cast_key850=cast_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(cast_key850.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1161:21: xmlcast_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_xmlcast_key_in_standard_function12087);
        	        	        xmlcast_key851=xmlcast_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlcast_key851.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        LEFT_PAREN852 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12104);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN852_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN852));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN852_tree);
        	        }


        	        // OracleDML.g:1163:13: ( ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )? | concatenation_wrapper as_key ! type_spec )
        	        {
        	            ANTLR_UINT32 alt282=2;
        	            {
        	                ANTLR_UINT32 LA282_0 = this->LA(1);
        	                if ( (LA282_0 == PLSQL_NON_RESERVED_MULTISET) && (this->msynpred( antlr3::ClassForwarder<synpred52_OracleDML>() )))
        	                {
        	                    alt282=1;
        	                }
        	                else if ( (LA282_0 == APPROXIMATE_NUM_LIT || LA282_0 == BINDVAR || ((LA282_0 >= CHAR_STRING) && (LA282_0 <= CHAR_STRING_PERL)) || LA282_0 == COLON || LA282_0 == DELIMITED_ID || LA282_0 == EXACT_NUM_LIT || LA282_0 == INTRODUCER || LA282_0 == LEFT_PAREN || LA282_0 == MINUS_SIGN || LA282_0 == NATIONAL_CHAR_STRING_LIT || ((LA282_0 >= PLSQL_NON_RESERVED_CAST) && (LA282_0 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA282_0 == PLUS_SIGN || LA282_0 == REGULAR_ID || LA282_0 == SQL92_RESERVED_ALL || LA282_0 == SQL92_RESERVED_ANY || LA282_0 == SQL92_RESERVED_CASE || LA282_0 == SQL92_RESERVED_DATE || LA282_0 == SQL92_RESERVED_DEFAULT || LA282_0 == SQL92_RESERVED_DISTINCT || ((LA282_0 >= SQL92_RESERVED_EXISTS) && (LA282_0 <= SQL92_RESERVED_FALSE)) || LA282_0 == SQL92_RESERVED_NULL || LA282_0 == SQL92_RESERVED_PRIOR || LA282_0 == SQL92_RESERVED_TRUE || LA282_0 == UNSIGNED_INTEGER))
        	                {
        	                    alt282=2;
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 282 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt282)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1163:15: ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )?
        	        	    {
        	        	        // OracleDML.g:1163:67: ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN )
        	        	        // OracleDML.g:1163:68: multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN
        	        	        {
        	        	            this->followPush(FOLLOW_multiset_key_in_standard_function12136);
        	        	            multiset_key853=multiset_key();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }


        	        	            LEFT_PAREN854 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12139);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) {
        	        	            LEFT_PAREN854_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN854));
        	        	            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN854_tree);
        	        	            }


        	        	            this->followPush(FOLLOW_subquery_in_standard_function12141);
        	        	            subquery855=subquery();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery855.tree);


        	        	            // OracleDML.g:1163:102: ( order_by_clause )?
        	        	            {
        	        	                ANTLR_UINT32 alt280=2;
        	        	                switch ( this->LA(1) )
        	        	                {
        	        	                    case SQL92_RESERVED_ORDER:
        	        	                    	{
        	        	                    		alt280=1;
        	        	                    	}
        	        	                        break;
        	        	                }

        	        	                switch (alt280)
        	        	                {
        	        	            	case 1:
        	        	            	    // OracleDML.g:1163:102: order_by_clause
        	        	            	    {
        	        	            	        this->followPush(FOLLOW_order_by_clause_in_standard_function12143);
        	        	            	        order_by_clause856=order_by_clause();

        	        	            	        this->followPop();
        	        	            	        if  (this->hasException())
        	        	            	        {
        	        	            	            goto rulestandard_functionEx;
        	        	            	        }
        	        	            	        if (this->hasFailed())
        	        	            	        {
        	        	            	            return retval;
        	        	            	        }

        	        	            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, order_by_clause856.tree);


        	        	            	    }
        	        	            	    break;

        	        	                }
        	        	            }

        	        	            RIGHT_PAREN857 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12146);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) {
        	        	            RIGHT_PAREN857_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN857));
        	        	            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN857_tree);
        	        	            }


        	        	        }


        	        	        // OracleDML.g:1164:15: ( as_key ! type_spec )?
        	        	        {
        	        	            ANTLR_UINT32 alt281=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case SQL92_RESERVED_AS:
        	        	                	{
        	        	                		alt281=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt281)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1164:16: as_key ! type_spec
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_as_key_in_standard_function12164);
        	        	        	        as_key858=as_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }


        	        	        	        this->followPush(FOLLOW_type_spec_in_standard_function12167);
        	        	        	        type_spec859=type_spec();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, type_spec859.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1165:15: concatenation_wrapper as_key ! type_spec
        	        	    {
        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12185);
        	        	        concatenation_wrapper860=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper860.tree);


        	        	        this->followPush(FOLLOW_as_key_in_standard_function12187);
        	        	        as_key861=as_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_type_spec_in_standard_function12190);
        	        	        type_spec862=type_spec();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, type_spec862.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN863 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12218);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN863_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN863));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN863_tree);
        	        }


        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:1168:10: chr_key ^ LEFT_PAREN concatenation_wrapper using_key ! nchar_cs_key RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_chr_key_in_standard_function12229);
        	        chr_key864=chr_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(chr_key864.tree, root_0);

        	        LEFT_PAREN865 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12244);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN865_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN865));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN865_tree);
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12263);
        	        concatenation_wrapper866=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper866.tree);


        	        this->followPush(FOLLOW_using_key_in_standard_function12265);
        	        using_key867=using_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_nchar_cs_key_in_standard_function12268);
        	        nchar_cs_key868=nchar_cs_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nchar_cs_key868.tree);


        	        RIGHT_PAREN869 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12283);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN869_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN869));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN869_tree);
        	        }


        	    }
        	    break;
        	case 6:
        	    // OracleDML.g:1172:10: collect_key ^ LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_collect_key_in_standard_function12294);
        	        collect_key870=collect_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(collect_key870.tree, root_0);

        	        LEFT_PAREN871 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12309);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN871_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN871));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN871_tree);
        	        }


        	        // OracleDML.g:1174:17: ( distinct_key | unique_key )?
        	        {
        	            ANTLR_UINT32 alt283=3;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_DISTINCT:
        	                	{
        	                		alt283=1;
        	                	}
        	                    break;
        	                case SQL92_RESERVED_UNIQUE:
        	                	{
        	                		alt283=2;
        	                	}
        	                    break;
        	            }

        	            switch (alt283)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1174:18: distinct_key
        	        	    {
        	        	        this->followPush(FOLLOW_distinct_key_in_standard_function12329);
        	        	        distinct_key872=distinct_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, distinct_key872.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1174:31: unique_key
        	        	    {
        	        	        this->followPush(FOLLOW_unique_key_in_standard_function12331);
        	        	        unique_key873=unique_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unique_key873.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12335);
        	        concatenation_wrapper874=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper874.tree);


        	        // OracleDML.g:1174:66: ( collect_order_by_part )?
        	        {
        	            ANTLR_UINT32 alt284=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_ORDER:
        	                	{
        	                		alt284=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt284)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1174:66: collect_order_by_part
        	        	    {
        	        	        this->followPush(FOLLOW_collect_order_by_part_in_standard_function12337);
        	        	        collect_order_by_part875=collect_order_by_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, collect_order_by_part875.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN876 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12352);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN876_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN876));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN876_tree);
        	        }


        	    }
        	    break;
        	case 7:
        	    // OracleDML.g:1176:10: stantard_function_enabling_within_or_over ^ function_argument ( within_or_over_part )+
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_stantard_function_enabling_within_or_over_in_standard_function12363);
        	        stantard_function_enabling_within_or_over877=stantard_function_enabling_within_or_over();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(stantard_function_enabling_within_or_over877.tree, root_0);

        	        this->followPush(FOLLOW_function_argument_in_standard_function12379);
        	        function_argument878=function_argument();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, function_argument878.tree);


        	        // OracleDML.g:1177:31: ( within_or_over_part )+
        	        {
        	            int cnt285=0;

        	            for (;;)
        	            {
        	                ANTLR_UINT32 alt285=2;
        	        	switch ( this->LA(1) )
        	        	{
        	        	case REGULAR_ID:
        	        		{
        	        			switch ( this->LA(2) )
        	        			{
        	        			case LEFT_PAREN:
        	        				{
        	        					{
        	        					   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        					    */
        	        					    ANTLR_UINT32 LA285_3 = this->LA(3);
        	        					    if ( (LA285_3 == REGULAR_ID))
        	        					    {
        	        					        {
        	        					           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        					            */
        	        					            ANTLR_UINT32 LA285_8 = this->LA(4);
        	        					            if ( (LA285_8 == SQL92_RESERVED_BY) && ((toUpper(LT(1)->getText()) == "OVER")))
        	        					            {
        	        					                alt285=1;
        	        					            }

        	        					        }
        	        					    }
        	        					    else if ( (LA285_3 == RIGHT_PAREN || LA285_3 == SQL92_RESERVED_ORDER) && ((toUpper(LT(1)->getText()) == "OVER")))
        	        					    {
        	        					        alt285=1;
        	        					    }

        	        					}
        	        				}
        	        			    break;
        	        			case SQL92_RESERVED_GROUP:
        	        				{
        	        					{
        	        					   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        					    */
        	        					    ANTLR_UINT32 LA285_4 = this->LA(3);
        	        					    if ( (LA285_4 == LEFT_PAREN) && ((toUpper(LT(1)->getText()) == "WITHIN")))
        	        					    {
        	        					        alt285=1;
        	        					    }

        	        					}
        	        				}
        	        			    break;

        	        			}

        	        		}
        	        	    break;

        	        	}

        	        	switch (alt285)
        	        	{
        	        	    case 1:
        	        	        // OracleDML.g:1177:31: within_or_over_part
        	        	        {
        	        	            this->followPush(FOLLOW_within_or_over_part_in_standard_function12381);
        	        	            within_or_over_part879=within_or_over_part();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, within_or_over_part879.tree);


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt285 >= 1 )
        	        		{
        	        		    goto loop285;
        	        		}
        	        		if (this->get_backtracking()>0)
        	        		{
        	        		    this->set_failedflag( true );
        	        		    return retval;
        	        		}

        	        		/* mismatchedSetEx()
        	        		 */
        	        		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        		goto rulestandard_functionEx;
        	        	}
        	        	cnt285++;
        	            }
        	            loop285: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;
        	case 8:
        	    // OracleDML.g:1178:10: decompose_key ^ LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_decompose_key_in_standard_function12393);
        	        decompose_key880=decompose_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(decompose_key880.tree, root_0);

        	        LEFT_PAREN881 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12408);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN881_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN881));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN881_tree);
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12427);
        	        concatenation_wrapper882=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper882.tree);


        	        // OracleDML.g:1180:39: ( canonical_key | compatibility_key )?
        	        {
        	            ANTLR_UINT32 alt286=3;
        	            {
        	                ANTLR_UINT32 LA286_0 = this->LA(1);
        	                if ( (LA286_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "COMPATIBILITY"))||((toUpper(LT(1)->getText()) == "CANONICAL")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA286_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "CANONICAL")))
        	                        {
        	                            alt286=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "COMPATIBILITY")))
        	                        {
        	                            alt286=2;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt286)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1180:40: canonical_key
        	        	    {
        	        	        this->followPush(FOLLOW_canonical_key_in_standard_function12430);
        	        	        canonical_key883=canonical_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, canonical_key883.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1180:54: compatibility_key
        	        	    {
        	        	        this->followPush(FOLLOW_compatibility_key_in_standard_function12432);
        	        	        compatibility_key884=compatibility_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, compatibility_key884.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN885 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12449);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN885_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN885));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN885_tree);
        	        }


        	    }
        	    break;
        	case 9:
        	    // OracleDML.g:1182:10: extract_key ^ LEFT_PAREN REGULAR_ID from_key ! concatenation_wrapper RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_extract_key_in_standard_function12460);
        	        extract_key886=extract_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(extract_key886.tree, root_0);

        	        LEFT_PAREN887 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12475);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN887_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN887));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN887_tree);
        	        }


        	        REGULAR_ID888 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_standard_function12493);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        REGULAR_ID888_tree = std::move(get_psrstate()->get_treeAdaptor()->create(REGULAR_ID888));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, REGULAR_ID888_tree);
        	        }


        	        this->followPush(FOLLOW_from_key_in_standard_function12495);
        	        from_key889=from_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12498);
        	        concatenation_wrapper890=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper890.tree);


        	        RIGHT_PAREN891 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12513);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN891_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN891));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN891_tree);
        	        }


        	    }
        	    break;
        	case 10:
        	    // OracleDML.g:1186:10: ( first_value_key ^| last_value_key ^) function_argument_analytic ( respect_or_ignore_nulls )? over_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:1186:10: ( first_value_key ^| last_value_key ^)
        	        {
        	            ANTLR_UINT32 alt287=2;
        	            {
        	                ANTLR_UINT32 LA287_0 = this->LA(1);
        	                if ( (LA287_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "LAST_VALUE"))||((toUpper(LT(1)->getText()) == "FIRST_VALUE")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA287_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "FIRST_VALUE")))
        	                        {
        	                            alt287=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "LAST_VALUE")))
        	                        {
        	                            alt287=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 287 );
        	                            ex->set_state( 1 );


        	                            goto rulestandard_functionEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 287 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt287)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1186:11: first_value_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_first_value_key_in_standard_function12525);
        	        	        first_value_key892=first_value_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(first_value_key892.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1186:28: last_value_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_last_value_key_in_standard_function12528);
        	        	        last_value_key893=last_value_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(last_value_key893.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_function_argument_analytic_in_standard_function12532);
        	        function_argument_analytic894=function_argument_analytic();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, function_argument_analytic894.tree);


        	        // OracleDML.g:1187:14: ( respect_or_ignore_nulls )?
        	        {
        	            ANTLR_UINT32 alt288=2;
        	            {
        	                ANTLR_UINT32 LA288_0 = this->LA(1);
        	                if ( (LA288_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "OVER"))||((toUpper(LT(1)->getText()) == "IGNORE"))||((toUpper(LT(1)->getText()) == "RESPECT")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA288_1 = this->LA(2);
        	                        if ( (LA288_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "IGNORE"))||((toUpper(LT(1)->getText()) == "RESPECT")))))
        	                        {
        	                            alt288=1;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt288)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1187:14: respect_or_ignore_nulls
        	        	    {
        	        	        this->followPush(FOLLOW_respect_or_ignore_nulls_in_standard_function12547);
        	        	        respect_or_ignore_nulls895=respect_or_ignore_nulls();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, respect_or_ignore_nulls895.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_over_clause_in_standard_function12550);
        	        over_clause896=over_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, over_clause896.tree);


        	    }
        	    break;
        	case 11:
        	    // OracleDML.g:1188:10: stantard_function_pedictions ^ LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_stantard_function_pedictions_in_standard_function12561);
        	        stantard_function_pedictions897=stantard_function_pedictions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(stantard_function_pedictions897.tree, root_0);

        	        LEFT_PAREN898 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12576);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN898_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN898));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN898_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12594);
        	        expression_wrapper899=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper899.tree);


        	        // OracleDML.g:1190:36: ( COMMA expression_wrapper )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt289=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt289=1;
        	            	}
        	                break;

        	            }

        	            switch (alt289)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1190:37: COMMA expression_wrapper
        	        	    {
        	        	        COMMA900 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function12597);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        COMMA900_tree = std::move(get_psrstate()->get_treeAdaptor()->create(COMMA900));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, COMMA900_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12599);
        	        	        expression_wrapper901=expression_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper901.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop289;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop289: ; /* Jump out to here if this rule does not match */


        	        // OracleDML.g:1190:64: ( cost_matrix_clause )?
        	        {
        	            ANTLR_UINT32 alt290=2;
        	            {
        	                ANTLR_UINT32 LA290_0 = this->LA(1);
        	                if ( (LA290_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "COST")))
        	                {
        	                    alt290=1;
        	                }
        	            }
        	            switch (alt290)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1190:64: cost_matrix_clause
        	        	    {
        	        	        this->followPush(FOLLOW_cost_matrix_clause_in_standard_function12603);
        	        	        cost_matrix_clause902=cost_matrix_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cost_matrix_clause902.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1190:84: ( using_clause )?
        	        {
        	            ANTLR_UINT32 alt291=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PLSQL_NON_RESERVED_USING:
        	                	{
        	                		alt291=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt291)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1190:84: using_clause
        	        	    {
        	        	        this->followPush(FOLLOW_using_clause_in_standard_function12606);
        	        	        using_clause903=using_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, using_clause903.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN904 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12622);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN904_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN904));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN904_tree);
        	        }


        	    }
        	    break;
        	case 12:
        	    // OracleDML.g:1192:10: translate_key ^ LEFT_PAREN expression_wrapper ( using_key ! ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_translate_key_in_standard_function12633);
        	        translate_key905=translate_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(translate_key905.tree, root_0);

        	        LEFT_PAREN906 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12648);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN906_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN906));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN906_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12667);
        	        expression_wrapper907=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper907.tree);


        	        // OracleDML.g:1194:36: ( using_key ! ( char_cs_key | nchar_cs_key ) )?
        	        {
        	            ANTLR_UINT32 alt293=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PLSQL_NON_RESERVED_USING:
        	                	{
        	                		alt293=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt293)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1194:37: using_key ! ( char_cs_key | nchar_cs_key )
        	        	    {
        	        	        this->followPush(FOLLOW_using_key_in_standard_function12670);
        	        	        using_key908=using_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        // OracleDML.g:1194:48: ( char_cs_key | nchar_cs_key )
        	        	        {
        	        	            ANTLR_UINT32 alt292=2;
        	        	            {
        	        	                ANTLR_UINT32 LA292_0 = this->LA(1);
        	        	                if ( (LA292_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "NCHAR_CS"))||((toUpper(LT(1)->getText()) == "CHAR_CS")))))
        	        	                {
        	        	                    {
        	        	                        ANTLR_UINT32 LA292_1 = this->LA(2);
        	        	                        if ( ((toUpper(LT(1)->getText()) == "CHAR_CS")))
        	        	                        {
        	        	                            alt292=1;
        	        	                        }
        	        	                        else if ( ((toUpper(LT(1)->getText()) == "NCHAR_CS")))
        	        	                        {
        	        	                            alt292=2;
        	        	                        }
        	        	                        else
        	        	                        {
        	        	                            if (this->get_backtracking()>0)
        	        	                            {
        	        	                                this->set_failedflag( true );
        	        	                                return retval;
        	        	                            }


        	        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                            ex->set_decisionNum( 292 );
        	        	                            ex->set_state( 1 );


        	        	                            goto rulestandard_functionEx;

        	        	                        }
        	        	                    }
        	        	                }
        	        	                else
        	        	                {
        	        	                    if (this->get_backtracking()>0)
        	        	                    {
        	        	                        this->set_failedflag( true );
        	        	                        return retval;
        	        	                    }


        	        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                    ex->set_decisionNum( 292 );
        	        	                    ex->set_state( 0 );


        	        	                    goto rulestandard_functionEx;

        	        	                }
        	        	            }
        	        	            switch (alt292)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1194:49: char_cs_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_char_cs_key_in_standard_function12674);
        	        	        	        char_cs_key909=char_cs_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, char_cs_key909.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1194:61: nchar_cs_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_nchar_cs_key_in_standard_function12676);
        	        	        	        nchar_cs_key910=nchar_cs_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nchar_cs_key910.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1195:21: ( COMMA expression_wrapper )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt294=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt294=1;
        	            	}
        	                break;

        	            }

        	            switch (alt294)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1195:22: COMMA expression_wrapper
        	        	    {
        	        	        COMMA911 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function12703);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        COMMA911_tree = std::move(get_psrstate()->get_treeAdaptor()->create(COMMA911));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, COMMA911_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12705);
        	        	        expression_wrapper912=expression_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper912.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop294;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop294: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN913 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12722);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN913_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN913));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN913_tree);
        	        }


        	    }
        	    break;
        	case 13:
        	    // OracleDML.g:1197:10: treat_key ^ LEFT_PAREN expression_wrapper as_key ! ( ref_key )? type_spec RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_treat_key_in_standard_function12733);
        	        treat_key914=treat_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(treat_key914.tree, root_0);

        	        LEFT_PAREN915 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12748);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN915_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN915));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN915_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12766);
        	        expression_wrapper916=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper916.tree);


        	        this->followPush(FOLLOW_as_key_in_standard_function12768);
        	        as_key917=as_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        // OracleDML.g:1199:44: ( ref_key )?
        	        {
        	            ANTLR_UINT32 alt295=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA295_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "REF")))
        	                		    {
        	                		        alt295=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt295)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1199:44: ref_key
        	        	    {
        	        	        this->followPush(FOLLOW_ref_key_in_standard_function12771);
        	        	        ref_key918=ref_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, ref_key918.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_type_spec_in_standard_function12774);
        	        type_spec919=type_spec();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, type_spec919.tree);


        	        RIGHT_PAREN920 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12789);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN920_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN920));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN920_tree);
        	        }


        	    }
        	    break;
        	case 14:
        	    // OracleDML.g:1201:10: trim_key ^ LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_trim_key_in_standard_function12800);
        	        trim_key921=trim_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(trim_key921.tree, root_0);

        	        LEFT_PAREN922 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12815);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN922_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN922));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN922_tree);
        	        }


        	        // OracleDML.g:1203:17: ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )?
        	        {
        	            ANTLR_UINT32 alt298=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case CHAR_STRING:
        	                		    case CHAR_STRING_PERL:
        	                		    case NATIONAL_CHAR_STRING_LIT:
        	                		    	{
        	                		    		switch ( this->LA(3) )
        	                		    		{
        	                		    		    case SQL92_RESERVED_FROM:
        	                		    		    	{
        	                		    		    		alt298=1;
        	                		    		    	}
        	                		    		        break;
        	                		    		}

        	                		    	}
        	                		        break;
        	                		    case SQL92_RESERVED_FROM:
        	                		    	{
        	                		    		alt298=1;
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	                case CHAR_STRING:
        	                case CHAR_STRING_PERL:
        	                case NATIONAL_CHAR_STRING_LIT:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case SQL92_RESERVED_FROM:
        	                		    	{
        	                		    		alt298=1;
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	                case SQL92_RESERVED_FROM:
        	                	{
        	                		alt298=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt298)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1203:18: ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key
        	        	    {
        	        	        // OracleDML.g:1203:18: ( leading_key | trailing_key | both_key )?
        	        	        {
        	        	            ANTLR_UINT32 alt296=4;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case REGULAR_ID:
        	        	                	{
        	        	                		{
        	        	                		    ANTLR_UINT32 LA296_1 = this->LA(2);
        	        	                		    if ( ((toUpper(LT(1)->getText()) == "LEADING")))
        	        	                		    {
        	        	                		        alt296=1;
        	        	                		    }
        	        	                		    else if ( ((toUpper(LT(1)->getText()) == "TRAILING")))
        	        	                		    {
        	        	                		        alt296=2;
        	        	                		    }
        	        	                		    else if ( ((toUpper(LT(1)->getText()) == "BOTH")))
        	        	                		    {
        	        	                		        alt296=3;
        	        	                		    }
        	        	                		}
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt296)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1203:19: leading_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_leading_key_in_standard_function12835);
        	        	        	        leading_key923=leading_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, leading_key923.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1203:31: trailing_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_trailing_key_in_standard_function12837);
        	        	        	        trailing_key924=trailing_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, trailing_key924.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 3:
        	        	        	    // OracleDML.g:1203:44: both_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_both_key_in_standard_function12839);
        	        	        	        both_key925=both_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, both_key925.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        // OracleDML.g:1203:55: ( quoted_string )?
        	        	        {
        	        	            ANTLR_UINT32 alt297=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case CHAR_STRING:
        	        	                case CHAR_STRING_PERL:
        	        	                case NATIONAL_CHAR_STRING_LIT:
        	        	                	{
        	        	                		alt297=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt297)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1203:55: quoted_string
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_quoted_string_in_standard_function12843);
        	        	        	        quoted_string926=quoted_string();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, quoted_string926.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        this->followPush(FOLLOW_from_key_in_standard_function12846);
        	        	        from_key927=from_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, from_key927.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12866);
        	        concatenation_wrapper928=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper928.tree);


        	        RIGHT_PAREN929 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12880);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN929_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN929));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN929_tree);
        	        }


        	    }
        	    break;
        	case 15:
        	    // OracleDML.g:1206:10: xmlagg_key ^ LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlagg_key_in_standard_function12891);
        	        xmlagg_key930=xmlagg_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlagg_key930.tree, root_0);

        	        LEFT_PAREN931 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12906);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN931_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN931));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN931_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12925);
        	        expression_wrapper932=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper932.tree);


        	        // OracleDML.g:1208:36: ( order_by_clause )?
        	        {
        	            ANTLR_UINT32 alt299=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_ORDER:
        	                	{
        	                		alt299=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt299)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1208:36: order_by_clause
        	        	    {
        	        	        this->followPush(FOLLOW_order_by_clause_in_standard_function12927);
        	        	        order_by_clause933=order_by_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, order_by_clause933.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN934 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12943);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN934_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN934));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN934_tree);
        	        }


        	        // OracleDML.g:1210:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt300=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt300=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt300)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1210:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD935 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function12958);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD935_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD935));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD935_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function12960);
        	        	        general_element_part936=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part936.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 16:
        	    // OracleDML.g:1211:10: ( xmlcolattval_key ^| xmlforest_key ^) LEFT_PAREN xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:1211:10: ( xmlcolattval_key ^| xmlforest_key ^)
        	        {
        	            ANTLR_UINT32 alt301=2;
        	            {
        	                ANTLR_UINT32 LA301_0 = this->LA(1);
        	                if ( (LA301_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "XMLCOLATTVAL"))||((toUpper(LT(1)->getText()) == "XMLFOREST")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA301_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "XMLCOLATTVAL")))
        	                        {
        	                            alt301=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "XMLFOREST")))
        	                        {
        	                            alt301=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 301 );
        	                            ex->set_state( 1 );


        	                            goto rulestandard_functionEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 301 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt301)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1211:11: xmlcolattval_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_xmlcolattval_key_in_standard_function12974);
        	        	        xmlcolattval_key937=xmlcolattval_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlcolattval_key937.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1211:29: xmlforest_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_xmlforest_key_in_standard_function12977);
        	        	        xmlforest_key938=xmlforest_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlforest_key938.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        LEFT_PAREN939 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12994);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN939_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN939));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN939_tree);
        	        }


        	        this->followPush(FOLLOW_xml_multiuse_expression_element_in_standard_function13012);
        	        xml_multiuse_expression_element940=xml_multiuse_expression_element();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_multiuse_expression_element940.tree);


        	        // OracleDML.g:1213:49: ( COMMA ! xml_multiuse_expression_element )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt302=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt302=1;
        	            	}
        	                break;

        	            }

        	            switch (alt302)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1213:50: COMMA ! xml_multiuse_expression_element
        	        	    {
        	        	        COMMA941 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13015);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_xml_multiuse_expression_element_in_standard_function13018);
        	        	        xml_multiuse_expression_element942=xml_multiuse_expression_element();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_multiuse_expression_element942.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop302;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop302: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN943 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13034);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN943_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN943));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN943_tree);
        	        }


        	        // OracleDML.g:1215:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt303=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt303=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt303)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1215:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD944 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13049);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD944_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD944));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD944_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13051);
        	        	        general_element_part945=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part945.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 17:
        	    // OracleDML.g:1216:10: xmlelement_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA ! xml_attributes_clause )? ( COMMA ! expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlelement_key_in_standard_function13064);
        	        xmlelement_key946=xmlelement_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlelement_key946.tree, root_0);

        	        LEFT_PAREN947 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13079);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN947_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN947));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN947_tree);
        	        }


        	        // OracleDML.g:1218:17: ( entityescaping_key | noentityescaping_key )?
        	        {
        	            ANTLR_UINT32 alt304=3;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA304_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "ENTITYESCAPING")))
        	                		    {
        	                		        alt304=1;
        	                		    }
        	                		    else if ( ((toUpper(LT(1)->getText()) == "NOENTITYESCAPING")))
        	                		    {
        	                		        alt304=2;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt304)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1218:18: entityescaping_key
        	        	    {
        	        	        this->followPush(FOLLOW_entityescaping_key_in_standard_function13098);
        	        	        entityescaping_key948=entityescaping_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, entityescaping_key948.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1218:37: noentityescaping_key
        	        	    {
        	        	        this->followPush(FOLLOW_noentityescaping_key_in_standard_function13100);
        	        	        noentityescaping_key949=noentityescaping_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, noentityescaping_key949.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1219:17: ( name_key | evalname_key )?
        	        {
        	            ANTLR_UINT32 alt305=3;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA305_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "NAME")))
        	                		    {
        	                		        alt305=1;
        	                		    }
        	                		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME")))
        	                		    {
        	                		        alt305=2;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt305)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1219:18: name_key
        	        	    {
        	        	        this->followPush(FOLLOW_name_key_in_standard_function13121);
        	        	        name_key950=name_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, name_key950.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1219:27: evalname_key
        	        	    {
        	        	        this->followPush(FOLLOW_evalname_key_in_standard_function13123);
        	        	        evalname_key951=evalname_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, evalname_key951.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function13127);
        	        expression_wrapper952=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper952.tree);


        	        // OracleDML.g:1220:17: ({...}? COMMA ! xml_attributes_clause )?
        	        {
        	            ANTLR_UINT32 alt306=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COMMA:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA306_1 = this->LA(2);
        	                		    if ( ((LT(2)->getText() == "XMLATTRIBUTES")))
        	                		    {
        	                		        alt306=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt306)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1220:18: {...}? COMMA ! xml_attributes_clause
        	        	    {
        	        	        if ( !((LT(2)->getText() == "XMLATTRIBUTES")) )
        	        	        {
        	        	            if (this->get_backtracking()>0)
        	        	            {
        	        	                this->set_failedflag( true );
        	        	                return retval;
        	        	            }

        	        	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "LT(2)->getText() == \"XMLATTRIBUTES\"" );
        	        	                ex->set_ruleName( "standard_function" );


        	        	        }

        	        	        COMMA953 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13148);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_xml_attributes_clause_in_standard_function13151);
        	        	        xml_attributes_clause954=xml_attributes_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_attributes_clause954.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1221:17: ( COMMA ! expression_wrapper ( column_alias )? )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt308=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt308=1;
        	            	}
        	                break;

        	            }

        	            switch (alt308)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1221:18: COMMA ! expression_wrapper ( column_alias )?
        	        	    {
        	        	        COMMA955 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13172);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function13175);
        	        	        expression_wrapper956=expression_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper956.tree);


        	        	        // OracleDML.g:1221:44: ( column_alias )?
        	        	        {
        	        	            ANTLR_UINT32 alt307=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case CHAR_STRING:
        	        	                case CHAR_STRING_PERL:
        	        	                case DELIMITED_ID:
        	        	                case INTRODUCER:
        	        	                case NATIONAL_CHAR_STRING_LIT:
        	        	                case REGULAR_ID:
        	        	                case SQL92_RESERVED_AS:
        	        	                	{
        	        	                		alt307=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt307)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1221:44: column_alias
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_column_alias_in_standard_function13177);
        	        	        	        column_alias957=column_alias();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias957.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop308;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop308: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN958 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13194);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN958_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN958));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN958_tree);
        	        }


        	        // OracleDML.g:1223:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt309=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt309=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt309)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1223:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD959 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13209);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD959_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD959));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD959_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13211);
        	        	        general_element_part960=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part960.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 18:
        	    // OracleDML.g:1224:10: xmlexists_key ^ LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlexists_key_in_standard_function13224);
        	        xmlexists_key961=xmlexists_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlexists_key961.tree, root_0);

        	        LEFT_PAREN962 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13239);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN962_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN962));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN962_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function13257);
        	        expression_wrapper963=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper963.tree);


        	        // OracleDML.g:1227:17: ( xml_passing_clause )?
        	        {
        	            ANTLR_UINT32 alt310=2;
        	            {
        	                ANTLR_UINT32 LA310_0 = this->LA(1);
        	                if ( (LA310_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "PASSING")))
        	                {
        	                    alt310=1;
        	                }
        	            }
        	            switch (alt310)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1227:17: xml_passing_clause
        	        	    {
        	        	        this->followPush(FOLLOW_xml_passing_clause_in_standard_function13275);
        	        	        xml_passing_clause964=xml_passing_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_passing_clause964.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN965 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13290);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN965_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN965));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN965_tree);
        	        }


        	    }
        	    break;
        	case 19:
        	    // OracleDML.g:1229:10: xmlparse_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlparse_key_in_standard_function13301);
        	        xmlparse_key966=xmlparse_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlparse_key966.tree, root_0);

        	        LEFT_PAREN967 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13316);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN967_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN967));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN967_tree);
        	        }


        	        // OracleDML.g:1231:17: ( document_key | content_key )
        	        {
        	            ANTLR_UINT32 alt311=2;
        	            {
        	                ANTLR_UINT32 LA311_0 = this->LA(1);
        	                if ( (LA311_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "CONTENT"))||((toUpper(LT(1)->getText()) == "DOCUMENT")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA311_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "DOCUMENT")))
        	                        {
        	                            alt311=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "CONTENT")))
        	                        {
        	                            alt311=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 311 );
        	                            ex->set_state( 1 );


        	                            goto rulestandard_functionEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 311 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt311)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1231:18: document_key
        	        	    {
        	        	        this->followPush(FOLLOW_document_key_in_standard_function13336);
        	        	        document_key968=document_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, document_key968.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1231:31: content_key
        	        	    {
        	        	        this->followPush(FOLLOW_content_key_in_standard_function13338);
        	        	        content_key969=content_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, content_key969.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13341);
        	        concatenation_wrapper970=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper970.tree);


        	        // OracleDML.g:1231:66: ( wellformed_key )?
        	        {
        	            ANTLR_UINT32 alt312=2;
        	            {
        	                ANTLR_UINT32 LA312_0 = this->LA(1);
        	                if ( (LA312_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "WELLFORMED")))
        	                {
        	                    alt312=1;
        	                }
        	            }
        	            switch (alt312)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1231:66: wellformed_key
        	        	    {
        	        	        this->followPush(FOLLOW_wellformed_key_in_standard_function13343);
        	        	        wellformed_key971=wellformed_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, wellformed_key971.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN972 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13358);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN972_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN972));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN972_tree);
        	        }


        	        // OracleDML.g:1233:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt313=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt313=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt313)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1233:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD973 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13373);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD973_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD973));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD973_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13375);
        	        	        general_element_part974=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part974.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 20:
        	    // OracleDML.g:1234:10: xmlpi_key ^ LEFT_PAREN ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper ) ( COMMA ! concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlpi_key_in_standard_function13388);
        	        xmlpi_key975=xmlpi_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlpi_key975.tree, root_0);

        	        LEFT_PAREN976 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13403);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN976_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN976));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN976_tree);
        	        }


        	        // OracleDML.g:1236:17: ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper )
        	        {
        	            ANTLR_UINT32 alt314=2;
        	            alt314 = cdfa314.predict(this, this->get_rec(), this->get_istream(), cdfa314 );
        	            if  (this->hasException())
        	            {
        	                goto rulestandard_functionEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return retval;
        	            }

        	            switch (alt314)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1236:22: name_key id[T_UNKNOWN,T_USE]
        	        	    {
        	        	        this->followPush(FOLLOW_name_key_in_standard_function13427);
        	        	        name_key977=name_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, name_key977.tree);


        	        	        this->followPush(FOLLOW_id_in_standard_function13429);
        	        	        id978=id(T_UNKNOWN, T_USE);

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, id978.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1237:22: evalname_key concatenation_wrapper
        	        	    {
        	        	        this->followPush(FOLLOW_evalname_key_in_standard_function13453);
        	        	        evalname_key979=evalname_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, evalname_key979.tree);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13455);
        	        	        concatenation_wrapper980=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper980.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1239:17: ( COMMA ! concatenation_wrapper )?
        	        {
        	            ANTLR_UINT32 alt315=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COMMA:
        	                	{
        	                		alt315=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt315)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1239:18: COMMA ! concatenation_wrapper
        	        	    {
        	        	        COMMA981 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13492);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13495);
        	        	        concatenation_wrapper982=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper982.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN983 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13511);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN983_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN983));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN983_tree);
        	        }


        	        // OracleDML.g:1241:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt316=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt316=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt316)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1241:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD984 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13526);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD984_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD984));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD984_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13528);
        	        	        general_element_part985=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part985.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 21:
        	    // OracleDML.g:1242:10: xmlquery_key ^ LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key ! content_key ! ( null_key on_key ! empty_key !)? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlquery_key_in_standard_function13541);
        	        xmlquery_key986=xmlquery_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlquery_key986.tree, root_0);

        	        LEFT_PAREN987 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13556);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN987_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN987));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN987_tree);
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13575);
        	        concatenation_wrapper988=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper988.tree);


        	        // OracleDML.g:1244:39: ( xml_passing_clause )?
        	        {
        	            ANTLR_UINT32 alt317=2;
        	            {
        	                ANTLR_UINT32 LA317_0 = this->LA(1);
        	                if ( (LA317_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "PASSING"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA317_1 = this->LA(2);
        	                        if ( (LA317_1 == APPROXIMATE_NUM_LIT || LA317_1 == BINDVAR || ((LA317_1 >= CHAR_STRING) && (LA317_1 <= CHAR_STRING_PERL)) || LA317_1 == COLON || LA317_1 == DELIMITED_ID || LA317_1 == EXACT_NUM_LIT || LA317_1 == INTRODUCER || LA317_1 == LEFT_PAREN || LA317_1 == MINUS_SIGN || LA317_1 == NATIONAL_CHAR_STRING_LIT || ((LA317_1 >= PLSQL_NON_RESERVED_CAST) && (LA317_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA317_1 == PLUS_SIGN || LA317_1 == SQL92_RESERVED_ALL || LA317_1 == SQL92_RESERVED_ANY || ((LA317_1 >= SQL92_RESERVED_BY) && (LA317_1 <= SQL92_RESERVED_CASE)) || ((LA317_1 >= SQL92_RESERVED_CURSOR) && (LA317_1 <= SQL92_RESERVED_DATE)) || LA317_1 == SQL92_RESERVED_DEFAULT || LA317_1 == SQL92_RESERVED_DISTINCT || ((LA317_1 >= SQL92_RESERVED_EXISTS) && (LA317_1 <= SQL92_RESERVED_FALSE)) || ((LA317_1 >= SQL92_RESERVED_NOT) && (LA317_1 <= SQL92_RESERVED_NULL)) || LA317_1 == SQL92_RESERVED_PRIOR || LA317_1 == SQL92_RESERVED_TRUE || LA317_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "PASSING")))
        	                        {
        	                            alt317=1;
        	                        }
        	                        else if ( (LA317_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "PASSING"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
        	                        {
        	                            {
        	                                ANTLR_UINT32 LA317_3 = this->LA(3);
        	                                if ( (LA317_3 == APPROXIMATE_NUM_LIT || LA317_3 == ASTERISK || LA317_3 == BINDVAR || LA317_3 == CARRET_OPERATOR_PART || ((LA317_3 >= CHAR_STRING) && (LA317_3 <= CHAR_STRING_PERL)) || LA317_3 == COLON || LA317_3 == COMMA || LA317_3 == CONCATENATION_OP || LA317_3 == DELIMITED_ID || LA317_3 == EQUALS_OP || LA317_3 == EXACT_NUM_LIT || LA317_3 == EXCLAMATION_OPERATOR_PART || ((LA317_3 >= GREATER_THAN_OP) && (LA317_3 <= GREATER_THAN_OR_EQUALS_OP)) || LA317_3 == INTRODUCER || ((LA317_3 >= LEFT_BRACKET) && (LA317_3 <= LEFT_PAREN)) || ((LA317_3 >= LESS_THAN_OP) && (LA317_3 <= LESS_THAN_OR_EQUALS_OP)) || LA317_3 == MINUS_SIGN || LA317_3 == NATIONAL_CHAR_STRING_LIT || LA317_3 == NOT_EQUAL_OP || LA317_3 == PERIOD || ((LA317_3 >= PLSQL_NON_RESERVED_CAST) && (LA317_3 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA317_3 == PLSQL_NON_RESERVED_MULTISET || LA317_3 == PLUS_SIGN || LA317_3 == REGULAR_ID || LA317_3 == SOLIDUS || LA317_3 == SQL92_RESERVED_ALL || ((LA317_3 >= SQL92_RESERVED_AND) && (LA317_3 <= SQL92_RESERVED_AS)) || LA317_3 == SQL92_RESERVED_BETWEEN || LA317_3 == SQL92_RESERVED_CASE || LA317_3 == SQL92_RESERVED_DATE || LA317_3 == SQL92_RESERVED_DEFAULT || LA317_3 == SQL92_RESERVED_DISTINCT || ((LA317_3 >= SQL92_RESERVED_EXISTS) && (LA317_3 <= SQL92_RESERVED_FALSE)) || LA317_3 == SQL92_RESERVED_IN || ((LA317_3 >= SQL92_RESERVED_IS) && (LA317_3 <= SQL92_RESERVED_NOT)) || LA317_3 == SQL92_RESERVED_OR || LA317_3 == SQL92_RESERVED_PRIOR || LA317_3 == SQL92_RESERVED_TRUE || LA317_3 == UNSIGNED_INTEGER || LA317_3 == VERTICAL_BAR) && ((toUpper(LT(1)->getText()) == "PASSING")))
        	                                {
        	                                    alt317=1;
        	                                }
        	                                else if ( (LA317_3 == SQL92_RESERVED_NULL) && ((((toUpper(LT(1)->getText()) == "PASSING"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
        	                                {
        	                                    {
        	                                        ANTLR_UINT32 LA317_4 = this->LA(4);
        	                                        if ( (LA317_4 == ASTERISK || LA317_4 == CARRET_OPERATOR_PART || ((LA317_4 >= CHAR_STRING) && (LA317_4 <= CHAR_STRING_PERL)) || LA317_4 == COMMA || LA317_4 == CONCATENATION_OP || LA317_4 == DELIMITED_ID || LA317_4 == EQUALS_OP || LA317_4 == EXCLAMATION_OPERATOR_PART || ((LA317_4 >= GREATER_THAN_OP) && (LA317_4 <= GREATER_THAN_OR_EQUALS_OP)) || LA317_4 == INTRODUCER || LA317_4 == LEFT_BRACKET || ((LA317_4 >= LESS_THAN_OP) && (LA317_4 <= LESS_THAN_OR_EQUALS_OP)) || LA317_4 == MINUS_SIGN || LA317_4 == NATIONAL_CHAR_STRING_LIT || LA317_4 == NOT_EQUAL_OP || LA317_4 == PLSQL_NON_RESERVED_MULTISET || LA317_4 == PLUS_SIGN || LA317_4 == REGULAR_ID || LA317_4 == SOLIDUS || LA317_4 == SQL92_RESERVED_AND || LA317_4 == SQL92_RESERVED_AS || LA317_4 == SQL92_RESERVED_BETWEEN || LA317_4 == SQL92_RESERVED_IN || ((LA317_4 >= SQL92_RESERVED_IS) && (LA317_4 <= SQL92_RESERVED_NOT)) || LA317_4 == SQL92_RESERVED_OR || LA317_4 == VERTICAL_BAR) && ((toUpper(LT(1)->getText()) == "PASSING")))
        	                                        {
        	                                            alt317=1;
        	                                        }
        	                                    }
        	                                }
        	                            }
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt317)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1244:39: xml_passing_clause
        	        	    {
        	        	        this->followPush(FOLLOW_xml_passing_clause_in_standard_function13577);
        	        	        xml_passing_clause989=xml_passing_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_passing_clause989.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_returning_key_in_standard_function13596);
        	        returning_key990=returning_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_content_key_in_standard_function13599);
        	        content_key991=content_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        // OracleDML.g:1245:45: ( null_key on_key ! empty_key !)?
        	        {
        	            ANTLR_UINT32 alt318=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_NULL:
        	                	{
        	                		alt318=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt318)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1245:46: null_key on_key ! empty_key !
        	        	    {
        	        	        this->followPush(FOLLOW_null_key_in_standard_function13603);
        	        	        null_key992=null_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, null_key992.tree);


        	        	        this->followPush(FOLLOW_on_key_in_standard_function13605);
        	        	        on_key993=on_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_empty_key_in_standard_function13608);
        	        	        empty_key994=empty_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN995 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13625);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN995_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN995));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN995_tree);
        	        }


        	        // OracleDML.g:1247:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt319=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt319=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt319)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1247:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD996 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13640);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD996_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD996));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD996_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13642);
        	        	        general_element_part997=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part997.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 22:
        	    // OracleDML.g:1248:10: xmlroot_key ^ LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA ! xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlroot_key_in_standard_function13655);
        	        xmlroot_key998=xmlroot_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlroot_key998.tree, root_0);

        	        LEFT_PAREN999 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13670);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN999_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN999));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN999_tree);
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13688);
        	        concatenation_wrapper1000=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1000.tree);


        	        this->followPush(FOLLOW_xmlroot_param_version_part_in_standard_function13710);
        	        xmlroot_param_version_part1001=xmlroot_param_version_part();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlroot_param_version_part1001.tree);


        	        // OracleDML.g:1252:21: ( COMMA ! xmlroot_param_standalone_part )?
        	        {
        	            ANTLR_UINT32 alt320=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COMMA:
        	                	{
        	                		alt320=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt320)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1252:22: COMMA ! xmlroot_param_standalone_part
        	        	    {
        	        	        COMMA1002 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13733);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_xmlroot_param_standalone_part_in_standard_function13736);
        	        	        xmlroot_param_standalone_part1003=xmlroot_param_standalone_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlroot_param_standalone_part1003.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN1004 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13752);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN1004_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1004));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1004_tree);
        	        }


        	        // OracleDML.g:1254:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt321=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt321=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt321)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1254:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD1005 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13767);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD1005_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD1005));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD1005_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13769);
        	        	        general_element_part1006=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part1006.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 23:
        	    // OracleDML.g:1255:10: xmlserialize_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key ! type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlserialize_key_in_standard_function13782);
        	        xmlserialize_key1007=xmlserialize_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlserialize_key1007.tree, root_0);

        	        LEFT_PAREN1008 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13797);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN1008_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1008));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1008_tree);
        	        }


        	        // OracleDML.g:1257:17: ( document_key | content_key )
        	        {
        	            ANTLR_UINT32 alt322=2;
        	            {
        	                ANTLR_UINT32 LA322_0 = this->LA(1);
        	                if ( (LA322_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "CONTENT"))||((toUpper(LT(1)->getText()) == "DOCUMENT")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA322_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "DOCUMENT")))
        	                        {
        	                            alt322=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "CONTENT")))
        	                        {
        	                            alt322=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 322 );
        	                            ex->set_state( 1 );


        	                            goto rulestandard_functionEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 322 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt322)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1257:18: document_key
        	        	    {
        	        	        this->followPush(FOLLOW_document_key_in_standard_function13816);
        	        	        document_key1009=document_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, document_key1009.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1257:31: content_key
        	        	    {
        	        	        this->followPush(FOLLOW_content_key_in_standard_function13818);
        	        	        content_key1010=content_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, content_key1010.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13837);
        	        concatenation_wrapper1011=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1011.tree);


        	        // OracleDML.g:1258:39: ( as_key ! type_spec )?
        	        {
        	            ANTLR_UINT32 alt323=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_AS:
        	                	{
        	                		alt323=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt323)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1258:40: as_key ! type_spec
        	        	    {
        	        	        this->followPush(FOLLOW_as_key_in_standard_function13840);
        	        	        as_key1012=as_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_type_spec_in_standard_function13843);
        	        	        type_spec1013=type_spec();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, type_spec1013.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1259:17: ( xmlserialize_param_enconding_part )?
        	        {
        	            ANTLR_UINT32 alt324=2;
        	            {
        	                ANTLR_UINT32 LA324_0 = this->LA(1);
        	                if ( (LA324_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "VERSION"))||((toUpper(LT(1)->getText()) == "ENCODING"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA324_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "ENCODING")))
        	                        {
        	                            alt324=1;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt324)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1259:17: xmlserialize_param_enconding_part
        	        	    {
        	        	        this->followPush(FOLLOW_xmlserialize_param_enconding_part_in_standard_function13863);
        	        	        xmlserialize_param_enconding_part1014=xmlserialize_param_enconding_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlserialize_param_enconding_part1014.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1260:17: ( xmlserialize_param_version_part )?
        	        {
        	            ANTLR_UINT32 alt325=2;
        	            {
        	                ANTLR_UINT32 LA325_0 = this->LA(1);
        	                if ( (LA325_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "VERSION"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA325_1 = this->LA(2);
        	                        if ( (LA325_1 == APPROXIMATE_NUM_LIT || LA325_1 == BINDVAR || ((LA325_1 >= CHAR_STRING) && (LA325_1 <= CHAR_STRING_PERL)) || LA325_1 == COLON || LA325_1 == DELIMITED_ID || LA325_1 == EXACT_NUM_LIT || LA325_1 == INTRODUCER || LA325_1 == LEFT_PAREN || LA325_1 == MINUS_SIGN || LA325_1 == NATIONAL_CHAR_STRING_LIT || ((LA325_1 >= PLSQL_NON_RESERVED_CAST) && (LA325_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA325_1 == PLUS_SIGN || LA325_1 == SQL92_RESERVED_ALL || LA325_1 == SQL92_RESERVED_ANY || LA325_1 == SQL92_RESERVED_CASE || LA325_1 == SQL92_RESERVED_DATE || LA325_1 == SQL92_RESERVED_DEFAULT || LA325_1 == SQL92_RESERVED_DISTINCT || ((LA325_1 >= SQL92_RESERVED_EXISTS) && (LA325_1 <= SQL92_RESERVED_FALSE)) || LA325_1 == SQL92_RESERVED_NULL || LA325_1 == SQL92_RESERVED_PRIOR || LA325_1 == SQL92_RESERVED_TRUE || LA325_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "VERSION")))
        	                        {
        	                            alt325=1;
        	                        }
        	                        else if ( (LA325_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "VERSION"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                        {
        	                            {
        	                                ANTLR_UINT32 LA325_4 = this->LA(3);
        	                                if ( ((toUpper(LT(1)->getText()) == "VERSION")))
        	                                {
        	                                    alt325=1;
        	                                }
        	                            }
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt325)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1260:17: xmlserialize_param_version_part
        	        	    {
        	        	        this->followPush(FOLLOW_xmlserialize_param_version_part_in_standard_function13882);
        	        	        xmlserialize_param_version_part1015=xmlserialize_param_version_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlserialize_param_version_part1015.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1261:17: ( xmlserialize_param_ident_part )?
        	        {
        	            ANTLR_UINT32 alt326=2;
        	            {
        	                ANTLR_UINT32 LA326_0 = this->LA(1);
        	                if ( (LA326_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA326_1 = this->LA(2);
        	                        if ( (LA326_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                        {
        	                            {
        	                                ANTLR_UINT32 LA326_3 = this->LA(3);
        	                                if ( ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                                {
        	                                    alt326=1;
        	                                }
        	                            }
        	                        }
        	                        else if ( (LA326_1 == RIGHT_PAREN || LA326_1 == SQL92_RESERVED_SIZE) && ((toUpper(LT(1)->getText()) == "INDENT")))
        	                        {
        	                            alt326=1;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt326)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1261:17: xmlserialize_param_ident_part
        	        	    {
        	        	        this->followPush(FOLLOW_xmlserialize_param_ident_part_in_standard_function13901);
        	        	        xmlserialize_param_ident_part1016=xmlserialize_param_ident_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlserialize_param_ident_part1016.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1262:17: ( ( hide_key | show_key ) defaults_key )?
        	        {
        	            ANTLR_UINT32 alt328=2;
        	            {
        	                ANTLR_UINT32 LA328_0 = this->LA(1);
        	                if ( (LA328_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW")))))
        	                {
        	                    alt328=1;
        	                }
        	            }
        	            switch (alt328)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1262:18: ( hide_key | show_key ) defaults_key
        	        	    {
        	        	        // OracleDML.g:1262:18: ( hide_key | show_key )
        	        	        {
        	        	            ANTLR_UINT32 alt327=2;
        	        	            {
        	        	                ANTLR_UINT32 LA327_0 = this->LA(1);
        	        	                if ( (LA327_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW")))))
        	        	                {
        	        	                    {
        	        	                        ANTLR_UINT32 LA327_1 = this->LA(2);
        	        	                        if ( ((toUpper(LT(1)->getText()) == "HIDE")))
        	        	                        {
        	        	                            alt327=1;
        	        	                        }
        	        	                        else if ( ((toUpper(LT(1)->getText()) == "SHOW")))
        	        	                        {
        	        	                            alt327=2;
        	        	                        }
        	        	                        else
        	        	                        {
        	        	                            if (this->get_backtracking()>0)
        	        	                            {
        	        	                                this->set_failedflag( true );
        	        	                                return retval;
        	        	                            }


        	        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                            ex->set_decisionNum( 327 );
        	        	                            ex->set_state( 1 );


        	        	                            goto rulestandard_functionEx;

        	        	                        }
        	        	                    }
        	        	                }
        	        	                else
        	        	                {
        	        	                    if (this->get_backtracking()>0)
        	        	                    {
        	        	                        this->set_failedflag( true );
        	        	                        return retval;
        	        	                    }


        	        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                    ex->set_decisionNum( 327 );
        	        	                    ex->set_state( 0 );


        	        	                    goto rulestandard_functionEx;

        	        	                }
        	        	            }
        	        	            switch (alt327)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1262:19: hide_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_hide_key_in_standard_function13922);
        	        	        	        hide_key1017=hide_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, hide_key1017.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1262:28: show_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_show_key_in_standard_function13924);
        	        	        	        show_key1018=show_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, show_key1018.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        this->followPush(FOLLOW_defaults_key_in_standard_function13927);
        	        	        defaults_key1019=defaults_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, defaults_key1019.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN1020 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13943);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN1020_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1020));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1020_tree);
        	        }


        	        // OracleDML.g:1264:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt329=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt329=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt329)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1264:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD1021 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13958);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD1021_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD1021));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD1021_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13960);
        	        	        general_element_part1022=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part1022.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 24:
        	    // OracleDML.g:1265:10: xmltable_key ^ LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmltable_key_in_standard_function13973);
        	        xmltable_key1023=xmltable_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmltable_key1023.tree, root_0);

        	        LEFT_PAREN1024 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13988);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN1024_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1024));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1024_tree);
        	        }


        	        // OracleDML.g:1267:17: ( xml_namespaces_clause )?
        	        {
        	            ANTLR_UINT32 alt330=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA330_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "XMLNAMESPACES")))
        	                		    {
        	                		        alt330=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt330)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1267:17: xml_namespaces_clause
        	        	    {
        	        	        this->followPush(FOLLOW_xml_namespaces_clause_in_standard_function14006);
        	        	        xml_namespaces_clause1025=xml_namespaces_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_namespaces_clause1025.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function14025);
        	        concatenation_wrapper1026=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1026.tree);


        	        // OracleDML.g:1269:17: ( xml_passing_clause )?
        	        {
        	            ANTLR_UINT32 alt331=2;
        	            {
        	                ANTLR_UINT32 LA331_0 = this->LA(1);
        	                if ( (LA331_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "PASSING"))||((toUpper(LT(1)->getText()) == "COLUMNS")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA331_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "PASSING")))
        	                        {
        	                            alt331=1;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt331)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1269:17: xml_passing_clause
        	        	    {
        	        	        this->followPush(FOLLOW_xml_passing_clause_in_standard_function14043);
        	        	        xml_passing_clause1027=xml_passing_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_passing_clause1027.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1270:17: ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )?
        	        {
        	            ANTLR_UINT32 alt332=2;
        	            {
        	                ANTLR_UINT32 LA332_0 = this->LA(1);
        	                if ( (LA332_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "COLUMNS")))
        	                {
        	                    alt332=1;
        	                }
        	            }
        	            switch (alt332)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1270:18: columns_key ! xml_table_column ( COMMA ! xml_table_column )
        	        	    {
        	        	        this->followPush(FOLLOW_columns_key_in_standard_function14063);
        	        	        columns_key1028=columns_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_xml_table_column_in_standard_function14066);
        	        	        xml_table_column1029=xml_table_column();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_table_column1029.tree);


        	        	        // OracleDML.g:1270:48: ( COMMA ! xml_table_column )
        	        	        // OracleDML.g:1270:49: COMMA ! xml_table_column
        	        	        {
        	        	            COMMA1030 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function14069);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }


        	        	            this->followPush(FOLLOW_xml_table_column_in_standard_function14072);
        	        	            xml_table_column1031=xml_table_column();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_table_column1031.tree);


        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN1032 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function14089);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN1032_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1032));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1032_tree);
        	        }


        	        // OracleDML.g:1272:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt333=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt333=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt333)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1272:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD1033 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function14104);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD1033_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD1033));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD1033_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function14106);
        	        	        general_element_part1034=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part1034.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulestandard_functionEx; /* Prevent compiler warnings */
    rulestandard_functionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end standard_function */

/**
 * $ANTLR start stantard_function_enabling_over
 * OracleDML.g:1275:1: stantard_function_enabling_over :{...}? => REGULAR_ID -> FUNCTION_ENABLING_OVER[$REGULAR_ID] ;
 */
OracleDML::stantard_function_enabling_over_return
OracleDML::stantard_function_enabling_over()
{
    OracleDML::stantard_function_enabling_over_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* REGULAR_ID1035 = NULL;

    ImplTraits::TreeTypePtr REGULAR_ID1035_tree;
    RewriteRuleTokenStream<ImplTraits> stream_REGULAR_ID(get_psrstate()->get_treeAdaptor(), "token REGULAR_ID");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1276:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_OVER[$REGULAR_ID] )
        // OracleDML.g:1276:10: {...}? => REGULAR_ID
        {
            if ( !((enablesOverClause(LT(1)->getText()))) )
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "enablesOverClause(LT(1)->getText())" );
                    ex->set_ruleName( "stantard_function_enabling_over" );


            }

            REGULAR_ID1035 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_stantard_function_enabling_over14131);
            if  (this->hasException())
            {
                goto rulestantard_function_enabling_overEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_REGULAR_ID.add(REGULAR_ID1035);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1276:62: -> FUNCTION_ENABLING_OVER[$REGULAR_ID]
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(FUNCTION_ENABLING_OVER, REGULAR_ID1035));
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestantard_function_enabling_overEx; /* Prevent compiler warnings */
    rulestantard_function_enabling_overEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end stantard_function_enabling_over */

/**
 * $ANTLR start stantard_function_enabling_using
 * OracleDML.g:1279:1: stantard_function_enabling_using :{...}? => REGULAR_ID -> FUNCTION_ENABLING_USING[$REGULAR_ID] ;
 */
OracleDML::stantard_function_enabling_using_return
OracleDML::stantard_function_enabling_using()
{
    OracleDML::stantard_function_enabling_using_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* REGULAR_ID1036 = NULL;

    ImplTraits::TreeTypePtr REGULAR_ID1036_tree;
    RewriteRuleTokenStream<ImplTraits> stream_REGULAR_ID(get_psrstate()->get_treeAdaptor(), "token REGULAR_ID");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1280:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_USING[$REGULAR_ID] )
        // OracleDML.g:1280:10: {...}? => REGULAR_ID
        {
            if ( !((enablesUsingClause(LT(1)->getText()))) )
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "enablesUsingClause(LT(1)->getText())" );
                    ex->set_ruleName( "stantard_function_enabling_using" );


            }

            REGULAR_ID1036 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_stantard_function_enabling_using14159);
            if  (this->hasException())
            {
                goto rulestantard_function_enabling_usingEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_REGULAR_ID.add(REGULAR_ID1036);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1280:63: -> FUNCTION_ENABLING_USING[$REGULAR_ID]
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(FUNCTION_ENABLING_USING, REGULAR_ID1036));
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestantard_function_enabling_usingEx; /* Prevent compiler warnings */
    rulestantard_function_enabling_usingEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end stantard_function_enabling_using */

/**
 * $ANTLR start stantard_function_enabling_within_or_over
 * OracleDML.g:1283:1: stantard_function_enabling_within_or_over :{...}? => REGULAR_ID -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID] ;
 */
OracleDML::stantard_function_enabling_within_or_over_return
OracleDML::stantard_function_enabling_within_or_over()
{
    OracleDML::stantard_function_enabling_within_or_over_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* REGULAR_ID1037 = NULL;

    ImplTraits::TreeTypePtr REGULAR_ID1037_tree;
    RewriteRuleTokenStream<ImplTraits> stream_REGULAR_ID(get_psrstate()->get_treeAdaptor(), "token REGULAR_ID");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1284:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID] )
        // OracleDML.g:1284:10: {...}? => REGULAR_ID
        {
            if ( !((enablesWithinOrOverClause(LT(1)->getText()))) )
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "enablesWithinOrOverClause(LT(1)->getText())" );
                    ex->set_ruleName( "stantard_function_enabling_within_or_over" );


            }

            REGULAR_ID1037 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over14187);
            if  (this->hasException())
            {
                goto rulestantard_function_enabling_within_or_overEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_REGULAR_ID.add(REGULAR_ID1037);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1284:70: -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID]
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(FUNCTION_ENABLING_WITHIN_OR_OVER, REGULAR_ID1037));
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestantard_function_enabling_within_or_overEx; /* Prevent compiler warnings */
    rulestantard_function_enabling_within_or_overEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end stantard_function_enabling_within_or_over */

/**
 * $ANTLR start stantard_function_pedictions
 * OracleDML.g:1287:1: stantard_function_pedictions :{...}? => REGULAR_ID -> PREDICTION_FUNCTION[$REGULAR_ID] ;
 */
OracleDML::stantard_function_pedictions_return
OracleDML::stantard_function_pedictions()
{
    OracleDML::stantard_function_pedictions_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* REGULAR_ID1038 = NULL;

    ImplTraits::TreeTypePtr REGULAR_ID1038_tree;
    RewriteRuleTokenStream<ImplTraits> stream_REGULAR_ID(get_psrstate()->get_treeAdaptor(), "token REGULAR_ID");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1288:5: ({...}? => REGULAR_ID -> PREDICTION_FUNCTION[$REGULAR_ID] )
        // OracleDML.g:1288:10: {...}? => REGULAR_ID
        {
            if ( !((isStandardPredictionFunction(LT(1)->getText()))) )
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "isStandardPredictionFunction(LT(1)->getText())" );
                    ex->set_ruleName( "stantard_function_pedictions" );


            }

            REGULAR_ID1038 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_stantard_function_pedictions14215);
            if  (this->hasException())
            {
                goto rulestantard_function_pedictionsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_REGULAR_ID.add(REGULAR_ID1038);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1288:73: -> PREDICTION_FUNCTION[$REGULAR_ID]
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(PREDICTION_FUNCTION, REGULAR_ID1038));
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestantard_function_pedictionsEx; /* Prevent compiler warnings */
    rulestantard_function_pedictionsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end stantard_function_pedictions */

/**
 * $ANTLR start over_clause
 * OracleDML.g:1291:1: over_clause : over_key ^ LEFT_PAREN ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN ;
 */
OracleDML::over_clause_return
OracleDML::over_clause()
{
    OracleDML::over_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1040 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1044 = NULL;
    OracleDML_OracleDMLKeys::over_key_return over_key1039;
    ImplTraits::TreeTypePtr::pointer over_key1039_last = NULL;
    OracleDML::query_partition_clause_return query_partition_clause1041;
    ImplTraits::TreeTypePtr::pointer query_partition_clause1041_last = NULL;
    OracleDML::order_by_clause_return order_by_clause1042;
    ImplTraits::TreeTypePtr::pointer order_by_clause1042_last = NULL;
    OracleDML::windowing_clause_return windowing_clause1043;
    ImplTraits::TreeTypePtr::pointer windowing_clause1043_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1040_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1044_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1292:5: ( over_key ^ LEFT_PAREN ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN )
        // OracleDML.g:1292:10: over_key ^ LEFT_PAREN ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_over_key_in_over_clause14240);
            over_key1039=over_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleover_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(over_key1039.tree, root_0);

            LEFT_PAREN1040 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_over_clause14251);
            if  (this->hasException())
            {
                goto ruleover_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN1040_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1040));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1040_tree);
            }


            // OracleDML.g:1294:13: ( query_partition_clause )?
            {
                ANTLR_UINT32 alt335=2;
                {
                    ANTLR_UINT32 LA335_0 = this->LA(1);
                    if ( (LA335_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "PARTITION")))
                    {
                        alt335=1;
                    }
                }
                switch (alt335)
                {
            	case 1:
            	    // OracleDML.g:1294:13: query_partition_clause
            	    {
            	        this->followPush(FOLLOW_query_partition_clause_in_over_clause14265);
            	        query_partition_clause1041=query_partition_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleover_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, query_partition_clause1041.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:1295:13: ( order_by_clause ( windowing_clause )? )?
            {
                ANTLR_UINT32 alt337=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ORDER:
                    	{
                    		alt337=1;
                    	}
                        break;
                }

                switch (alt337)
                {
            	case 1:
            	    // OracleDML.g:1295:14: order_by_clause ( windowing_clause )?
            	    {
            	        this->followPush(FOLLOW_order_by_clause_in_over_clause14281);
            	        order_by_clause1042=order_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleover_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, order_by_clause1042.tree);


            	        // OracleDML.g:1295:30: ( windowing_clause )?
            	        {
            	            ANTLR_UINT32 alt336=2;
            	            {
            	                ANTLR_UINT32 LA336_0 = this->LA(1);
            	                if ( (LA336_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "RANGE"))||((toUpper(LT(1)->getText()) == "ROWS")))))
            	                {
            	                    alt336=1;
            	                }
            	            }
            	            switch (alt336)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1295:30: windowing_clause
            	        	    {
            	        	        this->followPush(FOLLOW_windowing_clause_in_over_clause14283);
            	        	        windowing_clause1043=windowing_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleover_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, windowing_clause1043.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            RIGHT_PAREN1044 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_over_clause14296);
            if  (this->hasException())
            {
                goto ruleover_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN1044_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1044));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1044_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleover_clauseEx; /* Prevent compiler warnings */
    ruleover_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end over_clause */

/**
 * $ANTLR start windowing_clause
 * OracleDML.g:1299:1: windowing_clause : windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements ) -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) ) -> ^( windowing_type ( windowing_elements )+ ) ;
 */
OracleDML::windowing_clause_return
OracleDML::windowing_clause()
{
    OracleDML::windowing_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::windowing_type_return windowing_type1045;
    ImplTraits::TreeTypePtr::pointer windowing_type1045_last = NULL;
    OracleDML_OracleDMLKeys::between_key_return between_key1046;
    ImplTraits::TreeTypePtr::pointer between_key1046_last = NULL;
    OracleDML::windowing_elements_return windowing_elements1047;
    ImplTraits::TreeTypePtr::pointer windowing_elements1047_last = NULL;
    OracleDML_OracleDMLKeys::and_key_return and_key1048;
    ImplTraits::TreeTypePtr::pointer and_key1048_last = NULL;
    OracleDML::windowing_elements_return windowing_elements1049;
    ImplTraits::TreeTypePtr::pointer windowing_elements1049_last = NULL;
    OracleDML::windowing_elements_return windowing_elements1050;
    ImplTraits::TreeTypePtr::pointer windowing_elements1050_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_windowing_type(get_psrstate()->get_treeAdaptor(), "rule windowing_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_between_key(get_psrstate()->get_treeAdaptor(), "rule between_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_and_key(get_psrstate()->get_treeAdaptor(), "rule and_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_windowing_elements(get_psrstate()->get_treeAdaptor(), "rule windowing_elements");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1301:5: ( windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements ) -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) ) -> ^( windowing_type ( windowing_elements )+ ) )
        // OracleDML.g:1301:10: windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements )
        {
            this->followPush(FOLLOW_windowing_type_in_windowing_clause14324);
            windowing_type1045=windowing_type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewindowing_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                windowing_type1045_last = windowing_type1045.tree.get();
                stream_windowing_type.add(windowing_type1045.tree);
            }

            // OracleDML.g:1302:5: ( between_key windowing_elements and_key windowing_elements | windowing_elements )
            {
                ANTLR_UINT32 alt338=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_BETWEEN:
                	{
                		alt338=1;
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case REGULAR_ID:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURRENT:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt338=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 338 );
                    ex->set_state( 0 );


                    goto rulewindowing_clauseEx;

                }

                switch (alt338)
                {
            	case 1:
            	    // OracleDML.g:1302:10: between_key windowing_elements and_key windowing_elements
            	    {
            	        this->followPush(FOLLOW_between_key_in_windowing_clause14335);
            	        between_key1046=between_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            between_key1046_last = between_key1046.tree.get();
            	            stream_between_key.add(between_key1046.tree);
            	        }

            	        this->followPush(FOLLOW_windowing_elements_in_windowing_clause14337);
            	        windowing_elements1047=windowing_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            windowing_elements1047_last = windowing_elements1047.tree.get();
            	            stream_windowing_elements.add(windowing_elements1047.tree);
            	        }

            	        this->followPush(FOLLOW_and_key_in_windowing_clause14339);
            	        and_key1048=and_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            and_key1048_last = and_key1048.tree.get();
            	            stream_and_key.add(and_key1048.tree);
            	        }

            	        this->followPush(FOLLOW_windowing_elements_in_windowing_clause14341);
            	        windowing_elements1049=windowing_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            windowing_elements1049_last = windowing_elements1049.tree.get();
            	            stream_windowing_elements.add(windowing_elements1049.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1303:10: windowing_elements
            	    {
            	        this->followPush(FOLLOW_windowing_elements_in_windowing_clause14354);
            	        windowing_elements1050=windowing_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            windowing_elements1050_last = windowing_elements1050.tree.get();
            	            stream_windowing_elements.add(windowing_elements1050.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: between_key, windowing_type, windowing_elements, windowing_elements, windowing_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1304:5: -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) )
            if (mode == 1) {
            	// OracleDML.g:1304:20: ^( windowing_type ^( between_key ( windowing_elements )+ ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_windowing_type.nextNode(), root_1);
            	// OracleDML.g:1304:37: ^( between_key ( windowing_elements )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_between_key.nextNode(), root_2);
            	if ( !(stream_windowing_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "windowing_elements empty" );
            		goto rulewindowing_clauseEx;
            	}
            	while ( stream_windowing_elements.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_windowing_elements.nextTree());
            	}
            	stream_windowing_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1305:5: -> ^( windowing_type ( windowing_elements )+ )
            {
            	// OracleDML.g:1305:8: ^( windowing_type ( windowing_elements )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_windowing_type.nextNode(), root_1);
            	if ( !(stream_windowing_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "windowing_elements empty" );
            		goto rulewindowing_clauseEx;
            	}
            	while ( stream_windowing_elements.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_windowing_elements.nextTree());
            	}
            	stream_windowing_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulewindowing_clauseEx; /* Prevent compiler warnings */
    rulewindowing_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end windowing_clause */

/**
 * $ANTLR start windowing_type
 * OracleDML.g:1308:1: windowing_type : ( rows_key | range_key );
 */
OracleDML::windowing_type_return
OracleDML::windowing_type()
{
    OracleDML::windowing_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::rows_key_return rows_key1051;
    ImplTraits::TreeTypePtr::pointer rows_key1051_last = NULL;
    OracleDML_OracleDMLKeys::range_key_return range_key1052;
    ImplTraits::TreeTypePtr::pointer range_key1052_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1309:5: ( rows_key | range_key )

            ANTLR_UINT32 alt339;

            alt339=2;

            {
                ANTLR_UINT32 LA339_0 = this->LA(1);
                if ( (LA339_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "RANGE"))||((toUpper(LT(1)->getText()) == "ROWS")))))
                {
                    {
                        ANTLR_UINT32 LA339_1 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "ROWS")))
                        {
                            alt339=1;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "RANGE")))
                        {
                            alt339=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 339 );
                            ex->set_state( 1 );


                            goto rulewindowing_typeEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 339 );
                    ex->set_state( 0 );


                    goto rulewindowing_typeEx;

                }
            }
            switch (alt339)
            {
        	case 1:
        	    // OracleDML.g:1309:10: rows_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_rows_key_in_windowing_type14413);
        	        rows_key1051=rows_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, rows_key1051.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1310:10: range_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_range_key_in_windowing_type14424);
        	        range_key1052=range_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, range_key1052.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulewindowing_typeEx; /* Prevent compiler warnings */
    rulewindowing_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end windowing_type */

/**
 * $ANTLR start windowing_elements
 * OracleDML.g:1313:1: windowing_elements : ( unbounded_key ^ preceding_key | current_key ^ row_key | concatenation_wrapper ( preceding_key ^| following_key ^) );
 */
OracleDML::windowing_elements_return
OracleDML::windowing_elements()
{
    OracleDML::windowing_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::unbounded_key_return unbounded_key1053;
    ImplTraits::TreeTypePtr::pointer unbounded_key1053_last = NULL;
    OracleDML_OracleDMLKeys::preceding_key_return preceding_key1054;
    ImplTraits::TreeTypePtr::pointer preceding_key1054_last = NULL;
    OracleDML_OracleDMLKeys::current_key_return current_key1055;
    ImplTraits::TreeTypePtr::pointer current_key1055_last = NULL;
    OracleDML_OracleDMLKeys::row_key_return row_key1056;
    ImplTraits::TreeTypePtr::pointer row_key1056_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1057;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1057_last = NULL;
    OracleDML_OracleDMLKeys::preceding_key_return preceding_key1058;
    ImplTraits::TreeTypePtr::pointer preceding_key1058_last = NULL;
    OracleDML_OracleDMLKeys::following_key_return following_key1059;
    ImplTraits::TreeTypePtr::pointer following_key1059_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1314:5: ( unbounded_key ^ preceding_key | current_key ^ row_key | concatenation_wrapper ( preceding_key ^| following_key ^) )

            ANTLR_UINT32 alt341;

            alt341=3;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA341_1 = this->LA(2);
            		    if ( (LA341_1 == REGULAR_ID))
            		    {
            		        {
            		            ANTLR_UINT32 LA341_4 = this->LA(3);
            		            if ( ((toUpper(LT(1)->getText()) == "UNBOUNDED")))
            		            {
            		                alt341=1;
            		            }
            		            else if ( (true))
            		            {
            		                alt341=3;
            		            }
            		            else
            		            {
            		                if (this->get_backtracking()>0)
            		                {
            		                    this->set_failedflag( true );
            		                    return retval;
            		                }


            		                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                ex->set_decisionNum( 341 );
            		                ex->set_state( 4 );


            		                goto rulewindowing_elementsEx;

            		            }
            		        }
            		    }
            		    else if ( (LA341_1 == MINUS_SIGN || LA341_1 == PLUS_SIGN))
            		    {
            		        alt341=3;
            		    }
            		    else if ( (LA341_1 == PLSQL_NON_RESERVED_CONNECT_BY_ROOT || LA341_1 == SQL92_RESERVED_ALL || LA341_1 == SQL92_RESERVED_DISTINCT || LA341_1 == SQL92_RESERVED_PRIOR) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt341=3;
            		    }
            		    else if ( (LA341_1 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "INTERVAL"))||(( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))))
            		    {
            		        alt341=3;
            		    }
            		    else if ( (LA341_1 == SQL92_RESERVED_CASE))
            		    {
            		        alt341=3;
            		    }
            		    else if ( (LA341_1 == PLSQL_NON_RESERVED_CAST || LA341_1 == SQL92_RESERVED_ANY || LA341_1 == SQL92_RESERVED_EXISTS) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt341=3;
            		    }
            		    else if ( (LA341_1 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "INTERVAL"))||(( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))))
            		    {
            		        alt341=3;
            		    }
            		    else if ( (LA341_1 == BINDVAR || LA341_1 == COLON))
            		    {
            		        alt341=3;
            		    }
            		    else if ( (LA341_1 == APPROXIMATE_NUM_LIT || LA341_1 == EXACT_NUM_LIT || LA341_1 == SQL92_RESERVED_DATE || LA341_1 == UNSIGNED_INTEGER) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt341=3;
            		    }
            		    else if ( (((LA341_1 >= CHAR_STRING) && (LA341_1 <= CHAR_STRING_PERL)) || LA341_1 == NATIONAL_CHAR_STRING_LIT))
            		    {
            		        alt341=3;
            		    }
            		    else if ( (LA341_1 == SQL92_RESERVED_DEFAULT || LA341_1 == SQL92_RESERVED_FALSE || LA341_1 == SQL92_RESERVED_NULL || LA341_1 == SQL92_RESERVED_TRUE) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt341=3;
            		    }
            		    else if ( (LA341_1 == ASTERISK || LA341_1 == CONCATENATION_OP || ((LA341_1 >= LEFT_BRACKET) && (LA341_1 <= LEFT_PAREN)) || LA341_1 == PERIOD || LA341_1 == PLSQL_NON_RESERVED_MULTISET || LA341_1 == SOLIDUS || LA341_1 == VERTICAL_BAR))
            		    {
            		        alt341=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 341 );
            		        ex->set_state( 1 );


            		        goto rulewindowing_elementsEx;

            		    }
            		}
            	}
                break;
            case SQL92_RESERVED_CURRENT:
            	{
            		alt341=2;
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt341=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 341 );
                ex->set_state( 0 );


                goto rulewindowing_elementsEx;

            }

            switch (alt341)
            {
        	case 1:
        	    // OracleDML.g:1314:10: unbounded_key ^ preceding_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_unbounded_key_in_windowing_elements14444);
        	        unbounded_key1053=unbounded_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(unbounded_key1053.tree, root_0);

        	        this->followPush(FOLLOW_preceding_key_in_windowing_elements14447);
        	        preceding_key1054=preceding_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, preceding_key1054.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1315:10: current_key ^ row_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_current_key_in_windowing_elements14458);
        	        current_key1055=current_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(current_key1055.tree, root_0);

        	        this->followPush(FOLLOW_row_key_in_windowing_elements14461);
        	        row_key1056=row_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, row_key1056.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:1316:10: concatenation_wrapper ( preceding_key ^| following_key ^)
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_concatenation_wrapper_in_windowing_elements14472);
        	        concatenation_wrapper1057=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1057.tree);


        	        // OracleDML.g:1316:32: ( preceding_key ^| following_key ^)
        	        {
        	            ANTLR_UINT32 alt340=2;
        	            {
        	                ANTLR_UINT32 LA340_0 = this->LA(1);
        	                if ( (LA340_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "FOLLOWING"))||((toUpper(LT(1)->getText()) == "PRECEDING")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA340_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "PRECEDING")))
        	                        {
        	                            alt340=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "FOLLOWING")))
        	                        {
        	                            alt340=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 340 );
        	                            ex->set_state( 1 );


        	                            goto rulewindowing_elementsEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 340 );
        	                    ex->set_state( 0 );


        	                    goto rulewindowing_elementsEx;

        	                }
        	            }
        	            switch (alt340)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1316:33: preceding_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_preceding_key_in_windowing_elements14475);
        	        	        preceding_key1058=preceding_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulewindowing_elementsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(preceding_key1058.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1316:48: following_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_following_key_in_windowing_elements14478);
        	        	        following_key1059=following_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulewindowing_elementsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(following_key1059.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulewindowing_elementsEx; /* Prevent compiler warnings */
    rulewindowing_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end windowing_elements */

/**
 * $ANTLR start using_clause
 * OracleDML.g:1319:1: using_clause : using_key ^ ( ASTERISK | using_element ( COMMA ! using_element )* ) ;
 */
OracleDML::using_clause_return
OracleDML::using_clause()
{
    OracleDML::using_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* ASTERISK1061 = NULL;
    ImplTraits::CommonTokenType const* COMMA1063 = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key1060;
    ImplTraits::TreeTypePtr::pointer using_key1060_last = NULL;
    OracleDML::using_element_return using_element1062;
    ImplTraits::TreeTypePtr::pointer using_element1062_last = NULL;
    OracleDML::using_element_return using_element1064;
    ImplTraits::TreeTypePtr::pointer using_element1064_last = NULL;
    ImplTraits::TreeTypePtr ASTERISK1061_tree;
    ImplTraits::TreeTypePtr COMMA1063_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1320:5: ( using_key ^ ( ASTERISK | using_element ( COMMA ! using_element )* ) )
        // OracleDML.g:1320:10: using_key ^ ( ASTERISK | using_element ( COMMA ! using_element )* )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_using_key_in_using_clause14500);
            using_key1060=using_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleusing_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(using_key1060.tree, root_0);

            // OracleDML.g:1321:5: ( ASTERISK | using_element ( COMMA ! using_element )* )
            {
                ANTLR_UINT32 alt343=2;
                switch ( this->LA(1) )
                {
                case ASTERISK:
                	{
                		alt343=1;
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case REGULAR_ID:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_IN:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt343=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 343 );
                    ex->set_state( 0 );


                    goto ruleusing_clauseEx;

                }

                switch (alt343)
                {
            	case 1:
            	    // OracleDML.g:1321:10: ASTERISK
            	    {
            	        ASTERISK1061 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_using_clause14512);
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        ASTERISK1061_tree = std::move(get_psrstate()->get_treeAdaptor()->create(ASTERISK1061));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, ASTERISK1061_tree);
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1322:10: using_element ( COMMA ! using_element )*
            	    {
            	        this->followPush(FOLLOW_using_element_in_using_clause14523);
            	        using_element1062=using_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, using_element1062.tree);


            	        // OracleDML.g:1322:24: ( COMMA ! using_element )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt342=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt342=1;
            	            	}
            	                break;

            	            }

            	            switch (alt342)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1322:25: COMMA ! using_element
            	        	    {
            	        	        COMMA1063 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_using_clause14526);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleusing_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	        this->followPush(FOLLOW_using_element_in_using_clause14529);
            	        	        using_element1064=using_element();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleusing_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, using_element1064.tree);


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop342;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop342: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleusing_clauseEx; /* Prevent compiler warnings */
    ruleusing_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end using_clause */

/**
 * $ANTLR start using_element
 * OracleDML.g:1326:1: using_element : ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )? -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? ) ;
 */
OracleDML::using_element_return
OracleDML::using_element()
{
    OracleDML::using_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::in_key_return in_key1065;
    ImplTraits::TreeTypePtr::pointer in_key1065_last = NULL;
    OracleDML_OracleDMLKeys::out_key_return out_key1066;
    ImplTraits::TreeTypePtr::pointer out_key1066_last = NULL;
    OracleDML_OracleDMLKeys::out_key_return out_key1067;
    ImplTraits::TreeTypePtr::pointer out_key1067_last = NULL;
    OracleDML::select_list_elements_return select_list_elements1068;
    ImplTraits::TreeTypePtr::pointer select_list_elements1068_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1069;
    ImplTraits::TreeTypePtr::pointer column_alias1069_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_out_key(get_psrstate()->get_treeAdaptor(), "rule out_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_list_elements(get_psrstate()->get_treeAdaptor(), "rule select_list_elements");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1327:5: ( ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )? -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? ) )
        // OracleDML.g:1327:10: ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )?
        {
            // OracleDML.g:1327:10: ( in_key ( out_key )? | out_key )?
            {
                ANTLR_UINT32 alt345=3;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_IN:
                    	{
                    		alt345=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA345_2 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "OUT")))
                    		    {
                    		        alt345=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt345)
                {
            	case 1:
            	    // OracleDML.g:1327:11: in_key ( out_key )?
            	    {
            	        this->followPush(FOLLOW_in_key_in_using_element14558);
            	        in_key1065=in_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            in_key1065_last = in_key1065.tree.get();
            	            stream_in_key.add(in_key1065.tree);
            	        }

            	        // OracleDML.g:1327:18: ( out_key )?
            	        {
            	            ANTLR_UINT32 alt344=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		{
            	                		    ANTLR_UINT32 LA344_1 = this->LA(2);
            	                		    if ( ((toUpper(LT(1)->getText()) == "OUT")))
            	                		    {
            	                		        alt344=1;
            	                		    }
            	                		}
            	                	}
            	                    break;
            	            }

            	            switch (alt344)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1327:18: out_key
            	        	    {
            	        	        this->followPush(FOLLOW_out_key_in_using_element14560);
            	        	        out_key1066=out_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleusing_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            out_key1066_last = out_key1066.tree.get();
            	        	            stream_out_key.add(out_key1066.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1327:27: out_key
            	    {
            	        this->followPush(FOLLOW_out_key_in_using_element14563);
            	        out_key1067=out_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            out_key1067_last = out_key1067.tree.get();
            	            stream_out_key.add(out_key1067.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_select_list_elements_in_using_element14567);
            select_list_elements1068=select_list_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleusing_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_list_elements1068_last = select_list_elements1068.tree.get();
                stream_select_list_elements.add(select_list_elements1068.tree);
            }

            // OracleDML.g:1327:58: ( column_alias )?
            {
                ANTLR_UINT32 alt346=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_AS:
                    	{
                    		alt346=1;
                    	}
                        break;
                    case INTRODUCER:
                    	{
                    		alt346=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		alt346=1;
                    	}
                        break;
                    case DELIMITED_ID:
                    	{
                    		alt346=1;
                    	}
                        break;
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		alt346=1;
                    	}
                        break;
                }

                switch (alt346)
                {
            	case 1:
            	    // OracleDML.g:1327:58: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_using_element14569);
            	        column_alias1069=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias1069_last = column_alias1069.tree.get();
            	            stream_column_alias.add(column_alias1069.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_alias, in_key, select_list_elements, out_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1328:9: -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? )
            {
            	// OracleDML.g:1328:12: ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ELEMENT, "ELEMENT"), root_1);
            	// OracleDML.g:1328:22: ( in_key )?
            	if ( stream_in_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_in_key.nextTree());
            	}
            	stream_in_key.reset();

            	// OracleDML.g:1328:30: ( out_key )?
            	if ( stream_out_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_out_key.nextTree());
            	}
            	stream_out_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_list_elements.nextTree());
            	// OracleDML.g:1328:60: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleusing_elementEx; /* Prevent compiler warnings */
    ruleusing_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end using_element */

/**
 * $ANTLR start collect_order_by_part
 * OracleDML.g:1331:1: collect_order_by_part : order_key ^ by_key ! concatenation_wrapper ;
 */
OracleDML::collect_order_by_part_return
OracleDML::collect_order_by_part()
{
    OracleDML::collect_order_by_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::order_key_return order_key1070;
    ImplTraits::TreeTypePtr::pointer order_key1070_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key1071;
    ImplTraits::TreeTypePtr::pointer by_key1071_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1072;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1072_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1332:5: ( order_key ^ by_key ! concatenation_wrapper )
        // OracleDML.g:1332:10: order_key ^ by_key ! concatenation_wrapper
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_order_key_in_collect_order_by_part14615);
            order_key1070=order_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecollect_order_by_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(order_key1070.tree, root_0);

            this->followPush(FOLLOW_by_key_in_collect_order_by_part14618);
            by_key1071=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecollect_order_by_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_concatenation_wrapper_in_collect_order_by_part14621);
            concatenation_wrapper1072=concatenation_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecollect_order_by_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1072.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecollect_order_by_partEx; /* Prevent compiler warnings */
    rulecollect_order_by_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end collect_order_by_part */

/**
 * $ANTLR start within_or_over_part
 * OracleDML.g:1335:1: within_or_over_part : ( within_key ^ group_key ! LEFT_PAREN order_by_clause RIGHT_PAREN | over_clause );
 */
OracleDML::within_or_over_part_return
OracleDML::within_or_over_part()
{
    OracleDML::within_or_over_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1075 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1077 = NULL;
    OracleDML_OracleDMLKeys::within_key_return within_key1073;
    ImplTraits::TreeTypePtr::pointer within_key1073_last = NULL;
    OracleDML_OracleDMLKeys::group_key_return group_key1074;
    ImplTraits::TreeTypePtr::pointer group_key1074_last = NULL;
    OracleDML::order_by_clause_return order_by_clause1076;
    ImplTraits::TreeTypePtr::pointer order_by_clause1076_last = NULL;
    OracleDML::over_clause_return over_clause1078;
    ImplTraits::TreeTypePtr::pointer over_clause1078_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1075_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1077_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1336:5: ( within_key ^ group_key ! LEFT_PAREN order_by_clause RIGHT_PAREN | over_clause )

            ANTLR_UINT32 alt347;

            alt347=2;

            {
                ANTLR_UINT32 LA347_0 = this->LA(1);
                if ( (LA347_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "OVER"))||((toUpper(LT(1)->getText()) == "WITHIN")))))
                {
                    {
                        ANTLR_UINT32 LA347_1 = this->LA(2);
                        if ( (LA347_1 == SQL92_RESERVED_GROUP) && ((toUpper(LT(1)->getText()) == "WITHIN")))
                        {
                            alt347=1;
                        }
                        else if ( (LA347_1 == LEFT_PAREN) && ((toUpper(LT(1)->getText()) == "OVER")))
                        {
                            alt347=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 347 );
                            ex->set_state( 1 );


                            goto rulewithin_or_over_partEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 347 );
                    ex->set_state( 0 );


                    goto rulewithin_or_over_partEx;

                }
            }
            switch (alt347)
            {
        	case 1:
        	    // OracleDML.g:1336:10: within_key ^ group_key ! LEFT_PAREN order_by_clause RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_within_key_in_within_or_over_part14641);
        	        within_key1073=within_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(within_key1073.tree, root_0);

        	        this->followPush(FOLLOW_group_key_in_within_or_over_part14644);
        	        group_key1074=group_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        LEFT_PAREN1075 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_within_or_over_part14647);
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN1075_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1075));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1075_tree);
        	        }


        	        this->followPush(FOLLOW_order_by_clause_in_within_or_over_part14649);
        	        order_by_clause1076=order_by_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, order_by_clause1076.tree);


        	        RIGHT_PAREN1077 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_within_or_over_part14651);
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN1077_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1077));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1077_tree);
        	        }


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1337:10: over_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_over_clause_in_within_or_over_part14662);
        	        over_clause1078=over_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, over_clause1078.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulewithin_or_over_partEx; /* Prevent compiler warnings */
    rulewithin_or_over_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end within_or_over_part */

/**
 * $ANTLR start cost_matrix_clause
 * OracleDML.g:1340:1: cost_matrix_clause : cost_key ^ ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list ) ;
 */
OracleDML::cost_matrix_clause_return
OracleDML::cost_matrix_clause()
{
    OracleDML::cost_matrix_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1082 = NULL;
    ImplTraits::CommonTokenType const* COMMA1084 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1086 = NULL;
    OracleDML_OracleDMLKeys::cost_key_return cost_key1079;
    ImplTraits::TreeTypePtr::pointer cost_key1079_last = NULL;
    OracleDML_OracleDMLKeys::model_key_return model_key1080;
    ImplTraits::TreeTypePtr::pointer model_key1080_last = NULL;
    OracleDML_OracleDMLKeys::auto_key_return auto_key1081;
    ImplTraits::TreeTypePtr::pointer auto_key1081_last = NULL;
    OracleDML_OracleDMLCommons::cost_class_name_return cost_class_name1083;
    ImplTraits::TreeTypePtr::pointer cost_class_name1083_last = NULL;
    OracleDML_OracleDMLCommons::cost_class_name_return cost_class_name1085;
    ImplTraits::TreeTypePtr::pointer cost_class_name1085_last = NULL;
    OracleDML_OracleDMLKeys::values_key_return values_key1087;
    ImplTraits::TreeTypePtr::pointer values_key1087_last = NULL;
    OracleDML::expression_list_return expression_list1088;
    ImplTraits::TreeTypePtr::pointer expression_list1088_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1082_tree;
    ImplTraits::TreeTypePtr COMMA1084_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1086_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1341:5: ( cost_key ^ ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list ) )
        // OracleDML.g:1341:10: cost_key ^ ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_cost_key_in_cost_matrix_clause14682);
            cost_key1079=cost_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecost_matrix_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(cost_key1079.tree, root_0);

            // OracleDML.g:1342:5: ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list )
            {
                ANTLR_UINT32 alt350=2;
                switch ( this->LA(1) )
                {
                case PLSQL_NON_RESERVED_MODEL:
                	{
                		alt350=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt350=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 350 );
                    ex->set_state( 0 );


                    goto rulecost_matrix_clauseEx;

                }

                switch (alt350)
                {
            	case 1:
            	    // OracleDML.g:1342:10: model_key ( auto_key )?
            	    {
            	        this->followPush(FOLLOW_model_key_in_cost_matrix_clause14694);
            	        model_key1080=model_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, model_key1080.tree);


            	        // OracleDML.g:1342:20: ( auto_key )?
            	        {
            	            ANTLR_UINT32 alt348=2;
            	            {
            	                ANTLR_UINT32 LA348_0 = this->LA(1);
            	                if ( (LA348_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "AUTO")))
            	                {
            	                    alt348=1;
            	                }
            	            }
            	            switch (alt348)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1342:20: auto_key
            	        	    {
            	        	        this->followPush(FOLLOW_auto_key_in_cost_matrix_clause14696);
            	        	        auto_key1081=auto_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecost_matrix_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, auto_key1081.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1343:10: LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list
            	    {
            	        LEFT_PAREN1082 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_cost_matrix_clause14708);
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        LEFT_PAREN1082_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1082));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1082_tree);
            	        }


            	        this->followPush(FOLLOW_cost_class_name_in_cost_matrix_clause14710);
            	        cost_class_name1083=cost_class_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cost_class_name1083.tree);


            	        // OracleDML.g:1343:37: ( COMMA ! cost_class_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt349=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt349=1;
            	            	}
            	                break;

            	            }

            	            switch (alt349)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1343:38: COMMA ! cost_class_name
            	        	    {
            	        	        COMMA1084 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_cost_matrix_clause14713);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecost_matrix_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	        this->followPush(FOLLOW_cost_class_name_in_cost_matrix_clause14716);
            	        	        cost_class_name1085=cost_class_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecost_matrix_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cost_class_name1085.tree);


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop349;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop349: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN1086 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14720);
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        RIGHT_PAREN1086_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1086));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1086_tree);
            	        }


            	        this->followPush(FOLLOW_values_key_in_cost_matrix_clause14722);
            	        values_key1087=values_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_expression_list_in_cost_matrix_clause14738);
            	        expression_list1088=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_list1088.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecost_matrix_clauseEx; /* Prevent compiler warnings */
    rulecost_matrix_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cost_matrix_clause */

/**
 * $ANTLR start xml_passing_clause
 * OracleDML.g:1348:1: xml_passing_clause : passing_key ^ ( by_key ! value_key )? expression_wrapper ( column_alias )? ( COMMA ! expression_wrapper ( column_alias )? ) ;
 */
OracleDML::xml_passing_clause_return
OracleDML::xml_passing_clause()
{
    OracleDML::xml_passing_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA1094 = NULL;
    OracleDML_OracleDMLKeys::passing_key_return passing_key1089;
    ImplTraits::TreeTypePtr::pointer passing_key1089_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key1090;
    ImplTraits::TreeTypePtr::pointer by_key1090_last = NULL;
    OracleDML_OracleDMLKeys::value_key_return value_key1091;
    ImplTraits::TreeTypePtr::pointer value_key1091_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper1092;
    ImplTraits::TreeTypePtr::pointer expression_wrapper1092_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1093;
    ImplTraits::TreeTypePtr::pointer column_alias1093_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper1095;
    ImplTraits::TreeTypePtr::pointer expression_wrapper1095_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1096;
    ImplTraits::TreeTypePtr::pointer column_alias1096_last = NULL;
    ImplTraits::TreeTypePtr COMMA1094_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1349:5: ( passing_key ^ ( by_key ! value_key )? expression_wrapper ( column_alias )? ( COMMA ! expression_wrapper ( column_alias )? ) )
        // OracleDML.g:1349:10: passing_key ^ ( by_key ! value_key )? expression_wrapper ( column_alias )? ( COMMA ! expression_wrapper ( column_alias )? )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_passing_key_in_xml_passing_clause14764);
            passing_key1089=passing_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_passing_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(passing_key1089.tree, root_0);

            // OracleDML.g:1349:23: ( by_key ! value_key )?
            {
                ANTLR_UINT32 alt351=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_BY:
                    	{
                    		alt351=1;
                    	}
                        break;
                }

                switch (alt351)
                {
            	case 1:
            	    // OracleDML.g:1349:24: by_key ! value_key
            	    {
            	        this->followPush(FOLLOW_by_key_in_xml_passing_clause14768);
            	        by_key1090=by_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_passing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_value_key_in_xml_passing_clause14771);
            	        value_key1091=value_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_passing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, value_key1091.tree);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_expression_wrapper_in_xml_passing_clause14787);
            expression_wrapper1092=expression_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_passing_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper1092.tree);


            // OracleDML.g:1350:32: ( column_alias )?
            {
                ANTLR_UINT32 alt352=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt352=1;
                    	}
                        break;
                }

                switch (alt352)
                {
            	case 1:
            	    // OracleDML.g:1350:32: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_xml_passing_clause14789);
            	        column_alias1093=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_passing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias1093.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:1350:46: ( COMMA ! expression_wrapper ( column_alias )? )
            // OracleDML.g:1350:47: COMMA ! expression_wrapper ( column_alias )?
            {
                COMMA1094 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_xml_passing_clause14793);
                if  (this->hasException())
                {
                    goto rulexml_passing_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }


                this->followPush(FOLLOW_expression_wrapper_in_xml_passing_clause14796);
                expression_wrapper1095=expression_wrapper();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulexml_passing_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper1095.tree);


                // OracleDML.g:1350:73: ( column_alias )?
                {
                    ANTLR_UINT32 alt353=2;
                    switch ( this->LA(1) )
                    {
                        case CHAR_STRING:
                        case CHAR_STRING_PERL:
                        case DELIMITED_ID:
                        case INTRODUCER:
                        case NATIONAL_CHAR_STRING_LIT:
                        case SQL92_RESERVED_AS:
                        	{
                        		alt353=1;
                        	}
                            break;
                        case REGULAR_ID:
                        	{
                        		{
                        		    ANTLR_UINT32 LA353_3 = this->LA(2);
                        		    if ( (!( ((((toUpper(LT(1)->getText()) == "RETURNING"))||((toUpper(LT(1)->getText()) == "COLUMNS")))) )))
                        		    {
                        		        alt353=1;
                        		    }
                        		}
                        	}
                            break;
                    }

                    switch (alt353)
                    {
                	case 1:
                	    // OracleDML.g:1350:73: column_alias
                	    {
                	        this->followPush(FOLLOW_column_alias_in_xml_passing_clause14798);
                	        column_alias1096=column_alias();

                	        this->followPop();
                	        if  (this->hasException())
                	        {
                	            goto rulexml_passing_clauseEx;
                	        }
                	        if (this->hasFailed())
                	        {
                	            return retval;
                	        }

                	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias1096.tree);


                	    }
                	    break;

                    }
                }

            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_passing_clauseEx; /* Prevent compiler warnings */
    rulexml_passing_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_passing_clause */

/**
 * $ANTLR start xml_attributes_clause
 * OracleDML.g:1353:1: xml_attributes_clause : xmlattributes_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ;
 */
OracleDML::xml_attributes_clause_return
OracleDML::xml_attributes_clause()
{
    OracleDML::xml_attributes_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1098 = NULL;
    ImplTraits::CommonTokenType const* COMMA1104 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1106 = NULL;
    OracleDML_OracleDMLKeys::xmlattributes_key_return xmlattributes_key1097;
    ImplTraits::TreeTypePtr::pointer xmlattributes_key1097_last = NULL;
    OracleDML_OracleDMLKeys::entityescaping_key_return entityescaping_key1099;
    ImplTraits::TreeTypePtr::pointer entityescaping_key1099_last = NULL;
    OracleDML_OracleDMLKeys::noentityescaping_key_return noentityescaping_key1100;
    ImplTraits::TreeTypePtr::pointer noentityescaping_key1100_last = NULL;
    OracleDML_OracleDMLKeys::schemacheck_key_return schemacheck_key1101;
    ImplTraits::TreeTypePtr::pointer schemacheck_key1101_last = NULL;
    OracleDML_OracleDMLKeys::noschemacheck_key_return noschemacheck_key1102;
    ImplTraits::TreeTypePtr::pointer noschemacheck_key1102_last = NULL;
    OracleDML::xml_multiuse_expression_element_return xml_multiuse_expression_element1103;
    ImplTraits::TreeTypePtr::pointer xml_multiuse_expression_element1103_last = NULL;
    OracleDML::xml_multiuse_expression_element_return xml_multiuse_expression_element1105;
    ImplTraits::TreeTypePtr::pointer xml_multiuse_expression_element1105_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1098_tree;
    ImplTraits::TreeTypePtr COMMA1104_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1106_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1354:5: ( xmlattributes_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN )
        // OracleDML.g:1354:10: xmlattributes_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_xmlattributes_key_in_xml_attributes_clause14820);
            xmlattributes_key1097=xmlattributes_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_attributes_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlattributes_key1097.tree, root_0);

            LEFT_PAREN1098 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_xml_attributes_clause14831);
            if  (this->hasException())
            {
                goto rulexml_attributes_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN1098_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1098));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1098_tree);
            }


            // OracleDML.g:1356:13: ( entityescaping_key | noentityescaping_key )?
            {
                ANTLR_UINT32 alt354=3;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA354_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "ENTITYESCAPING")))
                    		    {
                    		        alt354=1;
                    		    }
                    		    else if ( ((toUpper(LT(1)->getText()) == "NOENTITYESCAPING")))
                    		    {
                    		        alt354=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt354)
                {
            	case 1:
            	    // OracleDML.g:1356:14: entityescaping_key
            	    {
            	        this->followPush(FOLLOW_entityescaping_key_in_xml_attributes_clause14846);
            	        entityescaping_key1099=entityescaping_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, entityescaping_key1099.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1356:33: noentityescaping_key
            	    {
            	        this->followPush(FOLLOW_noentityescaping_key_in_xml_attributes_clause14848);
            	        noentityescaping_key1100=noentityescaping_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, noentityescaping_key1100.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:1357:13: ( schemacheck_key | noschemacheck_key )?
            {
                ANTLR_UINT32 alt355=3;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA355_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "SCHEMACHECK")))
                    		    {
                    		        alt355=1;
                    		    }
                    		    else if ( ((toUpper(LT(1)->getText()) == "NOSCHEMACHECK")))
                    		    {
                    		        alt355=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt355)
                {
            	case 1:
            	    // OracleDML.g:1357:14: schemacheck_key
            	    {
            	        this->followPush(FOLLOW_schemacheck_key_in_xml_attributes_clause14865);
            	        schemacheck_key1101=schemacheck_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, schemacheck_key1101.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1357:30: noschemacheck_key
            	    {
            	        this->followPush(FOLLOW_noschemacheck_key_in_xml_attributes_clause14867);
            	        noschemacheck_key1102=noschemacheck_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, noschemacheck_key1102.tree);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14883);
            xml_multiuse_expression_element1103=xml_multiuse_expression_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_attributes_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_multiuse_expression_element1103.tree);


            // OracleDML.g:1358:45: ( COMMA ! xml_multiuse_expression_element )*

            for (;;)
            {
                ANTLR_UINT32 alt356=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt356=1;
                	}
                    break;

                }

                switch (alt356)
                {
            	case 1:
            	    // OracleDML.g:1358:46: COMMA ! xml_multiuse_expression_element
            	    {
            	        COMMA1104 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_xml_attributes_clause14886);
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14889);
            	        xml_multiuse_expression_element1105=xml_multiuse_expression_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_multiuse_expression_element1105.tree);


            	    }
            	    break;

            	default:
            	    goto loop356;	/* break out of the loop */
            	    break;
                }
            }
            loop356: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN1106 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14901);
            if  (this->hasException())
            {
                goto rulexml_attributes_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN1106_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1106));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1106_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_attributes_clauseEx; /* Prevent compiler warnings */
    rulexml_attributes_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_attributes_clause */

/**
 * $ANTLR start xml_namespaces_clause
 * OracleDML.g:1362:1: xml_namespaces_clause : xmlnamespaces_key ^ LEFT_PAREN ( concatenation_wrapper column_alias )? ( COMMA ! concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN ;
 */
OracleDML::xml_namespaces_clause_return
OracleDML::xml_namespaces_clause()
{
    OracleDML::xml_namespaces_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1108 = NULL;
    ImplTraits::CommonTokenType const* COMMA1111 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1115 = NULL;
    OracleDML_OracleDMLKeys::xmlnamespaces_key_return xmlnamespaces_key1107;
    ImplTraits::TreeTypePtr::pointer xmlnamespaces_key1107_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1109;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1109_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1110;
    ImplTraits::TreeTypePtr::pointer column_alias1110_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1112;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1112_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1113;
    ImplTraits::TreeTypePtr::pointer column_alias1113_last = NULL;
    OracleDML::xml_general_default_part_return xml_general_default_part1114;
    ImplTraits::TreeTypePtr::pointer xml_general_default_part1114_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1108_tree;
    ImplTraits::TreeTypePtr COMMA1111_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1115_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1363:5: ( xmlnamespaces_key ^ LEFT_PAREN ( concatenation_wrapper column_alias )? ( COMMA ! concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN )
        // OracleDML.g:1363:10: xmlnamespaces_key ^ LEFT_PAREN ( concatenation_wrapper column_alias )? ( COMMA ! concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14921);
            xmlnamespaces_key1107=xmlnamespaces_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_namespaces_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlnamespaces_key1107.tree, root_0);

            LEFT_PAREN1108 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14932);
            if  (this->hasException())
            {
                goto rulexml_namespaces_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN1108_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1108));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1108_tree);
            }


            // OracleDML.g:1365:13: ( concatenation_wrapper column_alias )?
            {
                ANTLR_UINT32 alt357=2;
                switch ( this->LA(1) )
                {
                    case APPROXIMATE_NUM_LIT:
                    case BINDVAR:
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case COLON:
                    case DELIMITED_ID:
                    case EXACT_NUM_LIT:
                    case INTRODUCER:
                    case LEFT_PAREN:
                    case MINUS_SIGN:
                    case NATIONAL_CHAR_STRING_LIT:
                    case PLSQL_NON_RESERVED_CAST:
                    case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                    case PLUS_SIGN:
                    case REGULAR_ID:
                    case SQL92_RESERVED_ALL:
                    case SQL92_RESERVED_ANY:
                    case SQL92_RESERVED_CASE:
                    case SQL92_RESERVED_DATE:
                    case SQL92_RESERVED_DISTINCT:
                    case SQL92_RESERVED_EXISTS:
                    case SQL92_RESERVED_FALSE:
                    case SQL92_RESERVED_NULL:
                    case SQL92_RESERVED_PRIOR:
                    case SQL92_RESERVED_TRUE:
                    case UNSIGNED_INTEGER:
                    	{
                    		alt357=1;
                    	}
                        break;
                    case SQL92_RESERVED_DEFAULT:
                    	{
                    		alt357=1;
                    	}
                        break;
                }

                switch (alt357)
                {
            	case 1:
            	    // OracleDML.g:1365:14: concatenation_wrapper column_alias
            	    {
            	        this->followPush(FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14947);
            	        concatenation_wrapper1109=concatenation_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1109.tree);


            	        this->followPush(FOLLOW_column_alias_in_xml_namespaces_clause14949);
            	        column_alias1110=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias1110.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:1366:17: ( COMMA ! concatenation_wrapper column_alias )*

            for (;;)
            {
                ANTLR_UINT32 alt358=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt358=1;
                	}
                    break;

                }

                switch (alt358)
                {
            	case 1:
            	    // OracleDML.g:1366:18: COMMA ! concatenation_wrapper column_alias
            	    {
            	        COMMA1111 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_xml_namespaces_clause14970);
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14973);
            	        concatenation_wrapper1112=concatenation_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1112.tree);


            	        this->followPush(FOLLOW_column_alias_in_xml_namespaces_clause14975);
            	        column_alias1113=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias1113.tree);


            	    }
            	    break;

            	default:
            	    goto loop358;	/* break out of the loop */
            	    break;
                }
            }
            loop358: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:1367:13: ( ( default_key )=> xml_general_default_part )?
            {
                ANTLR_UINT32 alt359=2;
                {
                    ANTLR_UINT32 LA359_0 = this->LA(1);
                    if ( (LA359_0 == SQL92_RESERVED_DEFAULT) && (this->msynpred( antlr3::ClassForwarder<synpred53_OracleDML>() )))
                    {
                        alt359=1;
                    }
                }
                switch (alt359)
                {
            	case 1:
            	    // OracleDML.g:1367:14: ( default_key )=> xml_general_default_part
            	    {
            	        this->followPush(FOLLOW_xml_general_default_part_in_xml_namespaces_clause14997);
            	        xml_general_default_part1114=xml_general_default_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_general_default_part1114.tree);


            	    }
            	    break;

                }
            }

            RIGHT_PAREN1115 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause15009);
            if  (this->hasException())
            {
                goto rulexml_namespaces_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN1115_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1115));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1115_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_namespaces_clauseEx; /* Prevent compiler warnings */
    rulexml_namespaces_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_namespaces_clause */

/**
 * $ANTLR start xml_table_column
 * OracleDML.g:1371:1: xml_table_column : xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? ) -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? ) ;
 */
OracleDML::xml_table_column_return
OracleDML::xml_table_column()
{
    OracleDML::xml_table_column_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLCommons::xml_column_name_return xml_column_name1116;
    ImplTraits::TreeTypePtr::pointer xml_column_name1116_last = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key1117;
    ImplTraits::TreeTypePtr::pointer for_key1117_last = NULL;
    OracleDML_OracleDMLKeys::ordinality_key_return ordinality_key1118;
    ImplTraits::TreeTypePtr::pointer ordinality_key1118_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec1119;
    ImplTraits::TreeTypePtr::pointer type_spec1119_last = NULL;
    OracleDML_OracleDMLKeys::path_key_return path_key1120;
    ImplTraits::TreeTypePtr::pointer path_key1120_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1121;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1121_last = NULL;
    OracleDML::xml_general_default_part_return xml_general_default_part1122;
    ImplTraits::TreeTypePtr::pointer xml_general_default_part1122_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_type_spec(get_psrstate()->get_treeAdaptor(), "rule type_spec");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation_wrapper(get_psrstate()->get_treeAdaptor(), "rule concatenation_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_xml_column_name(get_psrstate()->get_treeAdaptor(), "rule xml_column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_path_key(get_psrstate()->get_treeAdaptor(), "rule path_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_ordinality_key(get_psrstate()->get_treeAdaptor(), "rule ordinality_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_xml_general_default_part(get_psrstate()->get_treeAdaptor(), "rule xml_general_default_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1372:5: ( xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? ) -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? ) )
        // OracleDML.g:1372:10: xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? )
        {
            this->followPush(FOLLOW_xml_column_name_in_xml_table_column15029);
            xml_column_name1116=xml_column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_table_columnEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                xml_column_name1116_last = xml_column_name1116.tree.get();
                stream_xml_column_name.add(xml_column_name1116.tree);
            }

            // OracleDML.g:1373:5: ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? )
            {
                ANTLR_UINT32 alt362=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_FOR:
                	{
                		alt362=1;
                	}
                    break;
                case DELIMITED_ID:
                case REGULAR_ID:
                case SQL92_RESERVED_DATE:
                	{
                		alt362=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 362 );
                    ex->set_state( 0 );


                    goto rulexml_table_columnEx;

                }

                switch (alt362)
                {
            	case 1:
            	    // OracleDML.g:1373:10: for_key ordinality_key
            	    {
            	        this->followPush(FOLLOW_for_key_in_xml_table_column15040);
            	        for_key1117=for_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_table_columnEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_key1117_last = for_key1117.tree.get();
            	            stream_for_key.add(for_key1117.tree);
            	        }

            	        this->followPush(FOLLOW_ordinality_key_in_xml_table_column15042);
            	        ordinality_key1118=ordinality_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_table_columnEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            ordinality_key1118_last = ordinality_key1118.tree.get();
            	            stream_ordinality_key.add(ordinality_key1118.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1374:10: type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )?
            	    {
            	        this->followPush(FOLLOW_type_spec_in_xml_table_column15053);
            	        type_spec1119=type_spec();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_table_columnEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            type_spec1119_last = type_spec1119.tree.get();
            	            stream_type_spec.add(type_spec1119.tree);
            	        }

            	        // OracleDML.g:1374:20: ( path_key concatenation_wrapper )?
            	        {
            	            ANTLR_UINT32 alt360=2;
            	            {
            	                ANTLR_UINT32 LA360_0 = this->LA(1);
            	                if ( (LA360_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "PATH")))
            	                {
            	                    alt360=1;
            	                }
            	            }
            	            switch (alt360)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1374:21: path_key concatenation_wrapper
            	        	    {
            	        	        this->followPush(FOLLOW_path_key_in_xml_table_column15056);
            	        	        path_key1120=path_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_table_columnEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            path_key1120_last = path_key1120.tree.get();
            	        	            stream_path_key.add(path_key1120.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_concatenation_wrapper_in_xml_table_column15058);
            	        	        concatenation_wrapper1121=concatenation_wrapper();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_table_columnEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            concatenation_wrapper1121_last = concatenation_wrapper1121.tree.get();
            	        	            stream_concatenation_wrapper.add(concatenation_wrapper1121.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:1374:54: ( ( default_key )=> xml_general_default_part )?
            	        {
            	            ANTLR_UINT32 alt361=2;
            	            {
            	                ANTLR_UINT32 LA361_0 = this->LA(1);
            	                if ( (LA361_0 == SQL92_RESERVED_DEFAULT) && (this->msynpred( antlr3::ClassForwarder<synpred54_OracleDML>() )))
            	                {
            	                    alt361=1;
            	                }
            	            }
            	            switch (alt361)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1374:55: ( default_key )=> xml_general_default_part
            	        	    {
            	        	        this->followPush(FOLLOW_xml_general_default_part_in_xml_table_column15068);
            	        	        xml_general_default_part1122=xml_general_default_part();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_table_columnEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            xml_general_default_part1122_last = xml_general_default_part1122.tree.get();
            	        	            stream_xml_general_default_part.add(xml_general_default_part1122.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: xml_general_default_part, concatenation_wrapper, ordinality_key, type_spec, xml_column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1376:9: -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? )
            {
            	// OracleDML.g:1376:12: ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_COLUMN, "XML_COLUMN"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_xml_column_name.nextTree());
            	// OracleDML.g:1376:41: ( ordinality_key )?
            	if ( stream_ordinality_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_ordinality_key.nextTree());
            	}
            	stream_ordinality_key.reset();

            	// OracleDML.g:1376:57: ( type_spec )?
            	if ( stream_type_spec.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_type_spec.nextTree());
            	}
            	stream_type_spec.reset();

            	// OracleDML.g:1376:68: ( concatenation_wrapper )?
            	if ( stream_concatenation_wrapper.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation_wrapper.nextTree());
            	}
            	stream_concatenation_wrapper.reset();

            	// OracleDML.g:1376:91: ( xml_general_default_part )?
            	if ( stream_xml_general_default_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_xml_general_default_part.nextTree());
            	}
            	stream_xml_general_default_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_table_columnEx; /* Prevent compiler warnings */
    rulexml_table_columnEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_table_column */

/**
 * $ANTLR start xml_general_default_part
 * OracleDML.g:1379:1: xml_general_default_part : default_key ^ concatenation_wrapper ;
 */
OracleDML::xml_general_default_part_return
OracleDML::xml_general_default_part()
{
    OracleDML::xml_general_default_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::default_key_return default_key1123;
    ImplTraits::TreeTypePtr::pointer default_key1123_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1124;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1124_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1380:5: ( default_key ^ concatenation_wrapper )
        // OracleDML.g:1380:10: default_key ^ concatenation_wrapper
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_default_key_in_xml_general_default_part15124);
            default_key1123=default_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_general_default_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(default_key1123.tree, root_0);

            this->followPush(FOLLOW_concatenation_wrapper_in_xml_general_default_part15127);
            concatenation_wrapper1124=concatenation_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_general_default_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1124.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_general_default_partEx; /* Prevent compiler warnings */
    rulexml_general_default_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_general_default_part */

/**
 * $ANTLR start xml_multiuse_expression_element
 * OracleDML.g:1383:1: xml_multiuse_expression_element : expression ( as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation ) )? -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) ) -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) ) -> ^( XML_ELEMENT ^( EXPR expression ) ) ;
 */
OracleDML::xml_multiuse_expression_element_return
OracleDML::xml_multiuse_expression_element()
{
    OracleDML::xml_multiuse_expression_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression1125;
    ImplTraits::TreeTypePtr::pointer expression1125_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key1126;
    ImplTraits::TreeTypePtr::pointer as_key1126_last = NULL;
    OracleDML_OracleDMLCommons::id_expression_return id_expression1127;
    ImplTraits::TreeTypePtr::pointer id_expression1127_last = NULL;
    OracleDML_OracleDMLKeys::evalname_key_return evalname_key1128;
    ImplTraits::TreeTypePtr::pointer evalname_key1128_last = NULL;
    OracleDML::concatenation_return concatenation1129;
    ImplTraits::TreeTypePtr::pointer concatenation1129_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_evalname_key(get_psrstate()->get_treeAdaptor(), "rule evalname_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_id_expression(get_psrstate()->get_treeAdaptor(), "rule id_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_as_key(get_psrstate()->get_treeAdaptor(), "rule as_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1385:5: ( expression ( as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation ) )? -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) ) -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) ) -> ^( XML_ELEMENT ^( EXPR expression ) ) )
        // OracleDML.g:1385:10: expression ( as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation ) )?
        {
            this->followPush(FOLLOW_expression_in_xml_multiuse_expression_element15155);
            expression1125=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_multiuse_expression_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression1125_last = expression1125.tree.get();
                stream_expression.add(expression1125.tree);
            }

            // OracleDML.g:1385:21: ( as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation ) )?
            {
                ANTLR_UINT32 alt364=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_AS:
                    	{
                    		alt364=1;
                    	}
                        break;
                }

                switch (alt364)
                {
            	case 1:
            	    // OracleDML.g:1385:22: as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation )
            	    {
            	        this->followPush(FOLLOW_as_key_in_xml_multiuse_expression_element15158);
            	        as_key1126=as_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_multiuse_expression_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            as_key1126_last = as_key1126.tree.get();
            	            stream_as_key.add(as_key1126.tree);
            	        }

            	        // OracleDML.g:1385:29: ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation )
            	        {
            	            ANTLR_UINT32 alt363=2;
            	            switch ( this->LA(1) )
            	            {
            	            case REGULAR_ID:
            	            	{
            	            		{
            	            		    ANTLR_UINT32 LA363_1 = this->LA(2);
            	            		    if ( (LA363_1 == COMMA || LA363_1 == RIGHT_PAREN))
            	            		    {
            	            		        alt363=1;
            	            		    }
            	            		    else if ( (LA363_1 == APPROXIMATE_NUM_LIT || LA363_1 == BINDVAR || ((LA363_1 >= CHAR_STRING) && (LA363_1 <= CHAR_STRING_PERL)) || LA363_1 == COLON || LA363_1 == DELIMITED_ID || LA363_1 == EXACT_NUM_LIT || LA363_1 == INTRODUCER || LA363_1 == LEFT_PAREN || LA363_1 == MINUS_SIGN || LA363_1 == NATIONAL_CHAR_STRING_LIT || ((LA363_1 >= PLSQL_NON_RESERVED_CAST) && (LA363_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA363_1 == PLUS_SIGN || LA363_1 == REGULAR_ID || LA363_1 == SQL92_RESERVED_ALL || LA363_1 == SQL92_RESERVED_ANY || LA363_1 == SQL92_RESERVED_CASE || LA363_1 == SQL92_RESERVED_DATE || LA363_1 == SQL92_RESERVED_DEFAULT || LA363_1 == SQL92_RESERVED_DISTINCT || ((LA363_1 >= SQL92_RESERVED_EXISTS) && (LA363_1 <= SQL92_RESERVED_FALSE)) || LA363_1 == SQL92_RESERVED_NULL || LA363_1 == SQL92_RESERVED_PRIOR || LA363_1 == SQL92_RESERVED_TRUE || LA363_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "EVALNAME")))
            	            		    {
            	            		        alt363=2;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 363 );
            	            		        ex->set_state( 1 );


            	            		        goto rulexml_multiuse_expression_elementEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case DELIMITED_ID:
            	            	{
            	            		alt363=1;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 363 );
            	                ex->set_state( 0 );


            	                goto rulexml_multiuse_expression_elementEx;

            	            }

            	            switch (alt363)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1385:30: id_expression[T_UNKNOWN,T_USE]
            	        	    {
            	        	        this->followPush(FOLLOW_id_expression_in_xml_multiuse_expression_element15161);
            	        	        id_expression1127=id_expression(T_UNKNOWN, T_USE);

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_multiuse_expression_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            id_expression1127_last = id_expression1127.tree.get();
            	        	            stream_id_expression.add(id_expression1127.tree);
            	        	        }

            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            mode = 1;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:1385:73: evalname_key concatenation
            	        	    {
            	        	        this->followPush(FOLLOW_evalname_key_in_xml_multiuse_expression_element15166);
            	        	        evalname_key1128=evalname_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_multiuse_expression_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            evalname_key1128_last = evalname_key1128.tree.get();
            	        	            stream_evalname_key.add(evalname_key1128.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_concatenation_in_xml_multiuse_expression_element15168);
            	        	        concatenation1129=concatenation();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_multiuse_expression_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            concatenation1129_last = concatenation1129.tree.get();
            	        	            stream_concatenation.add(concatenation1129.tree);
            	        	        }

            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            mode = 2;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: evalname_key, expression, expression, expression, id_expression, concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1386:9: -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) )
            if (mode == 1) {
            	// OracleDML.g:1386:25: ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ELEMENT, "XML_ELEMENT"), root_1);
            	// OracleDML.g:1386:39: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:1386:58: ^( XML_ALIAS[$as_key.start] id_expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ALIAS, (as_key1126.start)), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_id_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1387:9: -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) )
            if (mode == 2) {
            	// OracleDML.g:1387:25: ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ELEMENT, "XML_ELEMENT"), root_1);
            	// OracleDML.g:1387:39: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:1387:58: ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ALIAS, (as_key1126.start)), root_2);
            	// OracleDML.g:1387:85: ^( evalname_key ^( EXPR concatenation ) )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_evalname_key.nextNode(), root_3);
            	// OracleDML.g:1387:100: ^( EXPR concatenation )
            	{
            	ImplTraits::TreeTypePtr root_4 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_4 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_4);
            	get_psrstate()->get_treeAdaptor()->addChild(root_4, stream_concatenation.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, root_4);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1388:9: -> ^( XML_ELEMENT ^( EXPR expression ) )
            {
            	// OracleDML.g:1388:12: ^( XML_ELEMENT ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ELEMENT, "XML_ELEMENT"), root_1);
            	// OracleDML.g:1388:26: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_multiuse_expression_elementEx; /* Prevent compiler warnings */
    rulexml_multiuse_expression_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_multiuse_expression_element */

/**
 * $ANTLR start xmlroot_param_version_part
 * OracleDML.g:1391:1: xmlroot_param_version_part : version_key ^ ( no_key value_key | expression_wrapper ) ;
 */
OracleDML::xmlroot_param_version_part_return
OracleDML::xmlroot_param_version_part()
{
    OracleDML::xmlroot_param_version_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::version_key_return version_key1130;
    ImplTraits::TreeTypePtr::pointer version_key1130_last = NULL;
    OracleDML_OracleDMLKeys::no_key_return no_key1131;
    ImplTraits::TreeTypePtr::pointer no_key1131_last = NULL;
    OracleDML_OracleDMLKeys::value_key_return value_key1132;
    ImplTraits::TreeTypePtr::pointer value_key1132_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper1133;
    ImplTraits::TreeTypePtr::pointer expression_wrapper1133_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1392:5: ( version_key ^ ( no_key value_key | expression_wrapper ) )
        // OracleDML.g:1392:10: version_key ^ ( no_key value_key | expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_version_key_in_xmlroot_param_version_part15279);
            version_key1130=version_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlroot_param_version_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(version_key1130.tree, root_0);

            // OracleDML.g:1392:23: ( no_key value_key | expression_wrapper )
            {
                ANTLR_UINT32 alt365=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA365_1 = this->LA(2);
                		    if ( (LA365_1 == REGULAR_ID))
                		    {
                		        {
                		            ANTLR_UINT32 LA365_3 = this->LA(3);
                		            if ( ((toUpper(LT(1)->getText()) == "NO")))
                		            {
                		                alt365=1;
                		            }
                		            else if ( (true))
                		            {
                		                alt365=2;
                		            }
                		            else
                		            {
                		                if (this->get_backtracking()>0)
                		                {
                		                    this->set_failedflag( true );
                		                    return retval;
                		                }


                		                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		                ex->set_decisionNum( 365 );
                		                ex->set_state( 3 );


                		                goto rulexmlroot_param_version_partEx;

                		            }
                		        }
                		    }
                		    else if ( (LA365_1 == MINUS_SIGN || LA365_1 == PLUS_SIGN))
                		    {
                		        alt365=2;
                		    }
                		    else if ( (LA365_1 == PLSQL_NON_RESERVED_CONNECT_BY_ROOT || LA365_1 == SQL92_RESERVED_ALL || LA365_1 == SQL92_RESERVED_DISTINCT || LA365_1 == SQL92_RESERVED_PRIOR) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
                		    {
                		        alt365=2;
                		    }
                		    else if ( (LA365_1 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "INTERVAL"))||(( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))))
                		    {
                		        alt365=2;
                		    }
                		    else if ( (LA365_1 == SQL92_RESERVED_CASE))
                		    {
                		        alt365=2;
                		    }
                		    else if ( (LA365_1 == PLSQL_NON_RESERVED_CAST || LA365_1 == SQL92_RESERVED_ANY || LA365_1 == SQL92_RESERVED_EXISTS) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
                		    {
                		        alt365=2;
                		    }
                		    else if ( (LA365_1 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "INTERVAL"))||(( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))))
                		    {
                		        alt365=2;
                		    }
                		    else if ( (LA365_1 == BINDVAR || LA365_1 == COLON))
                		    {
                		        alt365=2;
                		    }
                		    else if ( (LA365_1 == APPROXIMATE_NUM_LIT || LA365_1 == EXACT_NUM_LIT || LA365_1 == SQL92_RESERVED_DATE || LA365_1 == UNSIGNED_INTEGER) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
                		    {
                		        alt365=2;
                		    }
                		    else if ( (((LA365_1 >= CHAR_STRING) && (LA365_1 <= CHAR_STRING_PERL)) || LA365_1 == NATIONAL_CHAR_STRING_LIT))
                		    {
                		        alt365=2;
                		    }
                		    else if ( (LA365_1 == SQL92_RESERVED_DEFAULT || LA365_1 == SQL92_RESERVED_FALSE || LA365_1 == SQL92_RESERVED_NULL || LA365_1 == SQL92_RESERVED_TRUE) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
                		    {
                		        alt365=2;
                		    }
                		    else if ( (LA365_1 == ASTERISK || LA365_1 == CARRET_OPERATOR_PART || LA365_1 == COMMA || LA365_1 == CONCATENATION_OP || LA365_1 == EQUALS_OP || LA365_1 == EXCLAMATION_OPERATOR_PART || ((LA365_1 >= GREATER_THAN_OP) && (LA365_1 <= GREATER_THAN_OR_EQUALS_OP)) || ((LA365_1 >= LEFT_BRACKET) && (LA365_1 <= LEFT_PAREN)) || ((LA365_1 >= LESS_THAN_OP) && (LA365_1 <= LESS_THAN_OR_EQUALS_OP)) || LA365_1 == NOT_EQUAL_OP || LA365_1 == PERIOD || LA365_1 == PLSQL_NON_RESERVED_MULTISET || LA365_1 == RIGHT_PAREN || LA365_1 == SOLIDUS || LA365_1 == SQL92_RESERVED_AND || LA365_1 == SQL92_RESERVED_BETWEEN || LA365_1 == SQL92_RESERVED_IN || ((LA365_1 >= SQL92_RESERVED_IS) && (LA365_1 <= SQL92_RESERVED_NOT)) || LA365_1 == SQL92_RESERVED_OR || LA365_1 == VERTICAL_BAR))
                		    {
                		        alt365=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 365 );
                		        ex->set_state( 1 );


                		        goto rulexmlroot_param_version_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt365=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 365 );
                    ex->set_state( 0 );


                    goto rulexmlroot_param_version_partEx;

                }

                switch (alt365)
                {
            	case 1:
            	    // OracleDML.g:1392:24: no_key value_key
            	    {
            	        this->followPush(FOLLOW_no_key_in_xmlroot_param_version_part15283);
            	        no_key1131=no_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_version_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, no_key1131.tree);


            	        this->followPush(FOLLOW_value_key_in_xmlroot_param_version_part15285);
            	        value_key1132=value_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_version_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, value_key1132.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1392:41: expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_xmlroot_param_version_part15287);
            	        expression_wrapper1133=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_version_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper1133.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlroot_param_version_partEx; /* Prevent compiler warnings */
    rulexmlroot_param_version_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlroot_param_version_part */

/**
 * $ANTLR start xmlroot_param_standalone_part
 * OracleDML.g:1395:1: xmlroot_param_standalone_part : standalone_key ^ ( yes_key | no_key ( value_key )? ) ;
 */
OracleDML::xmlroot_param_standalone_part_return
OracleDML::xmlroot_param_standalone_part()
{
    OracleDML::xmlroot_param_standalone_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::standalone_key_return standalone_key1134;
    ImplTraits::TreeTypePtr::pointer standalone_key1134_last = NULL;
    OracleDML_OracleDMLKeys::yes_key_return yes_key1135;
    ImplTraits::TreeTypePtr::pointer yes_key1135_last = NULL;
    OracleDML_OracleDMLKeys::no_key_return no_key1136;
    ImplTraits::TreeTypePtr::pointer no_key1136_last = NULL;
    OracleDML_OracleDMLKeys::value_key_return value_key1137;
    ImplTraits::TreeTypePtr::pointer value_key1137_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1396:5: ( standalone_key ^ ( yes_key | no_key ( value_key )? ) )
        // OracleDML.g:1396:10: standalone_key ^ ( yes_key | no_key ( value_key )? )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_standalone_key_in_xmlroot_param_standalone_part15308);
            standalone_key1134=standalone_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlroot_param_standalone_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(standalone_key1134.tree, root_0);

            // OracleDML.g:1396:26: ( yes_key | no_key ( value_key )? )
            {
                ANTLR_UINT32 alt367=2;
                {
                    ANTLR_UINT32 LA367_0 = this->LA(1);
                    if ( (LA367_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "NO"))||((toUpper(LT(1)->getText()) == "YES")))))
                    {
                        {
                            ANTLR_UINT32 LA367_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "YES")))
                            {
                                alt367=1;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "NO")))
                            {
                                alt367=2;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 367 );
                                ex->set_state( 1 );


                                goto rulexmlroot_param_standalone_partEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 367 );
                        ex->set_state( 0 );


                        goto rulexmlroot_param_standalone_partEx;

                    }
                }
                switch (alt367)
                {
            	case 1:
            	    // OracleDML.g:1396:27: yes_key
            	    {
            	        this->followPush(FOLLOW_yes_key_in_xmlroot_param_standalone_part15312);
            	        yes_key1135=yes_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_standalone_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, yes_key1135.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1396:35: no_key ( value_key )?
            	    {
            	        this->followPush(FOLLOW_no_key_in_xmlroot_param_standalone_part15314);
            	        no_key1136=no_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_standalone_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, no_key1136.tree);


            	        // OracleDML.g:1396:42: ( value_key )?
            	        {
            	            ANTLR_UINT32 alt366=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		alt366=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt366)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1396:42: value_key
            	        	    {
            	        	        this->followPush(FOLLOW_value_key_in_xmlroot_param_standalone_part15316);
            	        	        value_key1137=value_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexmlroot_param_standalone_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, value_key1137.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlroot_param_standalone_partEx; /* Prevent compiler warnings */
    rulexmlroot_param_standalone_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlroot_param_standalone_part */

/**
 * $ANTLR start xmlserialize_param_enconding_part
 * OracleDML.g:1399:1: xmlserialize_param_enconding_part : encoding_key ^ concatenation_wrapper ;
 */
OracleDML::xmlserialize_param_enconding_part_return
OracleDML::xmlserialize_param_enconding_part()
{
    OracleDML::xmlserialize_param_enconding_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::encoding_key_return encoding_key1138;
    ImplTraits::TreeTypePtr::pointer encoding_key1138_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1139;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1139_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1400:5: ( encoding_key ^ concatenation_wrapper )
        // OracleDML.g:1400:10: encoding_key ^ concatenation_wrapper
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_encoding_key_in_xmlserialize_param_enconding_part15338);
            encoding_key1138=encoding_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlserialize_param_enconding_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(encoding_key1138.tree, root_0);

            this->followPush(FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part15341);
            concatenation_wrapper1139=concatenation_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlserialize_param_enconding_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1139.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlserialize_param_enconding_partEx; /* Prevent compiler warnings */
    rulexmlserialize_param_enconding_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlserialize_param_enconding_part */

/**
 * $ANTLR start xmlserialize_param_version_part
 * OracleDML.g:1403:1: xmlserialize_param_version_part : version_key ^ concatenation_wrapper ;
 */
OracleDML::xmlserialize_param_version_part_return
OracleDML::xmlserialize_param_version_part()
{
    OracleDML::xmlserialize_param_version_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::version_key_return version_key1140;
    ImplTraits::TreeTypePtr::pointer version_key1140_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1141;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1141_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1404:5: ( version_key ^ concatenation_wrapper )
        // OracleDML.g:1404:10: version_key ^ concatenation_wrapper
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_version_key_in_xmlserialize_param_version_part15361);
            version_key1140=version_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlserialize_param_version_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(version_key1140.tree, root_0);

            this->followPush(FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part15364);
            concatenation_wrapper1141=concatenation_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlserialize_param_version_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1141.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlserialize_param_version_partEx; /* Prevent compiler warnings */
    rulexmlserialize_param_version_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlserialize_param_version_part */

/**
 * $ANTLR start xmlserialize_param_ident_part
 * OracleDML.g:1407:1: xmlserialize_param_ident_part : ( no_key indent_key | indent_key ^ ( size_key ! EQUALS_OP ! concatenation_wrapper )? );
 */
OracleDML::xmlserialize_param_ident_part_return
OracleDML::xmlserialize_param_ident_part()
{
    OracleDML::xmlserialize_param_ident_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP1146 = NULL;
    OracleDML_OracleDMLKeys::no_key_return no_key1142;
    ImplTraits::TreeTypePtr::pointer no_key1142_last = NULL;
    OracleDML_OracleDMLKeys::indent_key_return indent_key1143;
    ImplTraits::TreeTypePtr::pointer indent_key1143_last = NULL;
    OracleDML_OracleDMLKeys::indent_key_return indent_key1144;
    ImplTraits::TreeTypePtr::pointer indent_key1144_last = NULL;
    OracleDML_OracleDMLKeys::size_key_return size_key1145;
    ImplTraits::TreeTypePtr::pointer size_key1145_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1147;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1147_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP1146_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1408:5: ( no_key indent_key | indent_key ^ ( size_key ! EQUALS_OP ! concatenation_wrapper )? )

            ANTLR_UINT32 alt369;

            alt369=2;

            {
                ANTLR_UINT32 LA369_0 = this->LA(1);
                if ( (LA369_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "NO")))))
                {
                    {
                        ANTLR_UINT32 LA369_1 = this->LA(2);
                        if ( (LA369_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "NO")))))
                        {
                            {
                                ANTLR_UINT32 LA369_2 = this->LA(3);
                                if ( (LA369_2 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "NO")))))
                                {
                                    {
                                        ANTLR_UINT32 LA369_4 = this->LA(4);
                                        if ( (LA369_4 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NO")))
                                        {
                                            alt369=1;
                                        }
                                        else if ( (LA369_4 == RIGHT_PAREN) && ((toUpper(LT(1)->getText()) == "INDENT")))
                                        {
                                            alt369=2;
                                        }
                                        else
                                        {
                                            if (this->get_backtracking()>0)
                                            {
                                                this->set_failedflag( true );
                                                return retval;
                                            }


                                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                            ex->set_decisionNum( 369 );
                                            ex->set_state( 4 );


                                            goto rulexmlserialize_param_ident_partEx;

                                        }
                                    }
                                }
                                else if ( (LA369_2 == RIGHT_PAREN) && ((toUpper(LT(1)->getText()) == "NO")))
                                {
                                    alt369=1;
                                }
                                else
                                {
                                    if (this->get_backtracking()>0)
                                    {
                                        this->set_failedflag( true );
                                        return retval;
                                    }


                                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                    ex->set_decisionNum( 369 );
                                    ex->set_state( 2 );


                                    goto rulexmlserialize_param_ident_partEx;

                                }
                            }
                        }
                        else if ( (LA369_1 == RIGHT_PAREN || LA369_1 == SQL92_RESERVED_SIZE) && ((toUpper(LT(1)->getText()) == "INDENT")))
                        {
                            alt369=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 369 );
                            ex->set_state( 1 );


                            goto rulexmlserialize_param_ident_partEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 369 );
                    ex->set_state( 0 );


                    goto rulexmlserialize_param_ident_partEx;

                }
            }
            switch (alt369)
            {
        	case 1:
        	    // OracleDML.g:1408:10: no_key indent_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_no_key_in_xmlserialize_param_ident_part15384);
        	        no_key1142=no_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulexmlserialize_param_ident_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, no_key1142.tree);


        	        this->followPush(FOLLOW_indent_key_in_xmlserialize_param_ident_part15386);
        	        indent_key1143=indent_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulexmlserialize_param_ident_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, indent_key1143.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1409:10: indent_key ^ ( size_key ! EQUALS_OP ! concatenation_wrapper )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_indent_key_in_xmlserialize_param_ident_part15397);
        	        indent_key1144=indent_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulexmlserialize_param_ident_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(indent_key1144.tree, root_0);

        	        // OracleDML.g:1409:22: ( size_key ! EQUALS_OP ! concatenation_wrapper )?
        	        {
        	            ANTLR_UINT32 alt368=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_SIZE:
        	                	{
        	                		alt368=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt368)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1409:23: size_key ! EQUALS_OP ! concatenation_wrapper
        	        	    {
        	        	        this->followPush(FOLLOW_size_key_in_xmlserialize_param_ident_part15401);
        	        	        size_key1145=size_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulexmlserialize_param_ident_partEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        EQUALS_OP1146 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part15404);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulexmlserialize_param_ident_partEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part15407);
        	        	        concatenation_wrapper1147=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulexmlserialize_param_ident_partEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1147.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlserialize_param_ident_partEx; /* Prevent compiler warnings */
    rulexmlserialize_param_ident_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlserialize_param_ident_part */

// $ANTLR start synpredRule synpred1_OracleDML
void OracleDML::msynpred1_OracleDML_fragment(  )
{
    // OracleDML.g:156:28: ( order_key ( siblings_key )? by_key )
    // OracleDML.g:156:29: order_key ( siblings_key )? by_key
    {
        this->followPush(FOLLOW_order_key_in_synpred1_OracleDML1009);
        order_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred1_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:156:39: ( siblings_key )?
        {
            ANTLR_UINT32 alt370=2;
            {
                ANTLR_UINT32 LA370_0 = this->LA(1);
                if ( (LA370_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SIBLINGS")))
                {
                    alt370=1;
                }
            }
            switch (alt370)
            {
        	case 1:
        	    // OracleDML.g:156:39: siblings_key
        	    {
        	        this->followPush(FOLLOW_siblings_key_in_synpred1_OracleDML1011);
        	        siblings_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred1_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

        this->followPush(FOLLOW_by_key_in_synpred1_OracleDML1014);
        by_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred1_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred1_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred1_OracleDMLEx: ;
}
// $ANTLR end synpred1_OracleDML

// $ANTLR start synpredRule synpred2_OracleDML
void OracleDML::msynpred2_OracleDML_fragment(  )
{
    {
        //  OracleDML.g:212:10: ( distinct_key | unique_key | all_key )

        ANTLR_UINT32 alt371;

        alt371=3;

        switch ( this->LA(1) )
        {
        case SQL92_RESERVED_DISTINCT:
        	{
        		alt371=1;
        	}
            break;
        case SQL92_RESERVED_UNIQUE:
        	{
        		alt371=2;
        	}
            break;
        case SQL92_RESERVED_ALL:
        	{
        		alt371=3;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 371 );
            ex->set_state( 0 );


            goto rulesynpred2_OracleDMLEx;

        }

        switch (alt371)
        {
    	case 1:
    	    // OracleDML.g:212:11: distinct_key
    	    {
    	        this->followPush(FOLLOW_distinct_key_in_synpred2_OracleDML1628);
    	        distinct_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred2_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;
    	case 2:
    	    // OracleDML.g:212:24: unique_key
    	    {
    	        this->followPush(FOLLOW_unique_key_in_synpred2_OracleDML1630);
    	        unique_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred2_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;
    	case 3:
    	    // OracleDML.g:212:35: all_key
    	    {
    	        this->followPush(FOLLOW_all_key_in_synpred2_OracleDML1632);
    	        all_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred2_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;

        }
    }

goto rulesynpred2_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred2_OracleDMLEx: ;
}
// $ANTLR end synpred2_OracleDML

// $ANTLR start synpredRule synpred3_OracleDML
void OracleDML::msynpred3_OracleDML_fragment(  )
{
    // OracleDML.g:235:10: ( tableview_name PERIOD ASTERISK )
    // OracleDML.g:235:11: tableview_name PERIOD ASTERISK
    {
        this->followPush(FOLLOW_tableview_name_in_synpred3_OracleDML1869);
        tableview_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred3_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



         this->matchToken(PERIOD, &FOLLOW_PERIOD_in_synpred3_OracleDML1871);
        if  (this->hasException())
        {
            goto rulesynpred3_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



         this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_synpred3_OracleDML1873);
        if  (this->hasException())
        {
            goto rulesynpred3_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred3_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred3_OracleDMLEx: ;
}
// $ANTLR end synpred3_OracleDML

// $ANTLR start synpredRule synpred4_OracleDML
void OracleDML::msynpred4_OracleDML_fragment(  )
{
    // OracleDML.g:272:10: ( LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:272:11: LEFT_PAREN ( select_key | with_key )
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred4_OracleDML2095);
        if  (this->hasException())
        {
            goto rulesynpred4_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:272:22: ( select_key | with_key )
        {
            ANTLR_UINT32 alt372=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt372=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt372=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 372 );
                ex->set_state( 0 );


                goto rulesynpred4_OracleDMLEx;

            }

            switch (alt372)
            {
        	case 1:
        	    // OracleDML.g:272:23: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred4_OracleDML2098);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred4_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:272:34: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred4_OracleDML2100);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred4_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred4_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred4_OracleDMLEx: ;
}
// $ANTLR end synpred4_OracleDML

// $ANTLR start synpredRule synpred5_OracleDML
void OracleDML::msynpred5_OracleDML_fragment(  )
{
    // OracleDML.g:273:10: ( LEFT_PAREN )
    // OracleDML.g:273:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred5_OracleDML2118);
        if  (this->hasException())
        {
            goto rulesynpred5_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred5_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred5_OracleDMLEx: ;
}
// $ANTLR end synpred5_OracleDML

// $ANTLR start synpredRule synpred6_OracleDML
void OracleDML::msynpred6_OracleDML_fragment(  )
{
    // OracleDML.g:274:10: ( only_key LEFT_PAREN )
    // OracleDML.g:274:11: only_key LEFT_PAREN
    {
        this->followPush(FOLLOW_only_key_in_synpred6_OracleDML2135);
        only_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred6_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred6_OracleDML2137);
        if  (this->hasException())
        {
            goto rulesynpred6_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred6_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred6_OracleDMLEx: ;
}
// $ANTLR end synpred6_OracleDML

// $ANTLR start synpredRule synpred10_OracleDML
void OracleDML::msynpred10_OracleDML_fragment(  )
{
    // OracleDML.g:340:10: ( LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:340:11: LEFT_PAREN ( select_key | with_key )
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred10_OracleDML2851);
        if  (this->hasException())
        {
            goto rulesynpred10_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:340:22: ( select_key | with_key )
        {
            ANTLR_UINT32 alt374=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt374=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt374=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 374 );
                ex->set_state( 0 );


                goto rulesynpred10_OracleDMLEx;

            }

            switch (alt374)
            {
        	case 1:
        	    // OracleDML.g:340:23: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred10_OracleDML2854);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred10_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:340:34: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred10_OracleDML2856);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred10_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred10_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred10_OracleDMLEx: ;
}
// $ANTLR end synpred10_OracleDML

// $ANTLR start synpredRule synpred11_OracleDML
void OracleDML::msynpred11_OracleDML_fragment(  )
{
    // OracleDML.g:341:10: ( LEFT_PAREN )
    // OracleDML.g:341:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred11_OracleDML2878);
        if  (this->hasException())
        {
            goto rulesynpred11_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred11_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred11_OracleDMLEx: ;
}
// $ANTLR end synpred11_OracleDML

// $ANTLR start synpredRule synpred12_OracleDML
void OracleDML::msynpred12_OracleDML_fragment(  )
{
    // OracleDML.g:379:18: ( select_key )
    // OracleDML.g:379:19: select_key
    {
        this->followPush(FOLLOW_select_key_in_synpred12_OracleDML3366);
        select_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred12_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred12_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred12_OracleDMLEx: ;
}
// $ANTLR end synpred12_OracleDML

// $ANTLR start synpredRule synpred13_OracleDML
void OracleDML::msynpred13_OracleDML_fragment(  )
{
    // OracleDML.g:380:18: ( any_key )
    // OracleDML.g:380:19: any_key
    {
        this->followPush(FOLLOW_any_key_in_synpred13_OracleDML3392);
        any_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred13_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred13_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred13_OracleDMLEx: ;
}
// $ANTLR end synpred13_OracleDML

// $ANTLR start synpredRule synpred14_OracleDML
void OracleDML::msynpred14_OracleDML_fragment(  )
{
    // OracleDML.g:396:10: ( LEFT_PAREN )
    // OracleDML.g:396:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred14_OracleDML3597);
        if  (this->hasException())
        {
            goto rulesynpred14_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred14_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred14_OracleDMLEx: ;
}
// $ANTLR end synpred14_OracleDML

// $ANTLR start synpredRule synpred15_OracleDML
void OracleDML::msynpred15_OracleDML_fragment(  )
{
    // OracleDML.g:426:14: ( LEFT_PAREN )
    // OracleDML.g:426:15: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred15_OracleDML3970);
        if  (this->hasException())
        {
            goto rulesynpred15_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred15_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred15_OracleDMLEx: ;
}
// $ANTLR end synpred15_OracleDML

// $ANTLR start synpredRule synpred16_OracleDML
void OracleDML::msynpred16_OracleDML_fragment(  )
{
    // OracleDML.g:445:9: ( group_key )
    // OracleDML.g:445:10: group_key
    {
        this->followPush(FOLLOW_group_key_in_synpred16_OracleDML4201);
        group_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred16_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred16_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred16_OracleDMLEx: ;
}
// $ANTLR end synpred16_OracleDML

// $ANTLR start synpredRule synpred17_OracleDML
void OracleDML::msynpred17_OracleDML_fragment(  )
{
    // OracleDML.g:447:25: ( COMMA group_by_elements )
    // OracleDML.g:447:26: COMMA group_by_elements
    {
         this->matchToken(COMMA, &FOLLOW_COMMA_in_synpred17_OracleDML4227);
        if  (this->hasException())
        {
            goto rulesynpred17_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_group_by_elements_in_synpred17_OracleDML4229);
        group_by_elements();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred17_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred17_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred17_OracleDMLEx: ;
}
// $ANTLR end synpred17_OracleDML

// $ANTLR start synpredRule synpred18_OracleDML
void OracleDML::msynpred18_OracleDML_fragment(  )
{
    // OracleDML.g:451:9: ( having_key )
    // OracleDML.g:451:10: having_key
    {
        this->followPush(FOLLOW_having_key_in_synpred18_OracleDML4281);
        having_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred18_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred18_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred18_OracleDMLEx: ;
}
// $ANTLR end synpred18_OracleDML

// $ANTLR start synpredRule synpred19_OracleDML
void OracleDML::msynpred19_OracleDML_fragment(  )
{
    // OracleDML.g:454:25: ( COMMA group_by_elements )
    // OracleDML.g:454:26: COMMA group_by_elements
    {
         this->matchToken(COMMA, &FOLLOW_COMMA_in_synpred19_OracleDML4312);
        if  (this->hasException())
        {
            goto rulesynpred19_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_group_by_elements_in_synpred19_OracleDML4314);
        group_by_elements();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred19_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred19_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred19_OracleDMLEx: ;
}
// $ANTLR end synpred19_OracleDML

// $ANTLR start synpredRule synpred20_OracleDML
void OracleDML::msynpred20_OracleDML_fragment(  )
{
    {
        //  OracleDML.g:477:10: ( rollup_key | cube_key )

        ANTLR_UINT32 alt375;

        alt375=2;

        {
            ANTLR_UINT32 LA375_0 = this->LA(1);
            if ( (LA375_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "ROLLUP"))||((toUpper(LT(1)->getText()) == "CUBE")))))
            {
                {
                    ANTLR_UINT32 LA375_1 = this->LA(2);
                    if ( ((toUpper(LT(1)->getText()) == "ROLLUP")))
                    {
                        alt375=1;
                    }
                    else if ( ((toUpper(LT(1)->getText()) == "CUBE")))
                    {
                        alt375=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return ;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 375 );
                        ex->set_state( 1 );


                        goto rulesynpred20_OracleDMLEx;

                    }
                }
            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }


                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 375 );
                ex->set_state( 0 );


                goto rulesynpred20_OracleDMLEx;

            }
        }
        switch (alt375)
        {
    	case 1:
    	    // OracleDML.g:477:11: rollup_key
    	    {
    	        this->followPush(FOLLOW_rollup_key_in_synpred20_OracleDML4533);
    	        rollup_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred20_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;
    	case 2:
    	    // OracleDML.g:477:22: cube_key
    	    {
    	        this->followPush(FOLLOW_cube_key_in_synpred20_OracleDML4535);
    	        cube_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred20_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;

        }
    }

goto rulesynpred20_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred20_OracleDMLEx: ;
}
// $ANTLR end synpred20_OracleDML

// $ANTLR start synpredRule synpred21_OracleDML
void OracleDML::msynpred21_OracleDML_fragment(  )
{
    // OracleDML.g:478:10: ( LEFT_PAREN )
    // OracleDML.g:478:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred21_OracleDML4551);
        if  (this->hasException())
        {
            goto rulesynpred21_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred21_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred21_OracleDMLEx: ;
}
// $ANTLR end synpred21_OracleDML

// $ANTLR start synpredRule synpred22_OracleDML
void OracleDML::msynpred22_OracleDML_fragment(  )
{
    // OracleDML.g:543:34: ( all_key )
    // OracleDML.g:543:35: all_key
    {
        this->followPush(FOLLOW_all_key_in_synpred22_OracleDML5218);
        all_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred22_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred22_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred22_OracleDMLEx: ;
}
// $ANTLR end synpred22_OracleDML

// $ANTLR start synpredRule synpred23_OracleDML
void OracleDML::msynpred23_OracleDML_fragment(  )
{
    // OracleDML.g:683:13: ( when_key matched_key )
    // OracleDML.g:683:14: when_key matched_key
    {
        this->followPush(FOLLOW_when_key_in_synpred23_OracleDML6585);
        when_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred23_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_matched_key_in_synpred23_OracleDML6587);
        matched_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred23_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred23_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred23_OracleDMLEx: ;
}
// $ANTLR end synpred23_OracleDML

// $ANTLR start synpredRule synpred24_OracleDML
void OracleDML::msynpred24_OracleDML_fragment(  )
{
    // OracleDML.g:685:13: ( when_key not_key matched_key )
    // OracleDML.g:685:14: when_key not_key matched_key
    {
        this->followPush(FOLLOW_when_key_in_synpred24_OracleDML6617);
        when_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred24_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_not_key_in_synpred24_OracleDML6619);
        not_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred24_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_matched_key_in_synpred24_OracleDML6621);
        matched_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred24_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred24_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred24_OracleDMLEx: ;
}
// $ANTLR end synpred24_OracleDML

// $ANTLR start synpredRule synpred25_OracleDML
void OracleDML::msynpred25_OracleDML_fragment(  )
{
    // OracleDML.g:778:10: ( LEFT_PAREN )
    // OracleDML.g:778:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred25_OracleDML7523);
        if  (this->hasException())
        {
            goto rulesynpred25_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred25_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred25_OracleDMLEx: ;
}
// $ANTLR end synpred25_OracleDML

// $ANTLR start synpredRule synpred26_OracleDML
void OracleDML::msynpred26_OracleDML_fragment(  )
{
    // OracleDML.g:788:34: ( unlimited_key )
    // OracleDML.g:788:35: unlimited_key
    {
        this->followPush(FOLLOW_unlimited_key_in_synpred26_OracleDML7614);
        unlimited_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred26_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred26_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred26_OracleDMLEx: ;
}
// $ANTLR end synpred26_OracleDML

// $ANTLR start synpredRule synpred27_OracleDML
void OracleDML::msynpred27_OracleDML_fragment(  )
{
    // OracleDML.g:800:12: ( LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:800:13: LEFT_PAREN ( select_key | with_key )
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred27_OracleDML7771);
        if  (this->hasException())
        {
            goto rulesynpred27_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:800:24: ( select_key | with_key )
        {
            ANTLR_UINT32 alt376=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt376=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt376=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 376 );
                ex->set_state( 0 );


                goto rulesynpred27_OracleDMLEx;

            }

            switch (alt376)
            {
        	case 1:
        	    // OracleDML.g:800:25: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred27_OracleDML7774);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred27_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:800:38: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred27_OracleDML7778);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred27_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred27_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred27_OracleDMLEx: ;
}
// $ANTLR end synpred27_OracleDML

// $ANTLR start synpredRule synpred28_OracleDML
void OracleDML::msynpred28_OracleDML_fragment(  )
{
    // OracleDML.g:853:10: ( cursor_key LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:853:11: cursor_key LEFT_PAREN ( select_key | with_key )
    {
        this->followPush(FOLLOW_cursor_key_in_synpred28_OracleDML8258);
        cursor_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred28_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred28_OracleDML8260);
        if  (this->hasException())
        {
            goto rulesynpred28_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:853:33: ( select_key | with_key )
        {
            ANTLR_UINT32 alt377=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt377=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt377=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 377 );
                ex->set_state( 0 );


                goto rulesynpred28_OracleDMLEx;

            }

            switch (alt377)
            {
        	case 1:
        	    // OracleDML.g:853:34: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred28_OracleDML8263);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred28_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:853:45: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred28_OracleDML8265);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred28_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred28_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred28_OracleDMLEx: ;
}
// $ANTLR end synpred28_OracleDML

// $ANTLR start synpredRule synpred29_OracleDML
void OracleDML::msynpred29_OracleDML_fragment(  )
{
    // OracleDML.g:957:10: ( ( LEFT_PAREN )+ ( select_key | with_key ) )
    // OracleDML.g:957:11: ( LEFT_PAREN )+ ( select_key | with_key )
    {
        // OracleDML.g:957:11: ( LEFT_PAREN )+
        {
            int cnt378=0;

            for (;;)
            {
                ANTLR_UINT32 alt378=2;
        	switch ( this->LA(1) )
        	{
        	case LEFT_PAREN:
        		{
        			alt378=1;
        		}
        	    break;

        	}

        	switch (alt378)
        	{
        	    case 1:
        	        // OracleDML.g:957:11: LEFT_PAREN
        	        {
        	             this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred29_OracleDML9645);
        	            if  (this->hasException())
        	            {
        	                goto rulesynpred29_OracleDMLEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return ;
        	            }



        	        }
        	        break;

        	    default:

        		if ( cnt378 >= 1 )
        		{
        		    goto loop378;
        		}
        		if (this->get_backtracking()>0)
        		{
        		    this->set_failedflag( true );
        		    return ;
        		}

        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto rulesynpred29_OracleDMLEx;
        	}
        	cnt378++;
            }
            loop378: ;	/* Jump to here if this rule does not match */
        }

        // OracleDML.g:957:23: ( select_key | with_key )
        {
            ANTLR_UINT32 alt379=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt379=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt379=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 379 );
                ex->set_state( 0 );


                goto rulesynpred29_OracleDMLEx;

            }

            switch (alt379)
            {
        	case 1:
        	    // OracleDML.g:957:24: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred29_OracleDML9649);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred29_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:957:35: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred29_OracleDML9651);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred29_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred29_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred29_OracleDMLEx: ;
}
// $ANTLR end synpred29_OracleDML

// $ANTLR start synpredRule synpred30_OracleDML
void OracleDML::msynpred30_OracleDML_fragment(  )
{
    // OracleDML.g:995:10: ( interval_expression )
    // OracleDML.g:995:11: interval_expression
    {
        this->followPush(FOLLOW_interval_expression_in_synpred30_OracleDML10094);
        interval_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred30_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred30_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred30_OracleDMLEx: ;
}
// $ANTLR end synpred30_OracleDML

// $ANTLR start synpredRule synpred31_OracleDML
void OracleDML::msynpred31_OracleDML_fragment(  )
{
    // OracleDML.g:1014:11: ( any_key )
    // OracleDML.g:1014:12: any_key
    {
        this->followPush(FOLLOW_any_key_in_synpred31_OracleDML10334);
        any_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred31_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred31_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred31_OracleDMLEx: ;
}
// $ANTLR end synpred31_OracleDML

// $ANTLR start synpredRule synpred32_OracleDML
void OracleDML::msynpred32_OracleDML_fragment(  )
{
    // OracleDML.g:1014:59: ( any_key )
    // OracleDML.g:1014:60: any_key
    {
        this->followPush(FOLLOW_any_key_in_synpred32_OracleDML10349);
        any_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred32_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred32_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred32_OracleDMLEx: ;
}
// $ANTLR end synpred32_OracleDML

// $ANTLR start synpredRule synpred33_OracleDML
void OracleDML::msynpred33_OracleDML_fragment(  )
{
    // OracleDML.g:1043:18: ( select_key )
    // OracleDML.g:1043:19: select_key
    {
        this->followPush(FOLLOW_select_key_in_synpred33_OracleDML10703);
        select_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred33_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred33_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred33_OracleDMLEx: ;
}
// $ANTLR end synpred33_OracleDML

// $ANTLR start synpredRule synpred34_OracleDML
void OracleDML::msynpred34_OracleDML_fragment(  )
{
    // OracleDML.g:1044:18: ( LEFT_PAREN )
    // OracleDML.g:1044:19: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred34_OracleDML10727);
        if  (this->hasException())
        {
            goto rulesynpred34_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred34_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred34_OracleDMLEx: ;
}
// $ANTLR end synpred34_OracleDML

// $ANTLR start synpredRule synpred39_OracleDML
void OracleDML::msynpred39_OracleDML_fragment(  )
{
    // OracleDML.g:1064:10: ({...}? => new_key unary_expression )
    // OracleDML.g:1064:10: {...}? => new_key unary_expression
    {
        if ( !((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) )
        {
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "LT(1)->getText() == \"NEW\" && LT(2)->getText() != \".\"" );
                ex->set_ruleName( "synpred39_OracleDML" );


        }

        this->followPush(FOLLOW_new_key_in_synpred39_OracleDML10937);
        new_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred39_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_unary_expression_in_synpred39_OracleDML10940);
        unary_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred39_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred39_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred39_OracleDMLEx: ;
}
// $ANTLR end synpred39_OracleDML

// $ANTLR start synpredRule synpred41_OracleDML
void OracleDML::msynpred41_OracleDML_fragment(  )
{
    // OracleDML.g:1066:10: ( all_key unary_expression )
    // OracleDML.g:1066:10: all_key unary_expression
    {
        this->followPush(FOLLOW_all_key_in_synpred41_OracleDML10965);
        all_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred41_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_unary_expression_in_synpred41_OracleDML10968);
        unary_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred41_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred41_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred41_OracleDMLEx: ;
}
// $ANTLR end synpred41_OracleDML

// $ANTLR start synpredRule synpred42_OracleDML
void OracleDML::msynpred42_OracleDML_fragment(  )
{
    // OracleDML.g:1067:10: ({...}? case_statement[false] )
    // OracleDML.g:1067:10: {...}? case_statement[false]
    {
        if ( !(((LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE))) )
        {
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "(LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE)" );
                ex->set_ruleName( "synpred42_OracleDML" );


        }

        this->followPush(FOLLOW_case_statement_in_synpred42_OracleDML10981);
        case_statement(false);

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred42_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred42_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred42_OracleDMLEx: ;
}
// $ANTLR end synpred42_OracleDML

// $ANTLR start synpredRule synpred43_OracleDML
void OracleDML::msynpred43_OracleDML_fragment(  )
{
    // OracleDML.g:1068:10: ( quantified_expression )
    // OracleDML.g:1068:10: quantified_expression
    {
        this->followPush(FOLLOW_quantified_expression_in_synpred43_OracleDML10993);
        quantified_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred43_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred43_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred43_OracleDMLEx: ;
}
// $ANTLR end synpred43_OracleDML

// $ANTLR start synpredRule synpred44_OracleDML
void OracleDML::msynpred44_OracleDML_fragment(  )
{
    // OracleDML.g:1069:10: ( standard_function )
    // OracleDML.g:1069:10: standard_function
    {
        this->followPush(FOLLOW_standard_function_in_synpred44_OracleDML11004);
        standard_function();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred44_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred44_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred44_OracleDMLEx: ;
}
// $ANTLR end synpred44_OracleDML

// $ANTLR start synpredRule synpred45_OracleDML
void OracleDML::msynpred45_OracleDML_fragment(  )
{
    // OracleDML.g:1078:10: ( ( label_name )? case_key when_key )
    // OracleDML.g:1078:11: ( label_name )? case_key when_key
    {
        // OracleDML.g:1078:11: ( label_name )?
        {
            ANTLR_UINT32 alt380=2;
            switch ( this->LA(1) )
            {
                case DELIMITED_ID:
                case REGULAR_ID:
                	{
                		alt380=1;
                	}
                    break;
            }

            switch (alt380)
            {
        	case 1:
        	    // OracleDML.g:1078:11: label_name
        	    {
        	        this->followPush(FOLLOW_label_name_in_synpred45_OracleDML11061);
        	        label_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred45_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

        this->followPush(FOLLOW_case_key_in_synpred45_OracleDML11064);
        case_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred45_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_when_key_in_synpred45_OracleDML11066);
        when_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred45_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred45_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred45_OracleDMLEx: ;
}
// $ANTLR end synpred45_OracleDML

// $ANTLR start synpredRule synpred46_OracleDML
void OracleDML::msynpred46_OracleDML_fragment(  )
{
    // OracleDML.g:1119:10: ( table_element outer_join_sign )
    // OracleDML.g:1119:11: table_element outer_join_sign
    {
        this->followPush(FOLLOW_table_element_in_synpred46_OracleDML11434);
        table_element();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred46_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_outer_join_sign_in_synpred46_OracleDML11436);
        outer_join_sign();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred46_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred46_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred46_OracleDMLEx: ;
}
// $ANTLR end synpred46_OracleDML

// $ANTLR start synpredRule synpred48_OracleDML
void OracleDML::msynpred48_OracleDML_fragment(  )
{
    // OracleDML.g:1121:10: ( constant )
    // OracleDML.g:1121:10: constant
    {
        this->followPush(FOLLOW_constant_in_synpred48_OracleDML11465);
        constant();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred48_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred48_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred48_OracleDMLEx: ;
}
// $ANTLR end synpred48_OracleDML

// $ANTLR start synpredRule synpred49_OracleDML
void OracleDML::msynpred49_OracleDML_fragment(  )
{
    // OracleDML.g:1122:10: ( general_element )
    // OracleDML.g:1122:10: general_element
    {
        this->followPush(FOLLOW_general_element_in_synpred49_OracleDML11476);
        general_element();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred49_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred49_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred49_OracleDMLEx: ;
}
// $ANTLR end synpred49_OracleDML

// $ANTLR start synpredRule synpred50_OracleDML
void OracleDML::msynpred50_OracleDML_fragment(  )
{
    {
        //  OracleDML.g:1125:15: ( select_key | with_key )

        ANTLR_UINT32 alt381;

        alt381=2;

        switch ( this->LA(1) )
        {
        case SQL92_RESERVED_SELECT:
        	{
        		alt381=1;
        	}
            break;
        case SQL92_RESERVED_WITH:
        	{
        		alt381=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 381 );
            ex->set_state( 0 );


            goto rulesynpred50_OracleDMLEx;

        }

        switch (alt381)
        {
    	case 1:
    	    // OracleDML.g:1125:17: select_key
    	    {
    	        this->followPush(FOLLOW_select_key_in_synpred50_OracleDML11516);
    	        select_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred50_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;
    	case 2:
    	    // OracleDML.g:1125:30: with_key
    	    {
    	        this->followPush(FOLLOW_with_key_in_synpred50_OracleDML11520);
    	        with_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred50_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;

        }
    }

goto rulesynpred50_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred50_OracleDMLEx: ;
}
// $ANTLR end synpred50_OracleDML

// $ANTLR start synpredRule synpred51_OracleDML
void OracleDML::msynpred51_OracleDML_fragment(  )
{
    // OracleDML.g:1147:12: ( LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:1147:13: LEFT_PAREN ( select_key | with_key )
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred51_OracleDML11799);
        if  (this->hasException())
        {
            goto rulesynpred51_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:1147:24: ( select_key | with_key )
        {
            ANTLR_UINT32 alt382=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt382=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt382=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 382 );
                ex->set_state( 0 );


                goto rulesynpred51_OracleDMLEx;

            }

            switch (alt382)
            {
        	case 1:
        	    // OracleDML.g:1147:25: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred51_OracleDML11802);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred51_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1147:36: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred51_OracleDML11804);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred51_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred51_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred51_OracleDMLEx: ;
}
// $ANTLR end synpred51_OracleDML

// $ANTLR start synpredRule synpred52_OracleDML
void OracleDML::msynpred52_OracleDML_fragment(  )
{
    // OracleDML.g:1163:15: ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )
    // OracleDML.g:1163:16: multiset_key ( LEFT_PAREN )+ ( select_key | with_key )
    {
        this->followPush(FOLLOW_multiset_key_in_synpred52_OracleDML12121);
        multiset_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred52_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:1163:29: ( LEFT_PAREN )+
        {
            int cnt383=0;

            for (;;)
            {
                ANTLR_UINT32 alt383=2;
        	switch ( this->LA(1) )
        	{
        	case LEFT_PAREN:
        		{
        			alt383=1;
        		}
        	    break;

        	}

        	switch (alt383)
        	{
        	    case 1:
        	        // OracleDML.g:1163:29: LEFT_PAREN
        	        {
        	             this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred52_OracleDML12123);
        	            if  (this->hasException())
        	            {
        	                goto rulesynpred52_OracleDMLEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return ;
        	            }



        	        }
        	        break;

        	    default:

        		if ( cnt383 >= 1 )
        		{
        		    goto loop383;
        		}
        		if (this->get_backtracking()>0)
        		{
        		    this->set_failedflag( true );
        		    return ;
        		}

        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto rulesynpred52_OracleDMLEx;
        	}
        	cnt383++;
            }
            loop383: ;	/* Jump to here if this rule does not match */
        }

        // OracleDML.g:1163:41: ( select_key | with_key )
        {
            ANTLR_UINT32 alt384=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt384=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt384=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 384 );
                ex->set_state( 0 );


                goto rulesynpred52_OracleDMLEx;

            }

            switch (alt384)
            {
        	case 1:
        	    // OracleDML.g:1163:42: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred52_OracleDML12127);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred52_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1163:53: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred52_OracleDML12129);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred52_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred52_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred52_OracleDMLEx: ;
}
// $ANTLR end synpred52_OracleDML

// $ANTLR start synpredRule synpred53_OracleDML
void OracleDML::msynpred53_OracleDML_fragment(  )
{
    // OracleDML.g:1367:14: ( default_key )
    // OracleDML.g:1367:15: default_key
    {
        this->followPush(FOLLOW_default_key_in_synpred53_OracleDML14993);
        default_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred53_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred53_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred53_OracleDMLEx: ;
}
// $ANTLR end synpred53_OracleDML

// $ANTLR start synpredRule synpred54_OracleDML
void OracleDML::msynpred54_OracleDML_fragment(  )
{
    // OracleDML.g:1374:55: ( default_key )
    // OracleDML.g:1374:56: default_key
    {
        this->followPush(FOLLOW_default_key_in_synpred54_OracleDML15064);
        default_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred54_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred54_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred54_OracleDMLEx: ;
}
// $ANTLR end synpred54_OracleDML
	// Delegated methods that appear to be a part of this
	// parser
	//
    OracleDML_OracleDMLKeys::upper_key_return OracleDML::upper_key()
    {
        return m_gOracleDMLKeys->upper_key();
    }

    OracleDML_OracleDMLKeys::bit_length_key_return OracleDML::bit_length_key()
    {
        return m_gOracleDMLKeys->bit_length_key();
    }

    OracleDML_OracleDMLKeys::result_key_return OracleDML::result_key()
    {
        return m_gOracleDMLKeys->result_key();
    }

    OracleDML_OracleDMLKeys::length_key_return OracleDML::length_key()
    {
        return m_gOracleDMLKeys->length_key();
    }

    OracleDML_OracleDMLKeys::parallel_enable_key_return OracleDML::parallel_enable_key()
    {
        return m_gOracleDMLKeys->parallel_enable_key();
    }

    OracleDML_OracleDMLKeys::xmlnamespaces_key_return OracleDML::xmlnamespaces_key()
    {
        return m_gOracleDMLKeys->xmlnamespaces_key();
    }

    OracleDML_OracleDMLKeys::soundex_key_return OracleDML::soundex_key()
    {
        return m_gOracleDMLKeys->soundex_key();
    }

    OracleDML_OracleDMLKeys::module_key_return OracleDML::module_key()
    {
        return m_gOracleDMLKeys->module_key();
    }

    OracleDML_OracleDMLKeys::if_key_return OracleDML::if_key()
    {
        return m_gOracleDMLKeys->if_key();
    }

    OracleDML_OracleDMLKeys::asc_key_return OracleDML::asc_key()
    {
        return m_gOracleDMLKeys->asc_key();
    }

    OracleDML_OracleDMLKeys::read_key_return OracleDML::read_key()
    {
        return m_gOracleDMLKeys->read_key();
    }

    OracleDML_OracleDMLKeys::only_key_return OracleDML::only_key()
    {
        return m_gOracleDMLKeys->only_key();
    }

    OracleDML_OracleDMLKeys::failure_key_return OracleDML::failure_key()
    {
        return m_gOracleDMLKeys->failure_key();
    }

    OracleDML_OracleDMLKeys::function_key_return OracleDML::function_key()
    {
        return m_gOracleDMLKeys->function_key();
    }

    OracleDML_OracleDMLKeys::timestamp_key_return OracleDML::timestamp_key()
    {
        return m_gOracleDMLKeys->timestamp_key();
    }

    OracleDML_OracleDMLCommons::table_alias_return OracleDML::table_alias()
    {
        return m_gOracleDMLCommons->table_alias();
    }

    OracleDML_OracleDMLKeys::current_timestamp_key_return OracleDML::current_timestamp_key()
    {
        return m_gOracleDMLKeys->current_timestamp_key();
    }

    OracleDML_OracleDMLKeys::greatest_key_return OracleDML::greatest_key()
    {
        return m_gOracleDMLKeys->greatest_key();
    }

    OracleDML_OracleDMLKeys::columns_key_return OracleDML::columns_key()
    {
        return m_gOracleDMLKeys->columns_key();
    }

    OracleDML_OracleDMLKeys::logoff_key_return OracleDML::logoff_key()
    {
        return m_gOracleDMLKeys->logoff_key();
    }

    OracleDML_OracleDMLKeys::some_key_return OracleDML::some_key()
    {
        return m_gOracleDMLKeys->some_key();
    }

    OracleDML_OracleDMLKeys::under_key_return OracleDML::under_key()
    {
        return m_gOracleDMLKeys->under_key();
    }

    OracleDML_OracleDMLKeys::raw_key_return OracleDML::raw_key()
    {
        return m_gOracleDMLKeys->raw_key();
    }

    OracleDML_OracleDMLKeys::floor_key_return OracleDML::floor_key()
    {
        return m_gOracleDMLKeys->floor_key();
    }

    OracleDML_OracleDMLKeys::agent_key_return OracleDML::agent_key()
    {
        return m_gOracleDMLKeys->agent_key();
    }

    OracleDML_OracleDMLKeys::of_key_return OracleDML::of_key()
    {
        return m_gOracleDMLKeys->of_key();
    }

    OracleDML_OracleDMLKeys::record_key_return OracleDML::record_key()
    {
        return m_gOracleDMLKeys->record_key();
    }

    OracleDML_OracleDMLKeys::current_time_key_return OracleDML::current_time_key()
    {
        return m_gOracleDMLKeys->current_time_key();
    }

    OracleDML_OracleDMLCommons::collection_name_return OracleDML::collection_name()
    {
        return m_gOracleDMLCommons->collection_name();
    }

    OracleDML_OracleDMLKeys::simple_integer_key_return OracleDML::simple_integer_key()
    {
        return m_gOracleDMLKeys->simple_integer_key();
    }

    OracleDML_OracleDMLKeys::content_key_return OracleDML::content_key()
    {
        return m_gOracleDMLKeys->content_key();
    }

    OracleDML_OracleDMLCommons::function_name_return OracleDML::function_name()
    {
        return m_gOracleDMLCommons->function_name();
    }

    OracleDML_OracleDMLCommons::general_element_part_return OracleDML::general_element_part()
    {
        return m_gOracleDMLCommons->general_element_part();
    }

    OracleDML_OracleDMLKeys::current_user_key_return OracleDML::current_user_key()
    {
        return m_gOracleDMLKeys->current_user_key();
    }

    OracleDML_OracleDMLCommons::not_equal_op_return OracleDML::not_equal_op()
    {
        return m_gOracleDMLCommons->not_equal_op();
    }

    OracleDML_OracleDMLKeys::option_key_return OracleDML::option_key()
    {
        return m_gOracleDMLKeys->option_key();
    }

    OracleDML_OracleDMLKeys::seed_key_return OracleDML::seed_key()
    {
        return m_gOracleDMLKeys->seed_key();
    }

    OracleDML_OracleDMLKeys::like_key_return OracleDML::like_key()
    {
        return m_gOracleDMLKeys->like_key();
    }

    OracleDML_OracleDMLKeys::else_key_return OracleDML::else_key()
    {
        return m_gOracleDMLKeys->else_key();
    }

    OracleDML_OracleDMLCommons::savepoint_name_return OracleDML::savepoint_name()
    {
        return m_gOracleDMLCommons->savepoint_name();
    }

    OracleDML_OracleDMLCommons::index_name_return OracleDML::index_name()
    {
        return m_gOracleDMLCommons->index_name();
    }

    OracleDML_OracleDMLKeys::raise_key_return OracleDML::raise_key()
    {
        return m_gOracleDMLKeys->raise_key();
    }

    OracleDML_OracleDMLCommons::cursor_name_return OracleDML::cursor_name()
    {
        return m_gOracleDMLCommons->cursor_name();
    }

    OracleDML_OracleDMLKeys::indent_key_return OracleDML::indent_key()
    {
        return m_gOracleDMLKeys->indent_key();
    }

    OracleDML_OracleDMLKeys::respect_key_return OracleDML::respect_key()
    {
        return m_gOracleDMLKeys->respect_key();
    }

    OracleDML_OracleDMLKeys::check_key_return OracleDML::check_key()
    {
        return m_gOracleDMLKeys->check_key();
    }

    OracleDML_OracleDMLKeys::smallint_key_return OracleDML::smallint_key()
    {
        return m_gOracleDMLKeys->smallint_key();
    }

    OracleDML_OracleDMLKeys::dml_key_return OracleDML::dml_key()
    {
        return m_gOracleDMLKeys->dml_key();
    }

    OracleDML_OracleDMLKeys::sum_key_return OracleDML::sum_key()
    {
        return m_gOracleDMLKeys->sum_key();
    }

    OracleDML_OracleDMLCommons::less_than_or_equals_op_return OracleDML::less_than_or_equals_op()
    {
        return m_gOracleDMLCommons->less_than_or_equals_op();
    }

    OracleDML_OracleDMLKeys::auto_key_return OracleDML::auto_key()
    {
        return m_gOracleDMLKeys->auto_key();
    }

    OracleDML_OracleDMLKeys::noorder_key_return OracleDML::noorder_key()
    {
        return m_gOracleDMLKeys->noorder_key();
    }

    OracleDML_OracleDMLKeys::depth_key_return OracleDML::depth_key()
    {
        return m_gOracleDMLKeys->depth_key();
    }

    OracleDML_OracleDMLKeys::position_key_return OracleDML::position_key()
    {
        return m_gOracleDMLKeys->position_key();
    }

    OracleDML_OracleDMLKeys::version_key_return OracleDML::version_key()
    {
        return m_gOracleDMLKeys->version_key();
    }

    OracleDML_OracleDMLKeys::breadth_key_return OracleDML::breadth_key()
    {
        return m_gOracleDMLKeys->breadth_key();
    }

    OracleDML_OracleDMLKeys::rowidtochar_key_return OracleDML::rowidtochar_key()
    {
        return m_gOracleDMLKeys->rowidtochar_key();
    }

    OracleDML_OracleDMLKeys::nextval_key_return OracleDML::nextval_key()
    {
        return m_gOracleDMLKeys->nextval_key();
    }

    OracleDML_OracleDMLKeys::model_key_return OracleDML::model_key()
    {
        return m_gOracleDMLKeys->model_key();
    }

    OracleDML_OracleDMLKeys::servererror_key_return OracleDML::servererror_key()
    {
        return m_gOracleDMLKeys->servererror_key();
    }

    OracleDML_OracleDMLKeys::returning_key_return OracleDML::returning_key()
    {
        return m_gOracleDMLKeys->returning_key();
    }

    OracleDML_OracleDMLKeys::startup_key_return OracleDML::startup_key()
    {
        return m_gOracleDMLKeys->startup_key();
    }

    OracleDML_OracleDMLKeys::extract_key_return OracleDML::extract_key()
    {
        return m_gOracleDMLKeys->extract_key();
    }

    OracleDML_OracleDMLKeys::enable_key_return OracleDML::enable_key()
    {
        return m_gOracleDMLKeys->enable_key();
    }

    OracleDML_OracleDMLKeys::reject_key_return OracleDML::reject_key()
    {
        return m_gOracleDMLKeys->reject_key();
    }

    OracleDML_OracleDMLCommons::parameter_name_return OracleDML::parameter_name()
    {
        return m_gOracleDMLCommons->parameter_name();
    }

    OracleDML_OracleDMLKeys::octet_length_key_return OracleDML::octet_length_key()
    {
        return m_gOracleDMLKeys->octet_length_key();
    }

    OracleDML_OracleDMLCommons::reference_model_name_return OracleDML::reference_model_name()
    {
        return m_gOracleDMLCommons->reference_model_name();
    }

    OracleDML_OracleDMLKeys::constructor_key_return OracleDML::constructor_key()
    {
        return m_gOracleDMLKeys->constructor_key();
    }

    OracleDML_OracleDMLKeys::result_cache_key_return OracleDML::result_cache_key()
    {
        return m_gOracleDMLKeys->result_cache_key();
    }

    OracleDML_OracleDMLKeys::boolean_key_return OracleDML::boolean_key()
    {
        return m_gOracleDMLKeys->boolean_key();
    }

    OracleDML_OracleDMLKeys::treat_key_return OracleDML::treat_key()
    {
        return m_gOracleDMLKeys->treat_key();
    }

    OracleDML_OracleDMLKeys::wellformed_key_return OracleDML::wellformed_key()
    {
        return m_gOracleDMLKeys->wellformed_key();
    }

    OracleDML_OracleDMLKeys::type_key_return OracleDML::type_key()
    {
        return m_gOracleDMLKeys->type_key();
    }

    OracleDML_OracleDMLKeys::as_key_return OracleDML::as_key()
    {
        return m_gOracleDMLKeys->as_key();
    }

    OracleDML_OracleDMLKeys::restrict_references_key_return OracleDML::restrict_references_key()
    {
        return m_gOracleDMLKeys->restrict_references_key();
    }

    OracleDML_OracleDMLKeys::nvl_key_return OracleDML::nvl_key()
    {
        return m_gOracleDMLKeys->nvl_key();
    }

    OracleDML_OracleDMLKeys::delete_key_return OracleDML::delete_key()
    {
        return m_gOracleDMLKeys->delete_key();
    }

    OracleDML_OracleDMLCommons::current_of_clause_return OracleDML::current_of_clause()
    {
        return m_gOracleDMLCommons->current_of_clause();
    }

    OracleDML_OracleDMLKeys::sysdate_key_return OracleDML::sysdate_key()
    {
        return m_gOracleDMLKeys->sysdate_key();
    }

    OracleDML_OracleDMLCommons::function_argument_return OracleDML::function_argument()
    {
        return m_gOracleDMLCommons->function_argument();
    }

    OracleDML_OracleDMLKeys::xmlcast_key_return OracleDML::xmlcast_key()
    {
        return m_gOracleDMLKeys->xmlcast_key();
    }

    OracleDML_OracleDMLKeys::instantiable_key_return OracleDML::instantiable_key()
    {
        return m_gOracleDMLKeys->instantiable_key();
    }

    OracleDML_OracleDMLKeys::sessiontimezone_key_return OracleDML::sessiontimezone_key()
    {
        return m_gOracleDMLKeys->sessiontimezone_key();
    }

    OracleDML_OracleDMLKeys::inout_key_return OracleDML::inout_key()
    {
        return m_gOracleDMLKeys->inout_key();
    }

    OracleDML_OracleDMLKeys::local_key_return OracleDML::local_key()
    {
        return m_gOracleDMLKeys->local_key();
    }

    OracleDML_OracleDMLKeys::xmlpi_key_return OracleDML::xmlpi_key()
    {
        return m_gOracleDMLKeys->xmlpi_key();
    }

    OracleDML_OracleDMLKeys::final_key_return OracleDML::final_key()
    {
        return m_gOracleDMLKeys->final_key();
    }

    OracleDML_OracleDMLKeys::power_key_return OracleDML::power_key()
    {
        return m_gOracleDMLKeys->power_key();
    }

    OracleDML_OracleDMLKeys::convert_key_return OracleDML::convert_key()
    {
        return m_gOracleDMLKeys->convert_key();
    }

    OracleDML_OracleDMLKeys::binary_float_max_normal_key_return OracleDML::binary_float_max_normal_key()
    {
        return m_gOracleDMLKeys->binary_float_max_normal_key();
    }

    OracleDML_OracleDMLKeys::search_key_return OracleDML::search_key()
    {
        return m_gOracleDMLKeys->search_key();
    }

    OracleDML_OracleDMLKeys::increment_key_return OracleDML::increment_key()
    {
        return m_gOracleDMLKeys->increment_key();
    }

    OracleDML_OracleDMLKeys::rtrim_key_return OracleDML::rtrim_key()
    {
        return m_gOracleDMLKeys->rtrim_key();
    }

    OracleDML_OracleDMLCommons::main_model_name_return OracleDML::main_model_name()
    {
        return m_gOracleDMLCommons->main_model_name();
    }

    OracleDML_OracleDMLKeys::xmlelement_key_return OracleDML::xmlelement_key()
    {
        return m_gOracleDMLKeys->xmlelement_key();
    }

    OracleDML_OracleDMLKeys::reverse_key_return OracleDML::reverse_key()
    {
        return m_gOracleDMLKeys->reverse_key();
    }

    OracleDML_OracleDMLKeys::path_key_return OracleDML::path_key()
    {
        return m_gOracleDMLKeys->path_key();
    }

    OracleDML_OracleDMLKeys::main_key_return OracleDML::main_key()
    {
        return m_gOracleDMLKeys->main_key();
    }

    OracleDML_OracleDMLKeys::immediate_key_return OracleDML::immediate_key()
    {
        return m_gOracleDMLKeys->immediate_key();
    }

    OracleDML_OracleDMLKeys::defaults_key_return OracleDML::defaults_key()
    {
        return m_gOracleDMLKeys->defaults_key();
    }

    OracleDML_OracleDMLKeys::substr_key_return OracleDML::substr_key()
    {
        return m_gOracleDMLKeys->substr_key();
    }

    OracleDML_OracleDMLKeys::data_key_return OracleDML::data_key()
    {
        return m_gOracleDMLKeys->data_key();
    }

    OracleDML_OracleDMLKeys::whenever_key_return OracleDML::whenever_key()
    {
        return m_gOracleDMLKeys->whenever_key();
    }

    OracleDML_OracleDMLKeys::role_key_return OracleDML::role_key()
    {
        return m_gOracleDMLKeys->role_key();
    }

    OracleDML_OracleDMLKeys::xmlparse_key_return OracleDML::xmlparse_key()
    {
        return m_gOracleDMLKeys->xmlparse_key();
    }

    OracleDML_OracleDMLKeys::preceding_key_return OracleDML::preceding_key()
    {
        return m_gOracleDMLKeys->preceding_key();
    }

    OracleDML_OracleDMLKeys::statistics_key_return OracleDML::statistics_key()
    {
        return m_gOracleDMLKeys->statistics_key();
    }

    OracleDML_OracleDMLKeys::encoding_key_return OracleDML::encoding_key()
    {
        return m_gOracleDMLKeys->encoding_key();
    }

    OracleDML_OracleDMLKeys::indices_key_return OracleDML::indices_key()
    {
        return m_gOracleDMLKeys->indices_key();
    }

    OracleDML_OracleDMLKeys::deterministic_key_return OracleDML::deterministic_key()
    {
        return m_gOracleDMLKeys->deterministic_key();
    }

    OracleDML_OracleDMLKeys::then_key_return OracleDML::then_key()
    {
        return m_gOracleDMLKeys->then_key();
    }

    OracleDML_OracleDMLKeys::trailing_key_return OracleDML::trailing_key()
    {
        return m_gOracleDMLKeys->trailing_key();
    }

    OracleDML_OracleDMLKeys::cache_key_return OracleDML::cache_key()
    {
        return m_gOracleDMLKeys->cache_key();
    }

    OracleDML_OracleDMLKeys::grouping_key_return OracleDML::grouping_key()
    {
        return m_gOracleDMLKeys->grouping_key();
    }

    OracleDML_OracleDMLKeys::variable_key_return OracleDML::variable_key()
    {
        return m_gOracleDMLKeys->variable_key();
    }

    OracleDML_OracleDMLKeys::oid_key_return OracleDML::oid_key()
    {
        return m_gOracleDMLKeys->oid_key();
    }

    OracleDML_OracleDMLKeys::force_key_return OracleDML::force_key()
    {
        return m_gOracleDMLKeys->force_key();
    }

    OracleDML_OracleDMLKeys::call_key_return OracleDML::call_key()
    {
        return m_gOracleDMLKeys->call_key();
    }

    OracleDML_OracleDMLKeys::subpartition_key_return OracleDML::subpartition_key()
    {
        return m_gOracleDMLKeys->subpartition_key();
    }

    OracleDML_OracleDMLKeys::where_key_return OracleDML::where_key()
    {
        return m_gOracleDMLKeys->where_key();
    }

    OracleDML_OracleDMLKeys::xmlroot_key_return OracleDML::xmlroot_key()
    {
        return m_gOracleDMLKeys->xmlroot_key();
    }

    OracleDML_OracleDMLKeys::skip_key_return OracleDML::skip_key()
    {
        return m_gOracleDMLKeys->skip_key();
    }

    OracleDML_OracleDMLKeys::initcap_key_return OracleDML::initcap_key()
    {
        return m_gOracleDMLKeys->initcap_key();
    }

    OracleDML_OracleDMLKeys::cluster_key_return OracleDML::cluster_key()
    {
        return m_gOracleDMLKeys->cluster_key();
    }

    OracleDML_OracleDMLKeys::parameters_key_return OracleDML::parameters_key()
    {
        return m_gOracleDMLKeys->parameters_key();
    }

    OracleDML_OracleDMLKeys::bit_key_return OracleDML::bit_key()
    {
        return m_gOracleDMLKeys->bit_key();
    }

    OracleDML_OracleDMLKeys::serveroutput_key_return OracleDML::serveroutput_key()
    {
        return m_gOracleDMLKeys->serveroutput_key();
    }

    OracleDML_OracleDMLKeys::context_key_return OracleDML::context_key()
    {
        return m_gOracleDMLKeys->context_key();
    }

    OracleDML_OracleDMLKeys::nchar_key_return OracleDML::nchar_key()
    {
        return m_gOracleDMLKeys->nchar_key();
    }

    OracleDML_OracleDMLKeys::errors_key_return OracleDML::errors_key()
    {
        return m_gOracleDMLKeys->errors_key();
    }

    OracleDML_OracleDMLKeys::nav_key_return OracleDML::nav_key()
    {
        return m_gOracleDMLKeys->nav_key();
    }

    OracleDML_OracleDMLCommons::rollback_segment_name_return OracleDML::rollback_segment_name()
    {
        return m_gOracleDMLCommons->rollback_segment_name();
    }

    OracleDML_OracleDMLCommons::variable_name_return OracleDML::variable_name()
    {
        return m_gOracleDMLCommons->variable_name();
    }

    OracleDML_OracleDMLKeys::element_key_return OracleDML::element_key()
    {
        return m_gOracleDMLKeys->element_key();
    }

    OracleDML_OracleDMLKeys::or_key_return OracleDML::or_key()
    {
        return m_gOracleDMLKeys->or_key();
    }

    OracleDML_OracleDMLKeys::session_user_key_return OracleDML::session_user_key()
    {
        return m_gOracleDMLKeys->session_user_key();
    }

    OracleDML_OracleDMLKeys::ascii_key_return OracleDML::ascii_key()
    {
        return m_gOracleDMLKeys->ascii_key();
    }

    OracleDML_OracleDMLKeys::self_key_return OracleDML::self_key()
    {
        return m_gOracleDMLKeys->self_key();
    }

    OracleDML_OracleDMLKeys::corrupt_xid_key_return OracleDML::corrupt_xid_key()
    {
        return m_gOracleDMLKeys->corrupt_xid_key();
    }

    OracleDML_OracleDMLKeys::binary_float_key_return OracleDML::binary_float_key()
    {
        return m_gOracleDMLKeys->binary_float_key();
    }

    OracleDML_OracleDMLKeys::cursor_key_return OracleDML::cursor_key()
    {
        return m_gOracleDMLKeys->cursor_key();
    }

    OracleDML_OracleDMLKeys::right_key_return OracleDML::right_key()
    {
        return m_gOracleDMLKeys->right_key();
    }

    OracleDML_OracleDMLKeys::translate_key_return OracleDML::translate_key()
    {
        return m_gOracleDMLKeys->translate_key();
    }

    OracleDML_OracleDMLKeys::current_date_key_return OracleDML::current_date_key()
    {
        return m_gOracleDMLKeys->current_date_key();
    }

    OracleDML_OracleDMLKeys::unbounded_key_return OracleDML::unbounded_key()
    {
        return m_gOracleDMLKeys->unbounded_key();
    }

    OracleDML_OracleDMLKeys::decimal_key_return OracleDML::decimal_key()
    {
        return m_gOracleDMLKeys->decimal_key();
    }

    OracleDML_OracleDMLKeys::time_key_return OracleDML::time_key()
    {
        return m_gOracleDMLKeys->time_key();
    }

    OracleDML_OracleDMLKeys::modify_key_return OracleDML::modify_key()
    {
        return m_gOracleDMLKeys->modify_key();
    }

    OracleDML_OracleDMLKeys::lpad_key_return OracleDML::lpad_key()
    {
        return m_gOracleDMLKeys->lpad_key();
    }

    OracleDML_OracleDMLKeys::escape_key_return OracleDML::escape_key()
    {
        return m_gOracleDMLKeys->escape_key();
    }

    OracleDML_OracleDMLKeys::nothing_key_return OracleDML::nothing_key()
    {
        return m_gOracleDMLKeys->nothing_key();
    }

    OracleDML_OracleDMLKeys::autonomous_transaction_key_return OracleDML::autonomous_transaction_key()
    {
        return m_gOracleDMLKeys->autonomous_transaction_key();
    }

    OracleDML_OracleDMLKeys::both_key_return OracleDML::both_key()
    {
        return m_gOracleDMLKeys->both_key();
    }

    OracleDML_OracleDMLKeys::null_key_return OracleDML::null_key()
    {
        return m_gOracleDMLKeys->null_key();
    }

    OracleDML_OracleDMLKeys::character_key_return OracleDML::character_key()
    {
        return m_gOracleDMLKeys->character_key();
    }

    OracleDML_OracleDMLKeys::connect_by_root_key_return OracleDML::connect_by_root_key()
    {
        return m_gOracleDMLKeys->connect_by_root_key();
    }

    OracleDML_OracleDMLKeys::partial_key_return OracleDML::partial_key()
    {
        return m_gOracleDMLKeys->partial_key();
    }

    OracleDML_OracleDMLKeys::string_key_return OracleDML::string_key()
    {
        return m_gOracleDMLKeys->string_key();
    }

    OracleDML_OracleDMLKeys::drop_key_return OracleDML::drop_key()
    {
        return m_gOracleDMLKeys->drop_key();
    }

    OracleDML_OracleDMLKeys::long_key_return OracleDML::long_key()
    {
        return m_gOracleDMLKeys->long_key();
    }

    OracleDML_OracleDMLKeys::relies_on_key_return OracleDML::relies_on_key()
    {
        return m_gOracleDMLKeys->relies_on_key();
    }

    OracleDML_OracleDMLKeys::rename_key_return OracleDML::rename_key()
    {
        return m_gOracleDMLKeys->rename_key();
    }

    OracleDML_OracleDMLKeys::cascade_key_return OracleDML::cascade_key()
    {
        return m_gOracleDMLKeys->cascade_key();
    }

    OracleDML_OracleDMLKeys::out_key_return OracleDML::out_key()
    {
        return m_gOracleDMLKeys->out_key();
    }

    OracleDML_OracleDMLKeys::month_key_return OracleDML::month_key()
    {
        return m_gOracleDMLKeys->month_key();
    }

    OracleDML_OracleDMLKeys::analyze_key_return OracleDML::analyze_key()
    {
        return m_gOracleDMLKeys->analyze_key();
    }

    OracleDML_OracleDMLCommons::argument_return OracleDML::argument()
    {
        return m_gOracleDMLCommons->argument();
    }

    OracleDML_OracleDMLKeys::binary_float_max_subnormal_key_return OracleDML::binary_float_max_subnormal_key()
    {
        return m_gOracleDMLKeys->binary_float_max_subnormal_key();
    }

    OracleDML_OracleDMLKeys::updated_key_return OracleDML::updated_key()
    {
        return m_gOracleDMLKeys->updated_key();
    }

    OracleDML_OracleDMLKeys::close_key_return OracleDML::close_key()
    {
        return m_gOracleDMLKeys->close_key();
    }

    OracleDML_OracleDMLKeys::serially_reusable_key_return OracleDML::serially_reusable_key()
    {
        return m_gOracleDMLKeys->serially_reusable_key();
    }

    OracleDML_OracleDMLKeys::binary_float_min_normal_key_return OracleDML::binary_float_min_normal_key()
    {
        return m_gOracleDMLKeys->binary_float_min_normal_key();
    }

    OracleDML_OracleDMLKeys::commit_key_return OracleDML::commit_key()
    {
        return m_gOracleDMLKeys->commit_key();
    }

    OracleDML_OracleDMLKeys::rawtohex_key_return OracleDML::rawtohex_key()
    {
        return m_gOracleDMLKeys->rawtohex_key();
    }

    OracleDML_OracleDMLKeys::minute_key_return OracleDML::minute_key()
    {
        return m_gOracleDMLKeys->minute_key();
    }

    OracleDML_OracleDMLKeys::follows_key_return OracleDML::follows_key()
    {
        return m_gOracleDMLKeys->follows_key();
    }

    OracleDML_OracleDMLKeys::new_key_return OracleDML::new_key()
    {
        return m_gOracleDMLKeys->new_key();
    }

    OracleDML_OracleDMLKeys::int_key_return OracleDML::int_key()
    {
        return m_gOracleDMLKeys->int_key();
    }

    OracleDML_OracleDMLKeys::percent_found_key_return OracleDML::percent_found_key()
    {
        return m_gOracleDMLKeys->percent_found_key();
    }

    OracleDML_OracleDMLKeys::the_key_return OracleDML::the_key()
    {
        return m_gOracleDMLKeys->the_key();
    }

    OracleDML_OracleDMLKeys::into_key_return OracleDML::into_key()
    {
        return m_gOracleDMLKeys->into_key();
    }

    OracleDML_OracleDMLKeys::save_key_return OracleDML::save_key()
    {
        return m_gOracleDMLKeys->save_key();
    }

    OracleDML_OracleDMLKeys::invalidate_key_return OracleDML::invalidate_key()
    {
        return m_gOracleDMLKeys->invalidate_key();
    }

    OracleDML_OracleDMLKeys::empty_key_return OracleDML::empty_key()
    {
        return m_gOracleDMLKeys->empty_key();
    }

    OracleDML_OracleDMLCommons::outer_join_sign_return OracleDML::outer_join_sign()
    {
        return m_gOracleDMLCommons->outer_join_sign();
    }

    OracleDML_OracleDMLKeys::order_key_return OracleDML::order_key()
    {
        return m_gOracleDMLKeys->order_key();
    }

    OracleDML_OracleDMLKeys::to_key_return OracleDML::to_key()
    {
        return m_gOracleDMLKeys->to_key();
    }

    OracleDML_OracleDMLKeys::and_key_return OracleDML::and_key()
    {
        return m_gOracleDMLKeys->and_key();
    }

    OracleDML_OracleDMLKeys::indexed_key_return OracleDML::indexed_key()
    {
        return m_gOracleDMLKeys->indexed_key();
    }

    OracleDML_OracleDMLKeys::exceptions_key_return OracleDML::exceptions_key()
    {
        return m_gOracleDMLKeys->exceptions_key();
    }

    OracleDML_OracleDMLKeys::like4_key_return OracleDML::like4_key()
    {
        return m_gOracleDMLKeys->like4_key();
    }

    OracleDML_OracleDMLKeys::rollup_key_return OracleDML::rollup_key()
    {
        return m_gOracleDMLKeys->rollup_key();
    }

    OracleDML_OracleDMLCommons::alias_quoted_string_return OracleDML::alias_quoted_string(int toraTokenType, int usageType)
    {
        return m_gOracleDMLCommons->alias_quoted_string(toraTokenType, usageType);
    }

    OracleDML_OracleDMLKeys::positiven_key_return OracleDML::positiven_key()
    {
        return m_gOracleDMLKeys->positiven_key();
    }

    OracleDML_OracleDMLCommons::type_name_return OracleDML::type_name()
    {
        return m_gOracleDMLCommons->type_name();
    }

    OracleDML_OracleDMLKeys::within_key_return OracleDML::within_key()
    {
        return m_gOracleDMLKeys->within_key();
    }

    OracleDML_OracleDMLKeys::connect_key_return OracleDML::connect_key()
    {
        return m_gOracleDMLKeys->connect_key();
    }

    OracleDML_OracleDMLCommons::function_argument_modeling_return OracleDML::function_argument_modeling()
    {
        return m_gOracleDMLCommons->function_argument_modeling();
    }

    OracleDML_OracleDMLKeys::zone_key_return OracleDML::zone_key()
    {
        return m_gOracleDMLKeys->zone_key();
    }

    OracleDML_OracleDMLKeys::first_key_return OracleDML::first_key()
    {
        return m_gOracleDMLKeys->first_key();
    }

    OracleDML_OracleDMLKeys::warning_key_return OracleDML::warning_key()
    {
        return m_gOracleDMLKeys->warning_key();
    }

    OracleDML_OracleDMLCommons::numeric_return OracleDML::numeric()
    {
        return m_gOracleDMLCommons->numeric();
    }

    OracleDML_OracleDMLKeys::limit_key_return OracleDML::limit_key()
    {
        return m_gOracleDMLKeys->limit_key();
    }

    OracleDML_OracleDMLKeys::use_key_return OracleDML::use_key()
    {
        return m_gOracleDMLKeys->use_key();
    }

    OracleDML_OracleDMLKeys::hextoraw_key_return OracleDML::hextoraw_key()
    {
        return m_gOracleDMLKeys->hextoraw_key();
    }

    OracleDML_OracleDMLCommons::record_name_return OracleDML::record_name()
    {
        return m_gOracleDMLCommons->record_name();
    }

    OracleDML_OracleDMLKeys::grant_key_return OracleDML::grant_key()
    {
        return m_gOracleDMLKeys->grant_key();
    }

    OracleDML_OracleDMLKeys::percent_rowcount_key_return OracleDML::percent_rowcount_key()
    {
        return m_gOracleDMLKeys->percent_rowcount_key();
    }

    OracleDML_OracleDMLKeys::true_key_return OracleDML::true_key()
    {
        return m_gOracleDMLKeys->true_key();
    }

    OracleDML_OracleDMLKeys::name_key_return OracleDML::name_key()
    {
        return m_gOracleDMLKeys->name_key();
    }

    OracleDML_OracleDMLKeys::index_key_return OracleDML::index_key()
    {
        return m_gOracleDMLKeys->index_key();
    }

    OracleDML_OracleDMLKeys::revoke_key_return OracleDML::revoke_key()
    {
        return m_gOracleDMLKeys->revoke_key();
    }

    OracleDML_OracleDMLCommons::attribute_name_return OracleDML::attribute_name()
    {
        return m_gOracleDMLCommons->attribute_name();
    }

    OracleDML_OracleDMLKeys::from_key_return OracleDML::from_key()
    {
        return m_gOracleDMLKeys->from_key();
    }

    OracleDML_OracleDMLKeys::first_value_key_return OracleDML::first_value_key()
    {
        return m_gOracleDMLKeys->first_value_key();
    }

    OracleDML_OracleDMLKeys::guard_key_return OracleDML::guard_key()
    {
        return m_gOracleDMLKeys->guard_key();
    }

    OracleDML_OracleDMLKeys::char_cs_key_return OracleDML::char_cs_key()
    {
        return m_gOracleDMLKeys->char_cs_key();
    }

    OracleDML_OracleDMLKeys::comment_key_return OracleDML::comment_key()
    {
        return m_gOracleDMLKeys->comment_key();
    }

    OracleDML_OracleDMLKeys::lower_key_return OracleDML::lower_key()
    {
        return m_gOracleDMLKeys->lower_key();
    }

    OracleDML_OracleDMLKeys::decode_key_return OracleDML::decode_key()
    {
        return m_gOracleDMLKeys->decode_key();
    }

    OracleDML_OracleDMLKeys::constant_key_return OracleDML::constant_key()
    {
        return m_gOracleDMLKeys->constant_key();
    }

    OracleDML_OracleDMLKeys::double_key_return OracleDML::double_key()
    {
        return m_gOracleDMLKeys->double_key();
    }

    OracleDML_OracleDMLKeys::compile_key_return OracleDML::compile_key()
    {
        return m_gOracleDMLKeys->compile_key();
    }

    OracleDML_OracleDMLKeys::exclude_key_return OracleDML::exclude_key()
    {
        return m_gOracleDMLKeys->exclude_key();
    }

    OracleDML_OracleDMLKeys::select_key_return OracleDML::select_key()
    {
        return m_gOracleDMLKeys->select_key();
    }

    OracleDML_OracleDMLKeys::off_key_return OracleDML::off_key()
    {
        return m_gOracleDMLKeys->off_key();
    }

    OracleDML_OracleDMLKeys::default_key_return OracleDML::default_key()
    {
        return m_gOracleDMLKeys->default_key();
    }

    OracleDML_OracleDMLKeys::language_key_return OracleDML::language_key()
    {
        return m_gOracleDMLKeys->language_key();
    }

    OracleDML_OracleDMLKeys::false_key_return OracleDML::false_key()
    {
        return m_gOracleDMLKeys->false_key();
    }

    OracleDML_OracleDMLKeys::after_key_return OracleDML::after_key()
    {
        return m_gOracleDMLKeys->after_key();
    }

    OracleDML_OracleDMLKeys::blob_key_return OracleDML::blob_key()
    {
        return m_gOracleDMLKeys->blob_key();
    }

    OracleDML_OracleDMLCommons::multiset_op_return OracleDML::multiset_op()
    {
        return m_gOracleDMLCommons->multiset_op();
    }

    OracleDML_OracleDMLCommons::general_element_return OracleDML::general_element()
    {
        return m_gOracleDMLCommons->general_element();
    }

    OracleDML_OracleDMLCommons::respect_or_ignore_nulls_return OracleDML::respect_or_ignore_nulls()
    {
        return m_gOracleDMLCommons->respect_or_ignore_nulls();
    }

    OracleDML_OracleDMLKeys::lock_key_return OracleDML::lock_key()
    {
        return m_gOracleDMLKeys->lock_key();
    }

    OracleDML_OracleDMLKeys::begin_key_return OracleDML::begin_key()
    {
        return m_gOracleDMLKeys->begin_key();
    }

    OracleDML_OracleDMLCommons::link_name_return OracleDML::link_name()
    {
        return m_gOracleDMLCommons->link_name();
    }

    OracleDML_OracleDMLKeys::continue_key_return OracleDML::continue_key()
    {
        return m_gOracleDMLKeys->continue_key();
    }

    OracleDML_OracleDMLKeys::declare_key_return OracleDML::declare_key()
    {
        return m_gOracleDMLKeys->declare_key();
    }

    OracleDML_OracleDMLKeys::positive_key_return OracleDML::positive_key()
    {
        return m_gOracleDMLKeys->positive_key();
    }

    OracleDML_OracleDMLKeys::compatibility_key_return OracleDML::compatibility_key()
    {
        return m_gOracleDMLKeys->compatibility_key();
    }

    OracleDML_OracleDMLKeys::query_key_return OracleDML::query_key()
    {
        return m_gOracleDMLKeys->query_key();
    }

    OracleDML_OracleDMLKeys::before_key_return OracleDML::before_key()
    {
        return m_gOracleDMLKeys->before_key();
    }

    OracleDML_OracleDMLKeys::bulk_key_return OracleDML::bulk_key()
    {
        return m_gOracleDMLKeys->bulk_key();
    }

    OracleDML_OracleDMLKeys::pragma_key_return OracleDML::pragma_key()
    {
        return m_gOracleDMLKeys->pragma_key();
    }

    OracleDML_OracleDMLKeys::to_char_key_return OracleDML::to_char_key()
    {
        return m_gOracleDMLKeys->to_char_key();
    }

    OracleDML_OracleDMLKeys::explain_key_return OracleDML::explain_key()
    {
        return m_gOracleDMLKeys->explain_key();
    }

    OracleDML_OracleDMLKeys::collect_key_return OracleDML::collect_key()
    {
        return m_gOracleDMLKeys->collect_key();
    }

    OracleDML_OracleDMLKeys::instead_key_return OracleDML::instead_key()
    {
        return m_gOracleDMLKeys->instead_key();
    }

    OracleDML_OracleDMLKeys::natural_key_return OracleDML::natural_key()
    {
        return m_gOracleDMLKeys->natural_key();
    }

    OracleDML_OracleDMLKeys::extend_key_return OracleDML::extend_key()
    {
        return m_gOracleDMLKeys->extend_key();
    }

    OracleDML_OracleDMLCommons::into_clause_return OracleDML::into_clause()
    {
        return m_gOracleDMLCommons->into_clause();
    }

    OracleDML_OracleDMLKeys::current_key_return OracleDML::current_key()
    {
        return m_gOracleDMLKeys->current_key();
    }

    OracleDML_OracleDMLKeys::parallel_key_return OracleDML::parallel_key()
    {
        return m_gOracleDMLKeys->parallel_key();
    }

    OracleDML_OracleDMLKeys::parent_key_return OracleDML::parent_key()
    {
        return m_gOracleDMLKeys->parent_key();
    }

    OracleDML_OracleDMLKeys::segment_key_return OracleDML::segment_key()
    {
        return m_gOracleDMLKeys->segment_key();
    }

    OracleDML_OracleDMLKeys::using_key_return OracleDML::using_key()
    {
        return m_gOracleDMLKeys->using_key();
    }

    OracleDML_OracleDMLKeys::constraint_key_return OracleDML::constraint_key()
    {
        return m_gOracleDMLKeys->constraint_key();
    }

    OracleDML_OracleDMLKeys::binary_double_min_subnormal_key_return OracleDML::binary_double_min_subnormal_key()
    {
        return m_gOracleDMLKeys->binary_double_min_subnormal_key();
    }

    OracleDML_OracleDMLCommons::constant_return OracleDML::constant()
    {
        return m_gOracleDMLCommons->constant();
    }

    OracleDML_OracleDMLKeys::overriding_key_return OracleDML::overriding_key()
    {
        return m_gOracleDMLKeys->overriding_key();
    }

    OracleDML_OracleDMLKeys::likec_key_return OracleDML::likec_key()
    {
        return m_gOracleDMLKeys->likec_key();
    }

    OracleDML_OracleDMLCommons::implementation_type_name_return OracleDML::implementation_type_name()
    {
        return m_gOracleDMLCommons->implementation_type_name();
    }

    OracleDML_OracleDMLKeys::old_key_return OracleDML::old_key()
    {
        return m_gOracleDMLKeys->old_key();
    }

    OracleDML_OracleDMLKeys::decompose_key_return OracleDML::decompose_key()
    {
        return m_gOracleDMLKeys->decompose_key();
    }

    OracleDML_OracleDMLKeys::hour_key_return OracleDML::hour_key()
    {
        return m_gOracleDMLKeys->hour_key();
    }

    OracleDML_OracleDMLKeys::pls_integer_key_return OracleDML::pls_integer_key()
    {
        return m_gOracleDMLKeys->pls_integer_key();
    }

    OracleDML_OracleDMLKeys::rows_key_return OracleDML::rows_key()
    {
        return m_gOracleDMLKeys->rows_key();
    }

    OracleDML_OracleDMLCommons::exception_name_return OracleDML::exception_name()
    {
        return m_gOracleDMLCommons->exception_name();
    }

    OracleDML_OracleDMLKeys::minvalue_key_return OracleDML::minvalue_key()
    {
        return m_gOracleDMLKeys->minvalue_key();
    }

    OracleDML_OracleDMLKeys::full_key_return OracleDML::full_key()
    {
        return m_gOracleDMLKeys->full_key();
    }

    OracleDML_OracleDMLKeys::nocache_key_return OracleDML::nocache_key()
    {
        return m_gOracleDMLKeys->nocache_key();
    }

    OracleDML_OracleDMLKeys::case_key_return OracleDML::case_key()
    {
        return m_gOracleDMLKeys->case_key();
    }

    OracleDML_OracleDMLKeys::nclob_key_return OracleDML::nclob_key()
    {
        return m_gOracleDMLKeys->nclob_key();
    }

    OracleDML_OracleDMLKeys::xmlcolattval_key_return OracleDML::xmlcolattval_key()
    {
        return m_gOracleDMLKeys->xmlcolattval_key();
    }

    OracleDML_OracleDMLKeys::batch_key_return OracleDML::batch_key()
    {
        return m_gOracleDMLKeys->batch_key();
    }

    OracleDML_OracleDMLCommons::where_clause_return OracleDML::where_clause()
    {
        return m_gOracleDMLCommons->where_clause();
    }

    OracleDML_OracleDMLKeys::percent_type_key_return OracleDML::percent_type_key()
    {
        return m_gOracleDMLKeys->percent_type_key();
    }

    OracleDML_OracleDMLKeys::evalname_key_return OracleDML::evalname_key()
    {
        return m_gOracleDMLKeys->evalname_key();
    }

    OracleDML_OracleDMLKeys::aggregate_key_return OracleDML::aggregate_key()
    {
        return m_gOracleDMLKeys->aggregate_key();
    }

    OracleDML_OracleDMLKeys::left_key_return OracleDML::left_key()
    {
        return m_gOracleDMLKeys->left_key();
    }

    OracleDML_OracleDMLKeys::global_key_return OracleDML::global_key()
    {
        return m_gOracleDMLKeys->global_key();
    }

    OracleDML_OracleDMLKeys::dsinterval_unconstrained_key_return OracleDML::dsinterval_unconstrained_key()
    {
        return m_gOracleDMLKeys->dsinterval_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::truncate_key_return OracleDML::truncate_key()
    {
        return m_gOracleDMLKeys->truncate_key();
    }

    OracleDML_OracleDMLKeys::urowid_key_return OracleDML::urowid_key()
    {
        return m_gOracleDMLKeys->urowid_key();
    }

    OracleDML_OracleDMLKeys::reference_key_return OracleDML::reference_key()
    {
        return m_gOracleDMLKeys->reference_key();
    }

    OracleDML_OracleDMLKeys::chr_key_return OracleDML::chr_key()
    {
        return m_gOracleDMLKeys->chr_key();
    }

    OracleDML_OracleDMLKeys::share_key_return OracleDML::share_key()
    {
        return m_gOracleDMLKeys->share_key();
    }

    OracleDML_OracleDMLKeys::hash_key_return OracleDML::hash_key()
    {
        return m_gOracleDMLKeys->hash_key();
    }

    OracleDML_OracleDMLKeys::indicator_key_return OracleDML::indicator_key()
    {
        return m_gOracleDMLKeys->indicator_key();
    }

    OracleDML_OracleDMLKeys::binary_float_infinity_key_return OracleDML::binary_float_infinity_key()
    {
        return m_gOracleDMLKeys->binary_float_infinity_key();
    }

    OracleDML_OracleDMLCommons::id_expression_return OracleDML::id_expression(int toraTokenType, int usageType)
    {
        return m_gOracleDMLCommons->id_expression(toraTokenType, usageType);
    }

    OracleDML_OracleDMLKeys::nomaxvalue_key_return OracleDML::nomaxvalue_key()
    {
        return m_gOracleDMLKeys->nomaxvalue_key();
    }

    OracleDML_OracleDMLKeys::inline_key_return OracleDML::inline_key()
    {
        return m_gOracleDMLKeys->inline_key();
    }

    OracleDML_OracleDMLKeys::interval_key_return OracleDML::interval_key()
    {
        return m_gOracleDMLKeys->interval_key();
    }

    OracleDML_OracleDMLKeys::disable_key_return OracleDML::disable_key()
    {
        return m_gOracleDMLKeys->disable_key();
    }

    OracleDML_OracleDMLKeys::goto_key_return OracleDML::goto_key()
    {
        return m_gOracleDMLKeys->goto_key();
    }

    OracleDML_OracleDMLKeys::snapshot_key_return OracleDML::snapshot_key()
    {
        return m_gOracleDMLKeys->snapshot_key();
    }

    OracleDML_OracleDMLKeys::numeric_key_return OracleDML::numeric_key()
    {
        return m_gOracleDMLKeys->numeric_key();
    }

    OracleDML_OracleDMLKeys::instr_key_return OracleDML::instr_key()
    {
        return m_gOracleDMLKeys->instr_key();
    }

    OracleDML_OracleDMLKeys::table_key_return OracleDML::table_key()
    {
        return m_gOracleDMLKeys->table_key();
    }

    OracleDML_OracleDMLKeys::system_key_return OracleDML::system_key()
    {
        return m_gOracleDMLKeys->system_key();
    }

    OracleDML_OracleDMLKeys::prior_key_return OracleDML::prior_key()
    {
        return m_gOracleDMLKeys->prior_key();
    }

    OracleDML_OracleDMLKeys::customdatum_key_return OracleDML::customdatum_key()
    {
        return m_gOracleDMLKeys->customdatum_key();
    }

    OracleDML_OracleDMLKeys::body_key_return OracleDML::body_key()
    {
        return m_gOracleDMLKeys->body_key();
    }

    OracleDML_OracleDMLKeys::update_key_return OracleDML::update_key()
    {
        return m_gOracleDMLKeys->update_key();
    }

    OracleDML_OracleDMLKeys::nominvalue_key_return OracleDML::nominvalue_key()
    {
        return m_gOracleDMLKeys->nominvalue_key();
    }

    OracleDML_OracleDMLKeys::date_key_return OracleDML::date_key()
    {
        return m_gOracleDMLKeys->date_key();
    }

    OracleDML_OracleDMLKeys::sqlerror_key_return OracleDML::sqlerror_key()
    {
        return m_gOracleDMLKeys->sqlerror_key();
    }

    OracleDML_OracleDMLKeys::not_key_return OracleDML::not_key()
    {
        return m_gOracleDMLKeys->not_key();
    }

    OracleDML_OracleDMLKeys::statement_id_key_return OracleDML::statement_id_key()
    {
        return m_gOracleDMLKeys->statement_id_key();
    }

    OracleDML_OracleDMLKeys::deferred_key_return OracleDML::deferred_key()
    {
        return m_gOracleDMLKeys->deferred_key();
    }

    OracleDML_OracleDMLKeys::success_key_return OracleDML::success_key()
    {
        return m_gOracleDMLKeys->success_key();
    }

    OracleDML_OracleDMLKeys::varray_key_return OracleDML::varray_key()
    {
        return m_gOracleDMLKeys->varray_key();
    }

    OracleDML_OracleDMLKeys::oradata_key_return OracleDML::oradata_key()
    {
        return m_gOracleDMLKeys->oradata_key();
    }

    OracleDML_OracleDMLKeys::substring_key_return OracleDML::substring_key()
    {
        return m_gOracleDMLKeys->substring_key();
    }

    OracleDML_OracleDMLKeys::no_key_return OracleDML::no_key()
    {
        return m_gOracleDMLKeys->no_key();
    }

    OracleDML_OracleDMLKeys::decrement_key_return OracleDML::decrement_key()
    {
        return m_gOracleDMLKeys->decrement_key();
    }

    OracleDML_OracleDMLKeys::entityescaping_key_return OracleDML::entityescaping_key()
    {
        return m_gOracleDMLKeys->entityescaping_key();
    }

    OracleDML_OracleDMLKeys::document_key_return OracleDML::document_key()
    {
        return m_gOracleDMLKeys->document_key();
    }

    OracleDML_OracleDMLKeys::abs_key_return OracleDML::abs_key()
    {
        return m_gOracleDMLKeys->abs_key();
    }

    OracleDML_OracleDMLKeys::cube_key_return OracleDML::cube_key()
    {
        return m_gOracleDMLKeys->cube_key();
    }

    OracleDML_OracleDMLKeys::at_key_return OracleDML::at_key()
    {
        return m_gOracleDMLKeys->at_key();
    }

    OracleDML_OracleDMLKeys::unique_key_return OracleDML::unique_key()
    {
        return m_gOracleDMLKeys->unique_key();
    }

    OracleDML_OracleDMLKeys::join_key_return OracleDML::join_key()
    {
        return m_gOracleDMLKeys->join_key();
    }

    OracleDML_OracleDMLKeys::execute_key_return OracleDML::execute_key()
    {
        return m_gOracleDMLKeys->execute_key();
    }

    OracleDML_OracleDMLKeys::yes_key_return OracleDML::yes_key()
    {
        return m_gOracleDMLKeys->yes_key();
    }

    OracleDML_OracleDMLCommons::constraint_name_return OracleDML::constraint_name()
    {
        return m_gOracleDMLCommons->constraint_name();
    }

    OracleDML_OracleDMLKeys::static_key_return OracleDML::static_key()
    {
        return m_gOracleDMLKeys->static_key();
    }

    OracleDML_OracleDMLKeys::forall_key_return OracleDML::forall_key()
    {
        return m_gOracleDMLKeys->forall_key();
    }

    OracleDML_OracleDMLKeys::timezone_abbr_key_return OracleDML::timezone_abbr_key()
    {
        return m_gOracleDMLKeys->timezone_abbr_key();
    }

    OracleDML_OracleDMLKeys::binary_double_nan_key_return OracleDML::binary_double_nan_key()
    {
        return m_gOracleDMLKeys->binary_double_nan_key();
    }

    OracleDML_OracleDMLKeys::specification_key_return OracleDML::specification_key()
    {
        return m_gOracleDMLKeys->specification_key();
    }

    OracleDML_OracleDMLKeys::include_key_return OracleDML::include_key()
    {
        return m_gOracleDMLKeys->include_key();
    }

    OracleDML_OracleDMLKeys::integer_key_return OracleDML::integer_key()
    {
        return m_gOracleDMLKeys->integer_key();
    }

    OracleDML_OracleDMLKeys::rpad_key_return OracleDML::rpad_key()
    {
        return m_gOracleDMLKeys->rpad_key();
    }

    OracleDML_OracleDMLKeys::exclusive_key_return OracleDML::exclusive_key()
    {
        return m_gOracleDMLKeys->exclusive_key();
    }

    OracleDML_OracleDMLCommons::column_alias_return OracleDML::column_alias()
    {
        return m_gOracleDMLCommons->column_alias();
    }

    OracleDML_OracleDMLCommons::cost_class_name_return OracleDML::cost_class_name()
    {
        return m_gOracleDMLCommons->cost_class_name();
    }

    OracleDML_OracleDMLKeys::second_key_return OracleDML::second_key()
    {
        return m_gOracleDMLKeys->second_key();
    }

    OracleDML_OracleDMLKeys::percent_isopen_key_return OracleDML::percent_isopen_key()
    {
        return m_gOracleDMLKeys->percent_isopen_key();
    }

    OracleDML_OracleDMLKeys::plan_key_return OracleDML::plan_key()
    {
        return m_gOracleDMLKeys->plan_key();
    }

    OracleDML_OracleDMLKeys::naturaln_key_return OracleDML::naturaln_key()
    {
        return m_gOracleDMLKeys->naturaln_key();
    }

    OracleDML_OracleDMLKeys::between_key_return OracleDML::between_key()
    {
        return m_gOracleDMLKeys->between_key();
    }

    OracleDML_OracleDMLKeys::unpivot_key_return OracleDML::unpivot_key()
    {
        return m_gOracleDMLKeys->unpivot_key();
    }

    OracleDML_OracleDMLKeys::rowid_key_return OracleDML::rowid_key()
    {
        return m_gOracleDMLKeys->rowid_key();
    }

    OracleDML_OracleDMLKeys::unknown_key_return OracleDML::unknown_key()
    {
        return m_gOracleDMLKeys->unknown_key();
    }

    OracleDML_OracleDMLKeys::value_key_return OracleDML::value_key()
    {
        return m_gOracleDMLKeys->value_key();
    }

    OracleDML_OracleDMLKeys::corrupt_xid_all_key_return OracleDML::corrupt_xid_all_key()
    {
        return m_gOracleDMLKeys->corrupt_xid_all_key();
    }

    OracleDML_OracleDMLCommons::id_return OracleDML::id(int toraTokenType, int usageType)
    {
        return m_gOracleDMLCommons->id(toraTokenType, usageType);
    }

    OracleDML_OracleDMLKeys::when_key_return OracleDML::when_key()
    {
        return m_gOracleDMLKeys->when_key();
    }

    OracleDML_OracleDMLKeys::hide_key_return OracleDML::hide_key()
    {
        return m_gOracleDMLKeys->hide_key();
    }

    OracleDML_OracleDMLKeys::following_key_return OracleDML::following_key()
    {
        return m_gOracleDMLKeys->following_key();
    }

    OracleDML_OracleDMLKeys::external_key_return OracleDML::external_key()
    {
        return m_gOracleDMLKeys->external_key();
    }

    OracleDML_OracleDMLKeys::java_key_return OracleDML::java_key()
    {
        return m_gOracleDMLKeys->java_key();
    }

    OracleDML_OracleDMLKeys::concat_key_return OracleDML::concat_key()
    {
        return m_gOracleDMLKeys->concat_key();
    }

    OracleDML_OracleDMLKeys::nvarchar2_key_return OracleDML::nvarchar2_key()
    {
        return m_gOracleDMLKeys->nvarchar2_key();
    }

    OracleDML_OracleDMLKeys::xmlforest_key_return OracleDML::xmlforest_key()
    {
        return m_gOracleDMLKeys->xmlforest_key();
    }

    OracleDML_OracleDMLKeys::oserror_key_return OracleDML::oserror_key()
    {
        return m_gOracleDMLKeys->oserror_key();
    }

    OracleDML_OracleDMLCommons::query_name_return OracleDML::query_name()
    {
        return m_gOracleDMLCommons->query_name();
    }

    OracleDML_OracleDMLKeys::log_key_return OracleDML::log_key()
    {
        return m_gOracleDMLKeys->log_key();
    }

    OracleDML_OracleDMLKeys::on_key_return OracleDML::on_key()
    {
        return m_gOracleDMLKeys->on_key();
    }

    OracleDML_OracleDMLKeys::sequence_key_return OracleDML::sequence_key()
    {
        return m_gOracleDMLKeys->sequence_key();
    }

    OracleDML_OracleDMLKeys::minus_key_return OracleDML::minus_key()
    {
        return m_gOracleDMLKeys->minus_key();
    }

    OracleDML_OracleDMLKeys::committed_key_return OracleDML::committed_key()
    {
        return m_gOracleDMLKeys->committed_key();
    }

    OracleDML_OracleDMLKeys::show_key_return OracleDML::show_key()
    {
        return m_gOracleDMLKeys->show_key();
    }

    OracleDML_OracleDMLKeys::for_key_return OracleDML::for_key()
    {
        return m_gOracleDMLKeys->for_key();
    }

    OracleDML_OracleDMLKeys::last_value_key_return OracleDML::last_value_key()
    {
        return m_gOracleDMLKeys->last_value_key();
    }

    OracleDML_OracleDMLKeys::cost_key_return OracleDML::cost_key()
    {
        return m_gOracleDMLKeys->cost_key();
    }

    OracleDML_OracleDMLKeys::rules_key_return OracleDML::rules_key()
    {
        return m_gOracleDMLKeys->rules_key();
    }

    OracleDML_OracleDMLKeys::exists_key_return OracleDML::exists_key()
    {
        return m_gOracleDMLKeys->exists_key();
    }

    OracleDML_OracleDMLKeys::noaudit_key_return OracleDML::noaudit_key()
    {
        return m_gOracleDMLKeys->noaudit_key();
    }

    OracleDML_OracleDMLCommons::table_element_return OracleDML::table_element()
    {
        return m_gOracleDMLCommons->table_element();
    }

    OracleDML_OracleDMLKeys::automatic_key_return OracleDML::automatic_key()
    {
        return m_gOracleDMLKeys->automatic_key();
    }

    OracleDML_OracleDMLKeys::avg_key_return OracleDML::avg_key()
    {
        return m_gOracleDMLKeys->avg_key();
    }

    OracleDML_OracleDMLKeys::array_key_return OracleDML::array_key()
    {
        return m_gOracleDMLKeys->array_key();
    }

    OracleDML_OracleDMLKeys::while_key_return OracleDML::while_key()
    {
        return m_gOracleDMLKeys->while_key();
    }

    OracleDML_OracleDMLKeys::binary_double_max_subnormal_key_return OracleDML::binary_double_max_subnormal_key()
    {
        return m_gOracleDMLKeys->binary_double_max_subnormal_key();
    }

    OracleDML_OracleDMLCommons::keep_clause_return OracleDML::keep_clause()
    {
        return m_gOracleDMLCommons->keep_clause();
    }

    OracleDML_OracleDMLKeys::elsif_key_return OracleDML::elsif_key()
    {
        return m_gOracleDMLKeys->elsif_key();
    }

    OracleDML_OracleDMLKeys::varying_key_return OracleDML::varying_key()
    {
        return m_gOracleDMLKeys->varying_key();
    }

    OracleDML_OracleDMLKeys::transaction_key_return OracleDML::transaction_key()
    {
        return m_gOracleDMLKeys->transaction_key();
    }

    OracleDML_OracleDMLKeys::leading_key_return OracleDML::leading_key()
    {
        return m_gOracleDMLKeys->leading_key();
    }

    OracleDML_OracleDMLKeys::each_key_return OracleDML::each_key()
    {
        return m_gOracleDMLKeys->each_key();
    }

    OracleDML_OracleDMLKeys::xmlquery_key_return OracleDML::xmlquery_key()
    {
        return m_gOracleDMLKeys->xmlquery_key();
    }

    OracleDML_OracleDMLKeys::count_key_return OracleDML::count_key()
    {
        return m_gOracleDMLKeys->count_key();
    }

    OracleDML_OracleDMLKeys::all_key_return OracleDML::all_key()
    {
        return m_gOracleDMLKeys->all_key();
    }

    OracleDML_OracleDMLKeys::link_key_return OracleDML::link_key()
    {
        return m_gOracleDMLKeys->link_key();
    }

    OracleDML_OracleDMLCommons::trigger_name_return OracleDML::trigger_name()
    {
        return m_gOracleDMLCommons->trigger_name();
    }

    OracleDML_OracleDMLKeys::pivot_key_return OracleDML::pivot_key()
    {
        return m_gOracleDMLKeys->pivot_key();
    }

    OracleDML_OracleDMLKeys::like2_key_return OracleDML::like2_key()
    {
        return m_gOracleDMLKeys->like2_key();
    }

    OracleDML_OracleDMLKeys::yminterval_unconstrained_key_return OracleDML::yminterval_unconstrained_key()
    {
        return m_gOracleDMLKeys->yminterval_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::union_key_return OracleDML::union_key()
    {
        return m_gOracleDMLKeys->union_key();
    }

    OracleDML_OracleDMLKeys::schemacheck_key_return OracleDML::schemacheck_key()
    {
        return m_gOracleDMLKeys->schemacheck_key();
    }

    OracleDML_OracleDMLKeys::validate_key_return OracleDML::validate_key()
    {
        return m_gOracleDMLKeys->validate_key();
    }

    OracleDML_OracleDMLKeys::distinct_key_return OracleDML::distinct_key()
    {
        return m_gOracleDMLKeys->distinct_key();
    }

    OracleDML_OracleDMLCommons::label_name_return OracleDML::label_name()
    {
        return m_gOracleDMLCommons->label_name();
    }

    OracleDML_OracleDMLKeys::binary_float_min_subnormal_key_return OracleDML::binary_float_min_subnormal_key()
    {
        return m_gOracleDMLKeys->binary_float_min_subnormal_key();
    }

    OracleDML_OracleDMLKeys::siblings_key_return OracleDML::siblings_key()
    {
        return m_gOracleDMLKeys->siblings_key();
    }

    OracleDML_OracleDMLKeys::number_key_return OracleDML::number_key()
    {
        return m_gOracleDMLKeys->number_key();
    }

    OracleDML_OracleDMLCommons::concatenation_op_return OracleDML::concatenation_op()
    {
        return m_gOracleDMLCommons->concatenation_op();
    }

    OracleDML_OracleDMLKeys::mod_key_return OracleDML::mod_key()
    {
        return m_gOracleDMLKeys->mod_key();
    }

    OracleDML_OracleDMLKeys::locked_key_return OracleDML::locked_key()
    {
        return m_gOracleDMLKeys->locked_key();
    }

    OracleDML_OracleDMLKeys::dbtimezone_key_return OracleDML::dbtimezone_key()
    {
        return m_gOracleDMLKeys->dbtimezone_key();
    }

    OracleDML_OracleDMLKeys::matched_key_return OracleDML::matched_key()
    {
        return m_gOracleDMLKeys->matched_key();
    }

    OracleDML_OracleDMLKeys::round_key_return OracleDML::round_key()
    {
        return m_gOracleDMLKeys->round_key();
    }

    OracleDML_OracleDMLKeys::sequential_key_return OracleDML::sequential_key()
    {
        return m_gOracleDMLKeys->sequential_key();
    }

    OracleDML_OracleDMLKeys::collate_key_return OracleDML::collate_key()
    {
        return m_gOracleDMLKeys->collate_key();
    }

    OracleDML_OracleDMLKeys::trigger_key_return OracleDML::trigger_key()
    {
        return m_gOracleDMLKeys->trigger_key();
    }

    OracleDML_OracleDMLCommons::tableview_name_return OracleDML::tableview_name()
    {
        return m_gOracleDMLCommons->tableview_name();
    }

    OracleDML_OracleDMLKeys::subtype_key_return OracleDML::subtype_key()
    {
        return m_gOracleDMLKeys->subtype_key();
    }

    OracleDML_OracleDMLKeys::identified_key_return OracleDML::identified_key()
    {
        return m_gOracleDMLKeys->identified_key();
    }

    OracleDML_OracleDMLKeys::block_key_return OracleDML::block_key()
    {
        return m_gOracleDMLKeys->block_key();
    }

    OracleDML_OracleDMLKeys::nowait_key_return OracleDML::nowait_key()
    {
        return m_gOracleDMLKeys->nowait_key();
    }

    OracleDML_OracleDMLKeys::set_key_return OracleDML::set_key()
    {
        return m_gOracleDMLKeys->set_key();
    }

    OracleDML_OracleDMLKeys::least_key_return OracleDML::least_key()
    {
        return m_gOracleDMLKeys->least_key();
    }

    OracleDML_OracleDMLKeys::multiset_key_return OracleDML::multiset_key()
    {
        return m_gOracleDMLKeys->multiset_key();
    }

    OracleDML_OracleDMLKeys::userenv_key_return OracleDML::userenv_key()
    {
        return m_gOracleDMLKeys->userenv_key();
    }

    OracleDML_OracleDMLKeys::dense_rank_key_return OracleDML::dense_rank_key()
    {
        return m_gOracleDMLKeys->dense_rank_key();
    }

    OracleDML_OracleDMLKeys::ignore_key_return OracleDML::ignore_key()
    {
        return m_gOracleDMLKeys->ignore_key();
    }

    OracleDML_OracleDMLKeys::timezone_minute_key_return OracleDML::timezone_minute_key()
    {
        return m_gOracleDMLKeys->timezone_minute_key();
    }

    OracleDML_OracleDMLKeys::resumable_key_return OracleDML::resumable_key()
    {
        return m_gOracleDMLKeys->resumable_key();
    }

    OracleDML_OracleDMLKeys::nchar_cs_key_return OracleDML::nchar_cs_key()
    {
        return m_gOracleDMLKeys->nchar_cs_key();
    }

    OracleDML_OracleDMLKeys::having_key_return OracleDML::having_key()
    {
        return m_gOracleDMLKeys->having_key();
    }

    OracleDML_OracleDMLKeys::logon_key_return OracleDML::logon_key()
    {
        return m_gOracleDMLKeys->logon_key();
    }

    OracleDML_OracleDMLKeys::insert_key_return OracleDML::insert_key()
    {
        return m_gOracleDMLKeys->insert_key();
    }

    OracleDML_OracleDMLKeys::character_length_key_return OracleDML::character_length_key()
    {
        return m_gOracleDMLKeys->character_length_key();
    }

    OracleDML_OracleDMLKeys::infinite_key_return OracleDML::infinite_key()
    {
        return m_gOracleDMLKeys->infinite_key();
    }

    OracleDML_OracleDMLKeys::xmlexists_key_return OracleDML::xmlexists_key()
    {
        return m_gOracleDMLKeys->xmlexists_key();
    }

    OracleDML_OracleDMLKeys::max_key_return OracleDML::max_key()
    {
        return m_gOracleDMLKeys->max_key();
    }

    OracleDML_OracleDMLKeys::range_key_return OracleDML::range_key()
    {
        return m_gOracleDMLKeys->range_key();
    }

    OracleDML_OracleDMLKeys::referencing_key_return OracleDML::referencing_key()
    {
        return m_gOracleDMLKeys->referencing_key();
    }

    OracleDML_OracleDMLKeys::object_key_return OracleDML::object_key()
    {
        return m_gOracleDMLKeys->object_key();
    }

    OracleDML_OracleDMLKeys::isolation_key_return OracleDML::isolation_key()
    {
        return m_gOracleDMLKeys->isolation_key();
    }

    OracleDML_OracleDMLKeys::cast_key_return OracleDML::cast_key()
    {
        return m_gOracleDMLKeys->cast_key();
    }

    OracleDML_OracleDMLKeys::binary_float_nan_key_return OracleDML::binary_float_nan_key()
    {
        return m_gOracleDMLKeys->binary_float_nan_key();
    }

    OracleDML_OracleDMLKeys::partition_key_return OracleDML::partition_key()
    {
        return m_gOracleDMLKeys->partition_key();
    }

    OracleDML_OracleDMLKeys::ceil_key_return OracleDML::ceil_key()
    {
        return m_gOracleDMLKeys->ceil_key();
    }

    OracleDML_OracleDMLKeys::single_key_return OracleDML::single_key()
    {
        return m_gOracleDMLKeys->single_key();
    }

    OracleDML_OracleDMLCommons::greater_than_or_equals_op_return OracleDML::greater_than_or_equals_op()
    {
        return m_gOracleDMLCommons->greater_than_or_equals_op();
    }

    OracleDML_OracleDMLKeys::ref_key_return OracleDML::ref_key()
    {
        return m_gOracleDMLKeys->ref_key();
    }

    OracleDML_OracleDMLKeys::including_key_return OracleDML::including_key()
    {
        return m_gOracleDMLKeys->including_key();
    }

    OracleDML_OracleDMLKeys::scn_key_return OracleDML::scn_key()
    {
        return m_gOracleDMLKeys->scn_key();
    }

    OracleDML_OracleDMLKeys::with_key_return OracleDML::with_key()
    {
        return m_gOracleDMLKeys->with_key();
    }

    OracleDML_OracleDMLKeys::debug_key_return OracleDML::debug_key()
    {
        return m_gOracleDMLKeys->debug_key();
    }

    OracleDML_OracleDMLKeys::to_date_key_return OracleDML::to_date_key()
    {
        return m_gOracleDMLKeys->to_date_key();
    }

    OracleDML_OracleDMLKeys::open_key_return OracleDML::open_key()
    {
        return m_gOracleDMLKeys->open_key();
    }

    OracleDML_OracleDMLCommons::type_spec_return OracleDML::type_spec()
    {
        return m_gOracleDMLCommons->type_spec();
    }

    OracleDML_OracleDMLKeys::definer_key_return OracleDML::definer_key()
    {
        return m_gOracleDMLKeys->definer_key();
    }

    OracleDML_OracleDMLKeys::precision_key_return OracleDML::precision_key()
    {
        return m_gOracleDMLKeys->precision_key();
    }

    OracleDML_OracleDMLKeys::write_key_return OracleDML::write_key()
    {
        return m_gOracleDMLKeys->write_key();
    }

    OracleDML_OracleDMLKeys::real_key_return OracleDML::real_key()
    {
        return m_gOracleDMLKeys->real_key();
    }

    OracleDML_OracleDMLKeys::last_key_return OracleDML::last_key()
    {
        return m_gOracleDMLKeys->last_key();
    }

    OracleDML_OracleDMLKeys::attribute_key_return OracleDML::attribute_key()
    {
        return m_gOracleDMLKeys->attribute_key();
    }

    OracleDML_OracleDMLKeys::constraints_key_return OracleDML::constraints_key()
    {
        return m_gOracleDMLKeys->constraints_key();
    }

    OracleDML_OracleDMLKeys::bfile_key_return OracleDML::bfile_key()
    {
        return m_gOracleDMLKeys->bfile_key();
    }

    OracleDML_OracleDMLKeys::xmltable_key_return OracleDML::xmltable_key()
    {
        return m_gOracleDMLKeys->xmltable_key();
    }

    OracleDML_OracleDMLKeys::nulls_key_return OracleDML::nulls_key()
    {
        return m_gOracleDMLKeys->nulls_key();
    }

    OracleDML_OracleDMLKeys::a_key_return OracleDML::a_key()
    {
        return m_gOracleDMLKeys->a_key();
    }

    OracleDML_OracleDMLKeys::xml_key_return OracleDML::xml_key()
    {
        return m_gOracleDMLKeys->xml_key();
    }

    OracleDML_OracleDMLKeys::sqldata_key_return OracleDML::sqldata_key()
    {
        return m_gOracleDMLKeys->sqldata_key();
    }

    OracleDML_OracleDMLKeys::loop_key_return OracleDML::loop_key()
    {
        return m_gOracleDMLKeys->loop_key();
    }

    OracleDML_OracleDMLKeys::create_key_return OracleDML::create_key()
    {
        return m_gOracleDMLKeys->create_key();
    }

    OracleDML_OracleDMLCommons::precision_part_return OracleDML::precision_part()
    {
        return m_gOracleDMLCommons->precision_part();
    }

    OracleDML_OracleDMLKeys::dump_key_return OracleDML::dump_key()
    {
        return m_gOracleDMLKeys->dump_key();
    }

    OracleDML_OracleDMLKeys::present_key_return OracleDML::present_key()
    {
        return m_gOracleDMLKeys->present_key();
    }

    OracleDML_OracleDMLKeys::wait_key_return OracleDML::wait_key()
    {
        return m_gOracleDMLKeys->wait_key();
    }

    OracleDML_OracleDMLKeys::timestamp_unconstrained_key_return OracleDML::timestamp_unconstrained_key()
    {
        return m_gOracleDMLKeys->timestamp_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::mode_key_return OracleDML::mode_key()
    {
        return m_gOracleDMLKeys->mode_key();
    }

    OracleDML_OracleDMLKeys::rollback_key_return OracleDML::rollback_key()
    {
        return m_gOracleDMLKeys->rollback_key();
    }

    OracleDML_OracleDMLKeys::work_key_return OracleDML::work_key()
    {
        return m_gOracleDMLKeys->work_key();
    }

    OracleDML_OracleDMLKeys::binary_double_infinity_key_return OracleDML::binary_double_infinity_key()
    {
        return m_gOracleDMLKeys->binary_double_infinity_key();
    }

    OracleDML_OracleDMLKeys::timestamp_ltz_unconstrained_key_return OracleDML::timestamp_ltz_unconstrained_key()
    {
        return m_gOracleDMLKeys->timestamp_ltz_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::shutdown_key_return OracleDML::shutdown_key()
    {
        return m_gOracleDMLKeys->shutdown_key();
    }

    OracleDML_OracleDMLKeys::ltrim_key_return OracleDML::ltrim_key()
    {
        return m_gOracleDMLKeys->ltrim_key();
    }

    OracleDML_OracleDMLKeys::pipelined_key_return OracleDML::pipelined_key()
    {
        return m_gOracleDMLKeys->pipelined_key();
    }

    OracleDML_OracleDMLKeys::outer_key_return OracleDML::outer_key()
    {
        return m_gOracleDMLKeys->outer_key();
    }

    OracleDML_OracleDMLKeys::trunc_key_return OracleDML::trunc_key()
    {
        return m_gOracleDMLKeys->trunc_key();
    }

    OracleDML_OracleDMLKeys::database_key_return OracleDML::database_key()
    {
        return m_gOracleDMLKeys->database_key();
    }

    OracleDML_OracleDMLKeys::maxvalue_key_return OracleDML::maxvalue_key()
    {
        return m_gOracleDMLKeys->maxvalue_key();
    }

    OracleDML_OracleDMLKeys::dimension_key_return OracleDML::dimension_key()
    {
        return m_gOracleDMLKeys->dimension_key();
    }

    OracleDML_OracleDMLKeys::values_key_return OracleDML::values_key()
    {
        return m_gOracleDMLKeys->values_key();
    }

    OracleDML_OracleDMLKeys::compound_key_return OracleDML::compound_key()
    {
        return m_gOracleDMLKeys->compound_key();
    }

    OracleDML_OracleDMLKeys::match_key_return OracleDML::match_key()
    {
        return m_gOracleDMLKeys->match_key();
    }

    OracleDML_OracleDMLKeys::standalone_key_return OracleDML::standalone_key()
    {
        return m_gOracleDMLKeys->standalone_key();
    }

    OracleDML_OracleDMLKeys::xmlattributes_key_return OracleDML::xmlattributes_key()
    {
        return m_gOracleDMLKeys->xmlattributes_key();
    }

    OracleDML_OracleDMLCommons::sequence_name_return OracleDML::sequence_name()
    {
        return m_gOracleDMLCommons->sequence_name();
    }

    OracleDML_OracleDMLKeys::savepoint_key_return OracleDML::savepoint_key()
    {
        return m_gOracleDMLKeys->savepoint_key();
    }

    OracleDML_OracleDMLKeys::float_key_return OracleDML::float_key()
    {
        return m_gOracleDMLKeys->float_key();
    }

    OracleDML_OracleDMLKeys::noentityescaping_key_return OracleDML::noentityescaping_key()
    {
        return m_gOracleDMLKeys->noentityescaping_key();
    }

    OracleDML_OracleDMLCommons::function_argument_analytic_return OracleDML::function_argument_analytic()
    {
        return m_gOracleDMLCommons->function_argument_analytic();
    }

    OracleDML_OracleDMLKeys::binary_double_max_normal_key_return OracleDML::binary_double_max_normal_key()
    {
        return m_gOracleDMLKeys->binary_double_max_normal_key();
    }

    OracleDML_OracleDMLKeys::over_key_return OracleDML::over_key()
    {
        return m_gOracleDMLKeys->over_key();
    }

    OracleDML_OracleDMLKeys::nan_key_return OracleDML::nan_key()
    {
        return m_gOracleDMLKeys->nan_key();
    }

    OracleDML_OracleDMLKeys::min_key_return OracleDML::min_key()
    {
        return m_gOracleDMLKeys->min_key();
    }

    OracleDML_OracleDMLCommons::native_datatype_element_return OracleDML::native_datatype_element()
    {
        return m_gOracleDMLCommons->native_datatype_element();
    }

    OracleDML_OracleDMLKeys::cross_key_return OracleDML::cross_key()
    {
        return m_gOracleDMLKeys->cross_key();
    }

    OracleDML_OracleDMLCommons::quoted_string_return OracleDML::quoted_string()
    {
        return m_gOracleDMLCommons->quoted_string();
    }

    OracleDML_OracleDMLKeys::timezone_hour_key_return OracleDML::timezone_hour_key()
    {
        return m_gOracleDMLKeys->timezone_hour_key();
    }

    OracleDML_OracleDMLKeys::char_length_key_return OracleDML::char_length_key()
    {
        return m_gOracleDMLKeys->char_length_key();
    }

    OracleDML_OracleDMLCommons::column_name_return OracleDML::column_name()
    {
        return m_gOracleDMLCommons->column_name();
    }

    OracleDML_OracleDMLKeys::c_key_return OracleDML::c_key()
    {
        return m_gOracleDMLKeys->c_key();
    }

    OracleDML_OracleDMLKeys::unlimited_key_return OracleDML::unlimited_key()
    {
        return m_gOracleDMLKeys->unlimited_key();
    }

    OracleDML_OracleDMLKeys::procedure_key_return OracleDML::procedure_key()
    {
        return m_gOracleDMLKeys->procedure_key();
    }

    OracleDML_OracleDMLKeys::level_key_return OracleDML::level_key()
    {
        return m_gOracleDMLKeys->level_key();
    }

    OracleDML_OracleDMLKeys::statement_key_return OracleDML::statement_key()
    {
        return m_gOracleDMLKeys->statement_key();
    }

    OracleDML_OracleDMLKeys::iterate_key_return OracleDML::iterate_key()
    {
        return m_gOracleDMLKeys->iterate_key();
    }

    OracleDML_OracleDMLCommons::partition_extension_clause_return OracleDML::partition_extension_clause()
    {
        return m_gOracleDMLCommons->partition_extension_clause();
    }

    OracleDML_OracleDMLKeys::binary_double_key_return OracleDML::binary_double_key()
    {
        return m_gOracleDMLKeys->binary_double_key();
    }

    OracleDML_OracleDMLKeys::variance_key_return OracleDML::variance_key()
    {
        return m_gOracleDMLKeys->variance_key();
    }

    OracleDML_OracleDMLKeys::vsize_key_return OracleDML::vsize_key()
    {
        return m_gOracleDMLKeys->vsize_key();
    }

    OracleDML_OracleDMLKeys::national_key_return OracleDML::national_key()
    {
        return m_gOracleDMLKeys->national_key();
    }

    OracleDML_OracleDMLKeys::measures_key_return OracleDML::measures_key()
    {
        return m_gOracleDMLKeys->measures_key();
    }

    OracleDML_OracleDMLKeys::exception_key_return OracleDML::exception_key()
    {
        return m_gOracleDMLKeys->exception_key();
    }

    OracleDML_OracleDMLKeys::signtype_key_return OracleDML::signtype_key()
    {
        return m_gOracleDMLKeys->signtype_key();
    }

    OracleDML_OracleDMLKeys::row_key_return OracleDML::row_key()
    {
        return m_gOracleDMLKeys->row_key();
    }

    OracleDML_OracleDMLKeys::advise_key_return OracleDML::advise_key()
    {
        return m_gOracleDMLKeys->advise_key();
    }

    OracleDML_OracleDMLKeys::schema_key_return OracleDML::schema_key()
    {
        return m_gOracleDMLKeys->schema_key();
    }

    OracleDML_OracleDMLKeys::nocycle_key_return OracleDML::nocycle_key()
    {
        return m_gOracleDMLKeys->nocycle_key();
    }

    OracleDML_OracleDMLKeys::stddev_key_return OracleDML::stddev_key()
    {
        return m_gOracleDMLKeys->stddev_key();
    }

    OracleDML_OracleDMLKeys::corresponding_key_return OracleDML::corresponding_key()
    {
        return m_gOracleDMLKeys->corresponding_key();
    }

    OracleDML_OracleDMLCommons::bind_variable_return OracleDML::bind_variable()
    {
        return m_gOracleDMLCommons->bind_variable();
    }

    OracleDML_OracleDMLKeys::intersect_key_return OracleDML::intersect_key()
    {
        return m_gOracleDMLKeys->intersect_key();
    }

    OracleDML_OracleDMLKeys::to_number_key_return OracleDML::to_number_key()
    {
        return m_gOracleDMLKeys->to_number_key();
    }

    OracleDML_OracleDMLKeys::versions_key_return OracleDML::versions_key()
    {
        return m_gOracleDMLKeys->versions_key();
    }

    OracleDML_OracleDMLCommons::package_name_return OracleDML::package_name()
    {
        return m_gOracleDMLCommons->package_name();
    }

    OracleDML_OracleDMLKeys::library_key_return OracleDML::library_key()
    {
        return m_gOracleDMLKeys->library_key();
    }

    OracleDML_OracleDMLKeys::map_key_return OracleDML::map_key()
    {
        return m_gOracleDMLKeys->map_key();
    }

    OracleDML_OracleDMLKeys::none_key_return OracleDML::none_key()
    {
        return m_gOracleDMLKeys->none_key();
    }

    OracleDML_OracleDMLKeys::session_key_return OracleDML::session_key()
    {
        return m_gOracleDMLKeys->session_key();
    }

    OracleDML_OracleDMLKeys::char_key_return OracleDML::char_key()
    {
        return m_gOracleDMLKeys->char_key();
    }

    OracleDML_OracleDMLKeys::associate_key_return OracleDML::associate_key()
    {
        return m_gOracleDMLKeys->associate_key();
    }

    OracleDML_OracleDMLKeys::desc_key_return OracleDML::desc_key()
    {
        return m_gOracleDMLKeys->desc_key();
    }

    OracleDML_OracleDMLKeys::xmlserialize_key_return OracleDML::xmlserialize_key()
    {
        return m_gOracleDMLKeys->xmlserialize_key();
    }

    OracleDML_OracleDMLKeys::percent_notfound_key_return OracleDML::percent_notfound_key()
    {
        return m_gOracleDMLKeys->percent_notfound_key();
    }

    OracleDML_OracleDMLKeys::timeout_key_return OracleDML::timeout_key()
    {
        return m_gOracleDMLKeys->timeout_key();
    }

    OracleDML_OracleDMLKeys::noschemacheck_key_return OracleDML::noschemacheck_key()
    {
        return m_gOracleDMLKeys->noschemacheck_key();
    }

    OracleDML_OracleDMLKeys::start_key_return OracleDML::start_key()
    {
        return m_gOracleDMLKeys->start_key();
    }

    OracleDML_OracleDMLKeys::by_key_return OracleDML::by_key()
    {
        return m_gOracleDMLKeys->by_key();
    }

    OracleDML_OracleDMLKeys::disassociate_key_return OracleDML::disassociate_key()
    {
        return m_gOracleDMLKeys->disassociate_key();
    }

    OracleDML_OracleDMLKeys::package_key_return OracleDML::package_key()
    {
        return m_gOracleDMLKeys->package_key();
    }

    OracleDML_OracleDMLCommons::procedure_name_return OracleDML::procedure_name()
    {
        return m_gOracleDMLCommons->procedure_name();
    }

    OracleDML_OracleDMLKeys::cycle_key_return OracleDML::cycle_key()
    {
        return m_gOracleDMLKeys->cycle_key();
    }

    OracleDML_OracleDMLKeys::system_user_key_return OracleDML::system_user_key()
    {
        return m_gOracleDMLKeys->system_user_key();
    }

    OracleDML_OracleDMLKeys::inner_key_return OracleDML::inner_key()
    {
        return m_gOracleDMLKeys->inner_key();
    }

    OracleDML_OracleDMLKeys::submultiset_key_return OracleDML::submultiset_key()
    {
        return m_gOracleDMLKeys->submultiset_key();
    }

    OracleDML_OracleDMLKeys::uid_key_return OracleDML::uid_key()
    {
        return m_gOracleDMLKeys->uid_key();
    }

    OracleDML_OracleDMLKeys::exception_init_key_return OracleDML::exception_init_key()
    {
        return m_gOracleDMLKeys->exception_init_key();
    }

    OracleDML_OracleDMLKeys::alter_key_return OracleDML::alter_key()
    {
        return m_gOracleDMLKeys->alter_key();
    }

    OracleDML_OracleDMLKeys::ddl_key_return OracleDML::ddl_key()
    {
        return m_gOracleDMLKeys->ddl_key();
    }

    OracleDML_OracleDMLKeys::merge_key_return OracleDML::merge_key()
    {
        return m_gOracleDMLKeys->merge_key();
    }

    OracleDML_OracleDMLKeys::nocopy_key_return OracleDML::nocopy_key()
    {
        return m_gOracleDMLKeys->nocopy_key();
    }

    OracleDML_OracleDMLKeys::nested_key_return OracleDML::nested_key()
    {
        return m_gOracleDMLKeys->nested_key();
    }

    OracleDML_OracleDMLKeys::sets_key_return OracleDML::sets_key()
    {
        return m_gOracleDMLKeys->sets_key();
    }

    OracleDML_OracleDMLKeys::sign_key_return OracleDML::sign_key()
    {
        return m_gOracleDMLKeys->sign_key();
    }

    OracleDML_OracleDMLKeys::substitutable_key_return OracleDML::substitutable_key()
    {
        return m_gOracleDMLKeys->substitutable_key();
    }

    OracleDML_OracleDMLKeys::nullif_key_return OracleDML::nullif_key()
    {
        return m_gOracleDMLKeys->nullif_key();
    }

    OracleDML_OracleDMLKeys::binary_integer_key_return OracleDML::binary_integer_key()
    {
        return m_gOracleDMLKeys->binary_integer_key();
    }

    OracleDML_OracleDMLKeys::ordinality_key_return OracleDML::ordinality_key()
    {
        return m_gOracleDMLKeys->ordinality_key();
    }

    OracleDML_OracleDMLKeys::except_key_return OracleDML::except_key()
    {
        return m_gOracleDMLKeys->except_key();
    }

    OracleDML_OracleDMLKeys::in_key_return OracleDML::in_key()
    {
        return m_gOracleDMLKeys->in_key();
    }

    OracleDML_OracleDMLKeys::size_key_return OracleDML::size_key()
    {
        return m_gOracleDMLKeys->size_key();
    }

    OracleDML_OracleDMLKeys::member_key_return OracleDML::member_key()
    {
        return m_gOracleDMLKeys->member_key();
    }

    OracleDML_OracleDMLKeys::return_key_return OracleDML::return_key()
    {
        return m_gOracleDMLKeys->return_key();
    }

    OracleDML_OracleDMLKeys::varchar2_key_return OracleDML::varchar2_key()
    {
        return m_gOracleDMLKeys->varchar2_key();
    }

    OracleDML_OracleDMLKeys::dec_key_return OracleDML::dec_key()
    {
        return m_gOracleDMLKeys->dec_key();
    }

    OracleDML_OracleDMLKeys::is_key_return OracleDML::is_key()
    {
        return m_gOracleDMLKeys->is_key();
    }

    OracleDML_OracleDMLKeys::end_key_return OracleDML::end_key()
    {
        return m_gOracleDMLKeys->end_key();
    }

    OracleDML_OracleDMLCommons::char_set_name_return OracleDML::char_set_name()
    {
        return m_gOracleDMLCommons->char_set_name();
    }

    OracleDML_OracleDMLKeys::timezone_region_key_return OracleDML::timezone_region_key()
    {
        return m_gOracleDMLKeys->timezone_region_key();
    }

    OracleDML_OracleDMLKeys::until_key_return OracleDML::until_key()
    {
        return m_gOracleDMLKeys->until_key();
    }

    OracleDML_OracleDMLKeys::byte_key_return OracleDML::byte_key()
    {
        return m_gOracleDMLKeys->byte_key();
    }

    OracleDML_OracleDMLKeys::any_key_return OracleDML::any_key()
    {
        return m_gOracleDMLKeys->any_key();
    }

    OracleDML_OracleDMLKeys::day_key_return OracleDML::day_key()
    {
        return m_gOracleDMLKeys->day_key();
    }

    OracleDML_OracleDMLKeys::year_key_return OracleDML::year_key()
    {
        return m_gOracleDMLKeys->year_key();
    }

    OracleDML_OracleDMLKeys::reuse_key_return OracleDML::reuse_key()
    {
        return m_gOracleDMLKeys->reuse_key();
    }

    OracleDML_OracleDMLKeys::coalesce_key_return OracleDML::coalesce_key()
    {
        return m_gOracleDMLKeys->coalesce_key();
    }

    OracleDML_OracleDMLCommons::datatype_return OracleDML::datatype()
    {
        return m_gOracleDMLCommons->datatype();
    }

    OracleDML_OracleDMLKeys::percent_rowtype_key_return OracleDML::percent_rowtype_key()
    {
        return m_gOracleDMLKeys->percent_rowtype_key();
    }

    OracleDML_OracleDMLKeys::user_key_return OracleDML::user_key()
    {
        return m_gOracleDMLKeys->user_key();
    }

    OracleDML_OracleDMLKeys::varchar_key_return OracleDML::varchar_key()
    {
        return m_gOracleDMLKeys->varchar_key();
    }

    OracleDML_OracleDMLKeys::audit_key_return OracleDML::audit_key()
    {
        return m_gOracleDMLKeys->audit_key();
    }

    OracleDML_OracleDMLKeys::clob_key_return OracleDML::clob_key()
    {
        return m_gOracleDMLKeys->clob_key();
    }

    OracleDML_OracleDMLKeys::replace_key_return OracleDML::replace_key()
    {
        return m_gOracleDMLKeys->replace_key();
    }

    OracleDML_OracleDMLKeys::timestamp_tz_unconstrained_key_return OracleDML::timestamp_tz_unconstrained_key()
    {
        return m_gOracleDMLKeys->timestamp_tz_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::chartorowid_key_return OracleDML::chartorowid_key()
    {
        return m_gOracleDMLKeys->chartorowid_key();
    }

    OracleDML_OracleDMLKeys::fetch_key_return OracleDML::fetch_key()
    {
        return m_gOracleDMLKeys->fetch_key();
    }

    OracleDML_OracleDMLKeys::exit_key_return OracleDML::exit_key()
    {
        return m_gOracleDMLKeys->exit_key();
    }

    OracleDML_OracleDMLKeys::db_role_change_key_return OracleDML::db_role_change_key()
    {
        return m_gOracleDMLKeys->db_role_change_key();
    }

    OracleDML_OracleDMLKeys::mlslabel_key_return OracleDML::mlslabel_key()
    {
        return m_gOracleDMLKeys->mlslabel_key();
    }

    OracleDML_OracleDMLKeys::xmlagg_key_return OracleDML::xmlagg_key()
    {
        return m_gOracleDMLKeys->xmlagg_key();
    }

    OracleDML_OracleDMLKeys::passing_key_return OracleDML::passing_key()
    {
        return m_gOracleDMLKeys->passing_key();
    }

    OracleDML_OracleDMLKeys::sample_key_return OracleDML::sample_key()
    {
        return m_gOracleDMLKeys->sample_key();
    }

    OracleDML_OracleDMLKeys::authid_key_return OracleDML::authid_key()
    {
        return m_gOracleDMLKeys->authid_key();
    }

    OracleDML_OracleDMLKeys::add_key_return OracleDML::add_key()
    {
        return m_gOracleDMLKeys->add_key();
    }

    OracleDML_OracleDMLKeys::keep_key_return OracleDML::keep_key()
    {
        return m_gOracleDMLKeys->keep_key();
    }

    OracleDML_OracleDMLKeys::binary_double_min_normal_key_return OracleDML::binary_double_min_normal_key()
    {
        return m_gOracleDMLKeys->binary_double_min_normal_key();
    }

    OracleDML_OracleDMLKeys::sqrt_key_return OracleDML::sqrt_key()
    {
        return m_gOracleDMLKeys->sqrt_key();
    }

    OracleDML_OracleDMLKeys::group_key_return OracleDML::group_key()
    {
        return m_gOracleDMLKeys->group_key();
    }

    OracleDML_OracleDMLKeys::serializable_key_return OracleDML::serializable_key()
    {
        return m_gOracleDMLKeys->serializable_key();
    }

    OracleDML_OracleDMLCommons::aggregate_function_name_return OracleDML::aggregate_function_name()
    {
        return m_gOracleDMLCommons->aggregate_function_name();
    }

    OracleDML_OracleDMLKeys::settings_key_return OracleDML::settings_key()
    {
        return m_gOracleDMLKeys->settings_key();
    }

    OracleDML_OracleDMLKeys::upsert_key_return OracleDML::upsert_key()
    {
        return m_gOracleDMLKeys->upsert_key();
    }

    OracleDML_OracleDMLKeys::suspend_key_return OracleDML::suspend_key()
    {
        return m_gOracleDMLKeys->suspend_key();
    }

    OracleDML_OracleDMLKeys::canonical_key_return OracleDML::canonical_key()
    {
        return m_gOracleDMLKeys->canonical_key();
    }

    OracleDML_OracleDMLCommons::xml_column_name_return OracleDML::xml_column_name()
    {
        return m_gOracleDMLCommons->xml_column_name();
    }

    OracleDML_OracleDMLKeys::trim_key_return OracleDML::trim_key()
    {
        return m_gOracleDMLKeys->trim_key();
    }

/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool OracleDML::msynpred( antlr3::ClassForwarder< synpred41_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred41_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred46_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred46_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred24_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred24_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred25_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred25_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred28_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred28_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred20_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred20_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred33_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred33_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred23_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred23_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred16_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred16_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred50_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred50_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred42_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred42_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred39_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred39_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred12_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred12_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred31_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred31_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred15_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred15_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred13_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred13_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred17_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred17_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred18_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred18_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred32_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred32_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred4_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred4_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred54_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred54_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred6_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred6_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred3_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred3_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred48_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred48_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred11_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred11_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred2_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred2_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred30_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred30_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred5_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred5_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred53_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred53_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred10_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred10_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred45_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred45_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred21_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred21_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred52_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred52_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred44_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred44_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred19_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred19_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred22_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred22_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred43_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred43_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred51_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred51_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred1_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred1_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred49_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred49_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred14_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred14_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred26_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred26_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred34_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred34_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred29_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred29_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred27_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred27_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

}

/* End of code
 * =============================================================================
 */
