/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -  From the grammar source file : OracleDML.g
 *     -                            On : 2018-07-21 19:26:41
 *     -                for the parser : OracleDMLParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include "antlr3compilerwarning.hpp"
#include "OracleDML.hpp"

#include <memory>

/* ----------------------------------------- */

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

namespace  Antlr3BackendImpl  {
using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8* OracleDMLTokenNames[754+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "ADD_VK", //4
        (ANTLR_UINT8*) "AFTER_VK", //5
        (ANTLR_UINT8*) "AGENT_VK", //6
        (ANTLR_UINT8*) "AGGREGATE_VK", //7
        (ANTLR_UINT8*) "ALIAS", //8
        (ANTLR_UINT8*) "AMPERSAND", //9
        (ANTLR_UINT8*) "ANALYZE_VK", //10
        (ANTLR_UINT8*) "ANY_ELEMENT", //11
        (ANTLR_UINT8*) "ANY_MODE", //12
        (ANTLR_UINT8*) "APPROXIMATE_NUM_LIT", //13
        (ANTLR_UINT8*) "ARGUMENT", //14
        (ANTLR_UINT8*) "ARGUMENTS", //15
        (ANTLR_UINT8*) "ASSIGN", //16
        (ANTLR_UINT8*) "ASSIGN_OP", //17
        (ANTLR_UINT8*) "ASSOCIATE_VK", //18
        (ANTLR_UINT8*) "ASTERISK", //19
        (ANTLR_UINT8*) "ATTRIBUTE_NAME", //20
        (ANTLR_UINT8*) "AT_SIGN", //21
        (ANTLR_UINT8*) "AT_VK", //22
        (ANTLR_UINT8*) "AUDIT_VK", //23
        (ANTLR_UINT8*) "AUTHID_VK", //24
        (ANTLR_UINT8*) "AUTOMATIC_VK", //25
        (ANTLR_UINT8*) "AUTONOMOUS_TRANSACTION_VK", //26
        (ANTLR_UINT8*) "AUTO_VK", //27
        (ANTLR_UINT8*) "BATCH_VK", //28
        (ANTLR_UINT8*) "BEFORE_VK", //29
        (ANTLR_UINT8*) "BFILE_VK", //30
        (ANTLR_UINT8*) "BINARY_DOUBLE_VK", //31
        (ANTLR_UINT8*) "BINARY_FLOAT_VK", //32
        (ANTLR_UINT8*) "BINARY_INTEGER_VK", //33
        (ANTLR_UINT8*) "BINDVAR", //34
        (ANTLR_UINT8*) "BIT_STRING_LIT", //35
        (ANTLR_UINT8*) "BIT_VK", //36
        (ANTLR_UINT8*) "BLOB_VK", //37
        (ANTLR_UINT8*) "BLOCK_VK", //38
        (ANTLR_UINT8*) "BODY_VK", //39
        (ANTLR_UINT8*) "BOOLEAN_VK", //40
        (ANTLR_UINT8*) "BOTH_VK", //41
        (ANTLR_UINT8*) "BREADTH_VK", //42
        (ANTLR_UINT8*) "BULK_VK", //43
        (ANTLR_UINT8*) "BYTE_VK", //44
        (ANTLR_UINT8*) "CACHE_VK", //45
        (ANTLR_UINT8*) "CALL_VK", //46
        (ANTLR_UINT8*) "CANONICAL_VK", //47
        (ANTLR_UINT8*) "CARRET_OPERATOR_PART", //48
        (ANTLR_UINT8*) "CASCADE_VK", //49
        (ANTLR_UINT8*) "CASCATED_ELEMENT", //50
        (ANTLR_UINT8*) "CAST_VK", //51
        (ANTLR_UINT8*) "CHARACTER_VK", //52
        (ANTLR_UINT8*) "CHAR_CS_VK", //53
        (ANTLR_UINT8*) "CHAR_SET_NAME", //54
        (ANTLR_UINT8*) "CHAR_STRING", //55
        (ANTLR_UINT8*) "CHAR_STRING_PERL", //56
        (ANTLR_UINT8*) "CHAR_VK", //57
        (ANTLR_UINT8*) "CHR_VK", //58
        (ANTLR_UINT8*) "CLOB_VK", //59
        (ANTLR_UINT8*) "CLOSE_VK", //60
        (ANTLR_UINT8*) "CLUSTER_VK", //61
        (ANTLR_UINT8*) "COLLECTION_MODE", //62
        (ANTLR_UINT8*) "COLLECTION_NAME", //63
        (ANTLR_UINT8*) "COLLECT_VK", //64
        (ANTLR_UINT8*) "COLON", //65
        (ANTLR_UINT8*) "COLUMNS", //66
        (ANTLR_UINT8*) "COLUMN_NAME", //67
        (ANTLR_UINT8*) "COMMA", //68
        (ANTLR_UINT8*) "COMMENT", //69
        (ANTLR_UINT8*) "COMMENT_VK", //70
        (ANTLR_UINT8*) "COMMITTED_VK", //71
        (ANTLR_UINT8*) "COMMIT_VK", //72
        (ANTLR_UINT8*) "COMPATIBILITY_VK", //73
        (ANTLR_UINT8*) "COMPILE_VK", //74
        (ANTLR_UINT8*) "COMPOUND_VK", //75
        (ANTLR_UINT8*) "CONCATENATION_OP", //76
        (ANTLR_UINT8*) "CONDITIONAL_INSERT", //77
        (ANTLR_UINT8*) "CONSTANT_VK", //78
        (ANTLR_UINT8*) "CONSTRAINT_NAME", //79
        (ANTLR_UINT8*) "CONSTRUCTOR_VK", //80
        (ANTLR_UINT8*) "CONTENT_VK", //81
        (ANTLR_UINT8*) "CONTEXT_VK", //82
        (ANTLR_UINT8*) "CONTINUE_VK", //83
        (ANTLR_UINT8*) "CONVERT_VK", //84
        (ANTLR_UINT8*) "CORRUPT_XID_ALL_VK", //85
        (ANTLR_UINT8*) "CORRUPT_XID_VK", //86
        (ANTLR_UINT8*) "COST_CLASS_NAME", //87
        (ANTLR_UINT8*) "COST_VK", //88
        (ANTLR_UINT8*) "COUNT_VK", //89
        (ANTLR_UINT8*) "CROSS_VK", //90
        (ANTLR_UINT8*) "CUBE_VK", //91
        (ANTLR_UINT8*) "CURRENT_USER_VK", //92
        (ANTLR_UINT8*) "CURRENT_VK", //93
        (ANTLR_UINT8*) "CURSOR_NAME", //94
        (ANTLR_UINT8*) "CUSTOMDATUM_VK", //95
        (ANTLR_UINT8*) "CUSTOM_TYPE", //96
        (ANTLR_UINT8*) "CYCLE_VK", //97
        (ANTLR_UINT8*) "C_VK", //98
        (ANTLR_UINT8*) "DATABASE_VK", //99
        (ANTLR_UINT8*) "DATETIME_OP", //100
        (ANTLR_UINT8*) "DAY_VK", //101
        (ANTLR_UINT8*) "DBTIMEZONE_VK", //102
        (ANTLR_UINT8*) "DB_ROLE_CHANGE_VK", //103
        (ANTLR_UINT8*) "DDL_VK", //104
        (ANTLR_UINT8*) "DEBUG_VK", //105
        (ANTLR_UINT8*) "DECIMAL_VK", //106
        (ANTLR_UINT8*) "DECOMPOSE_VK", //107
        (ANTLR_UINT8*) "DECREMENT_VK", //108
        (ANTLR_UINT8*) "DEC_VK", //109
        (ANTLR_UINT8*) "DEFAULTS_VK", //110
        (ANTLR_UINT8*) "DEFERRED_VK", //111
        (ANTLR_UINT8*) "DEFINER_VK", //112
        (ANTLR_UINT8*) "DELIMITED_ID", //113
        (ANTLR_UINT8*) "DENSE_RANK_VK", //114
        (ANTLR_UINT8*) "DEPTH_VK", //115
        (ANTLR_UINT8*) "DETERMINISTIC_VK", //116
        (ANTLR_UINT8*) "DIMENSION_VK", //117
        (ANTLR_UINT8*) "DIRECT_MODE", //118
        (ANTLR_UINT8*) "DISABLE_VK", //119
        (ANTLR_UINT8*) "DISASSOCIATE_VK", //120
        (ANTLR_UINT8*) "DOCUMENT_VK", //121
        (ANTLR_UINT8*) "DOT_ASTERISK", //122
        (ANTLR_UINT8*) "DOUBLE_ASTERISK", //123
        (ANTLR_UINT8*) "DOUBLE_PERIOD", //124
        (ANTLR_UINT8*) "DOUBLE_VK", //125
        (ANTLR_UINT8*) "DSINTERVAL_UNCONSTRAINED_VK", //126
        (ANTLR_UINT8*) "ELEMENT", //127
        (ANTLR_UINT8*) "ELEMENTS_MODE", //128
        (ANTLR_UINT8*) "ENABLE_VK", //129
        (ANTLR_UINT8*) "ENCODING_VK", //130
        (ANTLR_UINT8*) "ENTITYESCAPING_VK", //131
        (ANTLR_UINT8*) "EQUALS_OP", //132
        (ANTLR_UINT8*) "EVALNAME_VK", //133
        (ANTLR_UINT8*) "EXACT_NUM_LIT", //134
        (ANTLR_UINT8*) "EXCEPTIONS_VK", //135
        (ANTLR_UINT8*) "EXCEPTION_INIT_VK", //136
        (ANTLR_UINT8*) "EXCEPTION_NAME", //137
        (ANTLR_UINT8*) "EXCLAMATION_OPERATOR_PART", //138
        (ANTLR_UINT8*) "EXCLUDE_VK", //139
        (ANTLR_UINT8*) "EXECUTE_VK", //140
        (ANTLR_UINT8*) "EXIT_VK", //141
        (ANTLR_UINT8*) "EXPLAIN_STATEMENT", //142
        (ANTLR_UINT8*) "EXPR", //143
        (ANTLR_UINT8*) "EXPR_LIST", //144
        (ANTLR_UINT8*) "EXTERNAL_VK", //145
        (ANTLR_UINT8*) "EXTRACT_VK", //146
        (ANTLR_UINT8*) "FACTORING", //147
        (ANTLR_UINT8*) "FINAL_VK", //148
        (ANTLR_UINT8*) "FIRST_VALUE_VK", //149
        (ANTLR_UINT8*) "FIRST_VK", //150
        (ANTLR_UINT8*) "FLOAT_VK", //151
        (ANTLR_UINT8*) "FOLLOWING_VK", //152
        (ANTLR_UINT8*) "FOLLOWS_VK", //153
        (ANTLR_UINT8*) "FORALL_VK", //154
        (ANTLR_UINT8*) "FORCE_VK", //155
        (ANTLR_UINT8*) "FOR_MULTI_COLUMN", //156
        (ANTLR_UINT8*) "FOR_NOTATION", //157
        (ANTLR_UINT8*) "FOR_SINGLE_COLUMN", //158
        (ANTLR_UINT8*) "FULL_VK", //159
        (ANTLR_UINT8*) "FUNCTION_ENABLING_OVER", //160
        (ANTLR_UINT8*) "FUNCTION_ENABLING_USING", //161
        (ANTLR_UINT8*) "FUNCTION_ENABLING_WITHIN_OR_OVER", //162
        (ANTLR_UINT8*) "FUNCTION_NAME", //163
        (ANTLR_UINT8*) "GREATER_THAN_OP", //164
        (ANTLR_UINT8*) "GREATER_THAN_OR_EQUALS_OP", //165
        (ANTLR_UINT8*) "GROUPING_VK", //166
        (ANTLR_UINT8*) "GROUPIN_SET", //167
        (ANTLR_UINT8*) "GROUP_BY_CLAUSE", //168
        (ANTLR_UINT8*) "GROUP_BY_ELEMENT", //169
        (ANTLR_UINT8*) "HASH_VK", //170
        (ANTLR_UINT8*) "HEX_STRING_LIT", //171
        (ANTLR_UINT8*) "HIDE_VK", //172
        (ANTLR_UINT8*) "HIERARCHICAL", //173
        (ANTLR_UINT8*) "HOSTED_VARIABLE", //174
        (ANTLR_UINT8*) "HOSTED_VARIABLE_NAME", //175
        (ANTLR_UINT8*) "HOSTED_VARIABLE_ROUTINE_CALL", //176
        (ANTLR_UINT8*) "HOUR_VK", //177
        (ANTLR_UINT8*) "ID", //178
        (ANTLR_UINT8*) "IGNORE_VK", //179
        (ANTLR_UINT8*) "IMMEDIATE_VK", //180
        (ANTLR_UINT8*) "IMPLEMENTATION_TYPE_NAME", //181
        (ANTLR_UINT8*) "INCLUDE_VK", //182
        (ANTLR_UINT8*) "INCLUDING_VK", //183
        (ANTLR_UINT8*) "INCREMENT_VK", //184
        (ANTLR_UINT8*) "INDENT_VK", //185
        (ANTLR_UINT8*) "INDEX_NAME", //186
        (ANTLR_UINT8*) "INLINE_VK", //187
        (ANTLR_UINT8*) "INNER_VK", //188
        (ANTLR_UINT8*) "INOUT_VK", //189
        (ANTLR_UINT8*) "INSTANTIABLE_VK", //190
        (ANTLR_UINT8*) "INSTEAD_VK", //191
        (ANTLR_UINT8*) "INTEGER_VK", //192
        (ANTLR_UINT8*) "INTERVAL_DATATYPE", //193
        (ANTLR_UINT8*) "INTRODUCER", //194
        (ANTLR_UINT8*) "INT_VK", //195
        (ANTLR_UINT8*) "INVALIDATE_VK", //196
        (ANTLR_UINT8*) "ISOLATION_VK", //197
        (ANTLR_UINT8*) "IS_A_SET", //198
        (ANTLR_UINT8*) "IS_EMPTY", //199
        (ANTLR_UINT8*) "IS_INFINITE", //200
        (ANTLR_UINT8*) "IS_NAN", //201
        (ANTLR_UINT8*) "IS_NOT_A_SET", //202
        (ANTLR_UINT8*) "IS_NOT_EMPTY", //203
        (ANTLR_UINT8*) "IS_NOT_INFINITE", //204
        (ANTLR_UINT8*) "IS_NOT_NAN", //205
        (ANTLR_UINT8*) "IS_NOT_NULL", //206
        (ANTLR_UINT8*) "IS_NOT_OF_TYPE", //207
        (ANTLR_UINT8*) "IS_NOT_PRESENT", //208
        (ANTLR_UINT8*) "IS_NULL", //209
        (ANTLR_UINT8*) "IS_OF_TYPE", //210
        (ANTLR_UINT8*) "IS_PRESENT", //211
        (ANTLR_UINT8*) "ITERATE_VK", //212
        (ANTLR_UINT8*) "JAVA_VK", //213
        (ANTLR_UINT8*) "JOIN_DEF", //214
        (ANTLR_UINT8*) "KEEP_VK", //215
        (ANTLR_UINT8*) "LABEL_NAME", //216
        (ANTLR_UINT8*) "LANGUAGE_VK", //217
        (ANTLR_UINT8*) "LAST_VALUE_VK", //218
        (ANTLR_UINT8*) "LAST_VK", //219
        (ANTLR_UINT8*) "LEADING_VK", //220
        (ANTLR_UINT8*) "LEFT_BRACKET", //221
        (ANTLR_UINT8*) "LEFT_PAREN", //222
        (ANTLR_UINT8*) "LEFT_VK", //223
        (ANTLR_UINT8*) "LESS_THAN_OP", //224
        (ANTLR_UINT8*) "LESS_THAN_OR_EQUALS_OP", //225
        (ANTLR_UINT8*) "LIBRARY_VK", //226
        (ANTLR_UINT8*) "LIKE2_VK", //227
        (ANTLR_UINT8*) "LIKE4_VK", //228
        (ANTLR_UINT8*) "LIKEC_VK", //229
        (ANTLR_UINT8*) "LIMIT_VK", //230
        (ANTLR_UINT8*) "LINK_NAME", //231
        (ANTLR_UINT8*) "LOCAL_VK", //232
        (ANTLR_UINT8*) "LOCK_TABLE_ELEMENT", //233
        (ANTLR_UINT8*) "LOGIC_EXPR", //234
        (ANTLR_UINT8*) "LOGOFF_VK", //235
        (ANTLR_UINT8*) "LOGON_VK", //236
        (ANTLR_UINT8*) "LOG_VK", //237
        (ANTLR_UINT8*) "LONG_VK", //238
        (ANTLR_UINT8*) "LOOP_VK", //239
        (ANTLR_UINT8*) "MAIN_MODEL", //240
        (ANTLR_UINT8*) "MAIN_MODEL_NAME", //241
        (ANTLR_UINT8*) "MAP_VK", //242
        (ANTLR_UINT8*) "MAXVALUE_VK", //243
        (ANTLR_UINT8*) "MEASURES_VK", //244
        (ANTLR_UINT8*) "MEMBER_VK", //245
        (ANTLR_UINT8*) "MERGE_INSERT", //246
        (ANTLR_UINT8*) "MERGE_UPDATE", //247
        (ANTLR_UINT8*) "MERGE_VK", //248
        (ANTLR_UINT8*) "MINUS_SIGN", //249
        (ANTLR_UINT8*) "MINUTE_VK", //250
        (ANTLR_UINT8*) "MINVALUE_VK", //251
        (ANTLR_UINT8*) "MLSLABEL_VK", //252
        (ANTLR_UINT8*) "MODEL_COLUMN", //253
        (ANTLR_UINT8*) "MODEL_COLUMNS", //254
        (ANTLR_UINT8*) "MODEL_EXPRESSION", //255
        (ANTLR_UINT8*) "MODEL_RULE", //256
        (ANTLR_UINT8*) "MODEL_RULES", //257
        (ANTLR_UINT8*) "MODIFY_VK", //258
        (ANTLR_UINT8*) "MONTH_VK", //259
        (ANTLR_UINT8*) "MULTI_TABLE_MODE", //260
        (ANTLR_UINT8*) "NAME_VK", //261
        (ANTLR_UINT8*) "NATIONAL_CHAR_STRING_LIT", //262
        (ANTLR_UINT8*) "NATIVE_DATATYPE", //263
        (ANTLR_UINT8*) "NATURALN_VK", //264
        (ANTLR_UINT8*) "NATURAL_VK", //265
        (ANTLR_UINT8*) "NAV_VK", //266
        (ANTLR_UINT8*) "NCHAR_CS_VK", //267
        (ANTLR_UINT8*) "NCHAR_VK", //268
        (ANTLR_UINT8*) "NCLOB_VK", //269
        (ANTLR_UINT8*) "NESTED_EXPR", //270
        (ANTLR_UINT8*) "NESTED_SUBQUERY", //271
        (ANTLR_UINT8*) "NESTED_VK", //272
        (ANTLR_UINT8*) "NEWLINE", //273
        (ANTLR_UINT8*) "NEW_VK", //274
        (ANTLR_UINT8*) "NOAUDIT_VK", //275
        (ANTLR_UINT8*) "NOCACHE_VK", //276
        (ANTLR_UINT8*) "NOCOPY_VK", //277
        (ANTLR_UINT8*) "NOCYCLE_VK", //278
        (ANTLR_UINT8*) "NOENTITYESCAPING_VK", //279
        (ANTLR_UINT8*) "NOMAXVALUE_VK", //280
        (ANTLR_UINT8*) "NOMINVALUE_VK", //281
        (ANTLR_UINT8*) "NOORDER_VK", //282
        (ANTLR_UINT8*) "NOSCHEMACHECK_VK", //283
        (ANTLR_UINT8*) "NOT_BETWEEN", //284
        (ANTLR_UINT8*) "NOT_EQUAL_OP", //285
        (ANTLR_UINT8*) "NOT_IN", //286
        (ANTLR_UINT8*) "NOT_LIKE", //287
        (ANTLR_UINT8*) "NO_VK", //288
        (ANTLR_UINT8*) "NULLS_VK", //289
        (ANTLR_UINT8*) "NUMBER_VK", //290
        (ANTLR_UINT8*) "NUMERIC_VK", //291
        (ANTLR_UINT8*) "NVARCHAR2_VK", //292
        (ANTLR_UINT8*) "OBJECT_VK", //293
        (ANTLR_UINT8*) "OFF_VK", //294
        (ANTLR_UINT8*) "OLD_VK", //295
        (ANTLR_UINT8*) "ONLY_VK", //296
        (ANTLR_UINT8*) "OPEN_VK", //297
        (ANTLR_UINT8*) "ORADATA_VK", //298
        (ANTLR_UINT8*) "ORDER_BY_ELEMENT", //299
        (ANTLR_UINT8*) "ORDER_BY_ELEMENTS", //300
        (ANTLR_UINT8*) "ORDINALITY_VK", //301
        (ANTLR_UINT8*) "OUT_VK", //302
        (ANTLR_UINT8*) "OVERRIDING_VK", //303
        (ANTLR_UINT8*) "OVER_VK", //304
        (ANTLR_UINT8*) "PACKAGE_NAME", //305
        (ANTLR_UINT8*) "PACKAGE_VK", //306
        (ANTLR_UINT8*) "PARALLEL_ENABLE_VK", //307
        (ANTLR_UINT8*) "PARAMETERS_VK", //308
        (ANTLR_UINT8*) "PARAMETER_NAME", //309
        (ANTLR_UINT8*) "PARENT_VK", //310
        (ANTLR_UINT8*) "PARTITION_VK", //311
        (ANTLR_UINT8*) "PASSING_VK", //312
        (ANTLR_UINT8*) "PERCENT", //313
        (ANTLR_UINT8*) "PERCENT_FOUND_VK", //314
        (ANTLR_UINT8*) "PERCENT_ISOPEN_VK", //315
        (ANTLR_UINT8*) "PERCENT_NOTFOUND_VK", //316
        (ANTLR_UINT8*) "PERCENT_ROWCOUNT_VK", //317
        (ANTLR_UINT8*) "PERCENT_ROWTYPE_VK", //318
        (ANTLR_UINT8*) "PERCENT_TYPE_VK", //319
        (ANTLR_UINT8*) "PERIOD", //320
        (ANTLR_UINT8*) "PIPELINED_VK", //321
        (ANTLR_UINT8*) "PIVOT_ALIAS", //322
        (ANTLR_UINT8*) "PIVOT_ELEMENT", //323
        (ANTLR_UINT8*) "PIVOT_IN_ELEMENT", //324
        (ANTLR_UINT8*) "PIVOT_VK", //325
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_CAST", //326
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", //327
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_ELSIF", //328
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_MODEL", //329
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_MULTISET", //330
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_PIVOT", //331
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_UNPIVOT", //332
        (ANTLR_UINT8*) "PLSQL_NON_RESERVED_USING", //333
        (ANTLR_UINT8*) "PLSQL_RESERVED_CLUSTERS", //334
        (ANTLR_UINT8*) "PLSQL_RESERVED_COLAUTH", //335
        (ANTLR_UINT8*) "PLSQL_RESERVED_COMPRESS", //336
        (ANTLR_UINT8*) "PLSQL_RESERVED_CRASH", //337
        (ANTLR_UINT8*) "PLSQL_RESERVED_EXCLUSIVE", //338
        (ANTLR_UINT8*) "PLSQL_RESERVED_IDENTIFIED", //339
        (ANTLR_UINT8*) "PLSQL_RESERVED_IF", //340
        (ANTLR_UINT8*) "PLSQL_RESERVED_INDEX", //341
        (ANTLR_UINT8*) "PLSQL_RESERVED_INDEXES", //342
        (ANTLR_UINT8*) "PLSQL_RESERVED_LOCK", //343
        (ANTLR_UINT8*) "PLSQL_RESERVED_MINUS", //344
        (ANTLR_UINT8*) "PLSQL_RESERVED_MODE", //345
        (ANTLR_UINT8*) "PLSQL_RESERVED_NOCOMPRESS", //346
        (ANTLR_UINT8*) "PLSQL_RESERVED_NOWAIT", //347
        (ANTLR_UINT8*) "PLSQL_RESERVED_RESOURCE", //348
        (ANTLR_UINT8*) "PLSQL_RESERVED_SHARE", //349
        (ANTLR_UINT8*) "PLSQL_RESERVED_START", //350
        (ANTLR_UINT8*) "PLSQL_RESERVED_TABAUTH", //351
        (ANTLR_UINT8*) "PLSQL_RESERVED_VIEWS", //352
        (ANTLR_UINT8*) "PLS_INTEGER_VK", //353
        (ANTLR_UINT8*) "PLUS_SIGN", //354
        (ANTLR_UINT8*) "POSITIVEN_VK", //355
        (ANTLR_UINT8*) "POSITIVE_VK", //356
        (ANTLR_UINT8*) "PRAGMA_VK", //357
        (ANTLR_UINT8*) "PRECEDING_VK", //358
        (ANTLR_UINT8*) "PRECISION", //359
        (ANTLR_UINT8*) "PRECISION_VK", //360
        (ANTLR_UINT8*) "PREDICTION_FUNCTION", //361
        (ANTLR_UINT8*) "PROCEDURE_NAME", //362
        (ANTLR_UINT8*) "PROMPT", //363
        (ANTLR_UINT8*) "QS_ANGLE", //364
        (ANTLR_UINT8*) "QS_BRACE", //365
        (ANTLR_UINT8*) "QS_BRACK", //366
        (ANTLR_UINT8*) "QS_OTHER", //367
        (ANTLR_UINT8*) "QS_OTHER_CH", //368
        (ANTLR_UINT8*) "QS_PAREN", //369
        (ANTLR_UINT8*) "QUERY_NAME", //370
        (ANTLR_UINT8*) "QUESTION_MARK", //371
        (ANTLR_UINT8*) "QUOTE", //372
        (ANTLR_UINT8*) "RAISE_VK", //373
        (ANTLR_UINT8*) "RANGE_VK", //374
        (ANTLR_UINT8*) "RAW_VK", //375
        (ANTLR_UINT8*) "READ_VK", //376
        (ANTLR_UINT8*) "REAL_VK", //377
        (ANTLR_UINT8*) "RECORD_NAME", //378
        (ANTLR_UINT8*) "REFERENCE_MODEL_NAME", //379
        (ANTLR_UINT8*) "REFERENCE_VK", //380
        (ANTLR_UINT8*) "REFERENCING_VK", //381
        (ANTLR_UINT8*) "REF_VK", //382
        (ANTLR_UINT8*) "REGULAR_ID", //383
        (ANTLR_UINT8*) "REJECT_VK", //384
        (ANTLR_UINT8*) "RELIES_ON_VK", //385
        (ANTLR_UINT8*) "RENAME_VK", //386
        (ANTLR_UINT8*) "REPLACE_VK", //387
        (ANTLR_UINT8*) "RESPECT_VK", //388
        (ANTLR_UINT8*) "RESTRICT_REFERENCES_VK", //389
        (ANTLR_UINT8*) "RESULT_CACHE_VK", //390
        (ANTLR_UINT8*) "RETURN_VK", //391
        (ANTLR_UINT8*) "REUSE_VK", //392
        (ANTLR_UINT8*) "REVERSE_VK", //393
        (ANTLR_UINT8*) "RIGHT_BRACKET", //394
        (ANTLR_UINT8*) "RIGHT_PAREN", //395
        (ANTLR_UINT8*) "RIGHT_VK", //396
        (ANTLR_UINT8*) "ROLLBACK_SEGMENT_NAME", //397
        (ANTLR_UINT8*) "ROLLBACK_VK", //398
        (ANTLR_UINT8*) "ROLLUP_VK", //399
        (ANTLR_UINT8*) "ROUTINE_CALL", //400
        (ANTLR_UINT8*) "ROUTINE_NAME", //401
        (ANTLR_UINT8*) "ROWID_VK", //402
        (ANTLR_UINT8*) "ROWS_VK", //403
        (ANTLR_UINT8*) "ROW_VK", //404
        (ANTLR_UINT8*) "RULES_VK", //405
        (ANTLR_UINT8*) "SAMPLE_VK", //406
        (ANTLR_UINT8*) "SAVEPOINT_NAME", //407
        (ANTLR_UINT8*) "SAVEPOINT_VK", //408
        (ANTLR_UINT8*) "SCHEMACHECK_VK", //409
        (ANTLR_UINT8*) "SCHEMA_NAME", //410
        (ANTLR_UINT8*) "SCHEMA_VK", //411
        (ANTLR_UINT8*) "SCN_VK", //412
        (ANTLR_UINT8*) "SEARCHED_CASE", //413
        (ANTLR_UINT8*) "SEARCH_VK", //414
        (ANTLR_UINT8*) "SECOND_VK", //415
        (ANTLR_UINT8*) "SEED_VK", //416
        (ANTLR_UINT8*) "SELECTED_TABLEVIEW", //417
        (ANTLR_UINT8*) "SELECT_ITEM", //418
        (ANTLR_UINT8*) "SELECT_LIST", //419
        (ANTLR_UINT8*) "SELECT_MODE", //420
        (ANTLR_UINT8*) "SELECT_STATEMENT", //421
        (ANTLR_UINT8*) "SELF_VK", //422
        (ANTLR_UINT8*) "SEMICOLON", //423
        (ANTLR_UINT8*) "SEPARATOR", //424
        (ANTLR_UINT8*) "SEQUENCE_NAME", //425
        (ANTLR_UINT8*) "SEQUENCE_VK", //426
        (ANTLR_UINT8*) "SEQUENTIAL_VK", //427
        (ANTLR_UINT8*) "SERIALIZABLE_VK", //428
        (ANTLR_UINT8*) "SERIALLY_REUSABLE_VK", //429
        (ANTLR_UINT8*) "SERVERERROR_VK", //430
        (ANTLR_UINT8*) "SESSIONTIMEZONE_VK", //431
        (ANTLR_UINT8*) "SET_VK", //432
        (ANTLR_UINT8*) "SHOW_VK", //433
        (ANTLR_UINT8*) "SHUTDOWN_VK", //434
        (ANTLR_UINT8*) "SIBLINGS_VK", //435
        (ANTLR_UINT8*) "SIGNTYPE_VK", //436
        (ANTLR_UINT8*) "SIMPLE_CASE", //437
        (ANTLR_UINT8*) "SIMPLE_INTEGER_VK", //438
        (ANTLR_UINT8*) "SIMPLE_LETTER", //439
        (ANTLR_UINT8*) "SINGLE_TABLE_MODE", //440
        (ANTLR_UINT8*) "SINGLE_VK", //441
        (ANTLR_UINT8*) "SKIP_VK", //442
        (ANTLR_UINT8*) "SMALLINT_VK", //443
        (ANTLR_UINT8*) "SOLIDUS", //444
        (ANTLR_UINT8*) "SOME_VK", //445
        (ANTLR_UINT8*) "SPACE", //446
        (ANTLR_UINT8*) "SPECIFICATION_VK", //447
        (ANTLR_UINT8*) "SQL92_RESERVED_ALL", //448
        (ANTLR_UINT8*) "SQL92_RESERVED_ALTER", //449
        (ANTLR_UINT8*) "SQL92_RESERVED_AND", //450
        (ANTLR_UINT8*) "SQL92_RESERVED_ANY", //451
        (ANTLR_UINT8*) "SQL92_RESERVED_AS", //452
        (ANTLR_UINT8*) "SQL92_RESERVED_ASC", //453
        (ANTLR_UINT8*) "SQL92_RESERVED_BEGIN", //454
        (ANTLR_UINT8*) "SQL92_RESERVED_BETWEEN", //455
        (ANTLR_UINT8*) "SQL92_RESERVED_BY", //456
        (ANTLR_UINT8*) "SQL92_RESERVED_CASE", //457
        (ANTLR_UINT8*) "SQL92_RESERVED_CHECK", //458
        (ANTLR_UINT8*) "SQL92_RESERVED_CONNECT", //459
        (ANTLR_UINT8*) "SQL92_RESERVED_CREATE", //460
        (ANTLR_UINT8*) "SQL92_RESERVED_CURRENT", //461
        (ANTLR_UINT8*) "SQL92_RESERVED_CURSOR", //462
        (ANTLR_UINT8*) "SQL92_RESERVED_DATE", //463
        (ANTLR_UINT8*) "SQL92_RESERVED_DECLARE", //464
        (ANTLR_UINT8*) "SQL92_RESERVED_DEFAULT", //465
        (ANTLR_UINT8*) "SQL92_RESERVED_DELETE", //466
        (ANTLR_UINT8*) "SQL92_RESERVED_DESC", //467
        (ANTLR_UINT8*) "SQL92_RESERVED_DISTINCT", //468
        (ANTLR_UINT8*) "SQL92_RESERVED_DROP", //469
        (ANTLR_UINT8*) "SQL92_RESERVED_ELSE", //470
        (ANTLR_UINT8*) "SQL92_RESERVED_END", //471
        (ANTLR_UINT8*) "SQL92_RESERVED_EXCEPTION", //472
        (ANTLR_UINT8*) "SQL92_RESERVED_EXISTS", //473
        (ANTLR_UINT8*) "SQL92_RESERVED_FALSE", //474
        (ANTLR_UINT8*) "SQL92_RESERVED_FETCH", //475
        (ANTLR_UINT8*) "SQL92_RESERVED_FOR", //476
        (ANTLR_UINT8*) "SQL92_RESERVED_FROM", //477
        (ANTLR_UINT8*) "SQL92_RESERVED_GOTO", //478
        (ANTLR_UINT8*) "SQL92_RESERVED_GRANT", //479
        (ANTLR_UINT8*) "SQL92_RESERVED_GROUP", //480
        (ANTLR_UINT8*) "SQL92_RESERVED_HAVING", //481
        (ANTLR_UINT8*) "SQL92_RESERVED_IN", //482
        (ANTLR_UINT8*) "SQL92_RESERVED_INSERT", //483
        (ANTLR_UINT8*) "SQL92_RESERVED_INTERSECT", //484
        (ANTLR_UINT8*) "SQL92_RESERVED_INTO", //485
        (ANTLR_UINT8*) "SQL92_RESERVED_IS", //486
        (ANTLR_UINT8*) "SQL92_RESERVED_LIKE", //487
        (ANTLR_UINT8*) "SQL92_RESERVED_NOT", //488
        (ANTLR_UINT8*) "SQL92_RESERVED_NULL", //489
        (ANTLR_UINT8*) "SQL92_RESERVED_OF", //490
        (ANTLR_UINT8*) "SQL92_RESERVED_ON", //491
        (ANTLR_UINT8*) "SQL92_RESERVED_OPTION", //492
        (ANTLR_UINT8*) "SQL92_RESERVED_OR", //493
        (ANTLR_UINT8*) "SQL92_RESERVED_ORDER", //494
        (ANTLR_UINT8*) "SQL92_RESERVED_OVERLAPS", //495
        (ANTLR_UINT8*) "SQL92_RESERVED_PRIOR", //496
        (ANTLR_UINT8*) "SQL92_RESERVED_PROCEDURE", //497
        (ANTLR_UINT8*) "SQL92_RESERVED_PUBLIC", //498
        (ANTLR_UINT8*) "SQL92_RESERVED_REVOKE", //499
        (ANTLR_UINT8*) "SQL92_RESERVED_SELECT", //500
        (ANTLR_UINT8*) "SQL92_RESERVED_SIZE", //501
        (ANTLR_UINT8*) "SQL92_RESERVED_TABLE", //502
        (ANTLR_UINT8*) "SQL92_RESERVED_THE", //503
        (ANTLR_UINT8*) "SQL92_RESERVED_THEN", //504
        (ANTLR_UINT8*) "SQL92_RESERVED_TO", //505
        (ANTLR_UINT8*) "SQL92_RESERVED_TRUE", //506
        (ANTLR_UINT8*) "SQL92_RESERVED_UNION", //507
        (ANTLR_UINT8*) "SQL92_RESERVED_UNIQUE", //508
        (ANTLR_UINT8*) "SQL92_RESERVED_UPDATE", //509
        (ANTLR_UINT8*) "SQL92_RESERVED_VALUES", //510
        (ANTLR_UINT8*) "SQL92_RESERVED_VIEW", //511
        (ANTLR_UINT8*) "SQL92_RESERVED_WHEN", //512
        (ANTLR_UINT8*) "SQL92_RESERVED_WHERE", //513
        (ANTLR_UINT8*) "SQL92_RESERVED_WITH", //514
        (ANTLR_UINT8*) "SQLDATA_VK", //515
        (ANTLR_UINT8*) "STANDALONE_VK", //516
        (ANTLR_UINT8*) "STANDARD_FUNCTION", //517
        (ANTLR_UINT8*) "STARTUP_VK", //518
        (ANTLR_UINT8*) "STATIC_RETURNING", //519
        (ANTLR_UINT8*) "STATIC_VK", //520
        (ANTLR_UINT8*) "STATISTICS_VK", //521
        (ANTLR_UINT8*) "STRING_VK", //522
        (ANTLR_UINT8*) "SUBMULTISET_VK", //523
        (ANTLR_UINT8*) "SUBPARTITION_VK", //524
        (ANTLR_UINT8*) "SUBQUERY", //525
        (ANTLR_UINT8*) "SUSPEND_VK", //526
        (ANTLR_UINT8*) "TABLEVIEW_NAME", //527
        (ANTLR_UINT8*) "TABLE_ELEMENT", //528
        (ANTLR_UINT8*) "TABLE_EXPRESSION", //529
        (ANTLR_UINT8*) "TABLE_REF", //530
        (ANTLR_UINT8*) "TABLE_REF_ELEMENT", //531
        (ANTLR_UINT8*) "TABLE_VAR_NAME", //532
        (ANTLR_UINT8*) "TILDE_OPERATOR_PART", //533
        (ANTLR_UINT8*) "TIMESTAMP_LTZ_UNCONSTRAINED_VK", //534
        (ANTLR_UINT8*) "TIMESTAMP_TZ_UNCONSTRAINED_VK", //535
        (ANTLR_UINT8*) "TIMESTAMP_UNCONSTRAINED_VK", //536
        (ANTLR_UINT8*) "TIMESTAMP_VK", //537
        (ANTLR_UINT8*) "TIMEZONE_ABBR_VK", //538
        (ANTLR_UINT8*) "TIMEZONE_HOUR_VK", //539
        (ANTLR_UINT8*) "TIMEZONE_MINUTE_VK", //540
        (ANTLR_UINT8*) "TIMEZONE_REGION_VK", //541
        (ANTLR_UINT8*) "TIME_VK", //542
        (ANTLR_UINT8*) "TRAILING_VK", //543
        (ANTLR_UINT8*) "TRANSLATE_VK", //544
        (ANTLR_UINT8*) "TREAT_VK", //545
        (ANTLR_UINT8*) "TRIGGER_NAME", //546
        (ANTLR_UINT8*) "TRIM_VK", //547
        (ANTLR_UINT8*) "TRUNCATE_VK", //548
        (ANTLR_UINT8*) "TYPE_NAME", //549
        (ANTLR_UINT8*) "TYPE_VK", //550
        (ANTLR_UINT8*) "T_BINDVAR_NAME", //551
        (ANTLR_UINT8*) "T_COLUMN_ALIAS", //552
        (ANTLR_UINT8*) "T_COLUMN_LIST", //553
        (ANTLR_UINT8*) "T_COLUMN_NAME", //554
        (ANTLR_UINT8*) "T_COND_AND", //555
        (ANTLR_UINT8*) "T_COND_AND_SEQ", //556
        (ANTLR_UINT8*) "T_COND_BETWEEN", //557
        (ANTLR_UINT8*) "T_COND_COMPARISON", //558
        (ANTLR_UINT8*) "T_COND_EQUALS_PATH", //559
        (ANTLR_UINT8*) "T_COND_EXISTS", //560
        (ANTLR_UINT8*) "T_COND_GROUP_COMPARISON", //561
        (ANTLR_UINT8*) "T_COND_IN", //562
        (ANTLR_UINT8*) "T_COND_IS", //563
        (ANTLR_UINT8*) "T_COND_IS_ANY", //564
        (ANTLR_UINT8*) "T_COND_IS_A_SET", //565
        (ANTLR_UINT8*) "T_COND_IS_EMPTY", //566
        (ANTLR_UINT8*) "T_COND_IS_OF_TYPE", //567
        (ANTLR_UINT8*) "T_COND_IS_PRESENT", //568
        (ANTLR_UINT8*) "T_COND_LIKE", //569
        (ANTLR_UINT8*) "T_COND_MEMEBER", //570
        (ANTLR_UINT8*) "T_COND_NOT", //571
        (ANTLR_UINT8*) "T_COND_OR", //572
        (ANTLR_UINT8*) "T_COND_OR_SEQ", //573
        (ANTLR_UINT8*) "T_COND_PAREN", //574
        (ANTLR_UINT8*) "T_COND_REGEXP_LIKE", //575
        (ANTLR_UINT8*) "T_COND_SUBMULTISET", //576
        (ANTLR_UINT8*) "T_COND_UNDER_PATH", //577
        (ANTLR_UINT8*) "T_DBLINK_NAME", //578
        (ANTLR_UINT8*) "T_DECL", //579
        (ANTLR_UINT8*) "T_FOR_UPDATE_CLAUSE", //580
        (ANTLR_UINT8*) "T_FROM", //581
        (ANTLR_UINT8*) "T_FUNCTION_NAME", //582
        (ANTLR_UINT8*) "T_GROUP_BY", //583
        (ANTLR_UINT8*) "T_HIERARCHICAL", //584
        (ANTLR_UINT8*) "T_IDENTIFIER", //585
        (ANTLR_UINT8*) "T_JOINING_CLAUSE", //586
        (ANTLR_UINT8*) "T_MODEL", //587
        (ANTLR_UINT8*) "T_OPERATOR_BINARY", //588
        (ANTLR_UINT8*) "T_OPERATOR_PART", //589
        (ANTLR_UINT8*) "T_OPERATOR_UNARY", //590
        (ANTLR_UINT8*) "T_ORDER_BY_CLAUSE", //591
        (ANTLR_UINT8*) "T_PACKAGE_NAME", //592
        (ANTLR_UINT8*) "T_RESERVED", //593
        (ANTLR_UINT8*) "T_SCHEMA_NAME", //594
        (ANTLR_UINT8*) "T_SELECT", //595
        (ANTLR_UINT8*) "T_SELECT_COLUMN", //596
        (ANTLR_UINT8*) "T_SUBQUERY", //597
        (ANTLR_UINT8*) "T_TABLE_ALIAS", //598
        (ANTLR_UINT8*) "T_TABLE_CAST", //599
        (ANTLR_UINT8*) "T_TABLE_NAME", //600
        (ANTLR_UINT8*) "T_TABLE_REF", //601
        (ANTLR_UINT8*) "T_UNION", //602
        (ANTLR_UINT8*) "T_UNKNOWN", //603
        (ANTLR_UINT8*) "T_USE", //604
        (ANTLR_UINT8*) "T_WHERE", //605
        (ANTLR_UINT8*) "T_WITH", //606
        (ANTLR_UINT8*) "UNARY_OPERATOR", //607
        (ANTLR_UINT8*) "UNBOUNDED_VK", //608
        (ANTLR_UINT8*) "UNDERSCORE", //609
        (ANTLR_UINT8*) "UNDER_VK", //610
        (ANTLR_UINT8*) "UNLIMITED_VK", //611
        (ANTLR_UINT8*) "UNPIVOT_IN_ELEMENT", //612
        (ANTLR_UINT8*) "UNPIVOT_VK", //613
        (ANTLR_UINT8*) "UNSIGNED_INTEGER", //614
        (ANTLR_UINT8*) "UNTIL_VK", //615
        (ANTLR_UINT8*) "UPDATED_VK", //616
        (ANTLR_UINT8*) "UPSERT_VK", //617
        (ANTLR_UINT8*) "UROWID_VK", //618
        (ANTLR_UINT8*) "VALIDATE_VK", //619
        (ANTLR_UINT8*) "VALUE_VK", //620
        (ANTLR_UINT8*) "VARCHAR2_VK", //621
        (ANTLR_UINT8*) "VARCHAR_VK", //622
        (ANTLR_UINT8*) "VARIABLE_NAME", //623
        (ANTLR_UINT8*) "VECTOR_EXPR", //624
        (ANTLR_UINT8*) "VERSIONS_VK", //625
        (ANTLR_UINT8*) "VERSION_VK", //626
        (ANTLR_UINT8*) "VERTICAL_BAR", //627
        (ANTLR_UINT8*) "WAIT_VK", //628
        (ANTLR_UINT8*) "WELLFORMED_VK", //629
        (ANTLR_UINT8*) "WITHIN_VK", //630
        (ANTLR_UINT8*) "WORK_VK", //631
        (ANTLR_UINT8*) "WRITE_VK", //632
        (ANTLR_UINT8*) "XMLAGG_VK", //633
        (ANTLR_UINT8*) "XMLATTRIBUTES_VK", //634
        (ANTLR_UINT8*) "XMLCAST_VK", //635
        (ANTLR_UINT8*) "XMLCOLATTVAL_VK", //636
        (ANTLR_UINT8*) "XMLELEMENT_VK", //637
        (ANTLR_UINT8*) "XMLEXISTS_VK", //638
        (ANTLR_UINT8*) "XMLFOREST_VK", //639
        (ANTLR_UINT8*) "XMLNAMESPACES_VK", //640
        (ANTLR_UINT8*) "XMLPARSE_VK", //641
        (ANTLR_UINT8*) "XMLPI_VK", //642
        (ANTLR_UINT8*) "XMLQUERY_VK", //643
        (ANTLR_UINT8*) "XMLROOT_VK", //644
        (ANTLR_UINT8*) "XMLSERIALIZE_VK", //645
        (ANTLR_UINT8*) "XMLTABLE_VK", //646
        (ANTLR_UINT8*) "XML_ALIAS", //647
        (ANTLR_UINT8*) "XML_COLUMN", //648
        (ANTLR_UINT8*) "XML_COLUMN_NAME", //649
        (ANTLR_UINT8*) "XML_ELEMENT", //650
        (ANTLR_UINT8*) "XML_VK", //651
        (ANTLR_UINT8*) "YEAR_VK", //652
        (ANTLR_UINT8*) "YES_VK", //653
        (ANTLR_UINT8*) "YMINTERVAL_UNCONSTRAINED_VK", //654
        (ANTLR_UINT8*) "ZV", //655
        (ANTLR_UINT8*) "CONJUNCTION", //666
        (ANTLR_UINT8*) "DISJUNCTION", //668
       };


//typedef CommonTreeAdaptor adaptor;
//TreeAdaptor adaptor = new CommonTreeAdaptor();

//void setTreeAdaptor(TreeAdaptor adaptor)
//{
//	this.adaptor = adaptor;
//	<grammar.directDelegates:{g|<g:delegateName()>.setTreeAdaptor(this.adaptor);}>
//}
//TreeAdaptor getTreeAdaptor()
//{
//	return adaptor;
//}
/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "OracleDML.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* OracleDML::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new OracleDML parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
OracleDML::OracleDML( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new OracleDML parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
OracleDML::OracleDML( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void OracleDML::init(StreamType* instream)
{
	/* Allocate TreeAdaptorType 
	 */
	this->get_psrstate()->set_treeAdaptor( new TreeAdaptorType() );
	// Initialize the lexers/parsers that we are going to delegate some
	// functions to.
	//
	m_gOracleDMLKeys = new OracleDML_OracleDMLKeys(instream, this->get_psrstate(), this);
	m_gOracleDMLCommons = new OracleDML_OracleDMLCommons(instream, this->get_psrstate(), this);
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( OracleDMLTokenNames );

}

void
OracleDML::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
OracleDML::~OracleDML()
{
	// Free the parsers that we delegated to functions to.
	// NULL the state so we only free it once.
	//
	m_gOracleDMLKeys->set_psrstate( NULL );
	         delete m_gOracleDMLKeys;
	m_gOracleDMLCommons->set_psrstate( NULL );
	         delete m_gOracleDMLCommons;
	/* Deallocate TreeAdaptorType 
	 */
	delete this->get_psrstate()->get_treeAdaptor();
}

/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
ANTLR_UINT8**	OracleDML::getTokenNames()
{
        return OracleDMLTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seq_of_statements_in_compilation_unit670_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000800000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2010000800040000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seq_of_statements_in_compilation_unit670( FOLLOW_seq_of_statements_in_compilation_unit670_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EOF_TOKEN_in_compilation_unit673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EOF_TOKEN_in_compilation_unit673( FOLLOW_EOF_TOKEN_in_compilation_unit673_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_seq_of_statements700_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_seq_of_statements700( FOLLOW_select_statement_in_seq_of_statements700_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_statement_in_seq_of_statements711_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_statement_in_seq_of_statements711( FOLLOW_update_statement_in_seq_of_statements711_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_delete_statement_in_seq_of_statements722_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_delete_statement_in_seq_of_statements722( FOLLOW_delete_statement_in_seq_of_statements722_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_statement_in_seq_of_statements733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_statement_in_seq_of_statements733( FOLLOW_insert_statement_in_seq_of_statements733_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_table_statement_in_seq_of_statements744_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_table_statement_in_seq_of_statements744( FOLLOW_lock_table_statement_in_seq_of_statements744_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_statement_in_seq_of_statements755_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_statement_in_seq_of_statements755( FOLLOW_merge_statement_in_seq_of_statements755_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_explain_statement_in_seq_of_statements766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_explain_statement_in_seq_of_statements766( FOLLOW_explain_statement_in_seq_of_statements766_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_in_seq_of_statements778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_in_seq_of_statements778( FOLLOW_set_in_seq_of_statements778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_explain_key_in_explain_statement809_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_explain_key_in_explain_statement809( FOLLOW_explain_key_in_explain_statement809_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_plan_key_in_explain_statement811_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_plan_key_in_explain_statement811( FOLLOW_plan_key_in_explain_statement811_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_explain_statement823_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_explain_statement823( FOLLOW_set_key_in_explain_statement823_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_statement_id_key_in_explain_statement825_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_statement_id_key_in_explain_statement825( FOLLOW_statement_id_key_in_explain_statement825_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_explain_statement827_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_explain_statement827( FOLLOW_EQUALS_OP_in_explain_statement827_bits, 5 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_quoted_string_in_explain_statement829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_quoted_string_in_explain_statement829( FOLLOW_quoted_string_in_explain_statement829_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_key_in_explain_statement843_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_key_in_explain_statement843( FOLLOW_into_key_in_explain_statement843_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_explain_statement845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_explain_statement845( FOLLOW_tableview_name_in_explain_statement845_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_explain_statement858_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2010000800040000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_explain_statement858( FOLLOW_for_key_in_explain_statement858_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_explain_statement871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_explain_statement871( FOLLOW_select_statement_in_explain_statement871_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_statement_in_explain_statement884_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_statement_in_explain_statement884( FOLLOW_update_statement_in_explain_statement884_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_delete_statement_in_explain_statement897_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_delete_statement_in_explain_statement897( FOLLOW_delete_statement_in_explain_statement897_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_statement_in_explain_statement910_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_statement_in_explain_statement910( FOLLOW_insert_statement_in_explain_statement910_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_statement_in_explain_statement923_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_statement_in_explain_statement923( FOLLOW_merge_statement_in_explain_statement923_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_factoring_clause_in_select_statement984_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_factoring_clause_in_select_statement984( FOLLOW_subquery_factoring_clause_in_select_statement984_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_select_statement995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_select_statement995( FOLLOW_subquery_in_select_statement995_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_update_clause_in_select_statement1006_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_update_clause_in_select_statement1006( FOLLOW_for_update_clause_in_select_statement1006_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_select_statement1018_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_select_statement1018( FOLLOW_order_by_clause_in_select_statement1018_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_subquery_factoring_clause1069_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_subquery_factoring_clause1069( FOLLOW_with_key_in_subquery_factoring_clause1069_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_factoring_element_in_subquery_factoring_clause1072_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_factoring_element_in_subquery_factoring_clause1072( FOLLOW_factoring_element_in_subquery_factoring_clause1072_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_subquery_factoring_clause1075_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_subquery_factoring_clause1075( FOLLOW_COMMA_in_subquery_factoring_clause1075_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_factoring_element_in_subquery_factoring_clause1078_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_factoring_element_in_subquery_factoring_clause1078( FOLLOW_factoring_element_in_subquery_factoring_clause1078_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_name_in_factoring_element1100_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_name_in_factoring_element1100( FOLLOW_query_name_in_factoring_element1100_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_factoring_element1103_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_factoring_element1103( FOLLOW_LEFT_PAREN_in_factoring_element1103_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_factoring_element1105_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_factoring_element1105( FOLLOW_column_name_in_factoring_element1105_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_factoring_element1108_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_factoring_element1108( FOLLOW_COMMA_in_factoring_element1108_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_factoring_element1110_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_factoring_element1110( FOLLOW_column_name_in_factoring_element1110_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_factoring_element1114_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_factoring_element1114( FOLLOW_RIGHT_PAREN_in_factoring_element1114_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_factoring_element1118_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_factoring_element1118( FOLLOW_as_key_in_factoring_element1118_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_factoring_element1120_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_factoring_element1120( FOLLOW_LEFT_PAREN_in_factoring_element1120_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_factoring_element1122_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_factoring_element1122( FOLLOW_subquery_in_factoring_element1122_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_factoring_element1124_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_factoring_element1124( FOLLOW_order_by_clause_in_factoring_element1124_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_factoring_element1127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_factoring_element1127( FOLLOW_RIGHT_PAREN_in_factoring_element1127_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_search_clause_in_factoring_element1138_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_search_clause_in_factoring_element1138( FOLLOW_search_clause_in_factoring_element1138_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cycle_clause_in_factoring_element1150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cycle_clause_in_factoring_element1150( FOLLOW_cycle_clause_in_factoring_element1150_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_search_key_in_search_clause1195_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_search_key_in_search_clause1195( FOLLOW_search_key_in_search_clause1195_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_depth_key_in_search_clause1199_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_depth_key_in_search_clause1199( FOLLOW_depth_key_in_search_clause1199_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_breadth_key_in_search_clause1203_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_breadth_key_in_search_clause1203( FOLLOW_breadth_key_in_search_clause1203_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_search_clause1207_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_search_clause1207( FOLLOW_first_key_in_search_clause1207_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_search_clause1209_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_search_clause1209( FOLLOW_by_key_in_search_clause1209_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_search_clause1224_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080020) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_search_clause1224( FOLLOW_column_name_in_search_clause1224_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_asc_key_in_search_clause1226_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_asc_key_in_search_clause1226( FOLLOW_asc_key_in_search_clause1226_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_desc_key_in_search_clause1230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_desc_key_in_search_clause1230( FOLLOW_desc_key_in_search_clause1230_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_search_clause1235_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_search_clause1235( FOLLOW_nulls_key_in_search_clause1235_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_search_clause1237_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_search_clause1237( FOLLOW_first_key_in_search_clause1237_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_search_clause1242_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_search_clause1242( FOLLOW_nulls_key_in_search_clause1242_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_last_key_in_search_clause1244_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_last_key_in_search_clause1244( FOLLOW_last_key_in_search_clause1244_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_search_clause1262_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_search_clause1262( FOLLOW_COMMA_in_search_clause1262_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_search_clause1264_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080020) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_search_clause1264( FOLLOW_column_name_in_search_clause1264_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_asc_key_in_search_clause1266_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_asc_key_in_search_clause1266( FOLLOW_asc_key_in_search_clause1266_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_desc_key_in_search_clause1270_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_desc_key_in_search_clause1270( FOLLOW_desc_key_in_search_clause1270_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_search_clause1275_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_search_clause1275( FOLLOW_nulls_key_in_search_clause1275_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_search_clause1277_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_search_clause1277( FOLLOW_first_key_in_search_clause1277_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_search_clause1282_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_search_clause1282( FOLLOW_nulls_key_in_search_clause1282_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_last_key_in_search_clause1284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_last_key_in_search_clause1284( FOLLOW_last_key_in_search_clause1284_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_search_clause1304_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_search_clause1304( FOLLOW_set_key_in_search_clause1304_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_search_clause1306_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_search_clause1306( FOLLOW_column_name_in_search_clause1306_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cycle_key_in_cycle_clause1326_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cycle_key_in_cycle_clause1326( FOLLOW_cycle_key_in_cycle_clause1326_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_cycle_clause1328_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_cycle_clause1328( FOLLOW_column_name_in_cycle_clause1328_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_cycle_clause1332_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_cycle_clause1332( FOLLOW_COMMA_in_cycle_clause1332_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_cycle_clause1334_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_cycle_clause1334( FOLLOW_column_name_in_cycle_clause1334_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_cycle_clause1338_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_cycle_clause1338( FOLLOW_set_key_in_cycle_clause1338_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_cycle_clause1340_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_cycle_clause1340( FOLLOW_column_name_in_cycle_clause1340_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_to_key_in_cycle_clause1342_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_to_key_in_cycle_clause1342( FOLLOW_to_key_in_cycle_clause1342_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_cycle_clause1344_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_cycle_clause1344( FOLLOW_expression_in_cycle_clause1344_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_default_key_in_cycle_clause1346_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_default_key_in_cycle_clause1346( FOLLOW_default_key_in_cycle_clause1346_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_cycle_clause1348_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_cycle_clause1348( FOLLOW_expression_in_cycle_clause1348_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_basic_elements_in_subquery1368_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_basic_elements_in_subquery1368( FOLLOW_subquery_basic_elements_in_subquery1368_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_operation_part_in_subquery1370_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_operation_part_in_subquery1370( FOLLOW_subquery_operation_part_in_subquery1370_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_union_key_in_subquery_operation_part1411_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_union_key_in_subquery_operation_part1411( FOLLOW_union_key_in_subquery_operation_part1411_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_subquery_operation_part1414_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_subquery_operation_part1414( FOLLOW_all_key_in_subquery_operation_part1414_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_intersect_key_in_subquery_operation_part1417_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_intersect_key_in_subquery_operation_part1417( FOLLOW_intersect_key_in_subquery_operation_part1417_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_minus_key_in_subquery_operation_part1420_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_minus_key_in_subquery_operation_part1420( FOLLOW_minus_key_in_subquery_operation_part1420_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_basic_elements_in_subquery_operation_part1424_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_basic_elements_in_subquery_operation_part1424( FOLLOW_subquery_basic_elements_in_subquery_operation_part1424_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_block_in_subquery_basic_elements1444_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_block_in_subquery_basic_elements1444( FOLLOW_query_block_in_subquery_basic_elements1444_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_subquery_basic_elements1455_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_subquery_basic_elements1455( FOLLOW_LEFT_PAREN_in_subquery_basic_elements1455_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_subquery_basic_elements1457_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_subquery_basic_elements1457( FOLLOW_subquery_in_subquery_basic_elements1457_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1459_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1459( FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1459_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_query_block1487_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x140103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_query_block1487( FOLLOW_select_key_in_query_block1487_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_query_block1508_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_query_block1508( FOLLOW_distinct_key_in_query_block1508_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_query_block1510_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_query_block1510( FOLLOW_unique_key_in_query_block1510_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_query_block1512_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_query_block1512( FOLLOW_all_key_in_query_block1512_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_query_block1526_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_query_block1526( FOLLOW_ASTERISK_in_query_block1526_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_selected_element_in_query_block1531_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_selected_element_in_query_block1531( FOLLOW_selected_element_in_query_block1531_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_query_block1534_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_query_block1534( FOLLOW_COMMA_in_query_block1534_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_selected_element_in_query_block1536_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_selected_element_in_query_block1536( FOLLOW_selected_element_in_query_block1536_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_clause_in_query_block1549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_clause_in_query_block1549( FOLLOW_into_clause_in_query_block1549_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_clause_in_query_block1560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000200), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000300000800), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_clause_in_query_block1560( FOLLOW_from_clause_in_query_block1560_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_query_block1571_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000200), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000300000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_query_block1571( FOLLOW_where_clause_in_query_block1571_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_hierarchical_query_clause_in_query_block1583_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000300000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_hierarchical_query_clause_in_query_block1583( FOLLOW_hierarchical_query_clause_in_query_block1583_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_clause_in_query_block1595_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_clause_in_query_block1595( FOLLOW_group_by_clause_in_query_block1595_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_clause_in_query_block1606_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_clause_in_query_block1606( FOLLOW_model_clause_in_query_block1606_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_list_elements_in_selected_element1750_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_list_elements_in_selected_element1750( FOLLOW_select_list_elements_in_selected_element1750_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_selected_element1752_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_selected_element1752( FOLLOW_column_alias_in_selected_element1752_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_from_clause1792_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_from_clause1792( FOLLOW_from_key_in_from_clause1792_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_list_in_from_clause1795_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_list_in_from_clause1795( FOLLOW_table_ref_list_in_from_clause1795_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_select_list_elements1824_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_select_list_elements1824( FOLLOW_tableview_name_in_select_list_elements1824_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_select_list_elements1826_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_select_list_elements1826( FOLLOW_PERIOD_in_select_list_elements1826_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_select_list_elements1828_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_select_list_elements1828( FOLLOW_ASTERISK_in_select_list_elements1828_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_select_list_elements1854_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_select_list_elements1854( FOLLOW_expression_in_select_list_elements1854_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_in_table_ref_list1882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_in_table_ref_list1882( FOLLOW_table_ref_in_table_ref_list1882_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_table_ref_list1885_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_table_ref_list1885( FOLLOW_COMMA_in_table_ref_list1885_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_in_table_ref_list1888_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_in_table_ref_list1888( FOLLOW_table_ref_in_table_ref_list1888_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_in_table_ref1914_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000001800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_in_table_ref1914( FOLLOW_table_ref_aux_in_table_ref1914_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_join_clause_in_table_ref1916_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000001800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_join_clause_in_table_ref1916( FOLLOW_join_clause_in_table_ref1916_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_clause_in_table_ref1920_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_clause_in_table_ref1920( FOLLOW_pivot_clause_in_table_ref1920_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_clause_in_table_ref1922_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_clause_in_table_ref1922( FOLLOW_unpivot_clause_in_table_ref1922_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_table_ref_aux1988_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000001800), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_table_ref_aux1988( FOLLOW_dml_table_expression_clause_in_table_ref_aux1988_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_clause_in_table_ref_aux1991_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_clause_in_table_ref_aux1991( FOLLOW_pivot_clause_in_table_ref_aux1991_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_clause_in_table_ref_aux1993_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_clause_in_table_ref_aux1993( FOLLOW_unpivot_clause_in_table_ref_aux1993_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_table_ref_aux2012_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_table_ref_aux2012( FOLLOW_LEFT_PAREN_in_table_ref_aux2012_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_in_table_ref_aux2014_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_in_table_ref_aux2014( FOLLOW_table_ref_in_table_ref_aux2014_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_operation_part_in_table_ref_aux2016_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_operation_part_in_table_ref_aux2016( FOLLOW_subquery_operation_part_in_table_ref_aux2016_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_table_ref_aux2019_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000001800), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_table_ref_aux2019( FOLLOW_RIGHT_PAREN_in_table_ref_aux2019_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_clause_in_table_ref_aux2022_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_clause_in_table_ref_aux2022( FOLLOW_pivot_clause_in_table_ref_aux2022_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_clause_in_table_ref_aux2024_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_clause_in_table_ref_aux2024( FOLLOW_unpivot_clause_in_table_ref_aux2024_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_table_ref_aux2045_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_table_ref_aux2045( FOLLOW_only_key_in_table_ref_aux2045_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_table_ref_aux2047_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_table_ref_aux2047( FOLLOW_LEFT_PAREN_in_table_ref_aux2047_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_table_ref_aux2049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_table_ref_aux2049( FOLLOW_dml_table_expression_clause_in_table_ref_aux2049_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_table_ref_aux2051_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_table_ref_aux2051( FOLLOW_RIGHT_PAREN_in_table_ref_aux2051_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_table_ref_aux2062_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000001800), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_table_ref_aux2062( FOLLOW_dml_table_expression_clause_in_table_ref_aux2062_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_clause_in_table_ref_aux2065_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_clause_in_table_ref_aux2065( FOLLOW_pivot_clause_in_table_ref_aux2065_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_clause_in_table_ref_aux2067_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_clause_in_table_ref_aux2067( FOLLOW_unpivot_clause_in_table_ref_aux2067_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_flashback_query_clause_in_table_ref_aux2085_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_flashback_query_clause_in_table_ref_aux2085( FOLLOW_flashback_query_clause_in_table_ref_aux2085_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_table_ref_aux2099_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_table_ref_aux2099( FOLLOW_table_alias_in_table_ref_aux2099_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_partition_clause_in_join_clause2160_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_partition_clause_in_join_clause2160( FOLLOW_query_partition_clause_in_join_clause2160_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cross_key_in_join_clause2172_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cross_key_in_join_clause2172( FOLLOW_cross_key_in_join_clause2172_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_natural_key_in_join_clause2174_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_natural_key_in_join_clause2174( FOLLOW_natural_key_in_join_clause2174_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_inner_key_in_join_clause2179_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_inner_key_in_join_clause2179( FOLLOW_inner_key_in_join_clause2179_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_outer_join_type_in_join_clause2181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_outer_join_type_in_join_clause2181( FOLLOW_outer_join_type_in_join_clause2181_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_join_key_in_join_clause2185_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_join_key_in_join_clause2185( FOLLOW_join_key_in_join_clause2185_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_ref_aux_in_join_clause2195_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_ref_aux_in_join_clause2195( FOLLOW_table_ref_aux_in_join_clause2195_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_partition_clause_in_join_clause2207_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_partition_clause_in_join_clause2207( FOLLOW_query_partition_clause_in_join_clause2207_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_join_on_part_in_join_clause2219_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_join_on_part_in_join_clause2219( FOLLOW_join_on_part_in_join_clause2219_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_join_using_part_in_join_clause2230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_join_using_part_in_join_clause2230( FOLLOW_join_using_part_in_join_clause2230_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_on_key_in_join_on_part2300_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_on_key_in_join_on_part2300( FOLLOW_on_key_in_join_on_part2300_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_join_on_part2302_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_join_on_part2302( FOLLOW_condition_in_join_on_part2302_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_join_using_part2343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_join_using_part2343( FOLLOW_using_key_in_join_using_part2343_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_join_using_part2346_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_join_using_part2346( FOLLOW_LEFT_PAREN_in_join_using_part2346_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_join_using_part2348_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_join_using_part2348( FOLLOW_column_name_in_join_using_part2348_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_join_using_part2351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_join_using_part2351( FOLLOW_COMMA_in_join_using_part2351_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_join_using_part2354_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_join_using_part2354( FOLLOW_column_name_in_join_using_part2354_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_join_using_part2358_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_join_using_part2358( FOLLOW_RIGHT_PAREN_in_join_using_part2358_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_full_key_in_outer_join_type2388_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_full_key_in_outer_join_type2388( FOLLOW_full_key_in_outer_join_type2388_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_left_key_in_outer_join_type2399_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_left_key_in_outer_join_type2399( FOLLOW_left_key_in_outer_join_type2399_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_right_key_in_outer_join_type2410_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_right_key_in_outer_join_type2410( FOLLOW_right_key_in_outer_join_type2410_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_outer_key_in_outer_join_type2426_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_outer_key_in_outer_join_type2426( FOLLOW_outer_key_in_outer_join_type2426_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_partition_key_in_query_partition_clause2448_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_partition_key_in_query_partition_clause2448( FOLLOW_partition_key_in_query_partition_clause2448_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_query_partition_clause2450_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_query_partition_clause2450( FOLLOW_by_key_in_query_partition_clause2450_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_query_partition_clause2473_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_query_partition_clause2473( FOLLOW_LEFT_PAREN_in_query_partition_clause2473_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_query_partition_clause2475_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_query_partition_clause2475( FOLLOW_subquery_in_query_partition_clause2475_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_query_partition_clause2477_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_query_partition_clause2477( FOLLOW_RIGHT_PAREN_in_query_partition_clause2477_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_query_partition_clause2493_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_query_partition_clause2493( FOLLOW_expression_list_in_query_partition_clause2493_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_query_partition_clause2504_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_query_partition_clause2504( FOLLOW_expression_in_query_partition_clause2504_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_query_partition_clause2507_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_query_partition_clause2507( FOLLOW_COMMA_in_query_partition_clause2507_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_query_partition_clause2509_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_query_partition_clause2509( FOLLOW_expression_in_query_partition_clause2509_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_versions_key_in_flashback_query_clause2564_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_versions_key_in_flashback_query_clause2564( FOLLOW_versions_key_in_flashback_query_clause2564_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_between_key_in_flashback_query_clause2566_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_between_key_in_flashback_query_clause2566( FOLLOW_between_key_in_flashback_query_clause2566_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_scn_key_in_flashback_query_clause2569_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_scn_key_in_flashback_query_clause2569( FOLLOW_scn_key_in_flashback_query_clause2569_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_timestamp_key_in_flashback_query_clause2571_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_timestamp_key_in_flashback_query_clause2571( FOLLOW_timestamp_key_in_flashback_query_clause2571_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_flashback_query_clause2574_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_flashback_query_clause2574( FOLLOW_expression_in_flashback_query_clause2574_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_flashback_query_clause2604_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000040000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_flashback_query_clause2604( FOLLOW_as_key_in_flashback_query_clause2604_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_of_key_in_flashback_query_clause2606_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_of_key_in_flashback_query_clause2606( FOLLOW_of_key_in_flashback_query_clause2606_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_scn_key_in_flashback_query_clause2609_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_scn_key_in_flashback_query_clause2609( FOLLOW_scn_key_in_flashback_query_clause2609_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_timestamp_key_in_flashback_query_clause2611_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_timestamp_key_in_flashback_query_clause2611( FOLLOW_timestamp_key_in_flashback_query_clause2611_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_snapshot_key_in_flashback_query_clause2613_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_snapshot_key_in_flashback_query_clause2613( FOLLOW_snapshot_key_in_flashback_query_clause2613_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_flashback_query_clause2616_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_flashback_query_clause2616( FOLLOW_expression_in_flashback_query_clause2616_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_key_in_pivot_clause2657_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_key_in_pivot_clause2657( FOLLOW_pivot_key_in_pivot_clause2657_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_key_in_pivot_clause2659_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_key_in_pivot_clause2659( FOLLOW_xml_key_in_pivot_clause2659_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_pivot_clause2670_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_pivot_clause2670( FOLLOW_LEFT_PAREN_in_pivot_clause2670_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_element_in_pivot_clause2684_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_element_in_pivot_clause2684( FOLLOW_pivot_element_in_pivot_clause2684_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pivot_clause2687_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_pivot_clause2687( FOLLOW_COMMA_in_pivot_clause2687_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_element_in_pivot_clause2689_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_element_in_pivot_clause2689( FOLLOW_pivot_element_in_pivot_clause2689_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_for_clause_in_pivot_clause2705_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_for_clause_in_pivot_clause2705( FOLLOW_pivot_for_clause_in_pivot_clause2705_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_in_clause_in_pivot_clause2719_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_in_clause_in_pivot_clause2719( FOLLOW_pivot_in_clause_in_pivot_clause2719_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_pivot_clause2731_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_pivot_clause2731( FOLLOW_RIGHT_PAREN_in_pivot_clause2731_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_aggregate_function_name_in_pivot_element2775_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_aggregate_function_name_in_pivot_element2775( FOLLOW_aggregate_function_name_in_pivot_element2775_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_pivot_element2777_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_pivot_element2777( FOLLOW_LEFT_PAREN_in_pivot_element2777_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_pivot_element2779_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_pivot_element2779( FOLLOW_expression_in_pivot_element2779_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_pivot_element2781_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_pivot_element2781( FOLLOW_RIGHT_PAREN_in_pivot_element2781_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_pivot_element2783_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_pivot_element2783( FOLLOW_column_alias_in_pivot_element2783_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_pivot_for_clause2845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_pivot_for_clause2845( FOLLOW_for_key_in_pivot_for_clause2845_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_pivot_for_clause2857_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_pivot_for_clause2857( FOLLOW_column_name_in_pivot_for_clause2857_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_pivot_for_clause2868_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_pivot_for_clause2868( FOLLOW_LEFT_PAREN_in_pivot_for_clause2868_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_pivot_for_clause2870_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_pivot_for_clause2870( FOLLOW_column_name_in_pivot_for_clause2870_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pivot_for_clause2873_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_pivot_for_clause2873( FOLLOW_COMMA_in_pivot_for_clause2873_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_pivot_for_clause2875_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_pivot_for_clause2875( FOLLOW_column_name_in_pivot_for_clause2875_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_pivot_for_clause2879_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_pivot_for_clause2879( FOLLOW_RIGHT_PAREN_in_pivot_for_clause2879_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_pivot_in_clause2930_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_pivot_in_clause2930( FOLLOW_in_key_in_pivot_in_clause2930_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_pivot_in_clause2940_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x041103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_pivot_in_clause2940( FOLLOW_LEFT_PAREN_in_pivot_in_clause2940_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_pivot_in_clause2964_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_pivot_in_clause2964( FOLLOW_subquery_in_pivot_in_clause2964_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_pivot_in_clause2990_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_pivot_in_clause2990( FOLLOW_any_key_in_pivot_in_clause2990_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pivot_in_clause2993_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_pivot_in_clause2993( FOLLOW_COMMA_in_pivot_in_clause2993_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_pivot_in_clause2995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_pivot_in_clause2995( FOLLOW_any_key_in_pivot_in_clause2995_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_in_clause_element_in_pivot_in_clause3018_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_in_clause_element_in_pivot_in_clause3018( FOLLOW_pivot_in_clause_element_in_pivot_in_clause3018_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_pivot_in_clause3021_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_pivot_in_clause3021( FOLLOW_COMMA_in_pivot_in_clause3021_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_in_clause_element_in_pivot_in_clause3023_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_in_clause_element_in_pivot_in_clause3023( FOLLOW_pivot_in_clause_element_in_pivot_in_clause3023_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_pivot_in_clause3049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_pivot_in_clause3049( FOLLOW_RIGHT_PAREN_in_pivot_in_clause3049_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3129_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3129( FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3129_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_pivot_in_clause_element3131_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_pivot_in_clause_element3131( FOLLOW_column_alias_in_pivot_in_clause_element3131_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_pivot_in_clause_elements3171_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_pivot_in_clause_elements3171( FOLLOW_expression_in_pivot_in_clause_elements3171_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_pivot_in_clause_elements3195_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_pivot_in_clause_elements3195( FOLLOW_expression_list_in_pivot_in_clause_elements3195_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_key_in_unpivot_clause3215_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_key_in_unpivot_clause3215( FOLLOW_unpivot_key_in_unpivot_clause3215_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_include_key_in_unpivot_clause3228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_include_key_in_unpivot_clause3228( FOLLOW_include_key_in_unpivot_clause3228_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exclude_key_in_unpivot_clause3230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exclude_key_in_unpivot_clause3230( FOLLOW_exclude_key_in_unpivot_clause3230_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_unpivot_clause3233_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_unpivot_clause3233( FOLLOW_nulls_key_in_unpivot_clause3233_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_clause3245_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_clause3245( FOLLOW_LEFT_PAREN_in_unpivot_clause3245_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_clause3264_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_clause3264( FOLLOW_column_name_in_unpivot_clause3264_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_clause3283_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_clause3283( FOLLOW_LEFT_PAREN_in_unpivot_clause3283_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_clause3285_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_clause3285( FOLLOW_column_name_in_unpivot_clause3285_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_unpivot_clause3288_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_unpivot_clause3288( FOLLOW_COMMA_in_unpivot_clause3288_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_clause3290_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_clause3290( FOLLOW_column_name_in_unpivot_clause3290_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_clause3294_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_clause3294( FOLLOW_RIGHT_PAREN_in_unpivot_clause3294_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_pivot_for_clause_in_unpivot_clause3322_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_pivot_for_clause_in_unpivot_clause3322( FOLLOW_pivot_for_clause_in_unpivot_clause3322_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_in_clause_in_unpivot_clause3336_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_in_clause_in_unpivot_clause3336( FOLLOW_unpivot_in_clause_in_unpivot_clause3336_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_clause3346_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_clause3346( FOLLOW_RIGHT_PAREN_in_unpivot_clause3346_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_unpivot_in_clause3396_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_unpivot_in_clause3396( FOLLOW_in_key_in_unpivot_in_clause3396_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_in_clause3406_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_in_clause3406( FOLLOW_LEFT_PAREN_in_unpivot_in_clause3406_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_in_elements_in_unpivot_in_clause3420_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_in_elements_in_unpivot_in_clause3420( FOLLOW_unpivot_in_elements_in_unpivot_in_clause3420_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_unpivot_in_clause3423_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_unpivot_in_clause3423( FOLLOW_COMMA_in_unpivot_in_clause3423_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unpivot_in_elements_in_unpivot_in_clause3425_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unpivot_in_elements_in_unpivot_in_clause3425( FOLLOW_unpivot_in_elements_in_unpivot_in_clause3425_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3437_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3437( FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3437_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_in_elements3482_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_in_elements3482( FOLLOW_column_name_in_unpivot_in_elements3482_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_in_elements3497_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_in_elements3497( FOLLOW_LEFT_PAREN_in_unpivot_in_elements3497_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_in_elements3499_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_in_elements3499( FOLLOW_column_name_in_unpivot_in_elements3499_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_unpivot_in_elements3502_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_unpivot_in_elements3502( FOLLOW_COMMA_in_unpivot_in_elements3502_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_unpivot_in_elements3504_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_unpivot_in_elements3504( FOLLOW_column_name_in_unpivot_in_elements3504_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3508_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3508( FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3508_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_unpivot_in_elements3533_bits[]	= { ANTLR_UINT64_LIT(0x0180000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_unpivot_in_elements3533( FOLLOW_as_key_in_unpivot_in_elements3533_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_unpivot_in_elements3548_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_unpivot_in_elements3548( FOLLOW_constant_in_unpivot_in_elements3548_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_unpivot_in_elements3568_bits[]	= { ANTLR_UINT64_LIT(0x0180000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_unpivot_in_elements3568( FOLLOW_LEFT_PAREN_in_unpivot_in_elements3568_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_unpivot_in_elements3570_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_unpivot_in_elements3570( FOLLOW_constant_in_unpivot_in_elements3570_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_unpivot_in_elements3573_bits[]	= { ANTLR_UINT64_LIT(0x0180000000002000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_unpivot_in_elements3573( FOLLOW_COMMA_in_unpivot_in_elements3573_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_unpivot_in_elements3575_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_unpivot_in_elements3575( FOLLOW_constant_in_unpivot_in_elements3575_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3579_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3579( FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3579_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_connect_key_in_hierarchical_query_clause3641_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_connect_key_in_hierarchical_query_clause3641( FOLLOW_connect_key_in_hierarchical_query_clause3641_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_hierarchical_query_clause3643_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_hierarchical_query_clause3643( FOLLOW_by_key_in_hierarchical_query_clause3643_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nocycle_key_in_hierarchical_query_clause3645_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nocycle_key_in_hierarchical_query_clause3645( FOLLOW_nocycle_key_in_hierarchical_query_clause3645_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_hierarchical_query_clause3648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_hierarchical_query_clause3648( FOLLOW_condition_in_hierarchical_query_clause3648_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_start_part_in_hierarchical_query_clause3650_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_start_part_in_hierarchical_query_clause3650( FOLLOW_start_part_in_hierarchical_query_clause3650_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_start_part_in_hierarchical_query_clause3692_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_start_part_in_hierarchical_query_clause3692( FOLLOW_start_part_in_hierarchical_query_clause3692_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_connect_key_in_hierarchical_query_clause3694_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_connect_key_in_hierarchical_query_clause3694( FOLLOW_connect_key_in_hierarchical_query_clause3694_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_hierarchical_query_clause3696_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_hierarchical_query_clause3696( FOLLOW_by_key_in_hierarchical_query_clause3696_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nocycle_key_in_hierarchical_query_clause3698_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nocycle_key_in_hierarchical_query_clause3698( FOLLOW_nocycle_key_in_hierarchical_query_clause3698_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_hierarchical_query_clause3701_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_hierarchical_query_clause3701( FOLLOW_condition_in_hierarchical_query_clause3701_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_start_key_in_start_part3751_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_start_key_in_start_part3751( FOLLOW_start_key_in_start_part3751_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_start_part3753_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_start_part3753( FOLLOW_with_key_in_start_part3753_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_start_part3755_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_start_part3755( FOLLOW_condition_in_start_part3755_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_key_in_group_by_clause3800_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_key_in_group_by_clause3800( FOLLOW_group_key_in_group_by_clause3800_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_group_by_clause3802_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_group_by_clause3802( FOLLOW_by_key_in_group_by_clause3802_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_group_by_clause3808_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_group_by_clause3808( FOLLOW_LEFT_PAREN_in_group_by_clause3808_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_group_by_clause3810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000200000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_group_by_clause3810( FOLLOW_RIGHT_PAREN_in_group_by_clause3810_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_group_by_clause3817_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000200000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_group_by_clause3817( FOLLOW_group_by_elements_in_group_by_clause3817_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_group_by_clause3827_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_group_by_clause3827( FOLLOW_COMMA_in_group_by_clause3827_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_group_by_clause3829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000200000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_group_by_clause3829( FOLLOW_group_by_elements_in_group_by_clause3829_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_having_clause_in_group_by_clause3840_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_having_clause_in_group_by_clause3840( FOLLOW_having_clause_in_group_by_clause3840_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_having_clause_in_group_by_clause3880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000100000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_having_clause_in_group_by_clause3880( FOLLOW_having_clause_in_group_by_clause3880_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_key_in_group_by_clause3885_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_key_in_group_by_clause3885( FOLLOW_group_key_in_group_by_clause3885_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_group_by_clause3887_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_group_by_clause3887( FOLLOW_by_key_in_group_by_clause3887_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_group_by_clause3893_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_group_by_clause3893( FOLLOW_LEFT_PAREN_in_group_by_clause3893_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_group_by_clause3895_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_group_by_clause3895( FOLLOW_RIGHT_PAREN_in_group_by_clause3895_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_group_by_clause3902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_group_by_clause3902( FOLLOW_group_by_elements_in_group_by_clause3902_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_group_by_clause3912_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_group_by_clause3912( FOLLOW_COMMA_in_group_by_clause3912_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_group_by_clause3914_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_group_by_clause3914( FOLLOW_group_by_elements_in_group_by_clause3914_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_clause_in_group_by_elements3969_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_clause_in_group_by_elements3969( FOLLOW_grouping_sets_clause_in_group_by_elements3969_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rollup_cube_clause_in_group_by_elements3980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rollup_cube_clause_in_group_by_elements3980( FOLLOW_rollup_cube_clause_in_group_by_elements3980_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_group_by_elements3992_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_group_by_elements3992( FOLLOW_expression_in_group_by_elements3992_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rollup_key_in_rollup_cube_clause4021_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rollup_key_in_rollup_cube_clause4021( FOLLOW_rollup_key_in_rollup_cube_clause4021_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cube_key_in_rollup_cube_clause4024_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cube_key_in_rollup_cube_clause4024( FOLLOW_cube_key_in_rollup_cube_clause4024_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_rollup_cube_clause4028_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_rollup_cube_clause4028( FOLLOW_LEFT_PAREN_in_rollup_cube_clause4028_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_elements_in_rollup_cube_clause4030_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_elements_in_rollup_cube_clause4030( FOLLOW_grouping_sets_elements_in_rollup_cube_clause4030_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_rollup_cube_clause4033_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_rollup_cube_clause4033( FOLLOW_COMMA_in_rollup_cube_clause4033_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_elements_in_rollup_cube_clause4036_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_elements_in_rollup_cube_clause4036( FOLLOW_grouping_sets_elements_in_rollup_cube_clause4036_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_rollup_cube_clause4040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_rollup_cube_clause4040( FOLLOW_RIGHT_PAREN_in_rollup_cube_clause4040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_key_in_grouping_sets_clause4061_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_key_in_grouping_sets_clause4061( FOLLOW_grouping_key_in_grouping_sets_clause4061_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_sets_key_in_grouping_sets_clause4063_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_sets_key_in_grouping_sets_clause4063( FOLLOW_sets_key_in_grouping_sets_clause4063_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_grouping_sets_clause4074_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_grouping_sets_clause4074( FOLLOW_LEFT_PAREN_in_grouping_sets_clause4074_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_elements_in_grouping_sets_clause4076_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_elements_in_grouping_sets_clause4076( FOLLOW_grouping_sets_elements_in_grouping_sets_clause4076_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_grouping_sets_clause4079_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_grouping_sets_clause4079( FOLLOW_COMMA_in_grouping_sets_clause4079_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_grouping_sets_elements_in_grouping_sets_clause4081_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_grouping_sets_elements_in_grouping_sets_clause4081( FOLLOW_grouping_sets_elements_in_grouping_sets_clause4081_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4085_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4085( FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4085_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rollup_cube_clause_in_grouping_sets_elements4133_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rollup_cube_clause_in_grouping_sets_elements4133( FOLLOW_rollup_cube_clause_in_grouping_sets_elements4133_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_grouping_sets_elements4149_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_grouping_sets_elements4149( FOLLOW_expression_list_in_grouping_sets_elements4149_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_grouping_sets_elements4160_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_grouping_sets_elements4160( FOLLOW_expression_in_grouping_sets_elements4160_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_having_key_in_having_clause4188_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_having_key_in_having_clause4188( FOLLOW_having_key_in_having_clause4188_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_having_clause4190_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_having_clause4190( FOLLOW_condition_in_having_clause4190_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_key_in_model_clause4230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_key_in_model_clause4230( FOLLOW_model_key_in_model_clause4230_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cell_reference_options_in_model_clause4232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cell_reference_options_in_model_clause4232( FOLLOW_cell_reference_options_in_model_clause4232_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_return_rows_clause_in_model_clause4235_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_return_rows_clause_in_model_clause4235( FOLLOW_return_rows_clause_in_model_clause4235_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reference_model_in_model_clause4238_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reference_model_in_model_clause4238( FOLLOW_reference_model_in_model_clause4238_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_main_model_in_model_clause4241_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_main_model_in_model_clause4241( FOLLOW_main_model_in_model_clause4241_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ignore_key_in_cell_reference_options4287_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ignore_key_in_cell_reference_options4287( FOLLOW_ignore_key_in_cell_reference_options4287_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_keep_key_in_cell_reference_options4290_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_keep_key_in_cell_reference_options4290( FOLLOW_keep_key_in_cell_reference_options4290_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nav_key_in_cell_reference_options4294_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nav_key_in_cell_reference_options4294( FOLLOW_nav_key_in_cell_reference_options4294_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_cell_reference_options4305_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_cell_reference_options4305( FOLLOW_unique_key_in_cell_reference_options4305_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dimension_key_in_cell_reference_options4309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dimension_key_in_cell_reference_options4309( FOLLOW_dimension_key_in_cell_reference_options4309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_single_key_in_cell_reference_options4311_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_single_key_in_cell_reference_options4311( FOLLOW_single_key_in_cell_reference_options4311_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reference_key_in_cell_reference_options4313_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reference_key_in_cell_reference_options4313( FOLLOW_reference_key_in_cell_reference_options4313_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_return_key_in_return_rows_clause4334_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_return_key_in_return_rows_clause4334( FOLLOW_return_key_in_return_rows_clause4334_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_updated_key_in_return_rows_clause4338_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_updated_key_in_return_rows_clause4338( FOLLOW_updated_key_in_return_rows_clause4338_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_return_rows_clause4340_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_return_rows_clause4340( FOLLOW_all_key_in_return_rows_clause4340_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rows_key_in_return_rows_clause4343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rows_key_in_return_rows_clause4343( FOLLOW_rows_key_in_return_rows_clause4343_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reference_key_in_reference_model4364_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reference_key_in_reference_model4364( FOLLOW_reference_key_in_reference_model4364_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reference_model_name_in_reference_model4367_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reference_model_name_in_reference_model4367( FOLLOW_reference_model_name_in_reference_model4367_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_on_key_in_reference_model4369_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_on_key_in_reference_model4369( FOLLOW_on_key_in_reference_model4369_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_reference_model4385_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_reference_model4385( FOLLOW_LEFT_PAREN_in_reference_model4385_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_reference_model4387_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_reference_model4387( FOLLOW_subquery_in_reference_model4387_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_reference_model4389_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_reference_model4389( FOLLOW_RIGHT_PAREN_in_reference_model4389_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_clauses_in_reference_model4391_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_clauses_in_reference_model4391( FOLLOW_model_column_clauses_in_reference_model4391_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cell_reference_options_in_reference_model4406_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cell_reference_options_in_reference_model4406( FOLLOW_cell_reference_options_in_reference_model4406_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_main_key_in_main_model4428_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_main_key_in_main_model4428( FOLLOW_main_key_in_main_model4428_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_main_model_name_in_main_model4430_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_main_model_name_in_main_model4430( FOLLOW_main_model_name_in_main_model4430_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_clauses_in_main_model4434_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_clauses_in_main_model4434( FOLLOW_model_column_clauses_in_main_model4434_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cell_reference_options_in_main_model4436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cell_reference_options_in_main_model4436( FOLLOW_cell_reference_options_in_main_model4436_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_rules_clause_in_main_model4439_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_rules_clause_in_main_model4439( FOLLOW_model_rules_clause_in_main_model4439_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_partition_part_in_model_column_clauses4483_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_partition_part_in_model_column_clauses4483( FOLLOW_model_column_partition_part_in_model_column_clauses4483_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dimension_key_in_model_column_clauses4494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dimension_key_in_model_column_clauses4494( FOLLOW_dimension_key_in_model_column_clauses4494_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_model_column_clauses4496_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_model_column_clauses4496( FOLLOW_by_key_in_model_column_clauses4496_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_list_in_model_column_clauses4498_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_list_in_model_column_clauses4498( FOLLOW_model_column_list_in_model_column_clauses4498_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_measures_key_in_model_column_clauses4500_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_measures_key_in_model_column_clauses4500( FOLLOW_measures_key_in_model_column_clauses4500_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_list_in_model_column_clauses4502_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_list_in_model_column_clauses4502( FOLLOW_model_column_list_in_model_column_clauses4502_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_partition_key_in_model_column_partition_part4551_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_partition_key_in_model_column_partition_part4551( FOLLOW_partition_key_in_model_column_partition_part4551_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_model_column_partition_part4554_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_model_column_partition_part4554( FOLLOW_by_key_in_model_column_partition_part4554_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_list_in_model_column_partition_part4557_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_list_in_model_column_partition_part4557( FOLLOW_model_column_list_in_model_column_partition_part4557_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_model_column_list4577_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_model_column_list4577( FOLLOW_LEFT_PAREN_in_model_column_list4577_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_in_model_column_list4579_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_in_model_column_list4579( FOLLOW_model_column_in_model_column_list4579_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_model_column_list4582_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_model_column_list4582( FOLLOW_COMMA_in_model_column_list4582_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_column_in_model_column_list4584_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_column_in_model_column_list4584( FOLLOW_model_column_in_model_column_list4584_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_model_column_list4589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_model_column_list4589( FOLLOW_RIGHT_PAREN_in_model_column_list4589_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_model_column4626_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_model_column4626( FOLLOW_expression_in_model_column4626_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_model_column4628_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_model_column4628( FOLLOW_column_alias_in_model_column4628_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_rules_part_in_model_rules_clause4672_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_rules_part_in_model_rules_clause4672( FOLLOW_model_rules_part_in_model_rules_clause4672_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_model_rules_clause4675_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x2401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_model_rules_clause4675( FOLLOW_LEFT_PAREN_in_model_rules_clause4675_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_rules_element_in_model_rules_clause4678_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_rules_element_in_model_rules_clause4678( FOLLOW_model_rules_element_in_model_rules_clause4678_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_model_rules_clause4681_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_model_rules_clause4681( FOLLOW_COMMA_in_model_rules_clause4681_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_rules_element_in_model_rules_clause4683_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_rules_element_in_model_rules_clause4683( FOLLOW_model_rules_element_in_model_rules_clause4683_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_model_rules_clause4689_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_model_rules_clause4689( FOLLOW_RIGHT_PAREN_in_model_rules_clause4689_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rules_key_in_model_rules_part4729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rules_key_in_model_rules_part4729( FOLLOW_rules_key_in_model_rules_part4729_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_model_rules_part4732_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_model_rules_part4732( FOLLOW_update_key_in_model_rules_part4732_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_upsert_key_in_model_rules_part4734_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_upsert_key_in_model_rules_part4734( FOLLOW_upsert_key_in_model_rules_part4734_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_model_rules_part4736_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_model_rules_part4736( FOLLOW_all_key_in_model_rules_part4736_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_automatic_key_in_model_rules_part4743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_automatic_key_in_model_rules_part4743( FOLLOW_automatic_key_in_model_rules_part4743_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_sequential_key_in_model_rules_part4745_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_sequential_key_in_model_rules_part4745( FOLLOW_sequential_key_in_model_rules_part4745_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_key_in_model_rules_part4748_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_key_in_model_rules_part4748( FOLLOW_order_key_in_model_rules_part4748_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_iterate_clause_in_model_rules_part4752_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_iterate_clause_in_model_rules_part4752( FOLLOW_model_iterate_clause_in_model_rules_part4752_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_model_rules_element4806_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_model_rules_element4806( FOLLOW_update_key_in_model_rules_element4806_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_upsert_key_in_model_rules_element4808_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_upsert_key_in_model_rules_element4808( FOLLOW_upsert_key_in_model_rules_element4808_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_model_rules_element4816_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_model_rules_element4816( FOLLOW_all_key_in_model_rules_element4816_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cell_assignment_in_model_rules_element4830_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cell_assignment_in_model_rules_element4830( FOLLOW_cell_assignment_in_model_rules_element4830_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_model_rules_element4848_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_model_rules_element4848( FOLLOW_order_by_clause_in_model_rules_element4848_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_model_rules_element4863_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_model_rules_element4863( FOLLOW_EQUALS_OP_in_model_rules_element4863_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_model_rules_element4865_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_model_rules_element4865( FOLLOW_expression_in_model_rules_element4865_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_expression_in_cell_assignment4924_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_expression_in_cell_assignment4924( FOLLOW_model_expression_in_cell_assignment4924_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_iterate_key_in_model_iterate_clause4944_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_iterate_key_in_model_iterate_clause4944( FOLLOW_iterate_key_in_model_iterate_clause4944_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_model_iterate_clause4946_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_model_iterate_clause4946( FOLLOW_LEFT_PAREN_in_model_iterate_clause4946_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_model_iterate_clause4948_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_model_iterate_clause4948( FOLLOW_expression_in_model_iterate_clause4948_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_model_iterate_clause4950_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_model_iterate_clause4950( FOLLOW_RIGHT_PAREN_in_model_iterate_clause4950_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_until_part_in_model_iterate_clause4952_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_until_part_in_model_iterate_clause4952( FOLLOW_until_part_in_model_iterate_clause4952_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_until_key_in_until_part4995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_until_key_in_until_part4995( FOLLOW_until_key_in_until_part4995_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_until_part4997_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_until_part4997( FOLLOW_LEFT_PAREN_in_until_part4997_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_until_part4999_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_until_part4999( FOLLOW_condition_in_until_part4999_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_until_part5001_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_until_part5001( FOLLOW_RIGHT_PAREN_in_until_part5001_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_key_in_order_by_clause5041_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_key_in_order_by_clause5041( FOLLOW_order_key_in_order_by_clause5041_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_siblings_key_in_order_by_clause5043_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_siblings_key_in_order_by_clause5043( FOLLOW_siblings_key_in_order_by_clause5043_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_order_by_clause5046_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_order_by_clause5046( FOLLOW_by_key_in_order_by_clause5046_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_elements_in_order_by_clause5048_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_elements_in_order_by_clause5048( FOLLOW_order_by_elements_in_order_by_clause5048_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_order_by_clause5051_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_order_by_clause5051( FOLLOW_COMMA_in_order_by_clause5051_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_elements_in_order_by_clause5053_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_elements_in_order_by_clause5053( FOLLOW_order_by_elements_in_order_by_clause5053_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_order_by_elements5099_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080020) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_order_by_elements5099( FOLLOW_expression_in_order_by_elements5099_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_asc_key_in_order_by_elements5102_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_asc_key_in_order_by_elements5102( FOLLOW_asc_key_in_order_by_elements5102_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_desc_key_in_order_by_elements5104_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_desc_key_in_order_by_elements5104( FOLLOW_desc_key_in_order_by_elements5104_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nulls_key_in_order_by_elements5109_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nulls_key_in_order_by_elements5109( FOLLOW_nulls_key_in_order_by_elements5109_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_order_by_elements5112_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_order_by_elements5112( FOLLOW_first_key_in_order_by_elements5112_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_last_key_in_order_by_elements5114_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_last_key_in_order_by_elements5114( FOLLOW_last_key_in_order_by_elements5114_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_for_update_clause5172_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_for_update_clause5172( FOLLOW_for_key_in_for_update_clause5172_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_for_update_clause5174_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000008000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000040000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_for_update_clause5174( FOLLOW_update_key_in_for_update_clause5174_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_update_of_part_in_for_update_clause5176_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000008000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_update_of_part_in_for_update_clause5176( FOLLOW_for_update_of_part_in_for_update_clause5176_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_update_options_in_for_update_clause5179_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_update_options_in_for_update_clause5179( FOLLOW_for_update_options_in_for_update_clause5179_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_of_key_in_for_update_of_part5222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_of_key_in_for_update_of_part5222( FOLLOW_of_key_in_for_update_of_part5222_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_for_update_of_part5225_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_for_update_of_part5225( FOLLOW_column_name_in_for_update_of_part5225_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_for_update_of_part5228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_for_update_of_part5228( FOLLOW_COMMA_in_for_update_of_part5228_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_for_update_of_part5231_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_for_update_of_part5231( FOLLOW_column_name_in_for_update_of_part5231_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_skip_key_in_for_update_options5253_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_skip_key_in_for_update_options5253( FOLLOW_skip_key_in_for_update_options5253_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_locked_key_in_for_update_options5255_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_locked_key_in_for_update_options5255( FOLLOW_locked_key_in_for_update_options5255_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nowait_key_in_for_update_options5267_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nowait_key_in_for_update_options5267( FOLLOW_nowait_key_in_for_update_options5267_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_wait_key_in_for_update_options5278_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_wait_key_in_for_update_options5278( FOLLOW_wait_key_in_for_update_options5278_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_for_update_options5280_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_for_update_options5280( FOLLOW_expression_in_for_update_options5280_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_update_statement5314_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_update_statement5314( FOLLOW_update_key_in_update_statement5314_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_table_ref_in_update_statement5317_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_table_ref_in_update_statement5317( FOLLOW_general_table_ref_in_update_statement5317_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_set_clause_in_update_statement5327_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_set_clause_in_update_statement5327( FOLLOW_update_set_clause_in_update_statement5327_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_update_statement5337_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_update_statement5337( FOLLOW_where_clause_in_update_statement5337_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_static_returning_clause_in_update_statement5340_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_static_returning_clause_in_update_statement5340( FOLLOW_static_returning_clause_in_update_statement5340_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_update_statement5343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_update_statement5343( FOLLOW_error_logging_clause_in_update_statement5343_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_update_set_clause5373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_update_set_clause5373( FOLLOW_set_key_in_update_set_clause5373_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_based_update_set_clause_in_update_set_clause5384_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_based_update_set_clause_in_update_set_clause5384( FOLLOW_column_based_update_set_clause_in_update_set_clause5384_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_update_set_clause5387_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_update_set_clause5387( FOLLOW_COMMA_in_update_set_clause5387_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_based_update_set_clause_in_update_set_clause5389_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_based_update_set_clause_in_update_set_clause5389( FOLLOW_column_based_update_set_clause_in_update_set_clause5389_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_value_key_in_update_set_clause5402_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_value_key_in_update_set_clause5402( FOLLOW_value_key_in_update_set_clause5402_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_update_set_clause5404_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_update_set_clause5404( FOLLOW_LEFT_PAREN_in_update_set_clause5404_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_id_in_update_set_clause5406_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_id_in_update_set_clause5406( FOLLOW_id_in_update_set_clause5406_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_update_set_clause5409_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_update_set_clause5409( FOLLOW_RIGHT_PAREN_in_update_set_clause5409_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_update_set_clause5411_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_update_set_clause5411( FOLLOW_EQUALS_OP_in_update_set_clause5411_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_update_set_clause5413_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_update_set_clause5413( FOLLOW_expression_in_update_set_clause5413_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_column_based_update_set_clause5485_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_column_based_update_set_clause5485( FOLLOW_column_name_in_column_based_update_set_clause5485_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_column_based_update_set_clause5487_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_column_based_update_set_clause5487( FOLLOW_EQUALS_OP_in_column_based_update_set_clause5487_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_column_based_update_set_clause5489_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_column_based_update_set_clause5489( FOLLOW_expression_in_column_based_update_set_clause5489_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5515_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5515( FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5515_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_column_based_update_set_clause5517_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_column_based_update_set_clause5517( FOLLOW_column_name_in_column_based_update_set_clause5517_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_column_based_update_set_clause5520_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_column_based_update_set_clause5520( FOLLOW_COMMA_in_column_based_update_set_clause5520_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_column_based_update_set_clause5522_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_column_based_update_set_clause5522( FOLLOW_column_name_in_column_based_update_set_clause5522_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5526_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5526( FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5526_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_column_based_update_set_clause5528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_column_based_update_set_clause5528( FOLLOW_EQUALS_OP_in_column_based_update_set_clause5528_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_column_based_update_set_clause5530_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_column_based_update_set_clause5530( FOLLOW_subquery_in_column_based_update_set_clause5530_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_delete_key_in_delete_statement5564_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_delete_key_in_delete_statement5564( FOLLOW_delete_key_in_delete_statement5564_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_delete_statement5567_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_delete_statement5567( FOLLOW_from_key_in_delete_statement5567_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_table_ref_in_delete_statement5579_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_table_ref_in_delete_statement5579( FOLLOW_general_table_ref_in_delete_statement5579_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_delete_statement5589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_delete_statement5589( FOLLOW_where_clause_in_delete_statement5589_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_static_returning_clause_in_delete_statement5592_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_static_returning_clause_in_delete_statement5592( FOLLOW_static_returning_clause_in_delete_statement5592_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_delete_statement5595_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_delete_statement5595( FOLLOW_error_logging_clause_in_delete_statement5595_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_key_in_insert_statement5616_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000001), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_key_in_insert_statement5616( FOLLOW_insert_key_in_insert_statement5616_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_single_table_insert_in_insert_statement5628_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_single_table_insert_in_insert_statement5628( FOLLOW_single_table_insert_in_insert_statement5628_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_table_insert_in_insert_statement5639_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_table_insert_in_insert_statement5639( FOLLOW_multi_table_insert_in_insert_statement5639_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_into_clause_in_single_table_insert5667_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_into_clause_in_single_table_insert5667( FOLLOW_insert_into_clause_in_single_table_insert5667_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_clause_in_single_table_insert5678_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_clause_in_single_table_insert5678( FOLLOW_values_clause_in_single_table_insert5678_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_static_returning_clause_in_single_table_insert5680_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_static_returning_clause_in_single_table_insert5680( FOLLOW_static_returning_clause_in_single_table_insert5680_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_single_table_insert5692_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_single_table_insert5692( FOLLOW_select_statement_in_single_table_insert5692_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_single_table_insert5708_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_single_table_insert5708( FOLLOW_error_logging_clause_in_single_table_insert5708_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_multi_table_insert5767_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_multi_table_insert5767( FOLLOW_all_key_in_multi_table_insert5767_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_table_element_in_multi_table_insert5769_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010002000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_table_element_in_multi_table_insert5769( FOLLOW_multi_table_element_in_multi_table_insert5769_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_conditional_insert_clause_in_multi_table_insert5781_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_conditional_insert_clause_in_multi_table_insert5781( FOLLOW_conditional_insert_clause_in_multi_table_insert5781_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_multi_table_insert5797_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_multi_table_insert5797( FOLLOW_select_statement_in_multi_table_insert5797_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_into_clause_in_multi_table_element5839_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_into_clause_in_multi_table_element5839( FOLLOW_insert_into_clause_in_multi_table_element5839_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_clause_in_multi_table_element5841_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_clause_in_multi_table_element5841( FOLLOW_values_clause_in_multi_table_element5841_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_multi_table_element5844_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_multi_table_element5844( FOLLOW_error_logging_clause_in_multi_table_element5844_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_conditional_insert_clause5888_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_conditional_insert_clause5888( FOLLOW_all_key_in_conditional_insert_clause5888_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_key_in_conditional_insert_clause5890_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_key_in_conditional_insert_clause5890( FOLLOW_first_key_in_conditional_insert_clause5890_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_conditional_insert_when_part_in_conditional_insert_clause5902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000400000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_conditional_insert_when_part_in_conditional_insert_clause5902( FOLLOW_conditional_insert_when_part_in_conditional_insert_clause5902_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_conditional_insert_else_part_in_conditional_insert_clause5905_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_conditional_insert_else_part_in_conditional_insert_clause5905( FOLLOW_conditional_insert_else_part_in_conditional_insert_clause5905_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_conditional_insert_when_part5953_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_conditional_insert_when_part5953( FOLLOW_when_key_in_conditional_insert_when_part5953_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_conditional_insert_when_part5955_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_conditional_insert_when_part5955( FOLLOW_condition_in_conditional_insert_when_part5955_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_conditional_insert_when_part5957_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_conditional_insert_when_part5957( FOLLOW_then_key_in_conditional_insert_when_part5957_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_table_element_in_conditional_insert_when_part5959_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_table_element_in_conditional_insert_when_part5959( FOLLOW_multi_table_element_in_conditional_insert_when_part5959_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_else_key_in_conditional_insert_else_part6003_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_else_key_in_conditional_insert_else_part6003( FOLLOW_else_key_in_conditional_insert_else_part6003_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_table_element_in_conditional_insert_else_part6006_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_table_element_in_conditional_insert_else_part6006( FOLLOW_multi_table_element_in_conditional_insert_else_part6006_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_key_in_insert_into_clause6027_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_key_in_insert_into_clause6027( FOLLOW_into_key_in_insert_into_clause6027_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_table_ref_in_insert_into_clause6029_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_table_ref_in_insert_into_clause6029( FOLLOW_general_table_ref_in_insert_into_clause6029_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_insert_into_clause6041_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_insert_into_clause6041( FOLLOW_LEFT_PAREN_in_insert_into_clause6041_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_insert_into_clause6043_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_insert_into_clause6043( FOLLOW_column_name_in_insert_into_clause6043_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_insert_into_clause6046_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_insert_into_clause6046( FOLLOW_COMMA_in_insert_into_clause6046_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_insert_into_clause6048_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_insert_into_clause6048( FOLLOW_column_name_in_insert_into_clause6048_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_insert_into_clause6052_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_insert_into_clause6052( FOLLOW_RIGHT_PAREN_in_insert_into_clause6052_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_key_in_values_clause6097_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_key_in_values_clause6097( FOLLOW_values_key_in_values_clause6097_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_values_clause6101_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_values_clause6101( FOLLOW_expression_list_in_values_clause6101_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_record_name_in_values_clause6105_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_record_name_in_values_clause6105( FOLLOW_record_name_in_values_clause6105_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_key_in_merge_statement6127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_key_in_merge_statement6127( FOLLOW_merge_key_in_merge_statement6127_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_key_in_merge_statement6129_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_key_in_merge_statement6129( FOLLOW_into_key_in_merge_statement6129_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_merge_statement6131_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000002000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_merge_statement6131( FOLLOW_tableview_name_in_merge_statement6131_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_merge_statement6133_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_merge_statement6133( FOLLOW_table_alias_in_merge_statement6133_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_merge_statement6144_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_merge_statement6144( FOLLOW_using_key_in_merge_statement6144_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_selected_tableview_in_merge_statement6146_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_selected_tableview_in_merge_statement6146( FOLLOW_selected_tableview_in_merge_statement6146_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_on_key_in_merge_statement6148_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_on_key_in_merge_statement6148( FOLLOW_on_key_in_merge_statement6148_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_merge_statement6150_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_merge_statement6150( FOLLOW_LEFT_PAREN_in_merge_statement6150_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_in_merge_statement6152_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_in_merge_statement6152( FOLLOW_condition_in_merge_statement6152_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_merge_statement6154_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_merge_statement6154( FOLLOW_RIGHT_PAREN_in_merge_statement6154_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_update_insert_seq_in_merge_statement6186_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_update_insert_seq_in_merge_statement6186( FOLLOW_merge_update_insert_seq_in_merge_statement6186_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_insert_update_seq_in_merge_statement6220_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_insert_update_seq_in_merge_statement6220( FOLLOW_merge_insert_update_seq_in_merge_statement6220_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_clause_in_merge_statement6241_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_clause_in_merge_statement6241( FOLLOW_error_logging_clause_in_merge_statement6241_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_update_clause_in_merge_update_insert_seq6324_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_update_clause_in_merge_update_insert_seq6324( FOLLOW_merge_update_clause_in_merge_update_insert_seq6324_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_insert_clause_in_merge_update_insert_seq6326_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_insert_clause_in_merge_update_insert_seq6326( FOLLOW_merge_insert_clause_in_merge_update_insert_seq6326_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_insert_clause_in_merge_insert_update_seq6344_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_insert_clause_in_merge_insert_update_seq6344( FOLLOW_merge_insert_clause_in_merge_insert_update_seq6344_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_update_clause_in_merge_insert_update_seq6346_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_update_clause_in_merge_insert_update_seq6346( FOLLOW_merge_update_clause_in_merge_insert_update_seq6346_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_merge_update_clause6367_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_merge_update_clause6367( FOLLOW_when_key_in_merge_update_clause6367_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_matched_key_in_merge_update_clause6369_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_matched_key_in_merge_update_clause6369( FOLLOW_matched_key_in_merge_update_clause6369_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_merge_update_clause6371_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_merge_update_clause6371( FOLLOW_then_key_in_merge_update_clause6371_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_merge_update_clause6373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_merge_update_clause6373( FOLLOW_update_key_in_merge_update_clause6373_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_merge_update_clause6375_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_merge_update_clause6375( FOLLOW_set_key_in_merge_update_clause6375_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_element_in_merge_update_clause6386_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_element_in_merge_update_clause6386( FOLLOW_merge_element_in_merge_update_clause6386_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_merge_update_clause6389_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_merge_update_clause6389( FOLLOW_COMMA_in_merge_update_clause6389_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_element_in_merge_update_clause6391_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_element_in_merge_update_clause6391( FOLLOW_merge_element_in_merge_update_clause6391_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_merge_update_clause6403_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_merge_update_clause6403( FOLLOW_where_clause_in_merge_update_clause6403_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_merge_update_delete_part_in_merge_update_clause6406_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_merge_update_delete_part_in_merge_update_clause6406( FOLLOW_merge_update_delete_part_in_merge_update_clause6406_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_merge_element6458_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_merge_element6458( FOLLOW_column_name_in_merge_element6458_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_merge_element6460_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_merge_element6460( FOLLOW_EQUALS_OP_in_merge_element6460_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_merge_element6462_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_merge_element6462( FOLLOW_expression_in_merge_element6462_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_delete_key_in_merge_update_delete_part6505_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_delete_key_in_merge_update_delete_part6505( FOLLOW_delete_key_in_merge_update_delete_part6505_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_merge_update_delete_part6508_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_merge_update_delete_part6508( FOLLOW_where_clause_in_merge_update_delete_part6508_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_merge_insert_clause6528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000010000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_merge_insert_clause6528( FOLLOW_when_key_in_merge_insert_clause6528_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_merge_insert_clause6530_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_merge_insert_clause6530( FOLLOW_not_key_in_merge_insert_clause6530_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_matched_key_in_merge_insert_clause6532_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_matched_key_in_merge_insert_clause6532( FOLLOW_matched_key_in_merge_insert_clause6532_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_merge_insert_clause6534_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000800000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_merge_insert_clause6534( FOLLOW_then_key_in_merge_insert_clause6534_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_insert_key_in_merge_insert_clause6536_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_insert_key_in_merge_insert_clause6536( FOLLOW_insert_key_in_merge_insert_clause6536_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_merge_insert_clause6548_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_merge_insert_clause6548( FOLLOW_LEFT_PAREN_in_merge_insert_clause6548_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_merge_insert_clause6550_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_merge_insert_clause6550( FOLLOW_column_name_in_merge_insert_clause6550_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_merge_insert_clause6553_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_merge_insert_clause6553( FOLLOW_COMMA_in_merge_insert_clause6553_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_merge_insert_clause6555_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_merge_insert_clause6555( FOLLOW_column_name_in_merge_insert_clause6555_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_merge_insert_clause6559_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_merge_insert_clause6559( FOLLOW_RIGHT_PAREN_in_merge_insert_clause6559_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_key_in_merge_insert_clause6571_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_key_in_merge_insert_clause6571( FOLLOW_values_key_in_merge_insert_clause6571_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_merge_insert_clause6573_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_merge_insert_clause6573( FOLLOW_expression_list_in_merge_insert_clause6573_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_where_clause_in_merge_insert_clause6575_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_where_clause_in_merge_insert_clause6575( FOLLOW_where_clause_in_merge_insert_clause6575_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_selected_tableview6636_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_selected_tableview6636( FOLLOW_tableview_name_in_selected_tableview6636_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_selected_tableview6640_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_selected_tableview6640( FOLLOW_LEFT_PAREN_in_selected_tableview6640_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_selected_tableview6642_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_selected_tableview6642( FOLLOW_select_statement_in_selected_tableview6642_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_selected_tableview6644_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_selected_tableview6644( FOLLOW_RIGHT_PAREN_in_selected_tableview6644_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_selected_tableview6647_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_selected_tableview6647( FOLLOW_table_alias_in_selected_tableview6647_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_key_in_lock_table_statement6693_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0040000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_key_in_lock_table_statement6693( FOLLOW_lock_key_in_lock_table_statement6693_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_key_in_lock_table_statement6695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_key_in_lock_table_statement6695( FOLLOW_table_key_in_lock_table_statement6695_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_table_element_in_lock_table_statement6706_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_table_element_in_lock_table_statement6706( FOLLOW_lock_table_element_in_lock_table_statement6706_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_lock_table_statement6709_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_lock_table_statement6709( FOLLOW_COMMA_in_lock_table_statement6709_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_table_element_in_lock_table_statement6711_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_table_element_in_lock_table_statement6711( FOLLOW_lock_table_element_in_lock_table_statement6711_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_lock_table_statement6724_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000020040000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_lock_table_statement6724( FOLLOW_in_key_in_lock_table_statement6724_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_lock_mode_in_lock_table_statement6726_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000002000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_lock_mode_in_lock_table_statement6726( FOLLOW_lock_mode_in_lock_table_statement6726_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_mode_key_in_lock_table_statement6728_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000008000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_mode_key_in_lock_table_statement6728( FOLLOW_mode_key_in_lock_table_statement6728_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_wait_nowait_part_in_lock_table_statement6730_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_wait_nowait_part_in_lock_table_statement6730( FOLLOW_wait_nowait_part_in_lock_table_statement6730_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_wait_key_in_wait_nowait_part6773_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_wait_key_in_wait_nowait_part6773( FOLLOW_wait_key_in_wait_nowait_part6773_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_wait_nowait_part6775_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_wait_nowait_part6775( FOLLOW_expression_in_wait_nowait_part6775_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nowait_key_in_wait_nowait_part6798_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nowait_key_in_wait_nowait_part6798( FOLLOW_nowait_key_in_wait_nowait_part6798_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_lock_table_element6820_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_lock_table_element6820( FOLLOW_tableview_name_in_lock_table_element6820_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_partition_extension_clause_in_lock_table_element6822_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_partition_extension_clause_in_lock_table_element6822( FOLLOW_partition_extension_clause_in_lock_table_element6822_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_row_key_in_lock_mode6862_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_row_key_in_lock_mode6862( FOLLOW_row_key_in_lock_mode6862_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_share_key_in_lock_mode6864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_share_key_in_lock_mode6864( FOLLOW_share_key_in_lock_mode6864_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_row_key_in_lock_mode6875_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_row_key_in_lock_mode6875( FOLLOW_row_key_in_lock_mode6875_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exclusive_key_in_lock_mode6877_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exclusive_key_in_lock_mode6877( FOLLOW_exclusive_key_in_lock_mode6877_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_share_key_in_lock_mode6888_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x2000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_share_key_in_lock_mode6888( FOLLOW_share_key_in_lock_mode6888_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_update_key_in_lock_mode6890_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_update_key_in_lock_mode6890( FOLLOW_update_key_in_lock_mode6890_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_share_key_in_lock_mode6902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_share_key_in_lock_mode6902( FOLLOW_share_key_in_lock_mode6902_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_row_key_in_lock_mode6904_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000040000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_row_key_in_lock_mode6904( FOLLOW_row_key_in_lock_mode6904_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exclusive_key_in_lock_mode6906_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exclusive_key_in_lock_mode6906( FOLLOW_exclusive_key_in_lock_mode6906_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exclusive_key_in_lock_mode6917_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exclusive_key_in_lock_mode6917( FOLLOW_exclusive_key_in_lock_mode6917_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_general_table_ref6945_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_general_table_ref6945( FOLLOW_dml_table_expression_clause_in_general_table_ref6945_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_general_table_ref6960_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_general_table_ref6960( FOLLOW_only_key_in_general_table_ref6960_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_general_table_ref6962_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x00C0000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_general_table_ref6962( FOLLOW_LEFT_PAREN_in_general_table_ref6962_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_dml_table_expression_clause_in_general_table_ref6964_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_dml_table_expression_clause_in_general_table_ref6964( FOLLOW_dml_table_expression_clause_in_general_table_ref6964_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_general_table_ref6966_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_general_table_ref6966( FOLLOW_RIGHT_PAREN_in_general_table_ref6966_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_alias_in_general_table_ref6981_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_alias_in_general_table_ref6981( FOLLOW_table_alias_in_general_table_ref6981_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_returning_key_in_static_returning_clause7025_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_returning_key_in_static_returning_clause7025( FOLLOW_returning_key_in_static_returning_clause7025_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_return_key_in_static_returning_clause7027_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_return_key_in_static_returning_clause7027( FOLLOW_return_key_in_static_returning_clause7027_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_static_returning_clause7030_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_static_returning_clause7030( FOLLOW_expression_in_static_returning_clause7030_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_static_returning_clause7033_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_static_returning_clause7033( FOLLOW_COMMA_in_static_returning_clause7033_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_static_returning_clause7035_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000002000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_static_returning_clause7035( FOLLOW_expression_in_static_returning_clause7035_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_clause_in_static_returning_clause7048_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_clause_in_static_returning_clause7048( FOLLOW_into_clause_in_static_returning_clause7048_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_log_key_in_error_logging_clause7091_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_log_key_in_error_logging_clause7091( FOLLOW_log_key_in_error_logging_clause7091_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_errors_key_in_error_logging_clause7093_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002002), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103200612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_errors_key_in_error_logging_clause7093( FOLLOW_errors_key_in_error_logging_clause7093_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_into_part_in_error_logging_clause7104_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002002), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_into_part_in_error_logging_clause7104( FOLLOW_error_logging_into_part_in_error_logging_clause7104_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_error_logging_clause7121_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_error_logging_clause7121( FOLLOW_expression_wrapper_in_error_logging_clause7121_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_error_logging_reject_part_in_error_logging_clause7133_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_error_logging_reject_part_in_error_logging_clause7133( FOLLOW_error_logging_reject_part_in_error_logging_clause7133_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_into_key_in_error_logging_into_part7177_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_into_key_in_error_logging_into_part7177( FOLLOW_into_key_in_error_logging_into_part7177_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_error_logging_into_part7180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_error_logging_into_part7180( FOLLOW_tableview_name_in_error_logging_into_part7180_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_reject_key_in_error_logging_reject_part7200_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_reject_key_in_error_logging_reject_part7200( FOLLOW_reject_key_in_error_logging_reject_part7200_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_limit_key_in_error_logging_reject_part7203_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_limit_key_in_error_logging_reject_part7203( FOLLOW_limit_key_in_error_logging_reject_part7203_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unlimited_key_in_error_logging_reject_part7211_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unlimited_key_in_error_logging_reject_part7211( FOLLOW_unlimited_key_in_error_logging_reject_part7211_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_error_logging_reject_part7213_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_error_logging_reject_part7213( FOLLOW_expression_wrapper_in_error_logging_reject_part7213_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_collection_expression_in_dml_table_expression_clause7234_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_collection_expression_in_dml_table_expression_clause7234( FOLLOW_table_collection_expression_in_dml_table_expression_clause7234_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7257_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7257( FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7257_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_statement_in_dml_table_expression_clause7259_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_statement_in_dml_table_expression_clause7259( FOLLOW_select_statement_in_dml_table_expression_clause7259_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7261_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7261( FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7261_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7264_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7264( FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7264_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_dml_table_expression_clause7307_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_dml_table_expression_clause7307( FOLLOW_tableview_name_in_dml_table_expression_clause7307_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_sample_clause_in_dml_table_expression_clause7309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_sample_clause_in_dml_table_expression_clause7309( FOLLOW_sample_clause_in_dml_table_expression_clause7309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_key_in_table_collection_expression7347_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_key_in_table_collection_expression7347( FOLLOW_table_key_in_table_collection_expression7347_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_the_key_in_table_collection_expression7351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_the_key_in_table_collection_expression7351( FOLLOW_the_key_in_table_collection_expression7351_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_table_collection_expression7379_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_table_collection_expression7379( FOLLOW_LEFT_PAREN_in_table_collection_expression7379_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_table_collection_expression7381_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_table_collection_expression7381( FOLLOW_subquery_in_table_collection_expression7381_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_table_collection_expression7383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_table_collection_expression7383( FOLLOW_RIGHT_PAREN_in_table_collection_expression7383_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_table_collection_expression7396_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_table_collection_expression7396( FOLLOW_LEFT_PAREN_in_table_collection_expression7396_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_table_collection_expression7398_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_table_collection_expression7398( FOLLOW_expression_in_table_collection_expression7398_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_table_collection_expression7400_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_table_collection_expression7400( FOLLOW_RIGHT_PAREN_in_table_collection_expression7400_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_subquery_restriction_clause7453_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_subquery_restriction_clause7453( FOLLOW_with_key_in_subquery_restriction_clause7453_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_read_key_in_subquery_restriction_clause7464_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_read_key_in_subquery_restriction_clause7464( FOLLOW_read_key_in_subquery_restriction_clause7464_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_subquery_restriction_clause7466_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_subquery_restriction_clause7466( FOLLOW_only_key_in_subquery_restriction_clause7466_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_check_key_in_subquery_restriction_clause7477_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000100000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_check_key_in_subquery_restriction_clause7477( FOLLOW_check_key_in_subquery_restriction_clause7477_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_option_key_in_subquery_restriction_clause7479_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_option_key_in_subquery_restriction_clause7479( FOLLOW_option_key_in_subquery_restriction_clause7479_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constraint_key_in_subquery_restriction_clause7482_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constraint_key_in_subquery_restriction_clause7482( FOLLOW_constraint_key_in_subquery_restriction_clause7482_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constraint_name_in_subquery_restriction_clause7484_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constraint_name_in_subquery_restriction_clause7484( FOLLOW_constraint_name_in_subquery_restriction_clause7484_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_sample_key_in_sample_clause7535_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_sample_key_in_sample_clause7535( FOLLOW_sample_key_in_sample_clause7535_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_block_key_in_sample_clause7537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_block_key_in_sample_clause7537( FOLLOW_block_key_in_sample_clause7537_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_sample_clause7549_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_sample_clause7549( FOLLOW_LEFT_PAREN_in_sample_clause7549_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_sample_clause7553_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_sample_clause7553( FOLLOW_expression_in_sample_clause7553_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_sample_clause7556_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_sample_clause7556( FOLLOW_COMMA_in_sample_clause7556_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_sample_clause7560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_sample_clause7560( FOLLOW_expression_in_sample_clause7560_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_sample_clause7564_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_sample_clause7564( FOLLOW_RIGHT_PAREN_in_sample_clause7564_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seed_part_in_sample_clause7574_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seed_part_in_sample_clause7574( FOLLOW_seed_part_in_sample_clause7574_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seed_key_in_seed_part7630_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seed_key_in_seed_part7630( FOLLOW_seed_key_in_seed_part7630_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_seed_part7632_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_seed_part7632( FOLLOW_LEFT_PAREN_in_seed_part7632_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_seed_part7634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_seed_part7634( FOLLOW_expression_in_seed_part7634_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_seed_part7636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_seed_part7636( FOLLOW_RIGHT_PAREN_in_seed_part7636_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cursor_key_in_cursor_expression7679_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cursor_key_in_cursor_expression7679( FOLLOW_cursor_key_in_cursor_expression7679_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_cursor_expression7681_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_cursor_expression7681( FOLLOW_LEFT_PAREN_in_cursor_expression7681_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_cursor_expression7683_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_cursor_expression7683( FOLLOW_subquery_in_cursor_expression7683_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_cursor_expression7685_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_cursor_expression7685( FOLLOW_RIGHT_PAREN_in_cursor_expression7685_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_expression_list7705_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000012), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_expression_list7705( FOLLOW_LEFT_PAREN_in_expression_list7705_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_list7707_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_expression_list7707( FOLLOW_expression_in_expression_list7707_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_expression_list7711_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_expression_list7711( FOLLOW_COMMA_in_expression_list7711_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_list7713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_expression_list7713( FOLLOW_expression_in_expression_list7713_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_expression_list7717_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_expression_list7717( FOLLOW_RIGHT_PAREN_in_expression_list7717_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_condition7759_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_condition7759( FOLLOW_expression_in_condition7759_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_condition_wrapper7779_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_condition_wrapper7779( FOLLOW_expression_in_condition_wrapper7779_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cursor_expression_in_expression7829_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cursor_expression_in_expression7829( FOLLOW_cursor_expression_in_expression7829_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_logical_and_expression_in_expression7840_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000200000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_logical_and_expression_in_expression7840( FOLLOW_logical_and_expression_in_expression7840_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_or_key_in_expression7844_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401030006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_or_key_in_expression7844( FOLLOW_or_key_in_expression7844_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_logical_and_expression_in_expression7847_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000200000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_logical_and_expression_in_expression7847( FOLLOW_logical_and_expression_in_expression7847_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_wrapper7870_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_expression_wrapper7870( FOLLOW_expression_in_expression_wrapper7870_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_and_key_in_logical_and_expression_seq7907_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401030006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_and_key_in_logical_and_expression_seq7907( FOLLOW_and_key_in_logical_and_expression_seq7907_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_negated_expression_in_logical_and_expression_seq7909_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_negated_expression_in_logical_and_expression_seq7909( FOLLOW_negated_expression_in_logical_and_expression_seq7909_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_negated_expression_in_logical_and_expression7939_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_negated_expression_in_logical_and_expression7939( FOLLOW_negated_expression_in_logical_and_expression7939_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_logical_and_expression_seq_in_logical_and_expression7942_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_logical_and_expression_seq_in_logical_and_expression7942( FOLLOW_logical_and_expression_seq_in_logical_and_expression7942_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_negated_expression8002_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401030006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_negated_expression8002( FOLLOW_not_key_in_negated_expression8002_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_negated_expression_in_negated_expression8005_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_negated_expression_in_negated_expression8005( FOLLOW_negated_expression_in_negated_expression8005_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_equality_expression_in_negated_expression8016_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_equality_expression_in_negated_expression8016( FOLLOW_equality_expression_in_negated_expression8016_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_comparsion_in_equality_expression8045_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_comparsion_in_equality_expression8045( FOLLOW_multiset_comparsion_in_equality_expression8045_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_is_key_in_equality_expression8061_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000070000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_is_key_in_equality_expression8061( FOLLOW_is_key_in_equality_expression8061_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_equality_expression8064_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000060000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_equality_expression8064( FOLLOW_not_key_in_equality_expression8064_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_null_key_in_equality_expression8083_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_null_key_in_equality_expression8083( FOLLOW_null_key_in_equality_expression8083_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nan_key_in_equality_expression8150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nan_key_in_equality_expression8150( FOLLOW_nan_key_in_equality_expression8150_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_present_key_in_equality_expression8217_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_present_key_in_equality_expression8217( FOLLOW_present_key_in_equality_expression8217_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_infinite_key_in_equality_expression8284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_infinite_key_in_equality_expression8284( FOLLOW_infinite_key_in_equality_expression8284_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_a_key_in_equality_expression8351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_a_key_in_equality_expression8351( FOLLOW_a_key_in_equality_expression8351_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_set_key_in_equality_expression8353_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_set_key_in_equality_expression8353( FOLLOW_set_key_in_equality_expression8353_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_empty_key_in_equality_expression8420_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_empty_key_in_equality_expression8420( FOLLOW_empty_key_in_equality_expression8420_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_of_key_in_equality_expression8487_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_of_key_in_equality_expression8487( FOLLOW_of_key_in_equality_expression8487_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_key_in_equality_expression8489_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_key_in_equality_expression8489( FOLLOW_type_key_in_equality_expression8489_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_equality_expression8492_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_equality_expression8492( FOLLOW_LEFT_PAREN_in_equality_expression8492_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_equality_expression8494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_equality_expression8494( FOLLOW_only_key_in_equality_expression8494_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_equality_expression8497_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_equality_expression8497( FOLLOW_type_spec_in_equality_expression8497_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_equality_expression8500_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_equality_expression8500( FOLLOW_COMMA_in_equality_expression8500_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_equality_expression8502_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_equality_expression8502( FOLLOW_type_spec_in_equality_expression8502_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_equality_expression8506_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_equality_expression8506( FOLLOW_RIGHT_PAREN_in_equality_expression8506_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_relational_expression_in_multiset_comparsion8603_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_relational_expression_in_multiset_comparsion8603( FOLLOW_relational_expression_in_multiset_comparsion8603_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_type_in_multiset_comparsion8619_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401060006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_type_in_multiset_comparsion8619( FOLLOW_multiset_type_in_multiset_comparsion8619_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_of_key_in_multiset_comparsion8621_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_of_key_in_multiset_comparsion8621( FOLLOW_of_key_in_multiset_comparsion8621_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_multiset_comparsion8624_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_multiset_comparsion8624( FOLLOW_concatenation_in_multiset_comparsion8624_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_member_key_in_multiset_type8669_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_member_key_in_multiset_type8669( FOLLOW_member_key_in_multiset_type8669_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_submultiset_key_in_multiset_type8680_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_submultiset_key_in_multiset_type8680( FOLLOW_submultiset_key_in_multiset_type8680_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_compound_expression_in_relational_expression8700_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000003000000410), ANTLR_UINT64_LIT(0x0000000300000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_compound_expression_in_relational_expression8700( FOLLOW_compound_expression_in_relational_expression8700_bits, 5 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_relational_expression8710_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_relational_expression8710( FOLLOW_EQUALS_OP_in_relational_expression8710_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_equal_op_in_relational_expression8715_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_equal_op_in_relational_expression8715( FOLLOW_not_equal_op_in_relational_expression8715_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LESS_THAN_OP_in_relational_expression8720_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LESS_THAN_OP_in_relational_expression8720( FOLLOW_LESS_THAN_OP_in_relational_expression8720_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_GREATER_THAN_OP_in_relational_expression8725_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_GREATER_THAN_OP_in_relational_expression8725( FOLLOW_GREATER_THAN_OP_in_relational_expression8725_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_less_than_or_equals_op_in_relational_expression8730_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_less_than_or_equals_op_in_relational_expression8730( FOLLOW_less_than_or_equals_op_in_relational_expression8730_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_greater_than_or_equals_op_in_relational_expression8735_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_greater_than_or_equals_op_in_relational_expression8735( FOLLOW_greater_than_or_equals_op_in_relational_expression8735_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_compound_expression_in_relational_expression8740_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000003000000410), ANTLR_UINT64_LIT(0x0000000300000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_compound_expression_in_relational_expression8740( FOLLOW_compound_expression_in_relational_expression8740_bits, 5 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_compound_expression8771_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000018400000080) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_compound_expression8771( FOLLOW_concatenation_in_compound_expression8771_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_compound_expression8788_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008400000080) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_compound_expression8788( FOLLOW_not_key_in_compound_expression8788_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_compound_expression8808_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_compound_expression8808( FOLLOW_in_key_in_compound_expression8808_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_elements_in_compound_expression8810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_elements_in_compound_expression8810( FOLLOW_in_elements_in_compound_expression8810_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_between_key_in_compound_expression8881_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_between_key_in_compound_expression8881( FOLLOW_between_key_in_compound_expression8881_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_between_elements_in_compound_expression8883_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_between_elements_in_compound_expression8883( FOLLOW_between_elements_in_compound_expression8883_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like_type_in_compound_expression8954_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like_type_in_compound_expression8954( FOLLOW_like_type_in_compound_expression8954_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_compound_expression8956_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_compound_expression8956( FOLLOW_concatenation_in_compound_expression8956_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like_escape_part_in_compound_expression8958_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like_escape_part_in_compound_expression8958( FOLLOW_like_escape_part_in_compound_expression8958_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like_key_in_like_type9067_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like_key_in_like_type9067( FOLLOW_like_key_in_like_type9067_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_likec_key_in_like_type9078_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_likec_key_in_like_type9078( FOLLOW_likec_key_in_like_type9078_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like2_key_in_like_type9089_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like2_key_in_like_type9089( FOLLOW_like2_key_in_like_type9089_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like4_key_in_like_type9100_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like4_key_in_like_type9100( FOLLOW_like4_key_in_like_type9100_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_escape_key_in_like_escape_part9120_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_escape_key_in_like_escape_part9120( FOLLOW_escape_key_in_like_escape_part9120_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_like_escape_part9122_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_like_escape_part9122( FOLLOW_concatenation_in_like_escape_part9122_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_in_elements9180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_in_elements9180( FOLLOW_LEFT_PAREN_in_in_elements9180_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_in_elements9182_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_in_elements9182( FOLLOW_subquery_in_in_elements9182_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_in_elements9184_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_in_elements9184( FOLLOW_RIGHT_PAREN_in_in_elements9184_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_in_elements9216_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_in_elements9216( FOLLOW_LEFT_PAREN_in_in_elements9216_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_in_elements9218_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_in_elements9218( FOLLOW_concatenation_wrapper_in_in_elements9218_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_in_elements9221_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_in_elements9221( FOLLOW_COMMA_in_in_elements9221_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_in_elements9223_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_in_elements9223( FOLLOW_concatenation_wrapper_in_in_elements9223_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_in_elements9227_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_in_elements9227( FOLLOW_RIGHT_PAREN_in_in_elements9227_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_in_elements9256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_in_elements9256( FOLLOW_constant_in_in_elements9256_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_bind_variable_in_in_elements9284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_bind_variable_in_in_elements9284( FOLLOW_bind_variable_in_in_elements9284_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_in_in_elements9312_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_in_in_elements9312( FOLLOW_general_element_in_in_elements9312_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_between_elements9351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_between_elements9351( FOLLOW_concatenation_in_between_elements9351_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_and_key_in_between_elements9353_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_and_key_in_between_elements9353( FOLLOW_and_key_in_between_elements9353_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_between_elements9357_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_between_elements9357( FOLLOW_concatenation_in_between_elements9357_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_additive_expression_in_concatenation9402_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0008000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_additive_expression_in_concatenation9402( FOLLOW_additive_expression_in_concatenation9402_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_op_in_concatenation9405_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_op_in_concatenation9405( FOLLOW_concatenation_op_in_concatenation9405_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_additive_expression_in_concatenation9408_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0008000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_additive_expression_in_concatenation9408( FOLLOW_additive_expression_in_concatenation9408_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_concatenation_wrapper9430_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_concatenation_wrapper9430( FOLLOW_concatenation_in_concatenation_wrapper9430_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiply_expression_in_additive_expression9466_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiply_expression_in_additive_expression9466( FOLLOW_multiply_expression_in_additive_expression9466_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PLUS_SIGN_in_additive_expression9472_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PLUS_SIGN_in_additive_expression9472( FOLLOW_PLUS_SIGN_in_additive_expression9472_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_MINUS_SIGN_in_additive_expression9477_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_MINUS_SIGN_in_additive_expression9477( FOLLOW_MINUS_SIGN_in_additive_expression9477_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiply_expression_in_additive_expression9482_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiply_expression_in_additive_expression9482( FOLLOW_multiply_expression_in_additive_expression9482_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_datetime_expression_in_multiply_expression9504_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_datetime_expression_in_multiply_expression9504( FOLLOW_datetime_expression_in_multiply_expression9504_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_multiply_expression9510_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_multiply_expression9510( FOLLOW_ASTERISK_in_multiply_expression9510_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_SOLIDUS_in_multiply_expression9515_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_SOLIDUS_in_multiply_expression9515( FOLLOW_SOLIDUS_in_multiply_expression9515_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_datetime_expression_in_multiply_expression9520_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_datetime_expression_in_multiply_expression9520( FOLLOW_datetime_expression_in_multiply_expression9520_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_expression_in_datetime_expression9543_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_expression_in_datetime_expression9543( FOLLOW_model_expression_in_datetime_expression9543_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_at_key_in_datetime_expression9559_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_at_key_in_datetime_expression9559( FOLLOW_at_key_in_datetime_expression9559_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_local_key_in_datetime_expression9562_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_local_key_in_datetime_expression9562( FOLLOW_local_key_in_datetime_expression9562_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_time_key_in_datetime_expression9564_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_time_key_in_datetime_expression9564( FOLLOW_time_key_in_datetime_expression9564_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_zone_key_in_datetime_expression9566_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_zone_key_in_datetime_expression9566( FOLLOW_zone_key_in_datetime_expression9566_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_datetime_expression9568_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_datetime_expression9568( FOLLOW_concatenation_wrapper_in_datetime_expression9568_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_interval_expression_in_datetime_expression9618_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_interval_expression_in_datetime_expression9618( FOLLOW_interval_expression_in_datetime_expression9618_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_day_key_in_interval_expression9668_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_day_key_in_interval_expression9668( FOLLOW_day_key_in_interval_expression9668_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_interval_expression9672_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_interval_expression9672( FOLLOW_LEFT_PAREN_in_interval_expression9672_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_interval_expression9676_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_interval_expression9676( FOLLOW_concatenation_wrapper_in_interval_expression9676_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_interval_expression9678_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_interval_expression9678( FOLLOW_RIGHT_PAREN_in_interval_expression9678_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_to_key_in_interval_expression9682_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_to_key_in_interval_expression9682( FOLLOW_to_key_in_interval_expression9682_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_second_key_in_interval_expression9684_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_second_key_in_interval_expression9684( FOLLOW_second_key_in_interval_expression9684_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_interval_expression9687_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_interval_expression9687( FOLLOW_LEFT_PAREN_in_interval_expression9687_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_interval_expression9691_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_interval_expression9691( FOLLOW_concatenation_wrapper_in_interval_expression9691_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_interval_expression9693_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_interval_expression9693( FOLLOW_RIGHT_PAREN_in_interval_expression9693_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_year_key_in_interval_expression9732_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_year_key_in_interval_expression9732( FOLLOW_year_key_in_interval_expression9732_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_interval_expression9735_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_interval_expression9735( FOLLOW_LEFT_PAREN_in_interval_expression9735_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_interval_expression9737_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_interval_expression9737( FOLLOW_concatenation_wrapper_in_interval_expression9737_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_interval_expression9739_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_interval_expression9739( FOLLOW_RIGHT_PAREN_in_interval_expression9739_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_to_key_in_interval_expression9743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_to_key_in_interval_expression9743( FOLLOW_to_key_in_interval_expression9743_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_month_key_in_interval_expression9745_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_month_key_in_interval_expression9745( FOLLOW_month_key_in_interval_expression9745_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_expression_in_model_expression9786_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_expression_in_model_expression9786( FOLLOW_multiset_expression_in_model_expression9786_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_BRACKET_in_model_expression9802_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103001612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_BRACKET_in_model_expression9802( FOLLOW_LEFT_BRACKET_in_model_expression9802_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_expression_element_in_model_expression9804_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_expression_element_in_model_expression9804( FOLLOW_model_expression_element_in_model_expression9804_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_BRACKET_in_model_expression9806_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_BRACKET_in_model_expression9806( FOLLOW_RIGHT_BRACKET_in_model_expression9806_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_model_expression_element9858_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_model_expression_element9858( FOLLOW_any_key_in_model_expression_element9858_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_wrapper_in_model_expression_element9860_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_wrapper_in_model_expression_element9860( FOLLOW_condition_wrapper_in_model_expression_element9860_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_model_expression_element9864_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_model_expression_element9864( FOLLOW_COMMA_in_model_expression_element9864_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_model_expression_element9873_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_model_expression_element9873( FOLLOW_any_key_in_model_expression_element9873_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_wrapper_in_model_expression_element9875_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_wrapper_in_model_expression_element9875( FOLLOW_condition_wrapper_in_model_expression_element9875_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_single_column_for_loop_in_model_expression_element9889_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_single_column_for_loop_in_model_expression_element9889( FOLLOW_single_column_for_loop_in_model_expression_element9889_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_model_expression_element9892_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_model_expression_element9892( FOLLOW_COMMA_in_model_expression_element9892_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_single_column_for_loop_in_model_expression_element9895_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_single_column_for_loop_in_model_expression_element9895( FOLLOW_single_column_for_loop_in_model_expression_element9895_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multi_column_for_loop_in_model_expression_element9908_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multi_column_for_loop_in_model_expression_element9908( FOLLOW_multi_column_for_loop_in_model_expression_element9908_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_single_column_for_loop9936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_single_column_for_loop9936( FOLLOW_for_key_in_single_column_for_loop9936_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_single_column_for_loop9938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000008420000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_single_column_for_loop9938( FOLLOW_column_name_in_single_column_for_loop9938_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_single_column_for_loop9950_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_single_column_for_loop9950( FOLLOW_in_key_in_single_column_for_loop9950_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_single_column_for_loop9952_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_single_column_for_loop9952( FOLLOW_expression_list_in_single_column_for_loop9952_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_like_part_in_single_column_for_loop9965_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_like_part_in_single_column_for_loop9965( FOLLOW_for_like_part_in_single_column_for_loop9965_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_single_column_for_loop9968_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_single_column_for_loop9968( FOLLOW_from_key_in_single_column_for_loop9968_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_single_column_for_loop9972_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0200000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_single_column_for_loop9972( FOLLOW_expression_in_single_column_for_loop9972_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_to_key_in_single_column_for_loop9986_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_to_key_in_single_column_for_loop9986( FOLLOW_to_key_in_single_column_for_loop9986_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_single_column_for_loop9990_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_single_column_for_loop9990( FOLLOW_expression_in_single_column_for_loop9990_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_increment_decrement_type_in_single_column_for_loop9992_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_increment_decrement_type_in_single_column_for_loop9992( FOLLOW_for_increment_decrement_type_in_single_column_for_loop9992_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_single_column_for_loop9996_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_single_column_for_loop9996( FOLLOW_expression_in_single_column_for_loop9996_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_like_key_in_for_like_part10105_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_like_key_in_for_like_part10105( FOLLOW_like_key_in_for_like_part10105_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_for_like_part10107_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_for_like_part10107( FOLLOW_expression_in_for_like_part10107_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_increment_key_in_for_increment_decrement_type10147_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_increment_key_in_for_increment_decrement_type10147( FOLLOW_increment_key_in_for_increment_decrement_type10147_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_decrement_key_in_for_increment_decrement_type10158_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_decrement_key_in_for_increment_decrement_type10158( FOLLOW_decrement_key_in_for_increment_decrement_type10158_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_multi_column_for_loop10178_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_multi_column_for_loop10178( FOLLOW_for_key_in_multi_column_for_loop10178_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_multi_column_for_loop10180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_multi_column_for_loop10180( FOLLOW_LEFT_PAREN_in_multi_column_for_loop10180_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_multi_column_for_loop10182_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_multi_column_for_loop10182( FOLLOW_column_name_in_multi_column_for_loop10182_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multi_column_for_loop10185_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_multi_column_for_loop10185( FOLLOW_COMMA_in_multi_column_for_loop10185_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_name_in_multi_column_for_loop10187_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_name_in_multi_column_for_loop10187( FOLLOW_column_name_in_multi_column_for_loop10187_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10191_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000400000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10191( FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10191_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_multi_column_for_loop10193_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_multi_column_for_loop10193( FOLLOW_in_key_in_multi_column_for_loop10193_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_multi_column_for_loop10203_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_multi_column_for_loop10203( FOLLOW_LEFT_PAREN_in_multi_column_for_loop10203_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_multi_column_for_loop10227_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_multi_column_for_loop10227( FOLLOW_subquery_in_multi_column_for_loop10227_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_multi_column_for_loop10251_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_multi_column_for_loop10251( FOLLOW_LEFT_PAREN_in_multi_column_for_loop10251_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_multi_column_for_loop10253_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_multi_column_for_loop10253( FOLLOW_expression_list_in_multi_column_for_loop10253_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multi_column_for_loop10256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_multi_column_for_loop10256( FOLLOW_COMMA_in_multi_column_for_loop10256_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_multi_column_for_loop10258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_multi_column_for_loop10258( FOLLOW_expression_list_in_multi_column_for_loop10258_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10262_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10262( FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10262_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10286( FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10286_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_multiset_expression10334_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_multiset_expression10334( FOLLOW_unary_expression_in_multiset_expression10334_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_op_in_multiset_expression10347_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_op_in_multiset_expression10347( FOLLOW_multiset_op_in_multiset_expression10347_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_multiset_expression10350_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_multiset_expression10350( FOLLOW_unary_expression_in_multiset_expression10350_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_MINUS_SIGN_in_unary_expression10382_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_MINUS_SIGN_in_unary_expression10382( FOLLOW_MINUS_SIGN_in_unary_expression10382_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10384_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10384( FOLLOW_unary_expression_in_unary_expression10384_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PLUS_SIGN_in_unary_expression10404_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PLUS_SIGN_in_unary_expression10404( FOLLOW_PLUS_SIGN_in_unary_expression10404_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10406_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10406( FOLLOW_unary_expression_in_unary_expression10406_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_prior_key_in_unary_expression10426_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_prior_key_in_unary_expression10426( FOLLOW_prior_key_in_unary_expression10426_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10429_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10429( FOLLOW_unary_expression_in_unary_expression10429_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_connect_by_root_key_in_unary_expression10440_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_connect_by_root_key_in_unary_expression10440( FOLLOW_connect_by_root_key_in_unary_expression10440_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10443_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10443( FOLLOW_unary_expression_in_unary_expression10443_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_new_key_in_unary_expression10457_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_new_key_in_unary_expression10457( FOLLOW_new_key_in_unary_expression10457_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10460_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10460( FOLLOW_unary_expression_in_unary_expression10460_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_unary_expression10471_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_unary_expression10471( FOLLOW_distinct_key_in_unary_expression10471_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10474_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10474( FOLLOW_unary_expression_in_unary_expression10474_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_unary_expression10485_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_unary_expression10485( FOLLOW_all_key_in_unary_expression10485_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_unary_expression10488_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_unary_expression10488( FOLLOW_unary_expression_in_unary_expression10488_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_statement_in_unary_expression10501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_statement_in_unary_expression10501( FOLLOW_case_statement_in_unary_expression10501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_quantified_expression_in_unary_expression10513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_quantified_expression_in_unary_expression10513( FOLLOW_quantified_expression_in_unary_expression10513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_standard_function_in_unary_expression10524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_standard_function_in_unary_expression10524( FOLLOW_standard_function_in_unary_expression10524_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_atom_in_unary_expression10543_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_atom_in_unary_expression10543( FOLLOW_atom_in_unary_expression10543_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_searched_case_statement_in_case_statement10590_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_searched_case_statement_in_case_statement10590( FOLLOW_searched_case_statement_in_case_statement10590_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_simple_case_statement_in_case_statement10601_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_simple_case_statement_in_case_statement10601( FOLLOW_simple_case_statement_in_case_statement10601_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_simple_case_statement10625_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_simple_case_statement10625( FOLLOW_label_name_in_simple_case_statement10625_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_simple_case_statement10631_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0400020004028000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_simple_case_statement10631( FOLLOW_case_key_in_simple_case_statement10631_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_atom_in_simple_case_statement10633_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_atom_in_simple_case_statement10633( FOLLOW_atom_in_simple_case_statement10633_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_simple_case_when_part_in_simple_case_statement10643_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000C00000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_simple_case_when_part_in_simple_case_statement10643( FOLLOW_simple_case_when_part_in_simple_case_statement10643_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_else_part_in_simple_case_statement10655_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000800000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_else_part_in_simple_case_statement10655( FOLLOW_case_else_part_in_simple_case_statement10655_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_end_key_in_simple_case_statement10666_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_end_key_in_simple_case_statement10666( FOLLOW_end_key_in_simple_case_statement10666_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_simple_case_statement10671_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_simple_case_statement10671( FOLLOW_case_key_in_simple_case_statement10671_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_simple_case_statement10673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_simple_case_statement10673( FOLLOW_label_name_in_simple_case_statement10673_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_simple_case_when_part10730_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_simple_case_when_part10730( FOLLOW_when_key_in_simple_case_when_part10730_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_simple_case_when_part10735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_simple_case_when_part10735( FOLLOW_expression_wrapper_in_simple_case_when_part10735_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_simple_case_when_part10737_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004008000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x241103080616C209), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_simple_case_when_part10737( FOLLOW_then_key_in_simple_case_when_part10737_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seq_of_statements_in_simple_case_when_part10743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seq_of_statements_in_simple_case_when_part10743( FOLLOW_seq_of_statements_in_simple_case_when_part10743_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_simple_case_when_part10749_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_simple_case_when_part10749( FOLLOW_expression_wrapper_in_simple_case_when_part10749_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_searched_case_statement10772_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_searched_case_statement10772( FOLLOW_label_name_in_searched_case_statement10772_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_searched_case_statement10778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_searched_case_statement10778( FOLLOW_case_key_in_searched_case_statement10778_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_searched_case_when_part_in_searched_case_statement10788_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000C00000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_searched_case_when_part_in_searched_case_statement10788( FOLLOW_searched_case_when_part_in_searched_case_statement10788_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_else_part_in_searched_case_statement10799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000800000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_else_part_in_searched_case_statement10799( FOLLOW_case_else_part_in_searched_case_statement10799_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_end_key_in_searched_case_statement10810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_end_key_in_searched_case_statement10810( FOLLOW_end_key_in_searched_case_statement10810_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_searched_case_statement10815_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_searched_case_statement10815( FOLLOW_case_key_in_searched_case_statement10815_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_searched_case_statement10817_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_searched_case_statement10817( FOLLOW_label_name_in_searched_case_statement10817_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_searched_case_when_part10868_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_searched_case_when_part10868( FOLLOW_when_key_in_searched_case_when_part10868_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_condition_wrapper_in_searched_case_when_part10871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0100000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_condition_wrapper_in_searched_case_when_part10871( FOLLOW_condition_wrapper_in_searched_case_when_part10871_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_then_key_in_searched_case_when_part10873_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004008000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x241103080616C209), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_then_key_in_searched_case_when_part10873( FOLLOW_then_key_in_searched_case_when_part10873_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seq_of_statements_in_searched_case_when_part10879_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seq_of_statements_in_searched_case_when_part10879( FOLLOW_seq_of_statements_in_searched_case_when_part10879_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_searched_case_when_part10883_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_searched_case_when_part10883( FOLLOW_expression_wrapper_in_searched_case_when_part10883_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_else_key_in_case_else_part10904_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004008000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x241103080616C209), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_else_key_in_case_else_part10904( FOLLOW_else_key_in_case_else_part10904_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_seq_of_statements_in_case_else_part10910_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_seq_of_statements_in_case_else_part10910( FOLLOW_seq_of_statements_in_case_else_part10910_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_case_else_part10914_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_case_else_part10914( FOLLOW_expression_wrapper_in_case_else_part10914_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_element_in_atom10961_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_element_in_atom10961( FOLLOW_table_element_in_atom10961_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_outer_join_sign_in_atom10963_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_outer_join_sign_in_atom10963( FOLLOW_outer_join_sign_in_atom10963_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_bind_variable_in_atom10974_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_bind_variable_in_atom10974( FOLLOW_bind_variable_in_atom10974_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_atom10985_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_atom10985( FOLLOW_constant_in_atom10985_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_in_atom10996_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_in_atom10996( FOLLOW_general_element_in_atom10996_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_atom11007_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x041103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_atom11007( FOLLOW_LEFT_PAREN_in_atom11007_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_atom11044_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_atom11044( FOLLOW_subquery_in_atom11044_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_atom11046_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_atom11046( FOLLOW_RIGHT_PAREN_in_atom11046_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_operation_part_in_atom11048_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0800001000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_operation_part_in_atom11048( FOLLOW_subquery_operation_part_in_atom11048_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_or_vector_in_atom11069_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_or_vector_in_atom11069( FOLLOW_expression_or_vector_in_atom11069_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_atom11071_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_atom11071( FOLLOW_RIGHT_PAREN_in_atom11071_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression_or_vector11172_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_expression_or_vector11172( FOLLOW_expression_in_expression_or_vector11172_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_vector_expr_in_expression_or_vector11175_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_vector_expr_in_expression_or_vector11175( FOLLOW_vector_expr_in_expression_or_vector11175_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_vector_expr11235_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_vector_expr11235( FOLLOW_COMMA_in_vector_expr11235_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_vector_expr11237_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_vector_expr11237( FOLLOW_expression_in_vector_expr11237_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_vector_expr11240_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_vector_expr11240( FOLLOW_COMMA_in_vector_expr11240_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_vector_expr11242_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_vector_expr11242( FOLLOW_expression_in_vector_expr11242_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_some_key_in_quantified_expression11291_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_some_key_in_quantified_expression11291( FOLLOW_some_key_in_quantified_expression11291_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_exists_key_in_quantified_expression11295_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_exists_key_in_quantified_expression11295( FOLLOW_exists_key_in_quantified_expression11295_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_quantified_expression11299_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_quantified_expression11299( FOLLOW_all_key_in_quantified_expression11299_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_quantified_expression11303_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_quantified_expression11303( FOLLOW_any_key_in_quantified_expression11303_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_quantified_expression11330_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_quantified_expression11330( FOLLOW_LEFT_PAREN_in_quantified_expression11330_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_quantified_expression11332_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_quantified_expression11332( FOLLOW_subquery_in_quantified_expression11332_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_quantified_expression11334_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_quantified_expression11334( FOLLOW_RIGHT_PAREN_in_quantified_expression11334_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_quantified_expression11351_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_quantified_expression11351( FOLLOW_LEFT_PAREN_in_quantified_expression11351_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_quantified_expression11353_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_quantified_expression11353( FOLLOW_expression_wrapper_in_quantified_expression11353_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_quantified_expression11355_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_quantified_expression11355( FOLLOW_RIGHT_PAREN_in_quantified_expression11355_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_stantard_function_enabling_over_in_standard_function11491_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_stantard_function_enabling_over_in_standard_function11491( FOLLOW_stantard_function_enabling_over_in_standard_function11491_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_function_argument_analytic_in_standard_function11494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_function_argument_analytic_in_standard_function11494( FOLLOW_function_argument_analytic_in_standard_function11494_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_clause_in_standard_function11496_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_clause_in_standard_function11496( FOLLOW_over_clause_in_standard_function11496_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_stantard_function_enabling_using_in_standard_function11508_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_stantard_function_enabling_using_in_standard_function11508( FOLLOW_stantard_function_enabling_using_in_standard_function11508_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_function_argument_modeling_in_standard_function11511_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_function_argument_modeling_in_standard_function11511( FOLLOW_function_argument_modeling_in_standard_function11511_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_clause_in_standard_function11513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_clause_in_standard_function11513( FOLLOW_using_clause_in_standard_function11513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_count_key_in_standard_function11525_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_count_key_in_standard_function11525( FOLLOW_count_key_in_standard_function11525_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function11540_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function11540( FOLLOW_LEFT_PAREN_in_standard_function11540_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_standard_function11560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_standard_function11560( FOLLOW_ASTERISK_in_standard_function11560_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_standard_function11565_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_standard_function11565( FOLLOW_distinct_key_in_standard_function11565_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_standard_function11567_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_standard_function11567( FOLLOW_unique_key_in_standard_function11567_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_standard_function11569_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_standard_function11569( FOLLOW_all_key_in_standard_function11569_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function11573_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function11573( FOLLOW_concatenation_wrapper_in_standard_function11573_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function11589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function11589( FOLLOW_RIGHT_PAREN_in_standard_function11589_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_clause_in_standard_function11591_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_clause_in_standard_function11591( FOLLOW_over_clause_in_standard_function11591_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cast_key_in_standard_function11604_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cast_key_in_standard_function11604( FOLLOW_cast_key_in_standard_function11604_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlcast_key_in_standard_function11607_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlcast_key_in_standard_function11607( FOLLOW_xmlcast_key_in_standard_function11607_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function11624_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000004C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function11624( FOLLOW_LEFT_PAREN_in_standard_function11624_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_key_in_standard_function11656_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_key_in_standard_function11656( FOLLOW_multiset_key_in_standard_function11656_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function11659_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function11659( FOLLOW_LEFT_PAREN_in_standard_function11659_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_subquery_in_standard_function11661_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_subquery_in_standard_function11661( FOLLOW_subquery_in_standard_function11661_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_standard_function11663_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_standard_function11663( FOLLOW_order_by_clause_in_standard_function11663_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function11666_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function11666( FOLLOW_RIGHT_PAREN_in_standard_function11666_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_standard_function11684_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_standard_function11684( FOLLOW_as_key_in_standard_function11684_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_standard_function11687_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_standard_function11687( FOLLOW_type_spec_in_standard_function11687_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function11705_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function11705( FOLLOW_concatenation_wrapper_in_standard_function11705_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_standard_function11707_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_standard_function11707( FOLLOW_as_key_in_standard_function11707_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_standard_function11710_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_standard_function11710( FOLLOW_type_spec_in_standard_function11710_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function11738_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function11738( FOLLOW_RIGHT_PAREN_in_standard_function11738_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_chr_key_in_standard_function11749_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_chr_key_in_standard_function11749( FOLLOW_chr_key_in_standard_function11749_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function11764_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function11764( FOLLOW_LEFT_PAREN_in_standard_function11764_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function11783_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function11783( FOLLOW_concatenation_wrapper_in_standard_function11783_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_standard_function11785_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_standard_function11785( FOLLOW_using_key_in_standard_function11785_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nchar_cs_key_in_standard_function11788_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nchar_cs_key_in_standard_function11788( FOLLOW_nchar_cs_key_in_standard_function11788_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function11803_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function11803( FOLLOW_RIGHT_PAREN_in_standard_function11803_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_collect_key_in_standard_function11814_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_collect_key_in_standard_function11814( FOLLOW_collect_key_in_standard_function11814_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function11829_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x1401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function11829( FOLLOW_LEFT_PAREN_in_standard_function11829_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_standard_function11849_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_standard_function11849( FOLLOW_distinct_key_in_standard_function11849_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_standard_function11851_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_standard_function11851( FOLLOW_unique_key_in_standard_function11851_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function11855_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function11855( FOLLOW_concatenation_wrapper_in_standard_function11855_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_collect_order_by_part_in_standard_function11857_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_collect_order_by_part_in_standard_function11857( FOLLOW_collect_order_by_part_in_standard_function11857_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function11872_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function11872( FOLLOW_RIGHT_PAREN_in_standard_function11872_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_stantard_function_enabling_within_or_over_in_standard_function11883_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_stantard_function_enabling_within_or_over_in_standard_function11883( FOLLOW_stantard_function_enabling_within_or_over_in_standard_function11883_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_function_argument_in_standard_function11899_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_function_argument_in_standard_function11899( FOLLOW_function_argument_in_standard_function11899_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_within_or_over_part_in_standard_function11901_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_within_or_over_part_in_standard_function11901( FOLLOW_within_or_over_part_in_standard_function11901_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_decompose_key_in_standard_function11913_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_decompose_key_in_standard_function11913( FOLLOW_decompose_key_in_standard_function11913_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function11928_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function11928( FOLLOW_LEFT_PAREN_in_standard_function11928_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function11947_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function11947( FOLLOW_concatenation_wrapper_in_standard_function11947_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_canonical_key_in_standard_function11950_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_canonical_key_in_standard_function11950( FOLLOW_canonical_key_in_standard_function11950_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_compatibility_key_in_standard_function11952_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_compatibility_key_in_standard_function11952( FOLLOW_compatibility_key_in_standard_function11952_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function11969_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function11969( FOLLOW_RIGHT_PAREN_in_standard_function11969_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_extract_key_in_standard_function11980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_extract_key_in_standard_function11980( FOLLOW_extract_key_in_standard_function11980_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function11995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function11995( FOLLOW_LEFT_PAREN_in_standard_function11995_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_standard_function12013_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_standard_function12013( FOLLOW_REGULAR_ID_in_standard_function12013_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_standard_function12015_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_standard_function12015( FOLLOW_from_key_in_standard_function12015_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12018_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12018( FOLLOW_concatenation_wrapper_in_standard_function12018_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12033_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12033( FOLLOW_RIGHT_PAREN_in_standard_function12033_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_first_value_key_in_standard_function12045_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_first_value_key_in_standard_function12045( FOLLOW_first_value_key_in_standard_function12045_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_last_value_key_in_standard_function12048_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_last_value_key_in_standard_function12048( FOLLOW_last_value_key_in_standard_function12048_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_function_argument_analytic_in_standard_function12052_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_function_argument_analytic_in_standard_function12052( FOLLOW_function_argument_analytic_in_standard_function12052_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_respect_or_ignore_nulls_in_standard_function12067_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_respect_or_ignore_nulls_in_standard_function12067( FOLLOW_respect_or_ignore_nulls_in_standard_function12067_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_clause_in_standard_function12070_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_clause_in_standard_function12070( FOLLOW_over_clause_in_standard_function12070_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_stantard_function_pedictions_in_standard_function12081_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_stantard_function_pedictions_in_standard_function12081( FOLLOW_stantard_function_pedictions_in_standard_function12081_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12096_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12096( FOLLOW_LEFT_PAREN_in_standard_function12096_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12114_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000002000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12114( FOLLOW_expression_wrapper_in_standard_function12114_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function12117_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function12117( FOLLOW_COMMA_in_standard_function12117_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12119_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000002000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12119( FOLLOW_expression_wrapper_in_standard_function12119_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cost_matrix_clause_in_standard_function12123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cost_matrix_clause_in_standard_function12123( FOLLOW_cost_matrix_clause_in_standard_function12123_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_clause_in_standard_function12126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_clause_in_standard_function12126( FOLLOW_using_clause_in_standard_function12126_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12142_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12142( FOLLOW_RIGHT_PAREN_in_standard_function12142_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_translate_key_in_standard_function12153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_translate_key_in_standard_function12153( FOLLOW_translate_key_in_standard_function12153_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12168_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12168( FOLLOW_LEFT_PAREN_in_standard_function12168_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12187_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000002000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12187( FOLLOW_expression_wrapper_in_standard_function12187_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_standard_function12190_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_standard_function12190( FOLLOW_using_key_in_standard_function12190_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_char_cs_key_in_standard_function12194_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_char_cs_key_in_standard_function12194( FOLLOW_char_cs_key_in_standard_function12194_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_nchar_cs_key_in_standard_function12196_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_nchar_cs_key_in_standard_function12196( FOLLOW_nchar_cs_key_in_standard_function12196_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function12223_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function12223( FOLLOW_COMMA_in_standard_function12223_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12225_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12225( FOLLOW_expression_wrapper_in_standard_function12225_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12242_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12242( FOLLOW_RIGHT_PAREN_in_standard_function12242_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_treat_key_in_standard_function12253_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_treat_key_in_standard_function12253( FOLLOW_treat_key_in_standard_function12253_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12268_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12268( FOLLOW_LEFT_PAREN_in_standard_function12268_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12286_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12286( FOLLOW_expression_wrapper_in_standard_function12286_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_standard_function12288_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_standard_function12288( FOLLOW_as_key_in_standard_function12288_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ref_key_in_standard_function12291_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ref_key_in_standard_function12291( FOLLOW_ref_key_in_standard_function12291_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_standard_function12294_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_standard_function12294( FOLLOW_type_spec_in_standard_function12294_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12309( FOLLOW_RIGHT_PAREN_in_standard_function12309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_trim_key_in_standard_function12320_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_trim_key_in_standard_function12320( FOLLOW_trim_key_in_standard_function12320_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12335_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020026128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12335( FOLLOW_LEFT_PAREN_in_standard_function12335_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_leading_key_in_standard_function12355_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_leading_key_in_standard_function12355( FOLLOW_leading_key_in_standard_function12355_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_trailing_key_in_standard_function12357_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_trailing_key_in_standard_function12357( FOLLOW_trailing_key_in_standard_function12357_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_both_key_in_standard_function12359_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_both_key_in_standard_function12359( FOLLOW_both_key_in_standard_function12359_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_quoted_string_in_standard_function12363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000020000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_quoted_string_in_standard_function12363( FOLLOW_quoted_string_in_standard_function12363_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_from_key_in_standard_function12366_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_from_key_in_standard_function12366( FOLLOW_from_key_in_standard_function12366_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12386_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12386( FOLLOW_concatenation_wrapper_in_standard_function12386_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12400_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12400( FOLLOW_RIGHT_PAREN_in_standard_function12400_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlagg_key_in_standard_function12411_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlagg_key_in_standard_function12411( FOLLOW_xmlagg_key_in_standard_function12411_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12426_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12426( FOLLOW_LEFT_PAREN_in_standard_function12426_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12445_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12445( FOLLOW_expression_wrapper_in_standard_function12445_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_standard_function12447_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_standard_function12447( FOLLOW_order_by_clause_in_standard_function12447_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12463_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12463( FOLLOW_RIGHT_PAREN_in_standard_function12463_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function12478_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function12478( FOLLOW_PERIOD_in_standard_function12478_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function12480_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function12480( FOLLOW_general_element_part_in_standard_function12480_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlcolattval_key_in_standard_function12494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlcolattval_key_in_standard_function12494( FOLLOW_xmlcolattval_key_in_standard_function12494_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlforest_key_in_standard_function12497_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlforest_key_in_standard_function12497( FOLLOW_xmlforest_key_in_standard_function12497_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12514_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12514( FOLLOW_LEFT_PAREN_in_standard_function12514_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_multiuse_expression_element_in_standard_function12532_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_multiuse_expression_element_in_standard_function12532( FOLLOW_xml_multiuse_expression_element_in_standard_function12532_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function12535_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function12535( FOLLOW_COMMA_in_standard_function12535_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_multiuse_expression_element_in_standard_function12538_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_multiuse_expression_element_in_standard_function12538( FOLLOW_xml_multiuse_expression_element_in_standard_function12538_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12554_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12554( FOLLOW_RIGHT_PAREN_in_standard_function12554_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function12569_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function12569( FOLLOW_PERIOD_in_standard_function12569_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function12571_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function12571( FOLLOW_general_element_part_in_standard_function12571_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlelement_key_in_standard_function12584_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlelement_key_in_standard_function12584( FOLLOW_xmlelement_key_in_standard_function12584_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12599_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12599( FOLLOW_LEFT_PAREN_in_standard_function12599_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_entityescaping_key_in_standard_function12618_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_entityescaping_key_in_standard_function12618( FOLLOW_entityescaping_key_in_standard_function12618_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_noentityescaping_key_in_standard_function12620_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_noentityescaping_key_in_standard_function12620( FOLLOW_noentityescaping_key_in_standard_function12620_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_name_key_in_standard_function12641_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_name_key_in_standard_function12641( FOLLOW_name_key_in_standard_function12641_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_evalname_key_in_standard_function12643_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_evalname_key_in_standard_function12643( FOLLOW_evalname_key_in_standard_function12643_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12647_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12647( FOLLOW_expression_wrapper_in_standard_function12647_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function12668_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function12668( FOLLOW_COMMA_in_standard_function12668_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_attributes_clause_in_standard_function12671_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_attributes_clause_in_standard_function12671( FOLLOW_xml_attributes_clause_in_standard_function12671_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function12692_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function12692( FOLLOW_COMMA_in_standard_function12692_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12695_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12695( FOLLOW_expression_wrapper_in_standard_function12695_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_standard_function12697_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_standard_function12697( FOLLOW_column_alias_in_standard_function12697_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12714_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12714( FOLLOW_RIGHT_PAREN_in_standard_function12714_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function12729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function12729( FOLLOW_PERIOD_in_standard_function12729_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function12731_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function12731( FOLLOW_general_element_part_in_standard_function12731_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlexists_key_in_standard_function12744_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlexists_key_in_standard_function12744( FOLLOW_xmlexists_key_in_standard_function12744_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12759_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12759( FOLLOW_LEFT_PAREN_in_standard_function12759_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_standard_function12777_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_standard_function12777( FOLLOW_expression_wrapper_in_standard_function12777_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_passing_clause_in_standard_function12795_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_passing_clause_in_standard_function12795( FOLLOW_xml_passing_clause_in_standard_function12795_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12810( FOLLOW_RIGHT_PAREN_in_standard_function12810_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlparse_key_in_standard_function12821_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlparse_key_in_standard_function12821( FOLLOW_xmlparse_key_in_standard_function12821_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12836_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12836( FOLLOW_LEFT_PAREN_in_standard_function12836_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_document_key_in_standard_function12856_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_document_key_in_standard_function12856( FOLLOW_document_key_in_standard_function12856_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_content_key_in_standard_function12858_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_content_key_in_standard_function12858( FOLLOW_content_key_in_standard_function12858_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12861_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12861( FOLLOW_concatenation_wrapper_in_standard_function12861_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_wellformed_key_in_standard_function12863_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_wellformed_key_in_standard_function12863( FOLLOW_wellformed_key_in_standard_function12863_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function12878_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function12878( FOLLOW_RIGHT_PAREN_in_standard_function12878_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function12893_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function12893( FOLLOW_PERIOD_in_standard_function12893_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function12895_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function12895( FOLLOW_general_element_part_in_standard_function12895_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlpi_key_in_standard_function12908_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlpi_key_in_standard_function12908( FOLLOW_xmlpi_key_in_standard_function12908_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function12923_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function12923( FOLLOW_LEFT_PAREN_in_standard_function12923_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_name_key_in_standard_function12947_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_name_key_in_standard_function12947( FOLLOW_name_key_in_standard_function12947_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_id_in_standard_function12949_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_id_in_standard_function12949( FOLLOW_id_in_standard_function12949_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_evalname_key_in_standard_function12973_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_evalname_key_in_standard_function12973( FOLLOW_evalname_key_in_standard_function12973_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function12975_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function12975( FOLLOW_concatenation_wrapper_in_standard_function12975_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13012_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13012( FOLLOW_COMMA_in_standard_function13012_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13015_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13015( FOLLOW_concatenation_wrapper_in_standard_function13015_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13031_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13031( FOLLOW_RIGHT_PAREN_in_standard_function13031_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13046_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13046( FOLLOW_PERIOD_in_standard_function13046_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13048_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13048( FOLLOW_general_element_part_in_standard_function13048_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlquery_key_in_standard_function13061_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlquery_key_in_standard_function13061( FOLLOW_xmlquery_key_in_standard_function13061_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13076_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13076( FOLLOW_LEFT_PAREN_in_standard_function13076_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13095_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13095( FOLLOW_concatenation_wrapper_in_standard_function13095_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_passing_clause_in_standard_function13097_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_passing_clause_in_standard_function13097( FOLLOW_xml_passing_clause_in_standard_function13097_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_returning_key_in_standard_function13116_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_returning_key_in_standard_function13116( FOLLOW_returning_key_in_standard_function13116_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_content_key_in_standard_function13119_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000020000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_content_key_in_standard_function13119( FOLLOW_content_key_in_standard_function13119_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_null_key_in_standard_function13123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000080000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_null_key_in_standard_function13123( FOLLOW_null_key_in_standard_function13123_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_on_key_in_standard_function13125_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_on_key_in_standard_function13125( FOLLOW_on_key_in_standard_function13125_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_empty_key_in_standard_function13128_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_empty_key_in_standard_function13128( FOLLOW_empty_key_in_standard_function13128_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13145_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13145( FOLLOW_RIGHT_PAREN_in_standard_function13145_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13160_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13160( FOLLOW_PERIOD_in_standard_function13160_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13162_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13162( FOLLOW_general_element_part_in_standard_function13162_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlroot_key_in_standard_function13175_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlroot_key_in_standard_function13175( FOLLOW_xmlroot_key_in_standard_function13175_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13190_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13190( FOLLOW_LEFT_PAREN_in_standard_function13190_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13208_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13208( FOLLOW_concatenation_wrapper_in_standard_function13208_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlroot_param_version_part_in_standard_function13230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlroot_param_version_part_in_standard_function13230( FOLLOW_xmlroot_param_version_part_in_standard_function13230_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13253_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13253( FOLLOW_COMMA_in_standard_function13253_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlroot_param_standalone_part_in_standard_function13256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlroot_param_standalone_part_in_standard_function13256( FOLLOW_xmlroot_param_standalone_part_in_standard_function13256_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13272_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13272( FOLLOW_RIGHT_PAREN_in_standard_function13272_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13287_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13287( FOLLOW_PERIOD_in_standard_function13287_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13289_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13289( FOLLOW_general_element_part_in_standard_function13289_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlserialize_key_in_standard_function13302_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlserialize_key_in_standard_function13302( FOLLOW_xmlserialize_key_in_standard_function13302_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13317_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13317( FOLLOW_LEFT_PAREN_in_standard_function13317_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_document_key_in_standard_function13336_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_document_key_in_standard_function13336( FOLLOW_document_key_in_standard_function13336_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_content_key_in_standard_function13338_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_content_key_in_standard_function13338( FOLLOW_content_key_in_standard_function13338_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13357_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13357( FOLLOW_concatenation_wrapper_in_standard_function13357_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_standard_function13360_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_standard_function13360( FOLLOW_as_key_in_standard_function13360_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_standard_function13363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_standard_function13363( FOLLOW_type_spec_in_standard_function13363_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlserialize_param_enconding_part_in_standard_function13383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlserialize_param_enconding_part_in_standard_function13383( FOLLOW_xmlserialize_param_enconding_part_in_standard_function13383_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlserialize_param_version_part_in_standard_function13402_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlserialize_param_version_part_in_standard_function13402( FOLLOW_xmlserialize_param_version_part_in_standard_function13402_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlserialize_param_ident_part_in_standard_function13421_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlserialize_param_ident_part_in_standard_function13421( FOLLOW_xmlserialize_param_ident_part_in_standard_function13421_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_hide_key_in_standard_function13442_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_hide_key_in_standard_function13442( FOLLOW_hide_key_in_standard_function13442_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_show_key_in_standard_function13444_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_show_key_in_standard_function13444( FOLLOW_show_key_in_standard_function13444_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_defaults_key_in_standard_function13447_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_defaults_key_in_standard_function13447( FOLLOW_defaults_key_in_standard_function13447_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13463_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13463( FOLLOW_RIGHT_PAREN_in_standard_function13463_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13478_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13478( FOLLOW_PERIOD_in_standard_function13478_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13480_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13480( FOLLOW_general_element_part_in_standard_function13480_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmltable_key_in_standard_function13493_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmltable_key_in_standard_function13493( FOLLOW_xmltable_key_in_standard_function13493_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_standard_function13508_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_standard_function13508( FOLLOW_LEFT_PAREN_in_standard_function13508_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_namespaces_clause_in_standard_function13526_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_namespaces_clause_in_standard_function13526( FOLLOW_xml_namespaces_clause_in_standard_function13526_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_standard_function13545_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_standard_function13545( FOLLOW_concatenation_wrapper_in_standard_function13545_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_passing_clause_in_standard_function13563_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_passing_clause_in_standard_function13563( FOLLOW_xml_passing_clause_in_standard_function13563_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_columns_key_in_standard_function13583_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_columns_key_in_standard_function13583( FOLLOW_columns_key_in_standard_function13583_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_table_column_in_standard_function13586_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_table_column_in_standard_function13586( FOLLOW_xml_table_column_in_standard_function13586_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_standard_function13589_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_standard_function13589( FOLLOW_COMMA_in_standard_function13589_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_table_column_in_standard_function13592_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_table_column_in_standard_function13592( FOLLOW_xml_table_column_in_standard_function13592_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_standard_function13609_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_standard_function13609( FOLLOW_RIGHT_PAREN_in_standard_function13609_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_standard_function13624_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_standard_function13624( FOLLOW_PERIOD_in_standard_function13624_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_part_in_standard_function13626_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_part_in_standard_function13626( FOLLOW_general_element_part_in_standard_function13626_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_stantard_function_enabling_over13651_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_stantard_function_enabling_over13651( FOLLOW_REGULAR_ID_in_stantard_function_enabling_over13651_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_stantard_function_enabling_using13679_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_stantard_function_enabling_using13679( FOLLOW_REGULAR_ID_in_stantard_function_enabling_using13679_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over13707_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over13707( FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over13707_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_stantard_function_pedictions13735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_stantard_function_pedictions13735( FOLLOW_REGULAR_ID_in_stantard_function_pedictions13735_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_key_in_over_clause13760_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_key_in_over_clause13760( FOLLOW_over_key_in_over_clause13760_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_over_clause13771_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_over_clause13771( FOLLOW_LEFT_PAREN_in_over_clause13771_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_query_partition_clause_in_over_clause13785_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_query_partition_clause_in_over_clause13785( FOLLOW_query_partition_clause_in_over_clause13785_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_over_clause13801_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_over_clause13801( FOLLOW_order_by_clause_in_over_clause13801_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_clause_in_over_clause13803_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_clause_in_over_clause13803( FOLLOW_windowing_clause_in_over_clause13803_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_over_clause13816_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_over_clause13816( FOLLOW_RIGHT_PAREN_in_over_clause13816_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_type_in_windowing_clause13844_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040102000612A289), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_type_in_windowing_clause13844( FOLLOW_windowing_type_in_windowing_clause13844_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_between_key_in_windowing_clause13855_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040102000612A209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_between_key_in_windowing_clause13855( FOLLOW_between_key_in_windowing_clause13855_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_elements_in_windowing_clause13857_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_elements_in_windowing_clause13857( FOLLOW_windowing_elements_in_windowing_clause13857_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_and_key_in_windowing_clause13859_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040102000612A209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_and_key_in_windowing_clause13859( FOLLOW_and_key_in_windowing_clause13859_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_elements_in_windowing_clause13861_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_elements_in_windowing_clause13861( FOLLOW_windowing_elements_in_windowing_clause13861_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_windowing_elements_in_windowing_clause13874_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_windowing_elements_in_windowing_clause13874( FOLLOW_windowing_elements_in_windowing_clause13874_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rows_key_in_windowing_type13933_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rows_key_in_windowing_type13933( FOLLOW_rows_key_in_windowing_type13933_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_range_key_in_windowing_type13944_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_range_key_in_windowing_type13944( FOLLOW_range_key_in_windowing_type13944_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unbounded_key_in_windowing_elements13964_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unbounded_key_in_windowing_elements13964( FOLLOW_unbounded_key_in_windowing_elements13964_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_preceding_key_in_windowing_elements13967_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_preceding_key_in_windowing_elements13967( FOLLOW_preceding_key_in_windowing_elements13967_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_current_key_in_windowing_elements13978_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_current_key_in_windowing_elements13978( FOLLOW_current_key_in_windowing_elements13978_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_row_key_in_windowing_elements13981_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_row_key_in_windowing_elements13981( FOLLOW_row_key_in_windowing_elements13981_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_windowing_elements13992_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_windowing_elements13992( FOLLOW_concatenation_wrapper_in_windowing_elements13992_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_preceding_key_in_windowing_elements13995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_preceding_key_in_windowing_elements13995( FOLLOW_preceding_key_in_windowing_elements13995_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_following_key_in_windowing_elements13998_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_following_key_in_windowing_elements13998( FOLLOW_following_key_in_windowing_elements13998_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_key_in_using_clause14020_bits[]	= { ANTLR_UINT64_LIT(0x0180000400082000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103040612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_key_in_using_clause14020( FOLLOW_using_key_in_using_clause14020_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_using_clause14032_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_using_clause14032( FOLLOW_ASTERISK_in_using_clause14032_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_element_in_using_clause14043_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_element_in_using_clause14043( FOLLOW_using_element_in_using_clause14043_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_using_clause14046_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103040612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_using_clause14046( FOLLOW_COMMA_in_using_clause14046_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_using_element_in_using_clause14049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_using_element_in_using_clause14049( FOLLOW_using_element_in_using_clause14049_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_in_key_in_using_element14078_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_in_key_in_using_element14078( FOLLOW_in_key_in_using_element14078_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_out_key_in_using_element14080_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_out_key_in_using_element14080( FOLLOW_out_key_in_using_element14080_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_out_key_in_using_element14083_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_out_key_in_using_element14083( FOLLOW_out_key_in_using_element14083_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_list_elements_in_using_element14087_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_list_elements_in_using_element14087( FOLLOW_select_list_elements_in_using_element14087_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_using_element14089_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_using_element14089( FOLLOW_column_alias_in_using_element14089_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_key_in_collect_order_by_part14135_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_key_in_collect_order_by_part14135( FOLLOW_order_key_in_collect_order_by_part14135_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_collect_order_by_part14138_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_collect_order_by_part14138( FOLLOW_by_key_in_collect_order_by_part14138_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_collect_order_by_part14141_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_collect_order_by_part14141( FOLLOW_concatenation_wrapper_in_collect_order_by_part14141_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_within_key_in_within_or_over_part14161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000100000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_within_key_in_within_or_over_part14161( FOLLOW_within_key_in_within_or_over_part14161_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_key_in_within_or_over_part14164_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_key_in_within_or_over_part14164( FOLLOW_group_key_in_within_or_over_part14164_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_within_or_over_part14167_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000400000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_within_or_over_part14167( FOLLOW_LEFT_PAREN_in_within_or_over_part14167_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_by_clause_in_within_or_over_part14169_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_by_clause_in_within_or_over_part14169( FOLLOW_order_by_clause_in_within_or_over_part14169_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_within_or_over_part14171_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_within_or_over_part14171( FOLLOW_RIGHT_PAREN_in_within_or_over_part14171_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_over_clause_in_within_or_over_part14182_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_over_clause_in_within_or_over_part14182( FOLLOW_over_clause_in_within_or_over_part14182_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cost_key_in_cost_matrix_clause14202_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cost_key_in_cost_matrix_clause14202( FOLLOW_cost_key_in_cost_matrix_clause14202_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_model_key_in_cost_matrix_clause14214_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_model_key_in_cost_matrix_clause14214( FOLLOW_model_key_in_cost_matrix_clause14214_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_auto_key_in_cost_matrix_clause14216_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_auto_key_in_cost_matrix_clause14216( FOLLOW_auto_key_in_cost_matrix_clause14216_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_cost_matrix_clause14228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_cost_matrix_clause14228( FOLLOW_LEFT_PAREN_in_cost_matrix_clause14228_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cost_class_name_in_cost_matrix_clause14230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cost_class_name_in_cost_matrix_clause14230( FOLLOW_cost_class_name_in_cost_matrix_clause14230_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_cost_matrix_clause14233_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_cost_matrix_clause14233( FOLLOW_COMMA_in_cost_matrix_clause14233_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cost_class_name_in_cost_matrix_clause14236_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cost_class_name_in_cost_matrix_clause14236( FOLLOW_cost_class_name_in_cost_matrix_clause14236_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14240_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x4000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14240( FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14240_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_values_key_in_cost_matrix_clause14242_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_values_key_in_cost_matrix_clause14242( FOLLOW_values_key_in_cost_matrix_clause14242_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_list_in_cost_matrix_clause14258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_list_in_cost_matrix_clause14258( FOLLOW_expression_list_in_cost_matrix_clause14258_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_passing_key_in_xml_passing_clause14284_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C309), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_passing_key_in_xml_passing_clause14284( FOLLOW_passing_key_in_xml_passing_clause14284_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_xml_passing_clause14288_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_xml_passing_clause14288( FOLLOW_by_key_in_xml_passing_clause14288_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_value_key_in_xml_passing_clause14291_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_value_key_in_xml_passing_clause14291( FOLLOW_value_key_in_xml_passing_clause14291_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_xml_passing_clause14307_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_xml_passing_clause14307( FOLLOW_expression_wrapper_in_xml_passing_clause14307_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_xml_passing_clause14309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_xml_passing_clause14309( FOLLOW_column_alias_in_xml_passing_clause14309_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_xml_passing_clause14313_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_xml_passing_clause14313( FOLLOW_COMMA_in_xml_passing_clause14313_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_xml_passing_clause14316_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000002), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_xml_passing_clause14316( FOLLOW_expression_wrapper_in_xml_passing_clause14316_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_xml_passing_clause14318_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_xml_passing_clause14318( FOLLOW_column_alias_in_xml_passing_clause14318_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlattributes_key_in_xml_attributes_clause14340_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlattributes_key_in_xml_attributes_clause14340( FOLLOW_xmlattributes_key_in_xml_attributes_clause14340_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_xml_attributes_clause14351_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_xml_attributes_clause14351( FOLLOW_LEFT_PAREN_in_xml_attributes_clause14351_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_entityescaping_key_in_xml_attributes_clause14366_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_entityescaping_key_in_xml_attributes_clause14366( FOLLOW_entityescaping_key_in_xml_attributes_clause14366_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_noentityescaping_key_in_xml_attributes_clause14368_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_noentityescaping_key_in_xml_attributes_clause14368( FOLLOW_noentityescaping_key_in_xml_attributes_clause14368_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_schemacheck_key_in_xml_attributes_clause14385_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_schemacheck_key_in_xml_attributes_clause14385( FOLLOW_schemacheck_key_in_xml_attributes_clause14385_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_noschemacheck_key_in_xml_attributes_clause14387_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_noschemacheck_key_in_xml_attributes_clause14387( FOLLOW_noschemacheck_key_in_xml_attributes_clause14387_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14403_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14403( FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14403_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_xml_attributes_clause14406_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_xml_attributes_clause14406( FOLLOW_COMMA_in_xml_attributes_clause14406_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14409_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14409( FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14409_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14421_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14421( FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14421_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14441_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14441( FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14441_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14452_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000012), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14452( FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14452_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14467_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14467( FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14467_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_xml_namespaces_clause14469_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_xml_namespaces_clause14469( FOLLOW_column_alias_in_xml_namespaces_clause14469_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_xml_namespaces_clause14490_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_xml_namespaces_clause14490( FOLLOW_COMMA_in_xml_namespaces_clause14490_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14493_bits[]	= { ANTLR_UINT64_LIT(0x0180000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14493( FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14493_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_column_alias_in_xml_namespaces_clause14495_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_column_alias_in_xml_namespaces_clause14495( FOLLOW_column_alias_in_xml_namespaces_clause14495_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_general_default_part_in_xml_namespaces_clause14517_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000800) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_general_default_part_in_xml_namespaces_clause14517( FOLLOW_xml_general_default_part_in_xml_namespaces_clause14517_bits, 7 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause14529_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause14529( FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause14529_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_column_name_in_xml_table_column14549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000010008000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_column_name_in_xml_table_column14549( FOLLOW_xml_column_name_in_xml_table_column14549_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_for_key_in_xml_table_column14560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_for_key_in_xml_table_column14560( FOLLOW_for_key_in_xml_table_column14560_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ordinality_key_in_xml_table_column14562_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ordinality_key_in_xml_table_column14562( FOLLOW_ordinality_key_in_xml_table_column14562_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_type_spec_in_xml_table_column14573_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_type_spec_in_xml_table_column14573( FOLLOW_type_spec_in_xml_table_column14573_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_path_key_in_xml_table_column14576_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_path_key_in_xml_table_column14576( FOLLOW_path_key_in_xml_table_column14576_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xml_table_column14578_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000020000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xml_table_column14578( FOLLOW_concatenation_wrapper_in_xml_table_column14578_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_xml_general_default_part_in_xml_table_column14588_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_xml_general_default_part_in_xml_table_column14588( FOLLOW_xml_general_default_part_in_xml_table_column14588_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_default_key_in_xml_general_default_part14644_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_default_key_in_xml_general_default_part14644( FOLLOW_default_key_in_xml_general_default_part14644_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xml_general_default_part14647_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xml_general_default_part14647( FOLLOW_concatenation_wrapper_in_xml_general_default_part14647_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_in_xml_multiuse_expression_element14675_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_in_xml_multiuse_expression_element14675( FOLLOW_expression_in_xml_multiuse_expression_element14675_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_as_key_in_xml_multiuse_expression_element14678_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0002000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_as_key_in_xml_multiuse_expression_element14678( FOLLOW_as_key_in_xml_multiuse_expression_element14678_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_id_expression_in_xml_multiuse_expression_element14681_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_id_expression_in_xml_multiuse_expression_element14681( FOLLOW_id_expression_in_xml_multiuse_expression_element14681_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_evalname_key_in_xml_multiuse_expression_element14686_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_evalname_key_in_xml_multiuse_expression_element14686( FOLLOW_evalname_key_in_xml_multiuse_expression_element14686_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_in_xml_multiuse_expression_element14688_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_in_xml_multiuse_expression_element14688( FOLLOW_concatenation_in_xml_multiuse_expression_element14688_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_version_key_in_xmlroot_param_version_part14799_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_version_key_in_xmlroot_param_version_part14799( FOLLOW_version_key_in_xmlroot_param_version_part14799_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_no_key_in_xmlroot_param_version_part14803_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_no_key_in_xmlroot_param_version_part14803( FOLLOW_no_key_in_xmlroot_param_version_part14803_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_value_key_in_xmlroot_param_version_part14805_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_value_key_in_xmlroot_param_version_part14805( FOLLOW_value_key_in_xmlroot_param_version_part14805_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_expression_wrapper_in_xmlroot_param_version_part14807_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_expression_wrapper_in_xmlroot_param_version_part14807( FOLLOW_expression_wrapper_in_xmlroot_param_version_part14807_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_standalone_key_in_xmlroot_param_standalone_part14828_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_standalone_key_in_xmlroot_param_standalone_part14828( FOLLOW_standalone_key_in_xmlroot_param_standalone_part14828_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_yes_key_in_xmlroot_param_standalone_part14832_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_yes_key_in_xmlroot_param_standalone_part14832( FOLLOW_yes_key_in_xmlroot_param_standalone_part14832_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_no_key_in_xmlroot_param_standalone_part14834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_no_key_in_xmlroot_param_standalone_part14834( FOLLOW_no_key_in_xmlroot_param_standalone_part14834_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_value_key_in_xmlroot_param_standalone_part14836_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_value_key_in_xmlroot_param_standalone_part14836( FOLLOW_value_key_in_xmlroot_param_standalone_part14836_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_encoding_key_in_xmlserialize_param_enconding_part14858_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_encoding_key_in_xmlserialize_param_enconding_part14858( FOLLOW_encoding_key_in_xmlserialize_param_enconding_part14858_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part14861_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part14861( FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part14861_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_version_key_in_xmlserialize_param_version_part14881_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_version_key_in_xmlserialize_param_version_part14881( FOLLOW_version_key_in_xmlserialize_param_version_part14881_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part14884_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part14884( FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part14884_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_no_key_in_xmlserialize_param_ident_part14904_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_no_key_in_xmlserialize_param_ident_part14904( FOLLOW_no_key_in_xmlserialize_param_ident_part14904_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_indent_key_in_xmlserialize_param_ident_part14906_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_indent_key_in_xmlserialize_param_ident_part14906( FOLLOW_indent_key_in_xmlserialize_param_ident_part14906_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_indent_key_in_xmlserialize_param_ident_part14917_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0020000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_indent_key_in_xmlserialize_param_ident_part14917( FOLLOW_indent_key_in_xmlserialize_param_ident_part14917_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_size_key_in_xmlserialize_param_ident_part14921_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_size_key_in_xmlserialize_param_ident_part14921( FOLLOW_size_key_in_xmlserialize_param_ident_part14921_bits, 3 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part14924_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part14924( FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part14924_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part14927_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part14927( FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part14927_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_order_key_in_synpred1_OracleDML1009_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_order_key_in_synpred1_OracleDML1009( FOLLOW_order_key_in_synpred1_OracleDML1009_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_siblings_key_in_synpred1_OracleDML1011_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_siblings_key_in_synpred1_OracleDML1011( FOLLOW_siblings_key_in_synpred1_OracleDML1011_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_by_key_in_synpred1_OracleDML1014_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_by_key_in_synpred1_OracleDML1014( FOLLOW_by_key_in_synpred1_OracleDML1014_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_distinct_key_in_synpred2_OracleDML1499_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_distinct_key_in_synpred2_OracleDML1499( FOLLOW_distinct_key_in_synpred2_OracleDML1499_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unique_key_in_synpred2_OracleDML1501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unique_key_in_synpred2_OracleDML1501( FOLLOW_unique_key_in_synpred2_OracleDML1501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_synpred2_OracleDML1503_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_synpred2_OracleDML1503( FOLLOW_all_key_in_synpred2_OracleDML1503_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_tableview_name_in_synpred3_OracleDML1816_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_tableview_name_in_synpred3_OracleDML1816( FOLLOW_tableview_name_in_synpred3_OracleDML1816_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_PERIOD_in_synpred3_OracleDML1818_bits[]	= { ANTLR_UINT64_LIT(0x0000000000080000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_PERIOD_in_synpred3_OracleDML1818( FOLLOW_PERIOD_in_synpred3_OracleDML1818_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_ASTERISK_in_synpred3_OracleDML1820_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_ASTERISK_in_synpred3_OracleDML1820( FOLLOW_ASTERISK_in_synpred3_OracleDML1820_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred4_OracleDML1977_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred4_OracleDML1977( FOLLOW_LEFT_PAREN_in_synpred4_OracleDML1977_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred4_OracleDML1980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred4_OracleDML1980( FOLLOW_select_key_in_synpred4_OracleDML1980_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred4_OracleDML1982_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred4_OracleDML1982( FOLLOW_with_key_in_synpred4_OracleDML1982_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred5_OracleDML2007_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred5_OracleDML2007( FOLLOW_LEFT_PAREN_in_synpred5_OracleDML2007_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_only_key_in_synpred6_OracleDML2038_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_only_key_in_synpred6_OracleDML2038( FOLLOW_only_key_in_synpred6_OracleDML2038_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred6_OracleDML2040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred6_OracleDML2040( FOLLOW_LEFT_PAREN_in_synpred6_OracleDML2040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred7_OracleDML2462_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred7_OracleDML2462( FOLLOW_LEFT_PAREN_in_synpred7_OracleDML2462_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred7_OracleDML2465_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred7_OracleDML2465( FOLLOW_select_key_in_synpred7_OracleDML2465_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred7_OracleDML2467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred7_OracleDML2467( FOLLOW_with_key_in_synpred7_OracleDML2467_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred8_OracleDML2489_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred8_OracleDML2489( FOLLOW_LEFT_PAREN_in_synpred8_OracleDML2489_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred9_OracleDML2960_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred9_OracleDML2960( FOLLOW_select_key_in_synpred9_OracleDML2960_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_synpred10_OracleDML2986_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_synpred10_OracleDML2986( FOLLOW_any_key_in_synpred10_OracleDML2986_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred11_OracleDML3191_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred11_OracleDML3191( FOLLOW_LEFT_PAREN_in_synpred11_OracleDML3191_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred12_OracleDML3564_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred12_OracleDML3564( FOLLOW_LEFT_PAREN_in_synpred12_OracleDML3564_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_key_in_synpred13_OracleDML3795_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_key_in_synpred13_OracleDML3795( FOLLOW_group_key_in_synpred13_OracleDML3795_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_synpred14_OracleDML3821_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_synpred14_OracleDML3821( FOLLOW_COMMA_in_synpred14_OracleDML3821_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_synpred14_OracleDML3823_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_synpred14_OracleDML3823( FOLLOW_group_by_elements_in_synpred14_OracleDML3823_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_having_key_in_synpred15_OracleDML3875_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_having_key_in_synpred15_OracleDML3875( FOLLOW_having_key_in_synpred15_OracleDML3875_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_synpred16_OracleDML3906_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x040103000612C209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_COMMA_in_synpred16_OracleDML3906( FOLLOW_COMMA_in_synpred16_OracleDML3906_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_group_by_elements_in_synpred16_OracleDML3908_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_group_by_elements_in_synpred16_OracleDML3908( FOLLOW_group_by_elements_in_synpred16_OracleDML3908_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_rollup_key_in_synpred17_OracleDML4127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_rollup_key_in_synpred17_OracleDML4127( FOLLOW_rollup_key_in_synpred17_OracleDML4127_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cube_key_in_synpred17_OracleDML4129_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cube_key_in_synpred17_OracleDML4129( FOLLOW_cube_key_in_synpred17_OracleDML4129_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred18_OracleDML4145_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred18_OracleDML4145( FOLLOW_LEFT_PAREN_in_synpred18_OracleDML4145_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_synpred19_OracleDML4812_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_synpred19_OracleDML4812( FOLLOW_all_key_in_synpred19_OracleDML4812_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_synpred20_OracleDML6179_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_synpred20_OracleDML6179( FOLLOW_when_key_in_synpred20_OracleDML6179_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_matched_key_in_synpred20_OracleDML6181_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_matched_key_in_synpred20_OracleDML6181( FOLLOW_matched_key_in_synpred20_OracleDML6181_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_synpred21_OracleDML6211_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000010000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_synpred21_OracleDML6211( FOLLOW_when_key_in_synpred21_OracleDML6211_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_not_key_in_synpred21_OracleDML6213_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x8000000000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_not_key_in_synpred21_OracleDML6213( FOLLOW_not_key_in_synpred21_OracleDML6213_bits, 6 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_matched_key_in_synpred21_OracleDML6215_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_matched_key_in_synpred21_OracleDML6215( FOLLOW_matched_key_in_synpred21_OracleDML6215_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred22_OracleDML7117_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred22_OracleDML7117( FOLLOW_LEFT_PAREN_in_synpred22_OracleDML7117_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unlimited_key_in_synpred23_OracleDML7208_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unlimited_key_in_synpred23_OracleDML7208( FOLLOW_unlimited_key_in_synpred23_OracleDML7208_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred24_OracleDML7366_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred24_OracleDML7366( FOLLOW_LEFT_PAREN_in_synpred24_OracleDML7366_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred24_OracleDML7369_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred24_OracleDML7369( FOLLOW_select_key_in_synpred24_OracleDML7369_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred24_OracleDML7373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred24_OracleDML7373( FOLLOW_with_key_in_synpred24_OracleDML7373_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_cursor_key_in_synpred25_OracleDML7816_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_cursor_key_in_synpred25_OracleDML7816( FOLLOW_cursor_key_in_synpred25_OracleDML7816_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred25_OracleDML7818_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred25_OracleDML7818( FOLLOW_LEFT_PAREN_in_synpred25_OracleDML7818_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred25_OracleDML7821_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred25_OracleDML7821( FOLLOW_select_key_in_synpred25_OracleDML7821_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred25_OracleDML7823_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred25_OracleDML7823( FOLLOW_with_key_in_synpred25_OracleDML7823_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred26_OracleDML9167_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred26_OracleDML9167( FOLLOW_LEFT_PAREN_in_synpred26_OracleDML9167_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred26_OracleDML9171_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred26_OracleDML9171( FOLLOW_select_key_in_synpred26_OracleDML9171_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred26_OracleDML9173_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred26_OracleDML9173( FOLLOW_with_key_in_synpred26_OracleDML9173_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_interval_expression_in_synpred27_OracleDML9614_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_interval_expression_in_synpred27_OracleDML9614( FOLLOW_interval_expression_in_synpred27_OracleDML9614_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_synpred28_OracleDML9854_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_synpred28_OracleDML9854( FOLLOW_any_key_in_synpred28_OracleDML9854_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_any_key_in_synpred29_OracleDML9869_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_any_key_in_synpred29_OracleDML9869( FOLLOW_any_key_in_synpred29_OracleDML9869_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred30_OracleDML10223_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred30_OracleDML10223( FOLLOW_select_key_in_synpred30_OracleDML10223_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred31_OracleDML10247_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred31_OracleDML10247( FOLLOW_LEFT_PAREN_in_synpred31_OracleDML10247_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_new_key_in_synpred36_OracleDML10457_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_new_key_in_synpred36_OracleDML10457( FOLLOW_new_key_in_synpred36_OracleDML10457_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_synpred36_OracleDML10460_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_synpred36_OracleDML10460( FOLLOW_unary_expression_in_synpred36_OracleDML10460_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_all_key_in_synpred38_OracleDML10485_bits[]	= { ANTLR_UINT64_LIT(0x0180000400002000), ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x0200000040000004), ANTLR_UINT64_LIT(0x0000000000000040), ANTLR_UINT64_LIT(0x80000004000000C0), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0401020006128209), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000004000000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_all_key_in_synpred38_OracleDML10485( FOLLOW_all_key_in_synpred38_OracleDML10485_bits, 10 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_unary_expression_in_synpred38_OracleDML10488_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_unary_expression_in_synpred38_OracleDML10488( FOLLOW_unary_expression_in_synpred38_OracleDML10488_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_statement_in_synpred39_OracleDML10501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_statement_in_synpred39_OracleDML10501( FOLLOW_case_statement_in_synpred39_OracleDML10501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_quantified_expression_in_synpred40_OracleDML10513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_quantified_expression_in_synpred40_OracleDML10513( FOLLOW_quantified_expression_in_synpred40_OracleDML10513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_standard_function_in_synpred41_OracleDML10524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_standard_function_in_synpred41_OracleDML10524( FOLLOW_standard_function_in_synpred41_OracleDML10524_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_label_name_in_synpred42_OracleDML10581_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_label_name_in_synpred42_OracleDML10581( FOLLOW_label_name_in_synpred42_OracleDML10581_bits, 8 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_case_key_in_synpred42_OracleDML10584_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000001) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_case_key_in_synpred42_OracleDML10584( FOLLOW_case_key_in_synpred42_OracleDML10584_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_when_key_in_synpred42_OracleDML10586_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_when_key_in_synpred42_OracleDML10586( FOLLOW_when_key_in_synpred42_OracleDML10586_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_table_element_in_synpred43_OracleDML10954_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_table_element_in_synpred43_OracleDML10954( FOLLOW_table_element_in_synpred43_OracleDML10954_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_outer_join_sign_in_synpred43_OracleDML10956_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_outer_join_sign_in_synpred43_OracleDML10956( FOLLOW_outer_join_sign_in_synpred43_OracleDML10956_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_constant_in_synpred45_OracleDML10985_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_constant_in_synpred45_OracleDML10985( FOLLOW_constant_in_synpred45_OracleDML10985_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_general_element_in_synpred46_OracleDML10996_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_general_element_in_synpred46_OracleDML10996( FOLLOW_general_element_in_synpred46_OracleDML10996_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred47_OracleDML11036_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred47_OracleDML11036( FOLLOW_select_key_in_synpred47_OracleDML11036_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred47_OracleDML11040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred47_OracleDML11040( FOLLOW_with_key_in_synpred47_OracleDML11040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred48_OracleDML11319_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred48_OracleDML11319( FOLLOW_LEFT_PAREN_in_synpred48_OracleDML11319_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred48_OracleDML11322_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred48_OracleDML11322( FOLLOW_select_key_in_synpred48_OracleDML11322_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred48_OracleDML11324_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred48_OracleDML11324( FOLLOW_with_key_in_synpred48_OracleDML11324_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_multiset_key_in_synpred49_OracleDML11641_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_multiset_key_in_synpred49_OracleDML11641( FOLLOW_multiset_key_in_synpred49_OracleDML11641_bits, 4 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_LEFT_PAREN_in_synpred49_OracleDML11643_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000040000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0010000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_LEFT_PAREN_in_synpred49_OracleDML11643( FOLLOW_LEFT_PAREN_in_synpred49_OracleDML11643_bits, 9 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_select_key_in_synpred49_OracleDML11647_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_select_key_in_synpred49_OracleDML11647( FOLLOW_select_key_in_synpred49_OracleDML11647_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_with_key_in_synpred49_OracleDML11649_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_with_key_in_synpred49_OracleDML11649( FOLLOW_with_key_in_synpred49_OracleDML11649_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_default_key_in_synpred50_OracleDML14513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_default_key_in_synpred50_OracleDML14513( FOLLOW_default_key_in_synpred50_OracleDML14513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: OracleDML  */
static	ANTLR_BITWORD FOLLOW_default_key_in_synpred51_OracleDML14584_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  OracleDMLImplTraits::BitsetListType FOLLOW_default_key_in_synpred51_OracleDML14584( FOLLOW_default_key_in_synpred51_OracleDML14584_bits, 1 );



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    174:70: ( nulls_key last_key )?
 */
static const ANTLR_INT32 dfa18_eot[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa18_eof[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa18_min[54] =
    {
	68, 113, -1, 68, -1, 113, 113, 113, 68, 68, 113, 68, 68, 113, 113, -1, 
	113, 113, 113, 113, 113, 113, 113, 68, 68, 113, 68, 68, 113, 68, 68, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 113, 68, 68, 113, 68, 68, 113, 
	113, 113, 113, 113, 113, 68, 68
    };
static const ANTLR_INT32 dfa18_max[54] =
    {
	383, 383, -1, 500, -1, 383, 383, 383, 467, 467, 383, 500, 500, 383, 383, 
	-1, 383, 383, 383, 383, 383, 383, 383, 500, 500, 383, 505, 505, 383, 452, 
	452, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 500, 500, 383, 505, 
	505, 383, 383, 383, 383, 383, 383, 505, 505
    };
static const ANTLR_INT32 dfa18_accept[54] =
    {
	-1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa18_special[54] =
    {
	47, 26, -1, 20, -1, 7, 8, 9, 33, 46, 2, 30, 45, 24, 16, -1, 10, 19, 42, 
	41, 32, 6, 4, 38, 35, 3, 15, 12, 39, 1, 0, 50, 28, 48, 29, 21, 11, 22, 
	43, 40, 36, 34, 31, 5, 14, 17, 44, 49, 27, 18, 37, 13, 25, 23
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa18_T_empty	 =   NULL;

static const ANTLR_INT32 dfa18_T0[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 15
    };

static const ANTLR_INT32 dfa18_T1[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	16
    };

static const ANTLR_INT32 dfa18_T2[] =
    {
	37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	36
    };

static const ANTLR_INT32 dfa18_T3[] =
    {
	34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	33
    };

static const ANTLR_INT32 dfa18_T4[] =
    {
	48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	47
    };

static const ANTLR_INT32 dfa18_T5[] =
    {
	32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	31
    };

static const ANTLR_INT32 dfa18_T6[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8
    };

static const ANTLR_INT32 dfa18_T7[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };

static const ANTLR_INT32 dfa18_T8[] =
    {
	14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	13
    };

static const ANTLR_INT32 dfa18_T9[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };

static const ANTLR_INT32 dfa18_T10[] =
    {
	27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	26
    };

static const ANTLR_INT32 dfa18_T11[] =
    {
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa18_T12[] =
    {
	30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	29
    };

static const ANTLR_INT32 dfa18_T13[] =
    {
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa18_T14[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8
    };

static const ANTLR_INT32 dfa18_T15[] =
    {
	53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	52
    };

static const ANTLR_INT32 dfa18_T16[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4
    };

static const ANTLR_INT32 dfa18_T17[] =
    {
	42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	41
    };

static const ANTLR_INT32 dfa18_T18[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3
    };

static const ANTLR_INT32 dfa18_T19[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15
    };

static const ANTLR_INT32 dfa18_T20[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15
    };

static const ANTLR_INT32 dfa18_T21[] =
    {
	30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	29
    };

static const ANTLR_INT32 dfa18_T22[] =
    {
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 4, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 15
    };

static const ANTLR_INT32 dfa18_T23[] =
    {
	40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	39
    };

static const ANTLR_INT32 dfa18_T24[] =
    {
	27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	26
    };

static const ANTLR_INT32 dfa18_T25[] =
    {
	24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	23
    };

static const ANTLR_INT32 dfa18_T26[] =
    {
	45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	44
    };

static const ANTLR_INT32 dfa18_T27[] =
    {
	51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	50
    };

static const ANTLR_INT32 dfa18_T28[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa18_transitions[] =
{
    dfa18_T28, dfa18_T18, NULL, dfa18_T16, NULL, dfa18_T6, dfa18_T7, dfa18_T8, 
    dfa18_T22, dfa18_T22, dfa18_T1, dfa18_T19, dfa18_T19, dfa18_T14, dfa18_T14, 
    NULL, dfa18_T9, dfa18_T9, dfa18_T25, dfa18_T24, dfa18_T21, dfa18_T5, 
    dfa18_T3, dfa18_T20, dfa18_T20, dfa18_T2, dfa18_T11, dfa18_T11, dfa18_T23, 
    dfa18_T0, dfa18_T0, dfa18_T14, dfa18_T14, dfa18_T9, dfa18_T9, dfa18_T17, 
    dfa18_T10, dfa18_T10, dfa18_T26, dfa18_T12, dfa18_T12, dfa18_T20, dfa18_T20, 
    dfa18_T4, dfa18_T13, dfa18_T13, dfa18_T27, dfa18_T10, dfa18_T10, dfa18_T15, 
    dfa18_T12, dfa18_T12, dfa18_T13, dfa18_T13
};


/* Declare tracking structure for Cyclic DFA 18
 */
class OracleDMLCyclicDFA18 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA18( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA18_30;

	    		    ANTLR_MARKER index18_30;


	    		    LA18_30 = ctx->LA(1);

	    		     
	    		        index18_30 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_30 == LEFT_PAREN || LA18_30 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_30 == COMMA || LA18_30 == PERIOD || LA18_30 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_30);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA18_29;

	    		    ANTLR_MARKER index18_29;


	    		    LA18_29 = ctx->LA(1);

	    		     
	    		        index18_29 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_29 == LEFT_PAREN || LA18_29 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_29 == COMMA || LA18_29 == PERIOD || LA18_29 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_29);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA18_10;

	    		    ANTLR_MARKER index18_10;


	    		    LA18_10 = ctx->LA(1);

	    		     
	    		        index18_10 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_10 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA18_10 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    			 
	    				ctx->seek(index18_10);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 3:

	    		{
	    		    ANTLR_UINT32 LA18_25;

	    		    ANTLR_MARKER index18_25;


	    		    LA18_25 = ctx->LA(1);

	    		     
	    		        index18_25 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_25 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 36;
	    		    }

	    		    else if ( (LA18_25 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 37;
	    		    }

	    			 
	    				ctx->seek(index18_25);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 4:

	    		{
	    		    ANTLR_UINT32 LA18_22;

	    		    ANTLR_MARKER index18_22;


	    		    LA18_22 = ctx->LA(1);

	    		     
	    		        index18_22 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_22 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    		    else if ( (LA18_22 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 34;
	    		    }

	    			 
	    				ctx->seek(index18_22);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 5:

	    		{
	    		    ANTLR_UINT32 LA18_43;

	    		    ANTLR_MARKER index18_43;


	    		    LA18_43 = ctx->LA(1);

	    		     
	    		        index18_43 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_43 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 47;
	    		    }

	    		    else if ( (LA18_43 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 48;
	    		    }

	    			 
	    				ctx->seek(index18_43);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 6:

	    		{
	    		    ANTLR_UINT32 LA18_21;

	    		    ANTLR_MARKER index18_21;


	    		    LA18_21 = ctx->LA(1);

	    		     
	    		        index18_21 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_21 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 31;
	    		    }

	    		    else if ( (LA18_21 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 32;
	    		    }

	    			 
	    				ctx->seek(index18_21);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 7:

	    		{
	    		    ANTLR_UINT32 LA18_5;

	    		    ANTLR_MARKER index18_5;


	    		    LA18_5 = ctx->LA(1);

	    		     
	    		        index18_5 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_5 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 7;
	    		    }

	    		    else if ( (LA18_5 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_5 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index18_5);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 8:

	    		{
	    		    ANTLR_UINT32 LA18_6;

	    		    ANTLR_MARKER index18_6;


	    		    LA18_6 = ctx->LA(1);

	    		     
	    		        index18_6 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_6 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA18_6 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_6 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index18_6);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 9:

	    		{
	    		    ANTLR_UINT32 LA18_7;

	    		    ANTLR_MARKER index18_7;


	    		    LA18_7 = ctx->LA(1);

	    		     
	    		        index18_7 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_7 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 13;
	    		    }

	    		    else if ( (LA18_7 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 14;
	    		    }

	    			 
	    				ctx->seek(index18_7);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 10:

	    		{
	    		    ANTLR_UINT32 LA18_16;

	    		    ANTLR_MARKER index18_16;


	    		    LA18_16 = ctx->LA(1);

	    		     
	    		        index18_16 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_16 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    		    else if ( (LA18_16 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_16 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index18_16);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 11:

	    		{
	    		    ANTLR_UINT32 LA18_36;

	    		    ANTLR_MARKER index18_36;


	    		    LA18_36 = ctx->LA(1);

	    		     
	    		        index18_36 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_36 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    		    else if ( (LA18_36 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_36 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    			 
	    				ctx->seek(index18_36);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 12:

	    		{
	    		    ANTLR_UINT32 LA18_27;

	    		    ANTLR_MARKER index18_27;


	    		    LA18_27 = ctx->LA(1);

	    		     
	    		        index18_27 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_27 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 38;
	    		    }

	    		    else if ( (LA18_27 == COMMA || LA18_27 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_27 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_27);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 13:

	    		{
	    		    ANTLR_UINT32 LA18_51;

	    		    ANTLR_MARKER index18_51;


	    		    LA18_51 = ctx->LA(1);

	    		     
	    		        index18_51 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_51 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_51 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    		    else if ( (LA18_51 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    			 
	    				ctx->seek(index18_51);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 14:

	    		{
	    		    ANTLR_UINT32 LA18_44;

	    		    ANTLR_MARKER index18_44;


	    		    LA18_44 = ctx->LA(1);

	    		     
	    		        index18_44 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_44 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA18_44 == COMMA || LA18_44 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_44 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_44);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 15:

	    		{
	    		    ANTLR_UINT32 LA18_26;

	    		    ANTLR_MARKER index18_26;


	    		    LA18_26 = ctx->LA(1);

	    		     
	    		        index18_26 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_26 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 38;
	    		    }

	    		    else if ( (LA18_26 == COMMA || LA18_26 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_26 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_26);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 16:

	    		{
	    		    ANTLR_UINT32 LA18_14;

	    		    ANTLR_MARKER index18_14;


	    		    LA18_14 = ctx->LA(1);

	    		     
	    		        index18_14 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_14 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    		    else if ( (LA18_14 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_14 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index18_14);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 17:

	    		{
	    		    ANTLR_UINT32 LA18_45;

	    		    ANTLR_MARKER index18_45;


	    		    LA18_45 = ctx->LA(1);

	    		     
	    		        index18_45 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_45 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA18_45 == COMMA || LA18_45 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_45 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_45);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 18:

	    		{
	    		    ANTLR_UINT32 LA18_49;

	    		    ANTLR_MARKER index18_49;


	    		    LA18_49 = ctx->LA(1);

	    		     
	    		        index18_49 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_49 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 52;
	    		    }

	    		    else if ( (LA18_49 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 53;
	    		    }

	    			 
	    				ctx->seek(index18_49);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 19:

	    		{
	    		    ANTLR_UINT32 LA18_17;

	    		    ANTLR_MARKER index18_17;


	    		    LA18_17 = ctx->LA(1);

	    		     
	    		        index18_17 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_17 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    		    else if ( (LA18_17 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_17 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index18_17);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 20:

	    		{
	    		    ANTLR_UINT32 LA18_3;

	    		    ANTLR_MARKER index18_3;


	    		    LA18_3 = ctx->LA(1);

	    		     
	    		        index18_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_3 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 5;
	    		    }

	    		    else if ( (LA18_3 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (LA18_3 == LEFT_PAREN || LA18_3 == PERIOD || LA18_3 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 21:

	    		{
	    		    ANTLR_UINT32 LA18_35;

	    		    ANTLR_MARKER index18_35;


	    		    LA18_35 = ctx->LA(1);

	    		     
	    		        index18_35 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_35 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 41;
	    		    }

	    		    else if ( (LA18_35 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 42;
	    		    }

	    			 
	    				ctx->seek(index18_35);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 22:

	    		{
	    		    ANTLR_UINT32 LA18_37;

	    		    ANTLR_MARKER index18_37;


	    		    LA18_37 = ctx->LA(1);

	    		     
	    		        index18_37 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_37 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    		    else if ( (LA18_37 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_37 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    			 
	    				ctx->seek(index18_37);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 23:

	    		{
	    		    ANTLR_UINT32 LA18_53;

	    		    ANTLR_MARKER index18_53;


	    		    LA18_53 = ctx->LA(1);

	    		     
	    		        index18_53 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_53 == COMMA || LA18_53 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_53 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA18_53 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_53);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 24:

	    		{
	    		    ANTLR_UINT32 LA18_13;

	    		    ANTLR_MARKER index18_13;


	    		    LA18_13 = ctx->LA(1);

	    		     
	    		        index18_13 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_13 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    		    else if ( (LA18_13 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_13 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index18_13);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 25:

	    		{
	    		    ANTLR_UINT32 LA18_52;

	    		    ANTLR_MARKER index18_52;


	    		    LA18_52 = ctx->LA(1);

	    		     
	    		        index18_52 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_52 == COMMA || LA18_52 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_52 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA18_52 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_52);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 26:

	    		{
	    		    ANTLR_UINT32 LA18_1;

	    		    ANTLR_MARKER index18_1;


	    		    LA18_1 = ctx->LA(1);

	    		     
	    		        index18_1 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA18_1 == DELIMITED_ID || LA18_1 == INTRODUCER) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_1);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 27:

	    		{
	    		    ANTLR_UINT32 LA18_48;

	    		    ANTLR_MARKER index18_48;


	    		    LA18_48 = ctx->LA(1);

	    		     
	    		        index18_48 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_48 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_48 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    		    else if ( (LA18_48 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    			 
	    				ctx->seek(index18_48);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 28:

	    		{
	    		    ANTLR_UINT32 LA18_32;

	    		    ANTLR_MARKER index18_32;


	    		    LA18_32 = ctx->LA(1);

	    		     
	    		        index18_32 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_32 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_32 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA18_32 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    			 
	    				ctx->seek(index18_32);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 29:

	    		{
	    		    ANTLR_UINT32 LA18_34;

	    		    ANTLR_MARKER index18_34;


	    		    LA18_34 = ctx->LA(1);

	    		     
	    		        index18_34 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_34 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_34 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA18_34 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    			 
	    				ctx->seek(index18_34);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 30:

	    		{
	    		    ANTLR_UINT32 LA18_11;

	    		    ANTLR_MARKER index18_11;


	    		    LA18_11 = ctx->LA(1);

	    		     
	    		        index18_11 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_11 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA18_11 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_11 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_11 == LEFT_PAREN || LA18_11 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    			 
	    				ctx->seek(index18_11);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 31:

	    		{
	    		    ANTLR_UINT32 LA18_42;

	    		    ANTLR_MARKER index18_42;


	    		    LA18_42 = ctx->LA(1);

	    		     
	    		        index18_42 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_42 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_42 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_42 == LEFT_PAREN || LA18_42 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_42 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    			 
	    				ctx->seek(index18_42);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 32:

	    		{
	    		    ANTLR_UINT32 LA18_20;

	    		    ANTLR_MARKER index18_20;


	    		    LA18_20 = ctx->LA(1);

	    		     
	    		        index18_20 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_20 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA18_20 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_20 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index18_20);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 33:

	    		{
	    		    ANTLR_UINT32 LA18_8;

	    		    ANTLR_MARKER index18_8;


	    		    LA18_8 = ctx->LA(1);

	    		     
	    		        index18_8 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_8 == COMMA || LA18_8 == PERIOD || LA18_8 == REGULAR_ID || LA18_8 == SQL92_RESERVED_ASC || LA18_8 == SQL92_RESERVED_DESC) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_8 == LEFT_PAREN || LA18_8 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_8);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 34:

	    		{
	    		    ANTLR_UINT32 LA18_41;

	    		    ANTLR_MARKER index18_41;


	    		    LA18_41 = ctx->LA(1);

	    		     
	    		        index18_41 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_41 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_41 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_41 == LEFT_PAREN || LA18_41 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_41 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    			 
	    				ctx->seek(index18_41);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 35:

	    		{
	    		    ANTLR_UINT32 LA18_24;

	    		    ANTLR_MARKER index18_24;


	    		    LA18_24 = ctx->LA(1);

	    		     
	    		        index18_24 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_24 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    		    else if ( (LA18_24 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_24 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_24 == LEFT_PAREN || LA18_24 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    			 
	    				ctx->seek(index18_24);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 36:

	    		{
	    		    ANTLR_UINT32 LA18_40;

	    		    ANTLR_MARKER index18_40;


	    		    LA18_40 = ctx->LA(1);

	    		     
	    		        index18_40 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_40 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    		    else if ( (LA18_40 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_40 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index18_40);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 37:

	    		{
	    		    ANTLR_UINT32 LA18_50;

	    		    ANTLR_MARKER index18_50;


	    		    LA18_50 = ctx->LA(1);

	    		     
	    		        index18_50 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_50 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_50 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    		    else if ( (LA18_50 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    			 
	    				ctx->seek(index18_50);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 38:

	    		{
	    		    ANTLR_UINT32 LA18_23;

	    		    ANTLR_MARKER index18_23;


	    		    LA18_23 = ctx->LA(1);

	    		     
	    		        index18_23 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_23 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    		    else if ( (LA18_23 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_23 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_23 == LEFT_PAREN || LA18_23 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    			 
	    				ctx->seek(index18_23);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 39:

	    		{
	    		    ANTLR_UINT32 LA18_28;

	    		    ANTLR_MARKER index18_28;


	    		    LA18_28 = ctx->LA(1);

	    		     
	    		        index18_28 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_28 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 39;
	    		    }

	    		    else if ( (LA18_28 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 40;
	    		    }

	    			 
	    				ctx->seek(index18_28);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 40:

	    		{
	    		    ANTLR_UINT32 LA18_39;

	    		    ANTLR_MARKER index18_39;


	    		    LA18_39 = ctx->LA(1);

	    		     
	    		        index18_39 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_39 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    		    else if ( (LA18_39 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA18_39 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index18_39);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 41:

	    		{
	    		    ANTLR_UINT32 LA18_19;

	    		    ANTLR_MARKER index18_19;


	    		    LA18_19 = ctx->LA(1);

	    		     
	    		        index18_19 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_19 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA18_19 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_19 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    			 
	    				ctx->seek(index18_19);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 42:

	    		{
	    		    ANTLR_UINT32 LA18_18;

	    		    ANTLR_MARKER index18_18;


	    		    LA18_18 = ctx->LA(1);

	    		     
	    		        index18_18 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_18 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 23;
	    		    }

	    		    else if ( (LA18_18 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 24;
	    		    }

	    			 
	    				ctx->seek(index18_18);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 43:

	    		{
	    		    ANTLR_UINT32 LA18_38;

	    		    ANTLR_MARKER index18_38;


	    		    LA18_38 = ctx->LA(1);

	    		     
	    		        index18_38 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_38 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 44;
	    		    }

	    		    else if ( (LA18_38 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 45;
	    		    }

	    			 
	    				ctx->seek(index18_38);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 44:

	    		{
	    		    ANTLR_UINT32 LA18_46;

	    		    ANTLR_MARKER index18_46;


	    		    LA18_46 = ctx->LA(1);

	    		     
	    		        index18_46 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_46 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 50;
	    		    }

	    		    else if ( (LA18_46 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 51;
	    		    }

	    			 
	    				ctx->seek(index18_46);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 45:

	    		{
	    		    ANTLR_UINT32 LA18_12;

	    		    ANTLR_MARKER index18_12;


	    		    LA18_12 = ctx->LA(1);

	    		     
	    		        index18_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_12 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA18_12 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA18_12 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    		    else if ( (LA18_12 == LEFT_PAREN || LA18_12 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    			 
	    				ctx->seek(index18_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 46:

	    		{
	    		    ANTLR_UINT32 LA18_9;

	    		    ANTLR_MARKER index18_9;


	    		    LA18_9 = ctx->LA(1);

	    		     
	    		        index18_9 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_9 == COMMA || LA18_9 == PERIOD || LA18_9 == REGULAR_ID || LA18_9 == SQL92_RESERVED_ASC || LA18_9 == SQL92_RESERVED_DESC) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA18_9 == LEFT_PAREN || LA18_9 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index18_9);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 47:

	    		{
	    		    ANTLR_UINT32 LA18_0;

	    		    ANTLR_MARKER index18_0;


	    		    LA18_0 = ctx->LA(1);

	    		     
	    		        index18_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 1;
	    		    }

	    		    else if ( (LA18_0 == COMMA)  )
	    		    {
	    		        s = 2;
	    		    }

	    			 
	    				ctx->seek(index18_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 48:

	    		{
	    		    ANTLR_UINT32 LA18_33;

	    		    ANTLR_MARKER index18_33;


	    		    LA18_33 = ctx->LA(1);

	    		     
	    		        index18_33 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_33 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA18_33 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA18_33 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    			 
	    				ctx->seek(index18_33);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 49:

	    		{
	    		    ANTLR_UINT32 LA18_47;

	    		    ANTLR_MARKER index18_47;


	    		    LA18_47 = ctx->LA(1);

	    		     
	    		        index18_47 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_47 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA18_47 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    		    else if ( (LA18_47 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    			 
	    				ctx->seek(index18_47);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 50:

	    		{
	    		    ANTLR_UINT32 LA18_31;

	    		    ANTLR_MARKER index18_31;


	    		    LA18_31 = ctx->LA(1);

	    		     
	    		        index18_31 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA18_31 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA18_31 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA18_31 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    			 
	    				ctx->seek(index18_31);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "174:70: ( nulls_key last_key )?" );
	    ex->set_decisionNum( 18 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA18  cdfa18(
	    18,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"174:70: ( nulls_key last_key )?",
	    dfa18_eot,	    /* EOT table			    */
	    dfa18_eof,	    /* EOF table			    */
	    dfa18_min,	    /* Minimum tokens for each state    */
	    dfa18_max,	    /* Maximum tokens for each state    */
	    dfa18_accept,	/* Accept table			    */
	    dfa18_special,	/* Special transition states	    */
	    dfa18_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 18
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    175:77: ( nulls_key last_key )?
 */
static const ANTLR_INT32 dfa22_eot[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa22_eof[54] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa22_min[54] =
    {
	68, 113, -1, 68, -1, 113, 113, 113, 68, 68, 113, 68, 68, 113, 113, 113, 
	113, 113, -1, 113, 113, 113, 68, 68, 113, 68, 68, 113, 68, 68, 113, 113, 
	113, 113, 113, 113, 113, 113, 113, 113, 113, 68, 68, 113, 68, 68, 113, 
	113, 113, 113, 113, 113, 68, 68
    };
static const ANTLR_INT32 dfa22_max[54] =
    {
	383, 383, -1, 500, -1, 383, 383, 383, 500, 500, 383, 467, 467, 383, 383, 
	383, 383, 383, -1, 383, 383, 383, 500, 500, 383, 505, 505, 383, 452, 452, 
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 383, 500, 500, 383, 505, 
	505, 383, 383, 383, 383, 383, 383, 505, 505
    };
static const ANTLR_INT32 dfa22_accept[54] =
    {
	-1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa22_special[54] =
    {
	1, 8, -1, 13, -1, 10, 9, 3, 31, 47, 11, 34, 46, 12, 22, 43, 42, 33, -1, 
	26, 19, 5, 39, 36, 4, 18, 15, 40, 2, 0, 7, 48, 29, 23, 14, 24, 44, 41, 
	37, 50, 30, 35, 32, 6, 17, 20, 45, 49, 28, 21, 38, 16, 27, 25
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa22_T_empty	 =   NULL;

static const ANTLR_INT32 dfa22_T0[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 18
    };

static const ANTLR_INT32 dfa22_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1
    };

static const ANTLR_INT32 dfa22_T2[] =
    {
	14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	13
    };

static const ANTLR_INT32 dfa22_T3[] =
    {
	35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	34
    };

static const ANTLR_INT32 dfa22_T4[] =
    {
	32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	31
    };

static const ANTLR_INT32 dfa22_T5[] =
    {
	48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	47
    };

static const ANTLR_INT32 dfa22_T6[] =
    {
	40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	39
    };

static const ANTLR_INT32 dfa22_T7[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3
    };

static const ANTLR_INT32 dfa22_T8[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };

static const ANTLR_INT32 dfa22_T9[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8
    };

static const ANTLR_INT32 dfa22_T10[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	19
    };

static const ANTLR_INT32 dfa22_T11[] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	8
    };

static const ANTLR_INT32 dfa22_T12[] =
    {
	6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4
    };

static const ANTLR_INT32 dfa22_T13[] =
    {
	26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	25
    };

static const ANTLR_INT32 dfa22_T14[] =
    {
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa22_T15[] =
    {
	29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	28
    };

static const ANTLR_INT32 dfa22_T16[] =
    {
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa22_T17[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };

static const ANTLR_INT32 dfa22_T18[] =
    {
	53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	52
    };

static const ANTLR_INT32 dfa22_T19[] =
    {
	42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	41
    };

static const ANTLR_INT32 dfa22_T20[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	18
    };

static const ANTLR_INT32 dfa22_T21[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	18
    };

static const ANTLR_INT32 dfa22_T22[] =
    {
	29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	28
    };

static const ANTLR_INT32 dfa22_T23[] =
    {
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 4, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 18
    };

static const ANTLR_INT32 dfa22_T24[] =
    {
	38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	37
    };

static const ANTLR_INT32 dfa22_T25[] =
    {
	26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	25
    };

static const ANTLR_INT32 dfa22_T26[] =
    {
	23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	22
    };

static const ANTLR_INT32 dfa22_T27[] =
    {
	45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	44
    };

static const ANTLR_INT32 dfa22_T28[] =
    {
	51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	50
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa22_transitions[] =
{
    dfa22_T1, dfa22_T7, NULL, dfa22_T12, NULL, dfa22_T9, dfa22_T8, dfa22_T2, 
    dfa22_T20, dfa22_T20, dfa22_T10, dfa22_T23, dfa22_T23, dfa22_T11, dfa22_T11, 
    dfa22_T26, dfa22_T25, dfa22_T22, NULL, dfa22_T17, dfa22_T17, dfa22_T4, 
    dfa22_T21, dfa22_T21, dfa22_T3, dfa22_T14, dfa22_T14, dfa22_T24, dfa22_T0, 
    dfa22_T0, dfa22_T6, dfa22_T11, dfa22_T11, dfa22_T19, dfa22_T13, dfa22_T13, 
    dfa22_T27, dfa22_T15, dfa22_T15, dfa22_T17, dfa22_T17, dfa22_T21, dfa22_T21, 
    dfa22_T5, dfa22_T16, dfa22_T16, dfa22_T28, dfa22_T13, dfa22_T13, dfa22_T18, 
    dfa22_T15, dfa22_T15, dfa22_T16, dfa22_T16
};


/* Declare tracking structure for Cyclic DFA 22
 */
class OracleDMLCyclicDFA22 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA22( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA22_29;

	    		    ANTLR_MARKER index22_29;


	    		    LA22_29 = ctx->LA(1);

	    		     
	    		        index22_29 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_29 == LEFT_PAREN || LA22_29 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_29 == COMMA || LA22_29 == PERIOD || LA22_29 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_29);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA22_0;

	    		    ANTLR_MARKER index22_0;


	    		    LA22_0 = ctx->LA(1);

	    		     
	    		        index22_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 1;
	    		    }

	    		    else if ( (LA22_0 == COMMA)  )
	    		    {
	    		        s = 2;
	    		    }

	    			 
	    				ctx->seek(index22_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA22_28;

	    		    ANTLR_MARKER index22_28;


	    		    LA22_28 = ctx->LA(1);

	    		     
	    		        index22_28 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_28 == LEFT_PAREN || LA22_28 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_28 == COMMA || LA22_28 == PERIOD || LA22_28 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_28);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 3:

	    		{
	    		    ANTLR_UINT32 LA22_7;

	    		    ANTLR_MARKER index22_7;


	    		    LA22_7 = ctx->LA(1);

	    		     
	    		        index22_7 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_7 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 13;
	    		    }

	    		    else if ( (LA22_7 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 14;
	    		    }

	    			 
	    				ctx->seek(index22_7);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 4:

	    		{
	    		    ANTLR_UINT32 LA22_24;

	    		    ANTLR_MARKER index22_24;


	    		    LA22_24 = ctx->LA(1);

	    		     
	    		        index22_24 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_24 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 34;
	    		    }

	    		    else if ( (LA22_24 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 35;
	    		    }

	    			 
	    				ctx->seek(index22_24);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 5:

	    		{
	    		    ANTLR_UINT32 LA22_21;

	    		    ANTLR_MARKER index22_21;


	    		    LA22_21 = ctx->LA(1);

	    		     
	    		        index22_21 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_21 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 31;
	    		    }

	    		    else if ( (LA22_21 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 32;
	    		    }

	    			 
	    				ctx->seek(index22_21);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 6:

	    		{
	    		    ANTLR_UINT32 LA22_43;

	    		    ANTLR_MARKER index22_43;


	    		    LA22_43 = ctx->LA(1);

	    		     
	    		        index22_43 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_43 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 47;
	    		    }

	    		    else if ( (LA22_43 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 48;
	    		    }

	    			 
	    				ctx->seek(index22_43);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 7:

	    		{
	    		    ANTLR_UINT32 LA22_30;

	    		    ANTLR_MARKER index22_30;


	    		    LA22_30 = ctx->LA(1);

	    		     
	    		        index22_30 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_30 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 39;
	    		    }

	    		    else if ( (LA22_30 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 40;
	    		    }

	    			 
	    				ctx->seek(index22_30);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 8:

	    		{
	    		    ANTLR_UINT32 LA22_1;

	    		    ANTLR_MARKER index22_1;


	    		    LA22_1 = ctx->LA(1);

	    		     
	    		        index22_1 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA22_1 == DELIMITED_ID || LA22_1 == INTRODUCER) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_1);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 9:

	    		{
	    		    ANTLR_UINT32 LA22_6;

	    		    ANTLR_MARKER index22_6;


	    		    LA22_6 = ctx->LA(1);

	    		     
	    		        index22_6 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_6 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA22_6 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_6 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index22_6);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 10:

	    		{
	    		    ANTLR_UINT32 LA22_5;

	    		    ANTLR_MARKER index22_5;


	    		    LA22_5 = ctx->LA(1);

	    		     
	    		        index22_5 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_5 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 7;
	    		    }

	    		    else if ( (LA22_5 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_5 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index22_5);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 11:

	    		{
	    		    ANTLR_UINT32 LA22_10;

	    		    ANTLR_MARKER index22_10;


	    		    LA22_10 = ctx->LA(1);

	    		     
	    		        index22_10 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_10 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 19;
	    		    }

	    		    else if ( (LA22_10 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 20;
	    		    }

	    			 
	    				ctx->seek(index22_10);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 12:

	    		{
	    		    ANTLR_UINT32 LA22_13;

	    		    ANTLR_MARKER index22_13;


	    		    LA22_13 = ctx->LA(1);

	    		     
	    		        index22_13 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_13 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    		    else if ( (LA22_13 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_13 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index22_13);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 13:

	    		{
	    		    ANTLR_UINT32 LA22_3;

	    		    ANTLR_MARKER index22_3;


	    		    LA22_3 = ctx->LA(1);

	    		     
	    		        index22_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_3 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 5;
	    		    }

	    		    else if ( (LA22_3 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (LA22_3 == LEFT_PAREN || LA22_3 == PERIOD || LA22_3 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 14:

	    		{
	    		    ANTLR_UINT32 LA22_34;

	    		    ANTLR_MARKER index22_34;


	    		    LA22_34 = ctx->LA(1);

	    		     
	    		        index22_34 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_34 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    		    else if ( (LA22_34 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_34 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    			 
	    				ctx->seek(index22_34);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 15:

	    		{
	    		    ANTLR_UINT32 LA22_26;

	    		    ANTLR_MARKER index22_26;


	    		    LA22_26 = ctx->LA(1);

	    		     
	    		        index22_26 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_26 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 36;
	    		    }

	    		    else if ( (LA22_26 == COMMA || LA22_26 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_26 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_26);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 16:

	    		{
	    		    ANTLR_UINT32 LA22_51;

	    		    ANTLR_MARKER index22_51;


	    		    LA22_51 = ctx->LA(1);

	    		     
	    		        index22_51 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_51 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_51 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA22_51 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    			 
	    				ctx->seek(index22_51);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 17:

	    		{
	    		    ANTLR_UINT32 LA22_44;

	    		    ANTLR_MARKER index22_44;


	    		    LA22_44 = ctx->LA(1);

	    		     
	    		        index22_44 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_44 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA22_44 == COMMA || LA22_44 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_44 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_44);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 18:

	    		{
	    		    ANTLR_UINT32 LA22_25;

	    		    ANTLR_MARKER index22_25;


	    		    LA22_25 = ctx->LA(1);

	    		     
	    		        index22_25 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_25 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 36;
	    		    }

	    		    else if ( (LA22_25 == COMMA || LA22_25 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_25 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_25);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 19:

	    		{
	    		    ANTLR_UINT32 LA22_20;

	    		    ANTLR_MARKER index22_20;


	    		    LA22_20 = ctx->LA(1);

	    		     
	    		        index22_20 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_20 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    		    else if ( (LA22_20 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_20 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index22_20);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 20:

	    		{
	    		    ANTLR_UINT32 LA22_45;

	    		    ANTLR_MARKER index22_45;


	    		    LA22_45 = ctx->LA(1);

	    		     
	    		        index22_45 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_45 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA22_45 == COMMA || LA22_45 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_45 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_45);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 21:

	    		{
	    		    ANTLR_UINT32 LA22_49;

	    		    ANTLR_MARKER index22_49;


	    		    LA22_49 = ctx->LA(1);

	    		     
	    		        index22_49 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_49 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 52;
	    		    }

	    		    else if ( (LA22_49 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 53;
	    		    }

	    			 
	    				ctx->seek(index22_49);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 22:

	    		{
	    		    ANTLR_UINT32 LA22_14;

	    		    ANTLR_MARKER index22_14;


	    		    LA22_14 = ctx->LA(1);

	    		     
	    		        index22_14 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_14 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    		    else if ( (LA22_14 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_14 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index22_14);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 23:

	    		{
	    		    ANTLR_UINT32 LA22_33;

	    		    ANTLR_MARKER index22_33;


	    		    LA22_33 = ctx->LA(1);

	    		     
	    		        index22_33 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_33 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 41;
	    		    }

	    		    else if ( (LA22_33 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 42;
	    		    }

	    			 
	    				ctx->seek(index22_33);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 24:

	    		{
	    		    ANTLR_UINT32 LA22_35;

	    		    ANTLR_MARKER index22_35;


	    		    LA22_35 = ctx->LA(1);

	    		     
	    		        index22_35 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_35 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    		    else if ( (LA22_35 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_35 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    			 
	    				ctx->seek(index22_35);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 25:

	    		{
	    		    ANTLR_UINT32 LA22_53;

	    		    ANTLR_MARKER index22_53;


	    		    LA22_53 = ctx->LA(1);

	    		     
	    		        index22_53 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_53 == COMMA || LA22_53 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_53 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA22_53 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_53);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 26:

	    		{
	    		    ANTLR_UINT32 LA22_19;

	    		    ANTLR_MARKER index22_19;


	    		    LA22_19 = ctx->LA(1);

	    		     
	    		        index22_19 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_19 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    		    else if ( (LA22_19 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_19 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index22_19);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 27:

	    		{
	    		    ANTLR_UINT32 LA22_52;

	    		    ANTLR_MARKER index22_52;


	    		    LA22_52 = ctx->LA(1);

	    		     
	    		        index22_52 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_52 == COMMA || LA22_52 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_52 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 49;
	    		    }

	    		    else if ( (LA22_52 == SQL92_RESERVED_TO) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_52);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 28:

	    		{
	    		    ANTLR_UINT32 LA22_48;

	    		    ANTLR_MARKER index22_48;


	    		    LA22_48 = ctx->LA(1);

	    		     
	    		        index22_48 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_48 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_48 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA22_48 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    			 
	    				ctx->seek(index22_48);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 29:

	    		{
	    		    ANTLR_UINT32 LA22_32;

	    		    ANTLR_MARKER index22_32;


	    		    LA22_32 = ctx->LA(1);

	    		     
	    		        index22_32 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_32 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_32 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA22_32 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    			 
	    				ctx->seek(index22_32);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 30:

	    		{
	    		    ANTLR_UINT32 LA22_40;

	    		    ANTLR_MARKER index22_40;


	    		    LA22_40 = ctx->LA(1);

	    		     
	    		        index22_40 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_40 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_40 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA22_40 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index22_40);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 31:

	    		{
	    		    ANTLR_UINT32 LA22_8;

	    		    ANTLR_MARKER index22_8;


	    		    LA22_8 = ctx->LA(1);

	    		     
	    		        index22_8 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_8 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA22_8 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_8 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_8 == LEFT_PAREN || LA22_8 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    			 
	    				ctx->seek(index22_8);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 32:

	    		{
	    		    ANTLR_UINT32 LA22_42;

	    		    ANTLR_MARKER index22_42;


	    		    LA22_42 = ctx->LA(1);

	    		     
	    		        index22_42 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_42 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_42 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_42 == LEFT_PAREN || LA22_42 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_42 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    			 
	    				ctx->seek(index22_42);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 33:

	    		{
	    		    ANTLR_UINT32 LA22_17;

	    		    ANTLR_MARKER index22_17;


	    		    LA22_17 = ctx->LA(1);

	    		     
	    		        index22_17 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_17 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 27;
	    		    }

	    		    else if ( (LA22_17 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_17 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    			 
	    				ctx->seek(index22_17);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 34:

	    		{
	    		    ANTLR_UINT32 LA22_11;

	    		    ANTLR_MARKER index22_11;


	    		    LA22_11 = ctx->LA(1);

	    		     
	    		        index22_11 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_11 == COMMA || LA22_11 == PERIOD || LA22_11 == REGULAR_ID || LA22_11 == SQL92_RESERVED_ASC || LA22_11 == SQL92_RESERVED_DESC) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_11 == LEFT_PAREN || LA22_11 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_11);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 35:

	    		{
	    		    ANTLR_UINT32 LA22_41;

	    		    ANTLR_MARKER index22_41;


	    		    LA22_41 = ctx->LA(1);

	    		     
	    		        index22_41 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_41 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_41 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_41 == LEFT_PAREN || LA22_41 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_41 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    			 
	    				ctx->seek(index22_41);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 36:

	    		{
	    		    ANTLR_UINT32 LA22_23;

	    		    ANTLR_MARKER index22_23;


	    		    LA22_23 = ctx->LA(1);

	    		     
	    		        index22_23 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_23 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    		    else if ( (LA22_23 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_23 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_23 == LEFT_PAREN || LA22_23 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    			 
	    				ctx->seek(index22_23);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 37:

	    		{
	    		    ANTLR_UINT32 LA22_38;

	    		    ANTLR_MARKER index22_38;


	    		    LA22_38 = ctx->LA(1);

	    		     
	    		        index22_38 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_38 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    		    else if ( (LA22_38 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_38 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    			 
	    				ctx->seek(index22_38);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 38:

	    		{
	    		    ANTLR_UINT32 LA22_50;

	    		    ANTLR_MARKER index22_50;


	    		    LA22_50 = ctx->LA(1);

	    		     
	    		        index22_50 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_50 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_50 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    		    else if ( (LA22_50 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    			 
	    				ctx->seek(index22_50);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 39:

	    		{
	    		    ANTLR_UINT32 LA22_22;

	    		    ANTLR_MARKER index22_22;


	    		    LA22_22 = ctx->LA(1);

	    		     
	    		        index22_22 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_22 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 33;
	    		    }

	    		    else if ( (LA22_22 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_22 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_22 == LEFT_PAREN || LA22_22 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    			 
	    				ctx->seek(index22_22);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 40:

	    		{
	    		    ANTLR_UINT32 LA22_27;

	    		    ANTLR_MARKER index22_27;


	    		    LA22_27 = ctx->LA(1);

	    		     
	    		        index22_27 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_27 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 37;
	    		    }

	    		    else if ( (LA22_27 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 38;
	    		    }

	    			 
	    				ctx->seek(index22_27);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 41:

	    		{
	    		    ANTLR_UINT32 LA22_37;

	    		    ANTLR_MARKER index22_37;


	    		    LA22_37 = ctx->LA(1);

	    		     
	    		        index22_37 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_37 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 46;
	    		    }

	    		    else if ( (LA22_37 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 28;
	    		    }

	    		    else if ( (LA22_37 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 29;
	    		    }

	    			 
	    				ctx->seek(index22_37);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 42:

	    		{
	    		    ANTLR_UINT32 LA22_16;

	    		    ANTLR_MARKER index22_16;


	    		    LA22_16 = ctx->LA(1);

	    		     
	    		        index22_16 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_16 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 24;
	    		    }

	    		    else if ( (LA22_16 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_16 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    			 
	    				ctx->seek(index22_16);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 43:

	    		{
	    		    ANTLR_UINT32 LA22_15;

	    		    ANTLR_MARKER index22_15;


	    		    LA22_15 = ctx->LA(1);

	    		     
	    		        index22_15 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_15 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 22;
	    		    }

	    		    else if ( (LA22_15 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 23;
	    		    }

	    			 
	    				ctx->seek(index22_15);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 44:

	    		{
	    		    ANTLR_UINT32 LA22_36;

	    		    ANTLR_MARKER index22_36;


	    		    LA22_36 = ctx->LA(1);

	    		     
	    		        index22_36 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_36 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 44;
	    		    }

	    		    else if ( (LA22_36 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 45;
	    		    }

	    			 
	    				ctx->seek(index22_36);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 45:

	    		{
	    		    ANTLR_UINT32 LA22_46;

	    		    ANTLR_MARKER index22_46;


	    		    LA22_46 = ctx->LA(1);

	    		     
	    		        index22_46 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_46 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 50;
	    		    }

	    		    else if ( (LA22_46 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 51;
	    		    }

	    			 
	    				ctx->seek(index22_46);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 46:

	    		{
	    		    ANTLR_UINT32 LA22_12;

	    		    ANTLR_MARKER index22_12;


	    		    LA22_12 = ctx->LA(1);

	    		     
	    		        index22_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_12 == COMMA || LA22_12 == PERIOD || LA22_12 == REGULAR_ID || LA22_12 == SQL92_RESERVED_ASC || LA22_12 == SQL92_RESERVED_DESC) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    		    else if ( (LA22_12 == LEFT_PAREN || LA22_12 == SQL92_RESERVED_AS) && ((toUpper(LT(1)->getText()) == "SET")) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index22_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 47:

	    		{
	    		    ANTLR_UINT32 LA22_9;

	    		    ANTLR_MARKER index22_9;


	    		    LA22_9 = ctx->LA(1);

	    		     
	    		        index22_9 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_9 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 15;
	    		    }

	    		    else if ( (LA22_9 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 16;
	    		    }

	    		    else if ( (LA22_9 == COMMA) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 17;
	    		    }

	    		    else if ( (LA22_9 == LEFT_PAREN || LA22_9 == SQL92_RESERVED_SELECT) && ((toUpper(LT(1)->getText()) == "NULLS")) )
	    		    {
	    		        s = 18;
	    		    }

	    			 
	    				ctx->seek(index22_9);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 48:

	    		{
	    		    ANTLR_UINT32 LA22_31;

	    		    ANTLR_MARKER index22_31;


	    		    LA22_31 = ctx->LA(1);

	    		     
	    		        index22_31 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_31 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA22_31 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA22_31 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 21;
	    		    }

	    			 
	    				ctx->seek(index22_31);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 49:

	    		{
	    		    ANTLR_UINT32 LA22_47;

	    		    ANTLR_MARKER index22_47;


	    		    LA22_47 = ctx->LA(1);

	    		     
	    		        index22_47 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_47 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 25;
	    		    }

	    		    else if ( (LA22_47 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 26;
	    		    }

	    		    else if ( (LA22_47 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 43;
	    		    }

	    			 
	    				ctx->seek(index22_47);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 50:

	    		{
	    		    ANTLR_UINT32 LA22_39;

	    		    ANTLR_MARKER index22_39;


	    		    LA22_39 = ctx->LA(1);

	    		     
	    		        index22_39 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA22_39 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA22_39 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA22_39 == PERIOD) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))) )
	    		    {
	    		        s = 30;
	    		    }

	    			 
	    				ctx->seek(index22_39);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "175:77: ( nulls_key last_key )?" );
	    ex->set_decisionNum( 22 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA22  cdfa22(
	    22,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"175:77: ( nulls_key last_key )?",
	    dfa22_eot,	    /* EOT table			    */
	    dfa22_eof,	    /* EOF table			    */
	    dfa22_min,	    /* Minimum tokens for each state    */
	    dfa22_max,	    /* Maximum tokens for each state    */
	    dfa22_accept,	/* Accept table			    */
	    dfa22_special,	/* Special transition states	    */
	    dfa22_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 22
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 432:64: ( reference_model )*
 */
static const ANTLR_INT32 dfa101_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa101_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa101_min[13] =
    {
	383, 113, 113, 383, 383, -1, 113, 113, -1, -1, 113, 113, 113
    };
static const ANTLR_INT32 dfa101_max[13] =
    {
	383, 456, 383, 491, 491, -1, 383, 383, -1, -1, 383, 383, 383
    };
static const ANTLR_INT32 dfa101_accept[13] =
    {
	-1, -1, -1, -1, -1, 2, -1, -1, 2, 1, -1, -1, -1
    };
static const ANTLR_INT32 dfa101_special[13] =
    {
	2, 7, 5, 8, 9, -1, 3, 0, -1, -1, 6, 1, 4
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa101_T_empty	 =   NULL;

static const ANTLR_INT32 dfa101_T0[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3
    };

static const ANTLR_INT32 dfa101_T1[] =
    {
	1
    };

static const ANTLR_INT32 dfa101_T2[] =
    {
	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	6
    };

static const ANTLR_INT32 dfa101_T3[] =
    {
	12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	11
    };

static const ANTLR_INT32 dfa101_T4[] =
    {
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5
    };

static const ANTLR_INT32 dfa101_T5[] =
    {
	8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa101_transitions[] =
{
    dfa101_T1, dfa101_T4, dfa101_T2, dfa101_T5, dfa101_T5, NULL, dfa101_T0, 
    dfa101_T0, NULL, NULL, dfa101_T3, dfa101_T0, dfa101_T0
};


/* Declare tracking structure for Cyclic DFA 101
 */
class OracleDMLCyclicDFA101 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA101( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA101_7;

	    		    ANTLR_MARKER index101_7;


	    		    LA101_7 = ctx->LA(1);

	    		     
	    		        index101_7 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA101_7 == PERIOD) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA101_7 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA101_7 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index101_7);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA101_11;

	    		    ANTLR_MARKER index101_11;


	    		    LA101_11 = ctx->LA(1);

	    		     
	    		        index101_11 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA101_11 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA101_11 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA101_11 == PERIOD) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 10;
	    		    }

	    			 
	    				ctx->seek(index101_11);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA101_0;

	    		    ANTLR_MARKER index101_0;


	    		    LA101_0 = ctx->LA(1);

	    		     
	    		        index101_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA101_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 1;
	    		    }

	    			 
	    				ctx->seek(index101_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 3:

	    		{
	    		    ANTLR_UINT32 LA101_6;

	    		    ANTLR_MARKER index101_6;


	    		    LA101_6 = ctx->LA(1);

	    		     
	    		        index101_6 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA101_6 == PERIOD) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA101_6 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA101_6 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    			 
	    				ctx->seek(index101_6);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 4:

	    		{
	    		    ANTLR_UINT32 LA101_12;

	    		    ANTLR_MARKER index101_12;


	    		    LA101_12 = ctx->LA(1);

	    		     
	    		        index101_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA101_12 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA101_12 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA101_12 == PERIOD) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 10;
	    		    }

	    			 
	    				ctx->seek(index101_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 5:

	    		{
	    		    ANTLR_UINT32 LA101_2;

	    		    ANTLR_MARKER index101_2;


	    		    LA101_2 = ctx->LA(1);

	    		     
	    		        index101_2 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA101_2 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (LA101_2 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 7;
	    		    }

	    			 
	    				ctx->seek(index101_2);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 6:

	    		{
	    		    ANTLR_UINT32 LA101_10;

	    		    ANTLR_MARKER index101_10;


	    		    LA101_10 = ctx->LA(1);

	    		     
	    		        index101_10 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA101_10 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA101_10 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 12;
	    		    }

	    			 
	    				ctx->seek(index101_10);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 7:

	    		{
	    		    ANTLR_UINT32 LA101_1;

	    		    ANTLR_MARKER index101_1;


	    		    LA101_1 = ctx->LA(1);

	    		     
	    		        index101_1 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA101_1 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 2;
	    		    }

	    		    else if ( (LA101_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA101_1 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "REFERENCE")))) )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA101_1 == SQL92_RESERVED_BY) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "PARTITION")))) )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index101_1);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 8:

	    		{
	    		    ANTLR_UINT32 LA101_3;

	    		    ANTLR_MARKER index101_3;


	    		    LA101_3 = ctx->LA(1);

	    		     
	    		        index101_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA101_3 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "MAIN")) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA101_3 == SQL92_RESERVED_ON) && ((toUpper(LT(1)->getText()) == "REFERENCE")) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index101_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 9:

	    		{
	    		    ANTLR_UINT32 LA101_4;

	    		    ANTLR_MARKER index101_4;


	    		    LA101_4 = ctx->LA(1);

	    		     
	    		        index101_4 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA101_4 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "MAIN")) )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( (LA101_4 == SQL92_RESERVED_ON) && ((toUpper(LT(1)->getText()) == "REFERENCE")) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index101_4);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "()* loopback of 432:64: ( reference_model )*" );
	    ex->set_decisionNum( 101 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA101  cdfa101(
	    101,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"()* loopback of 432:64: ( reference_model )*",
	    dfa101_eot,	    /* EOT table			    */
	    dfa101_eof,	    /* EOF table			    */
	    dfa101_min,	    /* Minimum tokens for each state    */
	    dfa101_max,	    /* Maximum tokens for each state    */
	    dfa101_accept,	/* Accept table			    */
	    dfa101_special,	/* Special transition states	    */
	    dfa101_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 101
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    721:9: ( error_logging_into_part )?
 */
static const ANTLR_INT32 dfa183_eot[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa183_eof[12] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa183_min[12] =
    {
	13, 113, -1, 113, -1, -1, 113, 113, 113, -1, 113, 113
    };
static const ANTLR_INT32 dfa183_max[12] =
    {
	614, 503, -1, 383, -1, -1, 383, 383, 383, -1, 383, 383
    };
static const ANTLR_INT32 dfa183_accept[12] =
    {
	-1, -1, 2, -1, 1, 1, -1, -1, -1, 1, -1, -1
    };
static const ANTLR_INT32 dfa183_special[12] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa183_T_empty	 =   NULL;

static const ANTLR_INT32 dfa183_T0[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	9
    };

static const ANTLR_INT32 dfa183_T1[] =
    {
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, -1, -1, 2, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 2, 2, -1, 2, -1, -1, 
	2, -1, 2, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 
	-1, 2, 2, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, 2, -1, -1, -1, -1, -1, 
	2, -1, -1, -1, -1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

static const ANTLR_INT32 dfa183_T2[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2
    };

static const ANTLR_INT32 dfa183_T3[] =
    {
	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	6
    };

static const ANTLR_INT32 dfa183_T4[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa183_transitions[] =
{
    dfa183_T1, dfa183_T2, NULL, dfa183_T3, NULL, NULL, dfa183_T0, dfa183_T0, 
    dfa183_T4, NULL, dfa183_T0, dfa183_T0
};


/* Declare tracking structure for Cyclic DFA 183
 */
class OracleDMLCyclicDFA183 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	OracleDMLCyclicDFA183( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static OracleDMLCyclicDFA183  cdfa183(
	    183,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"721:9: ( error_logging_into_part )?",
	    dfa183_eot,	    /* EOT table			    */
	    dfa183_eof,	    /* EOF table			    */
	    dfa183_min,	    /* Minimum tokens for each state    */
	    dfa183_max,	    /* Maximum tokens for each state    */
	    dfa183_accept,	/* Accept table			    */
	    dfa183_special,	/* Special transition states	    */
	    dfa183_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 183
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1050:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) );
 */
static const ANTLR_INT32 dfa263_eot[27] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa263_eof[27] =
    {
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, 11, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11
    };
static const ANTLR_INT32 dfa263_min[27] =
    {
	13, 113, 222, 19, -1, -1, -1, 113, 113, -1, -1, -1, 113, 13, 113, 19, 19, 
	19, 13, 113, 113, 13, 113, -1, 13, 19, 19
    };
static const ANTLR_INT32 dfa263_max[27] =
    {
	614, 383, 320, 627, -1, -1, -1, 383, 383, -1, -1, -1, 383, 614, 383, 627, 
	627, 627, 614, 383, 383, 614, 383, -1, 614, 627, 627
    };
static const ANTLR_INT32 dfa263_accept[27] =
    {
	-1, -1, -1, -1, 2, 3, 5, -1, -1, 1, 1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 1, -1, -1, -1
    };
static const ANTLR_INT32 dfa263_special[27] =
    {
	-1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	0, -1, -1, -1, -1, -1, 2, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa263_T_empty	 =   NULL;

static const ANTLR_INT32 dfa263_T0[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 
	11, -1, 11, -1, -1, 11, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa263_T1[] =
    {
	10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 9
    };

static const ANTLR_INT32 dfa263_T2[] =
    {
	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	15
    };

static const ANTLR_INT32 dfa263_T3[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
	-1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 5
    };

static const ANTLR_INT32 dfa263_T4[] =
    {
	8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	7
    };

static const ANTLR_INT32 dfa263_T5[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, 21, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, 11, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 
	-1, 11, 11, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 11, 11, -1, 
	-1, 11, 11, -1, -1, -1, -1, 11, 11, -1, -1, 11, 11, 11, -1, 11, 11, 11, 
	11, 11, -1, -1, 11, -1, 11, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, 11, 
	11, -1, 11, -1, -1, -1, -1, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa263_T6[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, 13, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, 11, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 
	-1, 11, 11, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, 11, 11, -1, 
	-1, 11, 11, -1, -1, -1, -1, 11, 11, -1, -1, 11, 11, 11, -1, 11, 11, 11, 
	11, 11, -1, -1, 11, -1, 11, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, 11, 
	11, -1, 11, -1, -1, -1, -1, 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa263_T7[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 11, 
	11, -1, 11, -1, -1, 11, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa263_T8[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 11, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, 11, 
	11, -1, 11, -1, -1, 11, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, -1, -1, -1, -1, 11, -1, -1, 
	-1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11
    };

static const ANTLR_INT32 dfa263_T9[] =
    {
	17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	16
    };

static const ANTLR_INT32 dfa263_T10[] =
    {
	26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	25
    };

static const ANTLR_INT32 dfa263_T11[] =
    {
	20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	19
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa263_transitions[] =
{
    dfa263_T3, dfa263_T4, dfa263_T1, dfa263_T6, NULL, NULL, NULL, dfa263_T2, 
    dfa263_T2, NULL, NULL, NULL, dfa263_T9, dfa263_T8, dfa263_T11, dfa263_T6, 
    dfa263_T5, dfa263_T5, dfa263_T0, dfa263_T2, dfa263_T2, dfa263_T7, dfa263_T10, 
    NULL, dfa263_T0, dfa263_T5, dfa263_T5
};


/* Declare tracking structure for Cyclic DFA 263
 */
class OracleDMLCyclicDFA263 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA263( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA263_18;

	    		    ANTLR_MARKER index263_18;


	    		    LA263_18 = ctx->LA(1);

	    		     
	    		        index263_18 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA263_18 == RIGHT_PAREN) && (this->msynpred( antlr3::ClassForwarder<synpred43_OracleDML>() )) )
	    		    {
	    		        s = 23;
	    		    }

	    		    else if ( (LA263_18 == APPROXIMATE_NUM_LIT || LA263_18 == BINDVAR || ((LA263_18 >= CHAR_STRING) && (LA263_18 <= CHAR_STRING_PERL)) || LA263_18 == COLON || LA263_18 == DELIMITED_ID || LA263_18 == EXACT_NUM_LIT || LA263_18 == INTRODUCER || LA263_18 == LEFT_PAREN || LA263_18 == MINUS_SIGN || LA263_18 == NATIONAL_CHAR_STRING_LIT || ((LA263_18 >= PLSQL_NON_RESERVED_CAST) && (LA263_18 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA263_18 == PLUS_SIGN || LA263_18 == REGULAR_ID || LA263_18 == SQL92_RESERVED_ALL || LA263_18 == SQL92_RESERVED_ANY || LA263_18 == SQL92_RESERVED_CASE || LA263_18 == SQL92_RESERVED_DATE || LA263_18 == SQL92_RESERVED_DEFAULT || LA263_18 == SQL92_RESERVED_DISTINCT || ((LA263_18 >= SQL92_RESERVED_EXISTS) && (LA263_18 <= SQL92_RESERVED_FALSE)) || LA263_18 == SQL92_RESERVED_NULL || LA263_18 == SQL92_RESERVED_PRIOR || LA263_18 == SQL92_RESERVED_TRUE || LA263_18 == UNSIGNED_INTEGER)  )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index263_18);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA263_2;

	    		    ANTLR_MARKER index263_2;


	    		    LA263_2 = ctx->LA(1);

	    		     
	    		        index263_2 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA263_2 == PERIOD) && (this->msynpred( antlr3::ClassForwarder<synpred43_OracleDML>() )) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA263_2 == LEFT_PAREN) && (this->msynpred( antlr3::ClassForwarder<synpred43_OracleDML>() )) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (( ((((toUpper(LT(1)->getText()) == "INTERVAL"))||((toUpper(LT(1)->getText()) == "MINVALUE"))||((toUpper(LT(1)->getText()) == "SESSIONTIMEZONE"))||((toUpper(LT(1)->getText()) == "TIMESTAMP"))||((toUpper(LT(1)->getText()) == "MAXVALUE"))||((toUpper(LT(1)->getText()) == "DBTIMEZONE")))) && (this->msynpred( antlr3::ClassForwarder<synpred45_OracleDML>() )) ))  )
	    		    {
	    		        s = 5;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred46_OracleDML>() ))  )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index263_2);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA263_24;

	    		    ANTLR_MARKER index263_24;


	    		    LA263_24 = ctx->LA(1);

	    		     
	    		        index263_24 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA263_24 == RIGHT_PAREN) && (this->msynpred( antlr3::ClassForwarder<synpred43_OracleDML>() )) )
	    		    {
	    		        s = 23;
	    		    }

	    		    else if ( (LA263_24 == APPROXIMATE_NUM_LIT || LA263_24 == BINDVAR || ((LA263_24 >= CHAR_STRING) && (LA263_24 <= CHAR_STRING_PERL)) || LA263_24 == COLON || LA263_24 == DELIMITED_ID || LA263_24 == EXACT_NUM_LIT || LA263_24 == INTRODUCER || LA263_24 == LEFT_PAREN || LA263_24 == MINUS_SIGN || LA263_24 == NATIONAL_CHAR_STRING_LIT || ((LA263_24 >= PLSQL_NON_RESERVED_CAST) && (LA263_24 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA263_24 == PLUS_SIGN || LA263_24 == REGULAR_ID || LA263_24 == SQL92_RESERVED_ALL || LA263_24 == SQL92_RESERVED_ANY || LA263_24 == SQL92_RESERVED_CASE || LA263_24 == SQL92_RESERVED_DATE || LA263_24 == SQL92_RESERVED_DEFAULT || LA263_24 == SQL92_RESERVED_DISTINCT || ((LA263_24 >= SQL92_RESERVED_EXISTS) && (LA263_24 <= SQL92_RESERVED_FALSE)) || LA263_24 == SQL92_RESERVED_NULL || LA263_24 == SQL92_RESERVED_PRIOR || LA263_24 == SQL92_RESERVED_TRUE || LA263_24 == UNSIGNED_INTEGER)  )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index263_24);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "1050:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) );" );
	    ex->set_decisionNum( 263 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA263  cdfa263(
	    263,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1050:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) );",
	    dfa263_eot,	    /* EOT table			    */
	    dfa263_eof,	    /* EOF table			    */
	    dfa263_min,	    /* Minimum tokens for each state    */
	    dfa263_max,	    /* Maximum tokens for each state    */
	    dfa263_accept,	/* Accept table			    */
	    dfa263_special,	/* Special transition states	    */
	    dfa263_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 263
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1173:17: ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper )
 */
static const ANTLR_INT32 dfa308_eot[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa308_eof[14] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa308_min[14] =
    {
	383, 13, 113, 0, 0, -1, 113, 113, -1, 113, 0, 0, 113, 113
    };
static const ANTLR_INT32 dfa308_max[14] =
    {
	383, 614, 383, 0, 0, -1, 383, 383, -1, 383, 0, 0, 383, 383
    };
static const ANTLR_INT32 dfa308_accept[14] =
    {
	-1, -1, -1, -1, -1, 2, -1, -1, 1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa308_special[14] =
    {
	10, 2, 6, 1, 8, -1, 0, 5, -1, 4, 7, 9, 3, 11
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa308_T_empty	 =   NULL;

static const ANTLR_INT32 dfa308_T0[] =
    {
	11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10
    };

static const ANTLR_INT32 dfa308_T1[] =
    {
	-1
    };

static const ANTLR_INT32 dfa308_T2[] =
    {
	5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	5, -1, -1, 5, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, 5, -1, 5, -1, 
	-1, 5, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 5, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 5
    };

static const ANTLR_INT32 dfa308_T3[] =
    {
	13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	12
    };

static const ANTLR_INT32 dfa308_T4[] =
    {
	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	6
    };

static const ANTLR_INT32 dfa308_T5[] =
    {
	1
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa308_transitions[] =
{
    dfa308_T5, dfa308_T2, dfa308_T4, dfa308_T1, dfa308_T1, NULL, dfa308_T0, 
    dfa308_T0, NULL, dfa308_T3, dfa308_T1, dfa308_T1, dfa308_T0, dfa308_T0
};


/* Declare tracking structure for Cyclic DFA 308
 */
class OracleDMLCyclicDFA308 : public CyclicDFA< OracleDMLImplTraits, OracleDML >, public OracleDMLTokens
{
public:
	typedef CyclicDFA< OracleDMLImplTraits, OracleDML >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	OracleDMLCyclicDFA308( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

    ANTLR_UINT32 LA(ANTLR_INT32 i)
    {
        return m_ctx->LA(i);
    }

    const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
    {
        return m_ctx->LT(k);
    }
    template<typename PredType>
    bool msynpred( PredType pred )
    {
        return m_ctx->msynpred(pred);
    }

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA308_6;

	    		    ANTLR_MARKER index308_6;


	    		    LA308_6 = ctx->LA(1);

	    		     
	    		        index308_6 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA308_6 == PERIOD) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA308_6 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA308_6 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index308_6);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA308_3;

	    		    ANTLR_MARKER index308_3;


	    		    LA308_3 = ctx->LA(1);

	    		     
	    		        index308_3 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((toUpper(LT(1)->getText()) == "NAME"))  )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME"))  )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index308_3);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 2:

	    		{
	    		    ANTLR_UINT32 LA308_1;

	    		    ANTLR_MARKER index308_1;


	    		    LA308_1 = ctx->LA(1);

	    		     
	    		        index308_1 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA308_1 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 2;
	    		    }

	    		    else if ( (LA308_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 3;
	    		    }

	    		    else if ( (LA308_1 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 4;
	    		    }

	    		    else if ( (LA308_1 == APPROXIMATE_NUM_LIT || LA308_1 == BINDVAR || ((LA308_1 >= CHAR_STRING) && (LA308_1 <= CHAR_STRING_PERL)) || LA308_1 == COLON || LA308_1 == EXACT_NUM_LIT || LA308_1 == LEFT_PAREN || LA308_1 == MINUS_SIGN || LA308_1 == NATIONAL_CHAR_STRING_LIT || ((LA308_1 >= PLSQL_NON_RESERVED_CAST) && (LA308_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA308_1 == PLUS_SIGN || LA308_1 == SQL92_RESERVED_ALL || LA308_1 == SQL92_RESERVED_ANY || LA308_1 == SQL92_RESERVED_CASE || LA308_1 == SQL92_RESERVED_DATE || LA308_1 == SQL92_RESERVED_DEFAULT || LA308_1 == SQL92_RESERVED_DISTINCT || ((LA308_1 >= SQL92_RESERVED_EXISTS) && (LA308_1 <= SQL92_RESERVED_FALSE)) || LA308_1 == SQL92_RESERVED_NULL || LA308_1 == SQL92_RESERVED_PRIOR || LA308_1 == SQL92_RESERVED_TRUE || LA308_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "EVALNAME")) )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index308_1);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 3:

	    		{
	    		    ANTLR_UINT32 LA308_12;

	    		    ANTLR_MARKER index308_12;


	    		    LA308_12 = ctx->LA(1);

	    		     
	    		        index308_12 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA308_12 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA308_12 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA308_12 == PERIOD) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index308_12);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 4:

	    		{
	    		    ANTLR_UINT32 LA308_9;

	    		    ANTLR_MARKER index308_9;


	    		    LA308_9 = ctx->LA(1);

	    		     
	    		        index308_9 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA308_9 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 12;
	    		    }

	    		    else if ( (LA308_9 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 13;
	    		    }

	    			 
	    				ctx->seek(index308_9);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 5:

	    		{
	    		    ANTLR_UINT32 LA308_7;

	    		    ANTLR_MARKER index308_7;


	    		    LA308_7 = ctx->LA(1);

	    		     
	    		        index308_7 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA308_7 == PERIOD) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 9;
	    		    }

	    		    else if ( (LA308_7 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA308_7 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 11;
	    		    }

	    			 
	    				ctx->seek(index308_7);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 6:

	    		{
	    		    ANTLR_UINT32 LA308_2;

	    		    ANTLR_MARKER index308_2;


	    		    LA308_2 = ctx->LA(1);

	    		     
	    		        index308_2 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA308_2 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 6;
	    		    }

	    		    else if ( (LA308_2 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 7;
	    		    }

	    			 
	    				ctx->seek(index308_2);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 7:

	    		{
	    		    ANTLR_UINT32 LA308_10;

	    		    ANTLR_MARKER index308_10;


	    		    LA308_10 = ctx->LA(1);

	    		     
	    		        index308_10 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((toUpper(LT(1)->getText()) == "NAME"))  )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME"))  )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index308_10);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 8:

	    		{
	    		    ANTLR_UINT32 LA308_4;

	    		    ANTLR_MARKER index308_4;


	    		    LA308_4 = ctx->LA(1);

	    		     
	    		        index308_4 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((toUpper(LT(1)->getText()) == "NAME"))  )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME"))  )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index308_4);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 9:

	    		{
	    		    ANTLR_UINT32 LA308_11;

	    		    ANTLR_MARKER index308_11;


	    		    LA308_11 = ctx->LA(1);

	    		     
	    		        index308_11 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( ((toUpper(LT(1)->getText()) == "NAME"))  )
	    		    {
	    		        s = 8;
	    		    }

	    		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME"))  )
	    		    {
	    		        s = 5;
	    		    }

	    			 
	    				ctx->seek(index308_11);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 10:

	    		{
	    		    ANTLR_UINT32 LA308_0;

	    		    ANTLR_MARKER index308_0;


	    		    LA308_0 = ctx->LA(1);

	    		     
	    		        index308_0 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA308_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 1;
	    		    }

	    			 
	    				ctx->seek(index308_0);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 11:

	    		{
	    		    ANTLR_UINT32 LA308_13;

	    		    ANTLR_MARKER index308_13;


	    		    LA308_13 = ctx->LA(1);

	    		     
	    		        index308_13 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA308_13 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 10;
	    		    }

	    		    else if ( (LA308_13 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 11;
	    		    }

	    		    else if ( (LA308_13 == PERIOD) && ((((toUpper(LT(1)->getText()) == "EVALNAME"))||((toUpper(LT(1)->getText()) == "NAME")))) )
	    		    {
	    		        s = 9;
	    		    }

	    			 
	    				ctx->seek(index308_13);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "1173:17: ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper )" );
	    ex->set_decisionNum( 308 );
	    ex->set_state(_s);
	    return -1;
	}
};

static OracleDMLCyclicDFA308  cdfa308(
	    308,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1173:17: ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper )",
	    dfa308_eot,	    /* EOT table			    */
	    dfa308_eof,	    /* EOF table			    */
	    dfa308_min,	    /* Minimum tokens for each state    */
	    dfa308_max,	    /* Maximum tokens for each state    */
	    dfa308_accept,	/* Accept table			    */
	    dfa308_special,	/* Special transition states	    */
	    dfa308_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 308
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start compilation_unit
 * OracleDML.g:121:1: compilation_unit : ( seq_of_statements )* EOF ;
 */
OracleDML::compilation_unit_return
OracleDML::compilation_unit()
{
    OracleDML::compilation_unit_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EOF2 = NULL;
    OracleDML::seq_of_statements_return seq_of_statements1;
    ImplTraits::TreeTypePtr::pointer seq_of_statements1_last = NULL;
    ImplTraits::TreeTypePtr EOF2_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:122:5: ( ( seq_of_statements )* EOF )
        // OracleDML.g:122:11: ( seq_of_statements )* EOF
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:122:11: ( seq_of_statements )*

            for (;;)
            {
                ANTLR_UINT32 alt1=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    ANTLR_UINT32 LA1_0 = this->LA(1);
                    if ( (LA1_0 == LEFT_PAREN || LA1_0 == PLSQL_RESERVED_LOCK || LA1_0 == SQL92_RESERVED_DELETE || LA1_0 == SQL92_RESERVED_INSERT || LA1_0 == SQL92_RESERVED_SELECT || LA1_0 == SQL92_RESERVED_UPDATE || LA1_0 == SQL92_RESERVED_WITH))
                    {
                        alt1=1;
                    }
                    else if ( (LA1_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))))
                    {
                        alt1=1;
                    }

                }
                switch (alt1)
                {
            	case 1:
            	    // OracleDML.g:122:11: seq_of_statements
            	    {
            	        this->followPush(FOLLOW_seq_of_statements_in_compilation_unit670);
            	        seq_of_statements1=seq_of_statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecompilation_unitEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, seq_of_statements1.tree);


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


            EOF2 =  this->matchToken(EOF_TOKEN, &FOLLOW_EOF_TOKEN_in_compilation_unit673);
            if  (this->hasException())
            {
                goto rulecompilation_unitEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            EOF2_tree = std::move(get_psrstate()->get_treeAdaptor()->create(EOF2));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, EOF2_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecompilation_unitEx; /* Prevent compiler warnings */
    rulecompilation_unitEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end compilation_unit */

/**
 * $ANTLR start seq_of_statements
 * OracleDML.g:126:1: seq_of_statements : ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement ) ( SEMICOLON | EOF ) ;
 */
OracleDML::seq_of_statements_return
OracleDML::seq_of_statements()
{
    OracleDML::seq_of_statements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* set10 = NULL;
    OracleDML::select_statement_return select_statement3;
    ImplTraits::TreeTypePtr::pointer select_statement3_last = NULL;
    OracleDML::update_statement_return update_statement4;
    ImplTraits::TreeTypePtr::pointer update_statement4_last = NULL;
    OracleDML::delete_statement_return delete_statement5;
    ImplTraits::TreeTypePtr::pointer delete_statement5_last = NULL;
    OracleDML::insert_statement_return insert_statement6;
    ImplTraits::TreeTypePtr::pointer insert_statement6_last = NULL;
    OracleDML::lock_table_statement_return lock_table_statement7;
    ImplTraits::TreeTypePtr::pointer lock_table_statement7_last = NULL;
    OracleDML::merge_statement_return merge_statement8;
    ImplTraits::TreeTypePtr::pointer merge_statement8_last = NULL;
    OracleDML::explain_statement_return explain_statement9;
    ImplTraits::TreeTypePtr::pointer explain_statement9_last = NULL;
    ImplTraits::TreeTypePtr set10_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:127:5: ( ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement ) ( SEMICOLON | EOF ) )
        // OracleDML.g:128:5: ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement ) ( SEMICOLON | EOF )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:128:5: ( select_statement | update_statement | delete_statement | insert_statement | lock_table_statement | merge_statement | explain_statement )
            {
                ANTLR_UINT32 alt2=7;
                {
                    ANTLR_UINT32 LA2_0 = this->LA(1);
                    if ( (LA2_0 == LEFT_PAREN || LA2_0 == SQL92_RESERVED_SELECT || LA2_0 == SQL92_RESERVED_WITH))
                    {
                        alt2=1;
                    }
                    else if ( (LA2_0 == SQL92_RESERVED_UPDATE))
                    {
                        alt2=2;
                    }
                    else if ( (LA2_0 == SQL92_RESERVED_DELETE))
                    {
                        alt2=3;
                    }
                    else if ( (LA2_0 == SQL92_RESERVED_INSERT))
                    {
                        alt2=4;
                    }
                    else if ( (LA2_0 == PLSQL_RESERVED_LOCK))
                    {
                        alt2=5;
                    }
                    else if ( (LA2_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))))
                    {
                        {
                            ANTLR_UINT32 LA2_6 = this->LA(2);
                            if ( (LA2_6 == SQL92_RESERVED_INTO) && ((toUpper(LT(1)->getText()) == "MERGE")))
                            {
                                alt2=6;
                            }
                            else if ( (LA2_6 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "EXPLAIN")))
                            {
                                alt2=7;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 2 );
                                ex->set_state( 6 );


                                goto ruleseq_of_statementsEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 2 );
                        ex->set_state( 0 );


                        goto ruleseq_of_statementsEx;

                    }
                }
                switch (alt2)
                {
            	case 1:
            	    // OracleDML.g:128:10: select_statement
            	    {
            	        this->followPush(FOLLOW_select_statement_in_seq_of_statements700);
            	        select_statement3=select_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, select_statement3.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:129:10: update_statement
            	    {
            	        this->followPush(FOLLOW_update_statement_in_seq_of_statements711);
            	        update_statement4=update_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, update_statement4.tree);


            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:130:10: delete_statement
            	    {
            	        this->followPush(FOLLOW_delete_statement_in_seq_of_statements722);
            	        delete_statement5=delete_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, delete_statement5.tree);


            	    }
            	    break;
            	case 4:
            	    // OracleDML.g:131:10: insert_statement
            	    {
            	        this->followPush(FOLLOW_insert_statement_in_seq_of_statements733);
            	        insert_statement6=insert_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, insert_statement6.tree);


            	    }
            	    break;
            	case 5:
            	    // OracleDML.g:132:10: lock_table_statement
            	    {
            	        this->followPush(FOLLOW_lock_table_statement_in_seq_of_statements744);
            	        lock_table_statement7=lock_table_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, lock_table_statement7.tree);


            	    }
            	    break;
            	case 6:
            	    // OracleDML.g:133:10: merge_statement
            	    {
            	        this->followPush(FOLLOW_merge_statement_in_seq_of_statements755);
            	        merge_statement8=merge_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_statement8.tree);


            	    }
            	    break;
            	case 7:
            	    // OracleDML.g:134:10: explain_statement
            	    {
            	        this->followPush(FOLLOW_explain_statement_in_seq_of_statements766);
            	        explain_statement9=explain_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleseq_of_statementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, explain_statement9.tree);


            	    }
            	    break;

                }
            }

            set10=(ImplTraits::CommonTokenType const*) this->LT(1);

            if ( this->LA(1) == EOF_TOKEN || this->LA(1) == SEMICOLON )
            {
                this->consume();
                if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(set10));
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                new ANTLR_Exception< OracleDMLImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto ruleseq_of_statementsEx;
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleseq_of_statementsEx; /* Prevent compiler warnings */
    ruleseq_of_statementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end seq_of_statements */

/**
 * $ANTLR start explain_statement
 * OracleDML.g:139:1: explain_statement : explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement ) -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? ) ;
 */
OracleDML::explain_statement_return
OracleDML::explain_statement()
{
    OracleDML::explain_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP15 = NULL;
    OracleDML_OracleDMLKeys::explain_key_return explain_key11;
    ImplTraits::TreeTypePtr::pointer explain_key11_last = NULL;
    OracleDML_OracleDMLKeys::plan_key_return plan_key12;
    ImplTraits::TreeTypePtr::pointer plan_key12_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key13;
    ImplTraits::TreeTypePtr::pointer set_key13_last = NULL;
    OracleDML_OracleDMLKeys::statement_id_key_return statement_id_key14;
    ImplTraits::TreeTypePtr::pointer statement_id_key14_last = NULL;
    OracleDML_OracleDMLCommons::quoted_string_return quoted_string16;
    ImplTraits::TreeTypePtr::pointer quoted_string16_last = NULL;
    OracleDML_OracleDMLKeys::into_key_return into_key17;
    ImplTraits::TreeTypePtr::pointer into_key17_last = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name18;
    ImplTraits::TreeTypePtr::pointer tableview_name18_last = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key19;
    ImplTraits::TreeTypePtr::pointer for_key19_last = NULL;
    OracleDML::select_statement_return select_statement20;
    ImplTraits::TreeTypePtr::pointer select_statement20_last = NULL;
    OracleDML::update_statement_return update_statement21;
    ImplTraits::TreeTypePtr::pointer update_statement21_last = NULL;
    OracleDML::delete_statement_return delete_statement22;
    ImplTraits::TreeTypePtr::pointer delete_statement22_last = NULL;
    OracleDML::insert_statement_return insert_statement23;
    ImplTraits::TreeTypePtr::pointer insert_statement23_last = NULL;
    OracleDML::merge_statement_return merge_statement24;
    ImplTraits::TreeTypePtr::pointer merge_statement24_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP15_tree;
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_delete_statement(get_psrstate()->get_treeAdaptor(), "rule delete_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_quoted_string(get_psrstate()->get_treeAdaptor(), "rule quoted_string");
    RewriteRuleSubtreeStream<ImplTraits> stream_plan_key(get_psrstate()->get_treeAdaptor(), "rule plan_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_key(get_psrstate()->get_treeAdaptor(), "rule into_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_statement_id_key(get_psrstate()->get_treeAdaptor(), "rule statement_id_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_explain_key(get_psrstate()->get_treeAdaptor(), "rule explain_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_statement(get_psrstate()->get_treeAdaptor(), "rule merge_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_statement(get_psrstate()->get_treeAdaptor(), "rule update_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_set_key(get_psrstate()->get_treeAdaptor(), "rule set_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_insert_statement(get_psrstate()->get_treeAdaptor(), "rule insert_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:140:5: ( explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement ) -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? ) )
        // OracleDML.g:140:10: explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement )
        {
            this->followPush(FOLLOW_explain_key_in_explain_statement809);
            explain_key11=explain_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexplain_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                explain_key11_last = explain_key11.tree.get();
                stream_explain_key.add(explain_key11.tree);
            }

            this->followPush(FOLLOW_plan_key_in_explain_statement811);
            plan_key12=plan_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexplain_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                plan_key12_last = plan_key12.tree.get();
                stream_plan_key.add(plan_key12.tree);
            }

            // OracleDML.g:141:10: ( set_key statement_id_key EQUALS_OP quoted_string )?
            {
                ANTLR_UINT32 alt3=2;
                {
                    ANTLR_UINT32 LA3_0 = this->LA(1);
                    if ( (LA3_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SET")))
                    {
                        alt3=1;
                    }
                }
                switch (alt3)
                {
            	case 1:
            	    // OracleDML.g:141:11: set_key statement_id_key EQUALS_OP quoted_string
            	    {
            	        this->followPush(FOLLOW_set_key_in_explain_statement823);
            	        set_key13=set_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            set_key13_last = set_key13.tree.get();
            	            stream_set_key.add(set_key13.tree);
            	        }

            	        this->followPush(FOLLOW_statement_id_key_in_explain_statement825);
            	        statement_id_key14=statement_id_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            statement_id_key14_last = statement_id_key14.tree.get();
            	            stream_statement_id_key.add(statement_id_key14.tree);
            	        }

            	        EQUALS_OP15 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_explain_statement827);
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP15);


            	        this->followPush(FOLLOW_quoted_string_in_explain_statement829);
            	        quoted_string16=quoted_string();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            quoted_string16_last = quoted_string16.tree.get();
            	            stream_quoted_string.add(quoted_string16.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:142:10: ( into_key tableview_name )?
            {
                ANTLR_UINT32 alt4=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_INTO:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // OracleDML.g:142:11: into_key tableview_name
            	    {
            	        this->followPush(FOLLOW_into_key_in_explain_statement843);
            	        into_key17=into_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            into_key17_last = into_key17.tree.get();
            	            stream_into_key.add(into_key17.tree);
            	        }

            	        this->followPush(FOLLOW_tableview_name_in_explain_statement845);
            	        tableview_name18=tableview_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            tableview_name18_last = tableview_name18.tree.get();
            	            stream_tableview_name.add(tableview_name18.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_for_key_in_explain_statement858);
            for_key19=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexplain_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key19_last = for_key19.tree.get();
                stream_for_key.add(for_key19.tree);
            }

            // OracleDML.g:144:10: ( select_statement | update_statement | delete_statement | insert_statement | merge_statement )
            {
                ANTLR_UINT32 alt5=5;
                {
                    ANTLR_UINT32 LA5_0 = this->LA(1);
                    if ( (LA5_0 == LEFT_PAREN || LA5_0 == SQL92_RESERVED_SELECT || LA5_0 == SQL92_RESERVED_WITH))
                    {
                        alt5=1;
                    }
                    else if ( (LA5_0 == SQL92_RESERVED_UPDATE))
                    {
                        alt5=2;
                    }
                    else if ( (LA5_0 == SQL92_RESERVED_DELETE))
                    {
                        alt5=3;
                    }
                    else if ( (LA5_0 == SQL92_RESERVED_INSERT))
                    {
                        alt5=4;
                    }
                    else if ( (LA5_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "MERGE")))
                    {
                        alt5=5;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 5 );
                        ex->set_state( 0 );


                        goto ruleexplain_statementEx;

                    }
                }
                switch (alt5)
                {
            	case 1:
            	    // OracleDML.g:144:12: select_statement
            	    {
            	        this->followPush(FOLLOW_select_statement_in_explain_statement871);
            	        select_statement20=select_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            select_statement20_last = select_statement20.tree.get();
            	            stream_select_statement.add(select_statement20.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:145:12: update_statement
            	    {
            	        this->followPush(FOLLOW_update_statement_in_explain_statement884);
            	        update_statement21=update_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            update_statement21_last = update_statement21.tree.get();
            	            stream_update_statement.add(update_statement21.tree);
            	        }

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:146:12: delete_statement
            	    {
            	        this->followPush(FOLLOW_delete_statement_in_explain_statement897);
            	        delete_statement22=delete_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            delete_statement22_last = delete_statement22.tree.get();
            	            stream_delete_statement.add(delete_statement22.tree);
            	        }

            	    }
            	    break;
            	case 4:
            	    // OracleDML.g:147:12: insert_statement
            	    {
            	        this->followPush(FOLLOW_insert_statement_in_explain_statement910);
            	        insert_statement23=insert_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            insert_statement23_last = insert_statement23.tree.get();
            	            stream_insert_statement.add(insert_statement23.tree);
            	        }

            	    }
            	    break;
            	case 5:
            	    // OracleDML.g:148:12: merge_statement
            	    {
            	        this->followPush(FOLLOW_merge_statement_in_explain_statement923);
            	        merge_statement24=merge_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexplain_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_statement24_last = merge_statement24.tree.get();
            	            stream_merge_statement.add(merge_statement24.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: update_statement, merge_statement, insert_statement, delete_statement, select_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 150:10: -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? )
            {
            	// OracleDML.g:150:13: ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPLAIN_STATEMENT, "EXPLAIN_STATEMENT"), root_1);
            	// OracleDML.g:150:33: ( select_statement )?
            	if ( stream_select_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_statement.nextTree());
            	}
            	stream_select_statement.reset();

            	// OracleDML.g:150:51: ( update_statement )?
            	if ( stream_update_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_statement.nextTree());
            	}
            	stream_update_statement.reset();

            	// OracleDML.g:150:69: ( delete_statement )?
            	if ( stream_delete_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_delete_statement.nextTree());
            	}
            	stream_delete_statement.reset();

            	// OracleDML.g:150:87: ( insert_statement )?
            	if ( stream_insert_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_insert_statement.nextTree());
            	}
            	stream_insert_statement.reset();

            	// OracleDML.g:150:105: ( merge_statement )?
            	if ( stream_merge_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_statement.nextTree());
            	}
            	stream_merge_statement.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleexplain_statementEx; /* Prevent compiler warnings */
    ruleexplain_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end explain_statement */

/**
 * $ANTLR start select_statement
 * OracleDML.g:153:1: select_statement : ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )* -> ^( SELECT_STATEMENT[(ToraType)T_SELECT] ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) ;
 */
OracleDML::select_statement_return
OracleDML::select_statement()
{
    OracleDML::select_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::subquery_factoring_clause_return subquery_factoring_clause25;
    ImplTraits::TreeTypePtr::pointer subquery_factoring_clause25_last = NULL;
    OracleDML::subquery_return subquery26;
    ImplTraits::TreeTypePtr::pointer subquery26_last = NULL;
    OracleDML::for_update_clause_return for_update_clause27;
    ImplTraits::TreeTypePtr::pointer for_update_clause27_last = NULL;
    OracleDML::order_by_clause_return order_by_clause28;
    ImplTraits::TreeTypePtr::pointer order_by_clause28_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_factoring_clause(get_psrstate()->get_treeAdaptor(), "rule subquery_factoring_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_by_clause(get_psrstate()->get_treeAdaptor(), "rule order_by_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_update_clause(get_psrstate()->get_treeAdaptor(), "rule for_update_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:154:5: ( ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )* -> ^( SELECT_STATEMENT[(ToraType)T_SELECT] ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) )
        // OracleDML.g:154:10: ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )*
        {
            // OracleDML.g:154:10: ( subquery_factoring_clause )?
            {
                ANTLR_UINT32 alt6=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WITH:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6)
                {
            	case 1:
            	    // OracleDML.g:154:10: subquery_factoring_clause
            	    {
            	        this->followPush(FOLLOW_subquery_factoring_clause_in_select_statement984);
            	        subquery_factoring_clause25=subquery_factoring_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselect_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery_factoring_clause25_last = subquery_factoring_clause25.tree.get();
            	            stream_subquery_factoring_clause.add(subquery_factoring_clause25.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_subquery_in_select_statement995);
            subquery26=subquery();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleselect_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                subquery26_last = subquery26.tree.get();
                stream_subquery.add(subquery26.tree);
            }

            // OracleDML.g:156:9: ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt7=3;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    ANTLR_UINT32 LA7_0 = this->LA(1);
                    if ( (LA7_0 == SQL92_RESERVED_FOR))
                    {
                        alt7=1;
                    }
                    else if ( (LA7_0 == SQL92_RESERVED_ORDER) && (this->msynpred( antlr3::ClassForwarder<synpred1_OracleDML>() )))
                    {
                        alt7=2;
                    }

                }
                switch (alt7)
                {
            	case 1:
            	    // OracleDML.g:156:10: for_update_clause
            	    {
            	        this->followPush(FOLLOW_for_update_clause_in_select_statement1006);
            	        for_update_clause27=for_update_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselect_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_update_clause27_last = for_update_clause27.tree.get();
            	            stream_for_update_clause.add(for_update_clause27.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:156:28: ( order_key ( siblings_key )? by_key )=> order_by_clause
            	    {
            	        this->followPush(FOLLOW_order_by_clause_in_select_statement1018);
            	        order_by_clause28=order_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselect_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_by_clause28_last = order_by_clause28.tree.get();
            	            stream_order_by_clause.add(order_by_clause28.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: order_by_clause, for_update_clause, subquery, subquery_factoring_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 157:9: -> ^( SELECT_STATEMENT[(ToraType)T_SELECT] ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
            {
            	// OracleDML.g:157:12: ^( SELECT_STATEMENT[(ToraType)T_SELECT] ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_STATEMENT, (ToraType)T_SELECT), root_1);
            	// OracleDML.g:157:51: ( subquery_factoring_clause )?
            	if ( stream_subquery_factoring_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_factoring_clause.nextTree());
            	}
            	stream_subquery_factoring_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	// OracleDML.g:157:87: ( for_update_clause )*
            	while ( stream_for_update_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_for_update_clause.nextTree());
            	}
            	stream_for_update_clause.reset();

            	// OracleDML.g:157:106: ( order_by_clause )*
            	while ( stream_order_by_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_order_by_clause.nextTree());
            	}
            	stream_order_by_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleselect_statementEx; /* Prevent compiler warnings */
    ruleselect_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end select_statement */

/**
 * $ANTLR start subquery_factoring_clause
 * OracleDML.g:161:1: subquery_factoring_clause : with_key ^ factoring_element ( COMMA ! factoring_element )* ;
 */
OracleDML::subquery_factoring_clause_return
OracleDML::subquery_factoring_clause()
{
    OracleDML::subquery_factoring_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA31 = NULL;
    OracleDML_OracleDMLKeys::with_key_return with_key29;
    ImplTraits::TreeTypePtr::pointer with_key29_last = NULL;
    OracleDML::factoring_element_return factoring_element30;
    ImplTraits::TreeTypePtr::pointer factoring_element30_last = NULL;
    OracleDML::factoring_element_return factoring_element32;
    ImplTraits::TreeTypePtr::pointer factoring_element32_last = NULL;
    ImplTraits::TreeTypePtr COMMA31_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:162:5: ( with_key ^ factoring_element ( COMMA ! factoring_element )* )
        // OracleDML.g:162:10: with_key ^ factoring_element ( COMMA ! factoring_element )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_with_key_in_subquery_factoring_clause1069);
            with_key29=with_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubquery_factoring_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(with_key29.tree, root_0);

            this->followPush(FOLLOW_factoring_element_in_subquery_factoring_clause1072);
            factoring_element30=factoring_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubquery_factoring_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, factoring_element30.tree);


            // OracleDML.g:162:38: ( COMMA ! factoring_element )*

            for (;;)
            {
                ANTLR_UINT32 alt8=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8)
                {
            	case 1:
            	    // OracleDML.g:162:39: COMMA ! factoring_element
            	    {
            	        COMMA31 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_subquery_factoring_clause1075);
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_factoring_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_factoring_element_in_subquery_factoring_clause1078);
            	        factoring_element32=factoring_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_factoring_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, factoring_element32.tree);


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesubquery_factoring_clauseEx; /* Prevent compiler warnings */
    rulesubquery_factoring_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery_factoring_clause */

/**
 * $ANTLR start factoring_element
 * OracleDML.g:165:1: factoring_element : query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )? -> ^( FACTORING query_name subquery ( search_clause )? ( cycle_clause )? ) ;
 */
OracleDML::factoring_element_return
OracleDML::factoring_element()
{
    OracleDML::factoring_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN34 = NULL;
    ImplTraits::CommonTokenType const* COMMA36 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN38 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN40 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN43 = NULL;
    OracleDML_OracleDMLCommons::query_name_return query_name33;
    ImplTraits::TreeTypePtr::pointer query_name33_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name35;
    ImplTraits::TreeTypePtr::pointer column_name35_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name37;
    ImplTraits::TreeTypePtr::pointer column_name37_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key39;
    ImplTraits::TreeTypePtr::pointer as_key39_last = NULL;
    OracleDML::subquery_return subquery41;
    ImplTraits::TreeTypePtr::pointer subquery41_last = NULL;
    OracleDML::order_by_clause_return order_by_clause42;
    ImplTraits::TreeTypePtr::pointer order_by_clause42_last = NULL;
    OracleDML::search_clause_return search_clause44;
    ImplTraits::TreeTypePtr::pointer search_clause44_last = NULL;
    OracleDML::cycle_clause_return cycle_clause45;
    ImplTraits::TreeTypePtr::pointer cycle_clause45_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN34_tree;
    ImplTraits::TreeTypePtr COMMA36_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN38_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN40_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN43_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_by_clause(get_psrstate()->get_treeAdaptor(), "rule order_by_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_cycle_clause(get_psrstate()->get_treeAdaptor(), "rule cycle_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_search_clause(get_psrstate()->get_treeAdaptor(), "rule search_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_as_key(get_psrstate()->get_treeAdaptor(), "rule as_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_query_name(get_psrstate()->get_treeAdaptor(), "rule query_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:166:5: ( query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )? -> ^( FACTORING query_name subquery ( search_clause )? ( cycle_clause )? ) )
        // OracleDML.g:166:10: query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )?
        {
            this->followPush(FOLLOW_query_name_in_factoring_element1100);
            query_name33=query_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                query_name33_last = query_name33.tree.get();
                stream_query_name.add(query_name33.tree);
            }

            // OracleDML.g:166:21: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            {
                ANTLR_UINT32 alt10=2;
                switch ( this->LA(1) )
                {
                    case LEFT_PAREN:
                    	{
                    		alt10=1;
                    	}
                        break;
                }

                switch (alt10)
                {
            	case 1:
            	    // OracleDML.g:166:22: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN34 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_factoring_element1103);
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN34);


            	        this->followPush(FOLLOW_column_name_in_factoring_element1105);
            	        column_name35=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name35_last = column_name35.tree.get();
            	            stream_column_name.add(column_name35.tree);
            	        }

            	        // OracleDML.g:166:45: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt9=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt9=1;
            	            	}
            	                break;

            	            }

            	            switch (alt9)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:166:46: COMMA column_name
            	        	    {
            	        	        COMMA36 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_factoring_element1108);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulefactoring_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA36);


            	        	        this->followPush(FOLLOW_column_name_in_factoring_element1110);
            	        	        column_name37=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulefactoring_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name37_last = column_name37.tree.get();
            	        	            stream_column_name.add(column_name37.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop9;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop9: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN38 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_factoring_element1114);
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN38);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_as_key_in_factoring_element1118);
            as_key39=as_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                as_key39_last = as_key39.tree.get();
                stream_as_key.add(as_key39.tree);
            }

            LEFT_PAREN40 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_factoring_element1120);
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN40);


            this->followPush(FOLLOW_subquery_in_factoring_element1122);
            subquery41=subquery();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                subquery41_last = subquery41.tree.get();
                stream_subquery.add(subquery41.tree);
            }

            // OracleDML.g:166:107: ( order_by_clause )?
            {
                ANTLR_UINT32 alt11=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ORDER:
                    	{
                    		alt11=1;
                    	}
                        break;
                }

                switch (alt11)
                {
            	case 1:
            	    // OracleDML.g:166:107: order_by_clause
            	    {
            	        this->followPush(FOLLOW_order_by_clause_in_factoring_element1124);
            	        order_by_clause42=order_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_by_clause42_last = order_by_clause42.tree.get();
            	            stream_order_by_clause.add(order_by_clause42.tree);
            	        }

            	    }
            	    break;

                }
            }

            RIGHT_PAREN43 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_factoring_element1127);
            if  (this->hasException())
            {
                goto rulefactoring_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN43);


            // OracleDML.g:167:10: ( search_clause )?
            {
                ANTLR_UINT32 alt12=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case REGULAR_ID:
                    		    	{
                    		    		switch ( this->LA(3) )
                    		    		{
                    		    		    case REGULAR_ID:
                    		    		    	{
                    		    		    		switch ( this->LA(4) )
                    		    		    		{
                    		    		    		    case SQL92_RESERVED_BY:
                    		    		    		    	{
                    		    		    		    		alt12=1;
                    		    		    		    	}
                    		    		    		        break;
                    		    		    		}

                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt12)
                {
            	case 1:
            	    // OracleDML.g:167:10: search_clause
            	    {
            	        this->followPush(FOLLOW_search_clause_in_factoring_element1138);
            	        search_clause44=search_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            search_clause44_last = search_clause44.tree.get();
            	            stream_search_clause.add(search_clause44.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:168:10: ( cycle_clause )?
            {
                ANTLR_UINT32 alt13=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		alt13=1;
                    	}
                        break;
                }

                switch (alt13)
                {
            	case 1:
            	    // OracleDML.g:168:10: cycle_clause
            	    {
            	        this->followPush(FOLLOW_cycle_clause_in_factoring_element1150);
            	        cycle_clause45=cycle_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefactoring_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            cycle_clause45_last = cycle_clause45.tree.get();
            	            stream_cycle_clause.add(cycle_clause45.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: query_name, cycle_clause, search_clause, subquery
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 169:9: -> ^( FACTORING query_name subquery ( search_clause )? ( cycle_clause )? )
            {
            	// OracleDML.g:169:12: ^( FACTORING query_name subquery ( search_clause )? ( cycle_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(FACTORING, "FACTORING"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_query_name.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	// OracleDML.g:169:44: ( search_clause )?
            	if ( stream_search_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_search_clause.nextTree());
            	}
            	stream_search_clause.reset();

            	// OracleDML.g:169:59: ( cycle_clause )?
            	if ( stream_cycle_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cycle_clause.nextTree());
            	}
            	stream_cycle_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefactoring_elementEx; /* Prevent compiler warnings */
    rulefactoring_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end factoring_element */

/**
 * $ANTLR start search_clause
 * OracleDML.g:172:1: search_clause : search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name ;
 */
OracleDML::search_clause_return
OracleDML::search_clause()
{
    OracleDML::search_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA58 = NULL;
    OracleDML_OracleDMLKeys::search_key_return search_key46;
    ImplTraits::TreeTypePtr::pointer search_key46_last = NULL;
    OracleDML_OracleDMLKeys::depth_key_return depth_key47;
    ImplTraits::TreeTypePtr::pointer depth_key47_last = NULL;
    OracleDML_OracleDMLKeys::breadth_key_return breadth_key48;
    ImplTraits::TreeTypePtr::pointer breadth_key48_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key49;
    ImplTraits::TreeTypePtr::pointer first_key49_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key50;
    ImplTraits::TreeTypePtr::pointer by_key50_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name51;
    ImplTraits::TreeTypePtr::pointer column_name51_last = NULL;
    OracleDML_OracleDMLKeys::asc_key_return asc_key52;
    ImplTraits::TreeTypePtr::pointer asc_key52_last = NULL;
    OracleDML_OracleDMLKeys::desc_key_return desc_key53;
    ImplTraits::TreeTypePtr::pointer desc_key53_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key54;
    ImplTraits::TreeTypePtr::pointer nulls_key54_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key55;
    ImplTraits::TreeTypePtr::pointer first_key55_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key56;
    ImplTraits::TreeTypePtr::pointer nulls_key56_last = NULL;
    OracleDML_OracleDMLKeys::last_key_return last_key57;
    ImplTraits::TreeTypePtr::pointer last_key57_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name59;
    ImplTraits::TreeTypePtr::pointer column_name59_last = NULL;
    OracleDML_OracleDMLKeys::asc_key_return asc_key60;
    ImplTraits::TreeTypePtr::pointer asc_key60_last = NULL;
    OracleDML_OracleDMLKeys::desc_key_return desc_key61;
    ImplTraits::TreeTypePtr::pointer desc_key61_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key62;
    ImplTraits::TreeTypePtr::pointer nulls_key62_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key63;
    ImplTraits::TreeTypePtr::pointer first_key63_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key64;
    ImplTraits::TreeTypePtr::pointer nulls_key64_last = NULL;
    OracleDML_OracleDMLKeys::last_key_return last_key65;
    ImplTraits::TreeTypePtr::pointer last_key65_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key66;
    ImplTraits::TreeTypePtr::pointer set_key66_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name67;
    ImplTraits::TreeTypePtr::pointer column_name67_last = NULL;
    ImplTraits::TreeTypePtr COMMA58_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:173:5: ( search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name )
        // OracleDML.g:173:10: search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_search_key_in_search_clause1195);
            search_key46=search_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, search_key46.tree);


            // OracleDML.g:173:21: ( depth_key | breadth_key )
            {
                ANTLR_UINT32 alt14=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA14_1 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "DEPTH")))
                		    {
                		        alt14=1;
                		    }
                		    else if ( ((toUpper(LT(1)->getText()) == "BREADTH")))
                		    {
                		        alt14=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 14 );
                		        ex->set_state( 1 );


                		        goto rulesearch_clauseEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 14 );
                    ex->set_state( 0 );


                    goto rulesearch_clauseEx;

                }

                switch (alt14)
                {
            	case 1:
            	    // OracleDML.g:173:23: depth_key
            	    {
            	        this->followPush(FOLLOW_depth_key_in_search_clause1199);
            	        depth_key47=depth_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, depth_key47.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:173:35: breadth_key
            	    {
            	        this->followPush(FOLLOW_breadth_key_in_search_clause1203);
            	        breadth_key48=breadth_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, breadth_key48.tree);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_first_key_in_search_clause1207);
            first_key49=first_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, first_key49.tree);


            this->followPush(FOLLOW_by_key_in_search_clause1209);
            by_key50=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, by_key50.tree);


            this->followPush(FOLLOW_column_name_in_search_clause1224);
            column_name51=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name51.tree);


            // OracleDML.g:174:26: ( asc_key )?
            {
                ANTLR_UINT32 alt15=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ASC:
                    	{
                    		alt15=1;
                    	}
                        break;
                }

                switch (alt15)
                {
            	case 1:
            	    // OracleDML.g:174:26: asc_key
            	    {
            	        this->followPush(FOLLOW_asc_key_in_search_clause1226);
            	        asc_key52=asc_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, asc_key52.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:174:36: ( desc_key )?
            {
                ANTLR_UINT32 alt16=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_DESC:
                    	{
                    		alt16=1;
                    	}
                        break;
                }

                switch (alt16)
                {
            	case 1:
            	    // OracleDML.g:174:36: desc_key
            	    {
            	        this->followPush(FOLLOW_desc_key_in_search_clause1230);
            	        desc_key53=desc_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, desc_key53.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:174:47: ( nulls_key first_key )?
            {
                ANTLR_UINT32 alt17=2;
                {
                    ANTLR_UINT32 LA17_0 = this->LA(1);
                    if ( (LA17_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))))
                    {
                        {
                            ANTLR_UINT32 LA17_1 = this->LA(2);
                            if ( (LA17_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))))
                            {
                                {
                                    ANTLR_UINT32 LA17_3 = this->LA(3);
                                    if ( ((toUpper(LT(1)->getText()) == "NULLS")))
                                    {
                                        alt17=1;
                                    }
                                }
                            }
                        }
                    }
                }
                switch (alt17)
                {
            	case 1:
            	    // OracleDML.g:174:48: nulls_key first_key
            	    {
            	        this->followPush(FOLLOW_nulls_key_in_search_clause1235);
            	        nulls_key54=nulls_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nulls_key54.tree);


            	        this->followPush(FOLLOW_first_key_in_search_clause1237);
            	        first_key55=first_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, first_key55.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:174:70: ( nulls_key last_key )?
            {
                ANTLR_UINT32 alt18=2;
                alt18 = cdfa18.predict(this, this->get_rec(), this->get_istream(), cdfa18 );
                if  (this->hasException())
                {
                    goto rulesearch_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                switch (alt18)
                {
            	case 1:
            	    // OracleDML.g:174:71: nulls_key last_key
            	    {
            	        this->followPush(FOLLOW_nulls_key_in_search_clause1242);
            	        nulls_key56=nulls_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nulls_key56.tree);


            	        this->followPush(FOLLOW_last_key_in_search_clause1244);
            	        last_key57=last_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, last_key57.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:175:14: ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )*

            for (;;)
            {
                ANTLR_UINT32 alt23=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt23=1;
                	}
                    break;

                }

                switch (alt23)
                {
            	case 1:
            	    // OracleDML.g:175:15: COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )?
            	    {
            	        COMMA58 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_search_clause1262);
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        COMMA58_tree = std::move(get_psrstate()->get_treeAdaptor()->create(COMMA58));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, COMMA58_tree);
            	        }


            	        this->followPush(FOLLOW_column_name_in_search_clause1264);
            	        column_name59=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearch_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name59.tree);


            	        // OracleDML.g:175:33: ( asc_key )?
            	        {
            	            ANTLR_UINT32 alt19=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_ASC:
            	                	{
            	                		alt19=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt19)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:175:33: asc_key
            	        	    {
            	        	        this->followPush(FOLLOW_asc_key_in_search_clause1266);
            	        	        asc_key60=asc_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, asc_key60.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:175:43: ( desc_key )?
            	        {
            	            ANTLR_UINT32 alt20=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_DESC:
            	                	{
            	                		alt20=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt20)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:175:43: desc_key
            	        	    {
            	        	        this->followPush(FOLLOW_desc_key_in_search_clause1270);
            	        	        desc_key61=desc_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, desc_key61.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:175:54: ( nulls_key first_key )?
            	        {
            	            ANTLR_UINT32 alt21=2;
            	            {
            	                ANTLR_UINT32 LA21_0 = this->LA(1);
            	                if ( (LA21_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA21_1 = this->LA(2);
            	                        if ( (LA21_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "NULLS")))))
            	                        {
            	                            {
            	                                ANTLR_UINT32 LA21_3 = this->LA(3);
            	                                if ( ((toUpper(LT(1)->getText()) == "NULLS")))
            	                                {
            	                                    alt21=1;
            	                                }
            	                            }
            	                        }
            	                    }
            	                }
            	            }
            	            switch (alt21)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:175:55: nulls_key first_key
            	        	    {
            	        	        this->followPush(FOLLOW_nulls_key_in_search_clause1275);
            	        	        nulls_key62=nulls_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nulls_key62.tree);


            	        	        this->followPush(FOLLOW_first_key_in_search_clause1277);
            	        	        first_key63=first_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, first_key63.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:175:77: ( nulls_key last_key )?
            	        {
            	            ANTLR_UINT32 alt22=2;
            	            alt22 = cdfa22.predict(this, this->get_rec(), this->get_istream(), cdfa22 );
            	            if  (this->hasException())
            	            {
            	                goto rulesearch_clauseEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            switch (alt22)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:175:78: nulls_key last_key
            	        	    {
            	        	        this->followPush(FOLLOW_nulls_key_in_search_clause1282);
            	        	        nulls_key64=nulls_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nulls_key64.tree);


            	        	        this->followPush(FOLLOW_last_key_in_search_clause1284);
            	        	        last_key65=last_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearch_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, last_key65.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop23;	/* break out of the loop */
            	    break;
                }
            }
            loop23: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_set_key_in_search_clause1304);
            set_key66=set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, set_key66.tree);


            this->followPush(FOLLOW_column_name_in_search_clause1306);
            column_name67=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearch_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name67.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesearch_clauseEx; /* Prevent compiler warnings */
    rulesearch_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end search_clause */

/**
 * $ANTLR start cycle_clause
 * OracleDML.g:179:1: cycle_clause : cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression ;
 */
OracleDML::cycle_clause_return
OracleDML::cycle_clause()
{
    OracleDML::cycle_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA70 = NULL;
    OracleDML_OracleDMLKeys::cycle_key_return cycle_key68;
    ImplTraits::TreeTypePtr::pointer cycle_key68_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name69;
    ImplTraits::TreeTypePtr::pointer column_name69_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name71;
    ImplTraits::TreeTypePtr::pointer column_name71_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key72;
    ImplTraits::TreeTypePtr::pointer set_key72_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name73;
    ImplTraits::TreeTypePtr::pointer column_name73_last = NULL;
    OracleDML_OracleDMLKeys::to_key_return to_key74;
    ImplTraits::TreeTypePtr::pointer to_key74_last = NULL;
    OracleDML::expression_return expression75;
    ImplTraits::TreeTypePtr::pointer expression75_last = NULL;
    OracleDML_OracleDMLKeys::default_key_return default_key76;
    ImplTraits::TreeTypePtr::pointer default_key76_last = NULL;
    OracleDML::expression_return expression77;
    ImplTraits::TreeTypePtr::pointer expression77_last = NULL;
    ImplTraits::TreeTypePtr COMMA70_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:180:5: ( cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression )
        // OracleDML.g:180:10: cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_cycle_key_in_cycle_clause1326);
            cycle_key68=cycle_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cycle_key68.tree);


            this->followPush(FOLLOW_column_name_in_cycle_clause1328);
            column_name69=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name69.tree);


            // OracleDML.g:180:32: ( COMMA column_name )*

            for (;;)
            {
                ANTLR_UINT32 alt24=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt24=1;
                	}
                    break;

                }

                switch (alt24)
                {
            	case 1:
            	    // OracleDML.g:180:34: COMMA column_name
            	    {
            	        COMMA70 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_cycle_clause1332);
            	        if  (this->hasException())
            	        {
            	            goto rulecycle_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        COMMA70_tree = std::move(get_psrstate()->get_treeAdaptor()->create(COMMA70));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, COMMA70_tree);
            	        }


            	        this->followPush(FOLLOW_column_name_in_cycle_clause1334);
            	        column_name71=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecycle_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name71.tree);


            	    }
            	    break;

            	default:
            	    goto loop24;	/* break out of the loop */
            	    break;
                }
            }
            loop24: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_set_key_in_cycle_clause1338);
            set_key72=set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, set_key72.tree);


            this->followPush(FOLLOW_column_name_in_cycle_clause1340);
            column_name73=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name73.tree);


            this->followPush(FOLLOW_to_key_in_cycle_clause1342);
            to_key74=to_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, to_key74.tree);


            this->followPush(FOLLOW_expression_in_cycle_clause1344);
            expression75=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression75.tree);


            this->followPush(FOLLOW_default_key_in_cycle_clause1346);
            default_key76=default_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, default_key76.tree);


            this->followPush(FOLLOW_expression_in_cycle_clause1348);
            expression77=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecycle_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression77.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecycle_clauseEx; /* Prevent compiler warnings */
    rulecycle_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cycle_clause */

/**
 * $ANTLR start subquery
 * OracleDML.g:183:1: subquery : subquery_basic_elements ( subquery_operation_part )* -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) ;
 */
OracleDML::subquery_return
OracleDML::subquery()
{
    OracleDML::subquery_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::subquery_basic_elements_return subquery_basic_elements78;
    ImplTraits::TreeTypePtr::pointer subquery_basic_elements78_last = NULL;
    OracleDML::subquery_operation_part_return subquery_operation_part79;
    ImplTraits::TreeTypePtr::pointer subquery_operation_part79_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_operation_part(get_psrstate()->get_treeAdaptor(), "rule subquery_operation_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_basic_elements(get_psrstate()->get_treeAdaptor(), "rule subquery_basic_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:184:5: ( subquery_basic_elements ( subquery_operation_part )* -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) )
        // OracleDML.g:184:10: subquery_basic_elements ( subquery_operation_part )*
        {
            this->followPush(FOLLOW_subquery_basic_elements_in_subquery1368);
            subquery_basic_elements78=subquery_basic_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubqueryEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                subquery_basic_elements78_last = subquery_basic_elements78.tree.get();
                stream_subquery_basic_elements.add(subquery_basic_elements78.tree);
            }

            // OracleDML.g:184:34: ( subquery_operation_part )*

            for (;;)
            {
                ANTLR_UINT32 alt25=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_MINUS:
                case SQL92_RESERVED_INTERSECT:
                case SQL92_RESERVED_UNION:
                	{
                		alt25=1;
                	}
                    break;

                }

                switch (alt25)
                {
            	case 1:
            	    // OracleDML.g:184:34: subquery_operation_part
            	    {
            	        this->followPush(FOLLOW_subquery_operation_part_in_subquery1370);
            	        subquery_operation_part79=subquery_operation_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubqueryEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery_operation_part79_last = subquery_operation_part79.tree.get();
            	            stream_subquery_operation_part.add(subquery_operation_part79.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop25;	/* break out of the loop */
            	    break;
                }
            }
            loop25: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: subquery_operation_part, subquery_basic_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 185:9: -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
            {
            	// OracleDML.g:185:12: ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SUBQUERY, "SUBQUERY"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_basic_elements.nextTree());
            	// OracleDML.g:185:47: ( subquery_operation_part )*
            	while ( stream_subquery_operation_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_operation_part.nextTree());
            	}
            	stream_subquery_operation_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesubqueryEx; /* Prevent compiler warnings */
    rulesubqueryEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery */

/**
 * $ANTLR start subquery_operation_part
 * OracleDML.g:188:1: subquery_operation_part : ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^) subquery_basic_elements ;
 */
OracleDML::subquery_operation_part_return
OracleDML::subquery_operation_part()
{
    OracleDML::subquery_operation_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::union_key_return union_key80;
    ImplTraits::TreeTypePtr::pointer union_key80_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key81;
    ImplTraits::TreeTypePtr::pointer all_key81_last = NULL;
    OracleDML_OracleDMLKeys::intersect_key_return intersect_key82;
    ImplTraits::TreeTypePtr::pointer intersect_key82_last = NULL;
    OracleDML_OracleDMLKeys::minus_key_return minus_key83;
    ImplTraits::TreeTypePtr::pointer minus_key83_last = NULL;
    OracleDML::subquery_basic_elements_return subquery_basic_elements84;
    ImplTraits::TreeTypePtr::pointer subquery_basic_elements84_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:189:5: ( ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^) subquery_basic_elements )
        // OracleDML.g:189:10: ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^) subquery_basic_elements
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:189:10: ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^)
            {
                ANTLR_UINT32 alt27=3;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_UNION:
                	{
                		alt27=1;
                	}
                    break;
                case SQL92_RESERVED_INTERSECT:
                	{
                		alt27=2;
                	}
                    break;
                case PLSQL_RESERVED_MINUS:
                	{
                		alt27=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 27 );
                    ex->set_state( 0 );


                    goto rulesubquery_operation_partEx;

                }

                switch (alt27)
                {
            	case 1:
            	    // OracleDML.g:189:11: union_key ^ ( all_key )?
            	    {
            	        this->followPush(FOLLOW_union_key_in_subquery_operation_part1411);
            	        union_key80=union_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_operation_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(union_key80.tree, root_0);

            	        // OracleDML.g:189:22: ( all_key )?
            	        {
            	            ANTLR_UINT32 alt26=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_ALL:
            	                	{
            	                		alt26=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt26)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:189:22: all_key
            	        	    {
            	        	        this->followPush(FOLLOW_all_key_in_subquery_operation_part1414);
            	        	        all_key81=all_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesubquery_operation_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, all_key81.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:189:31: intersect_key ^
            	    {
            	        this->followPush(FOLLOW_intersect_key_in_subquery_operation_part1417);
            	        intersect_key82=intersect_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_operation_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(intersect_key82.tree, root_0);

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:189:46: minus_key ^
            	    {
            	        this->followPush(FOLLOW_minus_key_in_subquery_operation_part1420);
            	        minus_key83=minus_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_operation_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(minus_key83.tree, root_0);

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_subquery_basic_elements_in_subquery_operation_part1424);
            subquery_basic_elements84=subquery_basic_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubquery_operation_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery_basic_elements84.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesubquery_operation_partEx; /* Prevent compiler warnings */
    rulesubquery_operation_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery_operation_part */

/**
 * $ANTLR start subquery_basic_elements
 * OracleDML.g:192:1: subquery_basic_elements : ( query_block | LEFT_PAREN subquery RIGHT_PAREN );
 */
OracleDML::subquery_basic_elements_return
OracleDML::subquery_basic_elements()
{
    OracleDML::subquery_basic_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN86 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN88 = NULL;
    OracleDML::query_block_return query_block85;
    ImplTraits::TreeTypePtr::pointer query_block85_last = NULL;
    OracleDML::subquery_return subquery87;
    ImplTraits::TreeTypePtr::pointer subquery87_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN86_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN88_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:193:5: ( query_block | LEFT_PAREN subquery RIGHT_PAREN )

            ANTLR_UINT32 alt28;

            alt28=2;

            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt28=1;
            	}
                break;
            case LEFT_PAREN:
            	{
            		alt28=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 28 );
                ex->set_state( 0 );


                goto rulesubquery_basic_elementsEx;

            }

            switch (alt28)
            {
        	case 1:
        	    // OracleDML.g:193:10: query_block
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_query_block_in_subquery_basic_elements1444);
        	        query_block85=query_block();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesubquery_basic_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, query_block85.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:194:10: LEFT_PAREN subquery RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        LEFT_PAREN86 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_subquery_basic_elements1455);
        	        if  (this->hasException())
        	        {
        	            goto rulesubquery_basic_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN86_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN86));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN86_tree);
        	        }


        	        this->followPush(FOLLOW_subquery_in_subquery_basic_elements1457);
        	        subquery87=subquery();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesubquery_basic_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery87.tree);


        	        RIGHT_PAREN88 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1459);
        	        if  (this->hasException())
        	        {
        	            goto rulesubquery_basic_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN88_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN88));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN88_tree);
        	        }


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulesubquery_basic_elementsEx; /* Prevent compiler warnings */
    rulesubquery_basic_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery_basic_elements */

/**
 * $ANTLR start query_block
 * OracleDML.g:197:1: query_block : select_key ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( COMMA selected_element )* ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? -> {mode == 1}? ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) ;
 */
OracleDML::query_block_return
OracleDML::query_block()
{
    OracleDML::query_block_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* ASTERISK93 = NULL;
    ImplTraits::CommonTokenType const* COMMA95 = NULL;
    OracleDML_OracleDMLKeys::select_key_return select_key89;
    ImplTraits::TreeTypePtr::pointer select_key89_last = NULL;
    OracleDML_OracleDMLKeys::distinct_key_return distinct_key90;
    ImplTraits::TreeTypePtr::pointer distinct_key90_last = NULL;
    OracleDML_OracleDMLKeys::unique_key_return unique_key91;
    ImplTraits::TreeTypePtr::pointer unique_key91_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key92;
    ImplTraits::TreeTypePtr::pointer all_key92_last = NULL;
    OracleDML::selected_element_return selected_element94;
    ImplTraits::TreeTypePtr::pointer selected_element94_last = NULL;
    OracleDML::selected_element_return selected_element96;
    ImplTraits::TreeTypePtr::pointer selected_element96_last = NULL;
    OracleDML_OracleDMLCommons::into_clause_return into_clause97;
    ImplTraits::TreeTypePtr::pointer into_clause97_last = NULL;
    OracleDML::from_clause_return from_clause98;
    ImplTraits::TreeTypePtr::pointer from_clause98_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause99;
    ImplTraits::TreeTypePtr::pointer where_clause99_last = NULL;
    OracleDML::hierarchical_query_clause_return hierarchical_query_clause100;
    ImplTraits::TreeTypePtr::pointer hierarchical_query_clause100_last = NULL;
    OracleDML::group_by_clause_return group_by_clause101;
    ImplTraits::TreeTypePtr::pointer group_by_clause101_last = NULL;
    OracleDML::model_clause_return model_clause102;
    ImplTraits::TreeTypePtr::pointer model_clause102_last = NULL;
    ImplTraits::TreeTypePtr ASTERISK93_tree;
    ImplTraits::TreeTypePtr COMMA95_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleTokenStream<ImplTraits> stream_ASTERISK(get_psrstate()->get_treeAdaptor(), "token ASTERISK");
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_from_clause(get_psrstate()->get_treeAdaptor(), "rule from_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_where_clause(get_psrstate()->get_treeAdaptor(), "rule where_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_clause(get_psrstate()->get_treeAdaptor(), "rule into_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_distinct_key(get_psrstate()->get_treeAdaptor(), "rule distinct_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_group_by_clause(get_psrstate()->get_treeAdaptor(), "rule group_by_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_selected_element(get_psrstate()->get_treeAdaptor(), "rule selected_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_unique_key(get_psrstate()->get_treeAdaptor(), "rule unique_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_clause(get_psrstate()->get_treeAdaptor(), "rule model_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_key(get_psrstate()->get_treeAdaptor(), "rule select_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_hierarchical_query_clause(get_psrstate()->get_treeAdaptor(), "rule hierarchical_query_clause");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:199:5: ( select_key ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( COMMA selected_element )* ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? -> {mode == 1}? ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) )
        // OracleDML.g:199:10: select_key ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( COMMA selected_element )* ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )?
        {
            this->followPush(FOLLOW_select_key_in_query_block1487);
            select_key89=select_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_blockEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_key89_last = select_key89.tree.get();
                stream_select_key.add(select_key89.tree);
            }

            // OracleDML.g:200:9: ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )?
            {
                ANTLR_UINT32 alt30=2;
                {
                    ANTLR_UINT32 LA30_0 = this->LA(1);
                    if ( (LA30_0 == SQL92_RESERVED_DISTINCT))
                    {
                        {
                            ANTLR_UINT32 LA30_1 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred2_OracleDML>() )))
                            {
                                alt30=1;
                            }
                        }
                    }
                    else if ( (LA30_0 == SQL92_RESERVED_UNIQUE) && (this->msynpred( antlr3::ClassForwarder<synpred2_OracleDML>() )))
                    {
                        alt30=1;
                    }
                    else if ( (LA30_0 == SQL92_RESERVED_ALL))
                    {
                        {
                            ANTLR_UINT32 LA30_3 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred2_OracleDML>() )))
                            {
                                alt30=1;
                            }
                        }
                    }
                }
                switch (alt30)
                {
            	case 1:
            	    // OracleDML.g:200:10: ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key )
            	    {
            	        // OracleDML.g:200:46: ( distinct_key | unique_key | all_key )
            	        {
            	            ANTLR_UINT32 alt29=3;
            	            switch ( this->LA(1) )
            	            {
            	            case SQL92_RESERVED_DISTINCT:
            	            	{
            	            		alt29=1;
            	            	}
            	                break;
            	            case SQL92_RESERVED_UNIQUE:
            	            	{
            	            		alt29=2;
            	            	}
            	                break;
            	            case SQL92_RESERVED_ALL:
            	            	{
            	            		alt29=3;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 29 );
            	                ex->set_state( 0 );


            	                goto rulequery_blockEx;

            	            }

            	            switch (alt29)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:200:47: distinct_key
            	        	    {
            	        	        this->followPush(FOLLOW_distinct_key_in_query_block1508);
            	        	        distinct_key90=distinct_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_blockEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            distinct_key90_last = distinct_key90.tree.get();
            	        	            stream_distinct_key.add(distinct_key90.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:200:60: unique_key
            	        	    {
            	        	        this->followPush(FOLLOW_unique_key_in_query_block1510);
            	        	        unique_key91=unique_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_blockEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            unique_key91_last = unique_key91.tree.get();
            	        	            stream_unique_key.add(unique_key91.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // OracleDML.g:200:71: all_key
            	        	    {
            	        	        this->followPush(FOLLOW_all_key_in_query_block1512);
            	        	        all_key92=all_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_blockEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            all_key92_last = all_key92.tree.get();
            	        	            stream_all_key.add(all_key92.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:201:9: ( ASTERISK | selected_element ( COMMA selected_element )* )
            {
                ANTLR_UINT32 alt32=2;
                switch ( this->LA(1) )
                {
                case ASTERISK:
                	{
                		alt32=1;
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case REGULAR_ID:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt32=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 32 );
                    ex->set_state( 0 );


                    goto rulequery_blockEx;

                }

                switch (alt32)
                {
            	case 1:
            	    // OracleDML.g:201:10: ASTERISK
            	    {
            	        ASTERISK93 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_query_block1526);
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_ASTERISK.add(ASTERISK93);


            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:201:32: selected_element ( COMMA selected_element )*
            	    {
            	        this->followPush(FOLLOW_selected_element_in_query_block1531);
            	        selected_element94=selected_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            selected_element94_last = selected_element94.tree.get();
            	            stream_selected_element.add(selected_element94.tree);
            	        }

            	        // OracleDML.g:201:49: ( COMMA selected_element )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt31=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt31=1;
            	            	}
            	                break;

            	            }

            	            switch (alt31)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:201:50: COMMA selected_element
            	        	    {
            	        	        COMMA95 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_query_block1534);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_blockEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA95);


            	        	        this->followPush(FOLLOW_selected_element_in_query_block1536);
            	        	        selected_element96=selected_element();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_blockEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            selected_element96_last = selected_element96.tree.get();
            	        	            stream_selected_element.add(selected_element96.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop31;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop31: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // OracleDML.g:202:9: ( into_clause )?
            {
                ANTLR_UINT32 alt33=2;
                {
                    ANTLR_UINT32 LA33_0 = this->LA(1);
                    if ( (LA33_0 == SQL92_RESERVED_INTO))
                    {
                        alt33=1;
                    }
                    else if ( (LA33_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "BULK")))
                    {
                        alt33=1;
                    }
                }
                switch (alt33)
                {
            	case 1:
            	    // OracleDML.g:202:9: into_clause
            	    {
            	        this->followPush(FOLLOW_into_clause_in_query_block1549);
            	        into_clause97=into_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            into_clause97_last = into_clause97.tree.get();
            	            stream_into_clause.add(into_clause97.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_from_clause_in_query_block1560);
            from_clause98=from_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_blockEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                from_clause98_last = from_clause98.tree.get();
                stream_from_clause.add(from_clause98.tree);
            }

            // OracleDML.g:204:9: ( where_clause )?
            {
                ANTLR_UINT32 alt34=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt34=1;
                    	}
                        break;
                }

                switch (alt34)
                {
            	case 1:
            	    // OracleDML.g:204:9: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_query_block1571);
            	        where_clause99=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            where_clause99_last = where_clause99.tree.get();
            	            stream_where_clause.add(where_clause99.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:205:9: ( hierarchical_query_clause )?
            {
                ANTLR_UINT32 alt35=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_CONNECT:
                    	{
                    		alt35=1;
                    	}
                        break;
                    case PLSQL_RESERVED_START:
                    	{
                    		alt35=1;
                    	}
                        break;
                }

                switch (alt35)
                {
            	case 1:
            	    // OracleDML.g:205:9: hierarchical_query_clause
            	    {
            	        this->followPush(FOLLOW_hierarchical_query_clause_in_query_block1583);
            	        hierarchical_query_clause100=hierarchical_query_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            hierarchical_query_clause100_last = hierarchical_query_clause100.tree.get();
            	            stream_hierarchical_query_clause.add(hierarchical_query_clause100.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:206:9: ( group_by_clause )?
            {
                ANTLR_UINT32 alt36=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_GROUP:
                    	{
                    		alt36=1;
                    	}
                        break;
                    case SQL92_RESERVED_HAVING:
                    	{
                    		alt36=1;
                    	}
                        break;
                }

                switch (alt36)
                {
            	case 1:
            	    // OracleDML.g:206:9: group_by_clause
            	    {
            	        this->followPush(FOLLOW_group_by_clause_in_query_block1595);
            	        group_by_clause101=group_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            group_by_clause101_last = group_by_clause101.tree.get();
            	            stream_group_by_clause.add(group_by_clause101.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:207:9: ( model_clause )?
            {
                ANTLR_UINT32 alt37=2;
                switch ( this->LA(1) )
                {
                    case PLSQL_NON_RESERVED_MODEL:
                    	{
                    		alt37=1;
                    	}
                        break;
                }

                switch (alt37)
                {
            	case 1:
            	    // OracleDML.g:207:9: model_clause
            	    {
            	        this->followPush(FOLLOW_model_clause_in_query_block1606);
            	        model_clause102=model_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_blockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_clause102_last = model_clause102.tree.get();
            	            stream_model_clause.add(model_clause102.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: model_clause, select_key, into_clause, group_by_clause, where_clause, group_by_clause, where_clause, hierarchical_query_clause, all_key, distinct_key, hierarchical_query_clause, from_clause, model_clause, ASTERISK, all_key, into_clause, unique_key, unique_key, selected_element, from_clause, distinct_key, select_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 208:9: -> {mode == 1}? ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            if (mode == 1) {
            	// OracleDML.g:208:25: ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_select_key.nextNode(), root_1);
            	// OracleDML.g:208:38: ( distinct_key )?
            	if ( stream_distinct_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_distinct_key.nextTree());
            	}
            	stream_distinct_key.reset();

            	// OracleDML.g:208:52: ( unique_key )?
            	if ( stream_unique_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unique_key.nextTree());
            	}
            	stream_unique_key.reset();

            	// OracleDML.g:208:64: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_ASTERISK.nextNode());
            	// OracleDML.g:209:17: ( into_clause )?
            	if ( stream_into_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_into_clause.nextTree());
            	}
            	stream_into_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_from_clause.nextTree());
            	// OracleDML.g:209:42: ( where_clause )?
            	if ( stream_where_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_where_clause.nextTree());
            	}
            	stream_where_clause.reset();

            	// OracleDML.g:209:56: ( hierarchical_query_clause )?
            	if ( stream_hierarchical_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_hierarchical_query_clause.nextTree());
            	}
            	stream_hierarchical_query_clause.reset();

            	// OracleDML.g:209:83: ( group_by_clause )?
            	if ( stream_group_by_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_group_by_clause.nextTree());
            	}
            	stream_group_by_clause.reset();

            	// OracleDML.g:209:100: ( model_clause )?
            	if ( stream_model_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_clause.nextTree());
            	}
            	stream_model_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 210:9: -> ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            {
            	// OracleDML.g:210:12: ^( select_key ( distinct_key )? ( unique_key )? ( all_key )? ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_select_key.nextNode(), root_1);
            	// OracleDML.g:210:25: ( distinct_key )?
            	if ( stream_distinct_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_distinct_key.nextTree());
            	}
            	stream_distinct_key.reset();

            	// OracleDML.g:210:39: ( unique_key )?
            	if ( stream_unique_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unique_key.nextTree());
            	}
            	stream_unique_key.reset();

            	// OracleDML.g:210:51: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:210:60: ^( SELECT_LIST ( selected_element )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_LIST, "SELECT_LIST"), root_2);
            	if ( !(stream_selected_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "selected_element empty" );
            		goto rulequery_blockEx;
            	}
            	while ( stream_selected_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_selected_element.nextTree());
            	}
            	stream_selected_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:211:17: ( into_clause )?
            	if ( stream_into_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_into_clause.nextTree());
            	}
            	stream_into_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_from_clause.nextTree());
            	// OracleDML.g:211:42: ( where_clause )?
            	if ( stream_where_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_where_clause.nextTree());
            	}
            	stream_where_clause.reset();

            	// OracleDML.g:211:56: ( hierarchical_query_clause )?
            	if ( stream_hierarchical_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_hierarchical_query_clause.nextTree());
            	}
            	stream_hierarchical_query_clause.reset();

            	// OracleDML.g:211:83: ( group_by_clause )?
            	if ( stream_group_by_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_group_by_clause.nextTree());
            	}
            	stream_group_by_clause.reset();

            	// OracleDML.g:211:100: ( model_clause )?
            	if ( stream_model_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_clause.nextTree());
            	}
            	stream_model_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulequery_blockEx; /* Prevent compiler warnings */
    rulequery_blockEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end query_block */

/**
 * $ANTLR start selected_element
 * OracleDML.g:214:1: selected_element : select_list_elements ( column_alias )? -> ^( SELECT_ITEM select_list_elements ( column_alias )? ) ;
 */
OracleDML::selected_element_return
OracleDML::selected_element()
{
    OracleDML::selected_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::select_list_elements_return select_list_elements103;
    ImplTraits::TreeTypePtr::pointer select_list_elements103_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias104;
    ImplTraits::TreeTypePtr::pointer column_alias104_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_list_elements(get_psrstate()->get_treeAdaptor(), "rule select_list_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:215:5: ( select_list_elements ( column_alias )? -> ^( SELECT_ITEM select_list_elements ( column_alias )? ) )
        // OracleDML.g:215:10: select_list_elements ( column_alias )?
        {
            this->followPush(FOLLOW_select_list_elements_in_selected_element1750);
            select_list_elements103=select_list_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleselected_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_list_elements103_last = select_list_elements103.tree.get();
                stream_select_list_elements.add(select_list_elements103.tree);
            }

            // OracleDML.g:215:31: ( column_alias )?
            {
                ANTLR_UINT32 alt38=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt38=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case COMMA:
                    		    case SQL92_RESERVED_FROM:
                    		    case SQL92_RESERVED_INTO:
                    		    	{
                    		    		alt38=1;
                    		    	}
                    		        break;
                    		    case REGULAR_ID:
                    		    	{
                    		    		switch ( this->LA(3) )
                    		    		{
                    		    		    case REGULAR_ID:
                    		    		    	{
                    		    		    		alt38=1;
                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt38)
                {
            	case 1:
            	    // OracleDML.g:215:31: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_selected_element1752);
            	        column_alias104=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias104_last = column_alias104.tree.get();
            	            stream_column_alias.add(column_alias104.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_alias, select_list_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 216:9: -> ^( SELECT_ITEM select_list_elements ( column_alias )? )
            {
            	// OracleDML.g:216:12: ^( SELECT_ITEM select_list_elements ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_ITEM, "SELECT_ITEM"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_list_elements.nextTree());
            	// OracleDML.g:216:47: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleselected_elementEx; /* Prevent compiler warnings */
    ruleselected_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end selected_element */

/**
 * $ANTLR start from_clause
 * OracleDML.g:219:1: from_clause : from_key ^ table_ref_list ;
 */
OracleDML::from_clause_return
OracleDML::from_clause()
{
    OracleDML::from_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::from_key_return from_key105;
    ImplTraits::TreeTypePtr::pointer from_key105_last = NULL;
    OracleDML::table_ref_list_return table_ref_list106;
    ImplTraits::TreeTypePtr::pointer table_ref_list106_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:220:5: ( from_key ^ table_ref_list )
        // OracleDML.g:220:10: from_key ^ table_ref_list
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_from_key_in_from_clause1792);
            from_key105=from_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefrom_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(from_key105.tree, root_0);

            this->followPush(FOLLOW_table_ref_list_in_from_clause1795);
            table_ref_list106=table_ref_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefrom_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref_list106.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefrom_clauseEx; /* Prevent compiler warnings */
    rulefrom_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end from_clause */

/**
 * $ANTLR start select_list_elements
 * OracleDML.g:223:1: select_list_elements : ( ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) ) | expression -> ^( EXPR expression ) );
 */
OracleDML::select_list_elements_return
OracleDML::select_list_elements()
{
    OracleDML::select_list_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* PERIOD108 = NULL;
    ImplTraits::CommonTokenType const* ASTERISK109 = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name107;
    ImplTraits::TreeTypePtr::pointer tableview_name107_last = NULL;
    OracleDML::expression_return expression110;
    ImplTraits::TreeTypePtr::pointer expression110_last = NULL;
    ImplTraits::TreeTypePtr PERIOD108_tree;
    ImplTraits::TreeTypePtr ASTERISK109_tree;
    RewriteRuleTokenStream<ImplTraits> stream_PERIOD(get_psrstate()->get_treeAdaptor(), "token PERIOD");
    RewriteRuleTokenStream<ImplTraits> stream_ASTERISK(get_psrstate()->get_treeAdaptor(), "token ASTERISK");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:224:5: ( ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) ) | expression -> ^( EXPR expression ) )

            ANTLR_UINT32 alt39;

            alt39=2;

            switch ( this->LA(1) )
            {
            case INTRODUCER:
            	{
            		{
            		    ANTLR_UINT32 LA39_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_OracleDML>() )))
            		    {
            		        alt39=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt39=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 39 );
            		        ex->set_state( 1 );


            		        goto ruleselect_list_elementsEx;

            		    }
            		}
            	}
                break;
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA39_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_OracleDML>() )))
            		    {
            		        alt39=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt39=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 39 );
            		        ex->set_state( 2 );


            		        goto ruleselect_list_elementsEx;

            		    }
            		}
            	}
                break;
            case DELIMITED_ID:
            	{
            		{
            		    ANTLR_UINT32 LA39_3 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_OracleDML>() )))
            		    {
            		        alt39=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt39=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 39 );
            		        ex->set_state( 3 );


            		        goto ruleselect_list_elementsEx;

            		    }
            		}
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case EXACT_NUM_LIT:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt39=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 39 );
                ex->set_state( 0 );


                goto ruleselect_list_elementsEx;

            }

            switch (alt39)
            {
        	case 1:
        	    // OracleDML.g:224:10: ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK
        	    {
        	        this->followPush(FOLLOW_tableview_name_in_select_list_elements1824);
        	        tableview_name107=tableview_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_list_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            tableview_name107_last = tableview_name107.tree.get();
        	            stream_tableview_name.add(tableview_name107.tree);
        	        }

        	        PERIOD108 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_select_list_elements1826);
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_list_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_PERIOD.add(PERIOD108);


        	        ASTERISK109 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_select_list_elements1828);
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_list_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_ASTERISK.add(ASTERISK109);


        	        // AST REWRITE
        	        // elements: tableview_name
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 224:76: -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) )
        	        {
        	        	// OracleDML.g:224:79: ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	// OracleDML.g:224:86: ^( DOT_ASTERISK[$ASTERISK] tableview_name )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DOT_ASTERISK, ASTERISK109), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_tableview_name.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:225:10: expression
        	    {
        	        this->followPush(FOLLOW_expression_in_select_list_elements1854);
        	        expression110=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleselect_list_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression110_last = expression110.tree.get();
        	            stream_expression.add(expression110.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 225:21: -> ^( EXPR expression )
        	        {
        	        	// OracleDML.g:225:24: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleselect_list_elementsEx; /* Prevent compiler warnings */
    ruleselect_list_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end select_list_elements */

/**
 * $ANTLR start table_ref_list
 * OracleDML.g:228:1: table_ref_list : table_ref ( COMMA ! table_ref )* ;
 */
OracleDML::table_ref_list_return
OracleDML::table_ref_list()
{
    OracleDML::table_ref_list_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA112 = NULL;
    OracleDML::table_ref_return table_ref111;
    ImplTraits::TreeTypePtr::pointer table_ref111_last = NULL;
    OracleDML::table_ref_return table_ref113;
    ImplTraits::TreeTypePtr::pointer table_ref113_last = NULL;
    ImplTraits::TreeTypePtr COMMA112_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:229:5: ( table_ref ( COMMA ! table_ref )* )
        // OracleDML.g:229:10: table_ref ( COMMA ! table_ref )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_table_ref_in_table_ref_list1882);
            table_ref111=table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_ref_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref111.tree);


            // OracleDML.g:229:20: ( COMMA ! table_ref )*

            for (;;)
            {
                ANTLR_UINT32 alt40=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt40=1;
                	}
                    break;

                }

                switch (alt40)
                {
            	case 1:
            	    // OracleDML.g:229:21: COMMA ! table_ref
            	    {
            	        COMMA112 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_table_ref_list1885);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_table_ref_in_table_ref_list1888);
            	        table_ref113=table_ref();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_ref113.tree);


            	    }
            	    break;

            	default:
            	    goto loop40;	/* break out of the loop */
            	    break;
                }
            }
            loop40: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_listEx; /* Prevent compiler warnings */
    ruletable_ref_listEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_list */

/**
 * $ANTLR start table_ref
 * OracleDML.g:236:1: table_ref : table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )? -> ^( TABLE_REF[ToraType(T_TABLE_REF)] table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? ) ;
 */
OracleDML::table_ref_return
OracleDML::table_ref()
{
    OracleDML::table_ref_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::table_ref_aux_return table_ref_aux114;
    ImplTraits::TreeTypePtr::pointer table_ref_aux114_last = NULL;
    OracleDML::join_clause_return join_clause115;
    ImplTraits::TreeTypePtr::pointer join_clause115_last = NULL;
    OracleDML::pivot_clause_return pivot_clause116;
    ImplTraits::TreeTypePtr::pointer pivot_clause116_last = NULL;
    OracleDML::unpivot_clause_return unpivot_clause117;
    ImplTraits::TreeTypePtr::pointer unpivot_clause117_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_join_clause(get_psrstate()->get_treeAdaptor(), "rule join_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_ref_aux(get_psrstate()->get_treeAdaptor(), "rule table_ref_aux");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:237:5: ( table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )? -> ^( TABLE_REF[ToraType(T_TABLE_REF)] table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? ) )
        // OracleDML.g:237:10: table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )?
        {
            this->followPush(FOLLOW_table_ref_aux_in_table_ref1914);
            table_ref_aux114=table_ref_aux();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletable_refEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_ref_aux114_last = table_ref_aux114.tree.get();
                stream_table_ref_aux.add(table_ref_aux114.tree);
            }

            // OracleDML.g:237:24: ( join_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt41=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    ANTLR_UINT32 LA41_2 = this->LA(2);
                		    if ( ((((toUpper(LT(1)->getText()) == "NATURAL"))||((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "CROSS"))||((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT"))||((toUpper(LT(1)->getText()) == "INNER")))))
                		    {
                		        alt41=1;
                		    }

                		}
                	}
                    break;

                }

                switch (alt41)
                {
            	case 1:
            	    // OracleDML.g:237:24: join_clause
            	    {
            	        this->followPush(FOLLOW_join_clause_in_table_ref1916);
            	        join_clause115=join_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            join_clause115_last = join_clause115.tree.get();
            	            stream_join_clause.add(join_clause115.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:237:37: ( pivot_clause | unpivot_clause )?
            {
                ANTLR_UINT32 alt42=3;
                switch ( this->LA(1) )
                {
                    case PLSQL_NON_RESERVED_PIVOT:
                    	{
                    		alt42=1;
                    	}
                        break;
                    case PLSQL_NON_RESERVED_UNPIVOT:
                    	{
                    		alt42=2;
                    	}
                        break;
                }

                switch (alt42)
                {
            	case 1:
            	    // OracleDML.g:237:38: pivot_clause
            	    {
            	        this->followPush(FOLLOW_pivot_clause_in_table_ref1920);
            	        pivot_clause116=pivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_clause116_last = pivot_clause116.tree.get();
            	            stream_pivot_clause.add(pivot_clause116.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:237:51: unpivot_clause
            	    {
            	        this->followPush(FOLLOW_unpivot_clause_in_table_ref1922);
            	        unpivot_clause117=unpivot_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            unpivot_clause117_last = unpivot_clause117.tree.get();
            	            stream_unpivot_clause.add(unpivot_clause117.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: join_clause, table_ref_aux, unpivot_clause, pivot_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 238:9: -> ^( TABLE_REF[ToraType(T_TABLE_REF)] table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? )
            {
            	// OracleDML.g:238:12: ^( TABLE_REF[ToraType(T_TABLE_REF)] table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF, ToraType(T_TABLE_REF)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_ref_aux.nextTree());
            	// OracleDML.g:238:61: ( join_clause )*
            	while ( stream_join_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_join_clause.nextTree());
            	}
            	stream_join_clause.reset();

            	// OracleDML.g:238:74: ( pivot_clause )?
            	if ( stream_pivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_clause.nextTree());
            	}
            	stream_pivot_clause.reset();

            	// OracleDML.g:238:88: ( unpivot_clause )?
            	if ( stream_unpivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_clause.nextTree());
            	}
            	stream_unpivot_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_refEx; /* Prevent compiler warnings */
    ruletable_refEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref */

/**
 * $ANTLR start table_ref_aux
 * OracleDML.g:241:1: table_ref_aux : ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? ) ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT ( dml_table_expression_clause )? ( table_ref )? ( subquery_operation_part )* ( only_key )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) ;
 */
OracleDML::table_ref_aux_return
OracleDML::table_ref_aux()
{
    OracleDML::table_ref_aux_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN121 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN124 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN128 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN130 = NULL;
    OracleDML::dml_table_expression_clause_return dml_table_expression_clause118;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause118_last = NULL;
    OracleDML::pivot_clause_return pivot_clause119;
    ImplTraits::TreeTypePtr::pointer pivot_clause119_last = NULL;
    OracleDML::unpivot_clause_return unpivot_clause120;
    ImplTraits::TreeTypePtr::pointer unpivot_clause120_last = NULL;
    OracleDML::table_ref_return table_ref122;
    ImplTraits::TreeTypePtr::pointer table_ref122_last = NULL;
    OracleDML::subquery_operation_part_return subquery_operation_part123;
    ImplTraits::TreeTypePtr::pointer subquery_operation_part123_last = NULL;
    OracleDML::pivot_clause_return pivot_clause125;
    ImplTraits::TreeTypePtr::pointer pivot_clause125_last = NULL;
    OracleDML::unpivot_clause_return unpivot_clause126;
    ImplTraits::TreeTypePtr::pointer unpivot_clause126_last = NULL;
    OracleDML_OracleDMLKeys::only_key_return only_key127;
    ImplTraits::TreeTypePtr::pointer only_key127_last = NULL;
    OracleDML::dml_table_expression_clause_return dml_table_expression_clause129;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause129_last = NULL;
    OracleDML::dml_table_expression_clause_return dml_table_expression_clause131;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause131_last = NULL;
    OracleDML::pivot_clause_return pivot_clause132;
    ImplTraits::TreeTypePtr::pointer pivot_clause132_last = NULL;
    OracleDML::unpivot_clause_return unpivot_clause133;
    ImplTraits::TreeTypePtr::pointer unpivot_clause133_last = NULL;
    OracleDML::flashback_query_clause_return flashback_query_clause134;
    ImplTraits::TreeTypePtr::pointer flashback_query_clause134_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias135;
    ImplTraits::TreeTypePtr::pointer table_alias135_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN121_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN124_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN128_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN130_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_dml_table_expression_clause(get_psrstate()->get_treeAdaptor(), "rule dml_table_expression_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_operation_part(get_psrstate()->get_treeAdaptor(), "rule subquery_operation_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_ref(get_psrstate()->get_treeAdaptor(), "rule table_ref");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_only_key(get_psrstate()->get_treeAdaptor(), "rule only_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_flashback_query_clause(get_psrstate()->get_treeAdaptor(), "rule flashback_query_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:242:5: ( ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? ) ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT ( dml_table_expression_clause )? ( table_ref )? ( subquery_operation_part )* ( only_key )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? ) )
        // OracleDML.g:243:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? ) ( flashback_query_clause )* ({...}? table_alias )?
        {
            // OracleDML.g:243:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? )
            {
                ANTLR_UINT32 alt47=4;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_TABLE:
                	{
                		{
                		    ANTLR_UINT32 LA47_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt47=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt47=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 47 );
                		        ex->set_state( 1 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case SQL92_RESERVED_THE:
                	{
                		{
                		    ANTLR_UINT32 LA47_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt47=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt47=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 47 );
                		        ex->set_state( 2 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA47_3 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt47=1;
                		    }
                		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_OracleDML>() )))
                		    {
                		        alt47=2;
                		    }
                		    else if ( (true))
                		    {
                		        alt47=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 47 );
                		        ex->set_state( 3 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case INTRODUCER:
                	{
                		{
                		    ANTLR_UINT32 LA47_4 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt47=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt47=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 47 );
                		        ex->set_state( 4 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA47_5 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt47=1;
                		    }
                		    else if ( (( (this->msynpred( antlr3::ClassForwarder<synpred6_OracleDML>() )) && ((toUpper(LT(1)->getText()) == "ONLY")) )))
                		    {
                		        alt47=3;
                		    }
                		    else if ( (true))
                		    {
                		        alt47=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 47 );
                		        ex->set_state( 5 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;
                case DELIMITED_ID:
                	{
                		{
                		    ANTLR_UINT32 LA47_6 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred4_OracleDML>() )))
                		    {
                		        alt47=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt47=4;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 47 );
                		        ex->set_state( 6 );


                		        goto ruletable_ref_auxEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 47 );
                    ex->set_state( 0 );


                    goto ruletable_ref_auxEx;

                }

                switch (alt47)
                {
            	case 1:
            	    // OracleDML.g:243:10: ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )?
            	    {
            	        this->followPush(FOLLOW_dml_table_expression_clause_in_table_ref_aux1988);
            	        dml_table_expression_clause118=dml_table_expression_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            dml_table_expression_clause118_last = dml_table_expression_clause118.tree.get();
            	            stream_dml_table_expression_clause.add(dml_table_expression_clause118.tree);
            	        }

            	        // OracleDML.g:243:76: ( pivot_clause | unpivot_clause )?
            	        {
            	            ANTLR_UINT32 alt43=3;
            	            switch ( this->LA(1) )
            	            {
            	                case PLSQL_NON_RESERVED_PIVOT:
            	                	{
            	                		alt43=1;
            	                	}
            	                    break;
            	                case PLSQL_NON_RESERVED_UNPIVOT:
            	                	{
            	                		alt43=2;
            	                	}
            	                    break;
            	            }

            	            switch (alt43)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:243:77: pivot_clause
            	        	    {
            	        	        this->followPush(FOLLOW_pivot_clause_in_table_ref_aux1991);
            	        	        pivot_clause119=pivot_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruletable_ref_auxEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            pivot_clause119_last = pivot_clause119.tree.get();
            	        	            stream_pivot_clause.add(pivot_clause119.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:243:90: unpivot_clause
            	        	    {
            	        	        this->followPush(FOLLOW_unpivot_clause_in_table_ref_aux1993);
            	        	        unpivot_clause120=unpivot_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruletable_ref_auxEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            unpivot_clause120_last = unpivot_clause120.tree.get();
            	        	            stream_unpivot_clause.add(unpivot_clause120.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:244:10: ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )?
            	    {
            	        LEFT_PAREN121 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_table_ref_aux2012);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN121);


            	        this->followPush(FOLLOW_table_ref_in_table_ref_aux2014);
            	        table_ref122=table_ref();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_ref122_last = table_ref122.tree.get();
            	            stream_table_ref.add(table_ref122.tree);
            	        }

            	        // OracleDML.g:244:47: ( subquery_operation_part )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt44=2;
            	            switch ( this->LA(1) )
            	            {
            	            case PLSQL_RESERVED_MINUS:
            	            case SQL92_RESERVED_INTERSECT:
            	            case SQL92_RESERVED_UNION:
            	            	{
            	            		alt44=1;
            	            	}
            	                break;

            	            }

            	            switch (alt44)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:244:47: subquery_operation_part
            	        	    {
            	        	        this->followPush(FOLLOW_subquery_operation_part_in_table_ref_aux2016);
            	        	        subquery_operation_part123=subquery_operation_part();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruletable_ref_auxEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            subquery_operation_part123_last = subquery_operation_part123.tree.get();
            	        	            stream_subquery_operation_part.add(subquery_operation_part123.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop44;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop44: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN124 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_table_ref_aux2019);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN124);


            	        // OracleDML.g:244:84: ( pivot_clause | unpivot_clause )?
            	        {
            	            ANTLR_UINT32 alt45=3;
            	            switch ( this->LA(1) )
            	            {
            	                case PLSQL_NON_RESERVED_PIVOT:
            	                	{
            	                		alt45=1;
            	                	}
            	                    break;
            	                case PLSQL_NON_RESERVED_UNPIVOT:
            	                	{
            	                		alt45=2;
            	                	}
            	                    break;
            	            }

            	            switch (alt45)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:244:85: pivot_clause
            	        	    {
            	        	        this->followPush(FOLLOW_pivot_clause_in_table_ref_aux2022);
            	        	        pivot_clause125=pivot_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruletable_ref_auxEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            pivot_clause125_last = pivot_clause125.tree.get();
            	        	            stream_pivot_clause.add(pivot_clause125.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:244:98: unpivot_clause
            	        	    {
            	        	        this->followPush(FOLLOW_unpivot_clause_in_table_ref_aux2024);
            	        	        unpivot_clause126=unpivot_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruletable_ref_auxEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            unpivot_clause126_last = unpivot_clause126.tree.get();
            	        	            stream_unpivot_clause.add(unpivot_clause126.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:245:10: ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN
            	    {
            	        this->followPush(FOLLOW_only_key_in_table_ref_aux2045);
            	        only_key127=only_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            only_key127_last = only_key127.tree.get();
            	            stream_only_key.add(only_key127.tree);
            	        }

            	        LEFT_PAREN128 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_table_ref_aux2047);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN128);


            	        this->followPush(FOLLOW_dml_table_expression_clause_in_table_ref_aux2049);
            	        dml_table_expression_clause129=dml_table_expression_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            dml_table_expression_clause129_last = dml_table_expression_clause129.tree.get();
            	            stream_dml_table_expression_clause.add(dml_table_expression_clause129.tree);
            	        }

            	        RIGHT_PAREN130 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_table_ref_aux2051);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN130);


            	    }
            	    break;
            	case 4:
            	    // OracleDML.g:246:10: dml_table_expression_clause ( pivot_clause | unpivot_clause )?
            	    {
            	        this->followPush(FOLLOW_dml_table_expression_clause_in_table_ref_aux2062);
            	        dml_table_expression_clause131=dml_table_expression_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            dml_table_expression_clause131_last = dml_table_expression_clause131.tree.get();
            	            stream_dml_table_expression_clause.add(dml_table_expression_clause131.tree);
            	        }

            	        // OracleDML.g:246:38: ( pivot_clause | unpivot_clause )?
            	        {
            	            ANTLR_UINT32 alt46=3;
            	            switch ( this->LA(1) )
            	            {
            	                case PLSQL_NON_RESERVED_PIVOT:
            	                	{
            	                		alt46=1;
            	                	}
            	                    break;
            	                case PLSQL_NON_RESERVED_UNPIVOT:
            	                	{
            	                		alt46=2;
            	                	}
            	                    break;
            	            }

            	            switch (alt46)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:246:39: pivot_clause
            	        	    {
            	        	        this->followPush(FOLLOW_pivot_clause_in_table_ref_aux2065);
            	        	        pivot_clause132=pivot_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruletable_ref_auxEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            pivot_clause132_last = pivot_clause132.tree.get();
            	        	            stream_pivot_clause.add(pivot_clause132.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:246:52: unpivot_clause
            	        	    {
            	        	        this->followPush(FOLLOW_unpivot_clause_in_table_ref_aux2067);
            	        	        unpivot_clause133=unpivot_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruletable_ref_auxEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            unpivot_clause133_last = unpivot_clause133.tree.get();
            	        	            stream_unpivot_clause.add(unpivot_clause133.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:248:9: ( flashback_query_clause )*

            for (;;)
            {
                ANTLR_UINT32 alt48=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                		    */
                		    ANTLR_UINT32 LA48_2 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "VERSIONS")))
                		    {
                		        alt48=1;
                		    }

                		}
                	}
                    break;
                case SQL92_RESERVED_AS:
                	{
                		alt48=1;
                	}
                    break;

                }

                switch (alt48)
                {
            	case 1:
            	    // OracleDML.g:248:9: flashback_query_clause
            	    {
            	        this->followPush(FOLLOW_flashback_query_clause_in_table_ref_aux2085);
            	        flashback_query_clause134=flashback_query_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            flashback_query_clause134_last = flashback_query_clause134.tree.get();
            	            stream_flashback_query_clause.add(flashback_query_clause134.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop48;	/* break out of the loop */
            	    break;
                }
            }
            loop48: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:249:9: ({...}? table_alias )?
            {
                ANTLR_UINT32 alt49=2;
                switch ( this->LA(1) )
                {
                    case INTRODUCER:
                    	{
                    		{
                    		    ANTLR_UINT32 LA49_1 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt49=1;
                    		    }
                    		}
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA49_2 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt49=1;
                    		    }
                    		}
                    	}
                        break;
                    case DELIMITED_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA49_3 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt49=1;
                    		    }
                    		}
                    	}
                        break;
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		{
                    		    ANTLR_UINT32 LA49_4 = this->LA(2);
                    		    if ( ((isTableAlias(LT(1), LT(2)))))
                    		    {
                    		        alt49=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt49)
                {
            	case 1:
            	    // OracleDML.g:249:10: {...}? table_alias
            	    {
            	        if ( !((isTableAlias(LT(1), LT(2)))) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "isTableAlias(LT(1), LT(2))" );
            	                ex->set_ruleName( "table_ref_aux" );


            	        }

            	        this->followPush(FOLLOW_table_alias_in_table_ref_aux2099);
            	        table_alias135=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_ref_auxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias135_last = table_alias135.tree.get();
            	            stream_table_alias.add(table_alias135.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: flashback_query_clause, only_key, dml_table_expression_clause, table_alias, unpivot_clause, pivot_clause, table_ref, subquery_operation_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 250:9: -> ^( TABLE_REF_ELEMENT ( dml_table_expression_clause )? ( table_ref )? ( subquery_operation_part )* ( only_key )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            {
            	// OracleDML.g:250:12: ^( TABLE_REF_ELEMENT ( dml_table_expression_clause )? ( table_ref )? ( subquery_operation_part )* ( only_key )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ( table_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF_ELEMENT, "TABLE_REF_ELEMENT"), root_1);
            	// OracleDML.g:250:32: ( dml_table_expression_clause )?
            	if ( stream_dml_table_expression_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_dml_table_expression_clause.nextTree());
            	}
            	stream_dml_table_expression_clause.reset();

            	// OracleDML.g:250:61: ( table_ref )?
            	if ( stream_table_ref.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_ref.nextTree());
            	}
            	stream_table_ref.reset();

            	// OracleDML.g:250:72: ( subquery_operation_part )*
            	while ( stream_subquery_operation_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_operation_part.nextTree());
            	}
            	stream_subquery_operation_part.reset();

            	// OracleDML.g:250:97: ( only_key )?
            	if ( stream_only_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_only_key.nextTree());
            	}
            	stream_only_key.reset();

            	// OracleDML.g:250:107: ( pivot_clause )?
            	if ( stream_pivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_clause.nextTree());
            	}
            	stream_pivot_clause.reset();

            	// OracleDML.g:250:121: ( unpivot_clause )?
            	if ( stream_unpivot_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_clause.nextTree());
            	}
            	stream_unpivot_clause.reset();

            	// OracleDML.g:250:137: ( flashback_query_clause )*
            	while ( stream_flashback_query_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_flashback_query_clause.nextTree());
            	}
            	stream_flashback_query_clause.reset();

            	// OracleDML.g:250:161: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_ref_auxEx; /* Prevent compiler warnings */
    ruletable_ref_auxEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_ref_aux */

/**
 * $ANTLR start join_clause
 * OracleDML.g:253:1: join_clause : (qpc1= query_partition_clause )? ( cross_key | natural_key )? ( inner_key | outer_join_type )? join_key table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )* -> ^( JOIN_DEF[$join_key.start] ( $qpc1)? ( cross_key )? ( natural_key )? ( inner_key )? ( outer_join_type )? table_ref_aux ( $qpc2)? ( join_on_part )* ( join_using_part )* ) ;
 */
OracleDML::join_clause_return
OracleDML::join_clause()
{
    OracleDML::join_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::query_partition_clause_return qpc1;
    ImplTraits::TreeTypePtr::pointer qpc1_last = NULL;
    OracleDML::query_partition_clause_return qpc2;
    ImplTraits::TreeTypePtr::pointer qpc2_last = NULL;
    OracleDML_OracleDMLKeys::cross_key_return cross_key136;
    ImplTraits::TreeTypePtr::pointer cross_key136_last = NULL;
    OracleDML_OracleDMLKeys::natural_key_return natural_key137;
    ImplTraits::TreeTypePtr::pointer natural_key137_last = NULL;
    OracleDML_OracleDMLKeys::inner_key_return inner_key138;
    ImplTraits::TreeTypePtr::pointer inner_key138_last = NULL;
    OracleDML::outer_join_type_return outer_join_type139;
    ImplTraits::TreeTypePtr::pointer outer_join_type139_last = NULL;
    OracleDML_OracleDMLKeys::join_key_return join_key140;
    ImplTraits::TreeTypePtr::pointer join_key140_last = NULL;
    OracleDML::table_ref_aux_return table_ref_aux141;
    ImplTraits::TreeTypePtr::pointer table_ref_aux141_last = NULL;
    OracleDML::join_on_part_return join_on_part142;
    ImplTraits::TreeTypePtr::pointer join_on_part142_last = NULL;
    OracleDML::join_using_part_return join_using_part143;
    ImplTraits::TreeTypePtr::pointer join_using_part143_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_inner_key(get_psrstate()->get_treeAdaptor(), "rule inner_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_join_using_part(get_psrstate()->get_treeAdaptor(), "rule join_using_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_join_on_part(get_psrstate()->get_treeAdaptor(), "rule join_on_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_join_key(get_psrstate()->get_treeAdaptor(), "rule join_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_outer_join_type(get_psrstate()->get_treeAdaptor(), "rule outer_join_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_query_partition_clause(get_psrstate()->get_treeAdaptor(), "rule query_partition_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_cross_key(get_psrstate()->get_treeAdaptor(), "rule cross_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_natural_key(get_psrstate()->get_treeAdaptor(), "rule natural_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_ref_aux(get_psrstate()->get_treeAdaptor(), "rule table_ref_aux");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:254:5: ( (qpc1= query_partition_clause )? ( cross_key | natural_key )? ( inner_key | outer_join_type )? join_key table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )* -> ^( JOIN_DEF[$join_key.start] ( $qpc1)? ( cross_key )? ( natural_key )? ( inner_key )? ( outer_join_type )? table_ref_aux ( $qpc2)? ( join_on_part )* ( join_using_part )* ) )
        // OracleDML.g:254:9: (qpc1= query_partition_clause )? ( cross_key | natural_key )? ( inner_key | outer_join_type )? join_key table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )*
        {
            // OracleDML.g:254:13: (qpc1= query_partition_clause )?
            {
                ANTLR_UINT32 alt50=2;
                {
                    ANTLR_UINT32 LA50_0 = this->LA(1);
                    if ( (LA50_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "NATURAL"))||((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "CROSS"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT"))||((toUpper(LT(1)->getText()) == "INNER")))))
                    {
                        {
                            ANTLR_UINT32 LA50_1 = this->LA(2);
                            if ( (LA50_1 == SQL92_RESERVED_BY) && ((toUpper(LT(1)->getText()) == "PARTITION")))
                            {
                                alt50=1;
                            }
                        }
                    }
                }
                switch (alt50)
                {
            	case 1:
            	    // OracleDML.g:254:13: qpc1= query_partition_clause
            	    {
            	        this->followPush(FOLLOW_query_partition_clause_in_join_clause2160);
            	        qpc1=query_partition_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            qpc1_last = qpc1.tree.get();
            	            stream_query_partition_clause.add(qpc1.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:255:9: ( cross_key | natural_key )?
            {
                ANTLR_UINT32 alt51=3;
                {
                    ANTLR_UINT32 LA51_0 = this->LA(1);
                    if ( (LA51_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "NATURAL"))||((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "CROSS"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT"))||((toUpper(LT(1)->getText()) == "INNER")))))
                    {
                        {
                            ANTLR_UINT32 LA51_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "CROSS")))
                            {
                                alt51=1;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "NATURAL")))
                            {
                                alt51=2;
                            }
                        }
                    }
                }
                switch (alt51)
                {
            	case 1:
            	    // OracleDML.g:255:10: cross_key
            	    {
            	        this->followPush(FOLLOW_cross_key_in_join_clause2172);
            	        cross_key136=cross_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            cross_key136_last = cross_key136.tree.get();
            	            stream_cross_key.add(cross_key136.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:255:20: natural_key
            	    {
            	        this->followPush(FOLLOW_natural_key_in_join_clause2174);
            	        natural_key137=natural_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            natural_key137_last = natural_key137.tree.get();
            	            stream_natural_key.add(natural_key137.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:255:34: ( inner_key | outer_join_type )?
            {
                ANTLR_UINT32 alt52=3;
                {
                    ANTLR_UINT32 LA52_0 = this->LA(1);
                    if ( (LA52_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT"))||((toUpper(LT(1)->getText()) == "INNER")))))
                    {
                        {
                            ANTLR_UINT32 LA52_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "INNER")))
                            {
                                alt52=1;
                            }
                            else if ( ((((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT")))))
                            {
                                alt52=2;
                            }
                        }
                    }
                }
                switch (alt52)
                {
            	case 1:
            	    // OracleDML.g:255:35: inner_key
            	    {
            	        this->followPush(FOLLOW_inner_key_in_join_clause2179);
            	        inner_key138=inner_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            inner_key138_last = inner_key138.tree.get();
            	            stream_inner_key.add(inner_key138.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:255:45: outer_join_type
            	    {
            	        this->followPush(FOLLOW_outer_join_type_in_join_clause2181);
            	        outer_join_type139=outer_join_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            outer_join_type139_last = outer_join_type139.tree.get();
            	            stream_outer_join_type.add(outer_join_type139.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_join_key_in_join_clause2185);
            join_key140=join_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                join_key140_last = join_key140.tree.get();
                stream_join_key.add(join_key140.tree);
            }

            this->followPush(FOLLOW_table_ref_aux_in_join_clause2195);
            table_ref_aux141=table_ref_aux();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_ref_aux141_last = table_ref_aux141.tree.get();
                stream_table_ref_aux.add(table_ref_aux141.tree);
            }

            // OracleDML.g:257:13: (qpc2= query_partition_clause )?
            {
                ANTLR_UINT32 alt53=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA53_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "PARTITION")))
                    		    {
                    		        alt53=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt53)
                {
            	case 1:
            	    // OracleDML.g:257:13: qpc2= query_partition_clause
            	    {
            	        this->followPush(FOLLOW_query_partition_clause_in_join_clause2207);
            	        qpc2=query_partition_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            qpc2_last = qpc2.tree.get();
            	            stream_query_partition_clause.add(qpc2.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:258:5: ( join_on_part | join_using_part )*

            for (;;)
            {
                ANTLR_UINT32 alt54=3;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_ON:
                	{
                		alt54=1;
                	}
                    break;
                case PLSQL_NON_RESERVED_USING:
                	{
                		alt54=2;
                	}
                    break;

                }

                switch (alt54)
                {
            	case 1:
            	    // OracleDML.g:258:10: join_on_part
            	    {
            	        this->followPush(FOLLOW_join_on_part_in_join_clause2219);
            	        join_on_part142=join_on_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            join_on_part142_last = join_on_part142.tree.get();
            	            stream_join_on_part.add(join_on_part142.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:259:10: join_using_part
            	    {
            	        this->followPush(FOLLOW_join_using_part_in_join_clause2230);
            	        join_using_part143=join_using_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            join_using_part143_last = join_using_part143.tree.get();
            	            stream_join_using_part.add(join_using_part143.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop54;	/* break out of the loop */
            	    break;
                }
            }
            loop54: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: outer_join_type, inner_key, natural_key, qpc1, qpc2, table_ref_aux, join_using_part, join_on_part, cross_key
            // token labels: 
            // rule labels: retval, qpc1, qpc2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
            RewriteRuleSubtreeStream<ImplTraits> stream_qpc1(get_psrstate()->get_treeAdaptor(), "rule qpc1",qpc1_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_qpc2(get_psrstate()->get_treeAdaptor(), "rule qpc2",qpc2_last); // rewrite alias

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 261:9: -> ^( JOIN_DEF[$join_key.start] ( $qpc1)? ( cross_key )? ( natural_key )? ( inner_key )? ( outer_join_type )? table_ref_aux ( $qpc2)? ( join_on_part )* ( join_using_part )* )
            {
            	// OracleDML.g:261:12: ^( JOIN_DEF[$join_key.start] ( $qpc1)? ( cross_key )? ( natural_key )? ( inner_key )? ( outer_join_type )? table_ref_aux ( $qpc2)? ( join_on_part )* ( join_using_part )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(JOIN_DEF, (join_key140.start)), root_1);
            	// OracleDML.g:261:41: ( $qpc1)?
            	if ( stream_qpc1.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_qpc1.nextTree());
            	}
            	stream_qpc1.reset();

            	// OracleDML.g:261:47: ( cross_key )?
            	if ( stream_cross_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cross_key.nextTree());
            	}
            	stream_cross_key.reset();

            	// OracleDML.g:261:58: ( natural_key )?
            	if ( stream_natural_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_natural_key.nextTree());
            	}
            	stream_natural_key.reset();

            	// OracleDML.g:261:71: ( inner_key )?
            	if ( stream_inner_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_inner_key.nextTree());
            	}
            	stream_inner_key.reset();

            	// OracleDML.g:261:82: ( outer_join_type )?
            	if ( stream_outer_join_type.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_outer_join_type.nextTree());
            	}
            	stream_outer_join_type.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_ref_aux.nextTree());
            	// OracleDML.g:261:114: ( $qpc2)?
            	if ( stream_qpc2.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_qpc2.nextTree());
            	}
            	stream_qpc2.reset();

            	// OracleDML.g:261:120: ( join_on_part )*
            	while ( stream_join_on_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_join_on_part.nextTree());
            	}
            	stream_join_on_part.reset();

            	// OracleDML.g:261:134: ( join_using_part )*
            	while ( stream_join_using_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_join_using_part.nextTree());
            	}
            	stream_join_using_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulejoin_clauseEx; /* Prevent compiler warnings */
    rulejoin_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end join_clause */

/**
 * $ANTLR start join_on_part
 * OracleDML.g:264:1: join_on_part : on_key condition -> ^( on_key ^( LOGIC_EXPR condition ) ) ;
 */
OracleDML::join_on_part_return
OracleDML::join_on_part()
{
    OracleDML::join_on_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::on_key_return on_key144;
    ImplTraits::TreeTypePtr::pointer on_key144_last = NULL;
    OracleDML::condition_return condition145;
    ImplTraits::TreeTypePtr::pointer condition145_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");
    RewriteRuleSubtreeStream<ImplTraits> stream_on_key(get_psrstate()->get_treeAdaptor(), "rule on_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:265:5: ( on_key condition -> ^( on_key ^( LOGIC_EXPR condition ) ) )
        // OracleDML.g:265:10: on_key condition
        {
            this->followPush(FOLLOW_on_key_in_join_on_part2300);
            on_key144=on_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_on_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                on_key144_last = on_key144.tree.get();
                stream_on_key.add(on_key144.tree);
            }

            this->followPush(FOLLOW_condition_in_join_on_part2302);
            condition145=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_on_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition145_last = condition145.tree.get();
                stream_condition.add(condition145.tree);
            }

            // AST REWRITE
            // elements: condition, on_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 266:9: -> ^( on_key ^( LOGIC_EXPR condition ) )
            {
            	// OracleDML.g:266:12: ^( on_key ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_on_key.nextNode(), root_1);
            	// OracleDML.g:266:21: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulejoin_on_partEx; /* Prevent compiler warnings */
    rulejoin_on_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end join_on_part */

/**
 * $ANTLR start join_using_part
 * OracleDML.g:269:1: join_using_part : using_key ^ LEFT_PAREN column_name ( COMMA ! column_name )* RIGHT_PAREN ;
 */
OracleDML::join_using_part_return
OracleDML::join_using_part()
{
    OracleDML::join_using_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN147 = NULL;
    ImplTraits::CommonTokenType const* COMMA149 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN151 = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key146;
    ImplTraits::TreeTypePtr::pointer using_key146_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name148;
    ImplTraits::TreeTypePtr::pointer column_name148_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name150;
    ImplTraits::TreeTypePtr::pointer column_name150_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN147_tree;
    ImplTraits::TreeTypePtr COMMA149_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN151_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:270:5: ( using_key ^ LEFT_PAREN column_name ( COMMA ! column_name )* RIGHT_PAREN )
        // OracleDML.g:270:10: using_key ^ LEFT_PAREN column_name ( COMMA ! column_name )* RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_using_key_in_join_using_part2343);
            using_key146=using_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_using_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(using_key146.tree, root_0);

            LEFT_PAREN147 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_join_using_part2346);
            if  (this->hasException())
            {
                goto rulejoin_using_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN147_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN147));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN147_tree);
            }


            this->followPush(FOLLOW_column_name_in_join_using_part2348);
            column_name148=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulejoin_using_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name148.tree);


            // OracleDML.g:270:44: ( COMMA ! column_name )*

            for (;;)
            {
                ANTLR_UINT32 alt55=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt55=1;
                	}
                    break;

                }

                switch (alt55)
                {
            	case 1:
            	    // OracleDML.g:270:45: COMMA ! column_name
            	    {
            	        COMMA149 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_join_using_part2351);
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_using_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_column_name_in_join_using_part2354);
            	        column_name150=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulejoin_using_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name150.tree);


            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN151 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_join_using_part2358);
            if  (this->hasException())
            {
                goto rulejoin_using_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN151_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN151));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN151_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulejoin_using_partEx; /* Prevent compiler warnings */
    rulejoin_using_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end join_using_part */

/**
 * $ANTLR start outer_join_type
 * OracleDML.g:273:1: outer_join_type : ( full_key | left_key | right_key ) ( outer_key !)? ;
 */
OracleDML::outer_join_type_return
OracleDML::outer_join_type()
{
    OracleDML::outer_join_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::full_key_return full_key152;
    ImplTraits::TreeTypePtr::pointer full_key152_last = NULL;
    OracleDML_OracleDMLKeys::left_key_return left_key153;
    ImplTraits::TreeTypePtr::pointer left_key153_last = NULL;
    OracleDML_OracleDMLKeys::right_key_return right_key154;
    ImplTraits::TreeTypePtr::pointer right_key154_last = NULL;
    OracleDML_OracleDMLKeys::outer_key_return outer_key155;
    ImplTraits::TreeTypePtr::pointer outer_key155_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:274:5: ( ( full_key | left_key | right_key ) ( outer_key !)? )
        // OracleDML.g:275:5: ( full_key | left_key | right_key ) ( outer_key !)?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:275:5: ( full_key | left_key | right_key )
            {
                ANTLR_UINT32 alt56=3;
                {
                    ANTLR_UINT32 LA56_0 = this->LA(1);
                    if ( (LA56_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "FULL"))||((toUpper(LT(1)->getText()) == "LEFT"))||((toUpper(LT(1)->getText()) == "RIGHT")))))
                    {
                        {
                            ANTLR_UINT32 LA56_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "FULL")))
                            {
                                alt56=1;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "LEFT")))
                            {
                                alt56=2;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "RIGHT")))
                            {
                                alt56=3;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 56 );
                                ex->set_state( 1 );


                                goto ruleouter_join_typeEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 56 );
                        ex->set_state( 0 );


                        goto ruleouter_join_typeEx;

                    }
                }
                switch (alt56)
                {
            	case 1:
            	    // OracleDML.g:275:10: full_key
            	    {
            	        this->followPush(FOLLOW_full_key_in_outer_join_type2388);
            	        full_key152=full_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleouter_join_typeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, full_key152.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:276:10: left_key
            	    {
            	        this->followPush(FOLLOW_left_key_in_outer_join_type2399);
            	        left_key153=left_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleouter_join_typeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, left_key153.tree);


            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:277:10: right_key
            	    {
            	        this->followPush(FOLLOW_right_key_in_outer_join_type2410);
            	        right_key154=right_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleouter_join_typeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, right_key154.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:279:18: ( outer_key !)?
            {
                ANTLR_UINT32 alt57=2;
                {
                    ANTLR_UINT32 LA57_0 = this->LA(1);
                    if ( (LA57_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "JOIN"))||((toUpper(LT(1)->getText()) == "OUTER")))))
                    {
                        {
                            ANTLR_UINT32 LA57_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "OUTER")))
                            {
                                alt57=1;
                            }
                        }
                    }
                }
                switch (alt57)
                {
            	case 1:
            	    // OracleDML.g:279:18: outer_key !
            	    {
            	        this->followPush(FOLLOW_outer_key_in_outer_join_type2426);
            	        outer_key155=outer_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleouter_join_typeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleouter_join_typeEx; /* Prevent compiler warnings */
    ruleouter_join_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end outer_join_type */

/**
 * $ANTLR start query_partition_clause
 * OracleDML.g:282:1: query_partition_clause : partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* ) -> ^( partition_key ( subquery )? ( expression_list )? ( EXPR expression )* ) ;
 */
OracleDML::query_partition_clause_return
OracleDML::query_partition_clause()
{
    OracleDML::query_partition_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN158 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN160 = NULL;
    ImplTraits::CommonTokenType const* COMMA163 = NULL;
    OracleDML_OracleDMLKeys::partition_key_return partition_key156;
    ImplTraits::TreeTypePtr::pointer partition_key156_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key157;
    ImplTraits::TreeTypePtr::pointer by_key157_last = NULL;
    OracleDML::subquery_return subquery159;
    ImplTraits::TreeTypePtr::pointer subquery159_last = NULL;
    OracleDML::expression_list_return expression_list161;
    ImplTraits::TreeTypePtr::pointer expression_list161_last = NULL;
    OracleDML::expression_return expression162;
    ImplTraits::TreeTypePtr::pointer expression162_last = NULL;
    OracleDML::expression_return expression164;
    ImplTraits::TreeTypePtr::pointer expression164_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN158_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN160_tree;
    ImplTraits::TreeTypePtr COMMA163_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_list(get_psrstate()->get_treeAdaptor(), "rule expression_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_partition_key(get_psrstate()->get_treeAdaptor(), "rule partition_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:283:5: ( partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* ) -> ^( partition_key ( subquery )? ( expression_list )? ( EXPR expression )* ) )
        // OracleDML.g:283:10: partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* )
        {
            this->followPush(FOLLOW_partition_key_in_query_partition_clause2448);
            partition_key156=partition_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_partition_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                partition_key156_last = partition_key156.tree.get();
                stream_partition_key.add(partition_key156.tree);
            }

            this->followPush(FOLLOW_by_key_in_query_partition_clause2450);
            by_key157=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulequery_partition_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                by_key157_last = by_key157.tree.get();
                stream_by_key.add(by_key157.tree);
            }

            // OracleDML.g:284:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* )
            {
                ANTLR_UINT32 alt59=3;
                switch ( this->LA(1) )
                {
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA59_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred7_OracleDML>() )))
                		    {
                		        alt59=1;
                		    }
                		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred8_OracleDML>() )))
                		    {
                		        alt59=2;
                		    }
                		    else if ( (true))
                		    {
                		        alt59=3;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 59 );
                		        ex->set_state( 1 );


                		        goto rulequery_partition_clauseEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case REGULAR_ID:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt59=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 59 );
                    ex->set_state( 0 );


                    goto rulequery_partition_clauseEx;

                }

                switch (alt59)
                {
            	case 1:
            	    // OracleDML.g:284:10: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
            	    {
            	        LEFT_PAREN158 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_query_partition_clause2473);
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN158);


            	        this->followPush(FOLLOW_subquery_in_query_partition_clause2475);
            	        subquery159=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery159_last = subquery159.tree.get();
            	            stream_subquery.add(subquery159.tree);
            	        }

            	        RIGHT_PAREN160 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_query_partition_clause2477);
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN160);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:285:10: ( LEFT_PAREN )=> expression_list
            	    {
            	        this->followPush(FOLLOW_expression_list_in_query_partition_clause2493);
            	        expression_list161=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_list161_last = expression_list161.tree.get();
            	            stream_expression_list.add(expression_list161.tree);
            	        }

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:286:10: expression ( COMMA expression )*
            	    {
            	        this->followPush(FOLLOW_expression_in_query_partition_clause2504);
            	        expression162=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequery_partition_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression162_last = expression162.tree.get();
            	            stream_expression.add(expression162.tree);
            	        }

            	        // OracleDML.g:286:21: ( COMMA expression )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt58=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt58=1;
            	            	}
            	                break;

            	            }

            	            switch (alt58)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:286:22: COMMA expression
            	        	    {
            	        	        COMMA163 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_query_partition_clause2507);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_partition_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA163);


            	        	        this->followPush(FOLLOW_expression_in_query_partition_clause2509);
            	        	        expression164=expression();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulequery_partition_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            expression164_last = expression164.tree.get();
            	        	            stream_expression.add(expression164.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop58;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop58: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression, partition_key, expression_list, subquery
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 288:9: -> ^( partition_key ( subquery )? ( expression_list )? ( EXPR expression )* )
            {
            	// OracleDML.g:288:12: ^( partition_key ( subquery )? ( expression_list )? ( EXPR expression )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_partition_key.nextNode(), root_1);
            	// OracleDML.g:288:28: ( subquery )?
            	if ( stream_subquery.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	}
            	stream_subquery.reset();

            	// OracleDML.g:288:38: ( expression_list )?
            	if ( stream_expression_list.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_list.nextTree());
            	}
            	stream_expression_list.reset();

            	// OracleDML.g:288:55: ( EXPR expression )*
            	while ( stream_expression.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"));
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            	}
            	stream_expression.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulequery_partition_clauseEx; /* Prevent compiler warnings */
    rulequery_partition_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end query_partition_clause */

/**
 * $ANTLR start flashback_query_clause
 * OracleDML.g:291:1: flashback_query_clause : ( versions_key between_key ( scn_key | timestamp_key ) expression -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) ) | as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) ) );
 */
OracleDML::flashback_query_clause_return
OracleDML::flashback_query_clause()
{
    OracleDML::flashback_query_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::versions_key_return versions_key165;
    ImplTraits::TreeTypePtr::pointer versions_key165_last = NULL;
    OracleDML_OracleDMLKeys::between_key_return between_key166;
    ImplTraits::TreeTypePtr::pointer between_key166_last = NULL;
    OracleDML_OracleDMLKeys::scn_key_return scn_key167;
    ImplTraits::TreeTypePtr::pointer scn_key167_last = NULL;
    OracleDML_OracleDMLKeys::timestamp_key_return timestamp_key168;
    ImplTraits::TreeTypePtr::pointer timestamp_key168_last = NULL;
    OracleDML::expression_return expression169;
    ImplTraits::TreeTypePtr::pointer expression169_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key170;
    ImplTraits::TreeTypePtr::pointer as_key170_last = NULL;
    OracleDML_OracleDMLKeys::of_key_return of_key171;
    ImplTraits::TreeTypePtr::pointer of_key171_last = NULL;
    OracleDML_OracleDMLKeys::scn_key_return scn_key172;
    ImplTraits::TreeTypePtr::pointer scn_key172_last = NULL;
    OracleDML_OracleDMLKeys::timestamp_key_return timestamp_key173;
    ImplTraits::TreeTypePtr::pointer timestamp_key173_last = NULL;
    OracleDML_OracleDMLKeys::snapshot_key_return snapshot_key174;
    ImplTraits::TreeTypePtr::pointer snapshot_key174_last = NULL;
    OracleDML::expression_return expression175;
    ImplTraits::TreeTypePtr::pointer expression175_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_snapshot_key(get_psrstate()->get_treeAdaptor(), "rule snapshot_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_scn_key(get_psrstate()->get_treeAdaptor(), "rule scn_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_versions_key(get_psrstate()->get_treeAdaptor(), "rule versions_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_between_key(get_psrstate()->get_treeAdaptor(), "rule between_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_as_key(get_psrstate()->get_treeAdaptor(), "rule as_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_timestamp_key(get_psrstate()->get_treeAdaptor(), "rule timestamp_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_of_key(get_psrstate()->get_treeAdaptor(), "rule of_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:292:5: ( versions_key between_key ( scn_key | timestamp_key ) expression -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) ) | as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) ) )

            ANTLR_UINT32 alt62;

            alt62=2;

            {
                ANTLR_UINT32 LA62_0 = this->LA(1);
                if ( (LA62_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "VERSIONS")))
                {
                    alt62=1;
                }
                else if ( (LA62_0 == SQL92_RESERVED_AS))
                {
                    alt62=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 62 );
                    ex->set_state( 0 );


                    goto ruleflashback_query_clauseEx;

                }
            }
            switch (alt62)
            {
        	case 1:
        	    // OracleDML.g:292:10: versions_key between_key ( scn_key | timestamp_key ) expression
        	    {
        	        this->followPush(FOLLOW_versions_key_in_flashback_query_clause2564);
        	        versions_key165=versions_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            versions_key165_last = versions_key165.tree.get();
        	            stream_versions_key.add(versions_key165.tree);
        	        }

        	        this->followPush(FOLLOW_between_key_in_flashback_query_clause2566);
        	        between_key166=between_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            between_key166_last = between_key166.tree.get();
        	            stream_between_key.add(between_key166.tree);
        	        }

        	        // OracleDML.g:292:35: ( scn_key | timestamp_key )
        	        {
        	            ANTLR_UINT32 alt60=2;
        	            switch ( this->LA(1) )
        	            {
        	            case REGULAR_ID:
        	            	{
        	            		{
        	            		    ANTLR_UINT32 LA60_1 = this->LA(2);
        	            		    if ( ((toUpper(LT(1)->getText()) == "SCN")))
        	            		    {
        	            		        alt60=1;
        	            		    }
        	            		    else if ( ((toUpper(LT(1)->getText()) == "TIMESTAMP")))
        	            		    {
        	            		        alt60=2;
        	            		    }
        	            		    else
        	            		    {
        	            		        if (this->get_backtracking()>0)
        	            		        {
        	            		            this->set_failedflag( true );
        	            		            return retval;
        	            		        }


        	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		        ex->set_decisionNum( 60 );
        	            		        ex->set_state( 1 );


        	            		        goto ruleflashback_query_clauseEx;

        	            		    }
        	            		}
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 60 );
        	                ex->set_state( 0 );


        	                goto ruleflashback_query_clauseEx;

        	            }

        	            switch (alt60)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:292:36: scn_key
        	        	    {
        	        	        this->followPush(FOLLOW_scn_key_in_flashback_query_clause2569);
        	        	        scn_key167=scn_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            scn_key167_last = scn_key167.tree.get();
        	        	            stream_scn_key.add(scn_key167.tree);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:292:44: timestamp_key
        	        	    {
        	        	        this->followPush(FOLLOW_timestamp_key_in_flashback_query_clause2571);
        	        	        timestamp_key168=timestamp_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            timestamp_key168_last = timestamp_key168.tree.get();
        	        	            stream_timestamp_key.add(timestamp_key168.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_expression_in_flashback_query_clause2574);
        	        expression169=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression169_last = expression169.tree.get();
        	            stream_expression.add(expression169.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression, timestamp_key, versions_key, scn_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 292:70: -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:292:73: ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_versions_key.nextNode(), root_1);
        	        	// OracleDML.g:292:88: ( scn_key )?
        	        	if ( stream_scn_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_scn_key.nextTree());
        	        	}
        	        	stream_scn_key.reset();

        	        	// OracleDML.g:292:97: ( timestamp_key )?
        	        	if ( stream_timestamp_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_timestamp_key.nextTree());
        	        	}
        	        	stream_timestamp_key.reset();

        	        	// OracleDML.g:292:112: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:293:10: as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression
        	    {
        	        this->followPush(FOLLOW_as_key_in_flashback_query_clause2604);
        	        as_key170=as_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            as_key170_last = as_key170.tree.get();
        	            stream_as_key.add(as_key170.tree);
        	        }

        	        this->followPush(FOLLOW_of_key_in_flashback_query_clause2606);
        	        of_key171=of_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            of_key171_last = of_key171.tree.get();
        	            stream_of_key.add(of_key171.tree);
        	        }

        	        // OracleDML.g:293:24: ( scn_key | timestamp_key | snapshot_key )
        	        {
        	            ANTLR_UINT32 alt61=3;
        	            switch ( this->LA(1) )
        	            {
        	            case REGULAR_ID:
        	            	{
        	            		{
        	            		    ANTLR_UINT32 LA61_1 = this->LA(2);
        	            		    if ( ((toUpper(LT(1)->getText()) == "SCN")))
        	            		    {
        	            		        alt61=1;
        	            		    }
        	            		    else if ( ((toUpper(LT(1)->getText()) == "TIMESTAMP")))
        	            		    {
        	            		        alt61=2;
        	            		    }
        	            		    else if ( ((toUpper(LT(1)->getText()) == "SNAPSHOT")))
        	            		    {
        	            		        alt61=3;
        	            		    }
        	            		    else
        	            		    {
        	            		        if (this->get_backtracking()>0)
        	            		        {
        	            		            this->set_failedflag( true );
        	            		            return retval;
        	            		        }


        	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		        ex->set_decisionNum( 61 );
        	            		        ex->set_state( 1 );


        	            		        goto ruleflashback_query_clauseEx;

        	            		    }
        	            		}
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 61 );
        	                ex->set_state( 0 );


        	                goto ruleflashback_query_clauseEx;

        	            }

        	            switch (alt61)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:293:25: scn_key
        	        	    {
        	        	        this->followPush(FOLLOW_scn_key_in_flashback_query_clause2609);
        	        	        scn_key172=scn_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            scn_key172_last = scn_key172.tree.get();
        	        	            stream_scn_key.add(scn_key172.tree);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:293:33: timestamp_key
        	        	    {
        	        	        this->followPush(FOLLOW_timestamp_key_in_flashback_query_clause2611);
        	        	        timestamp_key173=timestamp_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            timestamp_key173_last = timestamp_key173.tree.get();
        	        	            stream_timestamp_key.add(timestamp_key173.tree);
        	        	        }

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // OracleDML.g:293:47: snapshot_key
        	        	    {
        	        	        this->followPush(FOLLOW_snapshot_key_in_flashback_query_clause2613);
        	        	        snapshot_key174=snapshot_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleflashback_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            snapshot_key174_last = snapshot_key174.tree.get();
        	        	            stream_snapshot_key.add(snapshot_key174.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_expression_in_flashback_query_clause2616);
        	        expression175=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleflashback_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression175_last = expression175.tree.get();
        	            stream_expression.add(expression175.tree);
        	        }

        	        // AST REWRITE
        	        // elements: timestamp_key, expression, as_key, scn_key, snapshot_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 293:72: -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:293:75: ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_as_key.nextNode(), root_1);
        	        	// OracleDML.g:293:84: ( scn_key )?
        	        	if ( stream_scn_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_scn_key.nextTree());
        	        	}
        	        	stream_scn_key.reset();

        	        	// OracleDML.g:293:93: ( timestamp_key )?
        	        	if ( stream_timestamp_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_timestamp_key.nextTree());
        	        	}
        	        	stream_timestamp_key.reset();

        	        	// OracleDML.g:293:108: ( snapshot_key )?
        	        	if ( stream_snapshot_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_snapshot_key.nextTree());
        	        	}
        	        	stream_snapshot_key.reset();

        	        	// OracleDML.g:293:122: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleflashback_query_clauseEx; /* Prevent compiler warnings */
    ruleflashback_query_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end flashback_query_clause */

/**
 * $ANTLR start pivot_clause
 * OracleDML.g:296:1: pivot_clause : pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN -> ^( pivot_key ( xml_key )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) ;
 */
OracleDML::pivot_clause_return
OracleDML::pivot_clause()
{
    OracleDML::pivot_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN178 = NULL;
    ImplTraits::CommonTokenType const* COMMA180 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN184 = NULL;
    OracleDML_OracleDMLKeys::pivot_key_return pivot_key176;
    ImplTraits::TreeTypePtr::pointer pivot_key176_last = NULL;
    OracleDML_OracleDMLKeys::xml_key_return xml_key177;
    ImplTraits::TreeTypePtr::pointer xml_key177_last = NULL;
    OracleDML::pivot_element_return pivot_element179;
    ImplTraits::TreeTypePtr::pointer pivot_element179_last = NULL;
    OracleDML::pivot_element_return pivot_element181;
    ImplTraits::TreeTypePtr::pointer pivot_element181_last = NULL;
    OracleDML::pivot_for_clause_return pivot_for_clause182;
    ImplTraits::TreeTypePtr::pointer pivot_for_clause182_last = NULL;
    OracleDML::pivot_in_clause_return pivot_in_clause183;
    ImplTraits::TreeTypePtr::pointer pivot_in_clause183_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN178_tree;
    ImplTraits::TreeTypePtr COMMA180_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN184_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_in_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_in_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_element(get_psrstate()->get_treeAdaptor(), "rule pivot_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_key(get_psrstate()->get_treeAdaptor(), "rule pivot_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_for_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_for_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_xml_key(get_psrstate()->get_treeAdaptor(), "rule xml_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:297:5: ( pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN -> ^( pivot_key ( xml_key )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) )
        // OracleDML.g:297:10: pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN
        {
            this->followPush(FOLLOW_pivot_key_in_pivot_clause2657);
            pivot_key176=pivot_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_key176_last = pivot_key176.tree.get();
                stream_pivot_key.add(pivot_key176.tree);
            }

            // OracleDML.g:297:20: ( xml_key )?
            {
                ANTLR_UINT32 alt63=2;
                {
                    ANTLR_UINT32 LA63_0 = this->LA(1);
                    if ( (LA63_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "XML")))
                    {
                        alt63=1;
                    }
                }
                switch (alt63)
                {
            	case 1:
            	    // OracleDML.g:297:20: xml_key
            	    {
            	        this->followPush(FOLLOW_xml_key_in_pivot_clause2659);
            	        xml_key177=xml_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            xml_key177_last = xml_key177.tree.get();
            	            stream_xml_key.add(xml_key177.tree);
            	        }

            	    }
            	    break;

                }
            }

            LEFT_PAREN178 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_pivot_clause2670);
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN178);


            this->followPush(FOLLOW_pivot_element_in_pivot_clause2684);
            pivot_element179=pivot_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_element179_last = pivot_element179.tree.get();
                stream_pivot_element.add(pivot_element179.tree);
            }

            // OracleDML.g:299:27: ( COMMA pivot_element )*

            for (;;)
            {
                ANTLR_UINT32 alt64=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt64=1;
                	}
                    break;

                }

                switch (alt64)
                {
            	case 1:
            	    // OracleDML.g:299:28: COMMA pivot_element
            	    {
            	        COMMA180 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_pivot_clause2687);
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA180);


            	        this->followPush(FOLLOW_pivot_element_in_pivot_clause2689);
            	        pivot_element181=pivot_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_element181_last = pivot_element181.tree.get();
            	            stream_pivot_element.add(pivot_element181.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop64;	/* break out of the loop */
            	    break;
                }
            }
            loop64: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_pivot_for_clause_in_pivot_clause2705);
            pivot_for_clause182=pivot_for_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_for_clause182_last = pivot_for_clause182.tree.get();
                stream_pivot_for_clause.add(pivot_for_clause182.tree);
            }

            this->followPush(FOLLOW_pivot_in_clause_in_pivot_clause2719);
            pivot_in_clause183=pivot_in_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_in_clause183_last = pivot_in_clause183.tree.get();
                stream_pivot_in_clause.add(pivot_in_clause183.tree);
            }

            RIGHT_PAREN184 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_pivot_clause2731);
            if  (this->hasException())
            {
                goto rulepivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN184);


            // AST REWRITE
            // elements: pivot_element, pivot_for_clause, pivot_in_clause, pivot_key, xml_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 303:9: -> ^( pivot_key ( xml_key )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
            {
            	// OracleDML.g:303:12: ^( pivot_key ( xml_key )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_pivot_key.nextNode(), root_1);
            	// OracleDML.g:303:24: ( xml_key )?
            	if ( stream_xml_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_xml_key.nextTree());
            	}
            	stream_xml_key.reset();

            	if ( !(stream_pivot_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "pivot_element empty" );
            		goto rulepivot_clauseEx;
            	}
            	while ( stream_pivot_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_element.nextTree());
            	}
            	stream_pivot_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_for_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_in_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_clauseEx; /* Prevent compiler warnings */
    rulepivot_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_clause */

/**
 * $ANTLR start pivot_element
 * OracleDML.g:306:1: pivot_element : aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )? -> ^( PIVOT_ELEMENT ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) ) ( column_alias )? ) ;
 */
OracleDML::pivot_element_return
OracleDML::pivot_element()
{
    OracleDML::pivot_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN186 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN188 = NULL;
    OracleDML_OracleDMLCommons::aggregate_function_name_return aggregate_function_name185;
    ImplTraits::TreeTypePtr::pointer aggregate_function_name185_last = NULL;
    OracleDML::expression_return expression187;
    ImplTraits::TreeTypePtr::pointer expression187_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias189;
    ImplTraits::TreeTypePtr::pointer column_alias189_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN186_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN188_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_aggregate_function_name(get_psrstate()->get_treeAdaptor(), "rule aggregate_function_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:307:5: ( aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )? -> ^( PIVOT_ELEMENT ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) ) ( column_alias )? ) )
        // OracleDML.g:307:10: aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )?
        {
            this->followPush(FOLLOW_aggregate_function_name_in_pivot_element2775);
            aggregate_function_name185=aggregate_function_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                aggregate_function_name185_last = aggregate_function_name185.tree.get();
                stream_aggregate_function_name.add(aggregate_function_name185.tree);
            }

            LEFT_PAREN186 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_pivot_element2777);
            if  (this->hasException())
            {
                goto rulepivot_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN186);


            this->followPush(FOLLOW_expression_in_pivot_element2779);
            expression187=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression187_last = expression187.tree.get();
                stream_expression.add(expression187.tree);
            }

            RIGHT_PAREN188 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_pivot_element2781);
            if  (this->hasException())
            {
                goto rulepivot_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN188);


            // OracleDML.g:307:68: ( column_alias )?
            {
                ANTLR_UINT32 alt65=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt65=1;
                    	}
                        break;
                }

                switch (alt65)
                {
            	case 1:
            	    // OracleDML.g:307:68: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_pivot_element2783);
            	        column_alias189=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias189_last = column_alias189.tree.get();
            	            stream_column_alias.add(column_alias189.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression, aggregate_function_name, column_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 308:9: -> ^( PIVOT_ELEMENT ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) ) ( column_alias )? )
            {
            	// OracleDML.g:308:12: ^( PIVOT_ELEMENT ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) ) ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(PIVOT_ELEMENT, "PIVOT_ELEMENT"), root_1);
            	// OracleDML.g:308:28: ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	// OracleDML.g:308:35: ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ROUTINE_CALL, "ROUTINE_CALL"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_aggregate_function_name.nextTree());
            	// OracleDML.g:308:74: ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) )
            	{
            	ImplTraits::TreeTypePtr root_4 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_4 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ARGUMENTS, "ARGUMENTS"), root_4);
            	// OracleDML.g:308:86: ^( ARGUMENT ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_5 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_5 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ARGUMENT, "ARGUMENT"), root_5);
            	// OracleDML.g:308:97: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_6 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_6 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_6);
            	get_psrstate()->get_treeAdaptor()->addChild(root_6, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_5, root_6);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_4, root_5);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, root_4);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:308:120: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_elementEx; /* Prevent compiler warnings */
    rulepivot_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_element */

/**
 * $ANTLR start pivot_for_clause
 * OracleDML.g:311:1: pivot_for_clause : for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) -> ^( for_key ( column_name )+ ) ;
 */
OracleDML::pivot_for_clause_return
OracleDML::pivot_for_clause()
{
    OracleDML::pivot_for_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN192 = NULL;
    ImplTraits::CommonTokenType const* COMMA194 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN196 = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key190;
    ImplTraits::TreeTypePtr::pointer for_key190_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name191;
    ImplTraits::TreeTypePtr::pointer column_name191_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name193;
    ImplTraits::TreeTypePtr::pointer column_name193_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name195;
    ImplTraits::TreeTypePtr::pointer column_name195_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN192_tree;
    ImplTraits::TreeTypePtr COMMA194_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN196_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:312:5: ( for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) -> ^( for_key ( column_name )+ ) )
        // OracleDML.g:312:10: for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
        {
            this->followPush(FOLLOW_for_key_in_pivot_for_clause2845);
            for_key190=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_for_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key190_last = for_key190.tree.get();
                stream_for_key.add(for_key190.tree);
            }

            // OracleDML.g:313:5: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            {
                ANTLR_UINT32 alt67=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt67=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt67=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 67 );
                    ex->set_state( 0 );


                    goto rulepivot_for_clauseEx;

                }

                switch (alt67)
                {
            	case 1:
            	    // OracleDML.g:313:10: column_name
            	    {
            	        this->followPush(FOLLOW_column_name_in_pivot_for_clause2857);
            	        column_name191=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_for_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name191_last = column_name191.tree.get();
            	            stream_column_name.add(column_name191.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:314:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN192 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_pivot_for_clause2868);
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_for_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN192);


            	        this->followPush(FOLLOW_column_name_in_pivot_for_clause2870);
            	        column_name193=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_for_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name193_last = column_name193.tree.get();
            	            stream_column_name.add(column_name193.tree);
            	        }

            	        // OracleDML.g:314:33: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt66=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt66=1;
            	            	}
            	                break;

            	            }

            	            switch (alt66)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:314:34: COMMA column_name
            	        	    {
            	        	        COMMA194 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_pivot_for_clause2873);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_for_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA194);


            	        	        this->followPush(FOLLOW_column_name_in_pivot_for_clause2875);
            	        	        column_name195=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_for_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name195_last = column_name195.tree.get();
            	        	            stream_column_name.add(column_name195.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop66;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop66: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN196 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_pivot_for_clause2879);
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_for_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN196);


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_name, for_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 316:9: -> ^( for_key ( column_name )+ )
            {
            	// OracleDML.g:316:12: ^( for_key ( column_name )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_for_key.nextNode(), root_1);
            	if ( !(stream_column_name.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
            		goto rulepivot_for_clauseEx;
            	}
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_for_clauseEx; /* Prevent compiler warnings */
    rulepivot_for_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_for_clause */

/**
 * $ANTLR start pivot_in_clause
 * OracleDML.g:319:1: pivot_in_clause : in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN -> {mode == 1}? ^( in_key subquery ) -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) ) -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ;
 */
OracleDML::pivot_in_clause_return
OracleDML::pivot_in_clause()
{
    OracleDML::pivot_in_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN198 = NULL;
    ImplTraits::CommonTokenType const* COMMA201 = NULL;
    ImplTraits::CommonTokenType const* COMMA204 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN206 = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key197;
    ImplTraits::TreeTypePtr::pointer in_key197_last = NULL;
    OracleDML::subquery_return subquery199;
    ImplTraits::TreeTypePtr::pointer subquery199_last = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key200;
    ImplTraits::TreeTypePtr::pointer any_key200_last = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key202;
    ImplTraits::TreeTypePtr::pointer any_key202_last = NULL;
    OracleDML::pivot_in_clause_element_return pivot_in_clause_element203;
    ImplTraits::TreeTypePtr::pointer pivot_in_clause_element203_last = NULL;
    OracleDML::pivot_in_clause_element_return pivot_in_clause_element205;
    ImplTraits::TreeTypePtr::pointer pivot_in_clause_element205_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN198_tree;
    ImplTraits::TreeTypePtr COMMA201_tree;
    ImplTraits::TreeTypePtr COMMA204_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN206_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_any_key(get_psrstate()->get_treeAdaptor(), "rule any_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_in_clause_element(get_psrstate()->get_treeAdaptor(), "rule pivot_in_clause_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:321:5: ( in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN -> {mode == 1}? ^( in_key subquery ) -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) ) -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
        // OracleDML.g:321:10: in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN
        {
            this->followPush(FOLLOW_in_key_in_pivot_in_clause2930);
            in_key197=in_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                in_key197_last = in_key197.tree.get();
                stream_in_key.add(in_key197.tree);
            }

            LEFT_PAREN198 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_pivot_in_clause2940);
            if  (this->hasException())
            {
                goto rulepivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN198);


            // OracleDML.g:323:13: ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* )
            {
                ANTLR_UINT32 alt70=3;
                {
                    ANTLR_UINT32 LA70_0 = this->LA(1);
                    if ( (LA70_0 == SQL92_RESERVED_SELECT) && (this->msynpred( antlr3::ClassForwarder<synpred9_OracleDML>() )))
                    {
                        alt70=1;
                    }
                    else if ( (LA70_0 == LEFT_PAREN))
                    {
                        {
                            ANTLR_UINT32 LA70_2 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred9_OracleDML>() )))
                            {
                                alt70=1;
                            }
                            else if ( (true))
                            {
                                alt70=3;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 70 );
                                ex->set_state( 2 );


                                goto rulepivot_in_clauseEx;

                            }
                        }
                    }
                    else if ( (LA70_0 == SQL92_RESERVED_ANY))
                    {
                        {
                            ANTLR_UINT32 LA70_3 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred10_OracleDML>() )))
                            {
                                alt70=2;
                            }
                            else if ( (true))
                            {
                                alt70=3;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 70 );
                                ex->set_state( 3 );


                                goto rulepivot_in_clauseEx;

                            }
                        }
                    }
                    else if ( (LA70_0 == APPROXIMATE_NUM_LIT || LA70_0 == BINDVAR || ((LA70_0 >= CHAR_STRING) && (LA70_0 <= CHAR_STRING_PERL)) || LA70_0 == COLON || LA70_0 == DELIMITED_ID || LA70_0 == EXACT_NUM_LIT || LA70_0 == INTRODUCER || LA70_0 == MINUS_SIGN || LA70_0 == NATIONAL_CHAR_STRING_LIT || ((LA70_0 >= PLSQL_NON_RESERVED_CAST) && (LA70_0 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA70_0 == PLUS_SIGN || LA70_0 == REGULAR_ID || LA70_0 == SQL92_RESERVED_ALL || LA70_0 == SQL92_RESERVED_CASE || ((LA70_0 >= SQL92_RESERVED_CURSOR) && (LA70_0 <= SQL92_RESERVED_DATE)) || LA70_0 == SQL92_RESERVED_DEFAULT || LA70_0 == SQL92_RESERVED_DISTINCT || ((LA70_0 >= SQL92_RESERVED_EXISTS) && (LA70_0 <= SQL92_RESERVED_FALSE)) || ((LA70_0 >= SQL92_RESERVED_NOT) && (LA70_0 <= SQL92_RESERVED_NULL)) || LA70_0 == SQL92_RESERVED_PRIOR || LA70_0 == SQL92_RESERVED_TRUE || LA70_0 == UNSIGNED_INTEGER))
                    {
                        alt70=3;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 70 );
                        ex->set_state( 0 );


                        goto rulepivot_in_clauseEx;

                    }
                }
                switch (alt70)
                {
            	case 1:
            	    // OracleDML.g:323:18: ( select_key )=> subquery
            	    {
            	        this->followPush(FOLLOW_subquery_in_pivot_in_clause2964);
            	        subquery199=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery199_last = subquery199.tree.get();
            	            stream_subquery.add(subquery199.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:324:18: ( any_key )=> any_key ( COMMA any_key )*
            	    {
            	        this->followPush(FOLLOW_any_key_in_pivot_in_clause2990);
            	        any_key200=any_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            any_key200_last = any_key200.tree.get();
            	            stream_any_key.add(any_key200.tree);
            	        }

            	        // OracleDML.g:324:38: ( COMMA any_key )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt68=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt68=1;
            	            	}
            	                break;

            	            }

            	            switch (alt68)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:324:39: COMMA any_key
            	        	    {
            	        	        COMMA201 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_pivot_in_clause2993);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_in_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA201);


            	        	        this->followPush(FOLLOW_any_key_in_pivot_in_clause2995);
            	        	        any_key202=any_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_in_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            any_key202_last = any_key202.tree.get();
            	        	            stream_any_key.add(any_key202.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop68;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop68: ; /* Jump out to here if this rule does not match */


            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 2;
            	        }


            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:325:18: pivot_in_clause_element ( COMMA pivot_in_clause_element )*
            	    {
            	        this->followPush(FOLLOW_pivot_in_clause_element_in_pivot_in_clause3018);
            	        pivot_in_clause_element203=pivot_in_clause_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            pivot_in_clause_element203_last = pivot_in_clause_element203.tree.get();
            	            stream_pivot_in_clause_element.add(pivot_in_clause_element203.tree);
            	        }

            	        // OracleDML.g:325:42: ( COMMA pivot_in_clause_element )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt69=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt69=1;
            	            	}
            	                break;

            	            }

            	            switch (alt69)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:325:43: COMMA pivot_in_clause_element
            	        	    {
            	        	        COMMA204 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_pivot_in_clause3021);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_in_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA204);


            	        	        this->followPush(FOLLOW_pivot_in_clause_element_in_pivot_in_clause3023);
            	        	        pivot_in_clause_element205=pivot_in_clause_element();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulepivot_in_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            pivot_in_clause_element205_last = pivot_in_clause_element205.tree.get();
            	        	            stream_pivot_in_clause_element.add(pivot_in_clause_element205.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop69;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop69: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            RIGHT_PAREN206 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_pivot_in_clause3049);
            if  (this->hasException())
            {
                goto rulepivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN206);


            // AST REWRITE
            // elements: in_key, subquery, any_key, pivot_in_clause_element, in_key, in_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 328:9: -> {mode == 1}? ^( in_key subquery )
            if (mode == 1) {
            	// OracleDML.g:328:24: ^( in_key subquery )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 329:9: -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) )
            if (mode == 2) {
            	// OracleDML.g:329:24: ^( in_key ^( ANY_MODE ( any_key )+ ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	// OracleDML.g:329:33: ^( ANY_MODE ( any_key )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ANY_MODE, "ANY_MODE"), root_2);
            	if ( !(stream_any_key.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "any_key empty" );
            		goto rulepivot_in_clauseEx;
            	}
            	while ( stream_any_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_any_key.nextTree());
            	}
            	stream_any_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 330:9: -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
            {
            	// OracleDML.g:330:12: ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	// OracleDML.g:330:21: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ELEMENTS_MODE, "ELEMENTS_MODE"), root_2);
            	if ( !(stream_pivot_in_clause_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "pivot_in_clause_element empty" );
            		goto rulepivot_in_clauseEx;
            	}
            	while ( stream_pivot_in_clause_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_pivot_in_clause_element.nextTree());
            	}
            	stream_pivot_in_clause_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_in_clauseEx; /* Prevent compiler warnings */
    rulepivot_in_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_in_clause */

/**
 * $ANTLR start pivot_in_clause_element
 * OracleDML.g:333:1: pivot_in_clause_element : pivot_in_clause_elements ( column_alias )? -> ^( PIVOT_IN_ELEMENT pivot_in_clause_elements ( column_alias )? ) ;
 */
OracleDML::pivot_in_clause_element_return
OracleDML::pivot_in_clause_element()
{
    OracleDML::pivot_in_clause_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::pivot_in_clause_elements_return pivot_in_clause_elements207;
    ImplTraits::TreeTypePtr::pointer pivot_in_clause_elements207_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias208;
    ImplTraits::TreeTypePtr::pointer column_alias208_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_in_clause_elements(get_psrstate()->get_treeAdaptor(), "rule pivot_in_clause_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:334:5: ( pivot_in_clause_elements ( column_alias )? -> ^( PIVOT_IN_ELEMENT pivot_in_clause_elements ( column_alias )? ) )
        // OracleDML.g:334:10: pivot_in_clause_elements ( column_alias )?
        {
            this->followPush(FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3129);
            pivot_in_clause_elements207=pivot_in_clause_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepivot_in_clause_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_in_clause_elements207_last = pivot_in_clause_elements207.tree.get();
                stream_pivot_in_clause_elements.add(pivot_in_clause_elements207.tree);
            }

            // OracleDML.g:334:35: ( column_alias )?
            {
                ANTLR_UINT32 alt71=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt71=1;
                    	}
                        break;
                }

                switch (alt71)
                {
            	case 1:
            	    // OracleDML.g:334:35: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_pivot_in_clause_element3131);
            	        column_alias208=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepivot_in_clause_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias208_last = column_alias208.tree.get();
            	            stream_column_alias.add(column_alias208.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: pivot_in_clause_elements, column_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 335:9: -> ^( PIVOT_IN_ELEMENT pivot_in_clause_elements ( column_alias )? )
            {
            	// OracleDML.g:335:12: ^( PIVOT_IN_ELEMENT pivot_in_clause_elements ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(PIVOT_IN_ELEMENT, "PIVOT_IN_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_in_clause_elements.nextTree());
            	// OracleDML.g:335:56: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_in_clause_elementEx; /* Prevent compiler warnings */
    rulepivot_in_clause_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_in_clause_element */

/**
 * $ANTLR start pivot_in_clause_elements
 * OracleDML.g:338:1: pivot_in_clause_elements : ( expression -> ^( EXPR expression ) | ( LEFT_PAREN )=> expression_list );
 */
OracleDML::pivot_in_clause_elements_return
OracleDML::pivot_in_clause_elements()
{
    OracleDML::pivot_in_clause_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression209;
    ImplTraits::TreeTypePtr::pointer expression209_last = NULL;
    OracleDML::expression_list_return expression_list210;
    ImplTraits::TreeTypePtr::pointer expression_list210_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:339:5: ( expression -> ^( EXPR expression ) | ( LEFT_PAREN )=> expression_list )

            ANTLR_UINT32 alt72;

            alt72=2;

            switch ( this->LA(1) )
            {
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case REGULAR_ID:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt72=1;
            	}
                break;
            case LEFT_PAREN:
            	{
            		{
            		    ANTLR_UINT32 LA72_25 = this->LA(2);
            		    if ( (true))
            		    {
            		        alt72=1;
            		    }
            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred11_OracleDML>() )))
            		    {
            		        alt72=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 72 );
            		        ex->set_state( 25 );


            		        goto rulepivot_in_clause_elementsEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 72 );
                ex->set_state( 0 );


                goto rulepivot_in_clause_elementsEx;

            }

            switch (alt72)
            {
        	case 1:
        	    // OracleDML.g:339:10: expression
        	    {
        	        this->followPush(FOLLOW_expression_in_pivot_in_clause_elements3171);
        	        expression209=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepivot_in_clause_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression209_last = expression209.tree.get();
        	            stream_expression.add(expression209.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 339:21: -> ^( EXPR expression )
        	        {
        	        	// OracleDML.g:339:24: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:340:10: ( LEFT_PAREN )=> expression_list
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_expression_list_in_pivot_in_clause_elements3195);
        	        expression_list210=expression_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepivot_in_clause_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_list210.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulepivot_in_clause_elementsEx; /* Prevent compiler warnings */
    rulepivot_in_clause_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end pivot_in_clause_elements */

/**
 * $ANTLR start unpivot_clause
 * OracleDML.g:343:1: unpivot_clause : unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause ) ;
 */
OracleDML::unpivot_clause_return
OracleDML::unpivot_clause()
{
    OracleDML::unpivot_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN215 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN217 = NULL;
    ImplTraits::CommonTokenType const* COMMA219 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN221 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN224 = NULL;
    OracleDML_OracleDMLKeys::unpivot_key_return unpivot_key211;
    ImplTraits::TreeTypePtr::pointer unpivot_key211_last = NULL;
    OracleDML_OracleDMLKeys::include_key_return include_key212;
    ImplTraits::TreeTypePtr::pointer include_key212_last = NULL;
    OracleDML_OracleDMLKeys::exclude_key_return exclude_key213;
    ImplTraits::TreeTypePtr::pointer exclude_key213_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key214;
    ImplTraits::TreeTypePtr::pointer nulls_key214_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name216;
    ImplTraits::TreeTypePtr::pointer column_name216_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name218;
    ImplTraits::TreeTypePtr::pointer column_name218_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name220;
    ImplTraits::TreeTypePtr::pointer column_name220_last = NULL;
    OracleDML::pivot_for_clause_return pivot_for_clause222;
    ImplTraits::TreeTypePtr::pointer pivot_for_clause222_last = NULL;
    OracleDML::unpivot_in_clause_return unpivot_in_clause223;
    ImplTraits::TreeTypePtr::pointer unpivot_in_clause223_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN215_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN217_tree;
    ImplTraits::TreeTypePtr COMMA219_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN221_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN224_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_nulls_key(get_psrstate()->get_treeAdaptor(), "rule nulls_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_exclude_key(get_psrstate()->get_treeAdaptor(), "rule exclude_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_include_key(get_psrstate()->get_treeAdaptor(), "rule include_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_key(get_psrstate()->get_treeAdaptor(), "rule unpivot_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_pivot_for_clause(get_psrstate()->get_treeAdaptor(), "rule pivot_for_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_in_clause(get_psrstate()->get_treeAdaptor(), "rule unpivot_in_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:344:5: ( unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause ) )
        // OracleDML.g:344:10: unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN
        {
            this->followPush(FOLLOW_unpivot_key_in_unpivot_clause3215);
            unpivot_key211=unpivot_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                unpivot_key211_last = unpivot_key211.tree.get();
                stream_unpivot_key.add(unpivot_key211.tree);
            }

            // OracleDML.g:345:9: ( ( include_key | exclude_key ) nulls_key )?
            {
                ANTLR_UINT32 alt74=2;
                {
                    ANTLR_UINT32 LA74_0 = this->LA(1);
                    if ( (LA74_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INCLUDE"))||((toUpper(LT(1)->getText()) == "EXCLUDE")))))
                    {
                        alt74=1;
                    }
                }
                switch (alt74)
                {
            	case 1:
            	    // OracleDML.g:345:10: ( include_key | exclude_key ) nulls_key
            	    {
            	        // OracleDML.g:345:10: ( include_key | exclude_key )
            	        {
            	            ANTLR_UINT32 alt73=2;
            	            {
            	                ANTLR_UINT32 LA73_0 = this->LA(1);
            	                if ( (LA73_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INCLUDE"))||((toUpper(LT(1)->getText()) == "EXCLUDE")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA73_1 = this->LA(2);
            	                        if ( ((toUpper(LT(1)->getText()) == "INCLUDE")))
            	                        {
            	                            alt73=1;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "EXCLUDE")))
            	                        {
            	                            alt73=2;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return retval;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 73 );
            	                            ex->set_state( 1 );


            	                            goto ruleunpivot_clauseEx;

            	                        }
            	                    }
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 73 );
            	                    ex->set_state( 0 );


            	                    goto ruleunpivot_clauseEx;

            	                }
            	            }
            	            switch (alt73)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:345:11: include_key
            	        	    {
            	        	        this->followPush(FOLLOW_include_key_in_unpivot_clause3228);
            	        	        include_key212=include_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            include_key212_last = include_key212.tree.get();
            	        	            stream_include_key.add(include_key212.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:345:23: exclude_key
            	        	    {
            	        	        this->followPush(FOLLOW_exclude_key_in_unpivot_clause3230);
            	        	        exclude_key213=exclude_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            exclude_key213_last = exclude_key213.tree.get();
            	        	            stream_exclude_key.add(exclude_key213.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_nulls_key_in_unpivot_clause3233);
            	        nulls_key214=nulls_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            nulls_key214_last = nulls_key214.tree.get();
            	            stream_nulls_key.add(nulls_key214.tree);
            	        }

            	    }
            	    break;

                }
            }

            LEFT_PAREN215 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_clause3245);
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN215);


            // OracleDML.g:347:13: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            {
                ANTLR_UINT32 alt76=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt76=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt76=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 76 );
                    ex->set_state( 0 );


                    goto ruleunpivot_clauseEx;

                }

                switch (alt76)
                {
            	case 1:
            	    // OracleDML.g:347:18: column_name
            	    {
            	        this->followPush(FOLLOW_column_name_in_unpivot_clause3264);
            	        column_name216=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name216_last = column_name216.tree.get();
            	            stream_column_name.add(column_name216.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:348:18: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN217 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_clause3283);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN217);


            	        this->followPush(FOLLOW_column_name_in_unpivot_clause3285);
            	        column_name218=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name218_last = column_name218.tree.get();
            	            stream_column_name.add(column_name218.tree);
            	        }

            	        // OracleDML.g:348:41: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt75=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt75=1;
            	            	}
            	                break;

            	            }

            	            switch (alt75)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:348:42: COMMA column_name
            	        	    {
            	        	        COMMA219 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_unpivot_clause3288);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA219);


            	        	        this->followPush(FOLLOW_column_name_in_unpivot_clause3290);
            	        	        column_name220=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name220_last = column_name220.tree.get();
            	        	            stream_column_name.add(column_name220.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop75;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop75: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN221 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_clause3294);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN221);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_pivot_for_clause_in_unpivot_clause3322);
            pivot_for_clause222=pivot_for_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                pivot_for_clause222_last = pivot_for_clause222.tree.get();
                stream_pivot_for_clause.add(pivot_for_clause222.tree);
            }

            this->followPush(FOLLOW_unpivot_in_clause_in_unpivot_clause3336);
            unpivot_in_clause223=unpivot_in_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                unpivot_in_clause223_last = unpivot_in_clause223.tree.get();
                stream_unpivot_in_clause.add(unpivot_in_clause223.tree);
            }

            RIGHT_PAREN224 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_clause3346);
            if  (this->hasException())
            {
                goto ruleunpivot_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN224);


            // AST REWRITE
            // elements: exclude_key, column_name, nulls_key, unpivot_key, include_key, unpivot_in_clause, pivot_for_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 353:9: -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause )
            {
            	// OracleDML.g:353:12: ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_unpivot_key.nextNode(), root_1);
            	// OracleDML.g:353:26: ( include_key )?
            	if ( stream_include_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_include_key.nextTree());
            	}
            	stream_include_key.reset();

            	// OracleDML.g:353:39: ( exclude_key )?
            	if ( stream_exclude_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_exclude_key.nextTree());
            	}
            	stream_exclude_key.reset();

            	// OracleDML.g:353:52: ( nulls_key )?
            	if ( stream_nulls_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_nulls_key.nextTree());
            	}
            	stream_nulls_key.reset();

            	if ( !(stream_column_name.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
            		goto ruleunpivot_clauseEx;
            	}
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_pivot_for_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unpivot_in_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleunpivot_clauseEx; /* Prevent compiler warnings */
    ruleunpivot_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end unpivot_clause */

/**
 * $ANTLR start unpivot_in_clause
 * OracleDML.g:356:1: unpivot_in_clause : in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ ) ;
 */
OracleDML::unpivot_in_clause_return
OracleDML::unpivot_in_clause()
{
    OracleDML::unpivot_in_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN226 = NULL;
    ImplTraits::CommonTokenType const* COMMA228 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN230 = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key225;
    ImplTraits::TreeTypePtr::pointer in_key225_last = NULL;
    OracleDML::unpivot_in_elements_return unpivot_in_elements227;
    ImplTraits::TreeTypePtr::pointer unpivot_in_elements227_last = NULL;
    OracleDML::unpivot_in_elements_return unpivot_in_elements229;
    ImplTraits::TreeTypePtr::pointer unpivot_in_elements229_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN226_tree;
    ImplTraits::TreeTypePtr COMMA228_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN230_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_unpivot_in_elements(get_psrstate()->get_treeAdaptor(), "rule unpivot_in_elements");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:357:5: ( in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ ) )
        // OracleDML.g:357:10: in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN
        {
            this->followPush(FOLLOW_in_key_in_unpivot_in_clause3396);
            in_key225=in_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                in_key225_last = in_key225.tree.get();
                stream_in_key.add(in_key225.tree);
            }

            LEFT_PAREN226 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_in_clause3406);
            if  (this->hasException())
            {
                goto ruleunpivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN226);


            this->followPush(FOLLOW_unpivot_in_elements_in_unpivot_in_clause3420);
            unpivot_in_elements227=unpivot_in_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleunpivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                unpivot_in_elements227_last = unpivot_in_elements227.tree.get();
                stream_unpivot_in_elements.add(unpivot_in_elements227.tree);
            }

            // OracleDML.g:359:33: ( COMMA unpivot_in_elements )*

            for (;;)
            {
                ANTLR_UINT32 alt77=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt77=1;
                	}
                    break;

                }

                switch (alt77)
                {
            	case 1:
            	    // OracleDML.g:359:34: COMMA unpivot_in_elements
            	    {
            	        COMMA228 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_unpivot_in_clause3423);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA228);


            	        this->followPush(FOLLOW_unpivot_in_elements_in_unpivot_in_clause3425);
            	        unpivot_in_elements229=unpivot_in_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            unpivot_in_elements229_last = unpivot_in_elements229.tree.get();
            	            stream_unpivot_in_elements.add(unpivot_in_elements229.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop77;	/* break out of the loop */
            	    break;
                }
            }
            loop77: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN230 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3437);
            if  (this->hasException())
            {
                goto ruleunpivot_in_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN230);


            // AST REWRITE
            // elements: unpivot_in_elements, in_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 361:9: -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ )
            {
            	// OracleDML.g:361:12: ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	if ( !(stream_unpivot_in_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "unpivot_in_elements empty" );
            		goto ruleunpivot_in_clauseEx;
            	}
            	while ( stream_unpivot_in_elements.hasNext() ) {
            		// OracleDML.g:361:21: ^( UNPIVOT_IN_ELEMENT unpivot_in_elements )
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(UNPIVOT_IN_ELEMENT, "UNPIVOT_IN_ELEMENT"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_unpivot_in_elements.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_unpivot_in_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleunpivot_in_clauseEx; /* Prevent compiler warnings */
    ruleunpivot_in_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end unpivot_in_clause */

/**
 * $ANTLR start unpivot_in_elements
 * OracleDML.g:364:1: unpivot_in_elements : ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )? -> ( column_name )+ ( ^( PIVOT_ALIAS ( constant )+ ) )? ;
 */
OracleDML::unpivot_in_elements_return
OracleDML::unpivot_in_elements()
{
    OracleDML::unpivot_in_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN232 = NULL;
    ImplTraits::CommonTokenType const* COMMA234 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN236 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN239 = NULL;
    ImplTraits::CommonTokenType const* COMMA241 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN243 = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name231;
    ImplTraits::TreeTypePtr::pointer column_name231_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name233;
    ImplTraits::TreeTypePtr::pointer column_name233_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name235;
    ImplTraits::TreeTypePtr::pointer column_name235_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key237;
    ImplTraits::TreeTypePtr::pointer as_key237_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant238;
    ImplTraits::TreeTypePtr::pointer constant238_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant240;
    ImplTraits::TreeTypePtr::pointer constant240_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant242;
    ImplTraits::TreeTypePtr::pointer constant242_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN232_tree;
    ImplTraits::TreeTypePtr COMMA234_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN236_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN239_tree;
    ImplTraits::TreeTypePtr COMMA241_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN243_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_constant(get_psrstate()->get_treeAdaptor(), "rule constant");
    RewriteRuleSubtreeStream<ImplTraits> stream_as_key(get_psrstate()->get_treeAdaptor(), "rule as_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:365:5: ( ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )? -> ( column_name )+ ( ^( PIVOT_ALIAS ( constant )+ ) )? )
        // OracleDML.g:365:9: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )?
        {
            // OracleDML.g:365:9: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            {
                ANTLR_UINT32 alt79=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt79=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt79=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 79 );
                    ex->set_state( 0 );


                    goto ruleunpivot_in_elementsEx;

                }

                switch (alt79)
                {
            	case 1:
            	    // OracleDML.g:365:14: column_name
            	    {
            	        this->followPush(FOLLOW_column_name_in_unpivot_in_elements3482);
            	        column_name231=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name231_last = column_name231.tree.get();
            	            stream_column_name.add(column_name231.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:366:14: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN232 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_in_elements3497);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN232);


            	        this->followPush(FOLLOW_column_name_in_unpivot_in_elements3499);
            	        column_name233=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name233_last = column_name233.tree.get();
            	            stream_column_name.add(column_name233.tree);
            	        }

            	        // OracleDML.g:366:37: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt78=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt78=1;
            	            	}
            	                break;

            	            }

            	            switch (alt78)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:366:38: COMMA column_name
            	        	    {
            	        	        COMMA234 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_unpivot_in_elements3502);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA234);


            	        	        this->followPush(FOLLOW_column_name_in_unpivot_in_elements3504);
            	        	        column_name235=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name235_last = column_name235.tree.get();
            	        	            stream_column_name.add(column_name235.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop78;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop78: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN236 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3508);
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN236);


            	    }
            	    break;

                }
            }

            // OracleDML.g:368:9: ( as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )?
            {
                ANTLR_UINT32 alt82=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_AS:
                    	{
                    		alt82=1;
                    	}
                        break;
                }

                switch (alt82)
                {
            	case 1:
            	    // OracleDML.g:368:14: as_key ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN )
            	    {
            	        this->followPush(FOLLOW_as_key_in_unpivot_in_elements3533);
            	        as_key237=as_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleunpivot_in_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            as_key237_last = as_key237.tree.get();
            	            stream_as_key.add(as_key237.tree);
            	        }

            	        // OracleDML.g:369:9: ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN )
            	        {
            	            ANTLR_UINT32 alt81=2;
            	            {
            	                ANTLR_UINT32 LA81_0 = this->LA(1);
            	                if ( (LA81_0 == APPROXIMATE_NUM_LIT || ((LA81_0 >= CHAR_STRING) && (LA81_0 <= CHAR_STRING_PERL)) || LA81_0 == EXACT_NUM_LIT || LA81_0 == NATIONAL_CHAR_STRING_LIT || LA81_0 == REGULAR_ID || LA81_0 == SQL92_RESERVED_DATE || LA81_0 == SQL92_RESERVED_DEFAULT || LA81_0 == SQL92_RESERVED_FALSE || LA81_0 == SQL92_RESERVED_NULL || LA81_0 == SQL92_RESERVED_TRUE || LA81_0 == UNSIGNED_INTEGER))
            	                {
            	                    alt81=1;
            	                }
            	                else if ( (LA81_0 == LEFT_PAREN) && (this->msynpred( antlr3::ClassForwarder<synpred12_OracleDML>() )))
            	                {
            	                    alt81=2;
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 81 );
            	                    ex->set_state( 0 );


            	                    goto ruleunpivot_in_elementsEx;

            	                }
            	            }
            	            switch (alt81)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:369:14: constant
            	        	    {
            	        	        this->followPush(FOLLOW_constant_in_unpivot_in_elements3548);
            	        	        constant238=constant();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            constant238_last = constant238.tree.get();
            	        	            stream_constant.add(constant238.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:370:14: ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN
            	        	    {
            	        	        LEFT_PAREN239 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_unpivot_in_elements3568);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN239);


            	        	        this->followPush(FOLLOW_constant_in_unpivot_in_elements3570);
            	        	        constant240=constant();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            constant240_last = constant240.tree.get();
            	        	            stream_constant.add(constant240.tree);
            	        	        }

            	        	        // OracleDML.g:370:49: ( COMMA constant )*

            	        	        for (;;)
            	        	        {
            	        	            ANTLR_UINT32 alt80=2;
            	        	            switch ( this->LA(1) )
            	        	            {
            	        	            case COMMA:
            	        	            	{
            	        	            		alt80=1;
            	        	            	}
            	        	                break;

            	        	            }

            	        	            switch (alt80)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:370:50: COMMA constant
            	        	        	    {
            	        	        	        COMMA241 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_unpivot_in_elements3573);
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleunpivot_in_elementsEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }
            	        	        	         
            	        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA241);


            	        	        	        this->followPush(FOLLOW_constant_in_unpivot_in_elements3575);
            	        	        	        constant242=constant();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleunpivot_in_elementsEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            constant242_last = constant242.tree.get();
            	        	        	            stream_constant.add(constant242.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop80;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop80: ; /* Jump out to here if this rule does not match */


            	        	        RIGHT_PAREN243 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3579);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleunpivot_in_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN243);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_name, constant
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 373:9: -> ( column_name )+ ( ^( PIVOT_ALIAS ( constant )+ ) )?
            {
            	if ( !(stream_column_name.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
            		goto ruleunpivot_in_elementsEx;
            	}
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	// OracleDML.g:373:25: ( ^( PIVOT_ALIAS ( constant )+ ) )?
            	if ( stream_constant.hasNext() ) {
            		// OracleDML.g:373:25: ^( PIVOT_ALIAS ( constant )+ )
            		{
            		ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(PIVOT_ALIAS, "PIVOT_ALIAS"), root_1);
            		if ( !(stream_constant.hasNext()) ) {
            			ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "constant empty" );
            			goto ruleunpivot_in_elementsEx;
            		}
            		while ( stream_constant.hasNext() ) {
            			get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_constant.nextTree());
            		}
            		stream_constant.reset();

            		get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            		}
            	}
            	stream_constant.reset();

            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleunpivot_in_elementsEx; /* Prevent compiler warnings */
    ruleunpivot_in_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end unpivot_in_elements */

/**
 * $ANTLR start hierarchical_query_clause
 * OracleDML.g:376:1: hierarchical_query_clause : ( connect_key by_key ( nocycle_key )? condition ( start_part )? -> ^( HIERARCHICAL ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ( start_part )? ) | start_part connect_key by_key ( nocycle_key )? condition -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) );
 */
OracleDML::hierarchical_query_clause_return
OracleDML::hierarchical_query_clause()
{
    OracleDML::hierarchical_query_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::connect_key_return connect_key244;
    ImplTraits::TreeTypePtr::pointer connect_key244_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key245;
    ImplTraits::TreeTypePtr::pointer by_key245_last = NULL;
    OracleDML_OracleDMLKeys::nocycle_key_return nocycle_key246;
    ImplTraits::TreeTypePtr::pointer nocycle_key246_last = NULL;
    OracleDML::condition_return condition247;
    ImplTraits::TreeTypePtr::pointer condition247_last = NULL;
    OracleDML::start_part_return start_part248;
    ImplTraits::TreeTypePtr::pointer start_part248_last = NULL;
    OracleDML::start_part_return start_part249;
    ImplTraits::TreeTypePtr::pointer start_part249_last = NULL;
    OracleDML_OracleDMLKeys::connect_key_return connect_key250;
    ImplTraits::TreeTypePtr::pointer connect_key250_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key251;
    ImplTraits::TreeTypePtr::pointer by_key251_last = NULL;
    OracleDML_OracleDMLKeys::nocycle_key_return nocycle_key252;
    ImplTraits::TreeTypePtr::pointer nocycle_key252_last = NULL;
    OracleDML::condition_return condition253;
    ImplTraits::TreeTypePtr::pointer condition253_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_connect_key(get_psrstate()->get_treeAdaptor(), "rule connect_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");
    RewriteRuleSubtreeStream<ImplTraits> stream_start_part(get_psrstate()->get_treeAdaptor(), "rule start_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_nocycle_key(get_psrstate()->get_treeAdaptor(), "rule nocycle_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:377:5: ( connect_key by_key ( nocycle_key )? condition ( start_part )? -> ^( HIERARCHICAL ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ( start_part )? ) | start_part connect_key by_key ( nocycle_key )? condition -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) )

            ANTLR_UINT32 alt86;

            alt86=2;

            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_CONNECT:
            	{
            		alt86=1;
            	}
                break;
            case PLSQL_RESERVED_START:
            	{
            		alt86=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 86 );
                ex->set_state( 0 );


                goto rulehierarchical_query_clauseEx;

            }

            switch (alt86)
            {
        	case 1:
        	    // OracleDML.g:377:10: connect_key by_key ( nocycle_key )? condition ( start_part )?
        	    {
        	        this->followPush(FOLLOW_connect_key_in_hierarchical_query_clause3641);
        	        connect_key244=connect_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            connect_key244_last = connect_key244.tree.get();
        	            stream_connect_key.add(connect_key244.tree);
        	        }

        	        this->followPush(FOLLOW_by_key_in_hierarchical_query_clause3643);
        	        by_key245=by_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            by_key245_last = by_key245.tree.get();
        	            stream_by_key.add(by_key245.tree);
        	        }

        	        // OracleDML.g:377:29: ( nocycle_key )?
        	        {
        	            ANTLR_UINT32 alt83=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA83_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "NOCYCLE")))
        	                		    {
        	                		        alt83=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt83)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:377:29: nocycle_key
        	        	    {
        	        	        this->followPush(FOLLOW_nocycle_key_in_hierarchical_query_clause3645);
        	        	        nocycle_key246=nocycle_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulehierarchical_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            nocycle_key246_last = nocycle_key246.tree.get();
        	        	            stream_nocycle_key.add(nocycle_key246.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_condition_in_hierarchical_query_clause3648);
        	        condition247=condition();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            condition247_last = condition247.tree.get();
        	            stream_condition.add(condition247.tree);
        	        }

        	        // OracleDML.g:377:52: ( start_part )?
        	        {
        	            ANTLR_UINT32 alt84=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PLSQL_RESERVED_START:
        	                	{
        	                		alt84=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt84)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:377:52: start_part
        	        	    {
        	        	        this->followPush(FOLLOW_start_part_in_hierarchical_query_clause3650);
        	        	        start_part248=start_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulehierarchical_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            start_part248_last = start_part248.tree.get();
        	        	            stream_start_part.add(start_part248.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: nocycle_key, condition, start_part, connect_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 378:9: -> ^( HIERARCHICAL ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ( start_part )? )
        	        {
        	        	// OracleDML.g:378:12: ^( HIERARCHICAL ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ( start_part )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(HIERARCHICAL, "HIERARCHICAL"), root_1);
        	        	// OracleDML.g:378:27: ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_connect_key.nextNode(), root_2);
        	        	// OracleDML.g:378:41: ( nocycle_key )?
        	        	if ( stream_nocycle_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_nocycle_key.nextTree());
        	        	}
        	        	stream_nocycle_key.reset();

        	        	// OracleDML.g:378:54: ^( LOGIC_EXPR condition )
        	        	{
        	        	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_condition.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	// OracleDML.g:378:79: ( start_part )?
        	        	if ( stream_start_part.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_start_part.nextTree());
        	        	}
        	        	stream_start_part.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:379:10: start_part connect_key by_key ( nocycle_key )? condition
        	    {
        	        this->followPush(FOLLOW_start_part_in_hierarchical_query_clause3692);
        	        start_part249=start_part();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            start_part249_last = start_part249.tree.get();
        	            stream_start_part.add(start_part249.tree);
        	        }

        	        this->followPush(FOLLOW_connect_key_in_hierarchical_query_clause3694);
        	        connect_key250=connect_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            connect_key250_last = connect_key250.tree.get();
        	            stream_connect_key.add(connect_key250.tree);
        	        }

        	        this->followPush(FOLLOW_by_key_in_hierarchical_query_clause3696);
        	        by_key251=by_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            by_key251_last = by_key251.tree.get();
        	            stream_by_key.add(by_key251.tree);
        	        }

        	        // OracleDML.g:379:40: ( nocycle_key )?
        	        {
        	            ANTLR_UINT32 alt85=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA85_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "NOCYCLE")))
        	                		    {
        	                		        alt85=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt85)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:379:40: nocycle_key
        	        	    {
        	        	        this->followPush(FOLLOW_nocycle_key_in_hierarchical_query_clause3698);
        	        	        nocycle_key252=nocycle_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulehierarchical_query_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            nocycle_key252_last = nocycle_key252.tree.get();
        	        	            stream_nocycle_key.add(nocycle_key252.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_condition_in_hierarchical_query_clause3701);
        	        condition253=condition();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulehierarchical_query_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            condition253_last = condition253.tree.get();
        	            stream_condition.add(condition253.tree);
        	        }

        	        // AST REWRITE
        	        // elements: start_part, connect_key, condition, nocycle_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 380:9: -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
        	        {
        	        	// OracleDML.g:380:12: ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(HIERARCHICAL, "HIERARCHICAL"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_start_part.nextTree());
        	        	// OracleDML.g:380:39: ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_connect_key.nextNode(), root_2);
        	        	// OracleDML.g:380:53: ( nocycle_key )?
        	        	if ( stream_nocycle_key.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_nocycle_key.nextTree());
        	        	}
        	        	stream_nocycle_key.reset();

        	        	// OracleDML.g:380:66: ^( LOGIC_EXPR condition )
        	        	{
        	        	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_condition.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulehierarchical_query_clauseEx; /* Prevent compiler warnings */
    rulehierarchical_query_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end hierarchical_query_clause */

/**
 * $ANTLR start start_part
 * OracleDML.g:383:1: start_part : start_key with_key condition -> ^( start_key ^( LOGIC_EXPR condition ) ) ;
 */
OracleDML::start_part_return
OracleDML::start_part()
{
    OracleDML::start_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::start_key_return start_key254;
    ImplTraits::TreeTypePtr::pointer start_key254_last = NULL;
    OracleDML_OracleDMLKeys::with_key_return with_key255;
    ImplTraits::TreeTypePtr::pointer with_key255_last = NULL;
    OracleDML::condition_return condition256;
    ImplTraits::TreeTypePtr::pointer condition256_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_start_key(get_psrstate()->get_treeAdaptor(), "rule start_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_with_key(get_psrstate()->get_treeAdaptor(), "rule with_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:384:5: ( start_key with_key condition -> ^( start_key ^( LOGIC_EXPR condition ) ) )
        // OracleDML.g:384:10: start_key with_key condition
        {
            this->followPush(FOLLOW_start_key_in_start_part3751);
            start_key254=start_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestart_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                start_key254_last = start_key254.tree.get();
                stream_start_key.add(start_key254.tree);
            }

            this->followPush(FOLLOW_with_key_in_start_part3753);
            with_key255=with_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestart_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                with_key255_last = with_key255.tree.get();
                stream_with_key.add(with_key255.tree);
            }

            this->followPush(FOLLOW_condition_in_start_part3755);
            condition256=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestart_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition256_last = condition256.tree.get();
                stream_condition.add(condition256.tree);
            }

            // AST REWRITE
            // elements: start_key, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 385:9: -> ^( start_key ^( LOGIC_EXPR condition ) )
            {
            	// OracleDML.g:385:12: ^( start_key ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_start_key.nextNode(), root_1);
            	// OracleDML.g:385:24: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestart_partEx; /* Prevent compiler warnings */
    rulestart_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end start_part */

/**
 * $ANTLR start group_by_clause
 * OracleDML.g:388:1: group_by_clause : ( ( group_key )=> group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) ( having_clause )? -> ^( GROUP_BY_CLAUSE[$group_key.start] ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) ( having_clause )? ) | ( having_key )=> having_clause ( group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) )? -> ^( GROUP_BY_CLAUSE[$having_clause.start] having_clause ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )? ) );
 */
OracleDML::group_by_clause_return
OracleDML::group_by_clause()
{
    OracleDML::group_by_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN259 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN260 = NULL;
    ImplTraits::CommonTokenType const* COMMA262 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN268 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN269 = NULL;
    ImplTraits::CommonTokenType const* COMMA271 = NULL;
    OracleDML_OracleDMLKeys::group_key_return group_key257;
    ImplTraits::TreeTypePtr::pointer group_key257_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key258;
    ImplTraits::TreeTypePtr::pointer by_key258_last = NULL;
    OracleDML::group_by_elements_return group_by_elements261;
    ImplTraits::TreeTypePtr::pointer group_by_elements261_last = NULL;
    OracleDML::group_by_elements_return group_by_elements263;
    ImplTraits::TreeTypePtr::pointer group_by_elements263_last = NULL;
    OracleDML::having_clause_return having_clause264;
    ImplTraits::TreeTypePtr::pointer having_clause264_last = NULL;
    OracleDML::having_clause_return having_clause265;
    ImplTraits::TreeTypePtr::pointer having_clause265_last = NULL;
    OracleDML_OracleDMLKeys::group_key_return group_key266;
    ImplTraits::TreeTypePtr::pointer group_key266_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key267;
    ImplTraits::TreeTypePtr::pointer by_key267_last = NULL;
    OracleDML::group_by_elements_return group_by_elements270;
    ImplTraits::TreeTypePtr::pointer group_by_elements270_last = NULL;
    OracleDML::group_by_elements_return group_by_elements272;
    ImplTraits::TreeTypePtr::pointer group_by_elements272_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN259_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN260_tree;
    ImplTraits::TreeTypePtr COMMA262_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN268_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN269_tree;
    ImplTraits::TreeTypePtr COMMA271_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_having_clause(get_psrstate()->get_treeAdaptor(), "rule having_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_group_key(get_psrstate()->get_treeAdaptor(), "rule group_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_group_by_elements(get_psrstate()->get_treeAdaptor(), "rule group_by_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:389:5: ( ( group_key )=> group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) ( having_clause )? -> ^( GROUP_BY_CLAUSE[$group_key.start] ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) ( having_clause )? ) | ( having_key )=> having_clause ( group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) )? -> ^( GROUP_BY_CLAUSE[$having_clause.start] having_clause ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )? ) )

            ANTLR_UINT32 alt93;

            alt93=2;

            {
                ANTLR_UINT32 LA93_0 = this->LA(1);
                if ( (LA93_0 == SQL92_RESERVED_GROUP) && (this->msynpred( antlr3::ClassForwarder<synpred13_OracleDML>() )))
                {
                    alt93=1;
                }
                else if ( (LA93_0 == SQL92_RESERVED_HAVING) && (this->msynpred( antlr3::ClassForwarder<synpred15_OracleDML>() )))
                {
                    alt93=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 93 );
                    ex->set_state( 0 );


                    goto rulegroup_by_clauseEx;

                }
            }
            switch (alt93)
            {
        	case 1:
        	    // OracleDML.g:389:9: ( group_key )=> group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) ( having_clause )?
        	    {
        	        this->followPush(FOLLOW_group_key_in_group_by_clause3800);
        	        group_key257=group_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            group_key257_last = group_key257.tree.get();
        	            stream_group_key.add(group_key257.tree);
        	        }

        	        this->followPush(FOLLOW_by_key_in_group_by_clause3802);
        	        by_key258=by_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            by_key258_last = by_key258.tree.get();
        	            stream_by_key.add(by_key258.tree);
        	        }

        	        // OracleDML.g:390:4: ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )
        	        {
        	            ANTLR_UINT32 alt88=2;
        	            switch ( this->LA(1) )
        	            {
        	            case LEFT_PAREN:
        	            	{
        	            		switch ( this->LA(2) )
        	            		{
        	            		case RIGHT_PAREN:
        	            			{
        	            				alt88=1;
        	            			}
        	            		    break;
        	            		case APPROXIMATE_NUM_LIT:
        	            		case BINDVAR:
        	            		case CHAR_STRING:
        	            		case CHAR_STRING_PERL:
        	            		case COLON:
        	            		case DELIMITED_ID:
        	            		case EXACT_NUM_LIT:
        	            		case INTRODUCER:
        	            		case LEFT_PAREN:
        	            		case MINUS_SIGN:
        	            		case NATIONAL_CHAR_STRING_LIT:
        	            		case PLSQL_NON_RESERVED_CAST:
        	            		case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	            		case PLUS_SIGN:
        	            		case REGULAR_ID:
        	            		case SQL92_RESERVED_ALL:
        	            		case SQL92_RESERVED_ANY:
        	            		case SQL92_RESERVED_CASE:
        	            		case SQL92_RESERVED_CURSOR:
        	            		case SQL92_RESERVED_DATE:
        	            		case SQL92_RESERVED_DEFAULT:
        	            		case SQL92_RESERVED_DISTINCT:
        	            		case SQL92_RESERVED_EXISTS:
        	            		case SQL92_RESERVED_FALSE:
        	            		case SQL92_RESERVED_NOT:
        	            		case SQL92_RESERVED_NULL:
        	            		case SQL92_RESERVED_PRIOR:
        	            		case SQL92_RESERVED_SELECT:
        	            		case SQL92_RESERVED_TRUE:
        	            		case UNSIGNED_INTEGER:
        	            			{
        	            				alt88=2;
        	            			}
        	            		    break;

        	            		default:
        	            		    if (this->get_backtracking()>0)
        	            		    {
        	            		        this->set_failedflag( true );
        	            		        return retval;
        	            		    }

        	            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		    ex->set_decisionNum( 88 );
        	            		    ex->set_state( 1 );


        	            		    goto rulegroup_by_clauseEx;

        	            		}

        	            	}
        	                break;
        	            case APPROXIMATE_NUM_LIT:
        	            case BINDVAR:
        	            case CHAR_STRING:
        	            case CHAR_STRING_PERL:
        	            case COLON:
        	            case DELIMITED_ID:
        	            case EXACT_NUM_LIT:
        	            case INTRODUCER:
        	            case MINUS_SIGN:
        	            case NATIONAL_CHAR_STRING_LIT:
        	            case PLSQL_NON_RESERVED_CAST:
        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	            case PLUS_SIGN:
        	            case REGULAR_ID:
        	            case SQL92_RESERVED_ALL:
        	            case SQL92_RESERVED_ANY:
        	            case SQL92_RESERVED_CASE:
        	            case SQL92_RESERVED_CURSOR:
        	            case SQL92_RESERVED_DATE:
        	            case SQL92_RESERVED_DEFAULT:
        	            case SQL92_RESERVED_DISTINCT:
        	            case SQL92_RESERVED_EXISTS:
        	            case SQL92_RESERVED_FALSE:
        	            case SQL92_RESERVED_NOT:
        	            case SQL92_RESERVED_NULL:
        	            case SQL92_RESERVED_PRIOR:
        	            case SQL92_RESERVED_TRUE:
        	            case UNSIGNED_INTEGER:
        	            	{
        	            		alt88=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 88 );
        	                ex->set_state( 0 );


        	                goto rulegroup_by_clauseEx;

        	            }

        	            switch (alt88)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:390:5: LEFT_PAREN RIGHT_PAREN
        	        	    {
        	        	        LEFT_PAREN259 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_group_by_clause3808);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN259);


        	        	        RIGHT_PAREN260 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_group_by_clause3810);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN260);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:391:6: group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
        	        	    {
        	        	        this->followPush(FOLLOW_group_by_elements_in_group_by_clause3817);
        	        	        group_by_elements261=group_by_elements();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            group_by_elements261_last = group_by_elements261.tree.get();
        	        	            stream_group_by_elements.add(group_by_elements261.tree);
        	        	        }

        	        	        // OracleDML.g:391:24: ( ( COMMA group_by_elements )=> COMMA group_by_elements )*

        	        	        for (;;)
        	        	        {
        	        	            ANTLR_UINT32 alt87=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case COMMA:
        	        	            	{
        	        	            		{
        	        	            		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	            		    */
        	        	            		    ANTLR_UINT32 LA87_2 = this->LA(2);
        	        	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred14_OracleDML>() )))
        	        	            		    {
        	        	            		        alt87=1;
        	        	            		    }

        	        	            		}
        	        	            	}
        	        	                break;

        	        	            }

        	        	            switch (alt87)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:391:25: ( COMMA group_by_elements )=> COMMA group_by_elements
        	        	        	    {
        	        	        	        COMMA262 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_group_by_clause3827);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA262);


        	        	        	        this->followPush(FOLLOW_group_by_elements_in_group_by_clause3829);
        	        	        	        group_by_elements263=group_by_elements();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) 
        	        	        	        {
        	        	        	            group_by_elements263_last = group_by_elements263.tree.get();
        	        	        	            stream_group_by_elements.add(group_by_elements263.tree);
        	        	        	        }

        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop87;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop87: ; /* Jump out to here if this rule does not match */


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:393:3: ( having_clause )?
        	        {
        	            ANTLR_UINT32 alt89=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_HAVING:
        	                	{
        	                		alt89=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt89)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:393:3: having_clause
        	        	    {
        	        	        this->followPush(FOLLOW_having_clause_in_group_by_clause3840);
        	        	        having_clause264=having_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            having_clause264_last = having_clause264.tree.get();
        	        	            stream_having_clause.add(having_clause264.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: having_clause, group_key, group_by_elements
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 394:3: -> ^( GROUP_BY_CLAUSE[$group_key.start] ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) ( having_clause )? )
        	        {
        	        	// OracleDML.g:394:6: ^( GROUP_BY_CLAUSE[$group_key.start] ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) ( having_clause )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUP_BY_CLAUSE, (group_key257.start)), root_1);
        	        	// OracleDML.g:394:42: ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_group_key.nextNode(), root_2);
        	        	// OracleDML.g:394:54: ( ^( GROUP_BY_ELEMENT group_by_elements ) )*
        	        	while ( stream_group_by_elements.hasNext() ) {
        	        		// OracleDML.g:394:54: ^( GROUP_BY_ELEMENT group_by_elements )
        	        		{
        	        		ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        		root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUP_BY_ELEMENT, "GROUP_BY_ELEMENT"), root_3);
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_group_by_elements.nextTree());
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        		}
        	        	}
        	        	stream_group_by_elements.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	// OracleDML.g:394:94: ( having_clause )?
        	        	if ( stream_having_clause.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_having_clause.nextTree());
        	        	}
        	        	stream_having_clause.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:395:9: ( having_key )=> having_clause ( group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) )?
        	    {
        	        this->followPush(FOLLOW_having_clause_in_group_by_clause3880);
        	        having_clause265=having_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            having_clause265_last = having_clause265.tree.get();
        	            stream_having_clause.add(having_clause265.tree);
        	        }

        	        // OracleDML.g:396:3: ( group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ) )?
        	        {
        	            ANTLR_UINT32 alt92=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_GROUP:
        	                	{
        	                		alt92=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt92)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:396:4: group_key by_key ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )
        	        	    {
        	        	        this->followPush(FOLLOW_group_key_in_group_by_clause3885);
        	        	        group_key266=group_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            group_key266_last = group_key266.tree.get();
        	        	            stream_group_key.add(group_key266.tree);
        	        	        }

        	        	        this->followPush(FOLLOW_by_key_in_group_by_clause3887);
        	        	        by_key267=by_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulegroup_by_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            by_key267_last = by_key267.tree.get();
        	        	            stream_by_key.add(by_key267.tree);
        	        	        }

        	        	        // OracleDML.g:397:4: ( LEFT_PAREN RIGHT_PAREN | group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )
        	        	        {
        	        	            ANTLR_UINT32 alt91=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case LEFT_PAREN:
        	        	            	{
        	        	            		switch ( this->LA(2) )
        	        	            		{
        	        	            		case RIGHT_PAREN:
        	        	            			{
        	        	            				alt91=1;
        	        	            			}
        	        	            		    break;
        	        	            		case APPROXIMATE_NUM_LIT:
        	        	            		case BINDVAR:
        	        	            		case CHAR_STRING:
        	        	            		case CHAR_STRING_PERL:
        	        	            		case COLON:
        	        	            		case DELIMITED_ID:
        	        	            		case EXACT_NUM_LIT:
        	        	            		case INTRODUCER:
        	        	            		case LEFT_PAREN:
        	        	            		case MINUS_SIGN:
        	        	            		case NATIONAL_CHAR_STRING_LIT:
        	        	            		case PLSQL_NON_RESERVED_CAST:
        	        	            		case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	        	            		case PLUS_SIGN:
        	        	            		case REGULAR_ID:
        	        	            		case SQL92_RESERVED_ALL:
        	        	            		case SQL92_RESERVED_ANY:
        	        	            		case SQL92_RESERVED_CASE:
        	        	            		case SQL92_RESERVED_CURSOR:
        	        	            		case SQL92_RESERVED_DATE:
        	        	            		case SQL92_RESERVED_DEFAULT:
        	        	            		case SQL92_RESERVED_DISTINCT:
        	        	            		case SQL92_RESERVED_EXISTS:
        	        	            		case SQL92_RESERVED_FALSE:
        	        	            		case SQL92_RESERVED_NOT:
        	        	            		case SQL92_RESERVED_NULL:
        	        	            		case SQL92_RESERVED_PRIOR:
        	        	            		case SQL92_RESERVED_SELECT:
        	        	            		case SQL92_RESERVED_TRUE:
        	        	            		case UNSIGNED_INTEGER:
        	        	            			{
        	        	            				alt91=2;
        	        	            			}
        	        	            		    break;

        	        	            		default:
        	        	            		    if (this->get_backtracking()>0)
        	        	            		    {
        	        	            		        this->set_failedflag( true );
        	        	            		        return retval;
        	        	            		    }

        	        	            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	            		    ex->set_decisionNum( 91 );
        	        	            		    ex->set_state( 1 );


        	        	            		    goto rulegroup_by_clauseEx;

        	        	            		}

        	        	            	}
        	        	                break;
        	        	            case APPROXIMATE_NUM_LIT:
        	        	            case BINDVAR:
        	        	            case CHAR_STRING:
        	        	            case CHAR_STRING_PERL:
        	        	            case COLON:
        	        	            case DELIMITED_ID:
        	        	            case EXACT_NUM_LIT:
        	        	            case INTRODUCER:
        	        	            case MINUS_SIGN:
        	        	            case NATIONAL_CHAR_STRING_LIT:
        	        	            case PLSQL_NON_RESERVED_CAST:
        	        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	        	            case PLUS_SIGN:
        	        	            case REGULAR_ID:
        	        	            case SQL92_RESERVED_ALL:
        	        	            case SQL92_RESERVED_ANY:
        	        	            case SQL92_RESERVED_CASE:
        	        	            case SQL92_RESERVED_CURSOR:
        	        	            case SQL92_RESERVED_DATE:
        	        	            case SQL92_RESERVED_DEFAULT:
        	        	            case SQL92_RESERVED_DISTINCT:
        	        	            case SQL92_RESERVED_EXISTS:
        	        	            case SQL92_RESERVED_FALSE:
        	        	            case SQL92_RESERVED_NOT:
        	        	            case SQL92_RESERVED_NULL:
        	        	            case SQL92_RESERVED_PRIOR:
        	        	            case SQL92_RESERVED_TRUE:
        	        	            case UNSIGNED_INTEGER:
        	        	            	{
        	        	            		alt91=2;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                if (this->get_backtracking()>0)
        	        	                {
        	        	                    this->set_failedflag( true );
        	        	                    return retval;
        	        	                }

        	        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                ex->set_decisionNum( 91 );
        	        	                ex->set_state( 0 );


        	        	                goto rulegroup_by_clauseEx;

        	        	            }

        	        	            switch (alt91)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:397:5: LEFT_PAREN RIGHT_PAREN
        	        	        	    {
        	        	        	        LEFT_PAREN268 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_group_by_clause3893);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN268);


        	        	        	        RIGHT_PAREN269 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_group_by_clause3895);
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }
        	        	        	         
        	        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN269);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:398:6: group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_group_by_elements_in_group_by_clause3902);
        	        	        	        group_by_elements270=group_by_elements();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) 
        	        	        	        {
        	        	        	            group_by_elements270_last = group_by_elements270.tree.get();
        	        	        	            stream_group_by_elements.add(group_by_elements270.tree);
        	        	        	        }

        	        	        	        // OracleDML.g:398:24: ( ( COMMA group_by_elements )=> COMMA group_by_elements )*

        	        	        	        for (;;)
        	        	        	        {
        	        	        	            ANTLR_UINT32 alt90=2;
        	        	        	            switch ( this->LA(1) )
        	        	        	            {
        	        	        	            case COMMA:
        	        	        	            	{
        	        	        	            		{
        	        	        	            		   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        	        	            		    */
        	        	        	            		    ANTLR_UINT32 LA90_2 = this->LA(2);
        	        	        	            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred16_OracleDML>() )))
        	        	        	            		    {
        	        	        	            		        alt90=1;
        	        	        	            		    }

        	        	        	            		}
        	        	        	            	}
        	        	        	                break;

        	        	        	            }

        	        	        	            switch (alt90)
        	        	        	            {
        	        	        	        	case 1:
        	        	        	        	    // OracleDML.g:398:25: ( COMMA group_by_elements )=> COMMA group_by_elements
        	        	        	        	    {
        	        	        	        	        COMMA271 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_group_by_clause3912);
        	        	        	        	        if  (this->hasException())
        	        	        	        	        {
        	        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        	        }
        	        	        	        	        if (this->hasFailed())
        	        	        	        	        {
        	        	        	        	            return retval;
        	        	        	        	        }
        	        	        	        	         
        	        	        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA271);


        	        	        	        	        this->followPush(FOLLOW_group_by_elements_in_group_by_clause3914);
        	        	        	        	        group_by_elements272=group_by_elements();

        	        	        	        	        this->followPop();
        	        	        	        	        if  (this->hasException())
        	        	        	        	        {
        	        	        	        	            goto rulegroup_by_clauseEx;
        	        	        	        	        }
        	        	        	        	        if (this->hasFailed())
        	        	        	        	        {
        	        	        	        	            return retval;
        	        	        	        	        }

        	        	        	        	        if ( this->get_backtracking()==0 ) 
        	        	        	        	        {
        	        	        	        	            group_by_elements272_last = group_by_elements272.tree.get();
        	        	        	        	            stream_group_by_elements.add(group_by_elements272.tree);
        	        	        	        	        }

        	        	        	        	    }
        	        	        	        	    break;

        	        	        	        	default:
        	        	        	        	    goto loop90;	/* break out of the loop */
        	        	        	        	    break;
        	        	        	            }
        	        	        	        }
        	        	        	        loop90: ; /* Jump out to here if this rule does not match */


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: group_key, group_by_elements, having_clause
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 401:3: -> ^( GROUP_BY_CLAUSE[$having_clause.start] having_clause ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )? )
        	        {
        	        	// OracleDML.g:401:6: ^( GROUP_BY_CLAUSE[$having_clause.start] having_clause ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUP_BY_CLAUSE, (having_clause265.start)), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_having_clause.nextTree());
        	        	// OracleDML.g:401:60: ( ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* ) )?
        	        	if ( stream_group_key.hasNext()||stream_group_by_elements.hasNext() ) {
        	        		// OracleDML.g:401:60: ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )* )
        	        		{
        	        		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_group_key.nextNode(), root_2);
        	        		// OracleDML.g:401:72: ( ^( GROUP_BY_ELEMENT group_by_elements ) )*
        	        		while ( stream_group_by_elements.hasNext() ) {
        	        			// OracleDML.g:401:72: ^( GROUP_BY_ELEMENT group_by_elements )
        	        			{
        	        			ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        			root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUP_BY_ELEMENT, "GROUP_BY_ELEMENT"), root_3);
        	        			get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_group_by_elements.nextTree());
        	        			get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        			}
        	        		}
        	        		stream_group_by_elements.reset();

        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        		}
        	        	}
        	        	stream_group_key.reset();
        	        	stream_group_by_elements.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulegroup_by_clauseEx; /* Prevent compiler warnings */
    rulegroup_by_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end group_by_clause */

/**
 * $ANTLR start group_by_elements
 * OracleDML.g:404:1: group_by_elements : ( grouping_sets_clause | rollup_cube_clause | expression -> ^( EXPR expression ) );
 */
OracleDML::group_by_elements_return
OracleDML::group_by_elements()
{
    OracleDML::group_by_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::grouping_sets_clause_return grouping_sets_clause273;
    ImplTraits::TreeTypePtr::pointer grouping_sets_clause273_last = NULL;
    OracleDML::rollup_cube_clause_return rollup_cube_clause274;
    ImplTraits::TreeTypePtr::pointer rollup_cube_clause274_last = NULL;
    OracleDML::expression_return expression275;
    ImplTraits::TreeTypePtr::pointer expression275_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:405:5: ( grouping_sets_clause | rollup_cube_clause | expression -> ^( EXPR expression ) )

            ANTLR_UINT32 alt94;

            alt94=3;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA94_1 = this->LA(2);
            		    if ( ((toUpper(LT(1)->getText()) == "GROUPING")))
            		    {
            		        alt94=1;
            		    }
            		    else if ( ((((toUpper(LT(1)->getText()) == "ROLLUP"))||((toUpper(LT(1)->getText()) == "CUBE")))))
            		    {
            		        alt94=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt94=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 94 );
            		        ex->set_state( 1 );


            		        goto rulegroup_by_elementsEx;

            		    }
            		}
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt94=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 94 );
                ex->set_state( 0 );


                goto rulegroup_by_elementsEx;

            }

            switch (alt94)
            {
        	case 1:
        	    // OracleDML.g:405:10: grouping_sets_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_grouping_sets_clause_in_group_by_elements3969);
        	        grouping_sets_clause273=grouping_sets_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, grouping_sets_clause273.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:406:10: rollup_cube_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_rollup_cube_clause_in_group_by_elements3980);
        	        rollup_cube_clause274=rollup_cube_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, rollup_cube_clause274.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:407:10: expression
        	    {
        	        this->followPush(FOLLOW_expression_in_group_by_elements3992);
        	        expression275=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegroup_by_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression275_last = expression275.tree.get();
        	            stream_expression.add(expression275.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 407:21: -> ^( EXPR expression )
        	        {
        	        	// OracleDML.g:407:24: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulegroup_by_elementsEx; /* Prevent compiler warnings */
    rulegroup_by_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end group_by_elements */

/**
 * $ANTLR start rollup_cube_clause
 * OracleDML.g:410:1: rollup_cube_clause : ( rollup_key ^| cube_key ^) LEFT_PAREN grouping_sets_elements ( COMMA ! grouping_sets_elements )* RIGHT_PAREN ;
 */
OracleDML::rollup_cube_clause_return
OracleDML::rollup_cube_clause()
{
    OracleDML::rollup_cube_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN278 = NULL;
    ImplTraits::CommonTokenType const* COMMA280 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN282 = NULL;
    OracleDML_OracleDMLKeys::rollup_key_return rollup_key276;
    ImplTraits::TreeTypePtr::pointer rollup_key276_last = NULL;
    OracleDML_OracleDMLKeys::cube_key_return cube_key277;
    ImplTraits::TreeTypePtr::pointer cube_key277_last = NULL;
    OracleDML::grouping_sets_elements_return grouping_sets_elements279;
    ImplTraits::TreeTypePtr::pointer grouping_sets_elements279_last = NULL;
    OracleDML::grouping_sets_elements_return grouping_sets_elements281;
    ImplTraits::TreeTypePtr::pointer grouping_sets_elements281_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN278_tree;
    ImplTraits::TreeTypePtr COMMA280_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN282_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:411:5: ( ( rollup_key ^| cube_key ^) LEFT_PAREN grouping_sets_elements ( COMMA ! grouping_sets_elements )* RIGHT_PAREN )
        // OracleDML.g:411:10: ( rollup_key ^| cube_key ^) LEFT_PAREN grouping_sets_elements ( COMMA ! grouping_sets_elements )* RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:411:10: ( rollup_key ^| cube_key ^)
            {
                ANTLR_UINT32 alt95=2;
                {
                    ANTLR_UINT32 LA95_0 = this->LA(1);
                    if ( (LA95_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "ROLLUP"))||((toUpper(LT(1)->getText()) == "CUBE")))))
                    {
                        {
                            ANTLR_UINT32 LA95_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "ROLLUP")))
                            {
                                alt95=1;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "CUBE")))
                            {
                                alt95=2;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 95 );
                                ex->set_state( 1 );


                                goto rulerollup_cube_clauseEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 95 );
                        ex->set_state( 0 );


                        goto rulerollup_cube_clauseEx;

                    }
                }
                switch (alt95)
                {
            	case 1:
            	    // OracleDML.g:411:11: rollup_key ^
            	    {
            	        this->followPush(FOLLOW_rollup_key_in_rollup_cube_clause4021);
            	        rollup_key276=rollup_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerollup_cube_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(rollup_key276.tree, root_0);

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:411:23: cube_key ^
            	    {
            	        this->followPush(FOLLOW_cube_key_in_rollup_cube_clause4024);
            	        cube_key277=cube_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerollup_cube_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(cube_key277.tree, root_0);

            	    }
            	    break;

                }
            }

            LEFT_PAREN278 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_rollup_cube_clause4028);
            if  (this->hasException())
            {
                goto rulerollup_cube_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN278_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN278));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN278_tree);
            }


            this->followPush(FOLLOW_grouping_sets_elements_in_rollup_cube_clause4030);
            grouping_sets_elements279=grouping_sets_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerollup_cube_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, grouping_sets_elements279.tree);


            // OracleDML.g:411:68: ( COMMA ! grouping_sets_elements )*

            for (;;)
            {
                ANTLR_UINT32 alt96=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt96=1;
                	}
                    break;

                }

                switch (alt96)
                {
            	case 1:
            	    // OracleDML.g:411:69: COMMA ! grouping_sets_elements
            	    {
            	        COMMA280 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_rollup_cube_clause4033);
            	        if  (this->hasException())
            	        {
            	            goto rulerollup_cube_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_grouping_sets_elements_in_rollup_cube_clause4036);
            	        grouping_sets_elements281=grouping_sets_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerollup_cube_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, grouping_sets_elements281.tree);


            	    }
            	    break;

            	default:
            	    goto loop96;	/* break out of the loop */
            	    break;
                }
            }
            loop96: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN282 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_rollup_cube_clause4040);
            if  (this->hasException())
            {
                goto rulerollup_cube_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN282_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN282));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN282_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulerollup_cube_clauseEx; /* Prevent compiler warnings */
    rulerollup_cube_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end rollup_cube_clause */

/**
 * $ANTLR start grouping_sets_clause
 * OracleDML.g:414:1: grouping_sets_clause : grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ ) ;
 */
OracleDML::grouping_sets_clause_return
OracleDML::grouping_sets_clause()
{
    OracleDML::grouping_sets_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN285 = NULL;
    ImplTraits::CommonTokenType const* COMMA287 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN289 = NULL;
    OracleDML_OracleDMLKeys::grouping_key_return grouping_key283;
    ImplTraits::TreeTypePtr::pointer grouping_key283_last = NULL;
    OracleDML_OracleDMLKeys::sets_key_return sets_key284;
    ImplTraits::TreeTypePtr::pointer sets_key284_last = NULL;
    OracleDML::grouping_sets_elements_return grouping_sets_elements286;
    ImplTraits::TreeTypePtr::pointer grouping_sets_elements286_last = NULL;
    OracleDML::grouping_sets_elements_return grouping_sets_elements288;
    ImplTraits::TreeTypePtr::pointer grouping_sets_elements288_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN285_tree;
    ImplTraits::TreeTypePtr COMMA287_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN289_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_grouping_key(get_psrstate()->get_treeAdaptor(), "rule grouping_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_sets_key(get_psrstate()->get_treeAdaptor(), "rule sets_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_grouping_sets_elements(get_psrstate()->get_treeAdaptor(), "rule grouping_sets_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:415:5: ( grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ ) )
        // OracleDML.g:415:10: grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN
        {
            this->followPush(FOLLOW_grouping_key_in_grouping_sets_clause4061);
            grouping_key283=grouping_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                grouping_key283_last = grouping_key283.tree.get();
                stream_grouping_key.add(grouping_key283.tree);
            }

            this->followPush(FOLLOW_sets_key_in_grouping_sets_clause4063);
            sets_key284=sets_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                sets_key284_last = sets_key284.tree.get();
                stream_sets_key.add(sets_key284.tree);
            }

            LEFT_PAREN285 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_grouping_sets_clause4074);
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN285);


            this->followPush(FOLLOW_grouping_sets_elements_in_grouping_sets_clause4076);
            grouping_sets_elements286=grouping_sets_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                grouping_sets_elements286_last = grouping_sets_elements286.tree.get();
                stream_grouping_sets_elements.add(grouping_sets_elements286.tree);
            }

            // OracleDML.g:416:43: ( COMMA grouping_sets_elements )*

            for (;;)
            {
                ANTLR_UINT32 alt97=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt97=1;
                	}
                    break;

                }

                switch (alt97)
                {
            	case 1:
            	    // OracleDML.g:416:44: COMMA grouping_sets_elements
            	    {
            	        COMMA287 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_grouping_sets_clause4079);
            	        if  (this->hasException())
            	        {
            	            goto rulegrouping_sets_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA287);


            	        this->followPush(FOLLOW_grouping_sets_elements_in_grouping_sets_clause4081);
            	        grouping_sets_elements288=grouping_sets_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegrouping_sets_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            grouping_sets_elements288_last = grouping_sets_elements288.tree.get();
            	            stream_grouping_sets_elements.add(grouping_sets_elements288.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop97;	/* break out of the loop */
            	    break;
                }
            }
            loop97: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN289 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_grouping_sets_clause4085);
            if  (this->hasException())
            {
                goto rulegrouping_sets_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN289);


            // AST REWRITE
            // elements: grouping_key, grouping_sets_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 417:9: -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ )
            {
            	// OracleDML.g:417:12: ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_grouping_key.nextNode(), root_1);
            	if ( !(stream_grouping_sets_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "grouping_sets_elements empty" );
            		goto rulegrouping_sets_clauseEx;
            	}
            	while ( stream_grouping_sets_elements.hasNext() ) {
            		// OracleDML.g:417:27: ^( GROUPIN_SET grouping_sets_elements )
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(GROUPIN_SET, "GROUPIN_SET"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_grouping_sets_elements.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_grouping_sets_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulegrouping_sets_clauseEx; /* Prevent compiler warnings */
    rulegrouping_sets_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end grouping_sets_clause */

/**
 * $ANTLR start grouping_sets_elements
 * OracleDML.g:420:1: grouping_sets_elements : ( ( rollup_key | cube_key )=> rollup_cube_clause | ( LEFT_PAREN )=> expression_list | expression -> ^( EXPR expression ) );
 */
OracleDML::grouping_sets_elements_return
OracleDML::grouping_sets_elements()
{
    OracleDML::grouping_sets_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::rollup_cube_clause_return rollup_cube_clause290;
    ImplTraits::TreeTypePtr::pointer rollup_cube_clause290_last = NULL;
    OracleDML::expression_list_return expression_list291;
    ImplTraits::TreeTypePtr::pointer expression_list291_last = NULL;
    OracleDML::expression_return expression292;
    ImplTraits::TreeTypePtr::pointer expression292_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:421:5: ( ( rollup_key | cube_key )=> rollup_cube_clause | ( LEFT_PAREN )=> expression_list | expression -> ^( EXPR expression ) )

            ANTLR_UINT32 alt98;

            alt98=3;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA98_1 = this->LA(2);
            		    if ( (( ((((toUpper(LT(1)->getText()) == "ROLLUP"))||((toUpper(LT(1)->getText()) == "CUBE")))) && (this->msynpred( antlr3::ClassForwarder<synpred17_OracleDML>() )) )))
            		    {
            		        alt98=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt98=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 98 );
            		        ex->set_state( 1 );


            		        goto rulegrouping_sets_elementsEx;

            		    }
            		}
            	}
                break;
            case LEFT_PAREN:
            	{
            		{
            		    ANTLR_UINT32 LA98_2 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred18_OracleDML>() )))
            		    {
            		        alt98=2;
            		    }
            		    else if ( (true))
            		    {
            		        alt98=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 98 );
            		        ex->set_state( 2 );


            		        goto rulegrouping_sets_elementsEx;

            		    }
            		}
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt98=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 98 );
                ex->set_state( 0 );


                goto rulegrouping_sets_elementsEx;

            }

            switch (alt98)
            {
        	case 1:
        	    // OracleDML.g:421:10: ( rollup_key | cube_key )=> rollup_cube_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_rollup_cube_clause_in_grouping_sets_elements4133);
        	        rollup_cube_clause290=rollup_cube_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegrouping_sets_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, rollup_cube_clause290.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:422:10: ( LEFT_PAREN )=> expression_list
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_expression_list_in_grouping_sets_elements4149);
        	        expression_list291=expression_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegrouping_sets_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_list291.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:423:10: expression
        	    {
        	        this->followPush(FOLLOW_expression_in_grouping_sets_elements4160);
        	        expression292=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulegrouping_sets_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression292_last = expression292.tree.get();
        	            stream_expression.add(expression292.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 423:21: -> ^( EXPR expression )
        	        {
        	        	// OracleDML.g:423:24: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulegrouping_sets_elementsEx; /* Prevent compiler warnings */
    rulegrouping_sets_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end grouping_sets_elements */

/**
 * $ANTLR start having_clause
 * OracleDML.g:426:1: having_clause : having_key condition -> ^( having_key ^( LOGIC_EXPR condition ) ) ;
 */
OracleDML::having_clause_return
OracleDML::having_clause()
{
    OracleDML::having_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::having_key_return having_key293;
    ImplTraits::TreeTypePtr::pointer having_key293_last = NULL;
    OracleDML::condition_return condition294;
    ImplTraits::TreeTypePtr::pointer condition294_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_having_key(get_psrstate()->get_treeAdaptor(), "rule having_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:427:5: ( having_key condition -> ^( having_key ^( LOGIC_EXPR condition ) ) )
        // OracleDML.g:427:10: having_key condition
        {
            this->followPush(FOLLOW_having_key_in_having_clause4188);
            having_key293=having_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulehaving_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                having_key293_last = having_key293.tree.get();
                stream_having_key.add(having_key293.tree);
            }

            this->followPush(FOLLOW_condition_in_having_clause4190);
            condition294=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto rulehaving_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition294_last = condition294.tree.get();
                stream_condition.add(condition294.tree);
            }

            // AST REWRITE
            // elements: having_key, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 428:9: -> ^( having_key ^( LOGIC_EXPR condition ) )
            {
            	// OracleDML.g:428:12: ^( having_key ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_having_key.nextNode(), root_1);
            	// OracleDML.g:428:25: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulehaving_clauseEx; /* Prevent compiler warnings */
    rulehaving_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end having_clause */

/**
 * $ANTLR start model_clause
 * OracleDML.g:431:1: model_clause : model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model -> ^( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model ) ;
 */
OracleDML::model_clause_return
OracleDML::model_clause()
{
    OracleDML::model_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::model_key_return model_key295;
    ImplTraits::TreeTypePtr::pointer model_key295_last = NULL;
    OracleDML::cell_reference_options_return cell_reference_options296;
    ImplTraits::TreeTypePtr::pointer cell_reference_options296_last = NULL;
    OracleDML::return_rows_clause_return return_rows_clause297;
    ImplTraits::TreeTypePtr::pointer return_rows_clause297_last = NULL;
    OracleDML::reference_model_return reference_model298;
    ImplTraits::TreeTypePtr::pointer reference_model298_last = NULL;
    OracleDML::main_model_return main_model299;
    ImplTraits::TreeTypePtr::pointer main_model299_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_return_rows_clause(get_psrstate()->get_treeAdaptor(), "rule return_rows_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_key(get_psrstate()->get_treeAdaptor(), "rule model_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_cell_reference_options(get_psrstate()->get_treeAdaptor(), "rule cell_reference_options");
    RewriteRuleSubtreeStream<ImplTraits> stream_reference_model(get_psrstate()->get_treeAdaptor(), "rule reference_model");
    RewriteRuleSubtreeStream<ImplTraits> stream_main_model(get_psrstate()->get_treeAdaptor(), "rule main_model");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:432:5: ( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model -> ^( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model ) )
        // OracleDML.g:432:10: model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model
        {
            this->followPush(FOLLOW_model_key_in_model_clause4230);
            model_key295=model_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_key295_last = model_key295.tree.get();
                stream_model_key.add(model_key295.tree);
            }

            // OracleDML.g:432:20: ( cell_reference_options )*

            for (;;)
            {
                ANTLR_UINT32 alt99=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		switch ( this->LA(2) )
                		{
                		case REGULAR_ID:
                			{
                				{
                				   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                				    */
                				    ANTLR_UINT32 LA99_3 = this->LA(3);
                				    if ( ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                				    {
                				        alt99=1;
                				    }

                				}
                			}
                		    break;

                		}

                	}
                    break;
                case SQL92_RESERVED_UNIQUE:
                	{
                		alt99=1;
                	}
                    break;

                }

                switch (alt99)
                {
            	case 1:
            	    // OracleDML.g:432:20: cell_reference_options
            	    {
            	        this->followPush(FOLLOW_cell_reference_options_in_model_clause4232);
            	        cell_reference_options296=cell_reference_options();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            cell_reference_options296_last = cell_reference_options296.tree.get();
            	            stream_cell_reference_options.add(cell_reference_options296.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop99;	/* break out of the loop */
            	    break;
                }
            }
            loop99: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:432:44: ( return_rows_clause )?
            {
                ANTLR_UINT32 alt100=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case REGULAR_ID:
                    		    	{
                    		    		switch ( this->LA(3) )
                    		    		{
                    		    		    case REGULAR_ID:
                    		    		    	{
                    		    		    		switch ( this->LA(4) )
                    		    		    		{
                    		    		    		    case REGULAR_ID:
                    		    		    		    	{
                    		    		    		    		alt100=1;
                    		    		    		    	}
                    		    		    		        break;
                    		    		    		}

                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		    case SQL92_RESERVED_ALL:
                    		    	{
                    		    		alt100=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt100)
                {
            	case 1:
            	    // OracleDML.g:432:44: return_rows_clause
            	    {
            	        this->followPush(FOLLOW_return_rows_clause_in_model_clause4235);
            	        return_rows_clause297=return_rows_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            return_rows_clause297_last = return_rows_clause297.tree.get();
            	            stream_return_rows_clause.add(return_rows_clause297.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:432:64: ( reference_model )*

            for (;;)
            {
                ANTLR_UINT32 alt101=2;
                alt101 = cdfa101.predict(this, this->get_rec(), this->get_istream(), cdfa101 );
                if  (this->hasException())
                {
                    goto rulemodel_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                switch (alt101)
                {
            	case 1:
            	    // OracleDML.g:432:64: reference_model
            	    {
            	        this->followPush(FOLLOW_reference_model_in_model_clause4238);
            	        reference_model298=reference_model();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            reference_model298_last = reference_model298.tree.get();
            	            stream_reference_model.add(reference_model298.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop101;	/* break out of the loop */
            	    break;
                }
            }
            loop101: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_main_model_in_model_clause4241);
            main_model299=main_model();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                main_model299_last = main_model299.tree.get();
                stream_main_model.add(main_model299.tree);
            }

            // AST REWRITE
            // elements: reference_model, return_rows_clause, main_model, cell_reference_options, model_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 433:9: -> ^( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model )
            {
            	// OracleDML.g:433:12: ^( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_model_key.nextNode(), root_1);
            	// OracleDML.g:433:24: ( cell_reference_options )*
            	while ( stream_cell_reference_options.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cell_reference_options.nextTree());
            	}
            	stream_cell_reference_options.reset();

            	// OracleDML.g:433:48: ( return_rows_clause )?
            	if ( stream_return_rows_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_return_rows_clause.nextTree());
            	}
            	stream_return_rows_clause.reset();

            	// OracleDML.g:433:68: ( reference_model )*
            	while ( stream_reference_model.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_reference_model.nextTree());
            	}
            	stream_reference_model.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_main_model.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_clauseEx; /* Prevent compiler warnings */
    rulemodel_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_clause */

/**
 * $ANTLR start cell_reference_options
 * OracleDML.g:436:1: cell_reference_options : ( ( ignore_key ^| keep_key ^) nav_key | unique_key ^ ( dimension_key | single_key reference_key ) );
 */
OracleDML::cell_reference_options_return
OracleDML::cell_reference_options()
{
    OracleDML::cell_reference_options_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::ignore_key_return ignore_key300;
    ImplTraits::TreeTypePtr::pointer ignore_key300_last = NULL;
    OracleDML_OracleDMLKeys::keep_key_return keep_key301;
    ImplTraits::TreeTypePtr::pointer keep_key301_last = NULL;
    OracleDML_OracleDMLKeys::nav_key_return nav_key302;
    ImplTraits::TreeTypePtr::pointer nav_key302_last = NULL;
    OracleDML_OracleDMLKeys::unique_key_return unique_key303;
    ImplTraits::TreeTypePtr::pointer unique_key303_last = NULL;
    OracleDML_OracleDMLKeys::dimension_key_return dimension_key304;
    ImplTraits::TreeTypePtr::pointer dimension_key304_last = NULL;
    OracleDML_OracleDMLKeys::single_key_return single_key305;
    ImplTraits::TreeTypePtr::pointer single_key305_last = NULL;
    OracleDML_OracleDMLKeys::reference_key_return reference_key306;
    ImplTraits::TreeTypePtr::pointer reference_key306_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:437:5: ( ( ignore_key ^| keep_key ^) nav_key | unique_key ^ ( dimension_key | single_key reference_key ) )

            ANTLR_UINT32 alt104;

            alt104=2;

            {
                ANTLR_UINT32 LA104_0 = this->LA(1);
                if ( (LA104_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                {
                    alt104=1;
                }
                else if ( (LA104_0 == SQL92_RESERVED_UNIQUE))
                {
                    alt104=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 104 );
                    ex->set_state( 0 );


                    goto rulecell_reference_optionsEx;

                }
            }
            switch (alt104)
            {
        	case 1:
        	    // OracleDML.g:437:10: ( ignore_key ^| keep_key ^) nav_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:437:10: ( ignore_key ^| keep_key ^)
        	        {
        	            ANTLR_UINT32 alt102=2;
        	            {
        	                ANTLR_UINT32 LA102_0 = this->LA(1);
        	                if ( (LA102_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA102_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "IGNORE")))
        	                        {
        	                            alt102=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "KEEP")))
        	                        {
        	                            alt102=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 102 );
        	                            ex->set_state( 1 );


        	                            goto rulecell_reference_optionsEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 102 );
        	                    ex->set_state( 0 );


        	                    goto rulecell_reference_optionsEx;

        	                }
        	            }
        	            switch (alt102)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:437:11: ignore_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_ignore_key_in_cell_reference_options4287);
        	        	        ignore_key300=ignore_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(ignore_key300.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:437:23: keep_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_keep_key_in_cell_reference_options4290);
        	        	        keep_key301=keep_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(keep_key301.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_nav_key_in_cell_reference_options4294);
        	        nav_key302=nav_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecell_reference_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nav_key302.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:438:10: unique_key ^ ( dimension_key | single_key reference_key )
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_unique_key_in_cell_reference_options4305);
        	        unique_key303=unique_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecell_reference_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(unique_key303.tree, root_0);

        	        // OracleDML.g:438:22: ( dimension_key | single_key reference_key )
        	        {
        	            ANTLR_UINT32 alt103=2;
        	            {
        	                ANTLR_UINT32 LA103_0 = this->LA(1);
        	                if ( (LA103_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "SINGLE")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA103_1 = this->LA(2);
        	                        if ( (LA103_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "SINGLE")))))
        	                        {
        	                            {
        	                                ANTLR_UINT32 LA103_2 = this->LA(3);
        	                                if ( ((toUpper(LT(1)->getText()) == "DIMENSION")))
        	                                {
        	                                    alt103=1;
        	                                }
        	                                else if ( ((toUpper(LT(1)->getText()) == "SINGLE")))
        	                                {
        	                                    alt103=2;
        	                                }
        	                                else
        	                                {
        	                                    if (this->get_backtracking()>0)
        	                                    {
        	                                        this->set_failedflag( true );
        	                                        return retval;
        	                                    }


        	                                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                                    ex->set_decisionNum( 103 );
        	                                    ex->set_state( 2 );


        	                                    goto rulecell_reference_optionsEx;

        	                                }
        	                            }
        	                        }
        	                        else if ( (LA103_1 == LEFT_PAREN || LA103_1 == SQL92_RESERVED_UNIQUE) && ((toUpper(LT(1)->getText()) == "DIMENSION")))
        	                        {
        	                            alt103=1;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 103 );
        	                            ex->set_state( 1 );


        	                            goto rulecell_reference_optionsEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 103 );
        	                    ex->set_state( 0 );


        	                    goto rulecell_reference_optionsEx;

        	                }
        	            }
        	            switch (alt103)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:438:23: dimension_key
        	        	    {
        	        	        this->followPush(FOLLOW_dimension_key_in_cell_reference_options4309);
        	        	        dimension_key304=dimension_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, dimension_key304.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:438:37: single_key reference_key
        	        	    {
        	        	        this->followPush(FOLLOW_single_key_in_cell_reference_options4311);
        	        	        single_key305=single_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, single_key305.tree);


        	        	        this->followPush(FOLLOW_reference_key_in_cell_reference_options4313);
        	        	        reference_key306=reference_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecell_reference_optionsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, reference_key306.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulecell_reference_optionsEx; /* Prevent compiler warnings */
    rulecell_reference_optionsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cell_reference_options */

/**
 * $ANTLR start return_rows_clause
 * OracleDML.g:441:1: return_rows_clause : return_key ^ ( updated_key | all_key ) rows_key !;
 */
OracleDML::return_rows_clause_return
OracleDML::return_rows_clause()
{
    OracleDML::return_rows_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::return_key_return return_key307;
    ImplTraits::TreeTypePtr::pointer return_key307_last = NULL;
    OracleDML_OracleDMLKeys::updated_key_return updated_key308;
    ImplTraits::TreeTypePtr::pointer updated_key308_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key309;
    ImplTraits::TreeTypePtr::pointer all_key309_last = NULL;
    OracleDML_OracleDMLKeys::rows_key_return rows_key310;
    ImplTraits::TreeTypePtr::pointer rows_key310_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:442:5: ( return_key ^ ( updated_key | all_key ) rows_key !)
        // OracleDML.g:442:10: return_key ^ ( updated_key | all_key ) rows_key !
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_return_key_in_return_rows_clause4334);
            return_key307=return_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereturn_rows_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(return_key307.tree, root_0);

            // OracleDML.g:442:22: ( updated_key | all_key )
            {
                ANTLR_UINT32 alt105=2;
                {
                    ANTLR_UINT32 LA105_0 = this->LA(1);
                    if ( (LA105_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "UPDATED")))
                    {
                        alt105=1;
                    }
                    else if ( (LA105_0 == SQL92_RESERVED_ALL))
                    {
                        alt105=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 105 );
                        ex->set_state( 0 );


                        goto rulereturn_rows_clauseEx;

                    }
                }
                switch (alt105)
                {
            	case 1:
            	    // OracleDML.g:442:23: updated_key
            	    {
            	        this->followPush(FOLLOW_updated_key_in_return_rows_clause4338);
            	        updated_key308=updated_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulereturn_rows_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, updated_key308.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:442:35: all_key
            	    {
            	        this->followPush(FOLLOW_all_key_in_return_rows_clause4340);
            	        all_key309=all_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulereturn_rows_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, all_key309.tree);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_rows_key_in_return_rows_clause4343);
            rows_key310=rows_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereturn_rows_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulereturn_rows_clauseEx; /* Prevent compiler warnings */
    rulereturn_rows_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end return_rows_clause */

/**
 * $ANTLR start reference_model
 * OracleDML.g:445:1: reference_model : reference_key ^ reference_model_name on_key ! LEFT_PAREN subquery RIGHT_PAREN model_column_clauses ( cell_reference_options )* ;
 */
OracleDML::reference_model_return
OracleDML::reference_model()
{
    OracleDML::reference_model_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN314 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN316 = NULL;
    OracleDML_OracleDMLKeys::reference_key_return reference_key311;
    ImplTraits::TreeTypePtr::pointer reference_key311_last = NULL;
    OracleDML_OracleDMLCommons::reference_model_name_return reference_model_name312;
    ImplTraits::TreeTypePtr::pointer reference_model_name312_last = NULL;
    OracleDML_OracleDMLKeys::on_key_return on_key313;
    ImplTraits::TreeTypePtr::pointer on_key313_last = NULL;
    OracleDML::subquery_return subquery315;
    ImplTraits::TreeTypePtr::pointer subquery315_last = NULL;
    OracleDML::model_column_clauses_return model_column_clauses317;
    ImplTraits::TreeTypePtr::pointer model_column_clauses317_last = NULL;
    OracleDML::cell_reference_options_return cell_reference_options318;
    ImplTraits::TreeTypePtr::pointer cell_reference_options318_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN314_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN316_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:446:5: ( reference_key ^ reference_model_name on_key ! LEFT_PAREN subquery RIGHT_PAREN model_column_clauses ( cell_reference_options )* )
        // OracleDML.g:446:10: reference_key ^ reference_model_name on_key ! LEFT_PAREN subquery RIGHT_PAREN model_column_clauses ( cell_reference_options )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_reference_key_in_reference_model4364);
            reference_key311=reference_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(reference_key311.tree, root_0);

            this->followPush(FOLLOW_reference_model_name_in_reference_model4367);
            reference_model_name312=reference_model_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, reference_model_name312.tree);


            this->followPush(FOLLOW_on_key_in_reference_model4369);
            on_key313=on_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            LEFT_PAREN314 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_reference_model4385);
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN314_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN314));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN314_tree);
            }


            this->followPush(FOLLOW_subquery_in_reference_model4387);
            subquery315=subquery();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery315.tree);


            RIGHT_PAREN316 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_reference_model4389);
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN316_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN316));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN316_tree);
            }


            this->followPush(FOLLOW_model_column_clauses_in_reference_model4391);
            model_column_clauses317=model_column_clauses();

            this->followPop();
            if  (this->hasException())
            {
                goto rulereference_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, model_column_clauses317.tree);


            // OracleDML.g:448:13: ( cell_reference_options )*

            for (;;)
            {
                ANTLR_UINT32 alt106=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    ANTLR_UINT32 LA106_0 = this->LA(1);
                    if ( (LA106_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "IGNORE"))||((toUpper(LT(1)->getText()) == "REFERENCE")))))
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            ANTLR_UINT32 LA106_1 = this->LA(2);
                            if ( (LA106_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "IGNORE"))||((toUpper(LT(1)->getText()) == "REFERENCE")))))
                            {
                                {
                                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                                    */
                                    ANTLR_UINT32 LA106_4 = this->LA(3);
                                    if ( ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                                    {
                                        alt106=1;
                                    }

                                }
                            }

                        }
                    }
                    else if ( (LA106_0 == SQL92_RESERVED_UNIQUE))
                    {
                        alt106=1;
                    }

                }
                switch (alt106)
                {
            	case 1:
            	    // OracleDML.g:448:13: cell_reference_options
            	    {
            	        this->followPush(FOLLOW_cell_reference_options_in_reference_model4406);
            	        cell_reference_options318=cell_reference_options();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulereference_modelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cell_reference_options318.tree);


            	    }
            	    break;

            	default:
            	    goto loop106;	/* break out of the loop */
            	    break;
                }
            }
            loop106: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulereference_modelEx; /* Prevent compiler warnings */
    rulereference_modelEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end reference_model */

/**
 * $ANTLR start main_model
 * OracleDML.g:451:1: main_model : ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause ) ;
 */
OracleDML::main_model_return
OracleDML::main_model()
{
    OracleDML::main_model_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::main_key_return main_key319;
    ImplTraits::TreeTypePtr::pointer main_key319_last = NULL;
    OracleDML_OracleDMLCommons::main_model_name_return main_model_name320;
    ImplTraits::TreeTypePtr::pointer main_model_name320_last = NULL;
    OracleDML::model_column_clauses_return model_column_clauses321;
    ImplTraits::TreeTypePtr::pointer model_column_clauses321_last = NULL;
    OracleDML::cell_reference_options_return cell_reference_options322;
    ImplTraits::TreeTypePtr::pointer cell_reference_options322_last = NULL;
    OracleDML::model_rules_clause_return model_rules_clause323;
    ImplTraits::TreeTypePtr::pointer model_rules_clause323_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_main_key(get_psrstate()->get_treeAdaptor(), "rule main_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_main_model_name(get_psrstate()->get_treeAdaptor(), "rule main_model_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_column_clauses(get_psrstate()->get_treeAdaptor(), "rule model_column_clauses");
    RewriteRuleSubtreeStream<ImplTraits> stream_cell_reference_options(get_psrstate()->get_treeAdaptor(), "rule cell_reference_options");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_rules_clause(get_psrstate()->get_treeAdaptor(), "rule model_rules_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:452:5: ( ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause ) )
        // OracleDML.g:452:10: ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause
        {
            // OracleDML.g:452:10: ( main_key main_model_name )?
            {
                ANTLR_UINT32 alt107=2;
                {
                    ANTLR_UINT32 LA107_0 = this->LA(1);
                    if ( (LA107_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "MAIN"))||((toUpper(LT(1)->getText()) == "PARTITION")))))
                    {
                        {
                            ANTLR_UINT32 LA107_1 = this->LA(2);
                            if ( (LA107_1 == DELIMITED_ID || LA107_1 == INTRODUCER || LA107_1 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "MAIN")))
                            {
                                alt107=1;
                            }
                        }
                    }
                }
                switch (alt107)
                {
            	case 1:
            	    // OracleDML.g:452:11: main_key main_model_name
            	    {
            	        this->followPush(FOLLOW_main_key_in_main_model4428);
            	        main_key319=main_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemain_modelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            main_key319_last = main_key319.tree.get();
            	            stream_main_key.add(main_key319.tree);
            	        }

            	        this->followPush(FOLLOW_main_model_name_in_main_model4430);
            	        main_model_name320=main_model_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemain_modelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            main_model_name320_last = main_model_name320.tree.get();
            	            stream_main_model_name.add(main_model_name320.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_model_column_clauses_in_main_model4434);
            model_column_clauses321=model_column_clauses();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemain_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_column_clauses321_last = model_column_clauses321.tree.get();
                stream_model_column_clauses.add(model_column_clauses321.tree);
            }

            // OracleDML.g:452:59: ( cell_reference_options )*

            for (;;)
            {
                ANTLR_UINT32 alt108=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    ANTLR_UINT32 LA108_0 = this->LA(1);
                    if ( (LA108_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "RULES"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                    {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            ANTLR_UINT32 LA108_1 = this->LA(2);
                            if ( (LA108_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "RULES"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                            {
                                {
                                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                                    */
                                    ANTLR_UINT32 LA108_5 = this->LA(3);
                                    if ( ((((toUpper(LT(1)->getText()) == "KEEP"))||((toUpper(LT(1)->getText()) == "IGNORE")))))
                                    {
                                        alt108=1;
                                    }

                                }
                            }

                        }
                    }
                    else if ( (LA108_0 == SQL92_RESERVED_UNIQUE))
                    {
                        alt108=1;
                    }

                }
                switch (alt108)
                {
            	case 1:
            	    // OracleDML.g:452:59: cell_reference_options
            	    {
            	        this->followPush(FOLLOW_cell_reference_options_in_main_model4436);
            	        cell_reference_options322=cell_reference_options();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemain_modelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            cell_reference_options322_last = cell_reference_options322.tree.get();
            	            stream_cell_reference_options.add(cell_reference_options322.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop108;	/* break out of the loop */
            	    break;
                }
            }
            loop108: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_model_rules_clause_in_main_model4439);
            model_rules_clause323=model_rules_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemain_modelEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_rules_clause323_last = model_rules_clause323.tree.get();
                stream_model_rules_clause.add(model_rules_clause323.tree);
            }

            // AST REWRITE
            // elements: model_rules_clause, main_model_name, model_column_clauses, cell_reference_options
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 453:9: -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause )
            {
            	// OracleDML.g:453:12: ^( MAIN_MODEL ( main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MAIN_MODEL, "MAIN_MODEL"), root_1);
            	// OracleDML.g:453:25: ( main_model_name )?
            	if ( stream_main_model_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_main_model_name.nextTree());
            	}
            	stream_main_model_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_column_clauses.nextTree());
            	// OracleDML.g:453:63: ( cell_reference_options )*
            	while ( stream_cell_reference_options.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cell_reference_options.nextTree());
            	}
            	stream_cell_reference_options.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_rules_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemain_modelEx; /* Prevent compiler warnings */
    rulemain_modelEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end main_model */

/**
 * $ANTLR start model_column_clauses
 * OracleDML.g:456:1: model_column_clauses : ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list -> ^( MODEL_COLUMN ( model_column_partition_part )? ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ) ;
 */
OracleDML::model_column_clauses_return
OracleDML::model_column_clauses()
{
    OracleDML::model_column_clauses_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::model_column_partition_part_return model_column_partition_part324;
    ImplTraits::TreeTypePtr::pointer model_column_partition_part324_last = NULL;
    OracleDML_OracleDMLKeys::dimension_key_return dimension_key325;
    ImplTraits::TreeTypePtr::pointer dimension_key325_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key326;
    ImplTraits::TreeTypePtr::pointer by_key326_last = NULL;
    OracleDML::model_column_list_return model_column_list327;
    ImplTraits::TreeTypePtr::pointer model_column_list327_last = NULL;
    OracleDML_OracleDMLKeys::measures_key_return measures_key328;
    ImplTraits::TreeTypePtr::pointer measures_key328_last = NULL;
    OracleDML::model_column_list_return model_column_list329;
    ImplTraits::TreeTypePtr::pointer model_column_list329_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_model_column_list(get_psrstate()->get_treeAdaptor(), "rule model_column_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_dimension_key(get_psrstate()->get_treeAdaptor(), "rule dimension_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_column_partition_part(get_psrstate()->get_treeAdaptor(), "rule model_column_partition_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_measures_key(get_psrstate()->get_treeAdaptor(), "rule measures_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:457:5: ( ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list -> ^( MODEL_COLUMN ( model_column_partition_part )? ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ) )
        // OracleDML.g:457:10: ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list
        {
            // OracleDML.g:457:10: ( model_column_partition_part )?
            {
                ANTLR_UINT32 alt109=2;
                {
                    ANTLR_UINT32 LA109_0 = this->LA(1);
                    if ( (LA109_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DIMENSION"))||((toUpper(LT(1)->getText()) == "PARTITION")))))
                    {
                        {
                            ANTLR_UINT32 LA109_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "PARTITION")))
                            {
                                alt109=1;
                            }
                        }
                    }
                }
                switch (alt109)
                {
            	case 1:
            	    // OracleDML.g:457:10: model_column_partition_part
            	    {
            	        this->followPush(FOLLOW_model_column_partition_part_in_model_column_clauses4483);
            	        model_column_partition_part324=model_column_partition_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_column_clausesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_column_partition_part324_last = model_column_partition_part324.tree.get();
            	            stream_model_column_partition_part.add(model_column_partition_part324.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_dimension_key_in_model_column_clauses4494);
            dimension_key325=dimension_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                dimension_key325_last = dimension_key325.tree.get();
                stream_dimension_key.add(dimension_key325.tree);
            }

            this->followPush(FOLLOW_by_key_in_model_column_clauses4496);
            by_key326=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                by_key326_last = by_key326.tree.get();
                stream_by_key.add(by_key326.tree);
            }

            this->followPush(FOLLOW_model_column_list_in_model_column_clauses4498);
            model_column_list327=model_column_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_column_list327_last = model_column_list327.tree.get();
                stream_model_column_list.add(model_column_list327.tree);
            }

            this->followPush(FOLLOW_measures_key_in_model_column_clauses4500);
            measures_key328=measures_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                measures_key328_last = measures_key328.tree.get();
                stream_measures_key.add(measures_key328.tree);
            }

            this->followPush(FOLLOW_model_column_list_in_model_column_clauses4502);
            model_column_list329=model_column_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_clausesEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_column_list329_last = model_column_list329.tree.get();
                stream_model_column_list.add(model_column_list329.tree);
            }

            // AST REWRITE
            // elements: measures_key, model_column_list, model_column_list, model_column_partition_part, dimension_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 459:9: -> ^( MODEL_COLUMN ( model_column_partition_part )? ^( dimension_key model_column_list ) ^( measures_key model_column_list ) )
            {
            	// OracleDML.g:459:12: ^( MODEL_COLUMN ( model_column_partition_part )? ^( dimension_key model_column_list ) ^( measures_key model_column_list ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_COLUMN, "MODEL_COLUMN"), root_1);
            	// OracleDML.g:459:27: ( model_column_partition_part )?
            	if ( stream_model_column_partition_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_column_partition_part.nextTree());
            	}
            	stream_model_column_partition_part.reset();

            	// OracleDML.g:459:56: ^( dimension_key model_column_list )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_dimension_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_model_column_list.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:459:91: ^( measures_key model_column_list )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_measures_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_model_column_list.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_column_clausesEx; /* Prevent compiler warnings */
    rulemodel_column_clausesEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_column_clauses */

/**
 * $ANTLR start model_column_partition_part
 * OracleDML.g:462:1: model_column_partition_part : partition_key ^ by_key ! model_column_list ;
 */
OracleDML::model_column_partition_part_return
OracleDML::model_column_partition_part()
{
    OracleDML::model_column_partition_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::partition_key_return partition_key330;
    ImplTraits::TreeTypePtr::pointer partition_key330_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key331;
    ImplTraits::TreeTypePtr::pointer by_key331_last = NULL;
    OracleDML::model_column_list_return model_column_list332;
    ImplTraits::TreeTypePtr::pointer model_column_list332_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:463:5: ( partition_key ^ by_key ! model_column_list )
        // OracleDML.g:463:10: partition_key ^ by_key ! model_column_list
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_partition_key_in_model_column_partition_part4551);
            partition_key330=partition_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_partition_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(partition_key330.tree, root_0);

            this->followPush(FOLLOW_by_key_in_model_column_partition_part4554);
            by_key331=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_partition_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_model_column_list_in_model_column_partition_part4557);
            model_column_list332=model_column_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_partition_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, model_column_list332.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_column_partition_partEx; /* Prevent compiler warnings */
    rulemodel_column_partition_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_column_partition_part */

/**
 * $ANTLR start model_column_list
 * OracleDML.g:466:1: model_column_list : LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN -> ^( MODEL_COLUMNS ( model_column )+ ) ;
 */
OracleDML::model_column_list_return
OracleDML::model_column_list()
{
    OracleDML::model_column_list_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN333 = NULL;
    ImplTraits::CommonTokenType const* COMMA335 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN337 = NULL;
    OracleDML::model_column_return model_column334;
    ImplTraits::TreeTypePtr::pointer model_column334_last = NULL;
    OracleDML::model_column_return model_column336;
    ImplTraits::TreeTypePtr::pointer model_column336_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN333_tree;
    ImplTraits::TreeTypePtr COMMA335_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN337_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_column(get_psrstate()->get_treeAdaptor(), "rule model_column");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:467:5: ( LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN -> ^( MODEL_COLUMNS ( model_column )+ ) )
        // OracleDML.g:467:10: LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN
        {
            LEFT_PAREN333 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_model_column_list4577);
            if  (this->hasException())
            {
                goto rulemodel_column_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN333);


            this->followPush(FOLLOW_model_column_in_model_column_list4579);
            model_column334=model_column();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_column_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                model_column334_last = model_column334.tree.get();
                stream_model_column.add(model_column334.tree);
            }

            // OracleDML.g:467:34: ( COMMA model_column )*

            for (;;)
            {
                ANTLR_UINT32 alt110=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt110=1;
                	}
                    break;

                }

                switch (alt110)
                {
            	case 1:
            	    // OracleDML.g:467:35: COMMA model_column
            	    {
            	        COMMA335 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_model_column_list4582);
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_column_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA335);


            	        this->followPush(FOLLOW_model_column_in_model_column_list4584);
            	        model_column336=model_column();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_column_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_column336_last = model_column336.tree.get();
            	            stream_model_column.add(model_column336.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop110;	/* break out of the loop */
            	    break;
                }
            }
            loop110: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN337 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_model_column_list4589);
            if  (this->hasException())
            {
                goto rulemodel_column_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN337);


            // AST REWRITE
            // elements: model_column
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 468:9: -> ^( MODEL_COLUMNS ( model_column )+ )
            {
            	// OracleDML.g:468:12: ^( MODEL_COLUMNS ( model_column )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_COLUMNS, "MODEL_COLUMNS"), root_1);
            	if ( !(stream_model_column.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "model_column empty" );
            		goto rulemodel_column_listEx;
            	}
            	while ( stream_model_column.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_column.nextTree());
            	}
            	stream_model_column.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_column_listEx; /* Prevent compiler warnings */
    rulemodel_column_listEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_column_list */

/**
 * $ANTLR start model_column
 * OracleDML.g:471:1: model_column : expression ( column_alias )? -> ^( MODEL_COLUMN ^( EXPR expression ) ( column_alias )? ) ;
 */
OracleDML::model_column_return
OracleDML::model_column()
{
    OracleDML::model_column_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression338;
    ImplTraits::TreeTypePtr::pointer expression338_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias339;
    ImplTraits::TreeTypePtr::pointer column_alias339_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:472:5: ( expression ( column_alias )? -> ^( MODEL_COLUMN ^( EXPR expression ) ( column_alias )? ) )
        // OracleDML.g:472:10: expression ( column_alias )?
        {
            this->followPush(FOLLOW_expression_in_model_column4626);
            expression338=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_columnEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression338_last = expression338.tree.get();
                stream_expression.add(expression338.tree);
            }

            // OracleDML.g:472:21: ( column_alias )?
            {
                ANTLR_UINT32 alt111=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt111=1;
                    	}
                        break;
                }

                switch (alt111)
                {
            	case 1:
            	    // OracleDML.g:472:21: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_model_column4628);
            	        column_alias339=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_columnEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias339_last = column_alias339.tree.get();
            	            stream_column_alias.add(column_alias339.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_alias, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 473:9: -> ^( MODEL_COLUMN ^( EXPR expression ) ( column_alias )? )
            {
            	// OracleDML.g:473:12: ^( MODEL_COLUMN ^( EXPR expression ) ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_COLUMN, "MODEL_COLUMN"), root_1);
            	// OracleDML.g:473:27: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:473:46: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_columnEx; /* Prevent compiler warnings */
    rulemodel_columnEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_column */

/**
 * $ANTLR start model_rules_clause
 * OracleDML.g:476:1: model_rules_clause : ( model_rules_part )? LEFT_PAREN ( model_rules_element ( COMMA model_rules_element )* )? RIGHT_PAREN -> ^( MODEL_RULES ( model_rules_part )? ( model_rules_element )* ) ;
 */
OracleDML::model_rules_clause_return
OracleDML::model_rules_clause()
{
    OracleDML::model_rules_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN341 = NULL;
    ImplTraits::CommonTokenType const* COMMA343 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN345 = NULL;
    OracleDML::model_rules_part_return model_rules_part340;
    ImplTraits::TreeTypePtr::pointer model_rules_part340_last = NULL;
    OracleDML::model_rules_element_return model_rules_element342;
    ImplTraits::TreeTypePtr::pointer model_rules_element342_last = NULL;
    OracleDML::model_rules_element_return model_rules_element344;
    ImplTraits::TreeTypePtr::pointer model_rules_element344_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN341_tree;
    ImplTraits::TreeTypePtr COMMA343_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN345_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_rules_element(get_psrstate()->get_treeAdaptor(), "rule model_rules_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_rules_part(get_psrstate()->get_treeAdaptor(), "rule model_rules_part");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:477:5: ( ( model_rules_part )? LEFT_PAREN ( model_rules_element ( COMMA model_rules_element )* )? RIGHT_PAREN -> ^( MODEL_RULES ( model_rules_part )? ( model_rules_element )* ) )
        // OracleDML.g:477:10: ( model_rules_part )? LEFT_PAREN ( model_rules_element ( COMMA model_rules_element )* )? RIGHT_PAREN
        {
            // OracleDML.g:477:10: ( model_rules_part )?
            {
                ANTLR_UINT32 alt112=2;
                {
                    ANTLR_UINT32 LA112_0 = this->LA(1);
                    if ( (LA112_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "RULES")))
                    {
                        alt112=1;
                    }
                }
                switch (alt112)
                {
            	case 1:
            	    // OracleDML.g:477:10: model_rules_part
            	    {
            	        this->followPush(FOLLOW_model_rules_part_in_model_rules_clause4672);
            	        model_rules_part340=model_rules_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_rules_part340_last = model_rules_part340.tree.get();
            	            stream_model_rules_part.add(model_rules_part340.tree);
            	        }

            	    }
            	    break;

                }
            }

            LEFT_PAREN341 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_model_rules_clause4675);
            if  (this->hasException())
            {
                goto rulemodel_rules_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN341);


            // OracleDML.g:477:39: ( model_rules_element ( COMMA model_rules_element )* )?
            {
                ANTLR_UINT32 alt114=2;
                switch ( this->LA(1) )
                {
                    case APPROXIMATE_NUM_LIT:
                    case BINDVAR:
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case COLON:
                    case DELIMITED_ID:
                    case EXACT_NUM_LIT:
                    case INTRODUCER:
                    case LEFT_PAREN:
                    case MINUS_SIGN:
                    case NATIONAL_CHAR_STRING_LIT:
                    case PLSQL_NON_RESERVED_CAST:
                    case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                    case PLUS_SIGN:
                    case REGULAR_ID:
                    case SQL92_RESERVED_ALL:
                    case SQL92_RESERVED_ANY:
                    case SQL92_RESERVED_CASE:
                    case SQL92_RESERVED_DATE:
                    case SQL92_RESERVED_DEFAULT:
                    case SQL92_RESERVED_DISTINCT:
                    case SQL92_RESERVED_EXISTS:
                    case SQL92_RESERVED_FALSE:
                    case SQL92_RESERVED_NULL:
                    case SQL92_RESERVED_PRIOR:
                    case SQL92_RESERVED_TRUE:
                    case SQL92_RESERVED_UPDATE:
                    case UNSIGNED_INTEGER:
                    	{
                    		alt114=1;
                    	}
                        break;
                }

                switch (alt114)
                {
            	case 1:
            	    // OracleDML.g:477:40: model_rules_element ( COMMA model_rules_element )*
            	    {
            	        this->followPush(FOLLOW_model_rules_element_in_model_rules_clause4678);
            	        model_rules_element342=model_rules_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_rules_element342_last = model_rules_element342.tree.get();
            	            stream_model_rules_element.add(model_rules_element342.tree);
            	        }

            	        // OracleDML.g:477:60: ( COMMA model_rules_element )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt113=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt113=1;
            	            	}
            	                break;

            	            }

            	            switch (alt113)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:477:61: COMMA model_rules_element
            	        	    {
            	        	        COMMA343 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_model_rules_clause4681);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA343);


            	        	        this->followPush(FOLLOW_model_rules_element_in_model_rules_clause4683);
            	        	        model_rules_element344=model_rules_element();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            model_rules_element344_last = model_rules_element344.tree.get();
            	        	            stream_model_rules_element.add(model_rules_element344.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop113;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop113: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

            RIGHT_PAREN345 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_model_rules_clause4689);
            if  (this->hasException())
            {
                goto rulemodel_rules_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN345);


            // AST REWRITE
            // elements: model_rules_part, model_rules_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 478:9: -> ^( MODEL_RULES ( model_rules_part )? ( model_rules_element )* )
            {
            	// OracleDML.g:478:12: ^( MODEL_RULES ( model_rules_part )? ( model_rules_element )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_RULES, "MODEL_RULES"), root_1);
            	// OracleDML.g:478:26: ( model_rules_part )?
            	if ( stream_model_rules_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_rules_part.nextTree());
            	}
            	stream_model_rules_part.reset();

            	// OracleDML.g:478:44: ( model_rules_element )*
            	while ( stream_model_rules_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_rules_element.nextTree());
            	}
            	stream_model_rules_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_rules_clauseEx; /* Prevent compiler warnings */
    rulemodel_rules_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_rules_clause */

/**
 * $ANTLR start model_rules_part
 * OracleDML.g:481:1: model_rules_part : rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )? -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? ) ;
 */
OracleDML::model_rules_part_return
OracleDML::model_rules_part()
{
    OracleDML::model_rules_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::rules_key_return rules_key346;
    ImplTraits::TreeTypePtr::pointer rules_key346_last = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key347;
    ImplTraits::TreeTypePtr::pointer update_key347_last = NULL;
    OracleDML_OracleDMLKeys::upsert_key_return upsert_key348;
    ImplTraits::TreeTypePtr::pointer upsert_key348_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key349;
    ImplTraits::TreeTypePtr::pointer all_key349_last = NULL;
    OracleDML_OracleDMLKeys::automatic_key_return automatic_key350;
    ImplTraits::TreeTypePtr::pointer automatic_key350_last = NULL;
    OracleDML_OracleDMLKeys::sequential_key_return sequential_key351;
    ImplTraits::TreeTypePtr::pointer sequential_key351_last = NULL;
    OracleDML_OracleDMLKeys::order_key_return order_key352;
    ImplTraits::TreeTypePtr::pointer order_key352_last = NULL;
    OracleDML::model_iterate_clause_return model_iterate_clause353;
    ImplTraits::TreeTypePtr::pointer model_iterate_clause353_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_sequential_key(get_psrstate()->get_treeAdaptor(), "rule sequential_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_key(get_psrstate()->get_treeAdaptor(), "rule order_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_rules_key(get_psrstate()->get_treeAdaptor(), "rule rules_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_iterate_clause(get_psrstate()->get_treeAdaptor(), "rule model_iterate_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_key(get_psrstate()->get_treeAdaptor(), "rule update_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_automatic_key(get_psrstate()->get_treeAdaptor(), "rule automatic_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_upsert_key(get_psrstate()->get_treeAdaptor(), "rule upsert_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:482:5: ( rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )? -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? ) )
        // OracleDML.g:482:10: rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )?
        {
            this->followPush(FOLLOW_rules_key_in_model_rules_part4729);
            rules_key346=rules_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_rules_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                rules_key346_last = rules_key346.tree.get();
                stream_rules_key.add(rules_key346.tree);
            }

            // OracleDML.g:482:20: ( update_key | upsert_key ( all_key )? )?
            {
                ANTLR_UINT32 alt116=3;
                {
                    ANTLR_UINT32 LA116_0 = this->LA(1);
                    if ( (LA116_0 == SQL92_RESERVED_UPDATE))
                    {
                        alt116=1;
                    }
                    else if ( (LA116_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "ITERATE"))||((toUpper(LT(1)->getText()) == "UPSERT"))||((toUpper(LT(1)->getText()) == "SEQUENTIAL"))||((toUpper(LT(1)->getText()) == "AUTOMATIC")))))
                    {
                        {
                            ANTLR_UINT32 LA116_2 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "UPSERT")))
                            {
                                alt116=2;
                            }
                        }
                    }
                }
                switch (alt116)
                {
            	case 1:
            	    // OracleDML.g:482:21: update_key
            	    {
            	        this->followPush(FOLLOW_update_key_in_model_rules_part4732);
            	        update_key347=update_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            update_key347_last = update_key347.tree.get();
            	            stream_update_key.add(update_key347.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:482:32: upsert_key ( all_key )?
            	    {
            	        this->followPush(FOLLOW_upsert_key_in_model_rules_part4734);
            	        upsert_key348=upsert_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            upsert_key348_last = upsert_key348.tree.get();
            	            stream_upsert_key.add(upsert_key348.tree);
            	        }

            	        // OracleDML.g:482:43: ( all_key )?
            	        {
            	            ANTLR_UINT32 alt115=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_ALL:
            	                	{
            	                		alt115=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt115)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:482:43: all_key
            	        	    {
            	        	        this->followPush(FOLLOW_all_key_in_model_rules_part4736);
            	        	        all_key349=all_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            all_key349_last = all_key349.tree.get();
            	        	            stream_all_key.add(all_key349.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:482:54: ( ( automatic_key | sequential_key ) order_key )?
            {
                ANTLR_UINT32 alt118=2;
                {
                    ANTLR_UINT32 LA118_0 = this->LA(1);
                    if ( (LA118_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "ITERATE"))||((toUpper(LT(1)->getText()) == "SEQUENTIAL"))||((toUpper(LT(1)->getText()) == "AUTOMATIC")))))
                    {
                        {
                            ANTLR_UINT32 LA118_1 = this->LA(2);
                            if ( (LA118_1 == SQL92_RESERVED_ORDER) && ((((toUpper(LT(1)->getText()) == "SEQUENTIAL"))||((toUpper(LT(1)->getText()) == "AUTOMATIC")))))
                            {
                                alt118=1;
                            }
                        }
                    }
                }
                switch (alt118)
                {
            	case 1:
            	    // OracleDML.g:482:55: ( automatic_key | sequential_key ) order_key
            	    {
            	        // OracleDML.g:482:55: ( automatic_key | sequential_key )
            	        {
            	            ANTLR_UINT32 alt117=2;
            	            {
            	                ANTLR_UINT32 LA117_0 = this->LA(1);
            	                if ( (LA117_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SEQUENTIAL"))||((toUpper(LT(1)->getText()) == "AUTOMATIC")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA117_1 = this->LA(2);
            	                        if ( ((toUpper(LT(1)->getText()) == "AUTOMATIC")))
            	                        {
            	                            alt117=1;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "SEQUENTIAL")))
            	                        {
            	                            alt117=2;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return retval;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 117 );
            	                            ex->set_state( 1 );


            	                            goto rulemodel_rules_partEx;

            	                        }
            	                    }
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 117 );
            	                    ex->set_state( 0 );


            	                    goto rulemodel_rules_partEx;

            	                }
            	            }
            	            switch (alt117)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:482:56: automatic_key
            	        	    {
            	        	        this->followPush(FOLLOW_automatic_key_in_model_rules_part4743);
            	        	        automatic_key350=automatic_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            automatic_key350_last = automatic_key350.tree.get();
            	        	            stream_automatic_key.add(automatic_key350.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:482:70: sequential_key
            	        	    {
            	        	        this->followPush(FOLLOW_sequential_key_in_model_rules_part4745);
            	        	        sequential_key351=sequential_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            sequential_key351_last = sequential_key351.tree.get();
            	        	            stream_sequential_key.add(sequential_key351.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_order_key_in_model_rules_part4748);
            	        order_key352=order_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_key352_last = order_key352.tree.get();
            	            stream_order_key.add(order_key352.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:482:98: ( model_iterate_clause )?
            {
                ANTLR_UINT32 alt119=2;
                {
                    ANTLR_UINT32 LA119_0 = this->LA(1);
                    if ( (LA119_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "ITERATE")))
                    {
                        alt119=1;
                    }
                }
                switch (alt119)
                {
            	case 1:
            	    // OracleDML.g:482:98: model_iterate_clause
            	    {
            	        this->followPush(FOLLOW_model_iterate_clause_in_model_rules_part4752);
            	        model_iterate_clause353=model_iterate_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_iterate_clause353_last = model_iterate_clause353.tree.get();
            	            stream_model_iterate_clause.add(model_iterate_clause353.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: update_key, model_iterate_clause, all_key, automatic_key, sequential_key, rules_key, upsert_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 483:9: -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? )
            {
            	// OracleDML.g:483:12: ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_rules_key.nextNode(), root_1);
            	// OracleDML.g:483:24: ( update_key )?
            	if ( stream_update_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_key.nextTree());
            	}
            	stream_update_key.reset();

            	// OracleDML.g:483:36: ( upsert_key )?
            	if ( stream_upsert_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_upsert_key.nextTree());
            	}
            	stream_upsert_key.reset();

            	// OracleDML.g:483:48: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:483:57: ( automatic_key )?
            	if ( stream_automatic_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_automatic_key.nextTree());
            	}
            	stream_automatic_key.reset();

            	// OracleDML.g:483:72: ( sequential_key )?
            	if ( stream_sequential_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_sequential_key.nextTree());
            	}
            	stream_sequential_key.reset();

            	// OracleDML.g:483:88: ( model_iterate_clause )?
            	if ( stream_model_iterate_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_iterate_clause.nextTree());
            	}
            	stream_model_iterate_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_rules_partEx; /* Prevent compiler warnings */
    rulemodel_rules_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_rules_part */

/**
 * $ANTLR start model_rules_element
 * OracleDML.g:486:1: model_rules_element : ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? ) ;
 */
OracleDML::model_rules_element_return
OracleDML::model_rules_element()
{
    OracleDML::model_rules_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP359 = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key354;
    ImplTraits::TreeTypePtr::pointer update_key354_last = NULL;
    OracleDML_OracleDMLKeys::upsert_key_return upsert_key355;
    ImplTraits::TreeTypePtr::pointer upsert_key355_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key356;
    ImplTraits::TreeTypePtr::pointer all_key356_last = NULL;
    OracleDML::cell_assignment_return cell_assignment357;
    ImplTraits::TreeTypePtr::pointer cell_assignment357_last = NULL;
    OracleDML::order_by_clause_return order_by_clause358;
    ImplTraits::TreeTypePtr::pointer order_by_clause358_last = NULL;
    OracleDML::expression_return expression360;
    ImplTraits::TreeTypePtr::pointer expression360_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP359_tree;
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_by_clause(get_psrstate()->get_treeAdaptor(), "rule order_by_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_key(get_psrstate()->get_treeAdaptor(), "rule update_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_cell_assignment(get_psrstate()->get_treeAdaptor(), "rule cell_assignment");
    RewriteRuleSubtreeStream<ImplTraits> stream_upsert_key(get_psrstate()->get_treeAdaptor(), "rule upsert_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:487:5: ( ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? ) )
        // OracleDML.g:487:10: ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression
        {
            // OracleDML.g:487:10: ( update_key | upsert_key ( ( all_key )=> all_key )? )?
            {
                ANTLR_UINT32 alt121=3;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_UPDATE:
                    	{
                    		alt121=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA121_2 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "UPSERT")))
                    		    {
                    		        alt121=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt121)
                {
            	case 1:
            	    // OracleDML.g:487:11: update_key
            	    {
            	        this->followPush(FOLLOW_update_key_in_model_rules_element4806);
            	        update_key354=update_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            update_key354_last = update_key354.tree.get();
            	            stream_update_key.add(update_key354.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:487:22: upsert_key ( ( all_key )=> all_key )?
            	    {
            	        this->followPush(FOLLOW_upsert_key_in_model_rules_element4808);
            	        upsert_key355=upsert_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            upsert_key355_last = upsert_key355.tree.get();
            	            stream_upsert_key.add(upsert_key355.tree);
            	        }

            	        // OracleDML.g:487:33: ( ( all_key )=> all_key )?
            	        {
            	            ANTLR_UINT32 alt120=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_ALL:
            	                	{
            	                		{
            	                		    ANTLR_UINT32 LA120_1 = this->LA(2);
            	                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred19_OracleDML>() )))
            	                		    {
            	                		        alt120=1;
            	                		    }
            	                		}
            	                	}
            	                    break;
            	            }

            	            switch (alt120)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:487:34: ( all_key )=> all_key
            	        	    {
            	        	        this->followPush(FOLLOW_all_key_in_model_rules_element4816);
            	        	        all_key356=all_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemodel_rules_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            all_key356_last = all_key356.tree.get();
            	        	            stream_all_key.add(all_key356.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_cell_assignment_in_model_rules_element4830);
            cell_assignment357=cell_assignment();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_rules_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                cell_assignment357_last = cell_assignment357.tree.get();
                stream_cell_assignment.add(cell_assignment357.tree);
            }

            // OracleDML.g:489:17: ( order_by_clause )?
            {
                ANTLR_UINT32 alt122=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ORDER:
                    	{
                    		alt122=1;
                    	}
                        break;
                }

                switch (alt122)
                {
            	case 1:
            	    // OracleDML.g:489:17: order_by_clause
            	    {
            	        this->followPush(FOLLOW_order_by_clause_in_model_rules_element4848);
            	        order_by_clause358=order_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_rules_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_by_clause358_last = order_by_clause358.tree.get();
            	            stream_order_by_clause.add(order_by_clause358.tree);
            	        }

            	    }
            	    break;

                }
            }

            EQUALS_OP359 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_model_rules_element4863);
            if  (this->hasException())
            {
                goto rulemodel_rules_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP359);


            this->followPush(FOLLOW_expression_in_model_rules_element4865);
            expression360=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_rules_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression360_last = expression360.tree.get();
                stream_expression.add(expression360.tree);
            }

            // AST REWRITE
            // elements: all_key, expression, cell_assignment, update_key, upsert_key, order_by_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 491:9: -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? )
            {
            	// OracleDML.g:491:12: ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_RULE, "MODEL_RULE"), root_1);
            	// OracleDML.g:491:25: ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ASSIGN, EQUALS_OP359), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_cell_assignment.nextTree());
            	// OracleDML.g:491:62: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:491:82: ( update_key )?
            	if ( stream_update_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_key.nextTree());
            	}
            	stream_update_key.reset();

            	// OracleDML.g:491:94: ( upsert_key )?
            	if ( stream_upsert_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_upsert_key.nextTree());
            	}
            	stream_upsert_key.reset();

            	// OracleDML.g:491:106: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:491:115: ( order_by_clause )?
            	if ( stream_order_by_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_order_by_clause.nextTree());
            	}
            	stream_order_by_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_rules_elementEx; /* Prevent compiler warnings */
    rulemodel_rules_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_rules_element */

/**
 * $ANTLR start cell_assignment
 * OracleDML.g:494:1: cell_assignment : model_expression ;
 */
OracleDML::cell_assignment_return
OracleDML::cell_assignment()
{
    OracleDML::cell_assignment_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::model_expression_return model_expression361;
    ImplTraits::TreeTypePtr::pointer model_expression361_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:495:5: ( model_expression )
        // OracleDML.g:495:10: model_expression
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_model_expression_in_cell_assignment4924);
            model_expression361=model_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecell_assignmentEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, model_expression361.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecell_assignmentEx; /* Prevent compiler warnings */
    rulecell_assignmentEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cell_assignment */

/**
 * $ANTLR start model_iterate_clause
 * OracleDML.g:498:1: model_iterate_clause : iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )? -> ^( iterate_key ^( EXPR expression ) ( until_part )? ) ;
 */
OracleDML::model_iterate_clause_return
OracleDML::model_iterate_clause()
{
    OracleDML::model_iterate_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN363 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN365 = NULL;
    OracleDML_OracleDMLKeys::iterate_key_return iterate_key362;
    ImplTraits::TreeTypePtr::pointer iterate_key362_last = NULL;
    OracleDML::expression_return expression364;
    ImplTraits::TreeTypePtr::pointer expression364_last = NULL;
    OracleDML::until_part_return until_part366;
    ImplTraits::TreeTypePtr::pointer until_part366_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN363_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN365_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_iterate_key(get_psrstate()->get_treeAdaptor(), "rule iterate_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_until_part(get_psrstate()->get_treeAdaptor(), "rule until_part");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:499:5: ( iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )? -> ^( iterate_key ^( EXPR expression ) ( until_part )? ) )
        // OracleDML.g:499:10: iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )?
        {
            this->followPush(FOLLOW_iterate_key_in_model_iterate_clause4944);
            iterate_key362=iterate_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_iterate_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                iterate_key362_last = iterate_key362.tree.get();
                stream_iterate_key.add(iterate_key362.tree);
            }

            LEFT_PAREN363 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_model_iterate_clause4946);
            if  (this->hasException())
            {
                goto rulemodel_iterate_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN363);


            this->followPush(FOLLOW_expression_in_model_iterate_clause4948);
            expression364=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemodel_iterate_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression364_last = expression364.tree.get();
                stream_expression.add(expression364.tree);
            }

            RIGHT_PAREN365 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_model_iterate_clause4950);
            if  (this->hasException())
            {
                goto rulemodel_iterate_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN365);


            // OracleDML.g:499:56: ( until_part )?
            {
                ANTLR_UINT32 alt123=2;
                {
                    ANTLR_UINT32 LA123_0 = this->LA(1);
                    if ( (LA123_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "UNTIL")))
                    {
                        alt123=1;
                    }
                }
                switch (alt123)
                {
            	case 1:
            	    // OracleDML.g:499:56: until_part
            	    {
            	        this->followPush(FOLLOW_until_part_in_model_iterate_clause4952);
            	        until_part366=until_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_iterate_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            until_part366_last = until_part366.tree.get();
            	            stream_until_part.add(until_part366.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression, until_part, iterate_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 500:9: -> ^( iterate_key ^( EXPR expression ) ( until_part )? )
            {
            	// OracleDML.g:500:11: ^( iterate_key ^( EXPR expression ) ( until_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_iterate_key.nextNode(), root_1);
            	// OracleDML.g:500:25: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:500:44: ( until_part )?
            	if ( stream_until_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_until_part.nextTree());
            	}
            	stream_until_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_iterate_clauseEx; /* Prevent compiler warnings */
    rulemodel_iterate_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_iterate_clause */

/**
 * $ANTLR start until_part
 * OracleDML.g:503:1: until_part : until_key LEFT_PAREN condition RIGHT_PAREN -> ^( until_key ^( LOGIC_EXPR condition ) ) ;
 */
OracleDML::until_part_return
OracleDML::until_part()
{
    OracleDML::until_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN368 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN370 = NULL;
    OracleDML_OracleDMLKeys::until_key_return until_key367;
    ImplTraits::TreeTypePtr::pointer until_key367_last = NULL;
    OracleDML::condition_return condition369;
    ImplTraits::TreeTypePtr::pointer condition369_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN368_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN370_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_until_key(get_psrstate()->get_treeAdaptor(), "rule until_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:504:5: ( until_key LEFT_PAREN condition RIGHT_PAREN -> ^( until_key ^( LOGIC_EXPR condition ) ) )
        // OracleDML.g:504:10: until_key LEFT_PAREN condition RIGHT_PAREN
        {
            this->followPush(FOLLOW_until_key_in_until_part4995);
            until_key367=until_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuntil_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                until_key367_last = until_key367.tree.get();
                stream_until_key.add(until_key367.tree);
            }

            LEFT_PAREN368 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_until_part4997);
            if  (this->hasException())
            {
                goto ruleuntil_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN368);


            this->followPush(FOLLOW_condition_in_until_part4999);
            condition369=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuntil_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition369_last = condition369.tree.get();
                stream_condition.add(condition369.tree);
            }

            RIGHT_PAREN370 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_until_part5001);
            if  (this->hasException())
            {
                goto ruleuntil_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN370);


            // AST REWRITE
            // elements: until_key, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 505:9: -> ^( until_key ^( LOGIC_EXPR condition ) )
            {
            	// OracleDML.g:505:12: ^( until_key ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_until_key.nextNode(), root_1);
            	// OracleDML.g:505:24: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleuntil_partEx; /* Prevent compiler warnings */
    ruleuntil_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end until_part */

/**
 * $ANTLR start order_by_clause
 * OracleDML.g:508:1: order_by_clause : order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )* -> ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) ;
 */
OracleDML::order_by_clause_return
OracleDML::order_by_clause()
{
    OracleDML::order_by_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA375 = NULL;
    OracleDML_OracleDMLKeys::order_key_return order_key371;
    ImplTraits::TreeTypePtr::pointer order_key371_last = NULL;
    OracleDML_OracleDMLKeys::siblings_key_return siblings_key372;
    ImplTraits::TreeTypePtr::pointer siblings_key372_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key373;
    ImplTraits::TreeTypePtr::pointer by_key373_last = NULL;
    OracleDML::order_by_elements_return order_by_elements374;
    ImplTraits::TreeTypePtr::pointer order_by_elements374_last = NULL;
    OracleDML::order_by_elements_return order_by_elements376;
    ImplTraits::TreeTypePtr::pointer order_by_elements376_last = NULL;
    ImplTraits::TreeTypePtr COMMA375_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_key(get_psrstate()->get_treeAdaptor(), "rule order_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_by_key(get_psrstate()->get_treeAdaptor(), "rule by_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_siblings_key(get_psrstate()->get_treeAdaptor(), "rule siblings_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_order_by_elements(get_psrstate()->get_treeAdaptor(), "rule order_by_elements");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:509:5: ( order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )* -> ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) )
        // OracleDML.g:509:10: order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )*
        {
            this->followPush(FOLLOW_order_key_in_order_by_clause5041);
            order_key371=order_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorder_by_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                order_key371_last = order_key371.tree.get();
                stream_order_key.add(order_key371.tree);
            }

            // OracleDML.g:509:20: ( siblings_key )?
            {
                ANTLR_UINT32 alt124=2;
                {
                    ANTLR_UINT32 LA124_0 = this->LA(1);
                    if ( (LA124_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SIBLINGS")))
                    {
                        alt124=1;
                    }
                }
                switch (alt124)
                {
            	case 1:
            	    // OracleDML.g:509:20: siblings_key
            	    {
            	        this->followPush(FOLLOW_siblings_key_in_order_by_clause5043);
            	        siblings_key372=siblings_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            siblings_key372_last = siblings_key372.tree.get();
            	            stream_siblings_key.add(siblings_key372.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_by_key_in_order_by_clause5046);
            by_key373=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorder_by_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                by_key373_last = by_key373.tree.get();
                stream_by_key.add(by_key373.tree);
            }

            this->followPush(FOLLOW_order_by_elements_in_order_by_clause5048);
            order_by_elements374=order_by_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorder_by_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                order_by_elements374_last = order_by_elements374.tree.get();
                stream_order_by_elements.add(order_by_elements374.tree);
            }

            // OracleDML.g:509:59: ( COMMA order_by_elements )*

            for (;;)
            {
                ANTLR_UINT32 alt125=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt125=1;
                	}
                    break;

                }

                switch (alt125)
                {
            	case 1:
            	    // OracleDML.g:509:60: COMMA order_by_elements
            	    {
            	        COMMA375 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_order_by_clause5051);
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA375);


            	        this->followPush(FOLLOW_order_by_elements_in_order_by_clause5053);
            	        order_by_elements376=order_by_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            order_by_elements376_last = order_by_elements376.tree.get();
            	            stream_order_by_elements.add(order_by_elements376.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop125;	/* break out of the loop */
            	    break;
                }
            }
            loop125: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: order_by_elements, siblings_key, order_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 510:9: -> ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
            {
            	// OracleDML.g:510:12: ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_order_key.nextNode(), root_1);
            	// OracleDML.g:510:24: ( siblings_key )?
            	if ( stream_siblings_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_siblings_key.nextTree());
            	}
            	stream_siblings_key.reset();

            	// OracleDML.g:510:38: ^( ORDER_BY_ELEMENTS ( order_by_elements )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ORDER_BY_ELEMENTS, "ORDER_BY_ELEMENTS"), root_2);
            	if ( !(stream_order_by_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "order_by_elements empty" );
            		goto ruleorder_by_clauseEx;
            	}
            	while ( stream_order_by_elements.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_order_by_elements.nextTree());
            	}
            	stream_order_by_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleorder_by_clauseEx; /* Prevent compiler warnings */
    ruleorder_by_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end order_by_clause */

/**
 * $ANTLR start order_by_elements
 * OracleDML.g:513:1: order_by_elements : expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )? -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? ) ;
 */
OracleDML::order_by_elements_return
OracleDML::order_by_elements()
{
    OracleDML::order_by_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression377;
    ImplTraits::TreeTypePtr::pointer expression377_last = NULL;
    OracleDML_OracleDMLKeys::asc_key_return asc_key378;
    ImplTraits::TreeTypePtr::pointer asc_key378_last = NULL;
    OracleDML_OracleDMLKeys::desc_key_return desc_key379;
    ImplTraits::TreeTypePtr::pointer desc_key379_last = NULL;
    OracleDML_OracleDMLKeys::nulls_key_return nulls_key380;
    ImplTraits::TreeTypePtr::pointer nulls_key380_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key381;
    ImplTraits::TreeTypePtr::pointer first_key381_last = NULL;
    OracleDML_OracleDMLKeys::last_key_return last_key382;
    ImplTraits::TreeTypePtr::pointer last_key382_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_desc_key(get_psrstate()->get_treeAdaptor(), "rule desc_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_nulls_key(get_psrstate()->get_treeAdaptor(), "rule nulls_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_last_key(get_psrstate()->get_treeAdaptor(), "rule last_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_asc_key(get_psrstate()->get_treeAdaptor(), "rule asc_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_first_key(get_psrstate()->get_treeAdaptor(), "rule first_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:514:5: ( expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )? -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? ) )
        // OracleDML.g:514:10: expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )?
        {
            this->followPush(FOLLOW_expression_in_order_by_elements5099);
            expression377=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleorder_by_elementsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression377_last = expression377.tree.get();
                stream_expression.add(expression377.tree);
            }

            // OracleDML.g:514:21: ( asc_key | desc_key )?
            {
                ANTLR_UINT32 alt126=3;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ASC:
                    	{
                    		alt126=1;
                    	}
                        break;
                    case SQL92_RESERVED_DESC:
                    	{
                    		alt126=2;
                    	}
                        break;
                }

                switch (alt126)
                {
            	case 1:
            	    // OracleDML.g:514:22: asc_key
            	    {
            	        this->followPush(FOLLOW_asc_key_in_order_by_elements5102);
            	        asc_key378=asc_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            asc_key378_last = asc_key378.tree.get();
            	            stream_asc_key.add(asc_key378.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:514:30: desc_key
            	    {
            	        this->followPush(FOLLOW_desc_key_in_order_by_elements5104);
            	        desc_key379=desc_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            desc_key379_last = desc_key379.tree.get();
            	            stream_desc_key.add(desc_key379.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:514:41: ( nulls_key ( first_key | last_key ) )?
            {
                ANTLR_UINT32 alt128=2;
                {
                    ANTLR_UINT32 LA128_0 = this->LA(1);
                    if ( (LA128_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "RANGE"))||((toUpper(LT(1)->getText()) == "ROWS"))||((toUpper(LT(1)->getText()) == "LOG"))||((toUpper(LT(1)->getText()) == "NULLS")))))
                    {
                        {
                            ANTLR_UINT32 LA128_1 = this->LA(2);
                            if ( (LA128_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "RANGE"))||((toUpper(LT(1)->getText()) == "ROWS"))||((toUpper(LT(1)->getText()) == "LOG"))||((toUpper(LT(1)->getText()) == "NULLS")))))
                            {
                                {
                                    ANTLR_UINT32 LA128_3 = this->LA(3);
                                    if ( ((toUpper(LT(1)->getText()) == "NULLS")))
                                    {
                                        alt128=1;
                                    }
                                }
                            }
                        }
                    }
                }
                switch (alt128)
                {
            	case 1:
            	    // OracleDML.g:514:42: nulls_key ( first_key | last_key )
            	    {
            	        this->followPush(FOLLOW_nulls_key_in_order_by_elements5109);
            	        nulls_key380=nulls_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleorder_by_elementsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            nulls_key380_last = nulls_key380.tree.get();
            	            stream_nulls_key.add(nulls_key380.tree);
            	        }

            	        // OracleDML.g:514:52: ( first_key | last_key )
            	        {
            	            ANTLR_UINT32 alt127=2;
            	            {
            	                ANTLR_UINT32 LA127_0 = this->LA(1);
            	                if ( (LA127_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "FIRST"))||((toUpper(LT(1)->getText()) == "LAST")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA127_1 = this->LA(2);
            	                        if ( ((toUpper(LT(1)->getText()) == "FIRST")))
            	                        {
            	                            alt127=1;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "LAST")))
            	                        {
            	                            alt127=2;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return retval;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 127 );
            	                            ex->set_state( 1 );


            	                            goto ruleorder_by_elementsEx;

            	                        }
            	                    }
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 127 );
            	                    ex->set_state( 0 );


            	                    goto ruleorder_by_elementsEx;

            	                }
            	            }
            	            switch (alt127)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:514:53: first_key
            	        	    {
            	        	        this->followPush(FOLLOW_first_key_in_order_by_elements5112);
            	        	        first_key381=first_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleorder_by_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            first_key381_last = first_key381.tree.get();
            	        	            stream_first_key.add(first_key381.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:514:63: last_key
            	        	    {
            	        	        this->followPush(FOLLOW_last_key_in_order_by_elements5114);
            	        	        last_key382=last_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleorder_by_elementsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            last_key382_last = last_key382.tree.get();
            	        	            stream_last_key.add(last_key382.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression, nulls_key, first_key, desc_key, last_key, asc_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 515:9: -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? )
            {
            	// OracleDML.g:515:12: ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ORDER_BY_ELEMENT, "ORDER_BY_ELEMENT"), root_1);
            	// OracleDML.g:515:31: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:515:50: ( asc_key )?
            	if ( stream_asc_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_asc_key.nextTree());
            	}
            	stream_asc_key.reset();

            	// OracleDML.g:515:59: ( desc_key )?
            	if ( stream_desc_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_desc_key.nextTree());
            	}
            	stream_desc_key.reset();

            	// OracleDML.g:515:69: ( nulls_key )?
            	if ( stream_nulls_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_nulls_key.nextTree());
            	}
            	stream_nulls_key.reset();

            	// OracleDML.g:515:80: ( first_key )?
            	if ( stream_first_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_first_key.nextTree());
            	}
            	stream_first_key.reset();

            	// OracleDML.g:515:91: ( last_key )?
            	if ( stream_last_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_last_key.nextTree());
            	}
            	stream_last_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleorder_by_elementsEx; /* Prevent compiler warnings */
    ruleorder_by_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end order_by_elements */

/**
 * $ANTLR start for_update_clause
 * OracleDML.g:518:1: for_update_clause : for_key update_key ( for_update_of_part )? ( for_update_options )? -> ^( for_key update_key ( for_update_of_part )? ( for_update_options )? ) ;
 */
OracleDML::for_update_clause_return
OracleDML::for_update_clause()
{
    OracleDML::for_update_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::for_key_return for_key383;
    ImplTraits::TreeTypePtr::pointer for_key383_last = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key384;
    ImplTraits::TreeTypePtr::pointer update_key384_last = NULL;
    OracleDML::for_update_of_part_return for_update_of_part385;
    ImplTraits::TreeTypePtr::pointer for_update_of_part385_last = NULL;
    OracleDML::for_update_options_return for_update_options386;
    ImplTraits::TreeTypePtr::pointer for_update_options386_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_for_update_of_part(get_psrstate()->get_treeAdaptor(), "rule for_update_of_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_update_options(get_psrstate()->get_treeAdaptor(), "rule for_update_options");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_key(get_psrstate()->get_treeAdaptor(), "rule update_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:519:5: ( for_key update_key ( for_update_of_part )? ( for_update_options )? -> ^( for_key update_key ( for_update_of_part )? ( for_update_options )? ) )
        // OracleDML.g:519:10: for_key update_key ( for_update_of_part )? ( for_update_options )?
        {
            this->followPush(FOLLOW_for_key_in_for_update_clause5172);
            for_key383=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key383_last = for_key383.tree.get();
                stream_for_key.add(for_key383.tree);
            }

            this->followPush(FOLLOW_update_key_in_for_update_clause5174);
            update_key384=update_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                update_key384_last = update_key384.tree.get();
                stream_update_key.add(update_key384.tree);
            }

            // OracleDML.g:519:29: ( for_update_of_part )?
            {
                ANTLR_UINT32 alt129=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_OF:
                    	{
                    		alt129=1;
                    	}
                        break;
                }

                switch (alt129)
                {
            	case 1:
            	    // OracleDML.g:519:29: for_update_of_part
            	    {
            	        this->followPush(FOLLOW_for_update_of_part_in_for_update_clause5176);
            	        for_update_of_part385=for_update_of_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefor_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_update_of_part385_last = for_update_of_part385.tree.get();
            	            stream_for_update_of_part.add(for_update_of_part385.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:519:49: ( for_update_options )?
            {
                ANTLR_UINT32 alt130=2;
                {
                    ANTLR_UINT32 LA130_0 = this->LA(1);
                    if ( (LA130_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT"))||((toUpper(LT(1)->getText()) == "LOG")))))
                    {
                        {
                            ANTLR_UINT32 LA130_1 = this->LA(2);
                            if ( (LA130_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT"))||((toUpper(LT(1)->getText()) == "LOG")))))
                            {
                                {
                                    ANTLR_UINT32 LA130_4 = this->LA(3);
                                    if ( ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT")))))
                                    {
                                        alt130=1;
                                    }
                                }
                            }
                            else if ( (LA130_1 == APPROXIMATE_NUM_LIT || LA130_1 == BINDVAR || ((LA130_1 >= CHAR_STRING) && (LA130_1 <= CHAR_STRING_PERL)) || LA130_1 == COLON || LA130_1 == DELIMITED_ID || LA130_1 == EXACT_NUM_LIT || LA130_1 == INTRODUCER || LA130_1 == LEFT_PAREN || LA130_1 == MINUS_SIGN || LA130_1 == NATIONAL_CHAR_STRING_LIT || ((LA130_1 >= PLSQL_NON_RESERVED_CAST) && (LA130_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA130_1 == PLUS_SIGN || LA130_1 == SQL92_RESERVED_ALL || LA130_1 == SQL92_RESERVED_ANY || LA130_1 == SQL92_RESERVED_CASE || ((LA130_1 >= SQL92_RESERVED_CURSOR) && (LA130_1 <= SQL92_RESERVED_DATE)) || LA130_1 == SQL92_RESERVED_DEFAULT || LA130_1 == SQL92_RESERVED_DISTINCT || ((LA130_1 >= SQL92_RESERVED_EXISTS) && (LA130_1 <= SQL92_RESERVED_FALSE)) || ((LA130_1 >= SQL92_RESERVED_NOT) && (LA130_1 <= SQL92_RESERVED_NULL)) || LA130_1 == SQL92_RESERVED_PRIOR || LA130_1 == SQL92_RESERVED_TRUE || LA130_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "WAIT")))
                            {
                                alt130=1;
                            }
                        }
                    }
                    else if ( (LA130_0 == PLSQL_RESERVED_NOWAIT))
                    {
                        alt130=1;
                    }
                }
                switch (alt130)
                {
            	case 1:
            	    // OracleDML.g:519:49: for_update_options
            	    {
            	        this->followPush(FOLLOW_for_update_options_in_for_update_clause5179);
            	        for_update_options386=for_update_options();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefor_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_update_options386_last = for_update_options386.tree.get();
            	            stream_for_update_options.add(for_update_options386.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: for_update_of_part, for_key, for_update_options, update_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 520:9: -> ^( for_key update_key ( for_update_of_part )? ( for_update_options )? )
            {
            	// OracleDML.g:520:12: ^( for_key update_key ( for_update_of_part )? ( for_update_options )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_for_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_key.nextTree());
            	// OracleDML.g:520:33: ( for_update_of_part )?
            	if ( stream_for_update_of_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_for_update_of_part.nextTree());
            	}
            	stream_for_update_of_part.reset();

            	// OracleDML.g:520:53: ( for_update_options )?
            	if ( stream_for_update_options.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_for_update_options.nextTree());
            	}
            	stream_for_update_options.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_update_clauseEx; /* Prevent compiler warnings */
    rulefor_update_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_update_clause */

/**
 * $ANTLR start for_update_of_part
 * OracleDML.g:523:1: for_update_of_part : of_key ^ column_name ( COMMA ! column_name )* ;
 */
OracleDML::for_update_of_part_return
OracleDML::for_update_of_part()
{
    OracleDML::for_update_of_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA389 = NULL;
    OracleDML_OracleDMLKeys::of_key_return of_key387;
    ImplTraits::TreeTypePtr::pointer of_key387_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name388;
    ImplTraits::TreeTypePtr::pointer column_name388_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name390;
    ImplTraits::TreeTypePtr::pointer column_name390_last = NULL;
    ImplTraits::TreeTypePtr COMMA389_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:524:5: ( of_key ^ column_name ( COMMA ! column_name )* )
        // OracleDML.g:524:10: of_key ^ column_name ( COMMA ! column_name )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_of_key_in_for_update_of_part5222);
            of_key387=of_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_update_of_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(of_key387.tree, root_0);

            this->followPush(FOLLOW_column_name_in_for_update_of_part5225);
            column_name388=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_update_of_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name388.tree);


            // OracleDML.g:524:30: ( COMMA ! column_name )*

            for (;;)
            {
                ANTLR_UINT32 alt131=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt131=1;
                	}
                    break;

                }

                switch (alt131)
                {
            	case 1:
            	    // OracleDML.g:524:31: COMMA ! column_name
            	    {
            	        COMMA389 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_for_update_of_part5228);
            	        if  (this->hasException())
            	        {
            	            goto rulefor_update_of_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_column_name_in_for_update_of_part5231);
            	        column_name390=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulefor_update_of_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_name390.tree);


            	    }
            	    break;

            	default:
            	    goto loop131;	/* break out of the loop */
            	    break;
                }
            }
            loop131: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_update_of_partEx; /* Prevent compiler warnings */
    rulefor_update_of_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_update_of_part */

/**
 * $ANTLR start for_update_options
 * OracleDML.g:527:1: for_update_options : ( skip_key locked_key !| nowait_key | wait_key expression -> ^( wait_key ^( EXPR expression ) ) );
 */
OracleDML::for_update_options_return
OracleDML::for_update_options()
{
    OracleDML::for_update_options_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::skip_key_return skip_key391;
    ImplTraits::TreeTypePtr::pointer skip_key391_last = NULL;
    OracleDML_OracleDMLKeys::locked_key_return locked_key392;
    ImplTraits::TreeTypePtr::pointer locked_key392_last = NULL;
    OracleDML_OracleDMLKeys::nowait_key_return nowait_key393;
    ImplTraits::TreeTypePtr::pointer nowait_key393_last = NULL;
    OracleDML_OracleDMLKeys::wait_key_return wait_key394;
    ImplTraits::TreeTypePtr::pointer wait_key394_last = NULL;
    OracleDML::expression_return expression395;
    ImplTraits::TreeTypePtr::pointer expression395_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_wait_key(get_psrstate()->get_treeAdaptor(), "rule wait_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:528:5: ( skip_key locked_key !| nowait_key | wait_key expression -> ^( wait_key ^( EXPR expression ) ) )

            ANTLR_UINT32 alt132;

            alt132=3;

            {
                ANTLR_UINT32 LA132_0 = this->LA(1);
                if ( (LA132_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT")))))
                {
                    {
                        ANTLR_UINT32 LA132_1 = this->LA(2);
                        if ( (LA132_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SKIP"))||((toUpper(LT(1)->getText()) == "WAIT")))))
                        {
                            {
                                ANTLR_UINT32 LA132_3 = this->LA(3);
                                if ( ((toUpper(LT(1)->getText()) == "SKIP")))
                                {
                                    alt132=1;
                                }
                                else if ( ((toUpper(LT(1)->getText()) == "WAIT")))
                                {
                                    alt132=3;
                                }
                                else
                                {
                                    if (this->get_backtracking()>0)
                                    {
                                        this->set_failedflag( true );
                                        return retval;
                                    }


                                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                    ex->set_decisionNum( 132 );
                                    ex->set_state( 3 );


                                    goto rulefor_update_optionsEx;

                                }
                            }
                        }
                        else if ( (LA132_1 == APPROXIMATE_NUM_LIT || LA132_1 == BINDVAR || ((LA132_1 >= CHAR_STRING) && (LA132_1 <= CHAR_STRING_PERL)) || LA132_1 == COLON || LA132_1 == DELIMITED_ID || LA132_1 == EXACT_NUM_LIT || LA132_1 == INTRODUCER || LA132_1 == LEFT_PAREN || LA132_1 == MINUS_SIGN || LA132_1 == NATIONAL_CHAR_STRING_LIT || ((LA132_1 >= PLSQL_NON_RESERVED_CAST) && (LA132_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA132_1 == PLUS_SIGN || LA132_1 == SQL92_RESERVED_ALL || LA132_1 == SQL92_RESERVED_ANY || LA132_1 == SQL92_RESERVED_CASE || ((LA132_1 >= SQL92_RESERVED_CURSOR) && (LA132_1 <= SQL92_RESERVED_DATE)) || LA132_1 == SQL92_RESERVED_DEFAULT || LA132_1 == SQL92_RESERVED_DISTINCT || ((LA132_1 >= SQL92_RESERVED_EXISTS) && (LA132_1 <= SQL92_RESERVED_FALSE)) || ((LA132_1 >= SQL92_RESERVED_NOT) && (LA132_1 <= SQL92_RESERVED_NULL)) || LA132_1 == SQL92_RESERVED_PRIOR || LA132_1 == SQL92_RESERVED_TRUE || LA132_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "WAIT")))
                        {
                            alt132=3;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 132 );
                            ex->set_state( 1 );


                            goto rulefor_update_optionsEx;

                        }
                    }
                }
                else if ( (LA132_0 == PLSQL_RESERVED_NOWAIT))
                {
                    alt132=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 132 );
                    ex->set_state( 0 );


                    goto rulefor_update_optionsEx;

                }
            }
            switch (alt132)
            {
        	case 1:
        	    // OracleDML.g:528:10: skip_key locked_key !
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_skip_key_in_for_update_options5253);
        	        skip_key391=skip_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, skip_key391.tree);


        	        this->followPush(FOLLOW_locked_key_in_for_update_options5255);
        	        locked_key392=locked_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:529:10: nowait_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_nowait_key_in_for_update_options5267);
        	        nowait_key393=nowait_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nowait_key393.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:530:10: wait_key expression
        	    {
        	        this->followPush(FOLLOW_wait_key_in_for_update_options5278);
        	        wait_key394=wait_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            wait_key394_last = wait_key394.tree.get();
        	            stream_wait_key.add(wait_key394.tree);
        	        }

        	        this->followPush(FOLLOW_expression_in_for_update_options5280);
        	        expression395=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_update_optionsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression395_last = expression395.tree.get();
        	            stream_expression.add(expression395.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression, wait_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 530:30: -> ^( wait_key ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:530:33: ^( wait_key ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_wait_key.nextNode(), root_1);
        	        	// OracleDML.g:530:44: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_update_optionsEx; /* Prevent compiler warnings */
    rulefor_update_optionsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_update_options */

/**
 * $ANTLR start update_statement
 * OracleDML.g:535:1: update_statement : update_key ^ general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ;
 */
OracleDML::update_statement_return
OracleDML::update_statement()
{
    OracleDML::update_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::update_key_return update_key396;
    ImplTraits::TreeTypePtr::pointer update_key396_last = NULL;
    OracleDML::general_table_ref_return general_table_ref397;
    ImplTraits::TreeTypePtr::pointer general_table_ref397_last = NULL;
    OracleDML::update_set_clause_return update_set_clause398;
    ImplTraits::TreeTypePtr::pointer update_set_clause398_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause399;
    ImplTraits::TreeTypePtr::pointer where_clause399_last = NULL;
    OracleDML::static_returning_clause_return static_returning_clause400;
    ImplTraits::TreeTypePtr::pointer static_returning_clause400_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause401;
    ImplTraits::TreeTypePtr::pointer error_logging_clause401_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:536:5: ( update_key ^ general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
        // OracleDML.g:536:10: update_key ^ general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_update_key_in_update_statement5314);
            update_key396=update_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleupdate_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(update_key396.tree, root_0);

            this->followPush(FOLLOW_general_table_ref_in_update_statement5317);
            general_table_ref397=general_table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleupdate_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_table_ref397.tree);


            this->followPush(FOLLOW_update_set_clause_in_update_statement5327);
            update_set_clause398=update_set_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleupdate_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, update_set_clause398.tree);


            // OracleDML.g:538:9: ( where_clause )?
            {
                ANTLR_UINT32 alt133=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt133=1;
                    	}
                        break;
                }

                switch (alt133)
                {
            	case 1:
            	    // OracleDML.g:538:9: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_update_statement5337);
            	        where_clause399=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, where_clause399.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:538:23: ( static_returning_clause )?
            {
                ANTLR_UINT32 alt134=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA134_1 = this->LA(2);
                    		    if ( ((((toUpper(LT(1)->getText()) == "RETURN"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
                    		    {
                    		        alt134=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt134)
                {
            	case 1:
            	    // OracleDML.g:538:23: static_returning_clause
            	    {
            	        this->followPush(FOLLOW_static_returning_clause_in_update_statement5340);
            	        static_returning_clause400=static_returning_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, static_returning_clause400.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:538:48: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt135=2;
                {
                    ANTLR_UINT32 LA135_0 = this->LA(1);
                    if ( (LA135_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt135=1;
                    }
                }
                switch (alt135)
                {
            	case 1:
            	    // OracleDML.g:538:48: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_update_statement5343);
            	        error_logging_clause401=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, error_logging_clause401.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleupdate_statementEx; /* Prevent compiler warnings */
    ruleupdate_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end update_statement */

/**
 * $ANTLR start update_set_clause
 * OracleDML.g:542:1: update_set_clause : set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression ) -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ ) -> ^( set_key ^( value_key id ^( EXPR expression ) ) ) ;
 */
OracleDML::update_set_clause_return
OracleDML::update_set_clause()
{
    OracleDML::update_set_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA404 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN407 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN409 = NULL;
    ImplTraits::CommonTokenType const* EQUALS_OP410 = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key402;
    ImplTraits::TreeTypePtr::pointer set_key402_last = NULL;
    OracleDML::column_based_update_set_clause_return column_based_update_set_clause403;
    ImplTraits::TreeTypePtr::pointer column_based_update_set_clause403_last = NULL;
    OracleDML::column_based_update_set_clause_return column_based_update_set_clause405;
    ImplTraits::TreeTypePtr::pointer column_based_update_set_clause405_last = NULL;
    OracleDML_OracleDMLKeys::value_key_return value_key406;
    ImplTraits::TreeTypePtr::pointer value_key406_last = NULL;
    OracleDML_OracleDMLCommons::id_return id408;
    ImplTraits::TreeTypePtr::pointer id408_last = NULL;
    OracleDML::expression_return expression411;
    ImplTraits::TreeTypePtr::pointer expression411_last = NULL;
    ImplTraits::TreeTypePtr COMMA404_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN407_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN409_tree;
    ImplTraits::TreeTypePtr EQUALS_OP410_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_id(get_psrstate()->get_treeAdaptor(), "rule id");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_value_key(get_psrstate()->get_treeAdaptor(), "rule value_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_based_update_set_clause(get_psrstate()->get_treeAdaptor(), "rule column_based_update_set_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_set_key(get_psrstate()->get_treeAdaptor(), "rule set_key");

    /* Initialize rule variables
     */

        int mode = 1;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:544:5: ( set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression ) -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ ) -> ^( set_key ^( value_key id ^( EXPR expression ) ) ) )
        // OracleDML.g:544:10: set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression )
        {
            this->followPush(FOLLOW_set_key_in_update_set_clause5373);
            set_key402=set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleupdate_set_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                set_key402_last = set_key402.tree.get();
                stream_set_key.add(set_key402.tree);
            }

            // OracleDML.g:545:5: ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression )
            {
                ANTLR_UINT32 alt137=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case LEFT_PAREN:
                	{
                		alt137=1;
                	}
                    break;
                case REGULAR_ID:
                	{
                		switch ( this->LA(2) )
                		{
                		case EQUALS_OP:
                		case PERIOD:
                			{
                				alt137=1;
                			}
                		    break;
                		case LEFT_PAREN:
                			{
                				alt137=2;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return retval;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 137 );
                		    ex->set_state( 2 );


                		    goto ruleupdate_set_clauseEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 137 );
                    ex->set_state( 0 );


                    goto ruleupdate_set_clauseEx;

                }

                switch (alt137)
                {
            	case 1:
            	    // OracleDML.g:545:10: column_based_update_set_clause ( COMMA column_based_update_set_clause )*
            	    {
            	        this->followPush(FOLLOW_column_based_update_set_clause_in_update_set_clause5384);
            	        column_based_update_set_clause403=column_based_update_set_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_based_update_set_clause403_last = column_based_update_set_clause403.tree.get();
            	            stream_column_based_update_set_clause.add(column_based_update_set_clause403.tree);
            	        }

            	        // OracleDML.g:545:41: ( COMMA column_based_update_set_clause )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt136=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt136=1;
            	            	}
            	                break;

            	            }

            	            switch (alt136)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:545:42: COMMA column_based_update_set_clause
            	        	    {
            	        	        COMMA404 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_update_set_clause5387);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleupdate_set_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA404);


            	        	        this->followPush(FOLLOW_column_based_update_set_clause_in_update_set_clause5389);
            	        	        column_based_update_set_clause405=column_based_update_set_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleupdate_set_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_based_update_set_clause405_last = column_based_update_set_clause405.tree.get();
            	        	            stream_column_based_update_set_clause.add(column_based_update_set_clause405.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop136;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop136: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:546:10: value_key LEFT_PAREN id[T_UNKNOWN,T_USE] RIGHT_PAREN EQUALS_OP expression
            	    {
            	        this->followPush(FOLLOW_value_key_in_update_set_clause5402);
            	        value_key406=value_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            value_key406_last = value_key406.tree.get();
            	            stream_value_key.add(value_key406.tree);
            	        }

            	        LEFT_PAREN407 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_update_set_clause5404);
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN407);


            	        this->followPush(FOLLOW_id_in_update_set_clause5406);
            	        id408=id(T_UNKNOWN, T_USE);

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            id408_last = id408.tree.get();
            	            stream_id.add(id408.tree);
            	        }

            	        RIGHT_PAREN409 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_update_set_clause5409);
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN409);


            	        EQUALS_OP410 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_update_set_clause5411);
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP410);


            	        this->followPush(FOLLOW_expression_in_update_set_clause5413);
            	        expression411=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupdate_set_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression411_last = expression411.tree.get();
            	            stream_expression.add(expression411.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 0;
            	        }


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: column_based_update_set_clause, expression, set_key, value_key, id, set_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 548:9: -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ )
            if (mode == 1) {
            	// OracleDML.g:548:24: ^( set_key ( column_based_update_set_clause )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_set_key.nextNode(), root_1);
            	if ( !(stream_column_based_update_set_clause.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_based_update_set_clause empty" );
            		goto ruleupdate_set_clauseEx;
            	}
            	while ( stream_column_based_update_set_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_based_update_set_clause.nextTree());
            	}
            	stream_column_based_update_set_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 549:9: -> ^( set_key ^( value_key id ^( EXPR expression ) ) )
            {
            	// OracleDML.g:549:12: ^( set_key ^( value_key id ^( EXPR expression ) ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_set_key.nextNode(), root_1);
            	// OracleDML.g:549:22: ^( value_key id ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_value_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_id.nextTree());
            	// OracleDML.g:549:37: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleupdate_set_clauseEx; /* Prevent compiler warnings */
    ruleupdate_set_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end update_set_clause */

/**
 * $ANTLR start column_based_update_set_clause
 * OracleDML.g:552:1: column_based_update_set_clause : ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery ) );
 */
OracleDML::column_based_update_set_clause_return
OracleDML::column_based_update_set_clause()
{
    OracleDML::column_based_update_set_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP413 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN415 = NULL;
    ImplTraits::CommonTokenType const* COMMA417 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN419 = NULL;
    ImplTraits::CommonTokenType const* EQUALS_OP420 = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name412;
    ImplTraits::TreeTypePtr::pointer column_name412_last = NULL;
    OracleDML::expression_return expression414;
    ImplTraits::TreeTypePtr::pointer expression414_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name416;
    ImplTraits::TreeTypePtr::pointer column_name416_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name418;
    ImplTraits::TreeTypePtr::pointer column_name418_last = NULL;
    OracleDML::subquery_return subquery421;
    ImplTraits::TreeTypePtr::pointer subquery421_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP413_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN415_tree;
    ImplTraits::TreeTypePtr COMMA417_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN419_tree;
    ImplTraits::TreeTypePtr EQUALS_OP420_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:553:5: ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery ) )

            ANTLR_UINT32 alt139;

            alt139=2;

            switch ( this->LA(1) )
            {
            case DELIMITED_ID:
            case INTRODUCER:
            case REGULAR_ID:
            	{
            		alt139=1;
            	}
                break;
            case LEFT_PAREN:
            	{
            		alt139=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 139 );
                ex->set_state( 0 );


                goto rulecolumn_based_update_set_clauseEx;

            }

            switch (alt139)
            {
        	case 1:
        	    // OracleDML.g:553:10: column_name EQUALS_OP expression
        	    {
        	        this->followPush(FOLLOW_column_name_in_column_based_update_set_clause5485);
        	        column_name412=column_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            column_name412_last = column_name412.tree.get();
        	            stream_column_name.add(column_name412.tree);
        	        }

        	        EQUALS_OP413 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_column_based_update_set_clause5487);
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP413);


        	        this->followPush(FOLLOW_expression_in_column_based_update_set_clause5489);
        	        expression414=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression414_last = expression414.tree.get();
        	            stream_expression.add(expression414.tree);
        	        }

        	        // AST REWRITE
        	        // elements: expression, column_name
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 553:43: -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:553:46: ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ASSIGN, EQUALS_OP413), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
        	        	// OracleDML.g:553:79: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:554:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery
        	    {
        	        LEFT_PAREN415 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5515);
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN415);


        	        this->followPush(FOLLOW_column_name_in_column_based_update_set_clause5517);
        	        column_name416=column_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            column_name416_last = column_name416.tree.get();
        	            stream_column_name.add(column_name416.tree);
        	        }

        	        // OracleDML.g:554:33: ( COMMA column_name )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt138=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt138=1;
        	            	}
        	                break;

        	            }

        	            switch (alt138)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:554:34: COMMA column_name
        	        	    {
        	        	        COMMA417 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_column_based_update_set_clause5520);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecolumn_based_update_set_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA417);


        	        	        this->followPush(FOLLOW_column_name_in_column_based_update_set_clause5522);
        	        	        column_name418=column_name();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulecolumn_based_update_set_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            column_name418_last = column_name418.tree.get();
        	        	            stream_column_name.add(column_name418.tree);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop138;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop138: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN419 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5526);
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN419);


        	        EQUALS_OP420 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_column_based_update_set_clause5528);
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP420);


        	        this->followPush(FOLLOW_subquery_in_column_based_update_set_clause5530);
        	        subquery421=subquery();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecolumn_based_update_set_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            subquery421_last = subquery421.tree.get();
        	            stream_subquery.add(subquery421.tree);
        	        }

        	        // AST REWRITE
        	        // elements: subquery, column_name
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 554:85: -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery )
        	        {
        	        	// OracleDML.g:554:88: ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ASSIGN, EQUALS_OP420), root_1);
        	        	if ( !(stream_column_name.hasNext()) ) {
        	        		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
        	        		goto rulecolumn_based_update_set_clauseEx;
        	        	}
        	        	while ( stream_column_name.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
        	        	}
        	        	stream_column_name.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulecolumn_based_update_set_clauseEx; /* Prevent compiler warnings */
    rulecolumn_based_update_set_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end column_based_update_set_clause */

/**
 * $ANTLR start delete_statement
 * OracleDML.g:559:1: delete_statement : delete_key ^ ( from_key !)? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ;
 */
OracleDML::delete_statement_return
OracleDML::delete_statement()
{
    OracleDML::delete_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::delete_key_return delete_key422;
    ImplTraits::TreeTypePtr::pointer delete_key422_last = NULL;
    OracleDML_OracleDMLKeys::from_key_return from_key423;
    ImplTraits::TreeTypePtr::pointer from_key423_last = NULL;
    OracleDML::general_table_ref_return general_table_ref424;
    ImplTraits::TreeTypePtr::pointer general_table_ref424_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause425;
    ImplTraits::TreeTypePtr::pointer where_clause425_last = NULL;
    OracleDML::static_returning_clause_return static_returning_clause426;
    ImplTraits::TreeTypePtr::pointer static_returning_clause426_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause427;
    ImplTraits::TreeTypePtr::pointer error_logging_clause427_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:560:5: ( delete_key ^ ( from_key !)? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
        // OracleDML.g:560:10: delete_key ^ ( from_key !)? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_delete_key_in_delete_statement5564);
            delete_key422=delete_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledelete_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(delete_key422.tree, root_0);

            // OracleDML.g:560:30: ( from_key !)?
            {
                ANTLR_UINT32 alt140=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_FROM:
                    	{
                    		alt140=1;
                    	}
                        break;
                }

                switch (alt140)
                {
            	case 1:
            	    // OracleDML.g:560:30: from_key !
            	    {
            	        this->followPush(FOLLOW_from_key_in_delete_statement5567);
            	        from_key423=from_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelete_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_general_table_ref_in_delete_statement5579);
            general_table_ref424=general_table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledelete_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_table_ref424.tree);


            // OracleDML.g:562:9: ( where_clause )?
            {
                ANTLR_UINT32 alt141=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt141=1;
                    	}
                        break;
                }

                switch (alt141)
                {
            	case 1:
            	    // OracleDML.g:562:9: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_delete_statement5589);
            	        where_clause425=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelete_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, where_clause425.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:562:23: ( static_returning_clause )?
            {
                ANTLR_UINT32 alt142=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA142_1 = this->LA(2);
                    		    if ( ((((toUpper(LT(1)->getText()) == "RETURN"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
                    		    {
                    		        alt142=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt142)
                {
            	case 1:
            	    // OracleDML.g:562:23: static_returning_clause
            	    {
            	        this->followPush(FOLLOW_static_returning_clause_in_delete_statement5592);
            	        static_returning_clause426=static_returning_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelete_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, static_returning_clause426.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:562:48: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt143=2;
                {
                    ANTLR_UINT32 LA143_0 = this->LA(1);
                    if ( (LA143_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt143=1;
                    }
                }
                switch (alt143)
                {
            	case 1:
            	    // OracleDML.g:562:48: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_delete_statement5595);
            	        error_logging_clause427=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledelete_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, error_logging_clause427.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruledelete_statementEx; /* Prevent compiler warnings */
    ruledelete_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end delete_statement */

/**
 * $ANTLR start insert_statement
 * OracleDML.g:565:1: insert_statement : insert_key ^ ( single_table_insert | multi_table_insert ) ;
 */
OracleDML::insert_statement_return
OracleDML::insert_statement()
{
    OracleDML::insert_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::insert_key_return insert_key428;
    ImplTraits::TreeTypePtr::pointer insert_key428_last = NULL;
    OracleDML::single_table_insert_return single_table_insert429;
    ImplTraits::TreeTypePtr::pointer single_table_insert429_last = NULL;
    OracleDML::multi_table_insert_return multi_table_insert430;
    ImplTraits::TreeTypePtr::pointer multi_table_insert430_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:566:5: ( insert_key ^ ( single_table_insert | multi_table_insert ) )
        // OracleDML.g:566:10: insert_key ^ ( single_table_insert | multi_table_insert )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_insert_key_in_insert_statement5616);
            insert_key428=insert_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinsert_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(insert_key428.tree, root_0);

            // OracleDML.g:567:5: ( single_table_insert | multi_table_insert )
            {
                ANTLR_UINT32 alt144=2;
                {
                    ANTLR_UINT32 LA144_0 = this->LA(1);
                    if ( (LA144_0 == SQL92_RESERVED_INTO))
                    {
                        alt144=1;
                    }
                    else if ( (LA144_0 == SQL92_RESERVED_ALL))
                    {
                        alt144=2;
                    }
                    else if ( (LA144_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "FIRST")))
                    {
                        alt144=2;
                    }
                    else if ( (LA144_0 == SQL92_RESERVED_WHEN))
                    {
                        alt144=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 144 );
                        ex->set_state( 0 );


                        goto ruleinsert_statementEx;

                    }
                }
                switch (alt144)
                {
            	case 1:
            	    // OracleDML.g:567:10: single_table_insert
            	    {
            	        this->followPush(FOLLOW_single_table_insert_in_insert_statement5628);
            	        single_table_insert429=single_table_insert();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, single_table_insert429.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:568:10: multi_table_insert
            	    {
            	        this->followPush(FOLLOW_multi_table_insert_in_insert_statement5639);
            	        multi_table_insert430=multi_table_insert();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multi_table_insert430.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleinsert_statementEx; /* Prevent compiler warnings */
    ruleinsert_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end insert_statement */

/**
 * $ANTLR start single_table_insert
 * OracleDML.g:574:1: single_table_insert : insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? ) ;
 */
OracleDML::single_table_insert_return
OracleDML::single_table_insert()
{
    OracleDML::single_table_insert_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::insert_into_clause_return insert_into_clause431;
    ImplTraits::TreeTypePtr::pointer insert_into_clause431_last = NULL;
    OracleDML::values_clause_return values_clause432;
    ImplTraits::TreeTypePtr::pointer values_clause432_last = NULL;
    OracleDML::static_returning_clause_return static_returning_clause433;
    ImplTraits::TreeTypePtr::pointer static_returning_clause433_last = NULL;
    OracleDML::select_statement_return select_statement434;
    ImplTraits::TreeTypePtr::pointer select_statement434_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause435;
    ImplTraits::TreeTypePtr::pointer error_logging_clause435_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_static_returning_clause(get_psrstate()->get_treeAdaptor(), "rule static_returning_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_values_clause(get_psrstate()->get_treeAdaptor(), "rule values_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_insert_into_clause(get_psrstate()->get_treeAdaptor(), "rule insert_into_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_clause(get_psrstate()->get_treeAdaptor(), "rule error_logging_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:575:5: ( insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? ) )
        // OracleDML.g:575:10: insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )?
        {
            this->followPush(FOLLOW_insert_into_clause_in_single_table_insert5667);
            insert_into_clause431=insert_into_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesingle_table_insertEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                insert_into_clause431_last = insert_into_clause431.tree.get();
                stream_insert_into_clause.add(insert_into_clause431.tree);
            }

            // OracleDML.g:576:5: ( values_clause ( static_returning_clause )? | select_statement )
            {
                ANTLR_UINT32 alt146=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_VALUES:
                	{
                		alt146=1;
                	}
                    break;
                case LEFT_PAREN:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_WITH:
                	{
                		alt146=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 146 );
                    ex->set_state( 0 );


                    goto rulesingle_table_insertEx;

                }

                switch (alt146)
                {
            	case 1:
            	    // OracleDML.g:576:10: values_clause ( static_returning_clause )?
            	    {
            	        this->followPush(FOLLOW_values_clause_in_single_table_insert5678);
            	        values_clause432=values_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            values_clause432_last = values_clause432.tree.get();
            	            stream_values_clause.add(values_clause432.tree);
            	        }

            	        // OracleDML.g:576:24: ( static_returning_clause )?
            	        {
            	            ANTLR_UINT32 alt145=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		{
            	                		    ANTLR_UINT32 LA145_1 = this->LA(2);
            	                		    if ( ((((toUpper(LT(1)->getText()) == "RETURN"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
            	                		    {
            	                		        alt145=1;
            	                		    }
            	                		}
            	                	}
            	                    break;
            	            }

            	            switch (alt145)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:576:24: static_returning_clause
            	        	    {
            	        	        this->followPush(FOLLOW_static_returning_clause_in_single_table_insert5680);
            	        	        static_returning_clause433=static_returning_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesingle_table_insertEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            static_returning_clause433_last = static_returning_clause433.tree.get();
            	        	            stream_static_returning_clause.add(static_returning_clause433.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:577:10: select_statement
            	    {
            	        this->followPush(FOLLOW_select_statement_in_single_table_insert5692);
            	        select_statement434=select_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            select_statement434_last = select_statement434.tree.get();
            	            stream_select_statement.add(select_statement434.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:579:9: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt147=2;
                {
                    ANTLR_UINT32 LA147_0 = this->LA(1);
                    if ( (LA147_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt147=1;
                    }
                }
                switch (alt147)
                {
            	case 1:
            	    // OracleDML.g:579:9: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_single_table_insert5708);
            	        error_logging_clause435=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_clause435_last = error_logging_clause435.tree.get();
            	            stream_error_logging_clause.add(error_logging_clause435.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: insert_into_clause, select_statement, values_clause, static_returning_clause, error_logging_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 580:9: -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? )
            {
            	// OracleDML.g:580:12: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SINGLE_TABLE_MODE, "SINGLE_TABLE_MODE"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_insert_into_clause.nextTree());
            	// OracleDML.g:580:51: ( values_clause )?
            	if ( stream_values_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_values_clause.nextTree());
            	}
            	stream_values_clause.reset();

            	// OracleDML.g:580:66: ( static_returning_clause )?
            	if ( stream_static_returning_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_static_returning_clause.nextTree());
            	}
            	stream_static_returning_clause.reset();

            	// OracleDML.g:580:91: ( select_statement )?
            	if ( stream_select_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_statement.nextTree());
            	}
            	stream_select_statement.reset();

            	// OracleDML.g:580:109: ( error_logging_clause )?
            	if ( stream_error_logging_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_clause.nextTree());
            	}
            	stream_error_logging_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesingle_table_insertEx; /* Prevent compiler warnings */
    rulesingle_table_insertEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end single_table_insert */

/**
 * $ANTLR start multi_table_insert
 * OracleDML.g:583:1: multi_table_insert : ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement -> ^( MULTI_TABLE_MODE ( multi_table_element )* ( conditional_insert_clause )? select_statement ) ;
 */
OracleDML::multi_table_insert_return
OracleDML::multi_table_insert()
{
    OracleDML::multi_table_insert_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::all_key_return all_key436;
    ImplTraits::TreeTypePtr::pointer all_key436_last = NULL;
    OracleDML::multi_table_element_return multi_table_element437;
    ImplTraits::TreeTypePtr::pointer multi_table_element437_last = NULL;
    OracleDML::conditional_insert_clause_return conditional_insert_clause438;
    ImplTraits::TreeTypePtr::pointer conditional_insert_clause438_last = NULL;
    OracleDML::select_statement_return select_statement439;
    ImplTraits::TreeTypePtr::pointer select_statement439_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_multi_table_element(get_psrstate()->get_treeAdaptor(), "rule multi_table_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_conditional_insert_clause(get_psrstate()->get_treeAdaptor(), "rule conditional_insert_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:584:5: ( ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement -> ^( MULTI_TABLE_MODE ( multi_table_element )* ( conditional_insert_clause )? select_statement ) )
        // OracleDML.g:585:5: ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement
        {
            // OracleDML.g:585:5: ( all_key ( multi_table_element )+ | conditional_insert_clause )
            {
                ANTLR_UINT32 alt149=2;
                {
                    ANTLR_UINT32 LA149_0 = this->LA(1);
                    if ( (LA149_0 == SQL92_RESERVED_ALL))
                    {
                        switch ( this->LA(2) )
                        {
                        case SQL92_RESERVED_INTO:
                        	{
                        		alt149=1;
                        	}
                            break;
                        case SQL92_RESERVED_WHEN:
                        	{
                        		alt149=2;
                        	}
                            break;

                        default:
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }

                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 149 );
                            ex->set_state( 1 );


                            goto rulemulti_table_insertEx;

                        }

                    }
                    else if ( (LA149_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "FIRST")))
                    {
                        alt149=2;
                    }
                    else if ( (LA149_0 == SQL92_RESERVED_WHEN))
                    {
                        alt149=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 149 );
                        ex->set_state( 0 );


                        goto rulemulti_table_insertEx;

                    }
                }
                switch (alt149)
                {
            	case 1:
            	    // OracleDML.g:585:10: all_key ( multi_table_element )+
            	    {
            	        this->followPush(FOLLOW_all_key_in_multi_table_insert5767);
            	        all_key436=all_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            all_key436_last = all_key436.tree.get();
            	            stream_all_key.add(all_key436.tree);
            	        }

            	        // OracleDML.g:585:18: ( multi_table_element )+
            	        {
            	            int cnt148=0;

            	            for (;;)
            	            {
            	                ANTLR_UINT32 alt148=2;
            	        	switch ( this->LA(1) )
            	        	{
            	        	case SQL92_RESERVED_INTO:
            	        		{
            	        			alt148=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt148)
            	        	{
            	        	    case 1:
            	        	        // OracleDML.g:585:18: multi_table_element
            	        	        {
            	        	            this->followPush(FOLLOW_multi_table_element_in_multi_table_insert5769);
            	        	            multi_table_element437=multi_table_element();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulemulti_table_insertEx;
            	        	            }
            	        	            if (this->hasFailed())
            	        	            {
            	        	                return retval;
            	        	            }

            	        	            if ( this->get_backtracking()==0 ) 
            	        	            {
            	        	                multi_table_element437_last = multi_table_element437.tree.get();
            	        	                stream_multi_table_element.add(multi_table_element437.tree);
            	        	            }

            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt148 >= 1 )
            	        		{
            	        		    goto loop148;
            	        		}
            	        		if (this->get_backtracking()>0)
            	        		{
            	        		    this->set_failedflag( true );
            	        		    return retval;
            	        		}

            	        		/* mismatchedSetEx()
            	        		 */
            	        		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	        		goto rulemulti_table_insertEx;
            	        	}
            	        	cnt148++;
            	            }
            	            loop148: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:586:10: conditional_insert_clause
            	    {
            	        this->followPush(FOLLOW_conditional_insert_clause_in_multi_table_insert5781);
            	        conditional_insert_clause438=conditional_insert_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_table_insertEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            conditional_insert_clause438_last = conditional_insert_clause438.tree.get();
            	            stream_conditional_insert_clause.add(conditional_insert_clause438.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_select_statement_in_multi_table_insert5797);
            select_statement439=select_statement();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_table_insertEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_statement439_last = select_statement439.tree.get();
                stream_select_statement.add(select_statement439.tree);
            }

            // AST REWRITE
            // elements: conditional_insert_clause, select_statement, multi_table_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 589:9: -> ^( MULTI_TABLE_MODE ( multi_table_element )* ( conditional_insert_clause )? select_statement )
            {
            	// OracleDML.g:589:12: ^( MULTI_TABLE_MODE ( multi_table_element )* ( conditional_insert_clause )? select_statement )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MULTI_TABLE_MODE, "MULTI_TABLE_MODE"), root_1);
            	// OracleDML.g:589:31: ( multi_table_element )*
            	while ( stream_multi_table_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_multi_table_element.nextTree());
            	}
            	stream_multi_table_element.reset();

            	// OracleDML.g:589:52: ( conditional_insert_clause )?
            	if ( stream_conditional_insert_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_conditional_insert_clause.nextTree());
            	}
            	stream_conditional_insert_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_statement.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemulti_table_insertEx; /* Prevent compiler warnings */
    rulemulti_table_insertEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multi_table_insert */

/**
 * $ANTLR start multi_table_element
 * OracleDML.g:592:1: multi_table_element : insert_into_clause ( values_clause )? ( error_logging_clause )? -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) ;
 */
OracleDML::multi_table_element_return
OracleDML::multi_table_element()
{
    OracleDML::multi_table_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::insert_into_clause_return insert_into_clause440;
    ImplTraits::TreeTypePtr::pointer insert_into_clause440_last = NULL;
    OracleDML::values_clause_return values_clause441;
    ImplTraits::TreeTypePtr::pointer values_clause441_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause442;
    ImplTraits::TreeTypePtr::pointer error_logging_clause442_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_values_clause(get_psrstate()->get_treeAdaptor(), "rule values_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_insert_into_clause(get_psrstate()->get_treeAdaptor(), "rule insert_into_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_clause(get_psrstate()->get_treeAdaptor(), "rule error_logging_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:593:5: ( insert_into_clause ( values_clause )? ( error_logging_clause )? -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) )
        // OracleDML.g:593:10: insert_into_clause ( values_clause )? ( error_logging_clause )?
        {
            this->followPush(FOLLOW_insert_into_clause_in_multi_table_element5839);
            insert_into_clause440=insert_into_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_table_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                insert_into_clause440_last = insert_into_clause440.tree.get();
                stream_insert_into_clause.add(insert_into_clause440.tree);
            }

            // OracleDML.g:593:29: ( values_clause )?
            {
                ANTLR_UINT32 alt150=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_VALUES:
                    	{
                    		alt150=1;
                    	}
                        break;
                }

                switch (alt150)
                {
            	case 1:
            	    // OracleDML.g:593:29: values_clause
            	    {
            	        this->followPush(FOLLOW_values_clause_in_multi_table_element5841);
            	        values_clause441=values_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_table_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            values_clause441_last = values_clause441.tree.get();
            	            stream_values_clause.add(values_clause441.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:593:44: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt151=2;
                {
                    ANTLR_UINT32 LA151_0 = this->LA(1);
                    if ( (LA151_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt151=1;
                    }
                }
                switch (alt151)
                {
            	case 1:
            	    // OracleDML.g:593:44: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_multi_table_element5844);
            	        error_logging_clause442=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_table_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_clause442_last = error_logging_clause442.tree.get();
            	            stream_error_logging_clause.add(error_logging_clause442.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: error_logging_clause, insert_into_clause, values_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 594:9: -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
            {
            	// OracleDML.g:594:12: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_ELEMENT, "TABLE_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_insert_into_clause.nextTree());
            	// OracleDML.g:594:47: ( values_clause )?
            	if ( stream_values_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_values_clause.nextTree());
            	}
            	stream_values_clause.reset();

            	// OracleDML.g:594:62: ( error_logging_clause )?
            	if ( stream_error_logging_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_clause.nextTree());
            	}
            	stream_error_logging_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemulti_table_elementEx; /* Prevent compiler warnings */
    rulemulti_table_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multi_table_element */

/**
 * $ANTLR start conditional_insert_clause
 * OracleDML.g:597:1: conditional_insert_clause : ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) ;
 */
OracleDML::conditional_insert_clause_return
OracleDML::conditional_insert_clause()
{
    OracleDML::conditional_insert_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::all_key_return all_key443;
    ImplTraits::TreeTypePtr::pointer all_key443_last = NULL;
    OracleDML_OracleDMLKeys::first_key_return first_key444;
    ImplTraits::TreeTypePtr::pointer first_key444_last = NULL;
    OracleDML::conditional_insert_when_part_return conditional_insert_when_part445;
    ImplTraits::TreeTypePtr::pointer conditional_insert_when_part445_last = NULL;
    OracleDML::conditional_insert_else_part_return conditional_insert_else_part446;
    ImplTraits::TreeTypePtr::pointer conditional_insert_else_part446_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_conditional_insert_when_part(get_psrstate()->get_treeAdaptor(), "rule conditional_insert_when_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_conditional_insert_else_part(get_psrstate()->get_treeAdaptor(), "rule conditional_insert_else_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_first_key(get_psrstate()->get_treeAdaptor(), "rule first_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:598:5: ( ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) )
        // OracleDML.g:598:10: ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )?
        {
            // OracleDML.g:598:10: ( all_key | first_key )?
            {
                ANTLR_UINT32 alt152=3;
                {
                    ANTLR_UINT32 LA152_0 = this->LA(1);
                    if ( (LA152_0 == SQL92_RESERVED_ALL))
                    {
                        alt152=1;
                    }
                    else if ( (LA152_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "FIRST")))
                    {
                        alt152=2;
                    }
                }
                switch (alt152)
                {
            	case 1:
            	    // OracleDML.g:598:11: all_key
            	    {
            	        this->followPush(FOLLOW_all_key_in_conditional_insert_clause5888);
            	        all_key443=all_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            all_key443_last = all_key443.tree.get();
            	            stream_all_key.add(all_key443.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:598:19: first_key
            	    {
            	        this->followPush(FOLLOW_first_key_in_conditional_insert_clause5890);
            	        first_key444=first_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            first_key444_last = first_key444.tree.get();
            	            stream_first_key.add(first_key444.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:599:9: ( conditional_insert_when_part )+
            {
                int cnt153=0;

                for (;;)
                {
                    ANTLR_UINT32 alt153=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_WHEN:
            		{
            			alt153=1;
            		}
            	    break;

            	}

            	switch (alt153)
            	{
            	    case 1:
            	        // OracleDML.g:599:9: conditional_insert_when_part
            	        {
            	            this->followPush(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause5902);
            	            conditional_insert_when_part445=conditional_insert_when_part();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleconditional_insert_clauseEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) 
            	            {
            	                conditional_insert_when_part445_last = conditional_insert_when_part445.tree.get();
            	                stream_conditional_insert_when_part.add(conditional_insert_when_part445.tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt153 >= 1 )
            		{
            		    goto loop153;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleconditional_insert_clauseEx;
            	}
            	cnt153++;
                }
                loop153: ;	/* Jump to here if this rule does not match */
            }

            // OracleDML.g:599:39: ( conditional_insert_else_part )?
            {
                ANTLR_UINT32 alt154=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ELSE:
                    	{
                    		alt154=1;
                    	}
                        break;
                }

                switch (alt154)
                {
            	case 1:
            	    // OracleDML.g:599:39: conditional_insert_else_part
            	    {
            	        this->followPush(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause5905);
            	        conditional_insert_else_part446=conditional_insert_else_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconditional_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            conditional_insert_else_part446_last = conditional_insert_else_part446.tree.get();
            	            stream_conditional_insert_else_part.add(conditional_insert_else_part446.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: conditional_insert_when_part, all_key, first_key, conditional_insert_else_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 600:9: -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
            {
            	// OracleDML.g:600:12: ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(CONDITIONAL_INSERT, "CONDITIONAL_INSERT"), root_1);
            	// OracleDML.g:600:33: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:600:42: ( first_key )?
            	if ( stream_first_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_first_key.nextTree());
            	}
            	stream_first_key.reset();

            	if ( !(stream_conditional_insert_when_part.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "conditional_insert_when_part empty" );
            		goto ruleconditional_insert_clauseEx;
            	}
            	while ( stream_conditional_insert_when_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_conditional_insert_when_part.nextTree());
            	}
            	stream_conditional_insert_when_part.reset();

            	// OracleDML.g:600:83: ( conditional_insert_else_part )?
            	if ( stream_conditional_insert_else_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_conditional_insert_else_part.nextTree());
            	}
            	stream_conditional_insert_else_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconditional_insert_clauseEx; /* Prevent compiler warnings */
    ruleconditional_insert_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end conditional_insert_clause */

/**
 * $ANTLR start conditional_insert_when_part
 * OracleDML.g:603:1: conditional_insert_when_part : when_key condition then_key ( multi_table_element )+ -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ ) ;
 */
OracleDML::conditional_insert_when_part_return
OracleDML::conditional_insert_when_part()
{
    OracleDML::conditional_insert_when_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::when_key_return when_key447;
    ImplTraits::TreeTypePtr::pointer when_key447_last = NULL;
    OracleDML::condition_return condition448;
    ImplTraits::TreeTypePtr::pointer condition448_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key449;
    ImplTraits::TreeTypePtr::pointer then_key449_last = NULL;
    OracleDML::multi_table_element_return multi_table_element450;
    ImplTraits::TreeTypePtr::pointer multi_table_element450_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_then_key(get_psrstate()->get_treeAdaptor(), "rule then_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");
    RewriteRuleSubtreeStream<ImplTraits> stream_multi_table_element(get_psrstate()->get_treeAdaptor(), "rule multi_table_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_when_key(get_psrstate()->get_treeAdaptor(), "rule when_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:604:5: ( when_key condition then_key ( multi_table_element )+ -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ ) )
        // OracleDML.g:604:10: when_key condition then_key ( multi_table_element )+
        {
            this->followPush(FOLLOW_when_key_in_conditional_insert_when_part5953);
            when_key447=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_insert_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                when_key447_last = when_key447.tree.get();
                stream_when_key.add(when_key447.tree);
            }

            this->followPush(FOLLOW_condition_in_conditional_insert_when_part5955);
            condition448=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_insert_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition448_last = condition448.tree.get();
                stream_condition.add(condition448.tree);
            }

            this->followPush(FOLLOW_then_key_in_conditional_insert_when_part5957);
            then_key449=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_insert_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                then_key449_last = then_key449.tree.get();
                stream_then_key.add(then_key449.tree);
            }

            // OracleDML.g:604:38: ( multi_table_element )+
            {
                int cnt155=0;

                for (;;)
                {
                    ANTLR_UINT32 alt155=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_INTO:
            		{
            			alt155=1;
            		}
            	    break;

            	}

            	switch (alt155)
            	{
            	    case 1:
            	        // OracleDML.g:604:38: multi_table_element
            	        {
            	            this->followPush(FOLLOW_multi_table_element_in_conditional_insert_when_part5959);
            	            multi_table_element450=multi_table_element();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleconditional_insert_when_partEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) 
            	            {
            	                multi_table_element450_last = multi_table_element450.tree.get();
            	                stream_multi_table_element.add(multi_table_element450.tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt155 >= 1 )
            		{
            		    goto loop155;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleconditional_insert_when_partEx;
            	}
            	cnt155++;
                }
                loop155: ;	/* Jump to here if this rule does not match */
            }

            // AST REWRITE
            // elements: condition, when_key, multi_table_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 605:9: -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ )
            {
            	// OracleDML.g:605:12: ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_when_key.nextNode(), root_1);
            	// OracleDML.g:605:23: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	if ( !(stream_multi_table_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "multi_table_element empty" );
            		goto ruleconditional_insert_when_partEx;
            	}
            	while ( stream_multi_table_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_multi_table_element.nextTree());
            	}
            	stream_multi_table_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconditional_insert_when_partEx; /* Prevent compiler warnings */
    ruleconditional_insert_when_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end conditional_insert_when_part */

/**
 * $ANTLR start conditional_insert_else_part
 * OracleDML.g:608:1: conditional_insert_else_part : else_key ^ ( multi_table_element )+ ;
 */
OracleDML::conditional_insert_else_part_return
OracleDML::conditional_insert_else_part()
{
    OracleDML::conditional_insert_else_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::else_key_return else_key451;
    ImplTraits::TreeTypePtr::pointer else_key451_last = NULL;
    OracleDML::multi_table_element_return multi_table_element452;
    ImplTraits::TreeTypePtr::pointer multi_table_element452_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:609:5: ( else_key ^ ( multi_table_element )+ )
        // OracleDML.g:609:10: else_key ^ ( multi_table_element )+
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_else_key_in_conditional_insert_else_part6003);
            else_key451=else_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditional_insert_else_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(else_key451.tree, root_0);

            // OracleDML.g:609:20: ( multi_table_element )+
            {
                int cnt156=0;

                for (;;)
                {
                    ANTLR_UINT32 alt156=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_INTO:
            		{
            			alt156=1;
            		}
            	    break;

            	}

            	switch (alt156)
            	{
            	    case 1:
            	        // OracleDML.g:609:20: multi_table_element
            	        {
            	            this->followPush(FOLLOW_multi_table_element_in_conditional_insert_else_part6006);
            	            multi_table_element452=multi_table_element();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleconditional_insert_else_partEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multi_table_element452.tree);


            	        }
            	        break;

            	    default:

            		if ( cnt156 >= 1 )
            		{
            		    goto loop156;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleconditional_insert_else_partEx;
            	}
            	cnt156++;
                }
                loop156: ;	/* Jump to here if this rule does not match */
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconditional_insert_else_partEx; /* Prevent compiler warnings */
    ruleconditional_insert_else_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end conditional_insert_else_part */

/**
 * $ANTLR start insert_into_clause
 * OracleDML.g:612:1: insert_into_clause : into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) ) ;
 */
OracleDML::insert_into_clause_return
OracleDML::insert_into_clause()
{
    OracleDML::insert_into_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN455 = NULL;
    ImplTraits::CommonTokenType const* COMMA457 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN459 = NULL;
    OracleDML_OracleDMLKeys::into_key_return into_key453;
    ImplTraits::TreeTypePtr::pointer into_key453_last = NULL;
    OracleDML::general_table_ref_return general_table_ref454;
    ImplTraits::TreeTypePtr::pointer general_table_ref454_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name456;
    ImplTraits::TreeTypePtr::pointer column_name456_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name458;
    ImplTraits::TreeTypePtr::pointer column_name458_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN455_tree;
    ImplTraits::TreeTypePtr COMMA457_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN459_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_general_table_ref(get_psrstate()->get_treeAdaptor(), "rule general_table_ref");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_key(get_psrstate()->get_treeAdaptor(), "rule into_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:613:5: ( into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) ) )
        // OracleDML.g:613:10: into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
        {
            this->followPush(FOLLOW_into_key_in_insert_into_clause6027);
            into_key453=into_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinsert_into_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                into_key453_last = into_key453.tree.get();
                stream_into_key.add(into_key453.tree);
            }

            this->followPush(FOLLOW_general_table_ref_in_insert_into_clause6029);
            general_table_ref454=general_table_ref();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinsert_into_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                general_table_ref454_last = general_table_ref454.tree.get();
                stream_general_table_ref.add(general_table_ref454.tree);
            }

            // OracleDML.g:614:9: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            {
                ANTLR_UINT32 alt158=2;
                switch ( this->LA(1) )
                {
                    case LEFT_PAREN:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case DELIMITED_ID:
                    		    case INTRODUCER:
                    		    case REGULAR_ID:
                    		    	{
                    		    		alt158=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt158)
                {
            	case 1:
            	    // OracleDML.g:614:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN455 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_insert_into_clause6041);
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_into_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN455);


            	        this->followPush(FOLLOW_column_name_in_insert_into_clause6043);
            	        column_name456=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_into_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name456_last = column_name456.tree.get();
            	            stream_column_name.add(column_name456.tree);
            	        }

            	        // OracleDML.g:614:33: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt157=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt157=1;
            	            	}
            	                break;

            	            }

            	            switch (alt157)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:614:34: COMMA column_name
            	        	    {
            	        	        COMMA457 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_insert_into_clause6046);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinsert_into_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA457);


            	        	        this->followPush(FOLLOW_column_name_in_insert_into_clause6048);
            	        	        column_name458=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleinsert_into_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name458_last = column_name458.tree.get();
            	        	            stream_column_name.add(column_name458.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop157;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop157: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN459 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_insert_into_clause6052);
            	        if  (this->hasException())
            	        {
            	            goto ruleinsert_into_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN459);


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: general_table_ref, column_name, into_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 615:9: -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) )
            {
            	// OracleDML.g:615:12: ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_into_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_general_table_ref.nextTree());
            	// OracleDML.g:615:41: ^( COLUMNS ( column_name )* )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(COLUMNS, "COLUMNS"), root_2);
            	// OracleDML.g:615:51: ( column_name )*
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleinsert_into_clauseEx; /* Prevent compiler warnings */
    ruleinsert_into_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end insert_into_clause */

/**
 * $ANTLR start values_clause
 * OracleDML.g:618:1: values_clause : values_key ^ ( expression_list | record_name ) ;
 */
OracleDML::values_clause_return
OracleDML::values_clause()
{
    OracleDML::values_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::values_key_return values_key460;
    ImplTraits::TreeTypePtr::pointer values_key460_last = NULL;
    OracleDML::expression_list_return expression_list461;
    ImplTraits::TreeTypePtr::pointer expression_list461_last = NULL;
    OracleDML_OracleDMLCommons::record_name_return record_name462;
    ImplTraits::TreeTypePtr::pointer record_name462_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:619:5: ( values_key ^ ( expression_list | record_name ) )
        // OracleDML.g:619:10: values_key ^ ( expression_list | record_name )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_values_key_in_values_clause6097);
            values_key460=values_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevalues_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(values_key460.tree, root_0);

            // OracleDML.g:619:22: ( expression_list | record_name )
            {
                ANTLR_UINT32 alt159=2;
                switch ( this->LA(1) )
                {
                case LEFT_PAREN:
                	{
                		alt159=1;
                	}
                    break;
                case BINDVAR:
                case COLON:
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt159=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 159 );
                    ex->set_state( 0 );


                    goto rulevalues_clauseEx;

                }

                switch (alt159)
                {
            	case 1:
            	    // OracleDML.g:619:23: expression_list
            	    {
            	        this->followPush(FOLLOW_expression_list_in_values_clause6101);
            	        expression_list461=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevalues_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_list461.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:619:41: record_name
            	    {
            	        this->followPush(FOLLOW_record_name_in_values_clause6105);
            	        record_name462=record_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevalues_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, record_name462.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulevalues_clauseEx; /* Prevent compiler warnings */
    rulevalues_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end values_clause */

/**
 * $ANTLR start merge_statement
 * OracleDML.g:623:1: merge_statement : merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_insert_seq | ( when_key not_key matched_key )=> merge_insert_update_seq )? ( error_logging_clause )? -> ^( merge_key tableview_name ( table_alias )? ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_insert_seq )? ( merge_insert_update_seq )? ( error_logging_clause )? ) ;
 */
OracleDML::merge_statement_return
OracleDML::merge_statement()
{
    OracleDML::merge_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN470 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN472 = NULL;
    OracleDML_OracleDMLKeys::merge_key_return merge_key463;
    ImplTraits::TreeTypePtr::pointer merge_key463_last = NULL;
    OracleDML_OracleDMLKeys::into_key_return into_key464;
    ImplTraits::TreeTypePtr::pointer into_key464_last = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name465;
    ImplTraits::TreeTypePtr::pointer tableview_name465_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias466;
    ImplTraits::TreeTypePtr::pointer table_alias466_last = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key467;
    ImplTraits::TreeTypePtr::pointer using_key467_last = NULL;
    OracleDML::selected_tableview_return selected_tableview468;
    ImplTraits::TreeTypePtr::pointer selected_tableview468_last = NULL;
    OracleDML_OracleDMLKeys::on_key_return on_key469;
    ImplTraits::TreeTypePtr::pointer on_key469_last = NULL;
    OracleDML::condition_return condition471;
    ImplTraits::TreeTypePtr::pointer condition471_last = NULL;
    OracleDML::merge_update_insert_seq_return merge_update_insert_seq473;
    ImplTraits::TreeTypePtr::pointer merge_update_insert_seq473_last = NULL;
    OracleDML::merge_insert_update_seq_return merge_insert_update_seq474;
    ImplTraits::TreeTypePtr::pointer merge_insert_update_seq474_last = NULL;
    OracleDML::error_logging_clause_return error_logging_clause475;
    ImplTraits::TreeTypePtr::pointer error_logging_clause475_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN470_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN472_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_using_key(get_psrstate()->get_treeAdaptor(), "rule using_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_key(get_psrstate()->get_treeAdaptor(), "rule into_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_insert_update_seq(get_psrstate()->get_treeAdaptor(), "rule merge_insert_update_seq");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_key(get_psrstate()->get_treeAdaptor(), "rule merge_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_clause(get_psrstate()->get_treeAdaptor(), "rule error_logging_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_condition(get_psrstate()->get_treeAdaptor(), "rule condition");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_selected_tableview(get_psrstate()->get_treeAdaptor(), "rule selected_tableview");
    RewriteRuleSubtreeStream<ImplTraits> stream_on_key(get_psrstate()->get_treeAdaptor(), "rule on_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_update_insert_seq(get_psrstate()->get_treeAdaptor(), "rule merge_update_insert_seq");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:624:5: ( merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_insert_seq | ( when_key not_key matched_key )=> merge_insert_update_seq )? ( error_logging_clause )? -> ^( merge_key tableview_name ( table_alias )? ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_insert_seq )? ( merge_insert_update_seq )? ( error_logging_clause )? ) )
        // OracleDML.g:624:10: merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_insert_seq | ( when_key not_key matched_key )=> merge_insert_update_seq )? ( error_logging_clause )?
        {
            this->followPush(FOLLOW_merge_key_in_merge_statement6127);
            merge_key463=merge_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                merge_key463_last = merge_key463.tree.get();
                stream_merge_key.add(merge_key463.tree);
            }

            this->followPush(FOLLOW_into_key_in_merge_statement6129);
            into_key464=into_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                into_key464_last = into_key464.tree.get();
                stream_into_key.add(into_key464.tree);
            }

            this->followPush(FOLLOW_tableview_name_in_merge_statement6131);
            tableview_name465=tableview_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                tableview_name465_last = tableview_name465.tree.get();
                stream_tableview_name.add(tableview_name465.tree);
            }

            // OracleDML.g:624:44: ( table_alias )?
            {
                ANTLR_UINT32 alt160=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    	{
                    		alt160=1;
                    	}
                        break;
                }

                switch (alt160)
                {
            	case 1:
            	    // OracleDML.g:624:44: table_alias
            	    {
            	        this->followPush(FOLLOW_table_alias_in_merge_statement6133);
            	        table_alias466=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias466_last = table_alias466.tree.get();
            	            stream_table_alias.add(table_alias466.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_using_key_in_merge_statement6144);
            using_key467=using_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                using_key467_last = using_key467.tree.get();
                stream_using_key.add(using_key467.tree);
            }

            this->followPush(FOLLOW_selected_tableview_in_merge_statement6146);
            selected_tableview468=selected_tableview();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                selected_tableview468_last = selected_tableview468.tree.get();
                stream_selected_tableview.add(selected_tableview468.tree);
            }

            this->followPush(FOLLOW_on_key_in_merge_statement6148);
            on_key469=on_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                on_key469_last = on_key469.tree.get();
                stream_on_key.add(on_key469.tree);
            }

            LEFT_PAREN470 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_merge_statement6150);
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN470);


            this->followPush(FOLLOW_condition_in_merge_statement6152);
            condition471=condition();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                condition471_last = condition471.tree.get();
                stream_condition.add(condition471.tree);
            }

            RIGHT_PAREN472 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_merge_statement6154);
            if  (this->hasException())
            {
                goto rulemerge_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN472);


            // OracleDML.g:626:9: ( ( when_key matched_key )=> merge_update_insert_seq | ( when_key not_key matched_key )=> merge_insert_update_seq )?
            {
                ANTLR_UINT32 alt161=3;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHEN:
                    	{
                    		{
                    		    ANTLR_UINT32 LA161_1 = this->LA(2);
                    		    if ( (LA161_1 == REGULAR_ID) && (this->msynpred( antlr3::ClassForwarder<synpred20_OracleDML>() )))
                    		    {
                    		        alt161=1;
                    		    }
                    		    else if ( (LA161_1 == SQL92_RESERVED_NOT) && (this->msynpred( antlr3::ClassForwarder<synpred21_OracleDML>() )))
                    		    {
                    		        alt161=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt161)
                {
            	case 1:
            	    // OracleDML.g:627:13: ( when_key matched_key )=> merge_update_insert_seq
            	    {
            	        this->followPush(FOLLOW_merge_update_insert_seq_in_merge_statement6186);
            	        merge_update_insert_seq473=merge_update_insert_seq();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_update_insert_seq473_last = merge_update_insert_seq473.tree.get();
            	            stream_merge_update_insert_seq.add(merge_update_insert_seq473.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:629:13: ( when_key not_key matched_key )=> merge_insert_update_seq
            	    {
            	        this->followPush(FOLLOW_merge_insert_update_seq_in_merge_statement6220);
            	        merge_insert_update_seq474=merge_insert_update_seq();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_insert_update_seq474_last = merge_insert_update_seq474.tree.get();
            	            stream_merge_insert_update_seq.add(merge_insert_update_seq474.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:631:9: ( error_logging_clause )?
            {
                ANTLR_UINT32 alt162=2;
                {
                    ANTLR_UINT32 LA162_0 = this->LA(1);
                    if ( (LA162_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "LOG")))
                    {
                        alt162=1;
                    }
                }
                switch (alt162)
                {
            	case 1:
            	    // OracleDML.g:631:9: error_logging_clause
            	    {
            	        this->followPush(FOLLOW_error_logging_clause_in_merge_statement6241);
            	        error_logging_clause475=error_logging_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_clause475_last = error_logging_clause475.tree.get();
            	            stream_error_logging_clause.add(error_logging_clause475.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: merge_insert_update_seq, selected_tableview, merge_key, using_key, tableview_name, table_alias, error_logging_clause, merge_update_insert_seq, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 632:9: -> ^( merge_key tableview_name ( table_alias )? ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_insert_seq )? ( merge_insert_update_seq )? ( error_logging_clause )? )
            {
            	// OracleDML.g:632:12: ^( merge_key tableview_name ( table_alias )? ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_insert_seq )? ( merge_insert_update_seq )? ( error_logging_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_merge_key.nextNode(), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_tableview_name.nextTree());
            	// OracleDML.g:632:39: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	// OracleDML.g:632:52: ^( using_key selected_tableview ^( LOGIC_EXPR condition ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_using_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_selected_tableview.nextTree());
            	// OracleDML.g:632:83: ^( LOGIC_EXPR condition )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_condition.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:633:13: ( merge_update_insert_seq )?
            	if ( stream_merge_update_insert_seq.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_update_insert_seq.nextTree());
            	}
            	stream_merge_update_insert_seq.reset();

            	// OracleDML.g:633:38: ( merge_insert_update_seq )?
            	if ( stream_merge_insert_update_seq.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_insert_update_seq.nextTree());
            	}
            	stream_merge_insert_update_seq.reset();

            	// OracleDML.g:634:13: ( error_logging_clause )?
            	if ( stream_error_logging_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_clause.nextTree());
            	}
            	stream_error_logging_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_statementEx; /* Prevent compiler warnings */
    rulemerge_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_statement */

/**
 * $ANTLR start merge_update_insert_seq
 * OracleDML.g:638:1: merge_update_insert_seq : merge_update_clause ( merge_insert_clause )? ;
 */
OracleDML::merge_update_insert_seq_return
OracleDML::merge_update_insert_seq()
{
    OracleDML::merge_update_insert_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::merge_update_clause_return merge_update_clause476;
    ImplTraits::TreeTypePtr::pointer merge_update_clause476_last = NULL;
    OracleDML::merge_insert_clause_return merge_insert_clause477;
    ImplTraits::TreeTypePtr::pointer merge_insert_clause477_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:639:5: ( merge_update_clause ( merge_insert_clause )? )
        // OracleDML.g:639:7: merge_update_clause ( merge_insert_clause )?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_merge_update_clause_in_merge_update_insert_seq6324);
            merge_update_clause476=merge_update_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_insert_seqEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_update_clause476.tree);


            // OracleDML.g:639:27: ( merge_insert_clause )?
            {
                ANTLR_UINT32 alt163=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHEN:
                    	{
                    		alt163=1;
                    	}
                        break;
                }

                switch (alt163)
                {
            	case 1:
            	    // OracleDML.g:639:27: merge_insert_clause
            	    {
            	        this->followPush(FOLLOW_merge_insert_clause_in_merge_update_insert_seq6326);
            	        merge_insert_clause477=merge_insert_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_insert_seqEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_insert_clause477.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_update_insert_seqEx; /* Prevent compiler warnings */
    rulemerge_update_insert_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_update_insert_seq */

/**
 * $ANTLR start merge_insert_update_seq
 * OracleDML.g:642:1: merge_insert_update_seq : merge_insert_clause ( merge_update_clause )? ;
 */
OracleDML::merge_insert_update_seq_return
OracleDML::merge_insert_update_seq()
{
    OracleDML::merge_insert_update_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::merge_insert_clause_return merge_insert_clause478;
    ImplTraits::TreeTypePtr::pointer merge_insert_clause478_last = NULL;
    OracleDML::merge_update_clause_return merge_update_clause479;
    ImplTraits::TreeTypePtr::pointer merge_update_clause479_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:643:5: ( merge_insert_clause ( merge_update_clause )? )
        // OracleDML.g:643:7: merge_insert_clause ( merge_update_clause )?
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_merge_insert_clause_in_merge_insert_update_seq6344);
            merge_insert_clause478=merge_insert_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_update_seqEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_insert_clause478.tree);


            // OracleDML.g:643:27: ( merge_update_clause )?
            {
                ANTLR_UINT32 alt164=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHEN:
                    	{
                    		alt164=1;
                    	}
                        break;
                }

                switch (alt164)
                {
            	case 1:
            	    // OracleDML.g:643:27: merge_update_clause
            	    {
            	        this->followPush(FOLLOW_merge_update_clause_in_merge_insert_update_seq6346);
            	        merge_update_clause479=merge_update_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_update_seqEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, merge_update_clause479.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_insert_update_seqEx; /* Prevent compiler warnings */
    rulemerge_insert_update_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_insert_update_seq */

/**
 * $ANTLR start merge_update_clause
 * OracleDML.g:646:1: merge_update_clause : when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )? -> ^( MERGE_UPDATE[$when_key.start] matched_key then_key update_key set_key ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) ;
 */
OracleDML::merge_update_clause_return
OracleDML::merge_update_clause()
{
    OracleDML::merge_update_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA486 = NULL;
    OracleDML_OracleDMLKeys::when_key_return when_key480;
    ImplTraits::TreeTypePtr::pointer when_key480_last = NULL;
    OracleDML_OracleDMLKeys::matched_key_return matched_key481;
    ImplTraits::TreeTypePtr::pointer matched_key481_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key482;
    ImplTraits::TreeTypePtr::pointer then_key482_last = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key483;
    ImplTraits::TreeTypePtr::pointer update_key483_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key484;
    ImplTraits::TreeTypePtr::pointer set_key484_last = NULL;
    OracleDML::merge_element_return merge_element485;
    ImplTraits::TreeTypePtr::pointer merge_element485_last = NULL;
    OracleDML::merge_element_return merge_element487;
    ImplTraits::TreeTypePtr::pointer merge_element487_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause488;
    ImplTraits::TreeTypePtr::pointer where_clause488_last = NULL;
    OracleDML::merge_update_delete_part_return merge_update_delete_part489;
    ImplTraits::TreeTypePtr::pointer merge_update_delete_part489_last = NULL;
    ImplTraits::TreeTypePtr COMMA486_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_then_key(get_psrstate()->get_treeAdaptor(), "rule then_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_update_delete_part(get_psrstate()->get_treeAdaptor(), "rule merge_update_delete_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_merge_element(get_psrstate()->get_treeAdaptor(), "rule merge_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_where_clause(get_psrstate()->get_treeAdaptor(), "rule where_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_set_key(get_psrstate()->get_treeAdaptor(), "rule set_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_update_key(get_psrstate()->get_treeAdaptor(), "rule update_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_when_key(get_psrstate()->get_treeAdaptor(), "rule when_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_matched_key(get_psrstate()->get_treeAdaptor(), "rule matched_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:647:5: ( when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )? -> ^( MERGE_UPDATE[$when_key.start] matched_key then_key update_key set_key ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) )
        // OracleDML.g:647:10: when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )?
        {
            this->followPush(FOLLOW_when_key_in_merge_update_clause6367);
            when_key480=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                when_key480_last = when_key480.tree.get();
                stream_when_key.add(when_key480.tree);
            }

            this->followPush(FOLLOW_matched_key_in_merge_update_clause6369);
            matched_key481=matched_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                matched_key481_last = matched_key481.tree.get();
                stream_matched_key.add(matched_key481.tree);
            }

            this->followPush(FOLLOW_then_key_in_merge_update_clause6371);
            then_key482=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                then_key482_last = then_key482.tree.get();
                stream_then_key.add(then_key482.tree);
            }

            this->followPush(FOLLOW_update_key_in_merge_update_clause6373);
            update_key483=update_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                update_key483_last = update_key483.tree.get();
                stream_update_key.add(update_key483.tree);
            }

            this->followPush(FOLLOW_set_key_in_merge_update_clause6375);
            set_key484=set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                set_key484_last = set_key484.tree.get();
                stream_set_key.add(set_key484.tree);
            }

            this->followPush(FOLLOW_merge_element_in_merge_update_clause6386);
            merge_element485=merge_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                merge_element485_last = merge_element485.tree.get();
                stream_merge_element.add(merge_element485.tree);
            }

            // OracleDML.g:648:23: ( COMMA merge_element )*

            for (;;)
            {
                ANTLR_UINT32 alt165=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt165=1;
                	}
                    break;

                }

                switch (alt165)
                {
            	case 1:
            	    // OracleDML.g:648:24: COMMA merge_element
            	    {
            	        COMMA486 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_merge_update_clause6389);
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA486);


            	        this->followPush(FOLLOW_merge_element_in_merge_update_clause6391);
            	        merge_element487=merge_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_element487_last = merge_element487.tree.get();
            	            stream_merge_element.add(merge_element487.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop165;	/* break out of the loop */
            	    break;
                }
            }
            loop165: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:649:9: ( where_clause )?
            {
                ANTLR_UINT32 alt166=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt166=1;
                    	}
                        break;
                }

                switch (alt166)
                {
            	case 1:
            	    // OracleDML.g:649:9: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_merge_update_clause6403);
            	        where_clause488=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            where_clause488_last = where_clause488.tree.get();
            	            stream_where_clause.add(where_clause488.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:649:23: ( merge_update_delete_part )?
            {
                ANTLR_UINT32 alt167=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_DELETE:
                    	{
                    		alt167=1;
                    	}
                        break;
                }

                switch (alt167)
                {
            	case 1:
            	    // OracleDML.g:649:23: merge_update_delete_part
            	    {
            	        this->followPush(FOLLOW_merge_update_delete_part_in_merge_update_clause6406);
            	        merge_update_delete_part489=merge_update_delete_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_update_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            merge_update_delete_part489_last = merge_update_delete_part489.tree.get();
            	            stream_merge_update_delete_part.add(merge_update_delete_part489.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: update_key, matched_key, merge_update_delete_part, merge_element, then_key, set_key, where_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 650:9: -> ^( MERGE_UPDATE[$when_key.start] matched_key then_key update_key set_key ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
            {
            	// OracleDML.g:650:11: ^( MERGE_UPDATE[$when_key.start] matched_key then_key update_key set_key ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MERGE_UPDATE, (when_key480.start)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_matched_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_then_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_update_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_set_key.nextTree());
            	if ( !(stream_merge_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "merge_element empty" );
            		goto rulemerge_update_clauseEx;
            	}
            	while ( stream_merge_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_element.nextTree());
            	}
            	stream_merge_element.reset();

            	// OracleDML.g:650:98: ( where_clause )?
            	if ( stream_where_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_where_clause.nextTree());
            	}
            	stream_where_clause.reset();

            	// OracleDML.g:650:112: ( merge_update_delete_part )?
            	if ( stream_merge_update_delete_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_merge_update_delete_part.nextTree());
            	}
            	stream_merge_update_delete_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_update_clauseEx; /* Prevent compiler warnings */
    rulemerge_update_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_update_clause */

/**
 * $ANTLR start merge_element
 * OracleDML.g:653:1: merge_element : column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) ;
 */
OracleDML::merge_element_return
OracleDML::merge_element()
{
    OracleDML::merge_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP491 = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name490;
    ImplTraits::TreeTypePtr::pointer column_name490_last = NULL;
    OracleDML::expression_return expression492;
    ImplTraits::TreeTypePtr::pointer expression492_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP491_tree;
    RewriteRuleTokenStream<ImplTraits> stream_EQUALS_OP(get_psrstate()->get_treeAdaptor(), "token EQUALS_OP");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:654:5: ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) )
        // OracleDML.g:654:10: column_name EQUALS_OP expression
        {
            this->followPush(FOLLOW_column_name_in_merge_element6458);
            column_name490=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                column_name490_last = column_name490.tree.get();
                stream_column_name.add(column_name490.tree);
            }

            EQUALS_OP491 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_merge_element6460);
            if  (this->hasException())
            {
                goto rulemerge_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_EQUALS_OP.add(EQUALS_OP491);


            this->followPush(FOLLOW_expression_in_merge_element6462);
            expression492=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression492_last = expression492.tree.get();
                stream_expression.add(expression492.tree);
            }

            // AST REWRITE
            // elements: expression, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 655:9: -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
            {
            	// OracleDML.g:655:12: ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ASSIGN, EQUALS_OP491), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	// OracleDML.g:655:45: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_elementEx; /* Prevent compiler warnings */
    rulemerge_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_element */

/**
 * $ANTLR start merge_update_delete_part
 * OracleDML.g:658:1: merge_update_delete_part : delete_key ^ where_clause ;
 */
OracleDML::merge_update_delete_part_return
OracleDML::merge_update_delete_part()
{
    OracleDML::merge_update_delete_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::delete_key_return delete_key493;
    ImplTraits::TreeTypePtr::pointer delete_key493_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause494;
    ImplTraits::TreeTypePtr::pointer where_clause494_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:659:5: ( delete_key ^ where_clause )
        // OracleDML.g:659:10: delete_key ^ where_clause
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_delete_key_in_merge_update_delete_part6505);
            delete_key493=delete_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_delete_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(delete_key493.tree, root_0);

            this->followPush(FOLLOW_where_clause_in_merge_update_delete_part6508);
            where_clause494=where_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_update_delete_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, where_clause494.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_update_delete_partEx; /* Prevent compiler warnings */
    rulemerge_update_delete_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_update_delete_part */

/**
 * $ANTLR start merge_insert_clause
 * OracleDML.g:662:1: merge_insert_clause : when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )? -> ^( MERGE_INSERT[$when_key.start] not_key matched_key then_key insert_key ^( COLUMNS ( column_name )* ) values_key expression_list ( where_clause )? ) ;
 */
OracleDML::merge_insert_clause_return
OracleDML::merge_insert_clause()
{
    OracleDML::merge_insert_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN500 = NULL;
    ImplTraits::CommonTokenType const* COMMA502 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN504 = NULL;
    OracleDML_OracleDMLKeys::when_key_return when_key495;
    ImplTraits::TreeTypePtr::pointer when_key495_last = NULL;
    OracleDML_OracleDMLKeys::not_key_return not_key496;
    ImplTraits::TreeTypePtr::pointer not_key496_last = NULL;
    OracleDML_OracleDMLKeys::matched_key_return matched_key497;
    ImplTraits::TreeTypePtr::pointer matched_key497_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key498;
    ImplTraits::TreeTypePtr::pointer then_key498_last = NULL;
    OracleDML_OracleDMLKeys::insert_key_return insert_key499;
    ImplTraits::TreeTypePtr::pointer insert_key499_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name501;
    ImplTraits::TreeTypePtr::pointer column_name501_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name503;
    ImplTraits::TreeTypePtr::pointer column_name503_last = NULL;
    OracleDML_OracleDMLKeys::values_key_return values_key505;
    ImplTraits::TreeTypePtr::pointer values_key505_last = NULL;
    OracleDML::expression_list_return expression_list506;
    ImplTraits::TreeTypePtr::pointer expression_list506_last = NULL;
    OracleDML_OracleDMLCommons::where_clause_return where_clause507;
    ImplTraits::TreeTypePtr::pointer where_clause507_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN500_tree;
    ImplTraits::TreeTypePtr COMMA502_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN504_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_then_key(get_psrstate()->get_treeAdaptor(), "rule then_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_list(get_psrstate()->get_treeAdaptor(), "rule expression_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_insert_key(get_psrstate()->get_treeAdaptor(), "rule insert_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_values_key(get_psrstate()->get_treeAdaptor(), "rule values_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_where_clause(get_psrstate()->get_treeAdaptor(), "rule where_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_not_key(get_psrstate()->get_treeAdaptor(), "rule not_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_when_key(get_psrstate()->get_treeAdaptor(), "rule when_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_matched_key(get_psrstate()->get_treeAdaptor(), "rule matched_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:663:5: ( when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )? -> ^( MERGE_INSERT[$when_key.start] not_key matched_key then_key insert_key ^( COLUMNS ( column_name )* ) values_key expression_list ( where_clause )? ) )
        // OracleDML.g:663:10: when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )?
        {
            this->followPush(FOLLOW_when_key_in_merge_insert_clause6528);
            when_key495=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                when_key495_last = when_key495.tree.get();
                stream_when_key.add(when_key495.tree);
            }

            this->followPush(FOLLOW_not_key_in_merge_insert_clause6530);
            not_key496=not_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                not_key496_last = not_key496.tree.get();
                stream_not_key.add(not_key496.tree);
            }

            this->followPush(FOLLOW_matched_key_in_merge_insert_clause6532);
            matched_key497=matched_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                matched_key497_last = matched_key497.tree.get();
                stream_matched_key.add(matched_key497.tree);
            }

            this->followPush(FOLLOW_then_key_in_merge_insert_clause6534);
            then_key498=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                then_key498_last = then_key498.tree.get();
                stream_then_key.add(then_key498.tree);
            }

            this->followPush(FOLLOW_insert_key_in_merge_insert_clause6536);
            insert_key499=insert_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                insert_key499_last = insert_key499.tree.get();
                stream_insert_key.add(insert_key499.tree);
            }

            // OracleDML.g:664:9: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            {
                ANTLR_UINT32 alt169=2;
                switch ( this->LA(1) )
                {
                    case LEFT_PAREN:
                    	{
                    		alt169=1;
                    	}
                        break;
                }

                switch (alt169)
                {
            	case 1:
            	    // OracleDML.g:664:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN500 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_merge_insert_clause6548);
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN500);


            	        this->followPush(FOLLOW_column_name_in_merge_insert_clause6550);
            	        column_name501=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name501_last = column_name501.tree.get();
            	            stream_column_name.add(column_name501.tree);
            	        }

            	        // OracleDML.g:664:33: ( COMMA column_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt168=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt168=1;
            	            	}
            	                break;

            	            }

            	            switch (alt168)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:664:34: COMMA column_name
            	        	    {
            	        	        COMMA502 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_merge_insert_clause6553);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemerge_insert_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA502);


            	        	        this->followPush(FOLLOW_column_name_in_merge_insert_clause6555);
            	        	        column_name503=column_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemerge_insert_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            column_name503_last = column_name503.tree.get();
            	        	            stream_column_name.add(column_name503.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop168;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop168: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN504 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_merge_insert_clause6559);
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN504);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_values_key_in_merge_insert_clause6571);
            values_key505=values_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                values_key505_last = values_key505.tree.get();
                stream_values_key.add(values_key505.tree);
            }

            this->followPush(FOLLOW_expression_list_in_merge_insert_clause6573);
            expression_list506=expression_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemerge_insert_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression_list506_last = expression_list506.tree.get();
                stream_expression_list.add(expression_list506.tree);
            }

            // OracleDML.g:665:36: ( where_clause )?
            {
                ANTLR_UINT32 alt170=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_WHERE:
                    	{
                    		alt170=1;
                    	}
                        break;
                }

                switch (alt170)
                {
            	case 1:
            	    // OracleDML.g:665:36: where_clause
            	    {
            	        this->followPush(FOLLOW_where_clause_in_merge_insert_clause6575);
            	        where_clause507=where_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemerge_insert_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            where_clause507_last = where_clause507.tree.get();
            	            stream_where_clause.add(where_clause507.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: where_clause, expression_list, insert_key, not_key, matched_key, column_name, values_key, then_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 666:9: -> ^( MERGE_INSERT[$when_key.start] not_key matched_key then_key insert_key ^( COLUMNS ( column_name )* ) values_key expression_list ( where_clause )? )
            {
            	// OracleDML.g:666:12: ^( MERGE_INSERT[$when_key.start] not_key matched_key then_key insert_key ^( COLUMNS ( column_name )* ) values_key expression_list ( where_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MERGE_INSERT, (when_key495.start)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_not_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_matched_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_then_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_insert_key.nextTree());
            	// OracleDML.g:666:84: ^( COLUMNS ( column_name )* )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(COLUMNS, "COLUMNS"), root_2);
            	// OracleDML.g:666:94: ( column_name )*
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_values_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_list.nextTree());
            	// OracleDML.g:666:135: ( where_clause )?
            	if ( stream_where_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_where_clause.nextTree());
            	}
            	stream_where_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemerge_insert_clauseEx; /* Prevent compiler warnings */
    rulemerge_insert_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end merge_insert_clause */

/**
 * $ANTLR start selected_tableview
 * OracleDML.g:669:1: selected_tableview : ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )? -> ^( SELECTED_TABLEVIEW ( tableview_name )? ( select_statement )? ( table_alias )? ) ;
 */
OracleDML::selected_tableview_return
OracleDML::selected_tableview()
{
    OracleDML::selected_tableview_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN509 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN511 = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name508;
    ImplTraits::TreeTypePtr::pointer tableview_name508_last = NULL;
    OracleDML::select_statement_return select_statement510;
    ImplTraits::TreeTypePtr::pointer select_statement510_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias512;
    ImplTraits::TreeTypePtr::pointer table_alias512_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN509_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN511_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:670:5: ( ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )? -> ^( SELECTED_TABLEVIEW ( tableview_name )? ( select_statement )? ( table_alias )? ) )
        // OracleDML.g:670:10: ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )?
        {
            // OracleDML.g:670:10: ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN )
            {
                ANTLR_UINT32 alt171=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                	{
                		alt171=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt171=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 171 );
                    ex->set_state( 0 );


                    goto ruleselected_tableviewEx;

                }

                switch (alt171)
                {
            	case 1:
            	    // OracleDML.g:670:12: tableview_name
            	    {
            	        this->followPush(FOLLOW_tableview_name_in_selected_tableview6636);
            	        tableview_name508=tableview_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            tableview_name508_last = tableview_name508.tree.get();
            	            stream_tableview_name.add(tableview_name508.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:670:29: LEFT_PAREN select_statement RIGHT_PAREN
            	    {
            	        LEFT_PAREN509 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_selected_tableview6640);
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN509);


            	        this->followPush(FOLLOW_select_statement_in_selected_tableview6642);
            	        select_statement510=select_statement();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            select_statement510_last = select_statement510.tree.get();
            	            stream_select_statement.add(select_statement510.tree);
            	        }

            	        RIGHT_PAREN511 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_selected_tableview6644);
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN511);


            	    }
            	    break;

                }
            }

            // OracleDML.g:670:70: ( table_alias )?
            {
                ANTLR_UINT32 alt172=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    	{
                    		alt172=1;
                    	}
                        break;
                }

                switch (alt172)
                {
            	case 1:
            	    // OracleDML.g:670:70: table_alias
            	    {
            	        this->followPush(FOLLOW_table_alias_in_selected_tableview6647);
            	        table_alias512=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleselected_tableviewEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias512_last = table_alias512.tree.get();
            	            stream_table_alias.add(table_alias512.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: tableview_name, table_alias, select_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 671:9: -> ^( SELECTED_TABLEVIEW ( tableview_name )? ( select_statement )? ( table_alias )? )
            {
            	// OracleDML.g:671:12: ^( SELECTED_TABLEVIEW ( tableview_name )? ( select_statement )? ( table_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECTED_TABLEVIEW, "SELECTED_TABLEVIEW"), root_1);
            	// OracleDML.g:671:33: ( tableview_name )?
            	if ( stream_tableview_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_tableview_name.nextTree());
            	}
            	stream_tableview_name.reset();

            	// OracleDML.g:671:49: ( select_statement )?
            	if ( stream_select_statement.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_statement.nextTree());
            	}
            	stream_select_statement.reset();

            	// OracleDML.g:671:67: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleselected_tableviewEx; /* Prevent compiler warnings */
    ruleselected_tableviewEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end selected_tableview */

/**
 * $ANTLR start lock_table_statement
 * OracleDML.g:676:1: lock_table_statement : lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )? -> ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) ;
 */
OracleDML::lock_table_statement_return
OracleDML::lock_table_statement()
{
    OracleDML::lock_table_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA516 = NULL;
    OracleDML_OracleDMLKeys::lock_key_return lock_key513;
    ImplTraits::TreeTypePtr::pointer lock_key513_last = NULL;
    OracleDML_OracleDMLKeys::table_key_return table_key514;
    ImplTraits::TreeTypePtr::pointer table_key514_last = NULL;
    OracleDML::lock_table_element_return lock_table_element515;
    ImplTraits::TreeTypePtr::pointer lock_table_element515_last = NULL;
    OracleDML::lock_table_element_return lock_table_element517;
    ImplTraits::TreeTypePtr::pointer lock_table_element517_last = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key518;
    ImplTraits::TreeTypePtr::pointer in_key518_last = NULL;
    OracleDML::lock_mode_return lock_mode519;
    ImplTraits::TreeTypePtr::pointer lock_mode519_last = NULL;
    OracleDML_OracleDMLKeys::mode_key_return mode_key520;
    ImplTraits::TreeTypePtr::pointer mode_key520_last = NULL;
    OracleDML::wait_nowait_part_return wait_nowait_part521;
    ImplTraits::TreeTypePtr::pointer wait_nowait_part521_last = NULL;
    ImplTraits::TreeTypePtr COMMA516_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_lock_table_element(get_psrstate()->get_treeAdaptor(), "rule lock_table_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_mode_key(get_psrstate()->get_treeAdaptor(), "rule mode_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_key(get_psrstate()->get_treeAdaptor(), "rule table_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_lock_mode(get_psrstate()->get_treeAdaptor(), "rule lock_mode");
    RewriteRuleSubtreeStream<ImplTraits> stream_wait_nowait_part(get_psrstate()->get_treeAdaptor(), "rule wait_nowait_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_lock_key(get_psrstate()->get_treeAdaptor(), "rule lock_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:677:5: ( lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )? -> ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) )
        // OracleDML.g:677:10: lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )?
        {
            this->followPush(FOLLOW_lock_key_in_lock_table_statement6693);
            lock_key513=lock_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                lock_key513_last = lock_key513.tree.get();
                stream_lock_key.add(lock_key513.tree);
            }

            this->followPush(FOLLOW_table_key_in_lock_table_statement6695);
            table_key514=table_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                table_key514_last = table_key514.tree.get();
                stream_table_key.add(table_key514.tree);
            }

            this->followPush(FOLLOW_lock_table_element_in_lock_table_statement6706);
            lock_table_element515=lock_table_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                lock_table_element515_last = lock_table_element515.tree.get();
                stream_lock_table_element.add(lock_table_element515.tree);
            }

            // OracleDML.g:678:28: ( COMMA lock_table_element )*

            for (;;)
            {
                ANTLR_UINT32 alt173=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt173=1;
                	}
                    break;

                }

                switch (alt173)
                {
            	case 1:
            	    // OracleDML.g:678:29: COMMA lock_table_element
            	    {
            	        COMMA516 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_lock_table_statement6709);
            	        if  (this->hasException())
            	        {
            	            goto rulelock_table_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA516);


            	        this->followPush(FOLLOW_lock_table_element_in_lock_table_statement6711);
            	        lock_table_element517=lock_table_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelock_table_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            lock_table_element517_last = lock_table_element517.tree.get();
            	            stream_lock_table_element.add(lock_table_element517.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop173;	/* break out of the loop */
            	    break;
                }
            }
            loop173: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_in_key_in_lock_table_statement6724);
            in_key518=in_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                in_key518_last = in_key518.tree.get();
                stream_in_key.add(in_key518.tree);
            }

            this->followPush(FOLLOW_lock_mode_in_lock_table_statement6726);
            lock_mode519=lock_mode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                lock_mode519_last = lock_mode519.tree.get();
                stream_lock_mode.add(lock_mode519.tree);
            }

            this->followPush(FOLLOW_mode_key_in_lock_table_statement6728);
            mode_key520=mode_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                mode_key520_last = mode_key520.tree.get();
                stream_mode_key.add(mode_key520.tree);
            }

            // OracleDML.g:679:35: ( wait_nowait_part )?
            {
                ANTLR_UINT32 alt174=2;
                {
                    ANTLR_UINT32 LA174_0 = this->LA(1);
                    if ( (LA174_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "WAIT")))
                    {
                        alt174=1;
                    }
                    else if ( (LA174_0 == PLSQL_RESERVED_NOWAIT))
                    {
                        alt174=1;
                    }
                }
                switch (alt174)
                {
            	case 1:
            	    // OracleDML.g:679:35: wait_nowait_part
            	    {
            	        this->followPush(FOLLOW_wait_nowait_part_in_lock_table_statement6730);
            	        wait_nowait_part521=wait_nowait_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelock_table_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            wait_nowait_part521_last = wait_nowait_part521.tree.get();
            	            stream_wait_nowait_part.add(wait_nowait_part521.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: wait_nowait_part, lock_table_element, lock_key, lock_mode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 680:9: -> ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
            {
            	// OracleDML.g:680:12: ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_lock_key.nextNode(), root_1);
            	if ( !(stream_lock_table_element.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "lock_table_element empty" );
            		goto rulelock_table_statementEx;
            	}
            	while ( stream_lock_table_element.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_lock_table_element.nextTree());
            	}
            	stream_lock_table_element.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_lock_mode.nextTree());
            	// OracleDML.g:680:53: ( wait_nowait_part )?
            	if ( stream_wait_nowait_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_wait_nowait_part.nextTree());
            	}
            	stream_wait_nowait_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelock_table_statementEx; /* Prevent compiler warnings */
    rulelock_table_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end lock_table_statement */

/**
 * $ANTLR start wait_nowait_part
 * OracleDML.g:683:1: wait_nowait_part : ( wait_key expression -> ^( wait_key ^( EXPR expression ) ) | nowait_key );
 */
OracleDML::wait_nowait_part_return
OracleDML::wait_nowait_part()
{
    OracleDML::wait_nowait_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::wait_key_return wait_key522;
    ImplTraits::TreeTypePtr::pointer wait_key522_last = NULL;
    OracleDML::expression_return expression523;
    ImplTraits::TreeTypePtr::pointer expression523_last = NULL;
    OracleDML_OracleDMLKeys::nowait_key_return nowait_key524;
    ImplTraits::TreeTypePtr::pointer nowait_key524_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_wait_key(get_psrstate()->get_treeAdaptor(), "rule wait_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:684:5: ( wait_key expression -> ^( wait_key ^( EXPR expression ) ) | nowait_key )

            ANTLR_UINT32 alt175;

            alt175=2;

            {
                ANTLR_UINT32 LA175_0 = this->LA(1);
                if ( (LA175_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "WAIT")))
                {
                    alt175=1;
                }
                else if ( (LA175_0 == PLSQL_RESERVED_NOWAIT))
                {
                    alt175=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 175 );
                    ex->set_state( 0 );


                    goto rulewait_nowait_partEx;

                }
            }
            switch (alt175)
            {
        	case 1:
        	    // OracleDML.g:684:10: wait_key expression
        	    {
        	        this->followPush(FOLLOW_wait_key_in_wait_nowait_part6773);
        	        wait_key522=wait_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewait_nowait_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            wait_key522_last = wait_key522.tree.get();
        	            stream_wait_key.add(wait_key522.tree);
        	        }

        	        this->followPush(FOLLOW_expression_in_wait_nowait_part6775);
        	        expression523=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewait_nowait_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            expression523_last = expression523.tree.get();
        	            stream_expression.add(expression523.tree);
        	        }

        	        // AST REWRITE
        	        // elements: wait_key, expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 684:30: -> ^( wait_key ^( EXPR expression ) )
        	        {
        	        	// OracleDML.g:684:33: ^( wait_key ^( EXPR expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_wait_key.nextNode(), root_1);
        	        	// OracleDML.g:684:44: ^( EXPR expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:685:10: nowait_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_nowait_key_in_wait_nowait_part6798);
        	        nowait_key524=nowait_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewait_nowait_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nowait_key524.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulewait_nowait_partEx; /* Prevent compiler warnings */
    rulewait_nowait_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end wait_nowait_part */

/**
 * $ANTLR start lock_table_element
 * OracleDML.g:690:1: lock_table_element : tableview_name ( partition_extension_clause )? -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) ;
 */
OracleDML::lock_table_element_return
OracleDML::lock_table_element()
{
    OracleDML::lock_table_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLCommons::tableview_name_return tableview_name525;
    ImplTraits::TreeTypePtr::pointer tableview_name525_last = NULL;
    OracleDML_OracleDMLCommons::partition_extension_clause_return partition_extension_clause526;
    ImplTraits::TreeTypePtr::pointer partition_extension_clause526_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_partition_extension_clause(get_psrstate()->get_treeAdaptor(), "rule partition_extension_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:691:5: ( tableview_name ( partition_extension_clause )? -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) )
        // OracleDML.g:691:10: tableview_name ( partition_extension_clause )?
        {
            this->followPush(FOLLOW_tableview_name_in_lock_table_element6820);
            tableview_name525=tableview_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelock_table_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                tableview_name525_last = tableview_name525.tree.get();
                stream_tableview_name.add(tableview_name525.tree);
            }

            // OracleDML.g:691:25: ( partition_extension_clause )?
            {
                ANTLR_UINT32 alt176=2;
                {
                    ANTLR_UINT32 LA176_0 = this->LA(1);
                    if ( (LA176_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "PARTITION"))||((toUpper(LT(1)->getText()) == "SUBPARTITION")))))
                    {
                        alt176=1;
                    }
                }
                switch (alt176)
                {
            	case 1:
            	    // OracleDML.g:691:25: partition_extension_clause
            	    {
            	        this->followPush(FOLLOW_partition_extension_clause_in_lock_table_element6822);
            	        partition_extension_clause526=partition_extension_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelock_table_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            partition_extension_clause526_last = partition_extension_clause526.tree.get();
            	            stream_partition_extension_clause.add(partition_extension_clause526.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: tableview_name, partition_extension_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 692:9: -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
            {
            	// OracleDML.g:692:12: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOCK_TABLE_ELEMENT, "LOCK_TABLE_ELEMENT"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_tableview_name.nextTree());
            	// OracleDML.g:692:48: ( partition_extension_clause )?
            	if ( stream_partition_extension_clause.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_partition_extension_clause.nextTree());
            	}
            	stream_partition_extension_clause.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelock_table_elementEx; /* Prevent compiler warnings */
    rulelock_table_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end lock_table_element */

/**
 * $ANTLR start lock_mode
 * OracleDML.g:695:1: lock_mode : ( row_key share_key | row_key exclusive_key | share_key ( update_key )? | share_key row_key exclusive_key | exclusive_key );
 */
OracleDML::lock_mode_return
OracleDML::lock_mode()
{
    OracleDML::lock_mode_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::row_key_return row_key527;
    ImplTraits::TreeTypePtr::pointer row_key527_last = NULL;
    OracleDML_OracleDMLKeys::share_key_return share_key528;
    ImplTraits::TreeTypePtr::pointer share_key528_last = NULL;
    OracleDML_OracleDMLKeys::row_key_return row_key529;
    ImplTraits::TreeTypePtr::pointer row_key529_last = NULL;
    OracleDML_OracleDMLKeys::exclusive_key_return exclusive_key530;
    ImplTraits::TreeTypePtr::pointer exclusive_key530_last = NULL;
    OracleDML_OracleDMLKeys::share_key_return share_key531;
    ImplTraits::TreeTypePtr::pointer share_key531_last = NULL;
    OracleDML_OracleDMLKeys::update_key_return update_key532;
    ImplTraits::TreeTypePtr::pointer update_key532_last = NULL;
    OracleDML_OracleDMLKeys::share_key_return share_key533;
    ImplTraits::TreeTypePtr::pointer share_key533_last = NULL;
    OracleDML_OracleDMLKeys::row_key_return row_key534;
    ImplTraits::TreeTypePtr::pointer row_key534_last = NULL;
    OracleDML_OracleDMLKeys::exclusive_key_return exclusive_key535;
    ImplTraits::TreeTypePtr::pointer exclusive_key535_last = NULL;
    OracleDML_OracleDMLKeys::exclusive_key_return exclusive_key536;
    ImplTraits::TreeTypePtr::pointer exclusive_key536_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:696:5: ( row_key share_key | row_key exclusive_key | share_key ( update_key )? | share_key row_key exclusive_key | exclusive_key )

            ANTLR_UINT32 alt178;

            alt178=5;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case PLSQL_RESERVED_SHARE:
            			{
            				alt178=1;
            			}
            		    break;
            		case PLSQL_RESERVED_EXCLUSIVE:
            			{
            				alt178=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 178 );
            		    ex->set_state( 1 );


            		    goto rulelock_modeEx;

            		}

            	}
                break;
            case PLSQL_RESERVED_SHARE:
            	{
            		switch ( this->LA(2) )
            		{
            		case PLSQL_RESERVED_MODE:
            		case SQL92_RESERVED_UPDATE:
            			{
            				alt178=3;
            			}
            		    break;
            		case REGULAR_ID:
            			{
            				alt178=4;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 178 );
            		    ex->set_state( 2 );


            		    goto rulelock_modeEx;

            		}

            	}
                break;
            case PLSQL_RESERVED_EXCLUSIVE:
            	{
            		alt178=5;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 178 );
                ex->set_state( 0 );


                goto rulelock_modeEx;

            }

            switch (alt178)
            {
        	case 1:
        	    // OracleDML.g:696:10: row_key share_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_row_key_in_lock_mode6862);
        	        row_key527=row_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, row_key527.tree);


        	        this->followPush(FOLLOW_share_key_in_lock_mode6864);
        	        share_key528=share_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, share_key528.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:697:10: row_key exclusive_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_row_key_in_lock_mode6875);
        	        row_key529=row_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, row_key529.tree);


        	        this->followPush(FOLLOW_exclusive_key_in_lock_mode6877);
        	        exclusive_key530=exclusive_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, exclusive_key530.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:698:10: share_key ( update_key )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_share_key_in_lock_mode6888);
        	        share_key531=share_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, share_key531.tree);


        	        // OracleDML.g:698:20: ( update_key )?
        	        {
        	            ANTLR_UINT32 alt177=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_UPDATE:
        	                	{
        	                		alt177=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt177)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:698:20: update_key
        	        	    {
        	        	        this->followPush(FOLLOW_update_key_in_lock_mode6890);
        	        	        update_key532=update_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelock_modeEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, update_key532.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:699:10: share_key row_key exclusive_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_share_key_in_lock_mode6902);
        	        share_key533=share_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, share_key533.tree);


        	        this->followPush(FOLLOW_row_key_in_lock_mode6904);
        	        row_key534=row_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, row_key534.tree);


        	        this->followPush(FOLLOW_exclusive_key_in_lock_mode6906);
        	        exclusive_key535=exclusive_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, exclusive_key535.tree);


        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:700:10: exclusive_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_exclusive_key_in_lock_mode6917);
        	        exclusive_key536=exclusive_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelock_modeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, exclusive_key536.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulelock_modeEx; /* Prevent compiler warnings */
    rulelock_modeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end lock_mode */

/**
 * $ANTLR start general_table_ref
 * OracleDML.g:706:1: general_table_ref : ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )? -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? ) ;
 */
OracleDML::general_table_ref_return
OracleDML::general_table_ref()
{
    OracleDML::general_table_ref_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN539 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN541 = NULL;
    OracleDML::dml_table_expression_clause_return dml_table_expression_clause537;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause537_last = NULL;
    OracleDML_OracleDMLKeys::only_key_return only_key538;
    ImplTraits::TreeTypePtr::pointer only_key538_last = NULL;
    OracleDML::dml_table_expression_clause_return dml_table_expression_clause540;
    ImplTraits::TreeTypePtr::pointer dml_table_expression_clause540_last = NULL;
    OracleDML_OracleDMLCommons::table_alias_return table_alias542;
    ImplTraits::TreeTypePtr::pointer table_alias542_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN539_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN541_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_dml_table_expression_clause(get_psrstate()->get_treeAdaptor(), "rule dml_table_expression_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_alias(get_psrstate()->get_treeAdaptor(), "rule table_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_only_key(get_psrstate()->get_treeAdaptor(), "rule only_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:707:5: ( ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )? -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? ) )
        // OracleDML.g:707:10: ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )?
        {
            // OracleDML.g:707:10: ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN )
            {
                ANTLR_UINT32 alt179=2;
                switch ( this->LA(1) )
                {
                case DELIMITED_ID:
                case INTRODUCER:
                case LEFT_PAREN:
                case SQL92_RESERVED_TABLE:
                case SQL92_RESERVED_THE:
                	{
                		alt179=1;
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA179_5 = this->LA(2);
                		    if ( (!( ((toUpper(LT(1)->getText()) == "ONLY")) )))
                		    {
                		        alt179=1;
                		    }
                		    else if ( ((toUpper(LT(1)->getText()) == "ONLY")))
                		    {
                		        alt179=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 179 );
                		        ex->set_state( 5 );


                		        goto rulegeneral_table_refEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 179 );
                    ex->set_state( 0 );


                    goto rulegeneral_table_refEx;

                }

                switch (alt179)
                {
            	case 1:
            	    // OracleDML.g:707:15: dml_table_expression_clause
            	    {
            	        this->followPush(FOLLOW_dml_table_expression_clause_in_general_table_ref6945);
            	        dml_table_expression_clause537=dml_table_expression_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            dml_table_expression_clause537_last = dml_table_expression_clause537.tree.get();
            	            stream_dml_table_expression_clause.add(dml_table_expression_clause537.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:708:14: only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN
            	    {
            	        this->followPush(FOLLOW_only_key_in_general_table_ref6960);
            	        only_key538=only_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            only_key538_last = only_key538.tree.get();
            	            stream_only_key.add(only_key538.tree);
            	        }

            	        LEFT_PAREN539 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_general_table_ref6962);
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN539);


            	        this->followPush(FOLLOW_dml_table_expression_clause_in_general_table_ref6964);
            	        dml_table_expression_clause540=dml_table_expression_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            dml_table_expression_clause540_last = dml_table_expression_clause540.tree.get();
            	            stream_dml_table_expression_clause.add(dml_table_expression_clause540.tree);
            	        }

            	        RIGHT_PAREN541 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_general_table_ref6966);
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN541);


            	    }
            	    break;

                }
            }

            // OracleDML.g:709:14: ( table_alias )?
            {
                ANTLR_UINT32 alt180=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		alt180=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA180_2 = this->LA(2);
                    		    if ( (!( ((((toUpper(LT(1)->getText()) == "RETURN"))||((toUpper(LT(1)->getText()) == "SET"))||((toUpper(LT(1)->getText()) == "LOG"))||((toUpper(LT(1)->getText()) == "RETURNING")))) )))
                    		    {
                    		        alt180=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt180)
                {
            	case 1:
            	    // OracleDML.g:709:14: table_alias
            	    {
            	        this->followPush(FOLLOW_table_alias_in_general_table_ref6981);
            	        table_alias542=table_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulegeneral_table_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_alias542_last = table_alias542.tree.get();
            	            stream_table_alias.add(table_alias542.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: only_key, table_alias, dml_table_expression_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 710:9: -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? )
            {
            	// OracleDML.g:710:12: ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_REF, "TABLE_REF"), root_1);
            	// OracleDML.g:710:24: ( table_alias )?
            	if ( stream_table_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_table_alias.nextTree());
            	}
            	stream_table_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_dml_table_expression_clause.nextTree());
            	// OracleDML.g:710:65: ( only_key )?
            	if ( stream_only_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_only_key.nextTree());
            	}
            	stream_only_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulegeneral_table_refEx; /* Prevent compiler warnings */
    rulegeneral_table_refEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end general_table_ref */

/**
 * $ANTLR start static_returning_clause
 * OracleDML.g:713:1: static_returning_clause : ( returning_key | return_key ) expression ( COMMA expression )* into_clause -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause ) ;
 */
OracleDML::static_returning_clause_return
OracleDML::static_returning_clause()
{
    OracleDML::static_returning_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA546 = NULL;
    OracleDML_OracleDMLKeys::returning_key_return returning_key543;
    ImplTraits::TreeTypePtr::pointer returning_key543_last = NULL;
    OracleDML_OracleDMLKeys::return_key_return return_key544;
    ImplTraits::TreeTypePtr::pointer return_key544_last = NULL;
    OracleDML::expression_return expression545;
    ImplTraits::TreeTypePtr::pointer expression545_last = NULL;
    OracleDML::expression_return expression547;
    ImplTraits::TreeTypePtr::pointer expression547_last = NULL;
    OracleDML_OracleDMLCommons::into_clause_return into_clause548;
    ImplTraits::TreeTypePtr::pointer into_clause548_last = NULL;
    ImplTraits::TreeTypePtr COMMA546_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_returning_key(get_psrstate()->get_treeAdaptor(), "rule returning_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_return_key(get_psrstate()->get_treeAdaptor(), "rule return_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_into_clause(get_psrstate()->get_treeAdaptor(), "rule into_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:714:5: ( ( returning_key | return_key ) expression ( COMMA expression )* into_clause -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause ) )
        // OracleDML.g:714:10: ( returning_key | return_key ) expression ( COMMA expression )* into_clause
        {
            // OracleDML.g:714:10: ( returning_key | return_key )
            {
                ANTLR_UINT32 alt181=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA181_1 = this->LA(2);
                		    if ( ((toUpper(LT(1)->getText()) == "RETURNING")))
                		    {
                		        alt181=1;
                		    }
                		    else if ( ((toUpper(LT(1)->getText()) == "RETURN")))
                		    {
                		        alt181=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 181 );
                		        ex->set_state( 1 );


                		        goto rulestatic_returning_clauseEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 181 );
                    ex->set_state( 0 );


                    goto rulestatic_returning_clauseEx;

                }

                switch (alt181)
                {
            	case 1:
            	    // OracleDML.g:714:11: returning_key
            	    {
            	        this->followPush(FOLLOW_returning_key_in_static_returning_clause7025);
            	        returning_key543=returning_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestatic_returning_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            returning_key543_last = returning_key543.tree.get();
            	            stream_returning_key.add(returning_key543.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:714:25: return_key
            	    {
            	        this->followPush(FOLLOW_return_key_in_static_returning_clause7027);
            	        return_key544=return_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestatic_returning_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            return_key544_last = return_key544.tree.get();
            	            stream_return_key.add(return_key544.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_expression_in_static_returning_clause7030);
            expression545=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestatic_returning_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression545_last = expression545.tree.get();
                stream_expression.add(expression545.tree);
            }

            // OracleDML.g:714:48: ( COMMA expression )*

            for (;;)
            {
                ANTLR_UINT32 alt182=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt182=1;
                	}
                    break;

                }

                switch (alt182)
                {
            	case 1:
            	    // OracleDML.g:714:49: COMMA expression
            	    {
            	        COMMA546 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_static_returning_clause7033);
            	        if  (this->hasException())
            	        {
            	            goto rulestatic_returning_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA546);


            	        this->followPush(FOLLOW_expression_in_static_returning_clause7035);
            	        expression547=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestatic_returning_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression547_last = expression547.tree.get();
            	            stream_expression.add(expression547.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop182;	/* break out of the loop */
            	    break;
                }
            }
            loop182: ; /* Jump out to here if this rule does not match */


            this->followPush(FOLLOW_into_clause_in_static_returning_clause7048);
            into_clause548=into_clause();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestatic_returning_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                into_clause548_last = into_clause548.tree.get();
                stream_into_clause.add(into_clause548.tree);
            }

            // AST REWRITE
            // elements: into_clause, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 716:9: -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause )
            {
            	// OracleDML.g:716:12: ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(STATIC_RETURNING, "STATIC_RETURNING"), root_1);
            	if ( !(stream_expression.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "expression empty" );
            		goto rulestatic_returning_clauseEx;
            	}
            	while ( stream_expression.hasNext() ) {
            		// OracleDML.g:716:31: ^( EXPR expression )
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_expression.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_into_clause.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestatic_returning_clauseEx; /* Prevent compiler warnings */
    rulestatic_returning_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end static_returning_clause */

/**
 * $ANTLR start error_logging_clause
 * OracleDML.g:719:1: error_logging_clause : log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )? -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? ) ;
 */
OracleDML::error_logging_clause_return
OracleDML::error_logging_clause()
{
    OracleDML::error_logging_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::log_key_return log_key549;
    ImplTraits::TreeTypePtr::pointer log_key549_last = NULL;
    OracleDML_OracleDMLKeys::errors_key_return errors_key550;
    ImplTraits::TreeTypePtr::pointer errors_key550_last = NULL;
    OracleDML::error_logging_into_part_return error_logging_into_part551;
    ImplTraits::TreeTypePtr::pointer error_logging_into_part551_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper552;
    ImplTraits::TreeTypePtr::pointer expression_wrapper552_last = NULL;
    OracleDML::error_logging_reject_part_return error_logging_reject_part553;
    ImplTraits::TreeTypePtr::pointer error_logging_reject_part553_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_reject_part(get_psrstate()->get_treeAdaptor(), "rule error_logging_reject_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_wrapper(get_psrstate()->get_treeAdaptor(), "rule expression_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_errors_key(get_psrstate()->get_treeAdaptor(), "rule errors_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_error_logging_into_part(get_psrstate()->get_treeAdaptor(), "rule error_logging_into_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_log_key(get_psrstate()->get_treeAdaptor(), "rule log_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:720:5: ( log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )? -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? ) )
        // OracleDML.g:720:10: log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )?
        {
            this->followPush(FOLLOW_log_key_in_error_logging_clause7091);
            log_key549=log_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                log_key549_last = log_key549.tree.get();
                stream_log_key.add(log_key549.tree);
            }

            this->followPush(FOLLOW_errors_key_in_error_logging_clause7093);
            errors_key550=errors_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                errors_key550_last = errors_key550.tree.get();
                stream_errors_key.add(errors_key550.tree);
            }

            // OracleDML.g:721:9: ( error_logging_into_part )?
            {
                ANTLR_UINT32 alt183=2;
                alt183 = cdfa183.predict(this, this->get_rec(), this->get_istream(), cdfa183 );
                if  (this->hasException())
                {
                    goto ruleerror_logging_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                switch (alt183)
                {
            	case 1:
            	    // OracleDML.g:721:9: error_logging_into_part
            	    {
            	        this->followPush(FOLLOW_error_logging_into_part_in_error_logging_clause7104);
            	        error_logging_into_part551=error_logging_into_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_into_part551_last = error_logging_into_part551.tree.get();
            	            stream_error_logging_into_part.add(error_logging_into_part551.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:722:9: ( ( LEFT_PAREN )=> expression_wrapper )?
            {
                ANTLR_UINT32 alt184=2;
                {
                    ANTLR_UINT32 LA184_0 = this->LA(1);
                    if ( (LA184_0 == SQL92_RESERVED_CURSOR) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == SQL92_RESERVED_NOT) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == MINUS_SIGN) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == PLUS_SIGN) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == SQL92_RESERVED_PRIOR) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "REJECT")))
                    {
                        {
                            ANTLR_UINT32 LA184_7 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                            {
                                alt184=1;
                            }
                        }
                    }
                    else if ( (LA184_0 == SQL92_RESERVED_DISTINCT) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == SQL92_RESERVED_ALL) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == DELIMITED_ID) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == SQL92_RESERVED_CASE) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == SQL92_RESERVED_EXISTS) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == SQL92_RESERVED_ANY) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == PLSQL_NON_RESERVED_CAST) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == INTRODUCER) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == BINDVAR) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == COLON) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == APPROXIMATE_NUM_LIT || LA184_0 == EXACT_NUM_LIT || LA184_0 == UNSIGNED_INTEGER) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == SQL92_RESERVED_DATE) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (((LA184_0 >= CHAR_STRING) && (LA184_0 <= CHAR_STRING_PERL)) || LA184_0 == NATIONAL_CHAR_STRING_LIT) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == SQL92_RESERVED_NULL) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == SQL92_RESERVED_TRUE) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == SQL92_RESERVED_FALSE) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == SQL92_RESERVED_DEFAULT) && (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                    {
                        alt184=1;
                    }
                    else if ( (LA184_0 == LEFT_PAREN))
                    {
                        {
                            ANTLR_UINT32 LA184_25 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred22_OracleDML>() )))
                            {
                                alt184=1;
                            }
                        }
                    }
                }
                switch (alt184)
                {
            	case 1:
            	    // OracleDML.g:722:10: ( LEFT_PAREN )=> expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_error_logging_clause7121);
            	        expression_wrapper552=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_wrapper552_last = expression_wrapper552.tree.get();
            	            stream_expression_wrapper.add(expression_wrapper552.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:723:9: ( error_logging_reject_part )?
            {
                ANTLR_UINT32 alt185=2;
                {
                    ANTLR_UINT32 LA185_0 = this->LA(1);
                    if ( (LA185_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "REJECT")))
                    {
                        alt185=1;
                    }
                }
                switch (alt185)
                {
            	case 1:
            	    // OracleDML.g:723:9: error_logging_reject_part
            	    {
            	        this->followPush(FOLLOW_error_logging_reject_part_in_error_logging_clause7133);
            	        error_logging_reject_part553=error_logging_reject_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            error_logging_reject_part553_last = error_logging_reject_part553.tree.get();
            	            stream_error_logging_reject_part.add(error_logging_reject_part553.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression_wrapper, log_key, error_logging_into_part, error_logging_reject_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 724:9: -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? )
            {
            	// OracleDML.g:724:12: ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_log_key.nextNode(), root_1);
            	// OracleDML.g:724:22: ( error_logging_into_part )?
            	if ( stream_error_logging_into_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_into_part.nextTree());
            	}
            	stream_error_logging_into_part.reset();

            	// OracleDML.g:724:47: ( expression_wrapper )?
            	if ( stream_expression_wrapper.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_wrapper.nextTree());
            	}
            	stream_expression_wrapper.reset();

            	// OracleDML.g:724:67: ( error_logging_reject_part )?
            	if ( stream_error_logging_reject_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_error_logging_reject_part.nextTree());
            	}
            	stream_error_logging_reject_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleerror_logging_clauseEx; /* Prevent compiler warnings */
    ruleerror_logging_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end error_logging_clause */

/**
 * $ANTLR start error_logging_into_part
 * OracleDML.g:727:1: error_logging_into_part : into_key ^ tableview_name ;
 */
OracleDML::error_logging_into_part_return
OracleDML::error_logging_into_part()
{
    OracleDML::error_logging_into_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::into_key_return into_key554;
    ImplTraits::TreeTypePtr::pointer into_key554_last = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name555;
    ImplTraits::TreeTypePtr::pointer tableview_name555_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:728:5: ( into_key ^ tableview_name )
        // OracleDML.g:728:10: into_key ^ tableview_name
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_into_key_in_error_logging_into_part7177);
            into_key554=into_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_into_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(into_key554.tree, root_0);

            this->followPush(FOLLOW_tableview_name_in_error_logging_into_part7180);
            tableview_name555=tableview_name();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_into_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, tableview_name555.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleerror_logging_into_partEx; /* Prevent compiler warnings */
    ruleerror_logging_into_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end error_logging_into_part */

/**
 * $ANTLR start error_logging_reject_part
 * OracleDML.g:731:1: error_logging_reject_part : reject_key ^ limit_key ! ( ( unlimited_key )=> unlimited_key | expression_wrapper ) ;
 */
OracleDML::error_logging_reject_part_return
OracleDML::error_logging_reject_part()
{
    OracleDML::error_logging_reject_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::reject_key_return reject_key556;
    ImplTraits::TreeTypePtr::pointer reject_key556_last = NULL;
    OracleDML_OracleDMLKeys::limit_key_return limit_key557;
    ImplTraits::TreeTypePtr::pointer limit_key557_last = NULL;
    OracleDML_OracleDMLKeys::unlimited_key_return unlimited_key558;
    ImplTraits::TreeTypePtr::pointer unlimited_key558_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper559;
    ImplTraits::TreeTypePtr::pointer expression_wrapper559_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:732:5: ( reject_key ^ limit_key ! ( ( unlimited_key )=> unlimited_key | expression_wrapper ) )
        // OracleDML.g:732:10: reject_key ^ limit_key ! ( ( unlimited_key )=> unlimited_key | expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_reject_key_in_error_logging_reject_part7200);
            reject_key556=reject_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_reject_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(reject_key556.tree, root_0);

            this->followPush(FOLLOW_limit_key_in_error_logging_reject_part7203);
            limit_key557=limit_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleerror_logging_reject_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            // OracleDML.g:732:33: ( ( unlimited_key )=> unlimited_key | expression_wrapper )
            {
                ANTLR_UINT32 alt186=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA186_1 = this->LA(2);
                		    if ( (( (this->msynpred( antlr3::ClassForwarder<synpred23_OracleDML>() )) && ((toUpper(LT(1)->getText()) == "UNLIMITED")) )))
                		    {
                		        alt186=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt186=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 186 );
                		        ex->set_state( 1 );


                		        goto ruleerror_logging_reject_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt186=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 186 );
                    ex->set_state( 0 );


                    goto ruleerror_logging_reject_partEx;

                }

                switch (alt186)
                {
            	case 1:
            	    // OracleDML.g:732:34: ( unlimited_key )=> unlimited_key
            	    {
            	        this->followPush(FOLLOW_unlimited_key_in_error_logging_reject_part7211);
            	        unlimited_key558=unlimited_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_reject_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unlimited_key558.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:732:65: expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_error_logging_reject_part7213);
            	        expression_wrapper559=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleerror_logging_reject_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper559.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleerror_logging_reject_partEx; /* Prevent compiler warnings */
    ruleerror_logging_reject_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end error_logging_reject_part */

/**
 * $ANTLR start dml_table_expression_clause
 * OracleDML.g:735:1: dml_table_expression_clause : ( table_collection_expression -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) ) | LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN -> ^( TABLE_EXPRESSION ^( NESTED_SUBQUERY LEFT_PAREN ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN ) ) | tableview_name ( sample_clause )? -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) );
 */
OracleDML::dml_table_expression_clause_return
OracleDML::dml_table_expression_clause()
{
    OracleDML::dml_table_expression_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN561 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN564 = NULL;
    OracleDML::table_collection_expression_return table_collection_expression560;
    ImplTraits::TreeTypePtr::pointer table_collection_expression560_last = NULL;
    OracleDML::select_statement_return select_statement562;
    ImplTraits::TreeTypePtr::pointer select_statement562_last = NULL;
    OracleDML::subquery_restriction_clause_return subquery_restriction_clause563;
    ImplTraits::TreeTypePtr::pointer subquery_restriction_clause563_last = NULL;
    OracleDML_OracleDMLCommons::tableview_name_return tableview_name565;
    ImplTraits::TreeTypePtr::pointer tableview_name565_last = NULL;
    OracleDML::sample_clause_return sample_clause566;
    ImplTraits::TreeTypePtr::pointer sample_clause566_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN561_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN564_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_sample_clause(get_psrstate()->get_treeAdaptor(), "rule sample_clause");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_statement(get_psrstate()->get_treeAdaptor(), "rule select_statement");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_collection_expression(get_psrstate()->get_treeAdaptor(), "rule table_collection_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_tableview_name(get_psrstate()->get_treeAdaptor(), "rule tableview_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_restriction_clause(get_psrstate()->get_treeAdaptor(), "rule subquery_restriction_clause");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:736:5: ( table_collection_expression -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) ) | LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN -> ^( TABLE_EXPRESSION ^( NESTED_SUBQUERY LEFT_PAREN ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN ) ) | tableview_name ( sample_clause )? -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) )

            ANTLR_UINT32 alt189;

            alt189=3;

            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_TABLE:
            case SQL92_RESERVED_THE:
            	{
            		alt189=1;
            	}
                break;
            case LEFT_PAREN:
            	{
            		alt189=2;
            	}
                break;
            case DELIMITED_ID:
            case INTRODUCER:
            case REGULAR_ID:
            	{
            		alt189=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 189 );
                ex->set_state( 0 );


                goto ruledml_table_expression_clauseEx;

            }

            switch (alt189)
            {
        	case 1:
        	    // OracleDML.g:736:10: table_collection_expression
        	    {
        	        this->followPush(FOLLOW_table_collection_expression_in_dml_table_expression_clause7234);
        	        table_collection_expression560=table_collection_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            table_collection_expression560_last = table_collection_expression560.tree.get();
        	            stream_table_collection_expression.add(table_collection_expression560.tree);
        	        }

        	        // AST REWRITE
        	        // elements: table_collection_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 736:38: -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) )
        	        {
        	        	// OracleDML.g:736:41: ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_EXPRESSION, "TABLE_EXPRESSION"), root_1);
        	        	// OracleDML.g:736:60: ^( COLLECTION_MODE table_collection_expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(COLLECTION_MODE, "COLLECTION_MODE"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_table_collection_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:737:10: LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN
        	    {
        	        LEFT_PAREN561 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7257);
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN561);


        	        this->followPush(FOLLOW_select_statement_in_dml_table_expression_clause7259);
        	        select_statement562=select_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            select_statement562_last = select_statement562.tree.get();
        	            stream_select_statement.add(select_statement562.tree);
        	        }

        	        // OracleDML.g:737:38: ( subquery_restriction_clause )?
        	        {
        	            ANTLR_UINT32 alt187=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_WITH:
        	                	{
        	                		alt187=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt187)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:737:38: subquery_restriction_clause
        	        	    {
        	        	        this->followPush(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7261);
        	        	        subquery_restriction_clause563=subquery_restriction_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruledml_table_expression_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            subquery_restriction_clause563_last = subquery_restriction_clause563.tree.get();
        	        	            stream_subquery_restriction_clause.add(subquery_restriction_clause563.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN564 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7264);
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN564);


        	        // AST REWRITE
        	        // elements: subquery_restriction_clause, select_statement, RIGHT_PAREN, LEFT_PAREN
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 738:10: -> ^( TABLE_EXPRESSION ^( NESTED_SUBQUERY LEFT_PAREN ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN ) )
        	        {
        	        	// OracleDML.g:738:13: ^( TABLE_EXPRESSION ^( NESTED_SUBQUERY LEFT_PAREN ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_EXPRESSION, "TABLE_EXPRESSION"), root_1);
        	        	// OracleDML.g:738:32: ^( NESTED_SUBQUERY LEFT_PAREN ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) RIGHT_PAREN )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_SUBQUERY, "NESTED_SUBQUERY"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_LEFT_PAREN.nextNode());
        	        	// OracleDML.g:738:61: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SELECT_MODE, "SELECT_MODE"), root_3);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_select_statement.nextTree());
        	        	// OracleDML.g:738:92: ( subquery_restriction_clause )?
        	        	if ( stream_subquery_restriction_clause.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_subquery_restriction_clause.nextTree());
        	        	}
        	        	stream_subquery_restriction_clause.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_RIGHT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:739:10: tableview_name ( sample_clause )?
        	    {
        	        this->followPush(FOLLOW_tableview_name_in_dml_table_expression_clause7307);
        	        tableview_name565=tableview_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledml_table_expression_clauseEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            tableview_name565_last = tableview_name565.tree.get();
        	            stream_tableview_name.add(tableview_name565.tree);
        	        }

        	        // OracleDML.g:739:25: ( sample_clause )?
        	        {
        	            ANTLR_UINT32 alt188=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA188_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "SAMPLE")))
        	                		    {
        	                		        alt188=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt188)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:739:25: sample_clause
        	        	    {
        	        	        this->followPush(FOLLOW_sample_clause_in_dml_table_expression_clause7309);
        	        	        sample_clause566=sample_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruledml_table_expression_clauseEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            sample_clause566_last = sample_clause566.tree.get();
        	        	            stream_sample_clause.add(sample_clause566.tree);
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: sample_clause, tableview_name
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 739:40: -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) )
        	        {
        	        	// OracleDML.g:739:43: ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(TABLE_EXPRESSION, "TABLE_EXPRESSION"), root_1);
        	        	// OracleDML.g:739:62: ^( DIRECT_MODE tableview_name ( sample_clause )? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DIRECT_MODE, "DIRECT_MODE"), root_2);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_tableview_name.nextTree());
        	        	// OracleDML.g:739:91: ( sample_clause )?
        	        	if ( stream_sample_clause.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_sample_clause.nextTree());
        	        	}
        	        	stream_sample_clause.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
        	        	}
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruledml_table_expression_clauseEx; /* Prevent compiler warnings */
    ruledml_table_expression_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end dml_table_expression_clause */

/**
 * $ANTLR start table_collection_expression
 * OracleDML.g:742:1: table_collection_expression : ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN ) -> ^( EXPR ( subquery )? ( expression )? ) ;
 */
OracleDML::table_collection_expression_return
OracleDML::table_collection_expression()
{
    OracleDML::table_collection_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN569 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN571 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN572 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN574 = NULL;
    OracleDML_OracleDMLKeys::table_key_return table_key567;
    ImplTraits::TreeTypePtr::pointer table_key567_last = NULL;
    OracleDML_OracleDMLKeys::the_key_return the_key568;
    ImplTraits::TreeTypePtr::pointer the_key568_last = NULL;
    OracleDML::subquery_return subquery570;
    ImplTraits::TreeTypePtr::pointer subquery570_last = NULL;
    OracleDML::expression_return expression573;
    ImplTraits::TreeTypePtr::pointer expression573_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN569_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN571_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN572_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN574_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_table_key(get_psrstate()->get_treeAdaptor(), "rule table_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_the_key(get_psrstate()->get_treeAdaptor(), "rule the_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:743:5: ( ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN ) -> ^( EXPR ( subquery )? ( expression )? ) )
        // OracleDML.g:743:10: ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN )
        {
            // OracleDML.g:743:10: ( table_key | the_key )
            {
                ANTLR_UINT32 alt190=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_TABLE:
                	{
                		alt190=1;
                	}
                    break;
                case SQL92_RESERVED_THE:
                	{
                		alt190=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 190 );
                    ex->set_state( 0 );


                    goto ruletable_collection_expressionEx;

                }

                switch (alt190)
                {
            	case 1:
            	    // OracleDML.g:743:12: table_key
            	    {
            	        this->followPush(FOLLOW_table_key_in_table_collection_expression7347);
            	        table_key567=table_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            table_key567_last = table_key567.tree.get();
            	            stream_table_key.add(table_key567.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:743:24: the_key
            	    {
            	        this->followPush(FOLLOW_the_key_in_table_collection_expression7351);
            	        the_key568=the_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            the_key568_last = the_key568.tree.get();
            	            stream_the_key.add(the_key568.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:744:10: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN )
            {
                ANTLR_UINT32 alt191=2;
                switch ( this->LA(1) )
                {
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA191_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred24_OracleDML>() )))
                		    {
                		        alt191=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt191=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 191 );
                		        ex->set_state( 1 );


                		        goto ruletable_collection_expressionEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 191 );
                    ex->set_state( 0 );


                    goto ruletable_collection_expressionEx;

                }

                switch (alt191)
                {
            	case 1:
            	    // OracleDML.g:744:12: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
            	    {
            	        LEFT_PAREN569 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_table_collection_expression7379);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN569);


            	        this->followPush(FOLLOW_subquery_in_table_collection_expression7381);
            	        subquery570=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery570_last = subquery570.tree.get();
            	            stream_subquery.add(subquery570.tree);
            	        }

            	        RIGHT_PAREN571 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_table_collection_expression7383);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN571);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:745:12: LEFT_PAREN expression RIGHT_PAREN
            	    {
            	        LEFT_PAREN572 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_table_collection_expression7396);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN572);


            	        this->followPush(FOLLOW_expression_in_table_collection_expression7398);
            	        expression573=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression573_last = expression573.tree.get();
            	            stream_expression.add(expression573.tree);
            	        }

            	        RIGHT_PAREN574 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_table_collection_expression7400);
            	        if  (this->hasException())
            	        {
            	            goto ruletable_collection_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN574);


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression, subquery
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 747:9: -> ^( EXPR ( subquery )? ( expression )? )
            {
            	// OracleDML.g:747:12: ^( EXPR ( subquery )? ( expression )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	// OracleDML.g:747:19: ( subquery )?
            	if ( stream_subquery.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
            	}
            	stream_subquery.reset();

            	// OracleDML.g:747:29: ( expression )?
            	if ( stream_expression.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            	}
            	stream_expression.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruletable_collection_expressionEx; /* Prevent compiler warnings */
    ruletable_collection_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end table_collection_expression */

/**
 * $ANTLR start subquery_restriction_clause
 * OracleDML.g:750:1: subquery_restriction_clause : with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? ) -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? ) ;
 */
OracleDML::subquery_restriction_clause_return
OracleDML::subquery_restriction_clause()
{
    OracleDML::subquery_restriction_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::with_key_return with_key575;
    ImplTraits::TreeTypePtr::pointer with_key575_last = NULL;
    OracleDML_OracleDMLKeys::read_key_return read_key576;
    ImplTraits::TreeTypePtr::pointer read_key576_last = NULL;
    OracleDML_OracleDMLKeys::only_key_return only_key577;
    ImplTraits::TreeTypePtr::pointer only_key577_last = NULL;
    OracleDML_OracleDMLKeys::check_key_return check_key578;
    ImplTraits::TreeTypePtr::pointer check_key578_last = NULL;
    OracleDML_OracleDMLKeys::option_key_return option_key579;
    ImplTraits::TreeTypePtr::pointer option_key579_last = NULL;
    OracleDML_OracleDMLKeys::constraint_key_return constraint_key580;
    ImplTraits::TreeTypePtr::pointer constraint_key580_last = NULL;
    OracleDML_OracleDMLCommons::constraint_name_return constraint_name581;
    ImplTraits::TreeTypePtr::pointer constraint_name581_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_with_key(get_psrstate()->get_treeAdaptor(), "rule with_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_constraint_key(get_psrstate()->get_treeAdaptor(), "rule constraint_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_check_key(get_psrstate()->get_treeAdaptor(), "rule check_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_option_key(get_psrstate()->get_treeAdaptor(), "rule option_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_constraint_name(get_psrstate()->get_treeAdaptor(), "rule constraint_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_read_key(get_psrstate()->get_treeAdaptor(), "rule read_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_only_key(get_psrstate()->get_treeAdaptor(), "rule only_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:751:5: ( with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? ) -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? ) )
        // OracleDML.g:751:10: with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? )
        {
            this->followPush(FOLLOW_with_key_in_subquery_restriction_clause7453);
            with_key575=with_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesubquery_restriction_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                with_key575_last = with_key575.tree.get();
                stream_with_key.add(with_key575.tree);
            }

            // OracleDML.g:752:5: ( read_key only_key | check_key option_key ( constraint_key constraint_name )? )
            {
                ANTLR_UINT32 alt193=2;
                {
                    ANTLR_UINT32 LA193_0 = this->LA(1);
                    if ( (LA193_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "READ")))
                    {
                        alt193=1;
                    }
                    else if ( (LA193_0 == SQL92_RESERVED_CHECK))
                    {
                        alt193=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 193 );
                        ex->set_state( 0 );


                        goto rulesubquery_restriction_clauseEx;

                    }
                }
                switch (alt193)
                {
            	case 1:
            	    // OracleDML.g:752:10: read_key only_key
            	    {
            	        this->followPush(FOLLOW_read_key_in_subquery_restriction_clause7464);
            	        read_key576=read_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_restriction_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            read_key576_last = read_key576.tree.get();
            	            stream_read_key.add(read_key576.tree);
            	        }

            	        this->followPush(FOLLOW_only_key_in_subquery_restriction_clause7466);
            	        only_key577=only_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_restriction_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            only_key577_last = only_key577.tree.get();
            	            stream_only_key.add(only_key577.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:753:10: check_key option_key ( constraint_key constraint_name )?
            	    {
            	        this->followPush(FOLLOW_check_key_in_subquery_restriction_clause7477);
            	        check_key578=check_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_restriction_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            check_key578_last = check_key578.tree.get();
            	            stream_check_key.add(check_key578.tree);
            	        }

            	        this->followPush(FOLLOW_option_key_in_subquery_restriction_clause7479);
            	        option_key579=option_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesubquery_restriction_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            option_key579_last = option_key579.tree.get();
            	            stream_option_key.add(option_key579.tree);
            	        }

            	        // OracleDML.g:753:31: ( constraint_key constraint_name )?
            	        {
            	            ANTLR_UINT32 alt192=2;
            	            {
            	                ANTLR_UINT32 LA192_0 = this->LA(1);
            	                if ( (LA192_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "CONSTRAINT")))
            	                {
            	                    alt192=1;
            	                }
            	            }
            	            switch (alt192)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:753:32: constraint_key constraint_name
            	        	    {
            	        	        this->followPush(FOLLOW_constraint_key_in_subquery_restriction_clause7482);
            	        	        constraint_key580=constraint_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesubquery_restriction_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            constraint_key580_last = constraint_key580.tree.get();
            	        	            stream_constraint_key.add(constraint_key580.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_constraint_name_in_subquery_restriction_clause7484);
            	        	        constraint_name581=constraint_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesubquery_restriction_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            constraint_name581_last = constraint_name581.tree.get();
            	        	            stream_constraint_name.add(constraint_name581.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: constraint_name, check_key, with_key, read_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 755:9: -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? )
            {
            	// OracleDML.g:755:12: ^( with_key ( read_key )? ( check_key )? ( constraint_name )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_with_key.nextNode(), root_1);
            	// OracleDML.g:755:23: ( read_key )?
            	if ( stream_read_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_read_key.nextTree());
            	}
            	stream_read_key.reset();

            	// OracleDML.g:755:33: ( check_key )?
            	if ( stream_check_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_check_key.nextTree());
            	}
            	stream_check_key.reset();

            	// OracleDML.g:755:44: ( constraint_name )?
            	if ( stream_constraint_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_constraint_name.nextTree());
            	}
            	stream_constraint_name.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesubquery_restriction_clauseEx; /* Prevent compiler warnings */
    rulesubquery_restriction_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end subquery_restriction_clause */

/**
 * $ANTLR start sample_clause
 * OracleDML.g:758:1: sample_clause : sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )? -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? ) ;
 */
OracleDML::sample_clause_return
OracleDML::sample_clause()
{
    OracleDML::sample_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN584 = NULL;
    ImplTraits::CommonTokenType const* COMMA585 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN586 = NULL;
    OracleDML::expression_return e1;
    ImplTraits::TreeTypePtr::pointer e1_last = NULL;
    OracleDML::expression_return e2;
    ImplTraits::TreeTypePtr::pointer e2_last = NULL;
    OracleDML_OracleDMLKeys::sample_key_return sample_key582;
    ImplTraits::TreeTypePtr::pointer sample_key582_last = NULL;
    OracleDML_OracleDMLKeys::block_key_return block_key583;
    ImplTraits::TreeTypePtr::pointer block_key583_last = NULL;
    OracleDML::seed_part_return seed_part587;
    ImplTraits::TreeTypePtr::pointer seed_part587_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN584_tree;
    ImplTraits::TreeTypePtr COMMA585_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN586_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_seed_part(get_psrstate()->get_treeAdaptor(), "rule seed_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_sample_key(get_psrstate()->get_treeAdaptor(), "rule sample_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_block_key(get_psrstate()->get_treeAdaptor(), "rule block_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:759:5: ( sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )? -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? ) )
        // OracleDML.g:759:10: sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )?
        {
            this->followPush(FOLLOW_sample_key_in_sample_clause7535);
            sample_key582=sample_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesample_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                sample_key582_last = sample_key582.tree.get();
                stream_sample_key.add(sample_key582.tree);
            }

            // OracleDML.g:759:21: ( block_key )?
            {
                ANTLR_UINT32 alt194=2;
                {
                    ANTLR_UINT32 LA194_0 = this->LA(1);
                    if ( (LA194_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "BLOCK")))
                    {
                        alt194=1;
                    }
                }
                switch (alt194)
                {
            	case 1:
            	    // OracleDML.g:759:21: block_key
            	    {
            	        this->followPush(FOLLOW_block_key_in_sample_clause7537);
            	        block_key583=block_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesample_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            block_key583_last = block_key583.tree.get();
            	            stream_block_key.add(block_key583.tree);
            	        }

            	    }
            	    break;

                }
            }

            LEFT_PAREN584 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_sample_clause7549);
            if  (this->hasException())
            {
                goto rulesample_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN584);


            this->followPush(FOLLOW_expression_in_sample_clause7553);
            e1=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesample_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                e1_last = e1.tree.get();
                stream_expression.add(e1.tree);
            }

            // OracleDML.g:760:34: ( COMMA e2= expression )?
            {
                ANTLR_UINT32 alt195=2;
                switch ( this->LA(1) )
                {
                    case COMMA:
                    	{
                    		alt195=1;
                    	}
                        break;
                }

                switch (alt195)
                {
            	case 1:
            	    // OracleDML.g:760:35: COMMA e2= expression
            	    {
            	        COMMA585 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_sample_clause7556);
            	        if  (this->hasException())
            	        {
            	            goto rulesample_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA585);


            	        this->followPush(FOLLOW_expression_in_sample_clause7560);
            	        e2=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesample_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            e2_last = e2.tree.get();
            	            stream_expression.add(e2.tree);
            	        }

            	    }
            	    break;

                }
            }

            RIGHT_PAREN586 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_sample_clause7564);
            if  (this->hasException())
            {
                goto rulesample_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN586);


            // OracleDML.g:761:9: ( seed_part )?
            {
                ANTLR_UINT32 alt196=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA196_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "SEED")))
                    		    {
                    		        alt196=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt196)
                {
            	case 1:
            	    // OracleDML.g:761:9: seed_part
            	    {
            	        this->followPush(FOLLOW_seed_part_in_sample_clause7574);
            	        seed_part587=seed_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesample_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            seed_part587_last = seed_part587.tree.get();
            	            stream_seed_part.add(seed_part587.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: sample_key, seed_part, block_key, e2, e1
            // token labels: 
            // rule labels: retval, e1, e2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
            RewriteRuleSubtreeStream<ImplTraits> stream_e1(get_psrstate()->get_treeAdaptor(), "rule e1",e1_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_e2(get_psrstate()->get_treeAdaptor(), "rule e2",e2_last); // rewrite alias

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 762:9: -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? )
            {
            	// OracleDML.g:762:12: ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_sample_key.nextNode(), root_1);
            	// OracleDML.g:762:25: ( block_key )?
            	if ( stream_block_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_block_key.nextTree());
            	}
            	stream_block_key.reset();

            	// OracleDML.g:762:36: ^( EXPR $e1)
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_e1.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:762:48: ( ^( EXPR $e2) )?
            	if ( stream_e2.hasNext() ) {
            		// OracleDML.g:762:48: ^( EXPR $e2)
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_e2.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_e2.reset();

            	// OracleDML.g:762:61: ( seed_part )?
            	if ( stream_seed_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_seed_part.nextTree());
            	}
            	stream_seed_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesample_clauseEx; /* Prevent compiler warnings */
    rulesample_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end sample_clause */

/**
 * $ANTLR start seed_part
 * OracleDML.g:765:1: seed_part : seed_key LEFT_PAREN expression RIGHT_PAREN -> ^( seed_key ^( EXPR expression ) ) ;
 */
OracleDML::seed_part_return
OracleDML::seed_part()
{
    OracleDML::seed_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN589 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN591 = NULL;
    OracleDML_OracleDMLKeys::seed_key_return seed_key588;
    ImplTraits::TreeTypePtr::pointer seed_key588_last = NULL;
    OracleDML::expression_return expression590;
    ImplTraits::TreeTypePtr::pointer expression590_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN589_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN591_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_seed_key(get_psrstate()->get_treeAdaptor(), "rule seed_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:766:5: ( seed_key LEFT_PAREN expression RIGHT_PAREN -> ^( seed_key ^( EXPR expression ) ) )
        // OracleDML.g:766:10: seed_key LEFT_PAREN expression RIGHT_PAREN
        {
            this->followPush(FOLLOW_seed_key_in_seed_part7630);
            seed_key588=seed_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleseed_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                seed_key588_last = seed_key588.tree.get();
                stream_seed_key.add(seed_key588.tree);
            }

            LEFT_PAREN589 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_seed_part7632);
            if  (this->hasException())
            {
                goto ruleseed_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN589);


            this->followPush(FOLLOW_expression_in_seed_part7634);
            expression590=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleseed_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression590_last = expression590.tree.get();
                stream_expression.add(expression590.tree);
            }

            RIGHT_PAREN591 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_seed_part7636);
            if  (this->hasException())
            {
                goto ruleseed_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN591);


            // AST REWRITE
            // elements: expression, seed_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 767:9: -> ^( seed_key ^( EXPR expression ) )
            {
            	// OracleDML.g:767:12: ^( seed_key ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_seed_key.nextNode(), root_1);
            	// OracleDML.g:767:23: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleseed_partEx; /* Prevent compiler warnings */
    ruleseed_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end seed_part */

/**
 * $ANTLR start cursor_expression
 * OracleDML.g:773:1: cursor_expression : cursor_key LEFT_PAREN subquery RIGHT_PAREN ;
 */
OracleDML::cursor_expression_return
OracleDML::cursor_expression()
{
    OracleDML::cursor_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN593 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN595 = NULL;
    OracleDML_OracleDMLKeys::cursor_key_return cursor_key592;
    ImplTraits::TreeTypePtr::pointer cursor_key592_last = NULL;
    OracleDML::subquery_return subquery594;
    ImplTraits::TreeTypePtr::pointer subquery594_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN593_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN595_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:774:5: ( cursor_key LEFT_PAREN subquery RIGHT_PAREN )
        // OracleDML.g:774:10: cursor_key LEFT_PAREN subquery RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_cursor_key_in_cursor_expression7679);
            cursor_key592=cursor_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecursor_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cursor_key592.tree);


            LEFT_PAREN593 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_cursor_expression7681);
            if  (this->hasException())
            {
                goto rulecursor_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN593_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN593));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN593_tree);
            }


            this->followPush(FOLLOW_subquery_in_cursor_expression7683);
            subquery594=subquery();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecursor_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery594.tree);


            RIGHT_PAREN595 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_cursor_expression7685);
            if  (this->hasException())
            {
                goto rulecursor_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN595_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN595));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN595_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecursor_expressionEx; /* Prevent compiler warnings */
    rulecursor_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cursor_expression */

/**
 * $ANTLR start expression_list
 * OracleDML.g:777:1: expression_list : LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN -> ^( EXPR_LIST ( ^( EXPR expression ) )* ) ;
 */
OracleDML::expression_list_return
OracleDML::expression_list()
{
    OracleDML::expression_list_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN596 = NULL;
    ImplTraits::CommonTokenType const* COMMA598 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN600 = NULL;
    OracleDML::expression_return expression597;
    ImplTraits::TreeTypePtr::pointer expression597_last = NULL;
    OracleDML::expression_return expression599;
    ImplTraits::TreeTypePtr::pointer expression599_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN596_tree;
    ImplTraits::TreeTypePtr COMMA598_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN600_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:778:5: ( LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN -> ^( EXPR_LIST ( ^( EXPR expression ) )* ) )
        // OracleDML.g:778:10: LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN
        {
            LEFT_PAREN596 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_expression_list7705);
            if  (this->hasException())
            {
                goto ruleexpression_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN596);


            // OracleDML.g:778:21: ( expression )?
            {
                ANTLR_UINT32 alt197=2;
                switch ( this->LA(1) )
                {
                    case APPROXIMATE_NUM_LIT:
                    case BINDVAR:
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case COLON:
                    case DELIMITED_ID:
                    case EXACT_NUM_LIT:
                    case INTRODUCER:
                    case LEFT_PAREN:
                    case MINUS_SIGN:
                    case NATIONAL_CHAR_STRING_LIT:
                    case PLSQL_NON_RESERVED_CAST:
                    case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                    case PLUS_SIGN:
                    case REGULAR_ID:
                    case SQL92_RESERVED_ALL:
                    case SQL92_RESERVED_ANY:
                    case SQL92_RESERVED_CASE:
                    case SQL92_RESERVED_CURSOR:
                    case SQL92_RESERVED_DATE:
                    case SQL92_RESERVED_DEFAULT:
                    case SQL92_RESERVED_DISTINCT:
                    case SQL92_RESERVED_EXISTS:
                    case SQL92_RESERVED_FALSE:
                    case SQL92_RESERVED_NOT:
                    case SQL92_RESERVED_NULL:
                    case SQL92_RESERVED_PRIOR:
                    case SQL92_RESERVED_TRUE:
                    case UNSIGNED_INTEGER:
                    	{
                    		alt197=1;
                    	}
                        break;
                }

                switch (alt197)
                {
            	case 1:
            	    // OracleDML.g:778:21: expression
            	    {
            	        this->followPush(FOLLOW_expression_in_expression_list7707);
            	        expression597=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression597_last = expression597.tree.get();
            	            stream_expression.add(expression597.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:778:33: ( COMMA expression )*

            for (;;)
            {
                ANTLR_UINT32 alt198=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt198=1;
                	}
                    break;

                }

                switch (alt198)
                {
            	case 1:
            	    // OracleDML.g:778:34: COMMA expression
            	    {
            	        COMMA598 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_expression_list7711);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA598);


            	        this->followPush(FOLLOW_expression_in_expression_list7713);
            	        expression599=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_listEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression599_last = expression599.tree.get();
            	            stream_expression.add(expression599.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop198;	/* break out of the loop */
            	    break;
                }
            }
            loop198: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN600 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_expression_list7717);
            if  (this->hasException())
            {
                goto ruleexpression_listEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN600);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 779:9: -> ^( EXPR_LIST ( ^( EXPR expression ) )* )
            {
            	// OracleDML.g:779:12: ^( EXPR_LIST ( ^( EXPR expression ) )* )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, "EXPR_LIST"), root_1);
            	// OracleDML.g:779:24: ( ^( EXPR expression ) )*
            	while ( stream_expression.hasNext() ) {
            		// OracleDML.g:779:24: ^( EXPR expression )
            		{
            		ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            		}
            	}
            	stream_expression.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleexpression_listEx; /* Prevent compiler warnings */
    ruleexpression_listEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end expression_list */

/**
 * $ANTLR start condition
 * OracleDML.g:782:1: condition : expression ;
 */
OracleDML::condition_return
OracleDML::condition()
{
    OracleDML::condition_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression601;
    ImplTraits::TreeTypePtr::pointer expression601_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:783:5: ( expression )
        // OracleDML.g:783:11: expression
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_expression_in_condition7759);
            expression601=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconditionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression601.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconditionEx; /* Prevent compiler warnings */
    ruleconditionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end condition */

/**
 * $ANTLR start condition_wrapper
 * OracleDML.g:786:1: condition_wrapper : expression -> ^( LOGIC_EXPR expression ) ;
 */
OracleDML::condition_wrapper_return
OracleDML::condition_wrapper()
{
    OracleDML::condition_wrapper_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression602;
    ImplTraits::TreeTypePtr::pointer expression602_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:787:5: ( expression -> ^( LOGIC_EXPR expression ) )
        // OracleDML.g:787:10: expression
        {
            this->followPush(FOLLOW_expression_in_condition_wrapper7779);
            expression602=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecondition_wrapperEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression602_last = expression602.tree.get();
                stream_expression.add(expression602.tree);
            }

            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 788:9: -> ^( LOGIC_EXPR expression )
            {
            	// OracleDML.g:788:12: ^( LOGIC_EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(LOGIC_EXPR, "LOGIC_EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecondition_wrapperEx; /* Prevent compiler warnings */
    rulecondition_wrapperEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end condition_wrapper */

/**
 * $ANTLR start expression
 * OracleDML.g:791:1: expression : ( ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression | logical_and_expression ( or_key ^ logical_and_expression )* );
 */
OracleDML::expression_return
OracleDML::expression()
{
    OracleDML::expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::cursor_expression_return cursor_expression603;
    ImplTraits::TreeTypePtr::pointer cursor_expression603_last = NULL;
    OracleDML::logical_and_expression_return logical_and_expression604;
    ImplTraits::TreeTypePtr::pointer logical_and_expression604_last = NULL;
    OracleDML_OracleDMLKeys::or_key_return or_key605;
    ImplTraits::TreeTypePtr::pointer or_key605_last = NULL;
    OracleDML::logical_and_expression_return logical_and_expression606;
    ImplTraits::TreeTypePtr::pointer logical_and_expression606_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:792:5: ( ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression | logical_and_expression ( or_key ^ logical_and_expression )* )

            ANTLR_UINT32 alt200;

            alt200=2;

            {
                ANTLR_UINT32 LA200_0 = this->LA(1);
                if ( (LA200_0 == SQL92_RESERVED_CURSOR) && (this->msynpred( antlr3::ClassForwarder<synpred25_OracleDML>() )))
                {
                    alt200=1;
                }
                else if ( (LA200_0 == APPROXIMATE_NUM_LIT || LA200_0 == BINDVAR || ((LA200_0 >= CHAR_STRING) && (LA200_0 <= CHAR_STRING_PERL)) || LA200_0 == COLON || LA200_0 == DELIMITED_ID || LA200_0 == EXACT_NUM_LIT || LA200_0 == INTRODUCER || LA200_0 == LEFT_PAREN || LA200_0 == MINUS_SIGN || LA200_0 == NATIONAL_CHAR_STRING_LIT || ((LA200_0 >= PLSQL_NON_RESERVED_CAST) && (LA200_0 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA200_0 == PLUS_SIGN || LA200_0 == REGULAR_ID || LA200_0 == SQL92_RESERVED_ALL || LA200_0 == SQL92_RESERVED_ANY || LA200_0 == SQL92_RESERVED_CASE || LA200_0 == SQL92_RESERVED_DATE || LA200_0 == SQL92_RESERVED_DEFAULT || LA200_0 == SQL92_RESERVED_DISTINCT || ((LA200_0 >= SQL92_RESERVED_EXISTS) && (LA200_0 <= SQL92_RESERVED_FALSE)) || ((LA200_0 >= SQL92_RESERVED_NOT) && (LA200_0 <= SQL92_RESERVED_NULL)) || LA200_0 == SQL92_RESERVED_PRIOR || LA200_0 == SQL92_RESERVED_TRUE || LA200_0 == UNSIGNED_INTEGER))
                {
                    alt200=2;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 200 );
                    ex->set_state( 0 );


                    goto ruleexpressionEx;

                }
            }
            switch (alt200)
            {
        	case 1:
        	    // OracleDML.g:792:10: ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_cursor_expression_in_expression7829);
        	        cursor_expression603=cursor_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cursor_expression603.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:793:10: logical_and_expression ( or_key ^ logical_and_expression )*
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_logical_and_expression_in_expression7840);
        	        logical_and_expression604=logical_and_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, logical_and_expression604.tree);


        	        // OracleDML.g:793:33: ( or_key ^ logical_and_expression )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt199=2;
        	            switch ( this->LA(1) )
        	            {
        	            case SQL92_RESERVED_OR:
        	            	{
        	            		alt199=1;
        	            	}
        	                break;

        	            }

        	            switch (alt199)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:793:35: or_key ^ logical_and_expression
        	        	    {
        	        	        this->followPush(FOLLOW_or_key_in_expression7844);
        	        	        or_key605=or_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(or_key605.tree, root_0);

        	        	        this->followPush(FOLLOW_logical_and_expression_in_expression7847);
        	        	        logical_and_expression606=logical_and_expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, logical_and_expression606.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop199;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop199: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end expression */

/**
 * $ANTLR start expression_wrapper
 * OracleDML.g:796:1: expression_wrapper : expression -> ^( EXPR expression ) ;
 */
OracleDML::expression_wrapper_return
OracleDML::expression_wrapper()
{
    OracleDML::expression_wrapper_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression607;
    ImplTraits::TreeTypePtr::pointer expression607_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:797:5: ( expression -> ^( EXPR expression ) )
        // OracleDML.g:797:10: expression
        {
            this->followPush(FOLLOW_expression_in_expression_wrapper7870);
            expression607=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpression_wrapperEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression607_last = expression607.tree.get();
                stream_expression.add(expression607.tree);
            }

            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 798:9: -> ^( EXPR expression )
            {
            	// OracleDML.g:798:12: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleexpression_wrapperEx; /* Prevent compiler warnings */
    ruleexpression_wrapperEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end expression_wrapper */

/**
 * $ANTLR start logical_and_expression_seq
 * OracleDML.g:801:1: logical_and_expression_seq : ( and_key negated_expression )+ ;
 */
OracleDML::logical_and_expression_seq_return
OracleDML::logical_and_expression_seq()
{
    OracleDML::logical_and_expression_seq_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::and_key_return and_key608;
    ImplTraits::TreeTypePtr::pointer and_key608_last = NULL;
    OracleDML::negated_expression_return negated_expression609;
    ImplTraits::TreeTypePtr::pointer negated_expression609_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:802:5: ( ( and_key negated_expression )+ )
        // OracleDML.g:802:10: ( and_key negated_expression )+
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            // OracleDML.g:802:10: ( and_key negated_expression )+
            {
                int cnt201=0;

                for (;;)
                {
                    ANTLR_UINT32 alt201=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_AND:
            		{
            			alt201=1;
            		}
            	    break;

            	}

            	switch (alt201)
            	{
            	    case 1:
            	        // OracleDML.g:802:11: and_key negated_expression
            	        {
            	            this->followPush(FOLLOW_and_key_in_logical_and_expression_seq7907);
            	            and_key608=and_key();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulelogical_and_expression_seqEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, and_key608.tree);


            	            this->followPush(FOLLOW_negated_expression_in_logical_and_expression_seq7909);
            	            negated_expression609=negated_expression();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulelogical_and_expression_seqEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, negated_expression609.tree);


            	        }
            	        break;

            	    default:

            		if ( cnt201 >= 1 )
            		{
            		    goto loop201;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulelogical_and_expression_seqEx;
            	}
            	cnt201++;
                }
                loop201: ;	/* Jump to here if this rule does not match */
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelogical_and_expression_seqEx; /* Prevent compiler warnings */
    rulelogical_and_expression_seqEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end logical_and_expression_seq */

/**
 * $ANTLR start logical_and_expression
 * OracleDML.g:805:1: logical_and_expression : negated_expression ( logical_and_expression_seq )? -> { mode == 1 }? ^( CONJUNCTION negated_expression ( logical_and_expression_seq )? ) -> negated_expression ;
 */
OracleDML::logical_and_expression_return
OracleDML::logical_and_expression()
{
    OracleDML::logical_and_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::negated_expression_return negated_expression610;
    ImplTraits::TreeTypePtr::pointer negated_expression610_last = NULL;
    OracleDML::logical_and_expression_seq_return logical_and_expression_seq611;
    ImplTraits::TreeTypePtr::pointer logical_and_expression_seq611_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_negated_expression(get_psrstate()->get_treeAdaptor(), "rule negated_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_logical_and_expression_seq(get_psrstate()->get_treeAdaptor(), "rule logical_and_expression_seq");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:807:5: ( negated_expression ( logical_and_expression_seq )? -> { mode == 1 }? ^( CONJUNCTION negated_expression ( logical_and_expression_seq )? ) -> negated_expression )
        // OracleDML.g:807:10: negated_expression ( logical_and_expression_seq )?
        {
            this->followPush(FOLLOW_negated_expression_in_logical_and_expression7939);
            negated_expression610=negated_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelogical_and_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                negated_expression610_last = negated_expression610.tree.get();
                stream_negated_expression.add(negated_expression610.tree);
            }

            // OracleDML.g:807:29: ( logical_and_expression_seq )?
            {
                ANTLR_UINT32 alt202=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_AND:
                    	{
                    		alt202=1;
                    	}
                        break;
                }

                switch (alt202)
                {
            	case 1:
            	    // OracleDML.g:807:30: logical_and_expression_seq
            	    {
            	        this->followPush(FOLLOW_logical_and_expression_seq_in_logical_and_expression7942);
            	        logical_and_expression_seq611=logical_and_expression_seq();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelogical_and_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            logical_and_expression_seq611_last = logical_and_expression_seq611.tree.get();
            	            stream_logical_and_expression_seq.add(logical_and_expression_seq611.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: negated_expression, negated_expression, logical_and_expression_seq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 808:10: -> { mode == 1 }? ^( CONJUNCTION negated_expression ( logical_and_expression_seq )? )
            if ( mode == 1 ) {
            	// OracleDML.g:808:28: ^( CONJUNCTION negated_expression ( logical_and_expression_seq )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(CONJUNCTION, "CONJUNCTION"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_negated_expression.nextTree());
            	// OracleDML.g:808:61: ( logical_and_expression_seq )?
            	if ( stream_logical_and_expression_seq.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_logical_and_expression_seq.nextTree());
            	}
            	stream_logical_and_expression_seq.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 809:10: -> negated_expression
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_negated_expression.nextTree());
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelogical_and_expressionEx; /* Prevent compiler warnings */
    rulelogical_and_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end logical_and_expression */

/**
 * $ANTLR start negated_expression
 * OracleDML.g:812:1: negated_expression : ( not_key ^ negated_expression | equality_expression );
 */
OracleDML::negated_expression_return
OracleDML::negated_expression()
{
    OracleDML::negated_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::not_key_return not_key612;
    ImplTraits::TreeTypePtr::pointer not_key612_last = NULL;
    OracleDML::negated_expression_return negated_expression613;
    ImplTraits::TreeTypePtr::pointer negated_expression613_last = NULL;
    OracleDML::equality_expression_return equality_expression614;
    ImplTraits::TreeTypePtr::pointer equality_expression614_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:813:5: ( not_key ^ negated_expression | equality_expression )

            ANTLR_UINT32 alt203;

            alt203=2;

            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_NOT:
            	{
            		alt203=1;
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case REGULAR_ID:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt203=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 203 );
                ex->set_state( 0 );


                goto rulenegated_expressionEx;

            }

            switch (alt203)
            {
        	case 1:
        	    // OracleDML.g:813:10: not_key ^ negated_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_not_key_in_negated_expression8002);
        	        not_key612=not_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenegated_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(not_key612.tree, root_0);

        	        this->followPush(FOLLOW_negated_expression_in_negated_expression8005);
        	        negated_expression613=negated_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenegated_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, negated_expression613.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:814:10: equality_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_equality_expression_in_negated_expression8016);
        	        equality_expression614=equality_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenegated_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, equality_expression614.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulenegated_expressionEx; /* Prevent compiler warnings */
    rulenegated_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end negated_expression */

/**
 * $ANTLR start equality_expression
 * OracleDML.g:817:1: equality_expression : ( multiset_comparsion -> multiset_comparsion ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )? ;
 */
OracleDML::equality_expression_return
OracleDML::equality_expression()
{
    OracleDML::equality_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN627 = NULL;
    ImplTraits::CommonTokenType const* COMMA630 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN632 = NULL;
    OracleDML::multiset_comparsion_return multiset_comparsion615;
    ImplTraits::TreeTypePtr::pointer multiset_comparsion615_last = NULL;
    OracleDML_OracleDMLKeys::is_key_return is_key616;
    ImplTraits::TreeTypePtr::pointer is_key616_last = NULL;
    OracleDML_OracleDMLKeys::not_key_return not_key617;
    ImplTraits::TreeTypePtr::pointer not_key617_last = NULL;
    OracleDML_OracleDMLKeys::null_key_return null_key618;
    ImplTraits::TreeTypePtr::pointer null_key618_last = NULL;
    OracleDML_OracleDMLKeys::nan_key_return nan_key619;
    ImplTraits::TreeTypePtr::pointer nan_key619_last = NULL;
    OracleDML_OracleDMLKeys::present_key_return present_key620;
    ImplTraits::TreeTypePtr::pointer present_key620_last = NULL;
    OracleDML_OracleDMLKeys::infinite_key_return infinite_key621;
    ImplTraits::TreeTypePtr::pointer infinite_key621_last = NULL;
    OracleDML_OracleDMLKeys::a_key_return a_key622;
    ImplTraits::TreeTypePtr::pointer a_key622_last = NULL;
    OracleDML_OracleDMLKeys::set_key_return set_key623;
    ImplTraits::TreeTypePtr::pointer set_key623_last = NULL;
    OracleDML_OracleDMLKeys::empty_key_return empty_key624;
    ImplTraits::TreeTypePtr::pointer empty_key624_last = NULL;
    OracleDML_OracleDMLKeys::of_key_return of_key625;
    ImplTraits::TreeTypePtr::pointer of_key625_last = NULL;
    OracleDML_OracleDMLKeys::type_key_return type_key626;
    ImplTraits::TreeTypePtr::pointer type_key626_last = NULL;
    OracleDML_OracleDMLKeys::only_key_return only_key628;
    ImplTraits::TreeTypePtr::pointer only_key628_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec629;
    ImplTraits::TreeTypePtr::pointer type_spec629_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec631;
    ImplTraits::TreeTypePtr::pointer type_spec631_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN627_tree;
    ImplTraits::TreeTypePtr COMMA630_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN632_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_multiset_comparsion(get_psrstate()->get_treeAdaptor(), "rule multiset_comparsion");
    RewriteRuleSubtreeStream<ImplTraits> stream_type_spec(get_psrstate()->get_treeAdaptor(), "rule type_spec");
    RewriteRuleSubtreeStream<ImplTraits> stream_is_key(get_psrstate()->get_treeAdaptor(), "rule is_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_present_key(get_psrstate()->get_treeAdaptor(), "rule present_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_null_key(get_psrstate()->get_treeAdaptor(), "rule null_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_nan_key(get_psrstate()->get_treeAdaptor(), "rule nan_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_a_key(get_psrstate()->get_treeAdaptor(), "rule a_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_empty_key(get_psrstate()->get_treeAdaptor(), "rule empty_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_not_key(get_psrstate()->get_treeAdaptor(), "rule not_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_set_key(get_psrstate()->get_treeAdaptor(), "rule set_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_infinite_key(get_psrstate()->get_treeAdaptor(), "rule infinite_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_of_key(get_psrstate()->get_treeAdaptor(), "rule of_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_only_key(get_psrstate()->get_treeAdaptor(), "rule only_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_type_key(get_psrstate()->get_treeAdaptor(), "rule type_key");

    /* Initialize rule variables
     */

        int isNegated = false;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:819:5: ( ( multiset_comparsion -> multiset_comparsion ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )? )
        // OracleDML.g:819:10: ( multiset_comparsion -> multiset_comparsion ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )?
        {
            // OracleDML.g:819:10: ( multiset_comparsion -> multiset_comparsion )
            // OracleDML.g:819:11: multiset_comparsion
            {
                this->followPush(FOLLOW_multiset_comparsion_in_equality_expression8045);
                multiset_comparsion615=multiset_comparsion();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleequality_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    multiset_comparsion615_last = multiset_comparsion615.tree.get();
                    stream_multiset_comparsion.add(multiset_comparsion615.tree);
                }

                // AST REWRITE
                // elements: multiset_comparsion
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 819:31: -> multiset_comparsion
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_multiset_comparsion.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:820:5: ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )?
            {
                ANTLR_UINT32 alt209=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_IS:
                    	{
                    		alt209=1;
                    	}
                        break;
                }

                switch (alt209)
                {
            	case 1:
            	    // OracleDML.g:820:10: is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) )
            	    {
            	        this->followPush(FOLLOW_is_key_in_equality_expression8061);
            	        is_key616=is_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleequality_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            is_key616_last = is_key616.tree.get();
            	            stream_is_key.add(is_key616.tree);
            	        }

            	        // OracleDML.g:820:17: ( not_key )?
            	        {
            	            ANTLR_UINT32 alt204=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_NOT:
            	                	{
            	                		alt204=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt204)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:820:18: not_key
            	        	    {
            	        	        this->followPush(FOLLOW_not_key_in_equality_expression8064);
            	        	        not_key617=not_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            not_key617_last = not_key617.tree.get();
            	        	            stream_not_key.add(not_key617.tree);
            	        	        }

            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            isNegated = true;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:821:9: ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) )
            	        {
            	            ANTLR_UINT32 alt208=7;
            	            {
            	                ANTLR_UINT32 LA208_0 = this->LA(1);
            	                if ( (LA208_0 == SQL92_RESERVED_NULL))
            	                {
            	                    alt208=1;
            	                }
            	                else if ( (LA208_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "EMPTY"))||((toUpper(LT(1)->getText()) == "PRESENT"))||((toUpper(LT(1)->getText()) == "INFINITE"))||((toUpper(LT(1)->getText()) == "A"))||((toUpper(LT(1)->getText()) == "NAN")))))
            	                {
            	                    {
            	                        ANTLR_UINT32 LA208_2 = this->LA(2);
            	                        if ( (LA208_2 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "A")))
            	                        {
            	                            alt208=5;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "NAN")))
            	                        {
            	                            alt208=2;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "PRESENT")))
            	                        {
            	                            alt208=3;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "INFINITE")))
            	                        {
            	                            alt208=4;
            	                        }
            	                        else if ( ((toUpper(LT(1)->getText()) == "EMPTY")))
            	                        {
            	                            alt208=6;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return retval;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 208 );
            	                            ex->set_state( 2 );


            	                            goto ruleequality_expressionEx;

            	                        }
            	                    }
            	                }
            	                else if ( (LA208_0 == SQL92_RESERVED_OF))
            	                {
            	                    alt208=7;
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 208 );
            	                    ex->set_state( 0 );


            	                    goto ruleequality_expressionEx;

            	                }
            	            }
            	            switch (alt208)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:821:14: null_key
            	        	    {
            	        	        this->followPush(FOLLOW_null_key_in_equality_expression8083);
            	        	        null_key618=null_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            null_key618_last = null_key618.tree.get();
            	        	            stream_null_key.add(null_key618.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 822:17: -> {isNegated}? ^( IS_NOT_NULL $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:822:33: ^( IS_NOT_NULL $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_NULL, "IS_NOT_NULL"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 823:17: -> ^( IS_NULL $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:823:20: ^( IS_NULL $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NULL, "IS_NULL"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:824:14: nan_key
            	        	    {
            	        	        this->followPush(FOLLOW_nan_key_in_equality_expression8150);
            	        	        nan_key619=nan_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            nan_key619_last = nan_key619.tree.get();
            	        	            stream_nan_key.add(nan_key619.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 825:17: -> {isNegated}? ^( IS_NOT_NAN $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:825:33: ^( IS_NOT_NAN $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_NAN, "IS_NOT_NAN"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 826:17: -> ^( IS_NAN $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:826:20: ^( IS_NAN $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NAN, "IS_NAN"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // OracleDML.g:827:14: present_key
            	        	    {
            	        	        this->followPush(FOLLOW_present_key_in_equality_expression8217);
            	        	        present_key620=present_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            present_key620_last = present_key620.tree.get();
            	        	            stream_present_key.add(present_key620.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 828:17: -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:828:33: ^( IS_NOT_PRESENT $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_PRESENT, "IS_NOT_PRESENT"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 829:17: -> ^( IS_PRESENT $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:829:20: ^( IS_PRESENT $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_PRESENT, "IS_PRESENT"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // OracleDML.g:830:14: infinite_key
            	        	    {
            	        	        this->followPush(FOLLOW_infinite_key_in_equality_expression8284);
            	        	        infinite_key621=infinite_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            infinite_key621_last = infinite_key621.tree.get();
            	        	            stream_infinite_key.add(infinite_key621.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 831:17: -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:831:33: ^( IS_NOT_INFINITE $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_INFINITE, "IS_NOT_INFINITE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 832:17: -> ^( IS_INFINITE $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:832:20: ^( IS_INFINITE $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_INFINITE, "IS_INFINITE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // OracleDML.g:833:14: a_key set_key
            	        	    {
            	        	        this->followPush(FOLLOW_a_key_in_equality_expression8351);
            	        	        a_key622=a_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            a_key622_last = a_key622.tree.get();
            	        	            stream_a_key.add(a_key622.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_set_key_in_equality_expression8353);
            	        	        set_key623=set_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            set_key623_last = set_key623.tree.get();
            	        	            stream_set_key.add(set_key623.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 834:17: -> {isNegated}? ^( IS_NOT_A_SET $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:834:33: ^( IS_NOT_A_SET $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_A_SET, "IS_NOT_A_SET"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 835:17: -> ^( IS_A_SET $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:835:20: ^( IS_A_SET $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_A_SET, "IS_A_SET"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // OracleDML.g:836:14: empty_key
            	        	    {
            	        	        this->followPush(FOLLOW_empty_key_in_equality_expression8420);
            	        	        empty_key624=empty_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            empty_key624_last = empty_key624.tree.get();
            	        	            stream_empty_key.add(empty_key624.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 837:17: -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression)
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:837:33: ^( IS_NOT_EMPTY $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_EMPTY, "IS_NOT_EMPTY"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 838:17: -> ^( IS_EMPTY $equality_expression)
            	        	        {
            	        	        	// OracleDML.g:838:20: ^( IS_EMPTY $equality_expression)
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_EMPTY, "IS_EMPTY"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 7:
            	        	    // OracleDML.g:839:14: of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN
            	        	    {
            	        	        this->followPush(FOLLOW_of_key_in_equality_expression8487);
            	        	        of_key625=of_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            of_key625_last = of_key625.tree.get();
            	        	            stream_of_key.add(of_key625.tree);
            	        	        }

            	        	        // OracleDML.g:839:21: ( type_key )?
            	        	        {
            	        	            ANTLR_UINT32 alt205=2;
            	        	            {
            	        	                ANTLR_UINT32 LA205_0 = this->LA(1);
            	        	                if ( (LA205_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "TYPE")))
            	        	                {
            	        	                    alt205=1;
            	        	                }
            	        	            }
            	        	            switch (alt205)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:839:21: type_key
            	        	        	    {
            	        	        	        this->followPush(FOLLOW_type_key_in_equality_expression8489);
            	        	        	        type_key626=type_key();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleequality_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            type_key626_last = type_key626.tree.get();
            	        	        	            stream_type_key.add(type_key626.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	        LEFT_PAREN627 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_equality_expression8492);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN627);


            	        	        // OracleDML.g:839:42: ( only_key )?
            	        	        {
            	        	            ANTLR_UINT32 alt206=2;
            	        	            switch ( this->LA(1) )
            	        	            {
            	        	                case REGULAR_ID:
            	        	                	{
            	        	                		{
            	        	                		    ANTLR_UINT32 LA206_1 = this->LA(2);
            	        	                		    if ( ((toUpper(LT(1)->getText()) == "ONLY")))
            	        	                		    {
            	        	                		        alt206=1;
            	        	                		    }
            	        	                		}
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt206)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:839:42: only_key
            	        	        	    {
            	        	        	        this->followPush(FOLLOW_only_key_in_equality_expression8494);
            	        	        	        only_key628=only_key();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleequality_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            only_key628_last = only_key628.tree.get();
            	        	        	            stream_only_key.add(only_key628.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	        this->followPush(FOLLOW_type_spec_in_equality_expression8497);
            	        	        type_spec629=type_spec();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            type_spec629_last = type_spec629.tree.get();
            	        	            stream_type_spec.add(type_spec629.tree);
            	        	        }

            	        	        // OracleDML.g:839:62: ( COMMA type_spec )*

            	        	        for (;;)
            	        	        {
            	        	            ANTLR_UINT32 alt207=2;
            	        	            switch ( this->LA(1) )
            	        	            {
            	        	            case COMMA:
            	        	            	{
            	        	            		alt207=1;
            	        	            	}
            	        	                break;

            	        	            }

            	        	            switch (alt207)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:839:63: COMMA type_spec
            	        	        	    {
            	        	        	        COMMA630 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_equality_expression8500);
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleequality_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }
            	        	        	         
            	        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA630);


            	        	        	        this->followPush(FOLLOW_type_spec_in_equality_expression8502);
            	        	        	        type_spec631=type_spec();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto ruleequality_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            type_spec631_last = type_spec631.tree.get();
            	        	        	            stream_type_spec.add(type_spec631.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	        	default:
            	        	        	    goto loop207;	/* break out of the loop */
            	        	        	    break;
            	        	            }
            	        	        }
            	        	        loop207: ; /* Jump out to here if this rule does not match */


            	        	        RIGHT_PAREN632 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_equality_expression8506);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN632);


            	        	        // AST REWRITE
            	        	        // elements: type_spec, type_spec, equality_expression, equality_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 840:17: -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ )
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:840:33: ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_NOT_OF_TYPE, "IS_NOT_OF_TYPE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	if ( !(stream_type_spec.hasNext()) ) {
            	        	        		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "type_spec empty" );
            	        	        		goto ruleequality_expressionEx;
            	        	        	}
            	        	        	while ( stream_type_spec.hasNext() ) {
            	        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_type_spec.nextTree());
            	        	        	}
            	        	        	stream_type_spec.reset();

            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 841:17: -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ )
            	        	        {
            	        	        	// OracleDML.g:841:20: ^( IS_OF_TYPE $equality_expression ( type_spec )+ )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(IS_OF_TYPE, "IS_OF_TYPE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	if ( !(stream_type_spec.hasNext()) ) {
            	        	        		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "type_spec empty" );
            	        	        		goto ruleequality_expressionEx;
            	        	        	}
            	        	        	while ( stream_type_spec.hasNext() ) {
            	        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_type_spec.nextTree());
            	        	        	}
            	        	        	stream_type_spec.reset();

            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleequality_expressionEx; /* Prevent compiler warnings */
    ruleequality_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end equality_expression */

/**
 * $ANTLR start multiset_comparsion
 * OracleDML.g:847:1: multiset_comparsion : ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) ) )? ;
 */
OracleDML::multiset_comparsion_return
OracleDML::multiset_comparsion()
{
    OracleDML::multiset_comparsion_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::relational_expression_return relational_expression633;
    ImplTraits::TreeTypePtr::pointer relational_expression633_last = NULL;
    OracleDML::multiset_type_return multiset_type634;
    ImplTraits::TreeTypePtr::pointer multiset_type634_last = NULL;
    OracleDML_OracleDMLKeys::of_key_return of_key635;
    ImplTraits::TreeTypePtr::pointer of_key635_last = NULL;
    OracleDML::concatenation_return concatenation636;
    ImplTraits::TreeTypePtr::pointer concatenation636_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_multiset_type(get_psrstate()->get_treeAdaptor(), "rule multiset_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_relational_expression(get_psrstate()->get_treeAdaptor(), "rule relational_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_of_key(get_psrstate()->get_treeAdaptor(), "rule of_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:848:5: ( ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) ) )? )
        // OracleDML.g:848:10: ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) ) )?
        {
            // OracleDML.g:848:10: ( relational_expression -> relational_expression )
            // OracleDML.g:848:11: relational_expression
            {
                this->followPush(FOLLOW_relational_expression_in_multiset_comparsion8603);
                relational_expression633=relational_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulemultiset_comparsionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    relational_expression633_last = relational_expression633.tree.get();
                    stream_relational_expression.add(relational_expression633.tree);
                }

                // AST REWRITE
                // elements: relational_expression
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 848:33: -> relational_expression
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_relational_expression.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:849:5: ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) ) )?
            {
                ANTLR_UINT32 alt211=2;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA211_1 = this->LA(2);
                    		    if ( ((((toUpper(LT(1)->getText()) == "SUBMULTISET"))||((toUpper(LT(1)->getText()) == "MEMBER")))))
                    		    {
                    		        alt211=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt211)
                {
            	case 1:
            	    // OracleDML.g:849:10: multiset_type ( of_key )? concatenation
            	    {
            	        this->followPush(FOLLOW_multiset_type_in_multiset_comparsion8619);
            	        multiset_type634=multiset_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiset_comparsionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            multiset_type634_last = multiset_type634.tree.get();
            	            stream_multiset_type.add(multiset_type634.tree);
            	        }

            	        // OracleDML.g:849:24: ( of_key )?
            	        {
            	            ANTLR_UINT32 alt210=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_OF:
            	                	{
            	                		alt210=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt210)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:849:24: of_key
            	        	    {
            	        	        this->followPush(FOLLOW_of_key_in_multiset_comparsion8621);
            	        	        of_key635=of_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemultiset_comparsionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            of_key635_last = of_key635.tree.get();
            	        	            stream_of_key.add(of_key635.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_concatenation_in_multiset_comparsion8624);
            	        concatenation636=concatenation();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiset_comparsionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            concatenation636_last = concatenation636.tree.get();
            	            stream_concatenation.add(concatenation636.tree);
            	        }

            	        // AST REWRITE
            	        // elements: concatenation, multiset_type, multiset_comparsion
            	        // token labels: 
            	        // rule labels: retval
            	        // token list labels: 
            	        // rule list labels: 
            	        // wildcard labels: 
            	        if ( this->get_backtracking()==0 ) {
            	        retval.tree = std::move(root_0);
            	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        // 850:9: -> ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) )
            	        {
            	        	// OracleDML.g:850:12: ^( multiset_type $multiset_comparsion ^( EXPR concatenation ) )
            	        	{
            	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_multiset_type.nextNode(), root_1);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	// OracleDML.g:850:49: ^( EXPR concatenation )
            	        	{
            	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_concatenation.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	        	}
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	}
            	        }


            	        //retval.tree = std::move(root_0);
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemultiset_comparsionEx; /* Prevent compiler warnings */
    rulemultiset_comparsionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multiset_comparsion */

/**
 * $ANTLR start multiset_type
 * OracleDML.g:853:1: multiset_type : ( member_key | submultiset_key );
 */
OracleDML::multiset_type_return
OracleDML::multiset_type()
{
    OracleDML::multiset_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::member_key_return member_key637;
    ImplTraits::TreeTypePtr::pointer member_key637_last = NULL;
    OracleDML_OracleDMLKeys::submultiset_key_return submultiset_key638;
    ImplTraits::TreeTypePtr::pointer submultiset_key638_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:854:5: ( member_key | submultiset_key )

            ANTLR_UINT32 alt212;

            alt212=2;

            {
                ANTLR_UINT32 LA212_0 = this->LA(1);
                if ( (LA212_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "SUBMULTISET"))||((toUpper(LT(1)->getText()) == "MEMBER")))))
                {
                    {
                        ANTLR_UINT32 LA212_1 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "MEMBER")))
                        {
                            alt212=1;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "SUBMULTISET")))
                        {
                            alt212=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 212 );
                            ex->set_state( 1 );


                            goto rulemultiset_typeEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 212 );
                    ex->set_state( 0 );


                    goto rulemultiset_typeEx;

                }
            }
            switch (alt212)
            {
        	case 1:
        	    // OracleDML.g:854:10: member_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_member_key_in_multiset_type8669);
        	        member_key637=member_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiset_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, member_key637.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:855:10: submultiset_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_submultiset_key_in_multiset_type8680);
        	        submultiset_key638=submultiset_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiset_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, submultiset_key638.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulemultiset_typeEx; /* Prevent compiler warnings */
    rulemultiset_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multiset_type */

/**
 * $ANTLR start relational_expression
 * OracleDML.g:858:1: relational_expression : compound_expression ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )* ;
 */
OracleDML::relational_expression_return
OracleDML::relational_expression()
{
    OracleDML::relational_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP640 = NULL;
    ImplTraits::CommonTokenType const* LESS_THAN_OP642 = NULL;
    ImplTraits::CommonTokenType const* GREATER_THAN_OP643 = NULL;
    OracleDML::compound_expression_return compound_expression639;
    ImplTraits::TreeTypePtr::pointer compound_expression639_last = NULL;
    OracleDML_OracleDMLCommons::not_equal_op_return not_equal_op641;
    ImplTraits::TreeTypePtr::pointer not_equal_op641_last = NULL;
    OracleDML_OracleDMLCommons::less_than_or_equals_op_return less_than_or_equals_op644;
    ImplTraits::TreeTypePtr::pointer less_than_or_equals_op644_last = NULL;
    OracleDML_OracleDMLCommons::greater_than_or_equals_op_return greater_than_or_equals_op645;
    ImplTraits::TreeTypePtr::pointer greater_than_or_equals_op645_last = NULL;
    OracleDML::compound_expression_return compound_expression646;
    ImplTraits::TreeTypePtr::pointer compound_expression646_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP640_tree;
    ImplTraits::TreeTypePtr LESS_THAN_OP642_tree;
    ImplTraits::TreeTypePtr GREATER_THAN_OP643_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:859:5: ( compound_expression ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )* )
        // OracleDML.g:859:10: compound_expression ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_compound_expression_in_relational_expression8700);
            compound_expression639=compound_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerelational_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, compound_expression639.tree);


            // OracleDML.g:860:5: ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt214=2;
                switch ( this->LA(1) )
                {
                case EQUALS_OP:
                	{
                		alt214=1;
                	}
                    break;
                case NOT_EQUAL_OP:
                	{
                		alt214=1;
                	}
                    break;
                case LESS_THAN_OP:
                	{
                		alt214=1;
                	}
                    break;
                case EXCLAMATION_OPERATOR_PART:
                	{
                		alt214=1;
                	}
                    break;
                case CARRET_OPERATOR_PART:
                	{
                		alt214=1;
                	}
                    break;
                case GREATER_THAN_OP:
                	{
                		alt214=1;
                	}
                    break;
                case LESS_THAN_OR_EQUALS_OP:
                	{
                		alt214=1;
                	}
                    break;
                case GREATER_THAN_OR_EQUALS_OP:
                	{
                		alt214=1;
                	}
                    break;

                }

                switch (alt214)
                {
            	case 1:
            	    // OracleDML.g:860:7: ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression
            	    {
            	        // OracleDML.g:860:7: ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^)
            	        {
            	            ANTLR_UINT32 alt213=6;
            	            switch ( this->LA(1) )
            	            {
            	            case EQUALS_OP:
            	            	{
            	            		alt213=1;
            	            	}
            	                break;
            	            case CARRET_OPERATOR_PART:
            	            case EXCLAMATION_OPERATOR_PART:
            	            case NOT_EQUAL_OP:
            	            	{
            	            		alt213=2;
            	            	}
            	                break;
            	            case LESS_THAN_OP:
            	            	{
            	            		switch ( this->LA(2) )
            	            		{
            	            		case GREATER_THAN_OP:
            	            			{
            	            				alt213=2;
            	            			}
            	            		    break;
            	            		case EQUALS_OP:
            	            			{
            	            				alt213=5;
            	            			}
            	            		    break;
            	            		case APPROXIMATE_NUM_LIT:
            	            		case BINDVAR:
            	            		case CHAR_STRING:
            	            		case CHAR_STRING_PERL:
            	            		case COLON:
            	            		case DELIMITED_ID:
            	            		case EXACT_NUM_LIT:
            	            		case INTRODUCER:
            	            		case LEFT_PAREN:
            	            		case MINUS_SIGN:
            	            		case NATIONAL_CHAR_STRING_LIT:
            	            		case PLSQL_NON_RESERVED_CAST:
            	            		case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            	            		case PLUS_SIGN:
            	            		case REGULAR_ID:
            	            		case SQL92_RESERVED_ALL:
            	            		case SQL92_RESERVED_ANY:
            	            		case SQL92_RESERVED_CASE:
            	            		case SQL92_RESERVED_DATE:
            	            		case SQL92_RESERVED_DEFAULT:
            	            		case SQL92_RESERVED_DISTINCT:
            	            		case SQL92_RESERVED_EXISTS:
            	            		case SQL92_RESERVED_FALSE:
            	            		case SQL92_RESERVED_NULL:
            	            		case SQL92_RESERVED_PRIOR:
            	            		case SQL92_RESERVED_TRUE:
            	            		case UNSIGNED_INTEGER:
            	            			{
            	            				alt213=3;
            	            			}
            	            		    break;

            	            		default:
            	            		    if (this->get_backtracking()>0)
            	            		    {
            	            		        this->set_failedflag( true );
            	            		        return retval;
            	            		    }

            	            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		    ex->set_decisionNum( 213 );
            	            		    ex->set_state( 3 );


            	            		    goto rulerelational_expressionEx;

            	            		}

            	            	}
            	                break;
            	            case GREATER_THAN_OP:
            	            	{
            	            		switch ( this->LA(2) )
            	            		{
            	            		case EQUALS_OP:
            	            			{
            	            				alt213=6;
            	            			}
            	            		    break;
            	            		case APPROXIMATE_NUM_LIT:
            	            		case BINDVAR:
            	            		case CHAR_STRING:
            	            		case CHAR_STRING_PERL:
            	            		case COLON:
            	            		case DELIMITED_ID:
            	            		case EXACT_NUM_LIT:
            	            		case INTRODUCER:
            	            		case LEFT_PAREN:
            	            		case MINUS_SIGN:
            	            		case NATIONAL_CHAR_STRING_LIT:
            	            		case PLSQL_NON_RESERVED_CAST:
            	            		case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            	            		case PLUS_SIGN:
            	            		case REGULAR_ID:
            	            		case SQL92_RESERVED_ALL:
            	            		case SQL92_RESERVED_ANY:
            	            		case SQL92_RESERVED_CASE:
            	            		case SQL92_RESERVED_DATE:
            	            		case SQL92_RESERVED_DEFAULT:
            	            		case SQL92_RESERVED_DISTINCT:
            	            		case SQL92_RESERVED_EXISTS:
            	            		case SQL92_RESERVED_FALSE:
            	            		case SQL92_RESERVED_NULL:
            	            		case SQL92_RESERVED_PRIOR:
            	            		case SQL92_RESERVED_TRUE:
            	            		case UNSIGNED_INTEGER:
            	            			{
            	            				alt213=4;
            	            			}
            	            		    break;

            	            		default:
            	            		    if (this->get_backtracking()>0)
            	            		    {
            	            		        this->set_failedflag( true );
            	            		        return retval;
            	            		    }

            	            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		    ex->set_decisionNum( 213 );
            	            		    ex->set_state( 4 );


            	            		    goto rulerelational_expressionEx;

            	            		}

            	            	}
            	                break;
            	            case LESS_THAN_OR_EQUALS_OP:
            	            	{
            	            		alt213=5;
            	            	}
            	                break;
            	            case GREATER_THAN_OR_EQUALS_OP:
            	            	{
            	            		alt213=6;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 213 );
            	                ex->set_state( 0 );


            	                goto rulerelational_expressionEx;

            	            }

            	            switch (alt213)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:860:9: EQUALS_OP ^
            	        	    {
            	        	        EQUALS_OP640 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_relational_expression8710);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        EQUALS_OP640_tree = get_psrstate()->get_treeAdaptor()->create(EQUALS_OP640);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(EQUALS_OP640_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:860:22: not_equal_op ^
            	        	    {
            	        	        this->followPush(FOLLOW_not_equal_op_in_relational_expression8715);
            	        	        not_equal_op641=not_equal_op();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(not_equal_op641.tree, root_0);

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // OracleDML.g:860:38: LESS_THAN_OP ^
            	        	    {
            	        	        LESS_THAN_OP642 =  this->matchToken(LESS_THAN_OP, &FOLLOW_LESS_THAN_OP_in_relational_expression8720);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        LESS_THAN_OP642_tree = get_psrstate()->get_treeAdaptor()->create(LESS_THAN_OP642);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(LESS_THAN_OP642_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // OracleDML.g:860:54: GREATER_THAN_OP ^
            	        	    {
            	        	        GREATER_THAN_OP643 =  this->matchToken(GREATER_THAN_OP, &FOLLOW_GREATER_THAN_OP_in_relational_expression8725);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        GREATER_THAN_OP643_tree = get_psrstate()->get_treeAdaptor()->create(GREATER_THAN_OP643);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(GREATER_THAN_OP643_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 5:
            	        	    // OracleDML.g:860:73: less_than_or_equals_op ^
            	        	    {
            	        	        this->followPush(FOLLOW_less_than_or_equals_op_in_relational_expression8730);
            	        	        less_than_or_equals_op644=less_than_or_equals_op();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(less_than_or_equals_op644.tree, root_0);

            	        	    }
            	        	    break;
            	        	case 6:
            	        	    // OracleDML.g:860:99: greater_than_or_equals_op ^
            	        	    {
            	        	        this->followPush(FOLLOW_greater_than_or_equals_op_in_relational_expression8735);
            	        	        greater_than_or_equals_op645=greater_than_or_equals_op();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(greater_than_or_equals_op645.tree, root_0);

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_compound_expression_in_relational_expression8740);
            	        compound_expression646=compound_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulerelational_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, compound_expression646.tree);


            	    }
            	    break;

            	default:
            	    goto loop214;	/* break out of the loop */
            	    break;
                }
            }
            loop214: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulerelational_expressionEx; /* Prevent compiler warnings */
    rulerelational_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end relational_expression */

/**
 * $ANTLR start compound_expression
 * OracleDML.g:863:1: compound_expression : ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )? ;
 */
OracleDML::compound_expression_return
OracleDML::compound_expression()
{
    OracleDML::compound_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::concatenation_return concatenation647;
    ImplTraits::TreeTypePtr::pointer concatenation647_last = NULL;
    OracleDML_OracleDMLKeys::not_key_return not_key648;
    ImplTraits::TreeTypePtr::pointer not_key648_last = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key649;
    ImplTraits::TreeTypePtr::pointer in_key649_last = NULL;
    OracleDML::in_elements_return in_elements650;
    ImplTraits::TreeTypePtr::pointer in_elements650_last = NULL;
    OracleDML_OracleDMLKeys::between_key_return between_key651;
    ImplTraits::TreeTypePtr::pointer between_key651_last = NULL;
    OracleDML::between_elements_return between_elements652;
    ImplTraits::TreeTypePtr::pointer between_elements652_last = NULL;
    OracleDML::like_type_return like_type653;
    ImplTraits::TreeTypePtr::pointer like_type653_last = NULL;
    OracleDML::concatenation_return concatenation654;
    ImplTraits::TreeTypePtr::pointer concatenation654_last = NULL;
    OracleDML::like_escape_part_return like_escape_part655;
    ImplTraits::TreeTypePtr::pointer like_escape_part655_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_between_elements(get_psrstate()->get_treeAdaptor(), "rule between_elements");
    RewriteRuleSubtreeStream<ImplTraits> stream_like_escape_part(get_psrstate()->get_treeAdaptor(), "rule like_escape_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_between_key(get_psrstate()->get_treeAdaptor(), "rule between_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_not_key(get_psrstate()->get_treeAdaptor(), "rule not_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_like_type(get_psrstate()->get_treeAdaptor(), "rule like_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_elements(get_psrstate()->get_treeAdaptor(), "rule in_elements");

    /* Initialize rule variables
     */

        int isNegated = false;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:865:5: ( ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )? )
        // OracleDML.g:865:10: ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )?
        {
            // OracleDML.g:865:10: ( concatenation -> concatenation )
            // OracleDML.g:865:11: concatenation
            {
                this->followPush(FOLLOW_concatenation_in_compound_expression8771);
                concatenation647=concatenation();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulecompound_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    concatenation647_last = concatenation647.tree.get();
                    stream_concatenation.add(concatenation647.tree);
                }

                // AST REWRITE
                // elements: concatenation
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 865:25: -> concatenation
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_concatenation.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:866:5: ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )?
            {
                ANTLR_UINT32 alt218=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_NOT:
                    	{
                    		alt218=1;
                    	}
                        break;
                    case SQL92_RESERVED_IN:
                    	{
                    		alt218=1;
                    	}
                        break;
                    case SQL92_RESERVED_BETWEEN:
                    	{
                    		alt218=1;
                    	}
                        break;
                    case SQL92_RESERVED_LIKE:
                    	{
                    		alt218=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA218_5 = this->LA(2);
                    		    if ( ((((toUpper(LT(1)->getText()) == "LIKE4"))||((toUpper(LT(1)->getText()) == "LIKE2"))||((toUpper(LT(1)->getText()) == "LIKEC")))))
                    		    {
                    		        alt218=1;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt218)
                {
            	case 1:
            	    // OracleDML.g:866:10: ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) )
            	    {
            	        // OracleDML.g:866:10: ( not_key )?
            	        {
            	            ANTLR_UINT32 alt215=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_NOT:
            	                	{
            	                		alt215=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt215)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:866:11: not_key
            	        	    {
            	        	        this->followPush(FOLLOW_not_key_in_compound_expression8788);
            	        	        not_key648=not_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            not_key648_last = not_key648.tree.get();
            	        	            stream_not_key.add(not_key648.tree);
            	        	        }

            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            isNegated = true;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:867:9: ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) )
            	        {
            	            ANTLR_UINT32 alt217=3;
            	            {
            	                ANTLR_UINT32 LA217_0 = this->LA(1);
            	                if ( (LA217_0 == SQL92_RESERVED_IN))
            	                {
            	                    alt217=1;
            	                }
            	                else if ( (LA217_0 == SQL92_RESERVED_BETWEEN))
            	                {
            	                    alt217=2;
            	                }
            	                else if ( (LA217_0 == SQL92_RESERVED_LIKE))
            	                {
            	                    alt217=3;
            	                }
            	                else if ( (LA217_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "LIKE4"))||((toUpper(LT(1)->getText()) == "LIKE2"))||((toUpper(LT(1)->getText()) == "LIKEC")))))
            	                {
            	                    alt217=3;
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return retval;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 217 );
            	                    ex->set_state( 0 );


            	                    goto rulecompound_expressionEx;

            	                }
            	            }
            	            switch (alt217)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:867:14: in_key in_elements
            	        	    {
            	        	        this->followPush(FOLLOW_in_key_in_compound_expression8808);
            	        	        in_key649=in_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            in_key649_last = in_key649.tree.get();
            	        	            stream_in_key.add(in_key649.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_in_elements_in_compound_expression8810);
            	        	        in_elements650=in_elements();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            in_elements650_last = in_elements650.tree.get();
            	        	            stream_in_elements.add(in_elements650.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: in_key, in_elements, in_elements, compound_expression, compound_expression
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 868:17: -> {isNegated}? ^( NOT_IN $compound_expression in_elements )
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:868:33: ^( NOT_IN $compound_expression in_elements )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NOT_IN, "NOT_IN"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_in_elements.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 869:17: -> ^( in_key $compound_expression in_elements )
            	        	        {
            	        	        	// OracleDML.g:869:20: ^( in_key $compound_expression in_elements )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_in_elements.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:870:14: between_key between_elements
            	        	    {
            	        	        this->followPush(FOLLOW_between_key_in_compound_expression8881);
            	        	        between_key651=between_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            between_key651_last = between_key651.tree.get();
            	        	            stream_between_key.add(between_key651.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_between_elements_in_compound_expression8883);
            	        	        between_elements652=between_elements();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            between_elements652_last = between_elements652.tree.get();
            	        	            stream_between_elements.add(between_elements652.tree);
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: compound_expression, compound_expression, between_elements, between_key, between_elements
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 871:17: -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements )
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:871:33: ^( NOT_BETWEEN $compound_expression between_elements )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_between_elements.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 872:17: -> ^( between_key $compound_expression between_elements )
            	        	        {
            	        	        	// OracleDML.g:872:20: ^( between_key $compound_expression between_elements )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_between_key.nextNode(), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_between_elements.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // OracleDML.g:873:14: like_type concatenation ( like_escape_part )?
            	        	    {
            	        	        this->followPush(FOLLOW_like_type_in_compound_expression8954);
            	        	        like_type653=like_type();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            like_type653_last = like_type653.tree.get();
            	        	            stream_like_type.add(like_type653.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_concatenation_in_compound_expression8956);
            	        	        concatenation654=concatenation();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecompound_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            concatenation654_last = concatenation654.tree.get();
            	        	            stream_concatenation.add(concatenation654.tree);
            	        	        }

            	        	        // OracleDML.g:873:38: ( like_escape_part )?
            	        	        {
            	        	            ANTLR_UINT32 alt216=2;
            	        	            switch ( this->LA(1) )
            	        	            {
            	        	                case REGULAR_ID:
            	        	                	{
            	        	                		{
            	        	                		    ANTLR_UINT32 LA216_1 = this->LA(2);
            	        	                		    if ( ((toUpper(LT(1)->getText()) == "ESCAPE")))
            	        	                		    {
            	        	                		        alt216=1;
            	        	                		    }
            	        	                		}
            	        	                	}
            	        	                    break;
            	        	            }

            	        	            switch (alt216)
            	        	            {
            	        	        	case 1:
            	        	        	    // OracleDML.g:873:38: like_escape_part
            	        	        	    {
            	        	        	        this->followPush(FOLLOW_like_escape_part_in_compound_expression8958);
            	        	        	        like_escape_part655=like_escape_part();

            	        	        	        this->followPop();
            	        	        	        if  (this->hasException())
            	        	        	        {
            	        	        	            goto rulecompound_expressionEx;
            	        	        	        }
            	        	        	        if (this->hasFailed())
            	        	        	        {
            	        	        	            return retval;
            	        	        	        }

            	        	        	        if ( this->get_backtracking()==0 ) 
            	        	        	        {
            	        	        	            like_escape_part655_last = like_escape_part655.tree.get();
            	        	        	            stream_like_escape_part.add(like_escape_part655.tree);
            	        	        	        }

            	        	        	    }
            	        	        	    break;

            	        	            }
            	        	        }

            	        	        // AST REWRITE
            	        	        // elements: concatenation, compound_expression, concatenation, compound_expression, like_escape_part, like_type, like_escape_part
            	        	        // token labels: 
            	        	        // rule labels: retval
            	        	        // token list labels: 
            	        	        // rule list labels: 
            	        	        // wildcard labels: 
            	        	        if ( this->get_backtracking()==0 ) {
            	        	        retval.tree = std::move(root_0);
            	        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        	        // 874:17: -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
            	        	        if (isNegated) {
            	        	        	// OracleDML.g:874:33: ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NOT_LIKE, "NOT_LIKE"), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	// OracleDML.g:874:65: ^( EXPR concatenation )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_concatenation.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	        	        	}
            	        	        	// OracleDML.g:874:87: ( like_escape_part )?
            	        	        	if ( stream_like_escape_part.hasNext() ) {
            	        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_like_escape_part.nextTree());
            	        	        	}
            	        	        	stream_like_escape_part.reset();

            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }

            	        	        else // 875:17: -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
            	        	        {
            	        	        	// OracleDML.g:875:20: ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_like_type.nextNode(), root_1);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	        	// OracleDML.g:875:54: ^( EXPR concatenation )
            	        	        	{
            	        	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_concatenation.nextTree());
            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	        	        	}
            	        	        	// OracleDML.g:875:76: ( like_escape_part )?
            	        	        	if ( stream_like_escape_part.hasNext() ) {
            	        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_like_escape_part.nextTree());
            	        	        	}
            	        	        	stream_like_escape_part.reset();

            	        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	        	}
            	        	        }


            	        	        //retval.tree = std::move(root_0);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecompound_expressionEx; /* Prevent compiler warnings */
    rulecompound_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end compound_expression */

/**
 * $ANTLR start like_type
 * OracleDML.g:880:1: like_type : ( like_key | likec_key | like2_key | like4_key );
 */
OracleDML::like_type_return
OracleDML::like_type()
{
    OracleDML::like_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::like_key_return like_key656;
    ImplTraits::TreeTypePtr::pointer like_key656_last = NULL;
    OracleDML_OracleDMLKeys::likec_key_return likec_key657;
    ImplTraits::TreeTypePtr::pointer likec_key657_last = NULL;
    OracleDML_OracleDMLKeys::like2_key_return like2_key658;
    ImplTraits::TreeTypePtr::pointer like2_key658_last = NULL;
    OracleDML_OracleDMLKeys::like4_key_return like4_key659;
    ImplTraits::TreeTypePtr::pointer like4_key659_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:881:5: ( like_key | likec_key | like2_key | like4_key )

            ANTLR_UINT32 alt219;

            alt219=4;

            {
                ANTLR_UINT32 LA219_0 = this->LA(1);
                if ( (LA219_0 == SQL92_RESERVED_LIKE))
                {
                    alt219=1;
                }
                else if ( (LA219_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "LIKE4"))||((toUpper(LT(1)->getText()) == "LIKE2"))||((toUpper(LT(1)->getText()) == "LIKEC")))))
                {
                    {
                        ANTLR_UINT32 LA219_2 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "LIKEC")))
                        {
                            alt219=2;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "LIKE2")))
                        {
                            alt219=3;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "LIKE4")))
                        {
                            alt219=4;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 219 );
                            ex->set_state( 2 );


                            goto rulelike_typeEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 219 );
                    ex->set_state( 0 );


                    goto rulelike_typeEx;

                }
            }
            switch (alt219)
            {
        	case 1:
        	    // OracleDML.g:881:10: like_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_like_key_in_like_type9067);
        	        like_key656=like_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelike_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, like_key656.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:882:10: likec_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_likec_key_in_like_type9078);
        	        likec_key657=likec_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelike_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, likec_key657.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:883:10: like2_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_like2_key_in_like_type9089);
        	        like2_key658=like2_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelike_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, like2_key658.tree);


        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:884:10: like4_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_like4_key_in_like_type9100);
        	        like4_key659=like4_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelike_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, like4_key659.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulelike_typeEx; /* Prevent compiler warnings */
    rulelike_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end like_type */

/**
 * $ANTLR start like_escape_part
 * OracleDML.g:887:1: like_escape_part : escape_key concatenation -> ^( EXPR concatenation ) ;
 */
OracleDML::like_escape_part_return
OracleDML::like_escape_part()
{
    OracleDML::like_escape_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::escape_key_return escape_key660;
    ImplTraits::TreeTypePtr::pointer escape_key660_last = NULL;
    OracleDML::concatenation_return concatenation661;
    ImplTraits::TreeTypePtr::pointer concatenation661_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_escape_key(get_psrstate()->get_treeAdaptor(), "rule escape_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:888:5: ( escape_key concatenation -> ^( EXPR concatenation ) )
        // OracleDML.g:888:10: escape_key concatenation
        {
            this->followPush(FOLLOW_escape_key_in_like_escape_part9120);
            escape_key660=escape_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelike_escape_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                escape_key660_last = escape_key660.tree.get();
                stream_escape_key.add(escape_key660.tree);
            }

            this->followPush(FOLLOW_concatenation_in_like_escape_part9122);
            concatenation661=concatenation();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelike_escape_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                concatenation661_last = concatenation661.tree.get();
                stream_concatenation.add(concatenation661.tree);
            }

            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 889:9: -> ^( EXPR concatenation )
            {
            	// OracleDML.g:889:12: ^( EXPR concatenation )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulelike_escape_partEx; /* Prevent compiler warnings */
    rulelike_escape_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end like_escape_part */

/**
 * $ANTLR start in_elements
 * OracleDML.g:892:1: in_elements : ( ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN -> ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) | LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN -> ^( EXPR_LIST ( concatenation_wrapper )+ ) | constant -> ^( EXPR_LIST constant ) | bind_variable -> ^( EXPR_LIST bind_variable ) | general_element -> ^( EXPR_LIST general_element ) );
 */
OracleDML::in_elements_return
OracleDML::in_elements()
{
    OracleDML::in_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN662 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN664 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN665 = NULL;
    ImplTraits::CommonTokenType const* COMMA667 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN669 = NULL;
    OracleDML::subquery_return subquery663;
    ImplTraits::TreeTypePtr::pointer subquery663_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper666;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper666_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper668;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper668_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant670;
    ImplTraits::TreeTypePtr::pointer constant670_last = NULL;
    OracleDML_OracleDMLCommons::bind_variable_return bind_variable671;
    ImplTraits::TreeTypePtr::pointer bind_variable671_last = NULL;
    OracleDML_OracleDMLCommons::general_element_return general_element672;
    ImplTraits::TreeTypePtr::pointer general_element672_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN662_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN664_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN665_tree;
    ImplTraits::TreeTypePtr COMMA667_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN669_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation_wrapper(get_psrstate()->get_treeAdaptor(), "rule concatenation_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_bind_variable(get_psrstate()->get_treeAdaptor(), "rule bind_variable");
    RewriteRuleSubtreeStream<ImplTraits> stream_constant(get_psrstate()->get_treeAdaptor(), "rule constant");
    RewriteRuleSubtreeStream<ImplTraits> stream_general_element(get_psrstate()->get_treeAdaptor(), "rule general_element");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:894:5: ( ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN -> ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) | LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN -> ^( EXPR_LIST ( concatenation_wrapper )+ ) | constant -> ^( EXPR_LIST constant ) | bind_variable -> ^( EXPR_LIST bind_variable ) | general_element -> ^( EXPR_LIST general_element ) )

            ANTLR_UINT32 alt221;

            alt221=5;

            switch ( this->LA(1) )
            {
            case LEFT_PAREN:
            	{
            		{
            		    ANTLR_UINT32 LA221_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred26_OracleDML>() )))
            		    {
            		        alt221=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt221=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 221 );
            		        ex->set_state( 1 );


            		        goto rulein_elementsEx;

            		    }
            		}
            	}
                break;
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA221_2 = this->LA(2);
            		    if ( ((((toUpper(LT(1)->getText()) == "INTERVAL"))||((toUpper(LT(1)->getText()) == "MINVALUE"))||((toUpper(LT(1)->getText()) == "SESSIONTIMEZONE"))||((toUpper(LT(1)->getText()) == "TIMESTAMP"))||((toUpper(LT(1)->getText()) == "MAXVALUE"))||((toUpper(LT(1)->getText()) == "DBTIMEZONE")))))
            		    {
            		        alt221=3;
            		    }
            		    else if ( (true))
            		    {
            		        alt221=5;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 221 );
            		        ex->set_state( 2 );


            		        goto rulein_elementsEx;

            		    }
            		}
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case EXACT_NUM_LIT:
            case NATIONAL_CHAR_STRING_LIT:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt221=3;
            	}
                break;
            case BINDVAR:
            case COLON:
            	{
            		alt221=4;
            	}
                break;
            case DELIMITED_ID:
            case INTRODUCER:
            	{
            		alt221=5;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 221 );
                ex->set_state( 0 );


                goto rulein_elementsEx;

            }

            switch (alt221)
            {
        	case 1:
        	    // OracleDML.g:894:10: ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
        	    {
        	        LEFT_PAREN662 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_in_elements9180);
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN662);


        	        this->followPush(FOLLOW_subquery_in_in_elements9182);
        	        subquery663=subquery();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            subquery663_last = subquery663.tree.get();
        	            stream_subquery.add(subquery663.tree);
        	        }

        	        RIGHT_PAREN664 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_in_elements9184);
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN664);


        	        // AST REWRITE
        	        // elements: RIGHT_PAREN, LEFT_PAREN, subquery
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 895:10: -> ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN )
        	        {
        	        	// OracleDML.g:895:13: ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_SUBQUERY, "NESTED_SUBQUERY"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:896:10: LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN
        	    {
        	        LEFT_PAREN665 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_in_elements9216);
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN665);


        	        this->followPush(FOLLOW_concatenation_wrapper_in_in_elements9218);
        	        concatenation_wrapper666=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            concatenation_wrapper666_last = concatenation_wrapper666.tree.get();
        	            stream_concatenation_wrapper.add(concatenation_wrapper666.tree);
        	        }

        	        // OracleDML.g:896:43: ( COMMA concatenation_wrapper )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt220=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt220=1;
        	            	}
        	                break;

        	            }

        	            switch (alt220)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:896:44: COMMA concatenation_wrapper
        	        	    {
        	        	        COMMA667 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_in_elements9221);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulein_elementsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA667);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_in_elements9223);
        	        	        concatenation_wrapper668=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulein_elementsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            concatenation_wrapper668_last = concatenation_wrapper668.tree.get();
        	        	            stream_concatenation_wrapper.add(concatenation_wrapper668.tree);
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop220;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop220: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN669 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_in_elements9227);
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN669);


        	        // AST REWRITE
        	        // elements: concatenation_wrapper
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 897:10: -> ^( EXPR_LIST ( concatenation_wrapper )+ )
        	        {
        	        	// OracleDML.g:897:13: ^( EXPR_LIST ( concatenation_wrapper )+ )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, "EXPR_LIST"), root_1);
        	        	if ( !(stream_concatenation_wrapper.hasNext()) ) {
        	        		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "concatenation_wrapper empty" );
        	        		goto rulein_elementsEx;
        	        	}
        	        	while ( stream_concatenation_wrapper.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation_wrapper.nextTree());
        	        	}
        	        	stream_concatenation_wrapper.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:898:10: constant
        	    {
        	        this->followPush(FOLLOW_constant_in_in_elements9256);
        	        constant670=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            constant670_last = constant670.tree.get();
        	            stream_constant.add(constant670.tree);
        	        }

        	        // AST REWRITE
        	        // elements: constant
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 899:10: -> ^( EXPR_LIST constant )
        	        {
        	        	// OracleDML.g:899:13: ^( EXPR_LIST constant )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, "EXPR_LIST"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_constant.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:900:10: bind_variable
        	    {
        	        this->followPush(FOLLOW_bind_variable_in_in_elements9284);
        	        bind_variable671=bind_variable();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            bind_variable671_last = bind_variable671.tree.get();
        	            stream_bind_variable.add(bind_variable671.tree);
        	        }

        	        // AST REWRITE
        	        // elements: bind_variable
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 901:10: -> ^( EXPR_LIST bind_variable )
        	        {
        	        	// OracleDML.g:901:13: ^( EXPR_LIST bind_variable )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, "EXPR_LIST"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_bind_variable.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:902:10: general_element
        	    {
        	        this->followPush(FOLLOW_general_element_in_in_elements9312);
        	        general_element672=general_element();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulein_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            general_element672_last = general_element672.tree.get();
        	            stream_general_element.add(general_element672.tree);
        	        }

        	        // AST REWRITE
        	        // elements: general_element
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 903:10: -> ^( EXPR_LIST general_element )
        	        {
        	        	// OracleDML.g:903:13: ^( EXPR_LIST general_element )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR_LIST, "EXPR_LIST"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_general_element.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulein_elementsEx; /* Prevent compiler warnings */
    rulein_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end in_elements */

/**
 * $ANTLR start between_elements
 * OracleDML.g:906:1: between_elements : cn1= concatenation and_key cn2= concatenation -> ^( EXPR $cn1) ^( EXPR $cn2) ;
 */
OracleDML::between_elements_return
OracleDML::between_elements()
{
    OracleDML::between_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::concatenation_return cn1;
    ImplTraits::TreeTypePtr::pointer cn1_last = NULL;
    OracleDML::concatenation_return cn2;
    ImplTraits::TreeTypePtr::pointer cn2_last = NULL;
    OracleDML_OracleDMLKeys::and_key_return and_key673;
    ImplTraits::TreeTypePtr::pointer and_key673_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_and_key(get_psrstate()->get_treeAdaptor(), "rule and_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:907:5: (cn1= concatenation and_key cn2= concatenation -> ^( EXPR $cn1) ^( EXPR $cn2) )
        // OracleDML.g:907:10: cn1= concatenation and_key cn2= concatenation
        {
            this->followPush(FOLLOW_concatenation_in_between_elements9351);
            cn1=concatenation();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetween_elementsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                cn1_last = cn1.tree.get();
                stream_concatenation.add(cn1.tree);
            }

            this->followPush(FOLLOW_and_key_in_between_elements9353);
            and_key673=and_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetween_elementsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                and_key673_last = and_key673.tree.get();
                stream_and_key.add(and_key673.tree);
            }

            this->followPush(FOLLOW_concatenation_in_between_elements9357);
            cn2=concatenation();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetween_elementsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                cn2_last = cn2.tree.get();
                stream_concatenation.add(cn2.tree);
            }

            // AST REWRITE
            // elements: cn2, cn1
            // token labels: 
            // rule labels: retval, cn2, cn1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
            RewriteRuleSubtreeStream<ImplTraits> stream_cn2(get_psrstate()->get_treeAdaptor(), "rule cn2",cn2_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_cn1(get_psrstate()->get_treeAdaptor(), "rule cn1",cn1_last); // rewrite alias

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 908:9: -> ^( EXPR $cn1) ^( EXPR $cn2)
            {
            	// OracleDML.g:908:12: ^( EXPR $cn1)
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cn1.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            	// OracleDML.g:908:25: ^( EXPR $cn2)
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cn2.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulebetween_elementsEx; /* Prevent compiler warnings */
    rulebetween_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end between_elements */

/**
 * $ANTLR start concatenation
 * OracleDML.g:911:1: concatenation : additive_expression ( concatenation_op ^ additive_expression )* ;
 */
OracleDML::concatenation_return
OracleDML::concatenation()
{
    OracleDML::concatenation_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::additive_expression_return additive_expression674;
    ImplTraits::TreeTypePtr::pointer additive_expression674_last = NULL;
    OracleDML_OracleDMLCommons::concatenation_op_return concatenation_op675;
    ImplTraits::TreeTypePtr::pointer concatenation_op675_last = NULL;
    OracleDML::additive_expression_return additive_expression676;
    ImplTraits::TreeTypePtr::pointer additive_expression676_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:912:5: ( additive_expression ( concatenation_op ^ additive_expression )* )
        // OracleDML.g:912:10: additive_expression ( concatenation_op ^ additive_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_additive_expression_in_concatenation9402);
            additive_expression674=additive_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconcatenationEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, additive_expression674.tree);


            // OracleDML.g:912:30: ( concatenation_op ^ additive_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt222=2;
                switch ( this->LA(1) )
                {
                case CONCATENATION_OP:
                	{
                		alt222=1;
                	}
                    break;
                case VERTICAL_BAR:
                	{
                		alt222=1;
                	}
                    break;

                }

                switch (alt222)
                {
            	case 1:
            	    // OracleDML.g:912:31: concatenation_op ^ additive_expression
            	    {
            	        this->followPush(FOLLOW_concatenation_op_in_concatenation9405);
            	        concatenation_op675=concatenation_op();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconcatenationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(concatenation_op675.tree, root_0);

            	        this->followPush(FOLLOW_additive_expression_in_concatenation9408);
            	        additive_expression676=additive_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleconcatenationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, additive_expression676.tree);


            	    }
            	    break;

            	default:
            	    goto loop222;	/* break out of the loop */
            	    break;
                }
            }
            loop222: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconcatenationEx; /* Prevent compiler warnings */
    ruleconcatenationEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end concatenation */

/**
 * $ANTLR start concatenation_wrapper
 * OracleDML.g:915:1: concatenation_wrapper : concatenation -> ^( EXPR concatenation ) ;
 */
OracleDML::concatenation_wrapper_return
OracleDML::concatenation_wrapper()
{
    OracleDML::concatenation_wrapper_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::concatenation_return concatenation677;
    ImplTraits::TreeTypePtr::pointer concatenation677_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:916:5: ( concatenation -> ^( EXPR concatenation ) )
        // OracleDML.g:916:10: concatenation
        {
            this->followPush(FOLLOW_concatenation_in_concatenation_wrapper9430);
            concatenation677=concatenation();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleconcatenation_wrapperEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                concatenation677_last = concatenation677.tree.get();
                stream_concatenation.add(concatenation677.tree);
            }

            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 917:9: -> ^( EXPR concatenation )
            {
            	// OracleDML.g:917:12: ^( EXPR concatenation )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleconcatenation_wrapperEx; /* Prevent compiler warnings */
    ruleconcatenation_wrapperEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end concatenation_wrapper */

/**
 * $ANTLR start additive_expression
 * OracleDML.g:920:1: additive_expression : multiply_expression ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )* ;
 */
OracleDML::additive_expression_return
OracleDML::additive_expression()
{
    OracleDML::additive_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* PLUS_SIGN679 = NULL;
    ImplTraits::CommonTokenType const* MINUS_SIGN680 = NULL;
    OracleDML::multiply_expression_return multiply_expression678;
    ImplTraits::TreeTypePtr::pointer multiply_expression678_last = NULL;
    OracleDML::multiply_expression_return multiply_expression681;
    ImplTraits::TreeTypePtr::pointer multiply_expression681_last = NULL;
    ImplTraits::TreeTypePtr PLUS_SIGN679_tree;
    ImplTraits::TreeTypePtr MINUS_SIGN680_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:921:5: ( multiply_expression ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )* )
        // OracleDML.g:921:10: multiply_expression ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_multiply_expression_in_additive_expression9466);
            multiply_expression678=multiply_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadditive_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multiply_expression678.tree);


            // OracleDML.g:921:30: ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt224=2;
                switch ( this->LA(1) )
                {
                case PLUS_SIGN:
                	{
                		alt224=1;
                	}
                    break;
                case MINUS_SIGN:
                	{
                		alt224=1;
                	}
                    break;

                }

                switch (alt224)
                {
            	case 1:
            	    // OracleDML.g:921:32: ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression
            	    {
            	        // OracleDML.g:921:32: ( PLUS_SIGN ^| MINUS_SIGN ^)
            	        {
            	            ANTLR_UINT32 alt223=2;
            	            switch ( this->LA(1) )
            	            {
            	            case PLUS_SIGN:
            	            	{
            	            		alt223=1;
            	            	}
            	                break;
            	            case MINUS_SIGN:
            	            	{
            	            		alt223=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 223 );
            	                ex->set_state( 0 );


            	                goto ruleadditive_expressionEx;

            	            }

            	            switch (alt223)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:921:34: PLUS_SIGN ^
            	        	    {
            	        	        PLUS_SIGN679 =  this->matchToken(PLUS_SIGN, &FOLLOW_PLUS_SIGN_in_additive_expression9472);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleadditive_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        PLUS_SIGN679_tree = get_psrstate()->get_treeAdaptor()->create(PLUS_SIGN679);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(PLUS_SIGN679_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:921:47: MINUS_SIGN ^
            	        	    {
            	        	        MINUS_SIGN680 =  this->matchToken(MINUS_SIGN, &FOLLOW_MINUS_SIGN_in_additive_expression9477);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleadditive_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        MINUS_SIGN680_tree = get_psrstate()->get_treeAdaptor()->create(MINUS_SIGN680);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(MINUS_SIGN680_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_multiply_expression_in_additive_expression9482);
            	        multiply_expression681=multiply_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleadditive_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multiply_expression681.tree);


            	    }
            	    break;

            	default:
            	    goto loop224;	/* break out of the loop */
            	    break;
                }
            }
            loop224: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleadditive_expressionEx; /* Prevent compiler warnings */
    ruleadditive_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end additive_expression */

/**
 * $ANTLR start multiply_expression
 * OracleDML.g:924:1: multiply_expression : datetime_expression ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )* ;
 */
OracleDML::multiply_expression_return
OracleDML::multiply_expression()
{
    OracleDML::multiply_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* ASTERISK683 = NULL;
    ImplTraits::CommonTokenType const* SOLIDUS684 = NULL;
    OracleDML::datetime_expression_return datetime_expression682;
    ImplTraits::TreeTypePtr::pointer datetime_expression682_last = NULL;
    OracleDML::datetime_expression_return datetime_expression685;
    ImplTraits::TreeTypePtr::pointer datetime_expression685_last = NULL;
    ImplTraits::TreeTypePtr ASTERISK683_tree;
    ImplTraits::TreeTypePtr SOLIDUS684_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:925:5: ( datetime_expression ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )* )
        // OracleDML.g:925:10: datetime_expression ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_datetime_expression_in_multiply_expression9504);
            datetime_expression682=datetime_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultiply_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, datetime_expression682.tree);


            // OracleDML.g:925:30: ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt226=2;
                switch ( this->LA(1) )
                {
                case ASTERISK:
                	{
                		alt226=1;
                	}
                    break;
                case SOLIDUS:
                	{
                		alt226=1;
                	}
                    break;

                }

                switch (alt226)
                {
            	case 1:
            	    // OracleDML.g:925:32: ( ASTERISK ^| SOLIDUS ^) datetime_expression
            	    {
            	        // OracleDML.g:925:32: ( ASTERISK ^| SOLIDUS ^)
            	        {
            	            ANTLR_UINT32 alt225=2;
            	            switch ( this->LA(1) )
            	            {
            	            case ASTERISK:
            	            	{
            	            		alt225=1;
            	            	}
            	                break;
            	            case SOLIDUS:
            	            	{
            	            		alt225=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 225 );
            	                ex->set_state( 0 );


            	                goto rulemultiply_expressionEx;

            	            }

            	            switch (alt225)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:925:34: ASTERISK ^
            	        	    {
            	        	        ASTERISK683 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_multiply_expression9510);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemultiply_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        ASTERISK683_tree = get_psrstate()->get_treeAdaptor()->create(ASTERISK683);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(ASTERISK683_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:925:46: SOLIDUS ^
            	        	    {
            	        	        SOLIDUS684 =  this->matchToken(SOLIDUS, &FOLLOW_SOLIDUS_in_multiply_expression9515);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemultiply_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) {
            	        	        SOLIDUS684_tree = get_psrstate()->get_treeAdaptor()->create(SOLIDUS684);
            	        	        root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(SOLIDUS684_tree, root_0);
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_datetime_expression_in_multiply_expression9520);
            	        datetime_expression685=datetime_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiply_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, datetime_expression685.tree);


            	    }
            	    break;

            	default:
            	    goto loop226;	/* break out of the loop */
            	    break;
                }
            }
            loop226: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemultiply_expressionEx; /* Prevent compiler warnings */
    rulemultiply_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multiply_expression */

/**
 * $ANTLR start datetime_expression
 * OracleDML.g:928:1: datetime_expression : ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )? ;
 */
OracleDML::datetime_expression_return
OracleDML::datetime_expression()
{
    OracleDML::datetime_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::model_expression_return model_expression686;
    ImplTraits::TreeTypePtr::pointer model_expression686_last = NULL;
    OracleDML_OracleDMLKeys::at_key_return at_key687;
    ImplTraits::TreeTypePtr::pointer at_key687_last = NULL;
    OracleDML_OracleDMLKeys::local_key_return local_key688;
    ImplTraits::TreeTypePtr::pointer local_key688_last = NULL;
    OracleDML_OracleDMLKeys::time_key_return time_key689;
    ImplTraits::TreeTypePtr::pointer time_key689_last = NULL;
    OracleDML_OracleDMLKeys::zone_key_return zone_key690;
    ImplTraits::TreeTypePtr::pointer zone_key690_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper691;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper691_last = NULL;
    OracleDML::interval_expression_return interval_expression692;
    ImplTraits::TreeTypePtr::pointer interval_expression692_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_at_key(get_psrstate()->get_treeAdaptor(), "rule at_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation_wrapper(get_psrstate()->get_treeAdaptor(), "rule concatenation_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_expression(get_psrstate()->get_treeAdaptor(), "rule model_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_local_key(get_psrstate()->get_treeAdaptor(), "rule local_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_zone_key(get_psrstate()->get_treeAdaptor(), "rule zone_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_interval_expression(get_psrstate()->get_treeAdaptor(), "rule interval_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_time_key(get_psrstate()->get_treeAdaptor(), "rule time_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:929:5: ( ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )? )
        // OracleDML.g:929:10: ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )?
        {
            // OracleDML.g:929:10: ( model_expression -> model_expression )
            // OracleDML.g:929:11: model_expression
            {
                this->followPush(FOLLOW_model_expression_in_datetime_expression9543);
                model_expression686=model_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruledatetime_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    model_expression686_last = model_expression686.tree.get();
                    stream_model_expression.add(model_expression686.tree);
                }

                // AST REWRITE
                // elements: model_expression
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 929:28: -> model_expression
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_model_expression.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:930:5: ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )?
            {
                ANTLR_UINT32 alt228=3;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA228_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "AT")))
                    		    {
                    		        alt228=1;
                    		    }
                    		    else if ( (( ((((toUpper(LT(1)->getText()) == "YEAR"))||((toUpper(LT(1)->getText()) == "DAY")))) && (this->msynpred( antlr3::ClassForwarder<synpred27_OracleDML>() )) )))
                    		    {
                    		        alt228=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt228)
                {
            	case 1:
            	    // OracleDML.g:930:10: at_key ( local_key | time_key zone_key concatenation_wrapper )
            	    {
            	        this->followPush(FOLLOW_at_key_in_datetime_expression9559);
            	        at_key687=at_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledatetime_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            at_key687_last = at_key687.tree.get();
            	            stream_at_key.add(at_key687.tree);
            	        }

            	        // OracleDML.g:930:17: ( local_key | time_key zone_key concatenation_wrapper )
            	        {
            	            ANTLR_UINT32 alt227=2;
            	            switch ( this->LA(1) )
            	            {
            	            case REGULAR_ID:
            	            	{
            	            		{
            	            		    ANTLR_UINT32 LA227_1 = this->LA(2);
            	            		    if ( ((toUpper(LT(1)->getText()) == "LOCAL")))
            	            		    {
            	            		        alt227=1;
            	            		    }
            	            		    else if ( ((toUpper(LT(1)->getText()) == "TIME")))
            	            		    {
            	            		        alt227=2;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 227 );
            	            		        ex->set_state( 1 );


            	            		        goto ruledatetime_expressionEx;

            	            		    }
            	            		}
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 227 );
            	                ex->set_state( 0 );


            	                goto ruledatetime_expressionEx;

            	            }

            	            switch (alt227)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:930:18: local_key
            	        	    {
            	        	        this->followPush(FOLLOW_local_key_in_datetime_expression9562);
            	        	        local_key688=local_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruledatetime_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            local_key688_last = local_key688.tree.get();
            	        	            stream_local_key.add(local_key688.tree);
            	        	        }

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:930:28: time_key zone_key concatenation_wrapper
            	        	    {
            	        	        this->followPush(FOLLOW_time_key_in_datetime_expression9564);
            	        	        time_key689=time_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruledatetime_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            time_key689_last = time_key689.tree.get();
            	        	            stream_time_key.add(time_key689.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_zone_key_in_datetime_expression9566);
            	        	        zone_key690=zone_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruledatetime_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            zone_key690_last = zone_key690.tree.get();
            	        	            stream_zone_key.add(zone_key690.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_concatenation_wrapper_in_datetime_expression9568);
            	        	        concatenation_wrapper691=concatenation_wrapper();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruledatetime_expressionEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            concatenation_wrapper691_last = concatenation_wrapper691.tree.get();
            	        	            stream_concatenation_wrapper.add(concatenation_wrapper691.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        // AST REWRITE
            	        // elements: concatenation_wrapper, time_key, at_key, local_key, datetime_expression
            	        // token labels: 
            	        // rule labels: retval
            	        // token list labels: 
            	        // rule list labels: 
            	        // wildcard labels: 
            	        if ( this->get_backtracking()==0 ) {
            	        retval.tree = std::move(root_0);
            	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        // 931:13: -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) )
            	        {
            	        	// OracleDML.g:931:16: ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) )
            	        	{
            	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DATETIME_OP, "DATETIME_OP"), root_1);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	// OracleDML.g:931:51: ^( at_key ( local_key )? ( time_key )? concatenation_wrapper )
            	        	{
            	        	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_at_key.nextNode(), root_2);
            	        	// OracleDML.g:931:60: ( local_key )?
            	        	if ( stream_local_key.hasNext() ) {
            	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_local_key.nextTree());
            	        	}
            	        	stream_local_key.reset();

            	        	// OracleDML.g:931:71: ( time_key )?
            	        	if ( stream_time_key.hasNext() ) {
            	        		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_time_key.nextTree());
            	        	}
            	        	stream_time_key.reset();

            	        	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_concatenation_wrapper.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	        	}
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	}
            	        }


            	        //retval.tree = std::move(root_0);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:932:10: ( interval_expression )=> interval_expression
            	    {
            	        this->followPush(FOLLOW_interval_expression_in_datetime_expression9618);
            	        interval_expression692=interval_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledatetime_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            interval_expression692_last = interval_expression692.tree.get();
            	            stream_interval_expression.add(interval_expression692.tree);
            	        }

            	        // AST REWRITE
            	        // elements: interval_expression, datetime_expression
            	        // token labels: 
            	        // rule labels: retval
            	        // token list labels: 
            	        // rule list labels: 
            	        // wildcard labels: 
            	        if ( this->get_backtracking()==0 ) {
            	        retval.tree = std::move(root_0);
            	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        // 933:13: -> ^( DATETIME_OP $datetime_expression interval_expression )
            	        {
            	        	// OracleDML.g:933:16: ^( DATETIME_OP $datetime_expression interval_expression )
            	        	{
            	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(DATETIME_OP, "DATETIME_OP"), root_1);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_interval_expression.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	}
            	        }


            	        //retval.tree = std::move(root_0);
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruledatetime_expressionEx; /* Prevent compiler warnings */
    ruledatetime_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end datetime_expression */

/**
 * $ANTLR start interval_expression
 * OracleDML.g:937:1: interval_expression : ( day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )? -> ^( day_key ( $cn1)? to_key second_key ( $cn2)? ) | year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key -> ^( year_key to_key month_key concatenation_wrapper ) );
 */
OracleDML::interval_expression_return
OracleDML::interval_expression()
{
    OracleDML::interval_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN694 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN695 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN698 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN699 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN701 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN703 = NULL;
    OracleDML::concatenation_wrapper_return cn1;
    ImplTraits::TreeTypePtr::pointer cn1_last = NULL;
    OracleDML::concatenation_wrapper_return cn2;
    ImplTraits::TreeTypePtr::pointer cn2_last = NULL;
    OracleDML_OracleDMLKeys::day_key_return day_key693;
    ImplTraits::TreeTypePtr::pointer day_key693_last = NULL;
    OracleDML_OracleDMLKeys::to_key_return to_key696;
    ImplTraits::TreeTypePtr::pointer to_key696_last = NULL;
    OracleDML_OracleDMLKeys::second_key_return second_key697;
    ImplTraits::TreeTypePtr::pointer second_key697_last = NULL;
    OracleDML_OracleDMLKeys::year_key_return year_key700;
    ImplTraits::TreeTypePtr::pointer year_key700_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper702;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper702_last = NULL;
    OracleDML_OracleDMLKeys::to_key_return to_key704;
    ImplTraits::TreeTypePtr::pointer to_key704_last = NULL;
    OracleDML_OracleDMLKeys::month_key_return month_key705;
    ImplTraits::TreeTypePtr::pointer month_key705_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN694_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN695_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN698_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN699_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN701_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN703_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_year_key(get_psrstate()->get_treeAdaptor(), "rule year_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_day_key(get_psrstate()->get_treeAdaptor(), "rule day_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_second_key(get_psrstate()->get_treeAdaptor(), "rule second_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation_wrapper(get_psrstate()->get_treeAdaptor(), "rule concatenation_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_to_key(get_psrstate()->get_treeAdaptor(), "rule to_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_month_key(get_psrstate()->get_treeAdaptor(), "rule month_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:938:5: ( day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )? -> ^( day_key ( $cn1)? to_key second_key ( $cn2)? ) | year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key -> ^( year_key to_key month_key concatenation_wrapper ) )

            ANTLR_UINT32 alt232;

            alt232=2;

            {
                ANTLR_UINT32 LA232_0 = this->LA(1);
                if ( (LA232_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "YEAR"))||((toUpper(LT(1)->getText()) == "DAY")))))
                {
                    {
                        ANTLR_UINT32 LA232_1 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "DAY")))
                        {
                            alt232=1;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "YEAR")))
                        {
                            alt232=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 232 );
                            ex->set_state( 1 );


                            goto ruleinterval_expressionEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 232 );
                    ex->set_state( 0 );


                    goto ruleinterval_expressionEx;

                }
            }
            switch (alt232)
            {
        	case 1:
        	    // OracleDML.g:938:10: day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?
        	    {
        	        this->followPush(FOLLOW_day_key_in_interval_expression9668);
        	        day_key693=day_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            day_key693_last = day_key693.tree.get();
        	            stream_day_key.add(day_key693.tree);
        	        }

        	        // OracleDML.g:938:19: ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )?
        	        {
        	            ANTLR_UINT32 alt229=2;
        	            switch ( this->LA(1) )
        	            {
        	                case LEFT_PAREN:
        	                	{
        	                		alt229=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt229)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:938:20: LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN
        	        	    {
        	        	        LEFT_PAREN694 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_interval_expression9672);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN694);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_interval_expression9676);
        	        	        cn1=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            cn1_last = cn1.tree.get();
        	        	            stream_concatenation_wrapper.add(cn1.tree);
        	        	        }

        	        	        RIGHT_PAREN695 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_interval_expression9678);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN695);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_to_key_in_interval_expression9682);
        	        to_key696=to_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            to_key696_last = to_key696.tree.get();
        	            stream_to_key.add(to_key696.tree);
        	        }

        	        this->followPush(FOLLOW_second_key_in_interval_expression9684);
        	        second_key697=second_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            second_key697_last = second_key697.tree.get();
        	            stream_second_key.add(second_key697.tree);
        	        }

        	        // OracleDML.g:938:89: ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?
        	        {
        	            ANTLR_UINT32 alt230=2;
        	            switch ( this->LA(1) )
        	            {
        	                case LEFT_PAREN:
        	                	{
        	                		alt230=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt230)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:938:90: LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN
        	        	    {
        	        	        LEFT_PAREN698 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_interval_expression9687);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN698);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_interval_expression9691);
        	        	        cn2=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            cn2_last = cn2.tree.get();
        	        	            stream_concatenation_wrapper.add(cn2.tree);
        	        	        }

        	        	        RIGHT_PAREN699 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_interval_expression9693);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN699);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: to_key, cn1, day_key, second_key, cn2
        	        // token labels: 
        	        // rule labels: retval, cn2, cn1
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
        	        RewriteRuleSubtreeStream<ImplTraits> stream_cn2(get_psrstate()->get_treeAdaptor(), "rule cn2",cn2_last); // rewrite alias
        	        RewriteRuleSubtreeStream<ImplTraits> stream_cn1(get_psrstate()->get_treeAdaptor(), "rule cn1",cn1_last); // rewrite alias

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 939:9: -> ^( day_key ( $cn1)? to_key second_key ( $cn2)? )
        	        {
        	        	// OracleDML.g:939:12: ^( day_key ( $cn1)? to_key second_key ( $cn2)? )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_day_key.nextNode(), root_1);
        	        	// OracleDML.g:939:23: ( $cn1)?
        	        	if ( stream_cn1.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cn1.nextTree());
        	        	}
        	        	stream_cn1.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_to_key.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_second_key.nextTree());
        	        	// OracleDML.g:939:47: ( $cn2)?
        	        	if ( stream_cn2.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_cn2.nextTree());
        	        	}
        	        	stream_cn2.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:940:10: year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key
        	    {
        	        this->followPush(FOLLOW_year_key_in_interval_expression9732);
        	        year_key700=year_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            year_key700_last = year_key700.tree.get();
        	            stream_year_key.add(year_key700.tree);
        	        }

        	        // OracleDML.g:940:19: ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )?
        	        {
        	            ANTLR_UINT32 alt231=2;
        	            switch ( this->LA(1) )
        	            {
        	                case LEFT_PAREN:
        	                	{
        	                		alt231=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt231)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:940:20: LEFT_PAREN concatenation_wrapper RIGHT_PAREN
        	        	    {
        	        	        LEFT_PAREN701 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_interval_expression9735);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN701);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_interval_expression9737);
        	        	        concatenation_wrapper702=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            concatenation_wrapper702_last = concatenation_wrapper702.tree.get();
        	        	            stream_concatenation_wrapper.add(concatenation_wrapper702.tree);
        	        	        }

        	        	        RIGHT_PAREN703 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_interval_expression9739);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleinterval_expressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN703);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_to_key_in_interval_expression9743);
        	        to_key704=to_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            to_key704_last = to_key704.tree.get();
        	            stream_to_key.add(to_key704.tree);
        	        }

        	        this->followPush(FOLLOW_month_key_in_interval_expression9745);
        	        month_key705=month_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinterval_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            month_key705_last = month_key705.tree.get();
        	            stream_month_key.add(month_key705.tree);
        	        }

        	        // AST REWRITE
        	        // elements: year_key, month_key, concatenation_wrapper, to_key
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 941:9: -> ^( year_key to_key month_key concatenation_wrapper )
        	        {
        	        	// OracleDML.g:941:12: ^( year_key to_key month_key concatenation_wrapper )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_year_key.nextNode(), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_to_key.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_month_key.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation_wrapper.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleinterval_expressionEx; /* Prevent compiler warnings */
    ruleinterval_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end interval_expression */

/**
 * $ANTLR start model_expression
 * OracleDML.g:944:1: model_expression : ( multiset_expression -> multiset_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )? ;
 */
OracleDML::model_expression_return
OracleDML::model_expression()
{
    OracleDML::model_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_BRACKET707 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_BRACKET709 = NULL;
    OracleDML::multiset_expression_return multiset_expression706;
    ImplTraits::TreeTypePtr::pointer multiset_expression706_last = NULL;
    OracleDML::model_expression_element_return model_expression_element708;
    ImplTraits::TreeTypePtr::pointer model_expression_element708_last = NULL;
    ImplTraits::TreeTypePtr LEFT_BRACKET707_tree;
    ImplTraits::TreeTypePtr RIGHT_BRACKET709_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_BRACKET(get_psrstate()->get_treeAdaptor(), "token LEFT_BRACKET");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_BRACKET(get_psrstate()->get_treeAdaptor(), "token RIGHT_BRACKET");
    RewriteRuleSubtreeStream<ImplTraits> stream_multiset_expression(get_psrstate()->get_treeAdaptor(), "rule multiset_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_model_expression_element(get_psrstate()->get_treeAdaptor(), "rule model_expression_element");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:945:5: ( ( multiset_expression -> multiset_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )? )
        // OracleDML.g:945:10: ( multiset_expression -> multiset_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )?
        {
            // OracleDML.g:945:10: ( multiset_expression -> multiset_expression )
            // OracleDML.g:945:11: multiset_expression
            {
                this->followPush(FOLLOW_multiset_expression_in_model_expression9786);
                multiset_expression706=multiset_expression();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulemodel_expressionEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) 
                {
                    multiset_expression706_last = multiset_expression706.tree.get();
                    stream_multiset_expression.add(multiset_expression706.tree);
                }

                // AST REWRITE
                // elements: multiset_expression
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if ( this->get_backtracking()==0 ) {
                retval.tree = std::move(root_0);
                RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

                root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
                // 945:31: -> multiset_expression
                {
                	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_multiset_expression.nextTree());
                }


                //retval.tree = std::move(root_0);
                }

            }


            // OracleDML.g:946:9: ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )?
            {
                ANTLR_UINT32 alt233=2;
                switch ( this->LA(1) )
                {
                    case LEFT_BRACKET:
                    	{
                    		alt233=1;
                    	}
                        break;
                }

                switch (alt233)
                {
            	case 1:
            	    // OracleDML.g:946:10: LEFT_BRACKET model_expression_element RIGHT_BRACKET
            	    {
            	        LEFT_BRACKET707 =  this->matchToken(LEFT_BRACKET, &FOLLOW_LEFT_BRACKET_in_model_expression9802);
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET707);


            	        this->followPush(FOLLOW_model_expression_element_in_model_expression9804);
            	        model_expression_element708=model_expression_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            model_expression_element708_last = model_expression_element708.tree.get();
            	            stream_model_expression_element.add(model_expression_element708.tree);
            	        }

            	        RIGHT_BRACKET709 =  this->matchToken(RIGHT_BRACKET, &FOLLOW_RIGHT_BRACKET_in_model_expression9806);
            	        if  (this->hasException())
            	        {
            	            goto rulemodel_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET709);


            	        // AST REWRITE
            	        // elements: model_expression, model_expression_element
            	        // token labels: 
            	        // rule labels: retval
            	        // token list labels: 
            	        // rule list labels: 
            	        // wildcard labels: 
            	        if ( this->get_backtracking()==0 ) {
            	        retval.tree = std::move(root_0);
            	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            	        // 947:13: -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element )
            	        {
            	        	// OracleDML.g:947:16: ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element )
            	        	{
            	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(MODEL_EXPRESSION, LEFT_BRACKET707), root_1);
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_retval.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_model_expression_element.nextTree());
            	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	        	}
            	        }


            	        //retval.tree = std::move(root_0);
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_expressionEx; /* Prevent compiler warnings */
    rulemodel_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_expression */

/**
 * $ANTLR start model_expression_element
 * OracleDML.g:950:1: model_expression_element : ( ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )* | single_column_for_loop ( COMMA ! single_column_for_loop )* | multi_column_for_loop );
 */
OracleDML::model_expression_element_return
OracleDML::model_expression_element()
{
    OracleDML::model_expression_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA712 = NULL;
    ImplTraits::CommonTokenType const* COMMA716 = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key710;
    ImplTraits::TreeTypePtr::pointer any_key710_last = NULL;
    OracleDML::condition_wrapper_return condition_wrapper711;
    ImplTraits::TreeTypePtr::pointer condition_wrapper711_last = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key713;
    ImplTraits::TreeTypePtr::pointer any_key713_last = NULL;
    OracleDML::condition_wrapper_return condition_wrapper714;
    ImplTraits::TreeTypePtr::pointer condition_wrapper714_last = NULL;
    OracleDML::single_column_for_loop_return single_column_for_loop715;
    ImplTraits::TreeTypePtr::pointer single_column_for_loop715_last = NULL;
    OracleDML::single_column_for_loop_return single_column_for_loop717;
    ImplTraits::TreeTypePtr::pointer single_column_for_loop717_last = NULL;
    OracleDML::multi_column_for_loop_return multi_column_for_loop718;
    ImplTraits::TreeTypePtr::pointer multi_column_for_loop718_last = NULL;
    ImplTraits::TreeTypePtr COMMA712_tree;
    ImplTraits::TreeTypePtr COMMA716_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:951:5: ( ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )* | single_column_for_loop ( COMMA ! single_column_for_loop )* | multi_column_for_loop )

            ANTLR_UINT32 alt238;

            alt238=3;

            switch ( this->LA(1) )
            {
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case REGULAR_ID:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt238=1;
            	}
                break;
            case SQL92_RESERVED_FOR:
            	{
            		switch ( this->LA(2) )
            		{
            		case DELIMITED_ID:
            		case INTRODUCER:
            		case REGULAR_ID:
            			{
            				alt238=2;
            			}
            		    break;
            		case LEFT_PAREN:
            			{
            				alt238=3;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 238 );
            		    ex->set_state( 2 );


            		    goto rulemodel_expression_elementEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 238 );
                ex->set_state( 0 );


                goto rulemodel_expression_elementEx;

            }

            switch (alt238)
            {
        	case 1:
        	    // OracleDML.g:951:10: ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )*
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:951:10: ( ( any_key )=> any_key | condition_wrapper )
        	        {
        	            ANTLR_UINT32 alt234=2;
        	            switch ( this->LA(1) )
        	            {
        	            case SQL92_RESERVED_ANY:
        	            	{
        	            		{
        	            		    ANTLR_UINT32 LA234_1 = this->LA(2);
        	            		    if ( (LA234_1 == COMMA) && (this->msynpred( antlr3::ClassForwarder<synpred28_OracleDML>() )))
        	            		    {
        	            		        alt234=1;
        	            		    }
        	            		    else if ( (LA234_1 == RIGHT_BRACKET) && (this->msynpred( antlr3::ClassForwarder<synpred28_OracleDML>() )))
        	            		    {
        	            		        alt234=1;
        	            		    }
        	            		    else if ( (LA234_1 == LEFT_PAREN))
        	            		    {
        	            		        alt234=2;
        	            		    }
        	            		    else
        	            		    {
        	            		        if (this->get_backtracking()>0)
        	            		        {
        	            		            this->set_failedflag( true );
        	            		            return retval;
        	            		        }


        	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		        ex->set_decisionNum( 234 );
        	            		        ex->set_state( 1 );


        	            		        goto rulemodel_expression_elementEx;

        	            		    }
        	            		}
        	            	}
        	                break;
        	            case APPROXIMATE_NUM_LIT:
        	            case BINDVAR:
        	            case CHAR_STRING:
        	            case CHAR_STRING_PERL:
        	            case COLON:
        	            case DELIMITED_ID:
        	            case EXACT_NUM_LIT:
        	            case INTRODUCER:
        	            case LEFT_PAREN:
        	            case MINUS_SIGN:
        	            case NATIONAL_CHAR_STRING_LIT:
        	            case PLSQL_NON_RESERVED_CAST:
        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	            case PLUS_SIGN:
        	            case REGULAR_ID:
        	            case SQL92_RESERVED_ALL:
        	            case SQL92_RESERVED_CASE:
        	            case SQL92_RESERVED_CURSOR:
        	            case SQL92_RESERVED_DATE:
        	            case SQL92_RESERVED_DEFAULT:
        	            case SQL92_RESERVED_DISTINCT:
        	            case SQL92_RESERVED_EXISTS:
        	            case SQL92_RESERVED_FALSE:
        	            case SQL92_RESERVED_NOT:
        	            case SQL92_RESERVED_NULL:
        	            case SQL92_RESERVED_PRIOR:
        	            case SQL92_RESERVED_TRUE:
        	            case UNSIGNED_INTEGER:
        	            	{
        	            		alt234=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 234 );
        	                ex->set_state( 0 );


        	                goto rulemodel_expression_elementEx;

        	            }

        	            switch (alt234)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:951:11: ( any_key )=> any_key
        	        	    {
        	        	        this->followPush(FOLLOW_any_key_in_model_expression_element9858);
        	        	        any_key710=any_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, any_key710.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:951:31: condition_wrapper
        	        	    {
        	        	        this->followPush(FOLLOW_condition_wrapper_in_model_expression_element9860);
        	        	        condition_wrapper711=condition_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, condition_wrapper711.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:951:50: ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt236=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt236=1;
        	            	}
        	                break;

        	            }

        	            switch (alt236)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:951:51: COMMA ! ( ( any_key )=> any_key | condition_wrapper )
        	        	    {
        	        	        COMMA712 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_model_expression_element9864);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        // OracleDML.g:951:58: ( ( any_key )=> any_key | condition_wrapper )
        	        	        {
        	        	            ANTLR_UINT32 alt235=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case SQL92_RESERVED_ANY:
        	        	            	{
        	        	            		{
        	        	            		    ANTLR_UINT32 LA235_1 = this->LA(2);
        	        	            		    if ( (LA235_1 == RIGHT_BRACKET) && (this->msynpred( antlr3::ClassForwarder<synpred29_OracleDML>() )))
        	        	            		    {
        	        	            		        alt235=1;
        	        	            		    }
        	        	            		    else if ( (LA235_1 == COMMA) && (this->msynpred( antlr3::ClassForwarder<synpred29_OracleDML>() )))
        	        	            		    {
        	        	            		        alt235=1;
        	        	            		    }
        	        	            		    else if ( (LA235_1 == LEFT_PAREN))
        	        	            		    {
        	        	            		        alt235=2;
        	        	            		    }
        	        	            		    else
        	        	            		    {
        	        	            		        if (this->get_backtracking()>0)
        	        	            		        {
        	        	            		            this->set_failedflag( true );
        	        	            		            return retval;
        	        	            		        }


        	        	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	            		        ex->set_decisionNum( 235 );
        	        	            		        ex->set_state( 1 );


        	        	            		        goto rulemodel_expression_elementEx;

        	        	            		    }
        	        	            		}
        	        	            	}
        	        	                break;
        	        	            case APPROXIMATE_NUM_LIT:
        	        	            case BINDVAR:
        	        	            case CHAR_STRING:
        	        	            case CHAR_STRING_PERL:
        	        	            case COLON:
        	        	            case DELIMITED_ID:
        	        	            case EXACT_NUM_LIT:
        	        	            case INTRODUCER:
        	        	            case LEFT_PAREN:
        	        	            case MINUS_SIGN:
        	        	            case NATIONAL_CHAR_STRING_LIT:
        	        	            case PLSQL_NON_RESERVED_CAST:
        	        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	        	            case PLUS_SIGN:
        	        	            case REGULAR_ID:
        	        	            case SQL92_RESERVED_ALL:
        	        	            case SQL92_RESERVED_CASE:
        	        	            case SQL92_RESERVED_CURSOR:
        	        	            case SQL92_RESERVED_DATE:
        	        	            case SQL92_RESERVED_DEFAULT:
        	        	            case SQL92_RESERVED_DISTINCT:
        	        	            case SQL92_RESERVED_EXISTS:
        	        	            case SQL92_RESERVED_FALSE:
        	        	            case SQL92_RESERVED_NOT:
        	        	            case SQL92_RESERVED_NULL:
        	        	            case SQL92_RESERVED_PRIOR:
        	        	            case SQL92_RESERVED_TRUE:
        	        	            case UNSIGNED_INTEGER:
        	        	            	{
        	        	            		alt235=2;
        	        	            	}
        	        	                break;

        	        	            default:
        	        	                if (this->get_backtracking()>0)
        	        	                {
        	        	                    this->set_failedflag( true );
        	        	                    return retval;
        	        	                }

        	        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                ex->set_decisionNum( 235 );
        	        	                ex->set_state( 0 );


        	        	                goto rulemodel_expression_elementEx;

        	        	            }

        	        	            switch (alt235)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:951:59: ( any_key )=> any_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_any_key_in_model_expression_element9873);
        	        	        	        any_key713=any_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulemodel_expression_elementEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, any_key713.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:951:79: condition_wrapper
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_condition_wrapper_in_model_expression_element9875);
        	        	        	        condition_wrapper714=condition_wrapper();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulemodel_expression_elementEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, condition_wrapper714.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop236;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop236: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:952:10: single_column_for_loop ( COMMA ! single_column_for_loop )*
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_single_column_for_loop_in_model_expression_element9889);
        	        single_column_for_loop715=single_column_for_loop();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemodel_expression_elementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, single_column_for_loop715.tree);


        	        // OracleDML.g:952:33: ( COMMA ! single_column_for_loop )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt237=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt237=1;
        	            	}
        	                break;

        	            }

        	            switch (alt237)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:952:34: COMMA ! single_column_for_loop
        	        	    {
        	        	        COMMA716 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_model_expression_element9892);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_single_column_for_loop_in_model_expression_element9895);
        	        	        single_column_for_loop717=single_column_for_loop();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemodel_expression_elementEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, single_column_for_loop717.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop237;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop237: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:953:10: multi_column_for_loop
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_multi_column_for_loop_in_model_expression_element9908);
        	        multi_column_for_loop718=multi_column_for_loop();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemodel_expression_elementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, multi_column_for_loop718.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulemodel_expression_elementEx; /* Prevent compiler warnings */
    rulemodel_expression_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end model_expression_element */

/**
 * $ANTLR start single_column_for_loop
 * OracleDML.g:956:1: single_column_for_loop : for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression ) -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) ) -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? ) ;
 */
OracleDML::single_column_for_loop_return
OracleDML::single_column_for_loop()
{
    OracleDML::single_column_for_loop_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return ex1;
    ImplTraits::TreeTypePtr::pointer ex1_last = NULL;
    OracleDML::expression_return ex2;
    ImplTraits::TreeTypePtr::pointer ex2_last = NULL;
    OracleDML::expression_return ex3;
    ImplTraits::TreeTypePtr::pointer ex3_last = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key719;
    ImplTraits::TreeTypePtr::pointer for_key719_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name720;
    ImplTraits::TreeTypePtr::pointer column_name720_last = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key721;
    ImplTraits::TreeTypePtr::pointer in_key721_last = NULL;
    OracleDML::expression_list_return expression_list722;
    ImplTraits::TreeTypePtr::pointer expression_list722_last = NULL;
    OracleDML::for_like_part_return for_like_part723;
    ImplTraits::TreeTypePtr::pointer for_like_part723_last = NULL;
    OracleDML_OracleDMLKeys::from_key_return from_key724;
    ImplTraits::TreeTypePtr::pointer from_key724_last = NULL;
    OracleDML_OracleDMLKeys::to_key_return to_key725;
    ImplTraits::TreeTypePtr::pointer to_key725_last = NULL;
    OracleDML::for_increment_decrement_type_return for_increment_decrement_type726;
    ImplTraits::TreeTypePtr::pointer for_increment_decrement_type726_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_list(get_psrstate()->get_treeAdaptor(), "rule expression_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_like_part(get_psrstate()->get_treeAdaptor(), "rule for_like_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_to_key(get_psrstate()->get_treeAdaptor(), "rule to_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_increment_decrement_type(get_psrstate()->get_treeAdaptor(), "rule for_increment_decrement_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_from_key(get_psrstate()->get_treeAdaptor(), "rule from_key");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:958:5: ( for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression ) -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) ) -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? ) )
        // OracleDML.g:958:10: for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression )
        {
            this->followPush(FOLLOW_for_key_in_single_column_for_loop9936);
            for_key719=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesingle_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key719_last = for_key719.tree.get();
                stream_for_key.add(for_key719.tree);
            }

            this->followPush(FOLLOW_column_name_in_single_column_for_loop9938);
            column_name720=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesingle_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                column_name720_last = column_name720.tree.get();
                stream_column_name.add(column_name720.tree);
            }

            // OracleDML.g:959:5: ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression )
            {
                ANTLR_UINT32 alt240=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_IN:
                	{
                		alt240=1;
                	}
                    break;
                case SQL92_RESERVED_FROM:
                case SQL92_RESERVED_LIKE:
                	{
                		alt240=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 240 );
                    ex->set_state( 0 );


                    goto rulesingle_column_for_loopEx;

                }

                switch (alt240)
                {
            	case 1:
            	    // OracleDML.g:959:10: in_key expression_list
            	    {
            	        this->followPush(FOLLOW_in_key_in_single_column_for_loop9950);
            	        in_key721=in_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            in_key721_last = in_key721.tree.get();
            	            stream_in_key.add(in_key721.tree);
            	        }

            	        this->followPush(FOLLOW_expression_list_in_single_column_for_loop9952);
            	        expression_list722=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_list722_last = expression_list722.tree.get();
            	            stream_expression_list.add(expression_list722.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:960:10: ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression
            	    {
            	        // OracleDML.g:960:10: ( for_like_part )?
            	        {
            	            ANTLR_UINT32 alt239=2;
            	            switch ( this->LA(1) )
            	            {
            	                case SQL92_RESERVED_LIKE:
            	                	{
            	                		alt239=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt239)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:960:10: for_like_part
            	        	    {
            	        	        this->followPush(FOLLOW_for_like_part_in_single_column_for_loop9965);
            	        	        for_like_part723=for_like_part();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesingle_column_for_loopEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            for_like_part723_last = for_like_part723.tree.get();
            	        	            stream_for_like_part.add(for_like_part723.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_from_key_in_single_column_for_loop9968);
            	        from_key724=from_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            from_key724_last = from_key724.tree.get();
            	            stream_from_key.add(from_key724.tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_single_column_for_loop9972);
            	        ex1=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            ex1_last = ex1.tree.get();
            	            stream_expression.add(ex1.tree);
            	        }

            	        this->followPush(FOLLOW_to_key_in_single_column_for_loop9986);
            	        to_key725=to_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            to_key725_last = to_key725.tree.get();
            	            stream_to_key.add(to_key725.tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_single_column_for_loop9990);
            	        ex2=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            ex2_last = ex2.tree.get();
            	            stream_expression.add(ex2.tree);
            	        }

            	        this->followPush(FOLLOW_for_increment_decrement_type_in_single_column_for_loop9992);
            	        for_increment_decrement_type726=for_increment_decrement_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_increment_decrement_type726_last = for_increment_decrement_type726.tree.get();
            	            stream_for_increment_decrement_type.add(for_increment_decrement_type726.tree);
            	        }

            	        this->followPush(FOLLOW_expression_in_single_column_for_loop9996);
            	        ex3=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesingle_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            ex3_last = ex3.tree.get();
            	            stream_expression.add(ex3.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression_list, ex3, for_like_part, for_increment_decrement_type, column_name, from_key, ex2, ex1, in_key, column_name, to_key
            // token labels: 
            // rule labels: retval, ex3, ex2, ex1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval
            RewriteRuleSubtreeStream<ImplTraits> stream_ex3(get_psrstate()->get_treeAdaptor(), "rule ex3",ex3_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_ex2(get_psrstate()->get_treeAdaptor(), "rule ex2",ex2_last); // rewrite alias
            RewriteRuleSubtreeStream<ImplTraits> stream_ex1(get_psrstate()->get_treeAdaptor(), "rule ex1",ex1_last); // rewrite alias

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 963:9: -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) )
            if (mode == 1) {
            	// OracleDML.g:963:24: ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(FOR_SINGLE_COLUMN, (for_key719.start)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	// OracleDML.g:963:72: ^( in_key expression_list )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression_list.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 964:9: -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? )
            {
            	// OracleDML.g:964:12: ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(FOR_SINGLE_COLUMN, (for_key719.start)), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	// OracleDML.g:964:60: ^( from_key ^( EXPR $ex1) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_from_key.nextNode(), root_2);
            	// OracleDML.g:964:71: ^( EXPR $ex1)
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_ex1.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:964:85: ^( to_key ^( EXPR $ex2) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_to_key.nextNode(), root_2);
            	// OracleDML.g:964:94: ^( EXPR $ex2)
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_ex2.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:964:108: ^( for_increment_decrement_type ^( EXPR $ex3) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_for_increment_decrement_type.nextNode(), root_2);
            	// OracleDML.g:964:139: ^( EXPR $ex3)
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_3);
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, stream_ex3.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:964:153: ( for_like_part )?
            	if ( stream_for_like_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_for_like_part.nextTree());
            	}
            	stream_for_like_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesingle_column_for_loopEx; /* Prevent compiler warnings */
    rulesingle_column_for_loopEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end single_column_for_loop */

/**
 * $ANTLR start for_like_part
 * OracleDML.g:967:1: for_like_part : like_key expression -> ^( like_key ^( EXPR expression ) ) ;
 */
OracleDML::for_like_part_return
OracleDML::for_like_part()
{
    OracleDML::for_like_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::like_key_return like_key727;
    ImplTraits::TreeTypePtr::pointer like_key727_last = NULL;
    OracleDML::expression_return expression728;
    ImplTraits::TreeTypePtr::pointer expression728_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_like_key(get_psrstate()->get_treeAdaptor(), "rule like_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:968:5: ( like_key expression -> ^( like_key ^( EXPR expression ) ) )
        // OracleDML.g:968:10: like_key expression
        {
            this->followPush(FOLLOW_like_key_in_for_like_part10105);
            like_key727=like_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_like_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                like_key727_last = like_key727.tree.get();
                stream_like_key.add(like_key727.tree);
            }

            this->followPush(FOLLOW_expression_in_for_like_part10107);
            expression728=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefor_like_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression728_last = expression728.tree.get();
                stream_expression.add(expression728.tree);
            }

            // AST REWRITE
            // elements: expression, like_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 969:9: -> ^( like_key ^( EXPR expression ) )
            {
            	// OracleDML.g:969:12: ^( like_key ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_like_key.nextNode(), root_1);
            	// OracleDML.g:969:23: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_like_partEx; /* Prevent compiler warnings */
    rulefor_like_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_like_part */

/**
 * $ANTLR start for_increment_decrement_type
 * OracleDML.g:972:1: for_increment_decrement_type : ( increment_key | decrement_key );
 */
OracleDML::for_increment_decrement_type_return
OracleDML::for_increment_decrement_type()
{
    OracleDML::for_increment_decrement_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::increment_key_return increment_key729;
    ImplTraits::TreeTypePtr::pointer increment_key729_last = NULL;
    OracleDML_OracleDMLKeys::decrement_key_return decrement_key730;
    ImplTraits::TreeTypePtr::pointer decrement_key730_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:973:5: ( increment_key | decrement_key )

            ANTLR_UINT32 alt241;

            alt241=2;

            {
                ANTLR_UINT32 LA241_0 = this->LA(1);
                if ( (LA241_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "DECREMENT"))||((toUpper(LT(1)->getText()) == "INCREMENT")))))
                {
                    {
                        ANTLR_UINT32 LA241_1 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "INCREMENT")))
                        {
                            alt241=1;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "DECREMENT")))
                        {
                            alt241=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 241 );
                            ex->set_state( 1 );


                            goto rulefor_increment_decrement_typeEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 241 );
                    ex->set_state( 0 );


                    goto rulefor_increment_decrement_typeEx;

                }
            }
            switch (alt241)
            {
        	case 1:
        	    // OracleDML.g:973:10: increment_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_increment_key_in_for_increment_decrement_type10147);
        	        increment_key729=increment_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_increment_decrement_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, increment_key729.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:974:10: decrement_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_decrement_key_in_for_increment_decrement_type10158);
        	        decrement_key730=decrement_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulefor_increment_decrement_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, decrement_key730.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulefor_increment_decrement_typeEx; /* Prevent compiler warnings */
    rulefor_increment_decrement_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end for_increment_decrement_type */

/**
 * $ANTLR start multi_column_for_loop
 * OracleDML.g:977:1: multi_column_for_loop : for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) ) ;
 */
OracleDML::multi_column_for_loop_return
OracleDML::multi_column_for_loop()
{
    OracleDML::multi_column_for_loop_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN732 = NULL;
    ImplTraits::CommonTokenType const* COMMA734 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN736 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN738 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN740 = NULL;
    ImplTraits::CommonTokenType const* COMMA742 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN744 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN745 = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key731;
    ImplTraits::TreeTypePtr::pointer for_key731_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name733;
    ImplTraits::TreeTypePtr::pointer column_name733_last = NULL;
    OracleDML_OracleDMLCommons::column_name_return column_name735;
    ImplTraits::TreeTypePtr::pointer column_name735_last = NULL;
    OracleDML_OracleDMLKeys::in_key_return in_key737;
    ImplTraits::TreeTypePtr::pointer in_key737_last = NULL;
    OracleDML::subquery_return subquery739;
    ImplTraits::TreeTypePtr::pointer subquery739_last = NULL;
    OracleDML::expression_list_return expression_list741;
    ImplTraits::TreeTypePtr::pointer expression_list741_last = NULL;
    OracleDML::expression_list_return expression_list743;
    ImplTraits::TreeTypePtr::pointer expression_list743_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN732_tree;
    ImplTraits::TreeTypePtr COMMA734_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN736_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN738_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN740_tree;
    ImplTraits::TreeTypePtr COMMA742_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN744_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN745_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_list(get_psrstate()->get_treeAdaptor(), "rule expression_list");
    RewriteRuleSubtreeStream<ImplTraits> stream_column_name(get_psrstate()->get_treeAdaptor(), "rule column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:978:5: ( for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) ) )
        // OracleDML.g:978:10: for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN
        {
            this->followPush(FOLLOW_for_key_in_multi_column_for_loop10178);
            for_key731=for_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                for_key731_last = for_key731.tree.get();
                stream_for_key.add(for_key731.tree);
            }

            LEFT_PAREN732 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_multi_column_for_loop10180);
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN732);


            this->followPush(FOLLOW_column_name_in_multi_column_for_loop10182);
            column_name733=column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                column_name733_last = column_name733.tree.get();
                stream_column_name.add(column_name733.tree);
            }

            // OracleDML.g:978:41: ( COMMA column_name )*

            for (;;)
            {
                ANTLR_UINT32 alt242=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt242=1;
                	}
                    break;

                }

                switch (alt242)
                {
            	case 1:
            	    // OracleDML.g:978:42: COMMA column_name
            	    {
            	        COMMA734 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_multi_column_for_loop10185);
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA734);


            	        this->followPush(FOLLOW_column_name_in_multi_column_for_loop10187);
            	        column_name735=column_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_name735_last = column_name735.tree.get();
            	            stream_column_name.add(column_name735.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop242;	/* break out of the loop */
            	    break;
                }
            }
            loop242: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN736 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10191);
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN736);


            this->followPush(FOLLOW_in_key_in_multi_column_for_loop10193);
            in_key737=in_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                in_key737_last = in_key737.tree.get();
                stream_in_key.add(in_key737.tree);
            }

            LEFT_PAREN738 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_multi_column_for_loop10203);
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN738);


            // OracleDML.g:980:13: ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN )
            {
                ANTLR_UINT32 alt244=2;
                {
                    ANTLR_UINT32 LA244_0 = this->LA(1);
                    if ( (LA244_0 == SQL92_RESERVED_SELECT) && (this->msynpred( antlr3::ClassForwarder<synpred30_OracleDML>() )))
                    {
                        alt244=1;
                    }
                    else if ( (LA244_0 == LEFT_PAREN))
                    {
                        {
                            ANTLR_UINT32 LA244_2 = this->LA(2);
                            if ( (this->msynpred( antlr3::ClassForwarder<synpred30_OracleDML>() )))
                            {
                                alt244=1;
                            }
                            else if ( (this->msynpred( antlr3::ClassForwarder<synpred31_OracleDML>() )))
                            {
                                alt244=2;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 244 );
                                ex->set_state( 2 );


                                goto rulemulti_column_for_loopEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 244 );
                        ex->set_state( 0 );


                        goto rulemulti_column_for_loopEx;

                    }
                }
                switch (alt244)
                {
            	case 1:
            	    // OracleDML.g:980:18: ( select_key )=> subquery
            	    {
            	        this->followPush(FOLLOW_subquery_in_multi_column_for_loop10227);
            	        subquery739=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery739_last = subquery739.tree.get();
            	            stream_subquery.add(subquery739.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:981:18: ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN
            	    {
            	        LEFT_PAREN740 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_multi_column_for_loop10251);
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN740);


            	        this->followPush(FOLLOW_expression_list_in_multi_column_for_loop10253);
            	        expression_list741=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_list741_last = expression_list741.tree.get();
            	            stream_expression_list.add(expression_list741.tree);
            	        }

            	        // OracleDML.g:981:60: ( COMMA expression_list )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt243=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt243=1;
            	            	}
            	                break;

            	            }

            	            switch (alt243)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:981:61: COMMA expression_list
            	        	    {
            	        	        COMMA742 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_multi_column_for_loop10256);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemulti_column_for_loopEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }
            	        	         
            	        	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA742);


            	        	        this->followPush(FOLLOW_expression_list_in_multi_column_for_loop10258);
            	        	        expression_list743=expression_list();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulemulti_column_for_loopEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            expression_list743_last = expression_list743.tree.get();
            	        	            stream_expression_list.add(expression_list743.tree);
            	        	        }

            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop243;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop243: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN744 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10262);
            	        if  (this->hasException())
            	        {
            	            goto rulemulti_column_for_loopEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN744);


            	    }
            	    break;

                }
            }

            RIGHT_PAREN745 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_multi_column_for_loop10286);
            if  (this->hasException())
            {
                goto rulemulti_column_for_loopEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN745);


            // AST REWRITE
            // elements: expression_list, in_key, column_name, subquery
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 984:9: -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) )
            {
            	// OracleDML.g:984:12: ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(FOR_MULTI_COLUMN, (for_key731.start)), root_1);
            	if ( !(stream_column_name.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "column_name empty" );
            		goto rulemulti_column_for_loopEx;
            	}
            	while ( stream_column_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_name.nextTree());
            	}
            	stream_column_name.reset();

            	// OracleDML.g:984:60: ^( in_key ( subquery )? ( expression_list )* )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_in_key.nextNode(), root_2);
            	// OracleDML.g:984:69: ( subquery )?
            	if ( stream_subquery.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_subquery.nextTree());
            	}
            	stream_subquery.reset();

            	// OracleDML.g:984:79: ( expression_list )*
            	while ( stream_expression_list.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression_list.nextTree());
            	}
            	stream_expression_list.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemulti_column_for_loopEx; /* Prevent compiler warnings */
    rulemulti_column_for_loopEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multi_column_for_loop */

/**
 * $ANTLR start multiset_expression
 * OracleDML.g:987:1: multiset_expression : unary_expression ( multiset_op ^ unary_expression )* ;
 */
OracleDML::multiset_expression_return
OracleDML::multiset_expression()
{
    OracleDML::multiset_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::unary_expression_return unary_expression746;
    ImplTraits::TreeTypePtr::pointer unary_expression746_last = NULL;
    OracleDML_OracleDMLCommons::multiset_op_return multiset_op747;
    ImplTraits::TreeTypePtr::pointer multiset_op747_last = NULL;
    OracleDML::unary_expression_return unary_expression748;
    ImplTraits::TreeTypePtr::pointer unary_expression748_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:988:5: ( unary_expression ( multiset_op ^ unary_expression )* )
        // OracleDML.g:988:10: unary_expression ( multiset_op ^ unary_expression )*
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_unary_expression_in_multiset_expression10334);
            unary_expression746=unary_expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultiset_expressionEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression746.tree);


            // OracleDML.g:989:10: ( multiset_op ^ unary_expression )*

            for (;;)
            {
                ANTLR_UINT32 alt245=2;
                switch ( this->LA(1) )
                {
                case PLSQL_NON_RESERVED_MULTISET:
                	{
                		alt245=1;
                	}
                    break;

                }

                switch (alt245)
                {
            	case 1:
            	    // OracleDML.g:989:12: multiset_op ^ unary_expression
            	    {
            	        this->followPush(FOLLOW_multiset_op_in_multiset_expression10347);
            	        multiset_op747=multiset_op();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiset_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(multiset_op747.tree, root_0);

            	        this->followPush(FOLLOW_unary_expression_in_multiset_expression10350);
            	        unary_expression748=unary_expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiset_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression748.tree);


            	    }
            	    break;

            	default:
            	    goto loop245;	/* break out of the loop */
            	    break;
                }
            }
            loop245: ; /* Jump out to here if this rule does not match */


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulemultiset_expressionEx; /* Prevent compiler warnings */
    rulemultiset_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end multiset_expression */

/**
 * $ANTLR start unary_expression
 * OracleDML.g:992:1: unary_expression options {backtrack=true; } : ( MINUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression ) | PLUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression ) | prior_key ^ unary_expression | connect_by_root_key ^ unary_expression |{...}? => new_key ^ unary_expression | distinct_key ^ unary_expression | all_key ^ unary_expression |{...}? case_statement[false] | quantified_expression | standard_function -> ^( STANDARD_FUNCTION standard_function ) | atom );
 */
OracleDML::unary_expression_return
OracleDML::unary_expression()
{
    OracleDML::unary_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* MINUS_SIGN749 = NULL;
    ImplTraits::CommonTokenType const* PLUS_SIGN751 = NULL;
    OracleDML::unary_expression_return unary_expression750;
    ImplTraits::TreeTypePtr::pointer unary_expression750_last = NULL;
    OracleDML::unary_expression_return unary_expression752;
    ImplTraits::TreeTypePtr::pointer unary_expression752_last = NULL;
    OracleDML_OracleDMLKeys::prior_key_return prior_key753;
    ImplTraits::TreeTypePtr::pointer prior_key753_last = NULL;
    OracleDML::unary_expression_return unary_expression754;
    ImplTraits::TreeTypePtr::pointer unary_expression754_last = NULL;
    OracleDML_OracleDMLKeys::connect_by_root_key_return connect_by_root_key755;
    ImplTraits::TreeTypePtr::pointer connect_by_root_key755_last = NULL;
    OracleDML::unary_expression_return unary_expression756;
    ImplTraits::TreeTypePtr::pointer unary_expression756_last = NULL;
    OracleDML_OracleDMLKeys::new_key_return new_key757;
    ImplTraits::TreeTypePtr::pointer new_key757_last = NULL;
    OracleDML::unary_expression_return unary_expression758;
    ImplTraits::TreeTypePtr::pointer unary_expression758_last = NULL;
    OracleDML_OracleDMLKeys::distinct_key_return distinct_key759;
    ImplTraits::TreeTypePtr::pointer distinct_key759_last = NULL;
    OracleDML::unary_expression_return unary_expression760;
    ImplTraits::TreeTypePtr::pointer unary_expression760_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key761;
    ImplTraits::TreeTypePtr::pointer all_key761_last = NULL;
    OracleDML::unary_expression_return unary_expression762;
    ImplTraits::TreeTypePtr::pointer unary_expression762_last = NULL;
    OracleDML::case_statement_return case_statement763;
    ImplTraits::TreeTypePtr::pointer case_statement763_last = NULL;
    OracleDML::quantified_expression_return quantified_expression764;
    ImplTraits::TreeTypePtr::pointer quantified_expression764_last = NULL;
    OracleDML::standard_function_return standard_function765;
    ImplTraits::TreeTypePtr::pointer standard_function765_last = NULL;
    OracleDML::atom_return atom766;
    ImplTraits::TreeTypePtr::pointer atom766_last = NULL;
    ImplTraits::TreeTypePtr MINUS_SIGN749_tree;
    ImplTraits::TreeTypePtr PLUS_SIGN751_tree;
    RewriteRuleTokenStream<ImplTraits> stream_PLUS_SIGN(get_psrstate()->get_treeAdaptor(), "token PLUS_SIGN");
    RewriteRuleTokenStream<ImplTraits> stream_MINUS_SIGN(get_psrstate()->get_treeAdaptor(), "token MINUS_SIGN");
    RewriteRuleSubtreeStream<ImplTraits> stream_unary_expression(get_psrstate()->get_treeAdaptor(), "rule unary_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_standard_function(get_psrstate()->get_treeAdaptor(), "rule standard_function");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:997:5: ( MINUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression ) | PLUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression ) | prior_key ^ unary_expression | connect_by_root_key ^ unary_expression |{...}? => new_key ^ unary_expression | distinct_key ^ unary_expression | all_key ^ unary_expression |{...}? case_statement[false] | quantified_expression | standard_function -> ^( STANDARD_FUNCTION standard_function ) | atom )

            ANTLR_UINT32 alt246;

            alt246=11;

            switch ( this->LA(1) )
            {
            case MINUS_SIGN:
            	{
            		alt246=1;
            	}
                break;
            case PLUS_SIGN:
            	{
            		alt246=2;
            	}
                break;
            case SQL92_RESERVED_PRIOR:
            	{
            		alt246=3;
            	}
                break;
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            	{
            		alt246=4;
            	}
                break;
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA246_5 = this->LA(2);
            		    if ( (( (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && (this->msynpred( antlr3::ClassForwarder<synpred36_OracleDML>() )) )) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt246=5;
            		    }
            		    else if ( (( (( (((LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE))) && ((!m_case_statement_stack.peek().isStatement)) )) && (this->msynpred( antlr3::ClassForwarder<synpred39_OracleDML>() )) )))
            		    {
            		        alt246=8;
            		    }
            		    else if ( (( (this->msynpred( antlr3::ClassForwarder<synpred40_OracleDML>() )) && ((toUpper(LT(1)->getText()) == "SOME")) )))
            		    {
            		        alt246=9;
            		    }
            		    else if ( (( ((((toUpper(LT(1)->getText()) == "XMLCAST"))||((toUpper(LT(1)->getText()) == "XMLEXISTS"))||((toUpper(LT(1)->getText()) == "XMLCOLATTVAL"))||((toUpper(LT(1)->getText()) == "DECOMPOSE"))||((enablesWithinOrOverClause(LT(1)->getText())))||((isStandardPredictionFunction(LT(1)->getText())))||((toUpper(LT(1)->getText()) == "TRANSLATE"))||((toUpper(LT(1)->getText()) == "TREAT"))||((toUpper(LT(1)->getText()) == "XMLAGG"))||((toUpper(LT(1)->getText()) == "COLLECT"))||((toUpper(LT(1)->getText()) == "XMLELEMENT"))||((toUpper(LT(1)->getText()) == "LAST_VALUE"))||((enablesOverClause(LT(1)->getText())))||((enablesUsingClause(LT(1)->getText())))||((toUpper(LT(1)->getText()) == "EXTRACT"))||((toUpper(LT(1)->getText()) == "XMLQUERY"))||((toUpper(LT(1)->getText()) == "TRIM"))||((toUpper(LT(1)->getText()) == "XMLPI"))||((toUpper(LT(1)->getText()) == "FIRST_VALUE"))||((toUpper(LT(1)->getText()) == "COUNT" ))||((toUpper(LT(1)->getText()) == "XMLTABLE"))||((toUpper(LT(1)->getText()) == "XMLPARSE"))||((toUpper(LT(1)->getText()) == "CHR"))||((toUpper(LT(1)->getText()) == "XMLSERIALIZE"))||((toUpper(LT(1)->getText()) == "XMLROOT"))||((toUpper(LT(1)->getText()) == "XMLFOREST")))) && (this->msynpred( antlr3::ClassForwarder<synpred41_OracleDML>() )) )))
            		    {
            		        alt246=10;
            		    }
            		    else if ( (true))
            		    {
            		        alt246=11;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 246 );
            		        ex->set_state( 5 );


            		        goto ruleunary_expressionEx;

            		    }
            		}
            	}
                break;
            case SQL92_RESERVED_DISTINCT:
            	{
            		alt246=6;
            	}
                break;
            case SQL92_RESERVED_ALL:
            	{
            		{
            		    ANTLR_UINT32 LA246_7 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred38_OracleDML>() )))
            		    {
            		        alt246=7;
            		    }
            		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred40_OracleDML>() )))
            		    {
            		        alt246=9;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 246 );
            		        ex->set_state( 7 );


            		        goto ruleunary_expressionEx;

            		    }
            		}
            	}
                break;
            case DELIMITED_ID:
            	{
            		{
            		    ANTLR_UINT32 LA246_8 = this->LA(2);
            		    if ( (( (( (((LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE))) && ((!m_case_statement_stack.peek().isStatement)) )) && (this->msynpred( antlr3::ClassForwarder<synpred39_OracleDML>() )) )))
            		    {
            		        alt246=8;
            		    }
            		    else if ( (true))
            		    {
            		        alt246=11;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 246 );
            		        ex->set_state( 8 );


            		        goto ruleunary_expressionEx;

            		    }
            		}
            	}
                break;
            case SQL92_RESERVED_CASE:
            	{
            		alt246=8;
            	}
                break;
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_EXISTS:
            	{
            		alt246=9;
            	}
                break;
            case PLSQL_NON_RESERVED_CAST:
            	{
            		alt246=10;
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case NATIONAL_CHAR_STRING_LIT:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt246=11;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 246 );
                ex->set_state( 0 );


                goto ruleunary_expressionEx;

            }

            switch (alt246)
            {
        	case 1:
        	    // OracleDML.g:997:10: MINUS_SIGN unary_expression
        	    {
        	        MINUS_SIGN749 =  this->matchToken(MINUS_SIGN, &FOLLOW_MINUS_SIGN_in_unary_expression10382);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_MINUS_SIGN.add(MINUS_SIGN749);


        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10384);
        	        unary_expression750=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            unary_expression750_last = unary_expression750.tree.get();
        	            stream_unary_expression.add(unary_expression750.tree);
        	        }

        	        // AST REWRITE
        	        // elements: unary_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 997:38: -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression )
        	        {
        	        	// OracleDML.g:997:41: ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(UNARY_OPERATOR, MINUS_SIGN749), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unary_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:998:10: PLUS_SIGN unary_expression
        	    {
        	        PLUS_SIGN751 =  this->matchToken(PLUS_SIGN, &FOLLOW_PLUS_SIGN_in_unary_expression10404);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_PLUS_SIGN.add(PLUS_SIGN751);


        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10406);
        	        unary_expression752=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            unary_expression752_last = unary_expression752.tree.get();
        	            stream_unary_expression.add(unary_expression752.tree);
        	        }

        	        // AST REWRITE
        	        // elements: unary_expression
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 998:37: -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression )
        	        {
        	        	// OracleDML.g:998:40: ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(UNARY_OPERATOR, PLUS_SIGN751), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_unary_expression.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:999:10: prior_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_prior_key_in_unary_expression10426);
        	        prior_key753=prior_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(prior_key753.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10429);
        	        unary_expression754=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression754.tree);


        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:1000:10: connect_by_root_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_connect_by_root_key_in_unary_expression10440);
        	        connect_by_root_key755=connect_by_root_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(connect_by_root_key755.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10443);
        	        unary_expression756=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression756.tree);


        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:1001:10: {...}? => new_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        if ( !((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) )
        	        {
        	            if (this->get_backtracking()>0)
        	            {
        	                this->set_failedflag( true );
        	                return retval;
        	            }

        	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "LT(1)->getText() == \"NEW\" && LT(2)->getText() != \".\"" );
        	                ex->set_ruleName( "unary_expression" );


        	        }

        	        this->followPush(FOLLOW_new_key_in_unary_expression10457);
        	        new_key757=new_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(new_key757.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10460);
        	        unary_expression758=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression758.tree);


        	    }
        	    break;
        	case 6:
        	    // OracleDML.g:1002:10: distinct_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_distinct_key_in_unary_expression10471);
        	        distinct_key759=distinct_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(distinct_key759.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10474);
        	        unary_expression760=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression760.tree);


        	    }
        	    break;
        	case 7:
        	    // OracleDML.g:1003:10: all_key ^ unary_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_all_key_in_unary_expression10485);
        	        all_key761=all_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(all_key761.tree, root_0);

        	        this->followPush(FOLLOW_unary_expression_in_unary_expression10488);
        	        unary_expression762=unary_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unary_expression762.tree);


        	    }
        	    break;
        	case 8:
        	    // OracleDML.g:1004:10: {...}? case_statement[false]
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        if ( !(((LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE))) )
        	        {
        	            if (this->get_backtracking()>0)
        	            {
        	                this->set_failedflag( true );
        	                return retval;
        	            }

        	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "(LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE)" );
        	                ex->set_ruleName( "unary_expression" );


        	        }

        	        this->followPush(FOLLOW_case_statement_in_unary_expression10501);
        	        case_statement763=case_statement(false);

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, case_statement763.tree);


        	    }
        	    break;
        	case 9:
        	    // OracleDML.g:1005:10: quantified_expression
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_quantified_expression_in_unary_expression10513);
        	        quantified_expression764=quantified_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, quantified_expression764.tree);


        	    }
        	    break;
        	case 10:
        	    // OracleDML.g:1006:10: standard_function
        	    {
        	        this->followPush(FOLLOW_standard_function_in_unary_expression10524);
        	        standard_function765=standard_function();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) 
        	        {
        	            standard_function765_last = standard_function765.tree.get();
        	            stream_standard_function.add(standard_function765.tree);
        	        }

        	        // AST REWRITE
        	        // elements: standard_function
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 1006:28: -> ^( STANDARD_FUNCTION standard_function )
        	        {
        	        	// OracleDML.g:1006:31: ^( STANDARD_FUNCTION standard_function )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(STANDARD_FUNCTION, "STANDARD_FUNCTION"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_standard_function.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;
        	case 11:
        	    // OracleDML.g:1007:10: atom
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_atom_in_unary_expression10543);
        	        atom766=atom();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_expressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, atom766.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleunary_expressionEx; /* Prevent compiler warnings */
    ruleunary_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end unary_expression */

/**
 * $ANTLR start case_statement
 * OracleDML.g:1010:1: case_statement[int isStatementParameter] : ( ( ( label_name )? case_key when_key )=> searched_case_statement | simple_case_statement );
 */
OracleDML::case_statement_return
OracleDML::case_statement(int isStatementParameter)
{
    OracleDML::case_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::searched_case_statement_return searched_case_statement767;
    ImplTraits::TreeTypePtr::pointer searched_case_statement767_last = NULL;
    OracleDML::simple_case_statement_return simple_case_statement768;
    ImplTraits::TreeTypePtr::pointer simple_case_statement768_last = NULL;

    /* Initialize rule variables
     */
    m_case_statement_stack.push(case_statementScope()); 
    m_case_statement_stack.peek().isStatement = isStatementParameter;
    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1015:5: ( ( ( label_name )? case_key when_key )=> searched_case_statement | simple_case_statement )

            ANTLR_UINT32 alt247;

            alt247=2;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case SQL92_RESERVED_CASE:
            			{
            				{
            				    ANTLR_UINT32 LA247_3 = this->LA(3);
            				    if ( (LA247_3 == SQL92_RESERVED_WHEN) && (this->msynpred( antlr3::ClassForwarder<synpred42_OracleDML>() )))
            				    {
            				        alt247=1;
            				    }
            				    else if ( (LA247_3 == APPROXIMATE_NUM_LIT || LA247_3 == BINDVAR || ((LA247_3 >= CHAR_STRING) && (LA247_3 <= CHAR_STRING_PERL)) || LA247_3 == COLON || LA247_3 == DELIMITED_ID || LA247_3 == EXACT_NUM_LIT || LA247_3 == INTRODUCER || LA247_3 == LEFT_PAREN || LA247_3 == NATIONAL_CHAR_STRING_LIT || LA247_3 == REGULAR_ID || LA247_3 == SQL92_RESERVED_DATE || LA247_3 == SQL92_RESERVED_DEFAULT || LA247_3 == SQL92_RESERVED_FALSE || LA247_3 == SQL92_RESERVED_NULL || LA247_3 == SQL92_RESERVED_TRUE || LA247_3 == UNSIGNED_INTEGER))
            				    {
            				        alt247=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            m_case_statement_stack.pop(); 

            				            return retval;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 247 );
            				        ex->set_state( 3 );


            				        goto rulecase_statementEx;

            				    }
            				}
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        m_case_statement_stack.pop(); 

            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 247 );
            		    ex->set_state( 1 );


            		    goto rulecase_statementEx;

            		}

            	}
                break;
            case DELIMITED_ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case SQL92_RESERVED_CASE:
            			{
            				{
            				    ANTLR_UINT32 LA247_3 = this->LA(3);
            				    if ( (LA247_3 == SQL92_RESERVED_WHEN) && (this->msynpred( antlr3::ClassForwarder<synpred42_OracleDML>() )))
            				    {
            				        alt247=1;
            				    }
            				    else if ( (LA247_3 == APPROXIMATE_NUM_LIT || LA247_3 == BINDVAR || ((LA247_3 >= CHAR_STRING) && (LA247_3 <= CHAR_STRING_PERL)) || LA247_3 == COLON || LA247_3 == DELIMITED_ID || LA247_3 == EXACT_NUM_LIT || LA247_3 == INTRODUCER || LA247_3 == LEFT_PAREN || LA247_3 == NATIONAL_CHAR_STRING_LIT || LA247_3 == REGULAR_ID || LA247_3 == SQL92_RESERVED_DATE || LA247_3 == SQL92_RESERVED_DEFAULT || LA247_3 == SQL92_RESERVED_FALSE || LA247_3 == SQL92_RESERVED_NULL || LA247_3 == SQL92_RESERVED_TRUE || LA247_3 == UNSIGNED_INTEGER))
            				    {
            				        alt247=2;
            				    }
            				    else
            				    {
            				        if (this->get_backtracking()>0)
            				        {
            				            this->set_failedflag( true );
            				            m_case_statement_stack.pop(); 

            				            return retval;
            				        }


            				        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				        ex->set_decisionNum( 247 );
            				        ex->set_state( 3 );


            				        goto rulecase_statementEx;

            				    }
            				}
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        m_case_statement_stack.pop(); 

            		        return retval;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 247 );
            		    ex->set_state( 2 );


            		    goto rulecase_statementEx;

            		}

            	}
                break;
            case SQL92_RESERVED_CASE:
            	{
            		{
            		    ANTLR_UINT32 LA247_3 = this->LA(2);
            		    if ( (LA247_3 == SQL92_RESERVED_WHEN) && (this->msynpred( antlr3::ClassForwarder<synpred42_OracleDML>() )))
            		    {
            		        alt247=1;
            		    }
            		    else if ( (LA247_3 == APPROXIMATE_NUM_LIT || LA247_3 == BINDVAR || ((LA247_3 >= CHAR_STRING) && (LA247_3 <= CHAR_STRING_PERL)) || LA247_3 == COLON || LA247_3 == DELIMITED_ID || LA247_3 == EXACT_NUM_LIT || LA247_3 == INTRODUCER || LA247_3 == LEFT_PAREN || LA247_3 == NATIONAL_CHAR_STRING_LIT || LA247_3 == REGULAR_ID || LA247_3 == SQL92_RESERVED_DATE || LA247_3 == SQL92_RESERVED_DEFAULT || LA247_3 == SQL92_RESERVED_FALSE || LA247_3 == SQL92_RESERVED_NULL || LA247_3 == SQL92_RESERVED_TRUE || LA247_3 == UNSIGNED_INTEGER))
            		    {
            		        alt247=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            m_case_statement_stack.pop(); 

            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 247 );
            		        ex->set_state( 3 );


            		        goto rulecase_statementEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    m_case_statement_stack.pop(); 

                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 247 );
                ex->set_state( 0 );


                goto rulecase_statementEx;

            }

            switch (alt247)
            {
        	case 1:
        	    // OracleDML.g:1015:10: ( ( label_name )? case_key when_key )=> searched_case_statement
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_searched_case_statement_in_case_statement10590);
        	        searched_case_statement767=searched_case_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecase_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            m_case_statement_stack.pop(); 

        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, searched_case_statement767.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1016:10: simple_case_statement
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_simple_case_statement_in_case_statement10601);
        	        simple_case_statement768=simple_case_statement();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulecase_statementEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            m_case_statement_stack.pop(); 

        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, simple_case_statement768.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulecase_statementEx; /* Prevent compiler warnings */
    rulecase_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    m_case_statement_stack.pop(); 

    return retval;
}
/* $ANTLR end case_statement */

/**
 * $ANTLR start simple_case_statement
 * OracleDML.g:1021:1: simple_case_statement : ({...}? ( label_name )? ) ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |) -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? end_key ) ;
 */
OracleDML::simple_case_statement_return
OracleDML::simple_case_statement()
{
    OracleDML::simple_case_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::case_key_return ck1;
    ImplTraits::TreeTypePtr::pointer ck1_last = NULL;
    OracleDML_OracleDMLCommons::label_name_return label_name769;
    ImplTraits::TreeTypePtr::pointer label_name769_last = NULL;
    OracleDML::atom_return atom770;
    ImplTraits::TreeTypePtr::pointer atom770_last = NULL;
    OracleDML::simple_case_when_part_return simple_case_when_part771;
    ImplTraits::TreeTypePtr::pointer simple_case_when_part771_last = NULL;
    OracleDML::case_else_part_return case_else_part772;
    ImplTraits::TreeTypePtr::pointer case_else_part772_last = NULL;
    OracleDML_OracleDMLKeys::end_key_return end_key773;
    ImplTraits::TreeTypePtr::pointer end_key773_last = NULL;
    OracleDML_OracleDMLKeys::case_key_return case_key774;
    ImplTraits::TreeTypePtr::pointer case_key774_last = NULL;
    OracleDML_OracleDMLCommons::label_name_return label_name775;
    ImplTraits::TreeTypePtr::pointer label_name775_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_atom(get_psrstate()->get_treeAdaptor(), "rule atom");
    RewriteRuleSubtreeStream<ImplTraits> stream_simple_case_when_part(get_psrstate()->get_treeAdaptor(), "rule simple_case_when_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_label_name(get_psrstate()->get_treeAdaptor(), "rule label_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_case_else_part(get_psrstate()->get_treeAdaptor(), "rule case_else_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_case_key(get_psrstate()->get_treeAdaptor(), "rule case_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_end_key(get_psrstate()->get_treeAdaptor(), "rule end_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1022:5: ( ({...}? ( label_name )? ) ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |) -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? end_key ) )
        // OracleDML.g:1022:9: ({...}? ( label_name )? ) ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |)
        {
            // OracleDML.g:1022:9: ({...}? ( label_name )? )
            // OracleDML.g:1022:10: {...}? ( label_name )?
            {
                if ( !((!m_case_statement_stack.peek().isStatement)) )
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!$case_statement::isStatement" );
                        ex->set_ruleName( "simple_case_statement" );


                }

                // OracleDML.g:1022:43: ( label_name )?
                {
                    ANTLR_UINT32 alt248=2;
                    switch ( this->LA(1) )
                    {
                        case DELIMITED_ID:
                        case REGULAR_ID:
                        	{
                        		alt248=1;
                        	}
                            break;
                    }

                    switch (alt248)
                    {
                	case 1:
                	    // OracleDML.g:1022:43: label_name
                	    {
                	        this->followPush(FOLLOW_label_name_in_simple_case_statement10625);
                	        label_name769=label_name();

                	        this->followPop();
                	        if  (this->hasException())
                	        {
                	            goto rulesimple_case_statementEx;
                	        }
                	        if (this->hasFailed())
                	        {
                	            return retval;
                	        }

                	        if ( this->get_backtracking()==0 ) 
                	        {
                	            label_name769_last = label_name769.tree.get();
                	            stream_label_name.add(label_name769.tree);
                	        }

                	    }
                	    break;

                    }
                }

            }


            this->followPush(FOLLOW_case_key_in_simple_case_statement10631);
            ck1=case_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                ck1_last = ck1.tree.get();
                stream_case_key.add(ck1.tree);
            }

            this->followPush(FOLLOW_atom_in_simple_case_statement10633);
            atom770=atom();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                atom770_last = atom770.tree.get();
                stream_atom.add(atom770.tree);
            }

            // OracleDML.g:1023:9: ( simple_case_when_part )+
            {
                int cnt249=0;

                for (;;)
                {
                    ANTLR_UINT32 alt249=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_WHEN:
            		{
            			alt249=1;
            		}
            	    break;

            	}

            	switch (alt249)
            	{
            	    case 1:
            	        // OracleDML.g:1023:9: simple_case_when_part
            	        {
            	            this->followPush(FOLLOW_simple_case_when_part_in_simple_case_statement10643);
            	            simple_case_when_part771=simple_case_when_part();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesimple_case_statementEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) 
            	            {
            	                simple_case_when_part771_last = simple_case_when_part771.tree.get();
            	                stream_simple_case_when_part.add(simple_case_when_part771.tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt249 >= 1 )
            		{
            		    goto loop249;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulesimple_case_statementEx;
            	}
            	cnt249++;
                }
                loop249: ;	/* Jump to here if this rule does not match */
            }

            // OracleDML.g:1024:9: ( case_else_part )?
            {
                ANTLR_UINT32 alt250=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ELSE:
                    	{
                    		alt250=1;
                    	}
                        break;
                }

                switch (alt250)
                {
            	case 1:
            	    // OracleDML.g:1024:9: case_else_part
            	    {
            	        this->followPush(FOLLOW_case_else_part_in_simple_case_statement10655);
            	        case_else_part772=case_else_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesimple_case_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            case_else_part772_last = case_else_part772.tree.get();
            	            stream_case_else_part.add(case_else_part772.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_end_key_in_simple_case_statement10666);
            end_key773=end_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                end_key773_last = end_key773.tree.get();
                stream_end_key.add(end_key773.tree);
            }

            // OracleDML.g:1025:17: ({...}? case_key ( label_name )? |)
            {
                ANTLR_UINT32 alt252=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_CASE:
                	{
                		alt252=1;
                	}
                    break;
                case EOF_TOKEN:
                case ASTERISK:
                case CARRET_OPERATOR_PART:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COMMA:
                case CONCATENATION_OP:
                case DELIMITED_ID:
                case EQUALS_OP:
                case EXCLAMATION_OPERATOR_PART:
                case GREATER_THAN_OP:
                case GREATER_THAN_OR_EQUALS_OP:
                case INTRODUCER:
                case LEFT_BRACKET:
                case LEFT_PAREN:
                case LESS_THAN_OP:
                case LESS_THAN_OR_EQUALS_OP:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case NOT_EQUAL_OP:
                case PLSQL_NON_RESERVED_MODEL:
                case PLSQL_NON_RESERVED_MULTISET:
                case PLSQL_NON_RESERVED_PIVOT:
                case PLSQL_NON_RESERVED_UNPIVOT:
                case PLSQL_NON_RESERVED_USING:
                case PLSQL_RESERVED_MINUS:
                case PLSQL_RESERVED_START:
                case PLUS_SIGN:
                case REGULAR_ID:
                case RIGHT_BRACKET:
                case RIGHT_PAREN:
                case SEMICOLON:
                case SOLIDUS:
                case SQL92_RESERVED_AND:
                case SQL92_RESERVED_AS:
                case SQL92_RESERVED_ASC:
                case SQL92_RESERVED_BETWEEN:
                case SQL92_RESERVED_CONNECT:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_DESC:
                case SQL92_RESERVED_ELSE:
                case SQL92_RESERVED_END:
                case SQL92_RESERVED_FOR:
                case SQL92_RESERVED_FROM:
                case SQL92_RESERVED_GROUP:
                case SQL92_RESERVED_HAVING:
                case SQL92_RESERVED_IN:
                case SQL92_RESERVED_INTERSECT:
                case SQL92_RESERVED_INTO:
                case SQL92_RESERVED_IS:
                case SQL92_RESERVED_LIKE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_ON:
                case SQL92_RESERVED_OR:
                case SQL92_RESERVED_ORDER:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_THEN:
                case SQL92_RESERVED_TO:
                case SQL92_RESERVED_UNION:
                case SQL92_RESERVED_WHEN:
                case SQL92_RESERVED_WHERE:
                case SQL92_RESERVED_WITH:
                case VERTICAL_BAR:
                	{
                		alt252=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 252 );
                    ex->set_state( 0 );


                    goto rulesimple_case_statementEx;

                }

                switch (alt252)
                {
            	case 1:
            	    // OracleDML.g:1025:18: {...}? case_key ( label_name )?
            	    {
            	        if ( !((!m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!$case_statement::isStatement" );
            	                ex->set_ruleName( "simple_case_statement" );


            	        }

            	        this->followPush(FOLLOW_case_key_in_simple_case_statement10671);
            	        case_key774=case_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesimple_case_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            case_key774_last = case_key774.tree.get();
            	            stream_case_key.add(case_key774.tree);
            	        }

            	        // OracleDML.g:1025:60: ( label_name )?
            	        {
            	            ANTLR_UINT32 alt251=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		alt251=1;
            	                	}
            	                    break;
            	                case DELIMITED_ID:
            	                	{
            	                		alt251=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt251)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1025:60: label_name
            	        	    {
            	        	        this->followPush(FOLLOW_label_name_in_simple_case_statement10673);
            	        	        label_name775=label_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesimple_case_statementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            label_name775_last = label_name775.tree.get();
            	        	            stream_label_name.add(label_name775.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1025:74: 
            	    {
            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: case_else_part, end_key, atom, label_name, simple_case_when_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1026:9: -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? end_key )
            {
            	// OracleDML.g:1026:12: ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? end_key )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SIMPLE_CASE, (ck1.start)), root_1);
            	// OracleDML.g:1026:38: ( label_name )*
            	while ( stream_label_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_label_name.nextTree());
            	}
            	stream_label_name.reset();

            	// OracleDML.g:1026:50: ^( EXPR atom )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_atom.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	if ( !(stream_simple_case_when_part.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "simple_case_when_part empty" );
            		goto rulesimple_case_statementEx;
            	}
            	while ( stream_simple_case_when_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_simple_case_when_part.nextTree());
            	}
            	stream_simple_case_when_part.reset();

            	// OracleDML.g:1026:86: ( case_else_part )?
            	if ( stream_case_else_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_case_else_part.nextTree());
            	}
            	stream_case_else_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_end_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesimple_case_statementEx; /* Prevent compiler warnings */
    rulesimple_case_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end simple_case_statement */

/**
 * $ANTLR start simple_case_when_part
 * OracleDML.g:1029:1: simple_case_when_part : when_key ^ew1= expression_wrapper then_key ! ({...}? seq_of_statements |ew2= expression_wrapper ) ;
 */
OracleDML::simple_case_when_part_return
OracleDML::simple_case_when_part()
{
    OracleDML::simple_case_when_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_wrapper_return ew1;
    ImplTraits::TreeTypePtr::pointer ew1_last = NULL;
    OracleDML::expression_wrapper_return ew2;
    ImplTraits::TreeTypePtr::pointer ew2_last = NULL;
    OracleDML_OracleDMLKeys::when_key_return when_key776;
    ImplTraits::TreeTypePtr::pointer when_key776_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key777;
    ImplTraits::TreeTypePtr::pointer then_key777_last = NULL;
    OracleDML::seq_of_statements_return seq_of_statements778;
    ImplTraits::TreeTypePtr::pointer seq_of_statements778_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1030:5: ( when_key ^ew1= expression_wrapper then_key ! ({...}? seq_of_statements |ew2= expression_wrapper ) )
        // OracleDML.g:1030:10: when_key ^ew1= expression_wrapper then_key ! ({...}? seq_of_statements |ew2= expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_when_key_in_simple_case_when_part10730);
            when_key776=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(when_key776.tree, root_0);

            this->followPush(FOLLOW_expression_wrapper_in_simple_case_when_part10735);
            ew1=expression_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, ew1.tree);


            this->followPush(FOLLOW_then_key_in_simple_case_when_part10737);
            then_key777=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesimple_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            // OracleDML.g:1030:53: ({...}? seq_of_statements |ew2= expression_wrapper )
            {
                ANTLR_UINT32 alt253=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_LOCK:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_INSERT:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_UPDATE:
                case SQL92_RESERVED_WITH:
                	{
                		alt253=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA253_3 = this->LA(2);
                		    if ( ((m_case_statement_stack.peek().isStatement)))
                		    {
                		        alt253=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt253=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 253 );
                		        ex->set_state( 3 );


                		        goto rulesimple_case_when_partEx;

                		    }
                		}
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA253_8 = this->LA(2);
                		    if ( (( ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))) && ((m_case_statement_stack.peek().isStatement)) )))
                		    {
                		        alt253=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt253=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 253 );
                		        ex->set_state( 8 );


                		        goto rulesimple_case_when_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt253=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 253 );
                    ex->set_state( 0 );


                    goto rulesimple_case_when_partEx;

                }

                switch (alt253)
                {
            	case 1:
            	    // OracleDML.g:1030:54: {...}? seq_of_statements
            	    {
            	        if ( !((m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "$case_statement::isStatement" );
            	                ex->set_ruleName( "simple_case_when_part" );


            	        }

            	        this->followPush(FOLLOW_seq_of_statements_in_simple_case_when_part10743);
            	        seq_of_statements778=seq_of_statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesimple_case_when_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, seq_of_statements778.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1030:106: ew2= expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_simple_case_when_part10749);
            	        ew2=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesimple_case_when_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, ew2.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesimple_case_when_partEx; /* Prevent compiler warnings */
    rulesimple_case_when_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end simple_case_when_part */

/**
 * $ANTLR start searched_case_statement
 * OracleDML.g:1033:1: searched_case_statement : ({...}? ( label_name )? ) ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |) -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? end_key ) ;
 */
OracleDML::searched_case_statement_return
OracleDML::searched_case_statement()
{
    OracleDML::searched_case_statement_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::case_key_return ck1;
    ImplTraits::TreeTypePtr::pointer ck1_last = NULL;
    OracleDML_OracleDMLCommons::label_name_return label_name779;
    ImplTraits::TreeTypePtr::pointer label_name779_last = NULL;
    OracleDML::searched_case_when_part_return searched_case_when_part780;
    ImplTraits::TreeTypePtr::pointer searched_case_when_part780_last = NULL;
    OracleDML::case_else_part_return case_else_part781;
    ImplTraits::TreeTypePtr::pointer case_else_part781_last = NULL;
    OracleDML_OracleDMLKeys::end_key_return end_key782;
    ImplTraits::TreeTypePtr::pointer end_key782_last = NULL;
    OracleDML_OracleDMLKeys::case_key_return case_key783;
    ImplTraits::TreeTypePtr::pointer case_key783_last = NULL;
    OracleDML_OracleDMLCommons::label_name_return label_name784;
    ImplTraits::TreeTypePtr::pointer label_name784_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_searched_case_when_part(get_psrstate()->get_treeAdaptor(), "rule searched_case_when_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_label_name(get_psrstate()->get_treeAdaptor(), "rule label_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_case_else_part(get_psrstate()->get_treeAdaptor(), "rule case_else_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_case_key(get_psrstate()->get_treeAdaptor(), "rule case_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_end_key(get_psrstate()->get_treeAdaptor(), "rule end_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1034:5: ( ({...}? ( label_name )? ) ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |) -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? end_key ) )
        // OracleDML.g:1034:9: ({...}? ( label_name )? ) ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ({...}? case_key ( label_name )? |)
        {
            // OracleDML.g:1034:9: ({...}? ( label_name )? )
            // OracleDML.g:1034:10: {...}? ( label_name )?
            {
                if ( !((!m_case_statement_stack.peek().isStatement)) )
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!$case_statement::isStatement" );
                        ex->set_ruleName( "searched_case_statement" );


                }

                // OracleDML.g:1034:43: ( label_name )?
                {
                    ANTLR_UINT32 alt254=2;
                    switch ( this->LA(1) )
                    {
                        case DELIMITED_ID:
                        case REGULAR_ID:
                        	{
                        		alt254=1;
                        	}
                            break;
                    }

                    switch (alt254)
                    {
                	case 1:
                	    // OracleDML.g:1034:43: label_name
                	    {
                	        this->followPush(FOLLOW_label_name_in_searched_case_statement10772);
                	        label_name779=label_name();

                	        this->followPop();
                	        if  (this->hasException())
                	        {
                	            goto rulesearched_case_statementEx;
                	        }
                	        if (this->hasFailed())
                	        {
                	            return retval;
                	        }

                	        if ( this->get_backtracking()==0 ) 
                	        {
                	            label_name779_last = label_name779.tree.get();
                	            stream_label_name.add(label_name779.tree);
                	        }

                	    }
                	    break;

                    }
                }

            }


            this->followPush(FOLLOW_case_key_in_searched_case_statement10778);
            ck1=case_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                ck1_last = ck1.tree.get();
                stream_case_key.add(ck1.tree);
            }

            // OracleDML.g:1035:9: ( searched_case_when_part )+
            {
                int cnt255=0;

                for (;;)
                {
                    ANTLR_UINT32 alt255=2;
            	switch ( this->LA(1) )
            	{
            	case SQL92_RESERVED_WHEN:
            		{
            			alt255=1;
            		}
            	    break;

            	}

            	switch (alt255)
            	{
            	    case 1:
            	        // OracleDML.g:1035:9: searched_case_when_part
            	        {
            	            this->followPush(FOLLOW_searched_case_when_part_in_searched_case_statement10788);
            	            searched_case_when_part780=searched_case_when_part();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesearched_case_statementEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return retval;
            	            }

            	            if ( this->get_backtracking()==0 ) 
            	            {
            	                searched_case_when_part780_last = searched_case_when_part780.tree.get();
            	                stream_searched_case_when_part.add(searched_case_when_part780.tree);
            	            }

            	        }
            	        break;

            	    default:

            		if ( cnt255 >= 1 )
            		{
            		    goto loop255;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return retval;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulesearched_case_statementEx;
            	}
            	cnt255++;
                }
                loop255: ;	/* Jump to here if this rule does not match */
            }

            // OracleDML.g:1036:9: ( case_else_part )?
            {
                ANTLR_UINT32 alt256=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ELSE:
                    	{
                    		alt256=1;
                    	}
                        break;
                }

                switch (alt256)
                {
            	case 1:
            	    // OracleDML.g:1036:9: case_else_part
            	    {
            	        this->followPush(FOLLOW_case_else_part_in_searched_case_statement10799);
            	        case_else_part781=case_else_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearched_case_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            case_else_part781_last = case_else_part781.tree.get();
            	            stream_case_else_part.add(case_else_part781.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_end_key_in_searched_case_statement10810);
            end_key782=end_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_statementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                end_key782_last = end_key782.tree.get();
                stream_end_key.add(end_key782.tree);
            }

            // OracleDML.g:1037:17: ({...}? case_key ( label_name )? |)
            {
                ANTLR_UINT32 alt258=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_CASE:
                	{
                		alt258=1;
                	}
                    break;
                case EOF_TOKEN:
                case ASTERISK:
                case CARRET_OPERATOR_PART:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COMMA:
                case CONCATENATION_OP:
                case DELIMITED_ID:
                case EQUALS_OP:
                case EXCLAMATION_OPERATOR_PART:
                case GREATER_THAN_OP:
                case GREATER_THAN_OR_EQUALS_OP:
                case INTRODUCER:
                case LEFT_BRACKET:
                case LEFT_PAREN:
                case LESS_THAN_OP:
                case LESS_THAN_OR_EQUALS_OP:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case NOT_EQUAL_OP:
                case PLSQL_NON_RESERVED_MODEL:
                case PLSQL_NON_RESERVED_MULTISET:
                case PLSQL_NON_RESERVED_PIVOT:
                case PLSQL_NON_RESERVED_UNPIVOT:
                case PLSQL_NON_RESERVED_USING:
                case PLSQL_RESERVED_MINUS:
                case PLSQL_RESERVED_START:
                case PLUS_SIGN:
                case REGULAR_ID:
                case RIGHT_BRACKET:
                case RIGHT_PAREN:
                case SEMICOLON:
                case SOLIDUS:
                case SQL92_RESERVED_AND:
                case SQL92_RESERVED_AS:
                case SQL92_RESERVED_ASC:
                case SQL92_RESERVED_BETWEEN:
                case SQL92_RESERVED_CONNECT:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_DESC:
                case SQL92_RESERVED_ELSE:
                case SQL92_RESERVED_END:
                case SQL92_RESERVED_FOR:
                case SQL92_RESERVED_FROM:
                case SQL92_RESERVED_GROUP:
                case SQL92_RESERVED_HAVING:
                case SQL92_RESERVED_IN:
                case SQL92_RESERVED_INTERSECT:
                case SQL92_RESERVED_INTO:
                case SQL92_RESERVED_IS:
                case SQL92_RESERVED_LIKE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_ON:
                case SQL92_RESERVED_OR:
                case SQL92_RESERVED_ORDER:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_THEN:
                case SQL92_RESERVED_TO:
                case SQL92_RESERVED_UNION:
                case SQL92_RESERVED_WHEN:
                case SQL92_RESERVED_WHERE:
                case SQL92_RESERVED_WITH:
                case VERTICAL_BAR:
                	{
                		alt258=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 258 );
                    ex->set_state( 0 );


                    goto rulesearched_case_statementEx;

                }

                switch (alt258)
                {
            	case 1:
            	    // OracleDML.g:1037:18: {...}? case_key ( label_name )?
            	    {
            	        if ( !((!m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "!$case_statement::isStatement" );
            	                ex->set_ruleName( "searched_case_statement" );


            	        }

            	        this->followPush(FOLLOW_case_key_in_searched_case_statement10815);
            	        case_key783=case_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearched_case_statementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            case_key783_last = case_key783.tree.get();
            	            stream_case_key.add(case_key783.tree);
            	        }

            	        // OracleDML.g:1037:60: ( label_name )?
            	        {
            	            ANTLR_UINT32 alt257=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		alt257=1;
            	                	}
            	                    break;
            	                case DELIMITED_ID:
            	                	{
            	                		alt257=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt257)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1037:60: label_name
            	        	    {
            	        	        this->followPush(FOLLOW_label_name_in_searched_case_statement10817);
            	        	        label_name784=label_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesearched_case_statementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            label_name784_last = label_name784.tree.get();
            	        	            stream_label_name.add(label_name784.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1037:74: 
            	    {
            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: label_name, case_else_part, searched_case_when_part, end_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1038:9: -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? end_key )
            {
            	// OracleDML.g:1038:12: ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? end_key )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(SEARCHED_CASE, (ck1.start)), root_1);
            	// OracleDML.g:1038:40: ( label_name )*
            	while ( stream_label_name.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_label_name.nextTree());
            	}
            	stream_label_name.reset();

            	if ( !(stream_searched_case_when_part.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "searched_case_when_part empty" );
            		goto rulesearched_case_statementEx;
            	}
            	while ( stream_searched_case_when_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_searched_case_when_part.nextTree());
            	}
            	stream_searched_case_when_part.reset();

            	// OracleDML.g:1038:77: ( case_else_part )?
            	if ( stream_case_else_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_case_else_part.nextTree());
            	}
            	stream_case_else_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_end_key.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesearched_case_statementEx; /* Prevent compiler warnings */
    rulesearched_case_statementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end searched_case_statement */

/**
 * $ANTLR start searched_case_when_part
 * OracleDML.g:1041:1: searched_case_when_part : when_key ^ condition_wrapper then_key ! ({...}? seq_of_statements | expression_wrapper ) ;
 */
OracleDML::searched_case_when_part_return
OracleDML::searched_case_when_part()
{
    OracleDML::searched_case_when_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::when_key_return when_key785;
    ImplTraits::TreeTypePtr::pointer when_key785_last = NULL;
    OracleDML::condition_wrapper_return condition_wrapper786;
    ImplTraits::TreeTypePtr::pointer condition_wrapper786_last = NULL;
    OracleDML_OracleDMLKeys::then_key_return then_key787;
    ImplTraits::TreeTypePtr::pointer then_key787_last = NULL;
    OracleDML::seq_of_statements_return seq_of_statements788;
    ImplTraits::TreeTypePtr::pointer seq_of_statements788_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper789;
    ImplTraits::TreeTypePtr::pointer expression_wrapper789_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1042:5: ( when_key ^ condition_wrapper then_key ! ({...}? seq_of_statements | expression_wrapper ) )
        // OracleDML.g:1042:10: when_key ^ condition_wrapper then_key ! ({...}? seq_of_statements | expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_when_key_in_searched_case_when_part10868);
            when_key785=when_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(when_key785.tree, root_0);

            this->followPush(FOLLOW_condition_wrapper_in_searched_case_when_part10871);
            condition_wrapper786=condition_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, condition_wrapper786.tree);


            this->followPush(FOLLOW_then_key_in_searched_case_when_part10873);
            then_key787=then_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesearched_case_when_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            // OracleDML.g:1042:48: ({...}? seq_of_statements | expression_wrapper )
            {
                ANTLR_UINT32 alt259=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_LOCK:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_INSERT:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_UPDATE:
                case SQL92_RESERVED_WITH:
                	{
                		alt259=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA259_3 = this->LA(2);
                		    if ( ((m_case_statement_stack.peek().isStatement)))
                		    {
                		        alt259=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt259=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 259 );
                		        ex->set_state( 3 );


                		        goto rulesearched_case_when_partEx;

                		    }
                		}
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA259_8 = this->LA(2);
                		    if ( (( ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))) && ((m_case_statement_stack.peek().isStatement)) )))
                		    {
                		        alt259=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt259=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 259 );
                		        ex->set_state( 8 );


                		        goto rulesearched_case_when_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt259=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 259 );
                    ex->set_state( 0 );


                    goto rulesearched_case_when_partEx;

                }

                switch (alt259)
                {
            	case 1:
            	    // OracleDML.g:1042:49: {...}? seq_of_statements
            	    {
            	        if ( !((m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "$case_statement::isStatement" );
            	                ex->set_ruleName( "searched_case_when_part" );


            	        }

            	        this->followPush(FOLLOW_seq_of_statements_in_searched_case_when_part10879);
            	        seq_of_statements788=seq_of_statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearched_case_when_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, seq_of_statements788.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1042:101: expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_searched_case_when_part10883);
            	        expression_wrapper789=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesearched_case_when_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper789.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulesearched_case_when_partEx; /* Prevent compiler warnings */
    rulesearched_case_when_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end searched_case_when_part */

/**
 * $ANTLR start case_else_part
 * OracleDML.g:1045:1: case_else_part : else_key ^ ({...}? seq_of_statements | expression_wrapper ) ;
 */
OracleDML::case_else_part_return
OracleDML::case_else_part()
{
    OracleDML::case_else_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::else_key_return else_key790;
    ImplTraits::TreeTypePtr::pointer else_key790_last = NULL;
    OracleDML::seq_of_statements_return seq_of_statements791;
    ImplTraits::TreeTypePtr::pointer seq_of_statements791_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper792;
    ImplTraits::TreeTypePtr::pointer expression_wrapper792_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1046:5: ( else_key ^ ({...}? seq_of_statements | expression_wrapper ) )
        // OracleDML.g:1046:10: else_key ^ ({...}? seq_of_statements | expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_else_key_in_case_else_part10904);
            else_key790=else_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecase_else_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(else_key790.tree, root_0);

            // OracleDML.g:1046:20: ({...}? seq_of_statements | expression_wrapper )
            {
                ANTLR_UINT32 alt260=2;
                switch ( this->LA(1) )
                {
                case PLSQL_RESERVED_LOCK:
                case SQL92_RESERVED_DELETE:
                case SQL92_RESERVED_INSERT:
                case SQL92_RESERVED_SELECT:
                case SQL92_RESERVED_UPDATE:
                case SQL92_RESERVED_WITH:
                	{
                		alt260=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA260_3 = this->LA(2);
                		    if ( ((m_case_statement_stack.peek().isStatement)))
                		    {
                		        alt260=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt260=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 260 );
                		        ex->set_state( 3 );


                		        goto rulecase_else_partEx;

                		    }
                		}
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA260_8 = this->LA(2);
                		    if ( (( ((((toUpper(LT(1)->getText()) == "EXPLAIN"))||((toUpper(LT(1)->getText()) == "MERGE")))) && ((m_case_statement_stack.peek().isStatement)) )))
                		    {
                		        alt260=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt260=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 260 );
                		        ex->set_state( 8 );


                		        goto rulecase_else_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt260=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 260 );
                    ex->set_state( 0 );


                    goto rulecase_else_partEx;

                }

                switch (alt260)
                {
            	case 1:
            	    // OracleDML.g:1046:21: {...}? seq_of_statements
            	    {
            	        if ( !((m_case_statement_stack.peek().isStatement)) )
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return retval;
            	            }

            	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "$case_statement::isStatement" );
            	                ex->set_ruleName( "case_else_part" );


            	        }

            	        this->followPush(FOLLOW_seq_of_statements_in_case_else_part10910);
            	        seq_of_statements791=seq_of_statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecase_else_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, seq_of_statements791.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1046:73: expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_case_else_part10914);
            	        expression_wrapper792=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecase_else_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper792.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecase_else_partEx; /* Prevent compiler warnings */
    rulecase_else_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end case_else_part */

/**
 * $ANTLR start atom
 * OracleDML.g:1050:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) );
 */
OracleDML::atom_return
OracleDML::atom()
{
    OracleDML::atom_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN798 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN800 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN803 = NULL;
    OracleDML_OracleDMLCommons::table_element_return table_element793;
    ImplTraits::TreeTypePtr::pointer table_element793_last = NULL;
    OracleDML_OracleDMLCommons::outer_join_sign_return outer_join_sign794;
    ImplTraits::TreeTypePtr::pointer outer_join_sign794_last = NULL;
    OracleDML_OracleDMLCommons::bind_variable_return bind_variable795;
    ImplTraits::TreeTypePtr::pointer bind_variable795_last = NULL;
    OracleDML_OracleDMLCommons::constant_return constant796;
    ImplTraits::TreeTypePtr::pointer constant796_last = NULL;
    OracleDML_OracleDMLCommons::general_element_return general_element797;
    ImplTraits::TreeTypePtr::pointer general_element797_last = NULL;
    OracleDML::subquery_return subquery799;
    ImplTraits::TreeTypePtr::pointer subquery799_last = NULL;
    OracleDML::subquery_operation_part_return subquery_operation_part801;
    ImplTraits::TreeTypePtr::pointer subquery_operation_part801_last = NULL;
    OracleDML::expression_or_vector_return expression_or_vector802;
    ImplTraits::TreeTypePtr::pointer expression_or_vector802_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN798_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN800_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN803_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery_operation_part(get_psrstate()->get_treeAdaptor(), "rule subquery_operation_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_or_vector(get_psrstate()->get_treeAdaptor(), "rule expression_or_vector");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1056:5: ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* ) -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN ) )

            ANTLR_UINT32 alt263;

            alt263=5;

            alt263 = cdfa263.predict(this, this->get_rec(), this->get_istream(), cdfa263 );
            if  (this->hasException())
            {
                goto ruleatomEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            switch (alt263)
            {
        	case 1:
        	    // OracleDML.g:1056:10: ( table_element outer_join_sign )=> table_element outer_join_sign
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_table_element_in_atom10961);
        	        table_element793=table_element();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, table_element793.tree);


        	        this->followPush(FOLLOW_outer_join_sign_in_atom10963);
        	        outer_join_sign794=outer_join_sign();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, outer_join_sign794.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1057:10: bind_variable
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_bind_variable_in_atom10974);
        	        bind_variable795=bind_variable();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, bind_variable795.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:1058:10: constant
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_constant_in_atom10985);
        	        constant796=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, constant796.tree);


        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:1059:10: general_element
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_general_element_in_atom10996);
        	        general_element797=general_element();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element797.tree);


        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:1060:10: LEFT_PAREN ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN )
        	    {
        	        LEFT_PAREN798 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_atom11007);
        	        if  (this->hasException())
        	        {
        	            goto ruleatomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }
        	         
        	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN798);


        	        // OracleDML.g:1061:10: ( ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN )
        	        {
        	            ANTLR_UINT32 alt262=2;
        	            {
        	                ANTLR_UINT32 LA262_0 = this->LA(1);
        	                if ( (LA262_0 == SQL92_RESERVED_SELECT) && (this->msynpred( antlr3::ClassForwarder<synpred47_OracleDML>() )))
        	                {
        	                    alt262=1;
        	                }
        	                else if ( (LA262_0 == LEFT_PAREN))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA262_2 = this->LA(2);
        	                        if ( (this->msynpred( antlr3::ClassForwarder<synpred47_OracleDML>() )))
        	                        {
        	                            alt262=1;
        	                        }
        	                        else if ( (true))
        	                        {
        	                            alt262=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 262 );
        	                            ex->set_state( 2 );


        	                            goto ruleatomEx;

        	                        }
        	                    }
        	                }
        	                else if ( (LA262_0 == APPROXIMATE_NUM_LIT || LA262_0 == BINDVAR || ((LA262_0 >= CHAR_STRING) && (LA262_0 <= CHAR_STRING_PERL)) || LA262_0 == COLON || LA262_0 == DELIMITED_ID || LA262_0 == EXACT_NUM_LIT || LA262_0 == INTRODUCER || LA262_0 == MINUS_SIGN || LA262_0 == NATIONAL_CHAR_STRING_LIT || ((LA262_0 >= PLSQL_NON_RESERVED_CAST) && (LA262_0 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA262_0 == PLUS_SIGN || LA262_0 == REGULAR_ID || LA262_0 == SQL92_RESERVED_ALL || LA262_0 == SQL92_RESERVED_ANY || LA262_0 == SQL92_RESERVED_CASE || ((LA262_0 >= SQL92_RESERVED_CURSOR) && (LA262_0 <= SQL92_RESERVED_DATE)) || LA262_0 == SQL92_RESERVED_DEFAULT || LA262_0 == SQL92_RESERVED_DISTINCT || ((LA262_0 >= SQL92_RESERVED_EXISTS) && (LA262_0 <= SQL92_RESERVED_FALSE)) || ((LA262_0 >= SQL92_RESERVED_NOT) && (LA262_0 <= SQL92_RESERVED_NULL)) || LA262_0 == SQL92_RESERVED_PRIOR || LA262_0 == SQL92_RESERVED_TRUE || LA262_0 == UNSIGNED_INTEGER))
        	                {
        	                    alt262=2;
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 262 );
        	                    ex->set_state( 0 );


        	                    goto ruleatomEx;

        	                }
        	            }
        	            switch (alt262)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1062:15: ( select_key | with_key )=> subquery RIGHT_PAREN ( subquery_operation_part )*
        	        	    {
        	        	        this->followPush(FOLLOW_subquery_in_atom11044);
        	        	        subquery799=subquery();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            subquery799_last = subquery799.tree.get();
        	        	            stream_subquery.add(subquery799.tree);
        	        	        }

        	        	        RIGHT_PAREN800 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_atom11046);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN800);


        	        	        // OracleDML.g:1062:63: ( subquery_operation_part )*

        	        	        for (;;)
        	        	        {
        	        	            ANTLR_UINT32 alt261=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	            case SQL92_RESERVED_UNION:
        	        	            	{
        	        	            		alt261=1;
        	        	            	}
        	        	                break;
        	        	            case SQL92_RESERVED_INTERSECT:
        	        	            	{
        	        	            		alt261=1;
        	        	            	}
        	        	                break;
        	        	            case PLSQL_RESERVED_MINUS:
        	        	            	{
        	        	            		alt261=1;
        	        	            	}
        	        	                break;

        	        	            }

        	        	            switch (alt261)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1062:63: subquery_operation_part
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_subquery_operation_part_in_atom11048);
        	        	        	        subquery_operation_part801=subquery_operation_part();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto ruleatomEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) 
        	        	        	        {
        	        	        	            subquery_operation_part801_last = subquery_operation_part801.tree.get();
        	        	        	            stream_subquery_operation_part.add(subquery_operation_part801.tree);
        	        	        	        }

        	        	        	    }
        	        	        	    break;

        	        	        	default:
        	        	        	    goto loop261;	/* break out of the loop */
        	        	        	    break;
        	        	            }
        	        	        }
        	        	        loop261: ; /* Jump out to here if this rule does not match */


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	             mode = 1; 
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1063:17: expression_or_vector RIGHT_PAREN
        	        	    {
        	        	        this->followPush(FOLLOW_expression_or_vector_in_atom11069);
        	        	        expression_or_vector802=expression_or_vector();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) 
        	        	        {
        	        	            expression_or_vector802_last = expression_or_vector802.tree.get();
        	        	            stream_expression_or_vector.add(expression_or_vector802.tree);
        	        	        }

        	        	        RIGHT_PAREN803 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_atom11071);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleatomEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }
        	        	         
        	        	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN803);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // AST REWRITE
        	        // elements: LEFT_PAREN, RIGHT_PAREN, subquery, subquery_operation_part, RIGHT_PAREN, expression_or_vector, LEFT_PAREN
        	        // token labels: 
        	        // rule labels: retval
        	        // token list labels: 
        	        // rule list labels: 
        	        // wildcard labels: 
        	        if ( this->get_backtracking()==0 ) {
        	        retval.tree = std::move(root_0);
        	        RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
        	        // 1065:10: -> { mode == 1 }? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* )
        	        if ( mode == 1 ) {
        	        	// OracleDML.g:1065:28: ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ( subquery_operation_part )* )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_SUBQUERY, "NESTED_SUBQUERY"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
        	        	// OracleDML.g:1065:78: ( subquery_operation_part )*
        	        	while ( stream_subquery_operation_part.hasNext() ) {
        	        		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_subquery_operation_part.nextTree());
        	        	}
        	        	stream_subquery_operation_part.reset();

        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }

        	        else // 1066:10: -> ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN )
        	        {
        	        	// OracleDML.g:1066:28: ^( NESTED_EXPR LEFT_PAREN expression_or_vector RIGHT_PAREN )
        	        	{
        	        	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
        	        	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_EXPR, "NESTED_EXPR"), root_1);
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_or_vector.nextTree());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
        	        	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
        	        	}
        	        }


        	        //retval.tree = std::move(root_0);
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto ruleatomEx; /* Prevent compiler warnings */
    ruleatomEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end atom */

/**
 * $ANTLR start expression_or_vector
 * OracleDML.g:1069:1: expression_or_vector : expression ( vector_expr )? -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr ) -> expression ;
 */
OracleDML::expression_or_vector_return
OracleDML::expression_or_vector()
{
    OracleDML::expression_or_vector_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression804;
    ImplTraits::TreeTypePtr::pointer expression804_last = NULL;
    OracleDML::vector_expr_return vector_expr805;
    ImplTraits::TreeTypePtr::pointer vector_expr805_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_vector_expr(get_psrstate()->get_treeAdaptor(), "rule vector_expr");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1071:5: ( expression ( vector_expr )? -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr ) -> expression )
        // OracleDML.g:1071:10: expression ( vector_expr )?
        {
            this->followPush(FOLLOW_expression_in_expression_or_vector11172);
            expression804=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpression_or_vectorEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression804_last = expression804.tree.get();
                stream_expression.add(expression804.tree);
            }

            // OracleDML.g:1071:21: ( vector_expr )?
            {
                ANTLR_UINT32 alt264=2;
                switch ( this->LA(1) )
                {
                    case COMMA:
                    	{
                    		alt264=1;
                    	}
                        break;
                }

                switch (alt264)
                {
            	case 1:
            	    // OracleDML.g:1071:22: vector_expr
            	    {
            	        this->followPush(FOLLOW_vector_expr_in_expression_or_vector11175);
            	        vector_expr805=vector_expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpression_or_vectorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            vector_expr805_last = vector_expr805.tree.get();
            	            stream_vector_expr.add(vector_expr805.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: vector_expr, expression, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1072:9: -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr )
            if (mode == 1) {
            	// OracleDML.g:1072:25: ^( VECTOR_EXPR ^( EXPR expression ) vector_expr )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(VECTOR_EXPR, "VECTOR_EXPR"), root_1);
            	// OracleDML.g:1072:39: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_vector_expr.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1073:9: -> expression
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, stream_expression.nextTree());
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleexpression_or_vectorEx; /* Prevent compiler warnings */
    ruleexpression_or_vectorEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end expression_or_vector */

/**
 * $ANTLR start vector_expr
 * OracleDML.g:1076:1: vector_expr : COMMA expression ( COMMA expression )* -> ( ^( EXPR expression ) )+ ;
 */
OracleDML::vector_expr_return
OracleDML::vector_expr()
{
    OracleDML::vector_expr_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA806 = NULL;
    ImplTraits::CommonTokenType const* COMMA808 = NULL;
    OracleDML::expression_return expression807;
    ImplTraits::TreeTypePtr::pointer expression807_last = NULL;
    OracleDML::expression_return expression809;
    ImplTraits::TreeTypePtr::pointer expression809_last = NULL;
    ImplTraits::TreeTypePtr COMMA806_tree;
    ImplTraits::TreeTypePtr COMMA808_tree;
    RewriteRuleTokenStream<ImplTraits> stream_COMMA(get_psrstate()->get_treeAdaptor(), "token COMMA");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1077:5: ( COMMA expression ( COMMA expression )* -> ( ^( EXPR expression ) )+ )
        // OracleDML.g:1077:10: COMMA expression ( COMMA expression )*
        {
            COMMA806 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_vector_expr11235);
            if  (this->hasException())
            {
                goto rulevector_exprEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA806);


            this->followPush(FOLLOW_expression_in_vector_expr11237);
            expression807=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevector_exprEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression807_last = expression807.tree.get();
                stream_expression.add(expression807.tree);
            }

            // OracleDML.g:1077:27: ( COMMA expression )*

            for (;;)
            {
                ANTLR_UINT32 alt265=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt265=1;
                	}
                    break;

                }

                switch (alt265)
                {
            	case 1:
            	    // OracleDML.g:1077:28: COMMA expression
            	    {
            	        COMMA808 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_vector_expr11240);
            	        if  (this->hasException())
            	        {
            	            goto rulevector_exprEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_COMMA.add(COMMA808);


            	        this->followPush(FOLLOW_expression_in_vector_expr11242);
            	        expression809=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulevector_exprEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression809_last = expression809.tree.get();
            	            stream_expression.add(expression809.tree);
            	        }

            	    }
            	    break;

            	default:
            	    goto loop265;	/* break out of the loop */
            	    break;
                }
            }
            loop265: ; /* Jump out to here if this rule does not match */


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1078:9: -> ( ^( EXPR expression ) )+
            {
            	if ( !(stream_expression.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "expression empty" );
            		goto rulevector_exprEx;
            	}
            	while ( stream_expression.hasNext() ) {
            		// OracleDML.g:1078:12: ^( EXPR expression )
            		{
            		ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            		root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_1);
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression.nextTree());
            		get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            		}
            	}
            	stream_expression.reset();

            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulevector_exprEx; /* Prevent compiler warnings */
    rulevector_exprEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end vector_expr */

/**
 * $ANTLR start quantified_expression
 * OracleDML.g:1081:1: quantified_expression : ( some_key | exists_key | all_key | any_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) ) -> ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? LEFT_PAREN expression_wrapper RIGHT_PAREN ) ;
 */
OracleDML::quantified_expression_return
OracleDML::quantified_expression()
{
    OracleDML::quantified_expression_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN814 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN816 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN817 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN819 = NULL;
    OracleDML_OracleDMLKeys::some_key_return some_key810;
    ImplTraits::TreeTypePtr::pointer some_key810_last = NULL;
    OracleDML_OracleDMLKeys::exists_key_return exists_key811;
    ImplTraits::TreeTypePtr::pointer exists_key811_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key812;
    ImplTraits::TreeTypePtr::pointer all_key812_last = NULL;
    OracleDML_OracleDMLKeys::any_key_return any_key813;
    ImplTraits::TreeTypePtr::pointer any_key813_last = NULL;
    OracleDML::subquery_return subquery815;
    ImplTraits::TreeTypePtr::pointer subquery815_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper818;
    ImplTraits::TreeTypePtr::pointer expression_wrapper818_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN814_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN816_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN817_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN819_tree;
    RewriteRuleTokenStream<ImplTraits> stream_LEFT_PAREN(get_psrstate()->get_treeAdaptor(), "token LEFT_PAREN");
    RewriteRuleTokenStream<ImplTraits> stream_RIGHT_PAREN(get_psrstate()->get_treeAdaptor(), "token RIGHT_PAREN");
    RewriteRuleSubtreeStream<ImplTraits> stream_all_key(get_psrstate()->get_treeAdaptor(), "rule all_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_expression_wrapper(get_psrstate()->get_treeAdaptor(), "rule expression_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_some_key(get_psrstate()->get_treeAdaptor(), "rule some_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_any_key(get_psrstate()->get_treeAdaptor(), "rule any_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_exists_key(get_psrstate()->get_treeAdaptor(), "rule exists_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_subquery(get_psrstate()->get_treeAdaptor(), "rule subquery");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1083:5: ( ( some_key | exists_key | all_key | any_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN ) -> { mode == 1 }? ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) ) -> ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? LEFT_PAREN expression_wrapper RIGHT_PAREN ) )
        // OracleDML.g:1083:10: ( some_key | exists_key | all_key | any_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN )
        {
            // OracleDML.g:1083:10: ( some_key | exists_key | all_key | any_key )
            {
                ANTLR_UINT32 alt266=4;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		alt266=1;
                	}
                    break;
                case SQL92_RESERVED_EXISTS:
                	{
                		alt266=2;
                	}
                    break;
                case SQL92_RESERVED_ALL:
                	{
                		alt266=3;
                	}
                    break;
                case SQL92_RESERVED_ANY:
                	{
                		alt266=4;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 266 );
                    ex->set_state( 0 );


                    goto rulequantified_expressionEx;

                }

                switch (alt266)
                {
            	case 1:
            	    // OracleDML.g:1083:12: some_key
            	    {
            	        this->followPush(FOLLOW_some_key_in_quantified_expression11291);
            	        some_key810=some_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            some_key810_last = some_key810.tree.get();
            	            stream_some_key.add(some_key810.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1083:23: exists_key
            	    {
            	        this->followPush(FOLLOW_exists_key_in_quantified_expression11295);
            	        exists_key811=exists_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            exists_key811_last = exists_key811.tree.get();
            	            stream_exists_key.add(exists_key811.tree);
            	        }

            	    }
            	    break;
            	case 3:
            	    // OracleDML.g:1083:36: all_key
            	    {
            	        this->followPush(FOLLOW_all_key_in_quantified_expression11299);
            	        all_key812=all_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            all_key812_last = all_key812.tree.get();
            	            stream_all_key.add(all_key812.tree);
            	        }

            	    }
            	    break;
            	case 4:
            	    // OracleDML.g:1083:46: any_key
            	    {
            	        this->followPush(FOLLOW_any_key_in_quantified_expression11303);
            	        any_key813=any_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            any_key813_last = any_key813.tree.get();
            	            stream_any_key.add(any_key813.tree);
            	        }

            	    }
            	    break;

                }
            }

            // OracleDML.g:1084:10: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression_wrapper RIGHT_PAREN )
            {
                ANTLR_UINT32 alt267=2;
                switch ( this->LA(1) )
                {
                case LEFT_PAREN:
                	{
                		{
                		    ANTLR_UINT32 LA267_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred48_OracleDML>() )))
                		    {
                		        alt267=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt267=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 267 );
                		        ex->set_state( 1 );


                		        goto rulequantified_expressionEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 267 );
                    ex->set_state( 0 );


                    goto rulequantified_expressionEx;

                }

                switch (alt267)
                {
            	case 1:
            	    // OracleDML.g:1084:12: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
            	    {
            	        LEFT_PAREN814 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_quantified_expression11330);
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN814);


            	        this->followPush(FOLLOW_subquery_in_quantified_expression11332);
            	        subquery815=subquery();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            subquery815_last = subquery815.tree.get();
            	            stream_subquery.add(subquery815.tree);
            	        }

            	        RIGHT_PAREN816 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_quantified_expression11334);
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN816);


            	        if ( this->get_backtracking()==0 )
            	        {
            	             mode = 1; 
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1085:14: LEFT_PAREN expression_wrapper RIGHT_PAREN
            	    {
            	        LEFT_PAREN817 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_quantified_expression11351);
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_LEFT_PAREN.add(LEFT_PAREN817);


            	        this->followPush(FOLLOW_expression_wrapper_in_quantified_expression11353);
            	        expression_wrapper818=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            expression_wrapper818_last = expression_wrapper818.tree.get();
            	            stream_expression_wrapper.add(expression_wrapper818.tree);
            	        }

            	        RIGHT_PAREN819 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_quantified_expression11355);
            	        if  (this->hasException())
            	        {
            	            goto rulequantified_expressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }
            	         
            	        if ( this->get_backtracking()==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN819);


            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: any_key, expression_wrapper, exists_key, any_key, RIGHT_PAREN, some_key, subquery, all_key, some_key, RIGHT_PAREN, LEFT_PAREN, exists_key, all_key, LEFT_PAREN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1087:10: -> { mode == 1 }? ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) )
            if ( mode == 1 ) {
            	// OracleDML.g:1087:28: ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_EXPR, "NESTED_EXPR"), root_1);
            	// OracleDML.g:1087:42: ( some_key )?
            	if ( stream_some_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_some_key.nextTree());
            	}
            	stream_some_key.reset();

            	// OracleDML.g:1087:52: ( exists_key )?
            	if ( stream_exists_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_exists_key.nextTree());
            	}
            	stream_exists_key.reset();

            	// OracleDML.g:1087:64: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:1087:73: ( any_key )?
            	if ( stream_any_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_any_key.nextTree());
            	}
            	stream_any_key.reset();

            	// OracleDML.g:1087:82: ^( NESTED_SUBQUERY LEFT_PAREN subquery RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_SUBQUERY, "NESTED_SUBQUERY"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_LEFT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_subquery.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1088:10: -> ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? LEFT_PAREN expression_wrapper RIGHT_PAREN )
            {
            	// OracleDML.g:1088:28: ^( NESTED_EXPR ( some_key )? ( exists_key )? ( all_key )? ( any_key )? LEFT_PAREN expression_wrapper RIGHT_PAREN )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(NESTED_EXPR, "NESTED_EXPR"), root_1);
            	// OracleDML.g:1088:42: ( some_key )?
            	if ( stream_some_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_some_key.nextTree());
            	}
            	stream_some_key.reset();

            	// OracleDML.g:1088:52: ( exists_key )?
            	if ( stream_exists_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_exists_key.nextTree());
            	}
            	stream_exists_key.reset();

            	// OracleDML.g:1088:64: ( all_key )?
            	if ( stream_all_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_all_key.nextTree());
            	}
            	stream_all_key.reset();

            	// OracleDML.g:1088:73: ( any_key )?
            	if ( stream_any_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_any_key.nextTree());
            	}
            	stream_any_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_LEFT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_expression_wrapper.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_RIGHT_PAREN.nextNode());
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulequantified_expressionEx; /* Prevent compiler warnings */
    rulequantified_expressionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end quantified_expression */

/**
 * $ANTLR start standard_function
 * OracleDML.g:1091:1: standard_function : ( stantard_function_enabling_over ^ function_argument_analytic ( over_clause )? | stantard_function_enabling_using ^ function_argument_modeling ( using_clause )? | count_key ^ LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )? | ( cast_key ^| xmlcast_key ^) LEFT_PAREN ( ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )? | concatenation_wrapper as_key ! type_spec ) RIGHT_PAREN | chr_key ^ LEFT_PAREN concatenation_wrapper using_key ! nchar_cs_key RIGHT_PAREN | collect_key ^ LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN | stantard_function_enabling_within_or_over ^ function_argument ( within_or_over_part )+ | decompose_key ^ LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN | extract_key ^ LEFT_PAREN REGULAR_ID from_key ! concatenation_wrapper RIGHT_PAREN | ( first_value_key ^| last_value_key ^) function_argument_analytic ( respect_or_ignore_nulls )? over_clause | stantard_function_pedictions ^ LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN | translate_key ^ LEFT_PAREN expression_wrapper ( using_key ! ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN | treat_key ^ LEFT_PAREN expression_wrapper as_key ! ( ref_key )? type_spec RIGHT_PAREN | trim_key ^ LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN | xmlagg_key ^ LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )? | ( xmlcolattval_key ^| xmlforest_key ^) LEFT_PAREN xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlelement_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA ! xml_attributes_clause )? ( COMMA ! expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlexists_key ^ LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN | xmlparse_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlpi_key ^ LEFT_PAREN ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper ) ( COMMA ! concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlquery_key ^ LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key ! content_key ! ( null_key on_key ! empty_key !)? RIGHT_PAREN ( PERIOD general_element_part )? | xmlroot_key ^ LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA ! xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlserialize_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key ! type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmltable_key ^ LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )? );
 */
OracleDML::standard_function_return
OracleDML::standard_function()
{
    OracleDML::standard_function_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN827 = NULL;
    ImplTraits::CommonTokenType const* ASTERISK828 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN833 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN837 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN839 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN842 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN848 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN850 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN854 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN856 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN861 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN866 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN870 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN872 = NULL;
    ImplTraits::CommonTokenType const* REGULAR_ID873 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN876 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN883 = NULL;
    ImplTraits::CommonTokenType const* COMMA885 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN889 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN891 = NULL;
    ImplTraits::CommonTokenType const* COMMA896 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN898 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN900 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN905 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN907 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN914 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN916 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN919 = NULL;
    ImplTraits::CommonTokenType const* PERIOD920 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN924 = NULL;
    ImplTraits::CommonTokenType const* COMMA926 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN928 = NULL;
    ImplTraits::CommonTokenType const* PERIOD929 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN932 = NULL;
    ImplTraits::CommonTokenType const* COMMA938 = NULL;
    ImplTraits::CommonTokenType const* COMMA940 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN943 = NULL;
    ImplTraits::CommonTokenType const* PERIOD944 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN947 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN950 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN952 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN957 = NULL;
    ImplTraits::CommonTokenType const* PERIOD958 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN961 = NULL;
    ImplTraits::CommonTokenType const* COMMA966 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN968 = NULL;
    ImplTraits::CommonTokenType const* PERIOD969 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN972 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN980 = NULL;
    ImplTraits::CommonTokenType const* PERIOD981 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN984 = NULL;
    ImplTraits::CommonTokenType const* COMMA987 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN989 = NULL;
    ImplTraits::CommonTokenType const* PERIOD990 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN993 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1005 = NULL;
    ImplTraits::CommonTokenType const* PERIOD1006 = NULL;
    ImplTraits::CommonTokenType const* LEFT_PAREN1009 = NULL;
    ImplTraits::CommonTokenType const* COMMA1015 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1017 = NULL;
    ImplTraits::CommonTokenType const* PERIOD1018 = NULL;
    OracleDML::stantard_function_enabling_over_return stantard_function_enabling_over820;
    ImplTraits::TreeTypePtr::pointer stantard_function_enabling_over820_last = NULL;
    OracleDML_OracleDMLCommons::function_argument_analytic_return function_argument_analytic821;
    ImplTraits::TreeTypePtr::pointer function_argument_analytic821_last = NULL;
    OracleDML::over_clause_return over_clause822;
    ImplTraits::TreeTypePtr::pointer over_clause822_last = NULL;
    OracleDML::stantard_function_enabling_using_return stantard_function_enabling_using823;
    ImplTraits::TreeTypePtr::pointer stantard_function_enabling_using823_last = NULL;
    OracleDML_OracleDMLCommons::function_argument_modeling_return function_argument_modeling824;
    ImplTraits::TreeTypePtr::pointer function_argument_modeling824_last = NULL;
    OracleDML::using_clause_return using_clause825;
    ImplTraits::TreeTypePtr::pointer using_clause825_last = NULL;
    OracleDML_OracleDMLKeys::count_key_return count_key826;
    ImplTraits::TreeTypePtr::pointer count_key826_last = NULL;
    OracleDML_OracleDMLKeys::distinct_key_return distinct_key829;
    ImplTraits::TreeTypePtr::pointer distinct_key829_last = NULL;
    OracleDML_OracleDMLKeys::unique_key_return unique_key830;
    ImplTraits::TreeTypePtr::pointer unique_key830_last = NULL;
    OracleDML_OracleDMLKeys::all_key_return all_key831;
    ImplTraits::TreeTypePtr::pointer all_key831_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper832;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper832_last = NULL;
    OracleDML::over_clause_return over_clause834;
    ImplTraits::TreeTypePtr::pointer over_clause834_last = NULL;
    OracleDML_OracleDMLKeys::cast_key_return cast_key835;
    ImplTraits::TreeTypePtr::pointer cast_key835_last = NULL;
    OracleDML_OracleDMLKeys::xmlcast_key_return xmlcast_key836;
    ImplTraits::TreeTypePtr::pointer xmlcast_key836_last = NULL;
    OracleDML_OracleDMLKeys::multiset_key_return multiset_key838;
    ImplTraits::TreeTypePtr::pointer multiset_key838_last = NULL;
    OracleDML::subquery_return subquery840;
    ImplTraits::TreeTypePtr::pointer subquery840_last = NULL;
    OracleDML::order_by_clause_return order_by_clause841;
    ImplTraits::TreeTypePtr::pointer order_by_clause841_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key843;
    ImplTraits::TreeTypePtr::pointer as_key843_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec844;
    ImplTraits::TreeTypePtr::pointer type_spec844_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper845;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper845_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key846;
    ImplTraits::TreeTypePtr::pointer as_key846_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec847;
    ImplTraits::TreeTypePtr::pointer type_spec847_last = NULL;
    OracleDML_OracleDMLKeys::chr_key_return chr_key849;
    ImplTraits::TreeTypePtr::pointer chr_key849_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper851;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper851_last = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key852;
    ImplTraits::TreeTypePtr::pointer using_key852_last = NULL;
    OracleDML_OracleDMLKeys::nchar_cs_key_return nchar_cs_key853;
    ImplTraits::TreeTypePtr::pointer nchar_cs_key853_last = NULL;
    OracleDML_OracleDMLKeys::collect_key_return collect_key855;
    ImplTraits::TreeTypePtr::pointer collect_key855_last = NULL;
    OracleDML_OracleDMLKeys::distinct_key_return distinct_key857;
    ImplTraits::TreeTypePtr::pointer distinct_key857_last = NULL;
    OracleDML_OracleDMLKeys::unique_key_return unique_key858;
    ImplTraits::TreeTypePtr::pointer unique_key858_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper859;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper859_last = NULL;
    OracleDML::collect_order_by_part_return collect_order_by_part860;
    ImplTraits::TreeTypePtr::pointer collect_order_by_part860_last = NULL;
    OracleDML::stantard_function_enabling_within_or_over_return stantard_function_enabling_within_or_over862;
    ImplTraits::TreeTypePtr::pointer stantard_function_enabling_within_or_over862_last = NULL;
    OracleDML_OracleDMLCommons::function_argument_return function_argument863;
    ImplTraits::TreeTypePtr::pointer function_argument863_last = NULL;
    OracleDML::within_or_over_part_return within_or_over_part864;
    ImplTraits::TreeTypePtr::pointer within_or_over_part864_last = NULL;
    OracleDML_OracleDMLKeys::decompose_key_return decompose_key865;
    ImplTraits::TreeTypePtr::pointer decompose_key865_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper867;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper867_last = NULL;
    OracleDML_OracleDMLKeys::canonical_key_return canonical_key868;
    ImplTraits::TreeTypePtr::pointer canonical_key868_last = NULL;
    OracleDML_OracleDMLKeys::compatibility_key_return compatibility_key869;
    ImplTraits::TreeTypePtr::pointer compatibility_key869_last = NULL;
    OracleDML_OracleDMLKeys::extract_key_return extract_key871;
    ImplTraits::TreeTypePtr::pointer extract_key871_last = NULL;
    OracleDML_OracleDMLKeys::from_key_return from_key874;
    ImplTraits::TreeTypePtr::pointer from_key874_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper875;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper875_last = NULL;
    OracleDML_OracleDMLKeys::first_value_key_return first_value_key877;
    ImplTraits::TreeTypePtr::pointer first_value_key877_last = NULL;
    OracleDML_OracleDMLKeys::last_value_key_return last_value_key878;
    ImplTraits::TreeTypePtr::pointer last_value_key878_last = NULL;
    OracleDML_OracleDMLCommons::function_argument_analytic_return function_argument_analytic879;
    ImplTraits::TreeTypePtr::pointer function_argument_analytic879_last = NULL;
    OracleDML_OracleDMLCommons::respect_or_ignore_nulls_return respect_or_ignore_nulls880;
    ImplTraits::TreeTypePtr::pointer respect_or_ignore_nulls880_last = NULL;
    OracleDML::over_clause_return over_clause881;
    ImplTraits::TreeTypePtr::pointer over_clause881_last = NULL;
    OracleDML::stantard_function_pedictions_return stantard_function_pedictions882;
    ImplTraits::TreeTypePtr::pointer stantard_function_pedictions882_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper884;
    ImplTraits::TreeTypePtr::pointer expression_wrapper884_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper886;
    ImplTraits::TreeTypePtr::pointer expression_wrapper886_last = NULL;
    OracleDML::cost_matrix_clause_return cost_matrix_clause887;
    ImplTraits::TreeTypePtr::pointer cost_matrix_clause887_last = NULL;
    OracleDML::using_clause_return using_clause888;
    ImplTraits::TreeTypePtr::pointer using_clause888_last = NULL;
    OracleDML_OracleDMLKeys::translate_key_return translate_key890;
    ImplTraits::TreeTypePtr::pointer translate_key890_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper892;
    ImplTraits::TreeTypePtr::pointer expression_wrapper892_last = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key893;
    ImplTraits::TreeTypePtr::pointer using_key893_last = NULL;
    OracleDML_OracleDMLKeys::char_cs_key_return char_cs_key894;
    ImplTraits::TreeTypePtr::pointer char_cs_key894_last = NULL;
    OracleDML_OracleDMLKeys::nchar_cs_key_return nchar_cs_key895;
    ImplTraits::TreeTypePtr::pointer nchar_cs_key895_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper897;
    ImplTraits::TreeTypePtr::pointer expression_wrapper897_last = NULL;
    OracleDML_OracleDMLKeys::treat_key_return treat_key899;
    ImplTraits::TreeTypePtr::pointer treat_key899_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper901;
    ImplTraits::TreeTypePtr::pointer expression_wrapper901_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key902;
    ImplTraits::TreeTypePtr::pointer as_key902_last = NULL;
    OracleDML_OracleDMLKeys::ref_key_return ref_key903;
    ImplTraits::TreeTypePtr::pointer ref_key903_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec904;
    ImplTraits::TreeTypePtr::pointer type_spec904_last = NULL;
    OracleDML_OracleDMLKeys::trim_key_return trim_key906;
    ImplTraits::TreeTypePtr::pointer trim_key906_last = NULL;
    OracleDML_OracleDMLKeys::leading_key_return leading_key908;
    ImplTraits::TreeTypePtr::pointer leading_key908_last = NULL;
    OracleDML_OracleDMLKeys::trailing_key_return trailing_key909;
    ImplTraits::TreeTypePtr::pointer trailing_key909_last = NULL;
    OracleDML_OracleDMLKeys::both_key_return both_key910;
    ImplTraits::TreeTypePtr::pointer both_key910_last = NULL;
    OracleDML_OracleDMLCommons::quoted_string_return quoted_string911;
    ImplTraits::TreeTypePtr::pointer quoted_string911_last = NULL;
    OracleDML_OracleDMLKeys::from_key_return from_key912;
    ImplTraits::TreeTypePtr::pointer from_key912_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper913;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper913_last = NULL;
    OracleDML_OracleDMLKeys::xmlagg_key_return xmlagg_key915;
    ImplTraits::TreeTypePtr::pointer xmlagg_key915_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper917;
    ImplTraits::TreeTypePtr::pointer expression_wrapper917_last = NULL;
    OracleDML::order_by_clause_return order_by_clause918;
    ImplTraits::TreeTypePtr::pointer order_by_clause918_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part921;
    ImplTraits::TreeTypePtr::pointer general_element_part921_last = NULL;
    OracleDML_OracleDMLKeys::xmlcolattval_key_return xmlcolattval_key922;
    ImplTraits::TreeTypePtr::pointer xmlcolattval_key922_last = NULL;
    OracleDML_OracleDMLKeys::xmlforest_key_return xmlforest_key923;
    ImplTraits::TreeTypePtr::pointer xmlforest_key923_last = NULL;
    OracleDML::xml_multiuse_expression_element_return xml_multiuse_expression_element925;
    ImplTraits::TreeTypePtr::pointer xml_multiuse_expression_element925_last = NULL;
    OracleDML::xml_multiuse_expression_element_return xml_multiuse_expression_element927;
    ImplTraits::TreeTypePtr::pointer xml_multiuse_expression_element927_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part930;
    ImplTraits::TreeTypePtr::pointer general_element_part930_last = NULL;
    OracleDML_OracleDMLKeys::xmlelement_key_return xmlelement_key931;
    ImplTraits::TreeTypePtr::pointer xmlelement_key931_last = NULL;
    OracleDML_OracleDMLKeys::entityescaping_key_return entityescaping_key933;
    ImplTraits::TreeTypePtr::pointer entityescaping_key933_last = NULL;
    OracleDML_OracleDMLKeys::noentityescaping_key_return noentityescaping_key934;
    ImplTraits::TreeTypePtr::pointer noentityescaping_key934_last = NULL;
    OracleDML_OracleDMLKeys::name_key_return name_key935;
    ImplTraits::TreeTypePtr::pointer name_key935_last = NULL;
    OracleDML_OracleDMLKeys::evalname_key_return evalname_key936;
    ImplTraits::TreeTypePtr::pointer evalname_key936_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper937;
    ImplTraits::TreeTypePtr::pointer expression_wrapper937_last = NULL;
    OracleDML::xml_attributes_clause_return xml_attributes_clause939;
    ImplTraits::TreeTypePtr::pointer xml_attributes_clause939_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper941;
    ImplTraits::TreeTypePtr::pointer expression_wrapper941_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias942;
    ImplTraits::TreeTypePtr::pointer column_alias942_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part945;
    ImplTraits::TreeTypePtr::pointer general_element_part945_last = NULL;
    OracleDML_OracleDMLKeys::xmlexists_key_return xmlexists_key946;
    ImplTraits::TreeTypePtr::pointer xmlexists_key946_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper948;
    ImplTraits::TreeTypePtr::pointer expression_wrapper948_last = NULL;
    OracleDML::xml_passing_clause_return xml_passing_clause949;
    ImplTraits::TreeTypePtr::pointer xml_passing_clause949_last = NULL;
    OracleDML_OracleDMLKeys::xmlparse_key_return xmlparse_key951;
    ImplTraits::TreeTypePtr::pointer xmlparse_key951_last = NULL;
    OracleDML_OracleDMLKeys::document_key_return document_key953;
    ImplTraits::TreeTypePtr::pointer document_key953_last = NULL;
    OracleDML_OracleDMLKeys::content_key_return content_key954;
    ImplTraits::TreeTypePtr::pointer content_key954_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper955;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper955_last = NULL;
    OracleDML_OracleDMLKeys::wellformed_key_return wellformed_key956;
    ImplTraits::TreeTypePtr::pointer wellformed_key956_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part959;
    ImplTraits::TreeTypePtr::pointer general_element_part959_last = NULL;
    OracleDML_OracleDMLKeys::xmlpi_key_return xmlpi_key960;
    ImplTraits::TreeTypePtr::pointer xmlpi_key960_last = NULL;
    OracleDML_OracleDMLKeys::name_key_return name_key962;
    ImplTraits::TreeTypePtr::pointer name_key962_last = NULL;
    OracleDML_OracleDMLCommons::id_return id963;
    ImplTraits::TreeTypePtr::pointer id963_last = NULL;
    OracleDML_OracleDMLKeys::evalname_key_return evalname_key964;
    ImplTraits::TreeTypePtr::pointer evalname_key964_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper965;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper965_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper967;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper967_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part970;
    ImplTraits::TreeTypePtr::pointer general_element_part970_last = NULL;
    OracleDML_OracleDMLKeys::xmlquery_key_return xmlquery_key971;
    ImplTraits::TreeTypePtr::pointer xmlquery_key971_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper973;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper973_last = NULL;
    OracleDML::xml_passing_clause_return xml_passing_clause974;
    ImplTraits::TreeTypePtr::pointer xml_passing_clause974_last = NULL;
    OracleDML_OracleDMLKeys::returning_key_return returning_key975;
    ImplTraits::TreeTypePtr::pointer returning_key975_last = NULL;
    OracleDML_OracleDMLKeys::content_key_return content_key976;
    ImplTraits::TreeTypePtr::pointer content_key976_last = NULL;
    OracleDML_OracleDMLKeys::null_key_return null_key977;
    ImplTraits::TreeTypePtr::pointer null_key977_last = NULL;
    OracleDML_OracleDMLKeys::on_key_return on_key978;
    ImplTraits::TreeTypePtr::pointer on_key978_last = NULL;
    OracleDML_OracleDMLKeys::empty_key_return empty_key979;
    ImplTraits::TreeTypePtr::pointer empty_key979_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part982;
    ImplTraits::TreeTypePtr::pointer general_element_part982_last = NULL;
    OracleDML_OracleDMLKeys::xmlroot_key_return xmlroot_key983;
    ImplTraits::TreeTypePtr::pointer xmlroot_key983_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper985;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper985_last = NULL;
    OracleDML::xmlroot_param_version_part_return xmlroot_param_version_part986;
    ImplTraits::TreeTypePtr::pointer xmlroot_param_version_part986_last = NULL;
    OracleDML::xmlroot_param_standalone_part_return xmlroot_param_standalone_part988;
    ImplTraits::TreeTypePtr::pointer xmlroot_param_standalone_part988_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part991;
    ImplTraits::TreeTypePtr::pointer general_element_part991_last = NULL;
    OracleDML_OracleDMLKeys::xmlserialize_key_return xmlserialize_key992;
    ImplTraits::TreeTypePtr::pointer xmlserialize_key992_last = NULL;
    OracleDML_OracleDMLKeys::document_key_return document_key994;
    ImplTraits::TreeTypePtr::pointer document_key994_last = NULL;
    OracleDML_OracleDMLKeys::content_key_return content_key995;
    ImplTraits::TreeTypePtr::pointer content_key995_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper996;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper996_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key997;
    ImplTraits::TreeTypePtr::pointer as_key997_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec998;
    ImplTraits::TreeTypePtr::pointer type_spec998_last = NULL;
    OracleDML::xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part999;
    ImplTraits::TreeTypePtr::pointer xmlserialize_param_enconding_part999_last = NULL;
    OracleDML::xmlserialize_param_version_part_return xmlserialize_param_version_part1000;
    ImplTraits::TreeTypePtr::pointer xmlserialize_param_version_part1000_last = NULL;
    OracleDML::xmlserialize_param_ident_part_return xmlserialize_param_ident_part1001;
    ImplTraits::TreeTypePtr::pointer xmlserialize_param_ident_part1001_last = NULL;
    OracleDML_OracleDMLKeys::hide_key_return hide_key1002;
    ImplTraits::TreeTypePtr::pointer hide_key1002_last = NULL;
    OracleDML_OracleDMLKeys::show_key_return show_key1003;
    ImplTraits::TreeTypePtr::pointer show_key1003_last = NULL;
    OracleDML_OracleDMLKeys::defaults_key_return defaults_key1004;
    ImplTraits::TreeTypePtr::pointer defaults_key1004_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part1007;
    ImplTraits::TreeTypePtr::pointer general_element_part1007_last = NULL;
    OracleDML_OracleDMLKeys::xmltable_key_return xmltable_key1008;
    ImplTraits::TreeTypePtr::pointer xmltable_key1008_last = NULL;
    OracleDML::xml_namespaces_clause_return xml_namespaces_clause1010;
    ImplTraits::TreeTypePtr::pointer xml_namespaces_clause1010_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1011;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1011_last = NULL;
    OracleDML::xml_passing_clause_return xml_passing_clause1012;
    ImplTraits::TreeTypePtr::pointer xml_passing_clause1012_last = NULL;
    OracleDML_OracleDMLKeys::columns_key_return columns_key1013;
    ImplTraits::TreeTypePtr::pointer columns_key1013_last = NULL;
    OracleDML::xml_table_column_return xml_table_column1014;
    ImplTraits::TreeTypePtr::pointer xml_table_column1014_last = NULL;
    OracleDML::xml_table_column_return xml_table_column1016;
    ImplTraits::TreeTypePtr::pointer xml_table_column1016_last = NULL;
    OracleDML_OracleDMLCommons::general_element_part_return general_element_part1019;
    ImplTraits::TreeTypePtr::pointer general_element_part1019_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN827_tree;
    ImplTraits::TreeTypePtr ASTERISK828_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN833_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN837_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN839_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN842_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN848_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN850_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN854_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN856_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN861_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN866_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN870_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN872_tree;
    ImplTraits::TreeTypePtr REGULAR_ID873_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN876_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN883_tree;
    ImplTraits::TreeTypePtr COMMA885_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN889_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN891_tree;
    ImplTraits::TreeTypePtr COMMA896_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN898_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN900_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN905_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN907_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN914_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN916_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN919_tree;
    ImplTraits::TreeTypePtr PERIOD920_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN924_tree;
    ImplTraits::TreeTypePtr COMMA926_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN928_tree;
    ImplTraits::TreeTypePtr PERIOD929_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN932_tree;
    ImplTraits::TreeTypePtr COMMA938_tree;
    ImplTraits::TreeTypePtr COMMA940_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN943_tree;
    ImplTraits::TreeTypePtr PERIOD944_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN947_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN950_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN952_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN957_tree;
    ImplTraits::TreeTypePtr PERIOD958_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN961_tree;
    ImplTraits::TreeTypePtr COMMA966_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN968_tree;
    ImplTraits::TreeTypePtr PERIOD969_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN972_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN980_tree;
    ImplTraits::TreeTypePtr PERIOD981_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN984_tree;
    ImplTraits::TreeTypePtr COMMA987_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN989_tree;
    ImplTraits::TreeTypePtr PERIOD990_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN993_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1005_tree;
    ImplTraits::TreeTypePtr PERIOD1006_tree;
    ImplTraits::TreeTypePtr LEFT_PAREN1009_tree;
    ImplTraits::TreeTypePtr COMMA1015_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1017_tree;
    ImplTraits::TreeTypePtr PERIOD1018_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1092:5: ( stantard_function_enabling_over ^ function_argument_analytic ( over_clause )? | stantard_function_enabling_using ^ function_argument_modeling ( using_clause )? | count_key ^ LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )? | ( cast_key ^| xmlcast_key ^) LEFT_PAREN ( ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )? | concatenation_wrapper as_key ! type_spec ) RIGHT_PAREN | chr_key ^ LEFT_PAREN concatenation_wrapper using_key ! nchar_cs_key RIGHT_PAREN | collect_key ^ LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN | stantard_function_enabling_within_or_over ^ function_argument ( within_or_over_part )+ | decompose_key ^ LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN | extract_key ^ LEFT_PAREN REGULAR_ID from_key ! concatenation_wrapper RIGHT_PAREN | ( first_value_key ^| last_value_key ^) function_argument_analytic ( respect_or_ignore_nulls )? over_clause | stantard_function_pedictions ^ LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN | translate_key ^ LEFT_PAREN expression_wrapper ( using_key ! ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN | treat_key ^ LEFT_PAREN expression_wrapper as_key ! ( ref_key )? type_spec RIGHT_PAREN | trim_key ^ LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN | xmlagg_key ^ LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )? | ( xmlcolattval_key ^| xmlforest_key ^) LEFT_PAREN xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlelement_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA ! xml_attributes_clause )? ( COMMA ! expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )? | xmlexists_key ^ LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN | xmlparse_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlpi_key ^ LEFT_PAREN ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper ) ( COMMA ! concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlquery_key ^ LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key ! content_key ! ( null_key on_key ! empty_key !)? RIGHT_PAREN ( PERIOD general_element_part )? | xmlroot_key ^ LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA ! xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )? | xmlserialize_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key ! type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )? | xmltable_key ^ LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )? )

            ANTLR_UINT32 alt328;

            alt328=24;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA328_1 = this->LA(2);
            		    if ( ((enablesOverClause(LT(1)->getText()))))
            		    {
            		        alt328=1;
            		    }
            		    else if ( ((enablesUsingClause(LT(1)->getText()))))
            		    {
            		        alt328=2;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "COUNT" )))
            		    {
            		        alt328=3;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLCAST")))
            		    {
            		        alt328=4;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "CHR")))
            		    {
            		        alt328=5;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "COLLECT")))
            		    {
            		        alt328=6;
            		    }
            		    else if ( ((enablesWithinOrOverClause(LT(1)->getText()))))
            		    {
            		        alt328=7;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "DECOMPOSE")))
            		    {
            		        alt328=8;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "EXTRACT")))
            		    {
            		        alt328=9;
            		    }
            		    else if ( ((((toUpper(LT(1)->getText()) == "LAST_VALUE"))||((toUpper(LT(1)->getText()) == "FIRST_VALUE")))))
            		    {
            		        alt328=10;
            		    }
            		    else if ( ((isStandardPredictionFunction(LT(1)->getText()))))
            		    {
            		        alt328=11;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "TRANSLATE")))
            		    {
            		        alt328=12;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "TREAT")))
            		    {
            		        alt328=13;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "TRIM")))
            		    {
            		        alt328=14;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLAGG")))
            		    {
            		        alt328=15;
            		    }
            		    else if ( ((((toUpper(LT(1)->getText()) == "XMLCOLATTVAL"))||((toUpper(LT(1)->getText()) == "XMLFOREST")))))
            		    {
            		        alt328=16;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLELEMENT")))
            		    {
            		        alt328=17;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLEXISTS")))
            		    {
            		        alt328=18;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLPARSE")))
            		    {
            		        alt328=19;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLPI")))
            		    {
            		        alt328=20;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLQUERY")))
            		    {
            		        alt328=21;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLROOT")))
            		    {
            		        alt328=22;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLSERIALIZE")))
            		    {
            		        alt328=23;
            		    }
            		    else if ( ((toUpper(LT(1)->getText()) == "XMLTABLE")))
            		    {
            		        alt328=24;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 328 );
            		        ex->set_state( 1 );


            		        goto rulestandard_functionEx;

            		    }
            		}
            	}
                break;
            case PLSQL_NON_RESERVED_CAST:
            	{
            		alt328=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 328 );
                ex->set_state( 0 );


                goto rulestandard_functionEx;

            }

            switch (alt328)
            {
        	case 1:
        	    // OracleDML.g:1092:10: stantard_function_enabling_over ^ function_argument_analytic ( over_clause )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_stantard_function_enabling_over_in_standard_function11491);
        	        stantard_function_enabling_over820=stantard_function_enabling_over();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(stantard_function_enabling_over820.tree, root_0);

        	        this->followPush(FOLLOW_function_argument_analytic_in_standard_function11494);
        	        function_argument_analytic821=function_argument_analytic();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, function_argument_analytic821.tree);


        	        // OracleDML.g:1092:70: ( over_clause )?
        	        {
        	            ANTLR_UINT32 alt268=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case LEFT_PAREN:
        	                		    	{
        	                		    		{
        	                		    		    ANTLR_UINT32 LA268_3 = this->LA(3);
        	                		    		    if ( (LA268_3 == REGULAR_ID))
        	                		    		    {
        	                		    		        {
        	                		    		            ANTLR_UINT32 LA268_6 = this->LA(4);
        	                		    		            if ( (LA268_6 == SQL92_RESERVED_BY) && ((toUpper(LT(1)->getText()) == "OVER")))
        	                		    		            {
        	                		    		                alt268=1;
        	                		    		            }
        	                		    		        }
        	                		    		    }
        	                		    		    else if ( (LA268_3 == RIGHT_PAREN || LA268_3 == SQL92_RESERVED_ORDER) && ((toUpper(LT(1)->getText()) == "OVER")))
        	                		    		    {
        	                		    		        alt268=1;
        	                		    		    }
        	                		    		}
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	            }

        	            switch (alt268)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1092:70: over_clause
        	        	    {
        	        	        this->followPush(FOLLOW_over_clause_in_standard_function11496);
        	        	        over_clause822=over_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, over_clause822.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1093:10: stantard_function_enabling_using ^ function_argument_modeling ( using_clause )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_stantard_function_enabling_using_in_standard_function11508);
        	        stantard_function_enabling_using823=stantard_function_enabling_using();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(stantard_function_enabling_using823.tree, root_0);

        	        this->followPush(FOLLOW_function_argument_modeling_in_standard_function11511);
        	        function_argument_modeling824=function_argument_modeling();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, function_argument_modeling824.tree);


        	        // OracleDML.g:1093:71: ( using_clause )?
        	        {
        	            ANTLR_UINT32 alt269=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PLSQL_NON_RESERVED_USING:
        	                	{
        	                		alt269=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt269)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1093:71: using_clause
        	        	    {
        	        	        this->followPush(FOLLOW_using_clause_in_standard_function11513);
        	        	        using_clause825=using_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, using_clause825.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:1094:10: count_key ^ LEFT_PAREN ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ( over_clause )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_count_key_in_standard_function11525);
        	        count_key826=count_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(count_key826.tree, root_0);

        	        LEFT_PAREN827 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function11540);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN827_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN827));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN827_tree);
        	        }


        	        // OracleDML.g:1096:17: ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper )
        	        {
        	            ANTLR_UINT32 alt271=2;
        	            switch ( this->LA(1) )
        	            {
        	            case ASTERISK:
        	            	{
        	            		alt271=1;
        	            	}
        	                break;
        	            case APPROXIMATE_NUM_LIT:
        	            case BINDVAR:
        	            case CHAR_STRING:
        	            case CHAR_STRING_PERL:
        	            case COLON:
        	            case DELIMITED_ID:
        	            case EXACT_NUM_LIT:
        	            case INTRODUCER:
        	            case LEFT_PAREN:
        	            case MINUS_SIGN:
        	            case NATIONAL_CHAR_STRING_LIT:
        	            case PLSQL_NON_RESERVED_CAST:
        	            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
        	            case PLUS_SIGN:
        	            case REGULAR_ID:
        	            case SQL92_RESERVED_ALL:
        	            case SQL92_RESERVED_ANY:
        	            case SQL92_RESERVED_CASE:
        	            case SQL92_RESERVED_DATE:
        	            case SQL92_RESERVED_DEFAULT:
        	            case SQL92_RESERVED_DISTINCT:
        	            case SQL92_RESERVED_EXISTS:
        	            case SQL92_RESERVED_FALSE:
        	            case SQL92_RESERVED_NULL:
        	            case SQL92_RESERVED_PRIOR:
        	            case SQL92_RESERVED_TRUE:
        	            case SQL92_RESERVED_UNIQUE:
        	            case UNSIGNED_INTEGER:
        	            	{
        	            		alt271=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return retval;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 271 );
        	                ex->set_state( 0 );


        	                goto rulestandard_functionEx;

        	            }

        	            switch (alt271)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1096:19: ASTERISK
        	        	    {
        	        	        ASTERISK828 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_standard_function11560);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        ASTERISK828_tree = std::move(get_psrstate()->get_treeAdaptor()->create(ASTERISK828));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, ASTERISK828_tree);
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1096:30: ( distinct_key | unique_key | all_key )? concatenation_wrapper
        	        	    {
        	        	        // OracleDML.g:1096:30: ( distinct_key | unique_key | all_key )?
        	        	        {
        	        	            ANTLR_UINT32 alt270=4;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case SQL92_RESERVED_DISTINCT:
        	        	                	{
        	        	                		alt270=1;
        	        	                	}
        	        	                    break;
        	        	                case SQL92_RESERVED_UNIQUE:
        	        	                	{
        	        	                		alt270=2;
        	        	                	}
        	        	                    break;
        	        	                case SQL92_RESERVED_ALL:
        	        	                	{
        	        	                		alt270=3;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt270)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1096:31: distinct_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_distinct_key_in_standard_function11565);
        	        	        	        distinct_key829=distinct_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, distinct_key829.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1096:44: unique_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_unique_key_in_standard_function11567);
        	        	        	        unique_key830=unique_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unique_key830.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 3:
        	        	        	    // OracleDML.g:1096:55: all_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_all_key_in_standard_function11569);
        	        	        	        all_key831=all_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, all_key831.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function11573);
        	        	        concatenation_wrapper832=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper832.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN833 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function11589);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN833_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN833));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN833_tree);
        	        }


        	        // OracleDML.g:1097:25: ( over_clause )?
        	        {
        	            ANTLR_UINT32 alt272=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case LEFT_PAREN:
        	                		    	{
        	                		    		{
        	                		    		    ANTLR_UINT32 LA272_3 = this->LA(3);
        	                		    		    if ( (LA272_3 == REGULAR_ID))
        	                		    		    {
        	                		    		        {
        	                		    		            ANTLR_UINT32 LA272_6 = this->LA(4);
        	                		    		            if ( (LA272_6 == SQL92_RESERVED_BY) && ((toUpper(LT(1)->getText()) == "OVER")))
        	                		    		            {
        	                		    		                alt272=1;
        	                		    		            }
        	                		    		        }
        	                		    		    }
        	                		    		    else if ( (LA272_3 == RIGHT_PAREN || LA272_3 == SQL92_RESERVED_ORDER) && ((toUpper(LT(1)->getText()) == "OVER")))
        	                		    		    {
        	                		    		        alt272=1;
        	                		    		    }
        	                		    		}
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	            }

        	            switch (alt272)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1097:25: over_clause
        	        	    {
        	        	        this->followPush(FOLLOW_over_clause_in_standard_function11591);
        	        	        over_clause834=over_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, over_clause834.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 4:
        	    // OracleDML.g:1098:10: ( cast_key ^| xmlcast_key ^) LEFT_PAREN ( ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )? | concatenation_wrapper as_key ! type_spec ) RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:1098:10: ( cast_key ^| xmlcast_key ^)
        	        {
        	            ANTLR_UINT32 alt273=2;
        	            {
        	                ANTLR_UINT32 LA273_0 = this->LA(1);
        	                if ( (LA273_0 == PLSQL_NON_RESERVED_CAST))
        	                {
        	                    alt273=1;
        	                }
        	                else if ( (LA273_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "XMLCAST")))
        	                {
        	                    alt273=2;
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 273 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt273)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1098:11: cast_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_cast_key_in_standard_function11604);
        	        	        cast_key835=cast_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(cast_key835.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1098:21: xmlcast_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_xmlcast_key_in_standard_function11607);
        	        	        xmlcast_key836=xmlcast_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlcast_key836.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        LEFT_PAREN837 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function11624);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN837_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN837));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN837_tree);
        	        }


        	        // OracleDML.g:1100:13: ( ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )? | concatenation_wrapper as_key ! type_spec )
        	        {
        	            ANTLR_UINT32 alt276=2;
        	            {
        	                ANTLR_UINT32 LA276_0 = this->LA(1);
        	                if ( (LA276_0 == PLSQL_NON_RESERVED_MULTISET) && (this->msynpred( antlr3::ClassForwarder<synpred49_OracleDML>() )))
        	                {
        	                    alt276=1;
        	                }
        	                else if ( (LA276_0 == APPROXIMATE_NUM_LIT || LA276_0 == BINDVAR || ((LA276_0 >= CHAR_STRING) && (LA276_0 <= CHAR_STRING_PERL)) || LA276_0 == COLON || LA276_0 == DELIMITED_ID || LA276_0 == EXACT_NUM_LIT || LA276_0 == INTRODUCER || LA276_0 == LEFT_PAREN || LA276_0 == MINUS_SIGN || LA276_0 == NATIONAL_CHAR_STRING_LIT || ((LA276_0 >= PLSQL_NON_RESERVED_CAST) && (LA276_0 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA276_0 == PLUS_SIGN || LA276_0 == REGULAR_ID || LA276_0 == SQL92_RESERVED_ALL || LA276_0 == SQL92_RESERVED_ANY || LA276_0 == SQL92_RESERVED_CASE || LA276_0 == SQL92_RESERVED_DATE || LA276_0 == SQL92_RESERVED_DEFAULT || LA276_0 == SQL92_RESERVED_DISTINCT || ((LA276_0 >= SQL92_RESERVED_EXISTS) && (LA276_0 <= SQL92_RESERVED_FALSE)) || LA276_0 == SQL92_RESERVED_NULL || LA276_0 == SQL92_RESERVED_PRIOR || LA276_0 == SQL92_RESERVED_TRUE || LA276_0 == UNSIGNED_INTEGER))
        	                {
        	                    alt276=2;
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 276 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt276)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1100:15: ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ) ( as_key ! type_spec )?
        	        	    {
        	        	        // OracleDML.g:1100:67: ( multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN )
        	        	        // OracleDML.g:1100:68: multiset_key ! LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN
        	        	        {
        	        	            this->followPush(FOLLOW_multiset_key_in_standard_function11656);
        	        	            multiset_key838=multiset_key();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }


        	        	            LEFT_PAREN839 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function11659);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) {
        	        	            LEFT_PAREN839_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN839));
        	        	            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN839_tree);
        	        	            }


        	        	            this->followPush(FOLLOW_subquery_in_standard_function11661);
        	        	            subquery840=subquery();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, subquery840.tree);


        	        	            // OracleDML.g:1100:102: ( order_by_clause )?
        	        	            {
        	        	                ANTLR_UINT32 alt274=2;
        	        	                switch ( this->LA(1) )
        	        	                {
        	        	                    case SQL92_RESERVED_ORDER:
        	        	                    	{
        	        	                    		alt274=1;
        	        	                    	}
        	        	                        break;
        	        	                }

        	        	                switch (alt274)
        	        	                {
        	        	            	case 1:
        	        	            	    // OracleDML.g:1100:102: order_by_clause
        	        	            	    {
        	        	            	        this->followPush(FOLLOW_order_by_clause_in_standard_function11663);
        	        	            	        order_by_clause841=order_by_clause();

        	        	            	        this->followPop();
        	        	            	        if  (this->hasException())
        	        	            	        {
        	        	            	            goto rulestandard_functionEx;
        	        	            	        }
        	        	            	        if (this->hasFailed())
        	        	            	        {
        	        	            	            return retval;
        	        	            	        }

        	        	            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, order_by_clause841.tree);


        	        	            	    }
        	        	            	    break;

        	        	                }
        	        	            }

        	        	            RIGHT_PAREN842 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function11666);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) {
        	        	            RIGHT_PAREN842_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN842));
        	        	            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN842_tree);
        	        	            }


        	        	        }


        	        	        // OracleDML.g:1101:15: ( as_key ! type_spec )?
        	        	        {
        	        	            ANTLR_UINT32 alt275=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case SQL92_RESERVED_AS:
        	        	                	{
        	        	                		alt275=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt275)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1101:16: as_key ! type_spec
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_as_key_in_standard_function11684);
        	        	        	        as_key843=as_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }


        	        	        	        this->followPush(FOLLOW_type_spec_in_standard_function11687);
        	        	        	        type_spec844=type_spec();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, type_spec844.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1102:15: concatenation_wrapper as_key ! type_spec
        	        	    {
        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function11705);
        	        	        concatenation_wrapper845=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper845.tree);


        	        	        this->followPush(FOLLOW_as_key_in_standard_function11707);
        	        	        as_key846=as_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_type_spec_in_standard_function11710);
        	        	        type_spec847=type_spec();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, type_spec847.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN848 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function11738);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN848_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN848));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN848_tree);
        	        }


        	    }
        	    break;
        	case 5:
        	    // OracleDML.g:1105:10: chr_key ^ LEFT_PAREN concatenation_wrapper using_key ! nchar_cs_key RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_chr_key_in_standard_function11749);
        	        chr_key849=chr_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(chr_key849.tree, root_0);

        	        LEFT_PAREN850 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function11764);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN850_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN850));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN850_tree);
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function11783);
        	        concatenation_wrapper851=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper851.tree);


        	        this->followPush(FOLLOW_using_key_in_standard_function11785);
        	        using_key852=using_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_nchar_cs_key_in_standard_function11788);
        	        nchar_cs_key853=nchar_cs_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nchar_cs_key853.tree);


        	        RIGHT_PAREN854 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function11803);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN854_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN854));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN854_tree);
        	        }


        	    }
        	    break;
        	case 6:
        	    // OracleDML.g:1109:10: collect_key ^ LEFT_PAREN ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_collect_key_in_standard_function11814);
        	        collect_key855=collect_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(collect_key855.tree, root_0);

        	        LEFT_PAREN856 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function11829);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN856_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN856));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN856_tree);
        	        }


        	        // OracleDML.g:1111:17: ( distinct_key | unique_key )?
        	        {
        	            ANTLR_UINT32 alt277=3;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_DISTINCT:
        	                	{
        	                		alt277=1;
        	                	}
        	                    break;
        	                case SQL92_RESERVED_UNIQUE:
        	                	{
        	                		alt277=2;
        	                	}
        	                    break;
        	            }

        	            switch (alt277)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1111:18: distinct_key
        	        	    {
        	        	        this->followPush(FOLLOW_distinct_key_in_standard_function11849);
        	        	        distinct_key857=distinct_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, distinct_key857.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1111:31: unique_key
        	        	    {
        	        	        this->followPush(FOLLOW_unique_key_in_standard_function11851);
        	        	        unique_key858=unique_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, unique_key858.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function11855);
        	        concatenation_wrapper859=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper859.tree);


        	        // OracleDML.g:1111:66: ( collect_order_by_part )?
        	        {
        	            ANTLR_UINT32 alt278=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_ORDER:
        	                	{
        	                		alt278=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt278)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1111:66: collect_order_by_part
        	        	    {
        	        	        this->followPush(FOLLOW_collect_order_by_part_in_standard_function11857);
        	        	        collect_order_by_part860=collect_order_by_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, collect_order_by_part860.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN861 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function11872);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN861_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN861));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN861_tree);
        	        }


        	    }
        	    break;
        	case 7:
        	    // OracleDML.g:1113:10: stantard_function_enabling_within_or_over ^ function_argument ( within_or_over_part )+
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_stantard_function_enabling_within_or_over_in_standard_function11883);
        	        stantard_function_enabling_within_or_over862=stantard_function_enabling_within_or_over();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(stantard_function_enabling_within_or_over862.tree, root_0);

        	        this->followPush(FOLLOW_function_argument_in_standard_function11899);
        	        function_argument863=function_argument();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, function_argument863.tree);


        	        // OracleDML.g:1114:31: ( within_or_over_part )+
        	        {
        	            int cnt279=0;

        	            for (;;)
        	            {
        	                ANTLR_UINT32 alt279=2;
        	        	switch ( this->LA(1) )
        	        	{
        	        	case REGULAR_ID:
        	        		{
        	        			switch ( this->LA(2) )
        	        			{
        	        			case LEFT_PAREN:
        	        				{
        	        					{
        	        					   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        					    */
        	        					    ANTLR_UINT32 LA279_3 = this->LA(3);
        	        					    if ( (LA279_3 == REGULAR_ID))
        	        					    {
        	        					        {
        	        					           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        					            */
        	        					            ANTLR_UINT32 LA279_8 = this->LA(4);
        	        					            if ( (LA279_8 == SQL92_RESERVED_BY) && ((toUpper(LT(1)->getText()) == "OVER")))
        	        					            {
        	        					                alt279=1;
        	        					            }

        	        					        }
        	        					    }
        	        					    else if ( (LA279_3 == RIGHT_PAREN || LA279_3 == SQL92_RESERVED_ORDER) && ((toUpper(LT(1)->getText()) == "OVER")))
        	        					    {
        	        					        alt279=1;
        	        					    }

        	        					}
        	        				}
        	        			    break;
        	        			case SQL92_RESERVED_GROUP:
        	        				{
        	        					{
        	        					   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	        					    */
        	        					    ANTLR_UINT32 LA279_4 = this->LA(3);
        	        					    if ( (LA279_4 == LEFT_PAREN) && ((toUpper(LT(1)->getText()) == "WITHIN")))
        	        					    {
        	        					        alt279=1;
        	        					    }

        	        					}
        	        				}
        	        			    break;

        	        			}

        	        		}
        	        	    break;

        	        	}

        	        	switch (alt279)
        	        	{
        	        	    case 1:
        	        	        // OracleDML.g:1114:31: within_or_over_part
        	        	        {
        	        	            this->followPush(FOLLOW_within_or_over_part_in_standard_function11901);
        	        	            within_or_over_part864=within_or_over_part();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, within_or_over_part864.tree);


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt279 >= 1 )
        	        		{
        	        		    goto loop279;
        	        		}
        	        		if (this->get_backtracking()>0)
        	        		{
        	        		    this->set_failedflag( true );
        	        		    return retval;
        	        		}

        	        		/* mismatchedSetEx()
        	        		 */
        	        		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        		goto rulestandard_functionEx;
        	        	}
        	        	cnt279++;
        	            }
        	            loop279: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;
        	case 8:
        	    // OracleDML.g:1115:10: decompose_key ^ LEFT_PAREN concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_decompose_key_in_standard_function11913);
        	        decompose_key865=decompose_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(decompose_key865.tree, root_0);

        	        LEFT_PAREN866 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function11928);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN866_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN866));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN866_tree);
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function11947);
        	        concatenation_wrapper867=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper867.tree);


        	        // OracleDML.g:1117:39: ( canonical_key | compatibility_key )?
        	        {
        	            ANTLR_UINT32 alt280=3;
        	            {
        	                ANTLR_UINT32 LA280_0 = this->LA(1);
        	                if ( (LA280_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "COMPATIBILITY"))||((toUpper(LT(1)->getText()) == "CANONICAL")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA280_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "CANONICAL")))
        	                        {
        	                            alt280=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "COMPATIBILITY")))
        	                        {
        	                            alt280=2;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt280)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1117:40: canonical_key
        	        	    {
        	        	        this->followPush(FOLLOW_canonical_key_in_standard_function11950);
        	        	        canonical_key868=canonical_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, canonical_key868.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1117:54: compatibility_key
        	        	    {
        	        	        this->followPush(FOLLOW_compatibility_key_in_standard_function11952);
        	        	        compatibility_key869=compatibility_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, compatibility_key869.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN870 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function11969);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN870_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN870));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN870_tree);
        	        }


        	    }
        	    break;
        	case 9:
        	    // OracleDML.g:1119:10: extract_key ^ LEFT_PAREN REGULAR_ID from_key ! concatenation_wrapper RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_extract_key_in_standard_function11980);
        	        extract_key871=extract_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(extract_key871.tree, root_0);

        	        LEFT_PAREN872 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function11995);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN872_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN872));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN872_tree);
        	        }


        	        REGULAR_ID873 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_standard_function12013);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        REGULAR_ID873_tree = std::move(get_psrstate()->get_treeAdaptor()->create(REGULAR_ID873));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, REGULAR_ID873_tree);
        	        }


        	        this->followPush(FOLLOW_from_key_in_standard_function12015);
        	        from_key874=from_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12018);
        	        concatenation_wrapper875=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper875.tree);


        	        RIGHT_PAREN876 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12033);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN876_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN876));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN876_tree);
        	        }


        	    }
        	    break;
        	case 10:
        	    // OracleDML.g:1123:10: ( first_value_key ^| last_value_key ^) function_argument_analytic ( respect_or_ignore_nulls )? over_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:1123:10: ( first_value_key ^| last_value_key ^)
        	        {
        	            ANTLR_UINT32 alt281=2;
        	            {
        	                ANTLR_UINT32 LA281_0 = this->LA(1);
        	                if ( (LA281_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "LAST_VALUE"))||((toUpper(LT(1)->getText()) == "FIRST_VALUE")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA281_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "FIRST_VALUE")))
        	                        {
        	                            alt281=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "LAST_VALUE")))
        	                        {
        	                            alt281=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 281 );
        	                            ex->set_state( 1 );


        	                            goto rulestandard_functionEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 281 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt281)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1123:11: first_value_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_first_value_key_in_standard_function12045);
        	        	        first_value_key877=first_value_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(first_value_key877.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1123:28: last_value_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_last_value_key_in_standard_function12048);
        	        	        last_value_key878=last_value_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(last_value_key878.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_function_argument_analytic_in_standard_function12052);
        	        function_argument_analytic879=function_argument_analytic();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, function_argument_analytic879.tree);


        	        // OracleDML.g:1124:14: ( respect_or_ignore_nulls )?
        	        {
        	            ANTLR_UINT32 alt282=2;
        	            {
        	                ANTLR_UINT32 LA282_0 = this->LA(1);
        	                if ( (LA282_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "OVER"))||((toUpper(LT(1)->getText()) == "IGNORE"))||((toUpper(LT(1)->getText()) == "RESPECT")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA282_1 = this->LA(2);
        	                        if ( (LA282_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "IGNORE"))||((toUpper(LT(1)->getText()) == "RESPECT")))))
        	                        {
        	                            alt282=1;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt282)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1124:14: respect_or_ignore_nulls
        	        	    {
        	        	        this->followPush(FOLLOW_respect_or_ignore_nulls_in_standard_function12067);
        	        	        respect_or_ignore_nulls880=respect_or_ignore_nulls();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, respect_or_ignore_nulls880.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_over_clause_in_standard_function12070);
        	        over_clause881=over_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, over_clause881.tree);


        	    }
        	    break;
        	case 11:
        	    // OracleDML.g:1125:10: stantard_function_pedictions ^ LEFT_PAREN expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_stantard_function_pedictions_in_standard_function12081);
        	        stantard_function_pedictions882=stantard_function_pedictions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(stantard_function_pedictions882.tree, root_0);

        	        LEFT_PAREN883 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12096);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN883_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN883));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN883_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12114);
        	        expression_wrapper884=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper884.tree);


        	        // OracleDML.g:1127:36: ( COMMA expression_wrapper )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt283=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt283=1;
        	            	}
        	                break;

        	            }

        	            switch (alt283)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1127:37: COMMA expression_wrapper
        	        	    {
        	        	        COMMA885 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function12117);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        COMMA885_tree = std::move(get_psrstate()->get_treeAdaptor()->create(COMMA885));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, COMMA885_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12119);
        	        	        expression_wrapper886=expression_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper886.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop283;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop283: ; /* Jump out to here if this rule does not match */


        	        // OracleDML.g:1127:64: ( cost_matrix_clause )?
        	        {
        	            ANTLR_UINT32 alt284=2;
        	            {
        	                ANTLR_UINT32 LA284_0 = this->LA(1);
        	                if ( (LA284_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "COST")))
        	                {
        	                    alt284=1;
        	                }
        	            }
        	            switch (alt284)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1127:64: cost_matrix_clause
        	        	    {
        	        	        this->followPush(FOLLOW_cost_matrix_clause_in_standard_function12123);
        	        	        cost_matrix_clause887=cost_matrix_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cost_matrix_clause887.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1127:84: ( using_clause )?
        	        {
        	            ANTLR_UINT32 alt285=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PLSQL_NON_RESERVED_USING:
        	                	{
        	                		alt285=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt285)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1127:84: using_clause
        	        	    {
        	        	        this->followPush(FOLLOW_using_clause_in_standard_function12126);
        	        	        using_clause888=using_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, using_clause888.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN889 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12142);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN889_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN889));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN889_tree);
        	        }


        	    }
        	    break;
        	case 12:
        	    // OracleDML.g:1129:10: translate_key ^ LEFT_PAREN expression_wrapper ( using_key ! ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_translate_key_in_standard_function12153);
        	        translate_key890=translate_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(translate_key890.tree, root_0);

        	        LEFT_PAREN891 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12168);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN891_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN891));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN891_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12187);
        	        expression_wrapper892=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper892.tree);


        	        // OracleDML.g:1131:36: ( using_key ! ( char_cs_key | nchar_cs_key ) )?
        	        {
        	            ANTLR_UINT32 alt287=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PLSQL_NON_RESERVED_USING:
        	                	{
        	                		alt287=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt287)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1131:37: using_key ! ( char_cs_key | nchar_cs_key )
        	        	    {
        	        	        this->followPush(FOLLOW_using_key_in_standard_function12190);
        	        	        using_key893=using_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        // OracleDML.g:1131:48: ( char_cs_key | nchar_cs_key )
        	        	        {
        	        	            ANTLR_UINT32 alt286=2;
        	        	            {
        	        	                ANTLR_UINT32 LA286_0 = this->LA(1);
        	        	                if ( (LA286_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "NCHAR_CS"))||((toUpper(LT(1)->getText()) == "CHAR_CS")))))
        	        	                {
        	        	                    {
        	        	                        ANTLR_UINT32 LA286_1 = this->LA(2);
        	        	                        if ( ((toUpper(LT(1)->getText()) == "CHAR_CS")))
        	        	                        {
        	        	                            alt286=1;
        	        	                        }
        	        	                        else if ( ((toUpper(LT(1)->getText()) == "NCHAR_CS")))
        	        	                        {
        	        	                            alt286=2;
        	        	                        }
        	        	                        else
        	        	                        {
        	        	                            if (this->get_backtracking()>0)
        	        	                            {
        	        	                                this->set_failedflag( true );
        	        	                                return retval;
        	        	                            }


        	        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                            ex->set_decisionNum( 286 );
        	        	                            ex->set_state( 1 );


        	        	                            goto rulestandard_functionEx;

        	        	                        }
        	        	                    }
        	        	                }
        	        	                else
        	        	                {
        	        	                    if (this->get_backtracking()>0)
        	        	                    {
        	        	                        this->set_failedflag( true );
        	        	                        return retval;
        	        	                    }


        	        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                    ex->set_decisionNum( 286 );
        	        	                    ex->set_state( 0 );


        	        	                    goto rulestandard_functionEx;

        	        	                }
        	        	            }
        	        	            switch (alt286)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1131:49: char_cs_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_char_cs_key_in_standard_function12194);
        	        	        	        char_cs_key894=char_cs_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, char_cs_key894.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1131:61: nchar_cs_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_nchar_cs_key_in_standard_function12196);
        	        	        	        nchar_cs_key895=nchar_cs_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, nchar_cs_key895.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1132:21: ( COMMA expression_wrapper )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt288=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt288=1;
        	            	}
        	                break;

        	            }

        	            switch (alt288)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1132:22: COMMA expression_wrapper
        	        	    {
        	        	        COMMA896 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function12223);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        COMMA896_tree = std::move(get_psrstate()->get_treeAdaptor()->create(COMMA896));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, COMMA896_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12225);
        	        	        expression_wrapper897=expression_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper897.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop288;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop288: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN898 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12242);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN898_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN898));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN898_tree);
        	        }


        	    }
        	    break;
        	case 13:
        	    // OracleDML.g:1134:10: treat_key ^ LEFT_PAREN expression_wrapper as_key ! ( ref_key )? type_spec RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_treat_key_in_standard_function12253);
        	        treat_key899=treat_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(treat_key899.tree, root_0);

        	        LEFT_PAREN900 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12268);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN900_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN900));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN900_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12286);
        	        expression_wrapper901=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper901.tree);


        	        this->followPush(FOLLOW_as_key_in_standard_function12288);
        	        as_key902=as_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        // OracleDML.g:1136:44: ( ref_key )?
        	        {
        	            ANTLR_UINT32 alt289=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA289_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "REF")))
        	                		    {
        	                		        alt289=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt289)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1136:44: ref_key
        	        	    {
        	        	        this->followPush(FOLLOW_ref_key_in_standard_function12291);
        	        	        ref_key903=ref_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, ref_key903.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_type_spec_in_standard_function12294);
        	        type_spec904=type_spec();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, type_spec904.tree);


        	        RIGHT_PAREN905 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12309);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN905_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN905));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN905_tree);
        	        }


        	    }
        	    break;
        	case 14:
        	    // OracleDML.g:1138:10: trim_key ^ LEFT_PAREN ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_trim_key_in_standard_function12320);
        	        trim_key906=trim_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(trim_key906.tree, root_0);

        	        LEFT_PAREN907 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12335);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN907_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN907));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN907_tree);
        	        }


        	        // OracleDML.g:1140:17: ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )?
        	        {
        	            ANTLR_UINT32 alt292=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case CHAR_STRING:
        	                		    case CHAR_STRING_PERL:
        	                		    case NATIONAL_CHAR_STRING_LIT:
        	                		    	{
        	                		    		switch ( this->LA(3) )
        	                		    		{
        	                		    		    case SQL92_RESERVED_FROM:
        	                		    		    	{
        	                		    		    		alt292=1;
        	                		    		    	}
        	                		    		        break;
        	                		    		}

        	                		    	}
        	                		        break;
        	                		    case SQL92_RESERVED_FROM:
        	                		    	{
        	                		    		alt292=1;
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	                case CHAR_STRING:
        	                case CHAR_STRING_PERL:
        	                case NATIONAL_CHAR_STRING_LIT:
        	                	{
        	                		switch ( this->LA(2) )
        	                		{
        	                		    case SQL92_RESERVED_FROM:
        	                		    	{
        	                		    		alt292=1;
        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	                case SQL92_RESERVED_FROM:
        	                	{
        	                		alt292=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt292)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1140:18: ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key
        	        	    {
        	        	        // OracleDML.g:1140:18: ( leading_key | trailing_key | both_key )?
        	        	        {
        	        	            ANTLR_UINT32 alt290=4;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case REGULAR_ID:
        	        	                	{
        	        	                		{
        	        	                		    ANTLR_UINT32 LA290_1 = this->LA(2);
        	        	                		    if ( ((toUpper(LT(1)->getText()) == "LEADING")))
        	        	                		    {
        	        	                		        alt290=1;
        	        	                		    }
        	        	                		    else if ( ((toUpper(LT(1)->getText()) == "TRAILING")))
        	        	                		    {
        	        	                		        alt290=2;
        	        	                		    }
        	        	                		    else if ( ((toUpper(LT(1)->getText()) == "BOTH")))
        	        	                		    {
        	        	                		        alt290=3;
        	        	                		    }
        	        	                		}
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt290)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1140:19: leading_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_leading_key_in_standard_function12355);
        	        	        	        leading_key908=leading_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, leading_key908.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1140:31: trailing_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_trailing_key_in_standard_function12357);
        	        	        	        trailing_key909=trailing_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, trailing_key909.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 3:
        	        	        	    // OracleDML.g:1140:44: both_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_both_key_in_standard_function12359);
        	        	        	        both_key910=both_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, both_key910.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        // OracleDML.g:1140:55: ( quoted_string )?
        	        	        {
        	        	            ANTLR_UINT32 alt291=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case CHAR_STRING:
        	        	                case CHAR_STRING_PERL:
        	        	                case NATIONAL_CHAR_STRING_LIT:
        	        	                	{
        	        	                		alt291=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt291)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1140:55: quoted_string
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_quoted_string_in_standard_function12363);
        	        	        	        quoted_string911=quoted_string();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, quoted_string911.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        this->followPush(FOLLOW_from_key_in_standard_function12366);
        	        	        from_key912=from_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, from_key912.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12386);
        	        concatenation_wrapper913=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper913.tree);


        	        RIGHT_PAREN914 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12400);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN914_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN914));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN914_tree);
        	        }


        	    }
        	    break;
        	case 15:
        	    // OracleDML.g:1143:10: xmlagg_key ^ LEFT_PAREN expression_wrapper ( order_by_clause )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlagg_key_in_standard_function12411);
        	        xmlagg_key915=xmlagg_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlagg_key915.tree, root_0);

        	        LEFT_PAREN916 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12426);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN916_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN916));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN916_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12445);
        	        expression_wrapper917=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper917.tree);


        	        // OracleDML.g:1145:36: ( order_by_clause )?
        	        {
        	            ANTLR_UINT32 alt293=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_ORDER:
        	                	{
        	                		alt293=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt293)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1145:36: order_by_clause
        	        	    {
        	        	        this->followPush(FOLLOW_order_by_clause_in_standard_function12447);
        	        	        order_by_clause918=order_by_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, order_by_clause918.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN919 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12463);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN919_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN919));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN919_tree);
        	        }


        	        // OracleDML.g:1147:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt294=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt294=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt294)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1147:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD920 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function12478);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD920_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD920));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD920_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function12480);
        	        	        general_element_part921=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part921.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 16:
        	    // OracleDML.g:1148:10: ( xmlcolattval_key ^| xmlforest_key ^) LEFT_PAREN xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        // OracleDML.g:1148:10: ( xmlcolattval_key ^| xmlforest_key ^)
        	        {
        	            ANTLR_UINT32 alt295=2;
        	            {
        	                ANTLR_UINT32 LA295_0 = this->LA(1);
        	                if ( (LA295_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "XMLCOLATTVAL"))||((toUpper(LT(1)->getText()) == "XMLFOREST")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA295_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "XMLCOLATTVAL")))
        	                        {
        	                            alt295=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "XMLFOREST")))
        	                        {
        	                            alt295=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 295 );
        	                            ex->set_state( 1 );


        	                            goto rulestandard_functionEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 295 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt295)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1148:11: xmlcolattval_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_xmlcolattval_key_in_standard_function12494);
        	        	        xmlcolattval_key922=xmlcolattval_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlcolattval_key922.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1148:29: xmlforest_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_xmlforest_key_in_standard_function12497);
        	        	        xmlforest_key923=xmlforest_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlforest_key923.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        LEFT_PAREN924 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12514);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN924_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN924));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN924_tree);
        	        }


        	        this->followPush(FOLLOW_xml_multiuse_expression_element_in_standard_function12532);
        	        xml_multiuse_expression_element925=xml_multiuse_expression_element();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_multiuse_expression_element925.tree);


        	        // OracleDML.g:1150:49: ( COMMA ! xml_multiuse_expression_element )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt296=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt296=1;
        	            	}
        	                break;

        	            }

        	            switch (alt296)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1150:50: COMMA ! xml_multiuse_expression_element
        	        	    {
        	        	        COMMA926 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function12535);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_xml_multiuse_expression_element_in_standard_function12538);
        	        	        xml_multiuse_expression_element927=xml_multiuse_expression_element();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_multiuse_expression_element927.tree);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop296;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop296: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN928 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12554);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN928_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN928));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN928_tree);
        	        }


        	        // OracleDML.g:1152:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt297=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt297=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt297)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1152:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD929 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function12569);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD929_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD929));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD929_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function12571);
        	        	        general_element_part930=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part930.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 17:
        	    // OracleDML.g:1153:10: xmlelement_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA ! xml_attributes_clause )? ( COMMA ! expression_wrapper ( column_alias )? )* RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlelement_key_in_standard_function12584);
        	        xmlelement_key931=xmlelement_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlelement_key931.tree, root_0);

        	        LEFT_PAREN932 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12599);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN932_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN932));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN932_tree);
        	        }


        	        // OracleDML.g:1155:17: ( entityescaping_key | noentityescaping_key )?
        	        {
        	            ANTLR_UINT32 alt298=3;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA298_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "ENTITYESCAPING")))
        	                		    {
        	                		        alt298=1;
        	                		    }
        	                		    else if ( ((toUpper(LT(1)->getText()) == "NOENTITYESCAPING")))
        	                		    {
        	                		        alt298=2;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt298)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1155:18: entityescaping_key
        	        	    {
        	        	        this->followPush(FOLLOW_entityescaping_key_in_standard_function12618);
        	        	        entityescaping_key933=entityescaping_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, entityescaping_key933.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1155:37: noentityescaping_key
        	        	    {
        	        	        this->followPush(FOLLOW_noentityescaping_key_in_standard_function12620);
        	        	        noentityescaping_key934=noentityescaping_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, noentityescaping_key934.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1156:17: ( name_key | evalname_key )?
        	        {
        	            ANTLR_UINT32 alt299=3;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA299_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "NAME")))
        	                		    {
        	                		        alt299=1;
        	                		    }
        	                		    else if ( ((toUpper(LT(1)->getText()) == "EVALNAME")))
        	                		    {
        	                		        alt299=2;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt299)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1156:18: name_key
        	        	    {
        	        	        this->followPush(FOLLOW_name_key_in_standard_function12641);
        	        	        name_key935=name_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, name_key935.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1156:27: evalname_key
        	        	    {
        	        	        this->followPush(FOLLOW_evalname_key_in_standard_function12643);
        	        	        evalname_key936=evalname_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, evalname_key936.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12647);
        	        expression_wrapper937=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper937.tree);


        	        // OracleDML.g:1157:17: ({...}? COMMA ! xml_attributes_clause )?
        	        {
        	            ANTLR_UINT32 alt300=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COMMA:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA300_1 = this->LA(2);
        	                		    if ( ((LT(2)->getText() == "XMLATTRIBUTES")))
        	                		    {
        	                		        alt300=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt300)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1157:18: {...}? COMMA ! xml_attributes_clause
        	        	    {
        	        	        if ( !((LT(2)->getText() == "XMLATTRIBUTES")) )
        	        	        {
        	        	            if (this->get_backtracking()>0)
        	        	            {
        	        	                this->set_failedflag( true );
        	        	                return retval;
        	        	            }

        	        	            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "LT(2)->getText() == \"XMLATTRIBUTES\"" );
        	        	                ex->set_ruleName( "standard_function" );


        	        	        }

        	        	        COMMA938 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function12668);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_xml_attributes_clause_in_standard_function12671);
        	        	        xml_attributes_clause939=xml_attributes_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_attributes_clause939.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1158:17: ( COMMA ! expression_wrapper ( column_alias )? )*

        	        for (;;)
        	        {
        	            ANTLR_UINT32 alt302=2;
        	            switch ( this->LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt302=1;
        	            	}
        	                break;

        	            }

        	            switch (alt302)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1158:18: COMMA ! expression_wrapper ( column_alias )?
        	        	    {
        	        	        COMMA940 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function12692);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12695);
        	        	        expression_wrapper941=expression_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper941.tree);


        	        	        // OracleDML.g:1158:44: ( column_alias )?
        	        	        {
        	        	            ANTLR_UINT32 alt301=2;
        	        	            switch ( this->LA(1) )
        	        	            {
        	        	                case CHAR_STRING:
        	        	                case CHAR_STRING_PERL:
        	        	                case DELIMITED_ID:
        	        	                case INTRODUCER:
        	        	                case NATIONAL_CHAR_STRING_LIT:
        	        	                case REGULAR_ID:
        	        	                case SQL92_RESERVED_AS:
        	        	                	{
        	        	                		alt301=1;
        	        	                	}
        	        	                    break;
        	        	            }

        	        	            switch (alt301)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1158:44: column_alias
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_column_alias_in_standard_function12697);
        	        	        	        column_alias942=column_alias();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias942.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop302;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop302: ; /* Jump out to here if this rule does not match */


        	        RIGHT_PAREN943 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12714);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN943_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN943));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN943_tree);
        	        }


        	        // OracleDML.g:1160:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt303=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt303=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt303)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1160:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD944 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function12729);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD944_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD944));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD944_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function12731);
        	        	        general_element_part945=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part945.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 18:
        	    // OracleDML.g:1161:10: xmlexists_key ^ LEFT_PAREN expression_wrapper ( xml_passing_clause )? RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlexists_key_in_standard_function12744);
        	        xmlexists_key946=xmlexists_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlexists_key946.tree, root_0);

        	        LEFT_PAREN947 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12759);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN947_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN947));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN947_tree);
        	        }


        	        this->followPush(FOLLOW_expression_wrapper_in_standard_function12777);
        	        expression_wrapper948=expression_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper948.tree);


        	        // OracleDML.g:1164:17: ( xml_passing_clause )?
        	        {
        	            ANTLR_UINT32 alt304=2;
        	            {
        	                ANTLR_UINT32 LA304_0 = this->LA(1);
        	                if ( (LA304_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "PASSING")))
        	                {
        	                    alt304=1;
        	                }
        	            }
        	            switch (alt304)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1164:17: xml_passing_clause
        	        	    {
        	        	        this->followPush(FOLLOW_xml_passing_clause_in_standard_function12795);
        	        	        xml_passing_clause949=xml_passing_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_passing_clause949.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN950 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12810);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN950_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN950));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN950_tree);
        	        }


        	    }
        	    break;
        	case 19:
        	    // OracleDML.g:1166:10: xmlparse_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlparse_key_in_standard_function12821);
        	        xmlparse_key951=xmlparse_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlparse_key951.tree, root_0);

        	        LEFT_PAREN952 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12836);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN952_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN952));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN952_tree);
        	        }


        	        // OracleDML.g:1168:17: ( document_key | content_key )
        	        {
        	            ANTLR_UINT32 alt305=2;
        	            {
        	                ANTLR_UINT32 LA305_0 = this->LA(1);
        	                if ( (LA305_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "CONTENT"))||((toUpper(LT(1)->getText()) == "DOCUMENT")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA305_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "DOCUMENT")))
        	                        {
        	                            alt305=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "CONTENT")))
        	                        {
        	                            alt305=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 305 );
        	                            ex->set_state( 1 );


        	                            goto rulestandard_functionEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 305 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt305)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1168:18: document_key
        	        	    {
        	        	        this->followPush(FOLLOW_document_key_in_standard_function12856);
        	        	        document_key953=document_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, document_key953.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1168:31: content_key
        	        	    {
        	        	        this->followPush(FOLLOW_content_key_in_standard_function12858);
        	        	        content_key954=content_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, content_key954.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12861);
        	        concatenation_wrapper955=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper955.tree);


        	        // OracleDML.g:1168:66: ( wellformed_key )?
        	        {
        	            ANTLR_UINT32 alt306=2;
        	            {
        	                ANTLR_UINT32 LA306_0 = this->LA(1);
        	                if ( (LA306_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "WELLFORMED")))
        	                {
        	                    alt306=1;
        	                }
        	            }
        	            switch (alt306)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1168:66: wellformed_key
        	        	    {
        	        	        this->followPush(FOLLOW_wellformed_key_in_standard_function12863);
        	        	        wellformed_key956=wellformed_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, wellformed_key956.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN957 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function12878);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN957_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN957));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN957_tree);
        	        }


        	        // OracleDML.g:1170:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt307=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt307=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt307)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1170:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD958 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function12893);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD958_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD958));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD958_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function12895);
        	        	        general_element_part959=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part959.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 20:
        	    // OracleDML.g:1171:10: xmlpi_key ^ LEFT_PAREN ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper ) ( COMMA ! concatenation_wrapper )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlpi_key_in_standard_function12908);
        	        xmlpi_key960=xmlpi_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlpi_key960.tree, root_0);

        	        LEFT_PAREN961 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function12923);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN961_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN961));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN961_tree);
        	        }


        	        // OracleDML.g:1173:17: ( name_key id[T_UNKNOWN,T_USE] | evalname_key concatenation_wrapper )
        	        {
        	            ANTLR_UINT32 alt308=2;
        	            alt308 = cdfa308.predict(this, this->get_rec(), this->get_istream(), cdfa308 );
        	            if  (this->hasException())
        	            {
        	                goto rulestandard_functionEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return retval;
        	            }

        	            switch (alt308)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1173:22: name_key id[T_UNKNOWN,T_USE]
        	        	    {
        	        	        this->followPush(FOLLOW_name_key_in_standard_function12947);
        	        	        name_key962=name_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, name_key962.tree);


        	        	        this->followPush(FOLLOW_id_in_standard_function12949);
        	        	        id963=id(T_UNKNOWN, T_USE);

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, id963.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1174:22: evalname_key concatenation_wrapper
        	        	    {
        	        	        this->followPush(FOLLOW_evalname_key_in_standard_function12973);
        	        	        evalname_key964=evalname_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, evalname_key964.tree);


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function12975);
        	        	        concatenation_wrapper965=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper965.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1176:17: ( COMMA ! concatenation_wrapper )?
        	        {
        	            ANTLR_UINT32 alt309=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COMMA:
        	                	{
        	                		alt309=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt309)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1176:18: COMMA ! concatenation_wrapper
        	        	    {
        	        	        COMMA966 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13012);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13015);
        	        	        concatenation_wrapper967=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper967.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN968 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13031);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN968_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN968));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN968_tree);
        	        }


        	        // OracleDML.g:1178:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt310=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt310=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt310)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1178:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD969 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13046);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD969_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD969));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD969_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13048);
        	        	        general_element_part970=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part970.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 21:
        	    // OracleDML.g:1179:10: xmlquery_key ^ LEFT_PAREN concatenation_wrapper ( xml_passing_clause )? returning_key ! content_key ! ( null_key on_key ! empty_key !)? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlquery_key_in_standard_function13061);
        	        xmlquery_key971=xmlquery_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlquery_key971.tree, root_0);

        	        LEFT_PAREN972 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13076);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN972_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN972));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN972_tree);
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13095);
        	        concatenation_wrapper973=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper973.tree);


        	        // OracleDML.g:1181:39: ( xml_passing_clause )?
        	        {
        	            ANTLR_UINT32 alt311=2;
        	            {
        	                ANTLR_UINT32 LA311_0 = this->LA(1);
        	                if ( (LA311_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "PASSING"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA311_1 = this->LA(2);
        	                        if ( (LA311_1 == APPROXIMATE_NUM_LIT || LA311_1 == BINDVAR || ((LA311_1 >= CHAR_STRING) && (LA311_1 <= CHAR_STRING_PERL)) || LA311_1 == COLON || LA311_1 == DELIMITED_ID || LA311_1 == EXACT_NUM_LIT || LA311_1 == INTRODUCER || LA311_1 == LEFT_PAREN || LA311_1 == MINUS_SIGN || LA311_1 == NATIONAL_CHAR_STRING_LIT || ((LA311_1 >= PLSQL_NON_RESERVED_CAST) && (LA311_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA311_1 == PLUS_SIGN || LA311_1 == SQL92_RESERVED_ALL || LA311_1 == SQL92_RESERVED_ANY || ((LA311_1 >= SQL92_RESERVED_BY) && (LA311_1 <= SQL92_RESERVED_CASE)) || ((LA311_1 >= SQL92_RESERVED_CURSOR) && (LA311_1 <= SQL92_RESERVED_DATE)) || LA311_1 == SQL92_RESERVED_DEFAULT || LA311_1 == SQL92_RESERVED_DISTINCT || ((LA311_1 >= SQL92_RESERVED_EXISTS) && (LA311_1 <= SQL92_RESERVED_FALSE)) || ((LA311_1 >= SQL92_RESERVED_NOT) && (LA311_1 <= SQL92_RESERVED_NULL)) || LA311_1 == SQL92_RESERVED_PRIOR || LA311_1 == SQL92_RESERVED_TRUE || LA311_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "PASSING")))
        	                        {
        	                            alt311=1;
        	                        }
        	                        else if ( (LA311_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "PASSING"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
        	                        {
        	                            {
        	                                ANTLR_UINT32 LA311_3 = this->LA(3);
        	                                if ( (LA311_3 == APPROXIMATE_NUM_LIT || LA311_3 == ASTERISK || LA311_3 == BINDVAR || LA311_3 == CARRET_OPERATOR_PART || ((LA311_3 >= CHAR_STRING) && (LA311_3 <= CHAR_STRING_PERL)) || LA311_3 == COLON || LA311_3 == COMMA || LA311_3 == CONCATENATION_OP || LA311_3 == DELIMITED_ID || LA311_3 == EQUALS_OP || LA311_3 == EXACT_NUM_LIT || LA311_3 == EXCLAMATION_OPERATOR_PART || ((LA311_3 >= GREATER_THAN_OP) && (LA311_3 <= GREATER_THAN_OR_EQUALS_OP)) || LA311_3 == INTRODUCER || ((LA311_3 >= LEFT_BRACKET) && (LA311_3 <= LEFT_PAREN)) || ((LA311_3 >= LESS_THAN_OP) && (LA311_3 <= LESS_THAN_OR_EQUALS_OP)) || LA311_3 == MINUS_SIGN || LA311_3 == NATIONAL_CHAR_STRING_LIT || LA311_3 == NOT_EQUAL_OP || LA311_3 == PERIOD || ((LA311_3 >= PLSQL_NON_RESERVED_CAST) && (LA311_3 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA311_3 == PLSQL_NON_RESERVED_MULTISET || LA311_3 == PLUS_SIGN || LA311_3 == REGULAR_ID || LA311_3 == SOLIDUS || LA311_3 == SQL92_RESERVED_ALL || ((LA311_3 >= SQL92_RESERVED_AND) && (LA311_3 <= SQL92_RESERVED_AS)) || LA311_3 == SQL92_RESERVED_BETWEEN || LA311_3 == SQL92_RESERVED_CASE || LA311_3 == SQL92_RESERVED_DATE || LA311_3 == SQL92_RESERVED_DEFAULT || LA311_3 == SQL92_RESERVED_DISTINCT || ((LA311_3 >= SQL92_RESERVED_EXISTS) && (LA311_3 <= SQL92_RESERVED_FALSE)) || LA311_3 == SQL92_RESERVED_IN || ((LA311_3 >= SQL92_RESERVED_IS) && (LA311_3 <= SQL92_RESERVED_NOT)) || LA311_3 == SQL92_RESERVED_OR || LA311_3 == SQL92_RESERVED_PRIOR || LA311_3 == SQL92_RESERVED_TRUE || LA311_3 == UNSIGNED_INTEGER || LA311_3 == VERTICAL_BAR) && ((toUpper(LT(1)->getText()) == "PASSING")))
        	                                {
        	                                    alt311=1;
        	                                }
        	                                else if ( (LA311_3 == SQL92_RESERVED_NULL) && ((((toUpper(LT(1)->getText()) == "PASSING"))||((toUpper(LT(1)->getText()) == "RETURNING")))))
        	                                {
        	                                    {
        	                                        ANTLR_UINT32 LA311_4 = this->LA(4);
        	                                        if ( (LA311_4 == ASTERISK || LA311_4 == CARRET_OPERATOR_PART || ((LA311_4 >= CHAR_STRING) && (LA311_4 <= CHAR_STRING_PERL)) || LA311_4 == COMMA || LA311_4 == CONCATENATION_OP || LA311_4 == DELIMITED_ID || LA311_4 == EQUALS_OP || LA311_4 == EXCLAMATION_OPERATOR_PART || ((LA311_4 >= GREATER_THAN_OP) && (LA311_4 <= GREATER_THAN_OR_EQUALS_OP)) || LA311_4 == INTRODUCER || LA311_4 == LEFT_BRACKET || ((LA311_4 >= LESS_THAN_OP) && (LA311_4 <= LESS_THAN_OR_EQUALS_OP)) || LA311_4 == MINUS_SIGN || LA311_4 == NATIONAL_CHAR_STRING_LIT || LA311_4 == NOT_EQUAL_OP || LA311_4 == PLSQL_NON_RESERVED_MULTISET || LA311_4 == PLUS_SIGN || LA311_4 == REGULAR_ID || LA311_4 == SOLIDUS || LA311_4 == SQL92_RESERVED_AND || LA311_4 == SQL92_RESERVED_AS || LA311_4 == SQL92_RESERVED_BETWEEN || LA311_4 == SQL92_RESERVED_IN || ((LA311_4 >= SQL92_RESERVED_IS) && (LA311_4 <= SQL92_RESERVED_NOT)) || LA311_4 == SQL92_RESERVED_OR || LA311_4 == VERTICAL_BAR) && ((toUpper(LT(1)->getText()) == "PASSING")))
        	                                        {
        	                                            alt311=1;
        	                                        }
        	                                    }
        	                                }
        	                            }
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt311)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1181:39: xml_passing_clause
        	        	    {
        	        	        this->followPush(FOLLOW_xml_passing_clause_in_standard_function13097);
        	        	        xml_passing_clause974=xml_passing_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_passing_clause974.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_returning_key_in_standard_function13116);
        	        returning_key975=returning_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_content_key_in_standard_function13119);
        	        content_key976=content_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        // OracleDML.g:1182:45: ( null_key on_key ! empty_key !)?
        	        {
        	            ANTLR_UINT32 alt312=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_NULL:
        	                	{
        	                		alt312=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt312)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1182:46: null_key on_key ! empty_key !
        	        	    {
        	        	        this->followPush(FOLLOW_null_key_in_standard_function13123);
        	        	        null_key977=null_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, null_key977.tree);


        	        	        this->followPush(FOLLOW_on_key_in_standard_function13125);
        	        	        on_key978=on_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_empty_key_in_standard_function13128);
        	        	        empty_key979=empty_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN980 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13145);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN980_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN980));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN980_tree);
        	        }


        	        // OracleDML.g:1184:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt313=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt313=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt313)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1184:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD981 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13160);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD981_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD981));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD981_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13162);
        	        	        general_element_part982=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part982.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 22:
        	    // OracleDML.g:1185:10: xmlroot_key ^ LEFT_PAREN concatenation_wrapper xmlroot_param_version_part ( COMMA ! xmlroot_param_standalone_part )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlroot_key_in_standard_function13175);
        	        xmlroot_key983=xmlroot_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlroot_key983.tree, root_0);

        	        LEFT_PAREN984 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13190);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN984_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN984));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN984_tree);
        	        }


        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13208);
        	        concatenation_wrapper985=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper985.tree);


        	        this->followPush(FOLLOW_xmlroot_param_version_part_in_standard_function13230);
        	        xmlroot_param_version_part986=xmlroot_param_version_part();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlroot_param_version_part986.tree);


        	        // OracleDML.g:1189:21: ( COMMA ! xmlroot_param_standalone_part )?
        	        {
        	            ANTLR_UINT32 alt314=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COMMA:
        	                	{
        	                		alt314=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt314)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1189:22: COMMA ! xmlroot_param_standalone_part
        	        	    {
        	        	        COMMA987 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13253);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_xmlroot_param_standalone_part_in_standard_function13256);
        	        	        xmlroot_param_standalone_part988=xmlroot_param_standalone_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlroot_param_standalone_part988.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN989 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13272);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN989_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN989));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN989_tree);
        	        }


        	        // OracleDML.g:1191:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt315=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt315=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt315)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1191:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD990 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13287);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD990_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD990));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD990_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13289);
        	        	        general_element_part991=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part991.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 23:
        	    // OracleDML.g:1192:10: xmlserialize_key ^ LEFT_PAREN ( document_key | content_key ) concatenation_wrapper ( as_key ! type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmlserialize_key_in_standard_function13302);
        	        xmlserialize_key992=xmlserialize_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlserialize_key992.tree, root_0);

        	        LEFT_PAREN993 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13317);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN993_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN993));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN993_tree);
        	        }


        	        // OracleDML.g:1194:17: ( document_key | content_key )
        	        {
        	            ANTLR_UINT32 alt316=2;
        	            {
        	                ANTLR_UINT32 LA316_0 = this->LA(1);
        	                if ( (LA316_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "CONTENT"))||((toUpper(LT(1)->getText()) == "DOCUMENT")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA316_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "DOCUMENT")))
        	                        {
        	                            alt316=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "CONTENT")))
        	                        {
        	                            alt316=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 316 );
        	                            ex->set_state( 1 );


        	                            goto rulestandard_functionEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 316 );
        	                    ex->set_state( 0 );


        	                    goto rulestandard_functionEx;

        	                }
        	            }
        	            switch (alt316)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1194:18: document_key
        	        	    {
        	        	        this->followPush(FOLLOW_document_key_in_standard_function13336);
        	        	        document_key994=document_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, document_key994.tree);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1194:31: content_key
        	        	    {
        	        	        this->followPush(FOLLOW_content_key_in_standard_function13338);
        	        	        content_key995=content_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, content_key995.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13357);
        	        concatenation_wrapper996=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper996.tree);


        	        // OracleDML.g:1195:39: ( as_key ! type_spec )?
        	        {
        	            ANTLR_UINT32 alt317=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_AS:
        	                	{
        	                		alt317=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt317)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1195:40: as_key ! type_spec
        	        	    {
        	        	        this->followPush(FOLLOW_as_key_in_standard_function13360);
        	        	        as_key997=as_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_type_spec_in_standard_function13363);
        	        	        type_spec998=type_spec();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, type_spec998.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1196:17: ( xmlserialize_param_enconding_part )?
        	        {
        	            ANTLR_UINT32 alt318=2;
        	            {
        	                ANTLR_UINT32 LA318_0 = this->LA(1);
        	                if ( (LA318_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "VERSION"))||((toUpper(LT(1)->getText()) == "ENCODING"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA318_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "ENCODING")))
        	                        {
        	                            alt318=1;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt318)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1196:17: xmlserialize_param_enconding_part
        	        	    {
        	        	        this->followPush(FOLLOW_xmlserialize_param_enconding_part_in_standard_function13383);
        	        	        xmlserialize_param_enconding_part999=xmlserialize_param_enconding_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlserialize_param_enconding_part999.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1197:17: ( xmlserialize_param_version_part )?
        	        {
        	            ANTLR_UINT32 alt319=2;
        	            {
        	                ANTLR_UINT32 LA319_0 = this->LA(1);
        	                if ( (LA319_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "VERSION"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA319_1 = this->LA(2);
        	                        if ( (LA319_1 == APPROXIMATE_NUM_LIT || LA319_1 == BINDVAR || ((LA319_1 >= CHAR_STRING) && (LA319_1 <= CHAR_STRING_PERL)) || LA319_1 == COLON || LA319_1 == DELIMITED_ID || LA319_1 == EXACT_NUM_LIT || LA319_1 == INTRODUCER || LA319_1 == LEFT_PAREN || LA319_1 == MINUS_SIGN || LA319_1 == NATIONAL_CHAR_STRING_LIT || ((LA319_1 >= PLSQL_NON_RESERVED_CAST) && (LA319_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA319_1 == PLUS_SIGN || LA319_1 == SQL92_RESERVED_ALL || LA319_1 == SQL92_RESERVED_ANY || LA319_1 == SQL92_RESERVED_CASE || LA319_1 == SQL92_RESERVED_DATE || LA319_1 == SQL92_RESERVED_DEFAULT || LA319_1 == SQL92_RESERVED_DISTINCT || ((LA319_1 >= SQL92_RESERVED_EXISTS) && (LA319_1 <= SQL92_RESERVED_FALSE)) || LA319_1 == SQL92_RESERVED_NULL || LA319_1 == SQL92_RESERVED_PRIOR || LA319_1 == SQL92_RESERVED_TRUE || LA319_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "VERSION")))
        	                        {
        	                            alt319=1;
        	                        }
        	                        else if ( (LA319_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "VERSION"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                        {
        	                            {
        	                                ANTLR_UINT32 LA319_4 = this->LA(3);
        	                                if ( ((toUpper(LT(1)->getText()) == "VERSION")))
        	                                {
        	                                    alt319=1;
        	                                }
        	                            }
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt319)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1197:17: xmlserialize_param_version_part
        	        	    {
        	        	        this->followPush(FOLLOW_xmlserialize_param_version_part_in_standard_function13402);
        	        	        xmlserialize_param_version_part1000=xmlserialize_param_version_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlserialize_param_version_part1000.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1198:17: ( xmlserialize_param_ident_part )?
        	        {
        	            ANTLR_UINT32 alt320=2;
        	            {
        	                ANTLR_UINT32 LA320_0 = this->LA(1);
        	                if ( (LA320_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA320_1 = this->LA(2);
        	                        if ( (LA320_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                        {
        	                            {
        	                                ANTLR_UINT32 LA320_3 = this->LA(3);
        	                                if ( ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "NO")))))
        	                                {
        	                                    alt320=1;
        	                                }
        	                            }
        	                        }
        	                        else if ( (LA320_1 == RIGHT_PAREN || LA320_1 == SQL92_RESERVED_SIZE) && ((toUpper(LT(1)->getText()) == "INDENT")))
        	                        {
        	                            alt320=1;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt320)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1198:17: xmlserialize_param_ident_part
        	        	    {
        	        	        this->followPush(FOLLOW_xmlserialize_param_ident_part_in_standard_function13421);
        	        	        xmlserialize_param_ident_part1001=xmlserialize_param_ident_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xmlserialize_param_ident_part1001.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1199:17: ( ( hide_key | show_key ) defaults_key )?
        	        {
        	            ANTLR_UINT32 alt322=2;
        	            {
        	                ANTLR_UINT32 LA322_0 = this->LA(1);
        	                if ( (LA322_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW")))))
        	                {
        	                    alt322=1;
        	                }
        	            }
        	            switch (alt322)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1199:18: ( hide_key | show_key ) defaults_key
        	        	    {
        	        	        // OracleDML.g:1199:18: ( hide_key | show_key )
        	        	        {
        	        	            ANTLR_UINT32 alt321=2;
        	        	            {
        	        	                ANTLR_UINT32 LA321_0 = this->LA(1);
        	        	                if ( (LA321_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "HIDE"))||((toUpper(LT(1)->getText()) == "SHOW")))))
        	        	                {
        	        	                    {
        	        	                        ANTLR_UINT32 LA321_1 = this->LA(2);
        	        	                        if ( ((toUpper(LT(1)->getText()) == "HIDE")))
        	        	                        {
        	        	                            alt321=1;
        	        	                        }
        	        	                        else if ( ((toUpper(LT(1)->getText()) == "SHOW")))
        	        	                        {
        	        	                            alt321=2;
        	        	                        }
        	        	                        else
        	        	                        {
        	        	                            if (this->get_backtracking()>0)
        	        	                            {
        	        	                                this->set_failedflag( true );
        	        	                                return retval;
        	        	                            }


        	        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                            ex->set_decisionNum( 321 );
        	        	                            ex->set_state( 1 );


        	        	                            goto rulestandard_functionEx;

        	        	                        }
        	        	                    }
        	        	                }
        	        	                else
        	        	                {
        	        	                    if (this->get_backtracking()>0)
        	        	                    {
        	        	                        this->set_failedflag( true );
        	        	                        return retval;
        	        	                    }


        	        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	        	                    ex->set_decisionNum( 321 );
        	        	                    ex->set_state( 0 );


        	        	                    goto rulestandard_functionEx;

        	        	                }
        	        	            }
        	        	            switch (alt321)
        	        	            {
        	        	        	case 1:
        	        	        	    // OracleDML.g:1199:19: hide_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_hide_key_in_standard_function13442);
        	        	        	        hide_key1002=hide_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, hide_key1002.tree);


        	        	        	    }
        	        	        	    break;
        	        	        	case 2:
        	        	        	    // OracleDML.g:1199:28: show_key
        	        	        	    {
        	        	        	        this->followPush(FOLLOW_show_key_in_standard_function13444);
        	        	        	        show_key1003=show_key();

        	        	        	        this->followPop();
        	        	        	        if  (this->hasException())
        	        	        	        {
        	        	        	            goto rulestandard_functionEx;
        	        	        	        }
        	        	        	        if (this->hasFailed())
        	        	        	        {
        	        	        	            return retval;
        	        	        	        }

        	        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, show_key1003.tree);


        	        	        	    }
        	        	        	    break;

        	        	            }
        	        	        }

        	        	        this->followPush(FOLLOW_defaults_key_in_standard_function13447);
        	        	        defaults_key1004=defaults_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, defaults_key1004.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN1005 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13463);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN1005_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1005));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1005_tree);
        	        }


        	        // OracleDML.g:1201:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt323=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt323=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt323)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1201:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD1006 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13478);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD1006_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD1006));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD1006_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13480);
        	        	        general_element_part1007=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part1007.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 24:
        	    // OracleDML.g:1202:10: xmltable_key ^ LEFT_PAREN ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )? RIGHT_PAREN ( PERIOD general_element_part )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_xmltable_key_in_standard_function13493);
        	        xmltable_key1008=xmltable_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmltable_key1008.tree, root_0);

        	        LEFT_PAREN1009 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_standard_function13508);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN1009_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1009));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1009_tree);
        	        }


        	        // OracleDML.g:1204:17: ( xml_namespaces_clause )?
        	        {
        	            ANTLR_UINT32 alt324=2;
        	            switch ( this->LA(1) )
        	            {
        	                case REGULAR_ID:
        	                	{
        	                		{
        	                		    ANTLR_UINT32 LA324_1 = this->LA(2);
        	                		    if ( ((toUpper(LT(1)->getText()) == "XMLNAMESPACES")))
        	                		    {
        	                		        alt324=1;
        	                		    }
        	                		}
        	                	}
        	                    break;
        	            }

        	            switch (alt324)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1204:17: xml_namespaces_clause
        	        	    {
        	        	        this->followPush(FOLLOW_xml_namespaces_clause_in_standard_function13526);
        	        	        xml_namespaces_clause1010=xml_namespaces_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_namespaces_clause1010.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        this->followPush(FOLLOW_concatenation_wrapper_in_standard_function13545);
        	        concatenation_wrapper1011=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1011.tree);


        	        // OracleDML.g:1206:17: ( xml_passing_clause )?
        	        {
        	            ANTLR_UINT32 alt325=2;
        	            {
        	                ANTLR_UINT32 LA325_0 = this->LA(1);
        	                if ( (LA325_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "PASSING"))||((toUpper(LT(1)->getText()) == "COLUMNS")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA325_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "PASSING")))
        	                        {
        	                            alt325=1;
        	                        }
        	                    }
        	                }
        	            }
        	            switch (alt325)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1206:17: xml_passing_clause
        	        	    {
        	        	        this->followPush(FOLLOW_xml_passing_clause_in_standard_function13563);
        	        	        xml_passing_clause1012=xml_passing_clause();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_passing_clause1012.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // OracleDML.g:1207:17: ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )?
        	        {
        	            ANTLR_UINT32 alt326=2;
        	            {
        	                ANTLR_UINT32 LA326_0 = this->LA(1);
        	                if ( (LA326_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "COLUMNS")))
        	                {
        	                    alt326=1;
        	                }
        	            }
        	            switch (alt326)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1207:18: columns_key ! xml_table_column ( COMMA ! xml_table_column )
        	        	    {
        	        	        this->followPush(FOLLOW_columns_key_in_standard_function13583);
        	        	        columns_key1013=columns_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_xml_table_column_in_standard_function13586);
        	        	        xml_table_column1014=xml_table_column();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_table_column1014.tree);


        	        	        // OracleDML.g:1207:48: ( COMMA ! xml_table_column )
        	        	        // OracleDML.g:1207:49: COMMA ! xml_table_column
        	        	        {
        	        	            COMMA1015 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_standard_function13589);
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }


        	        	            this->followPush(FOLLOW_xml_table_column_in_standard_function13592);
        	        	            xml_table_column1016=xml_table_column();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto rulestandard_functionEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return retval;
        	        	            }

        	        	            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_table_column1016.tree);


        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        RIGHT_PAREN1017 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_standard_function13609);
        	        if  (this->hasException())
        	        {
        	            goto rulestandard_functionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN1017_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1017));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1017_tree);
        	        }


        	        // OracleDML.g:1209:13: ( PERIOD general_element_part )?
        	        {
        	            ANTLR_UINT32 alt327=2;
        	            switch ( this->LA(1) )
        	            {
        	                case PERIOD:
        	                	{
        	                		alt327=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt327)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1209:14: PERIOD general_element_part
        	        	    {
        	        	        PERIOD1018 =  this->matchToken(PERIOD, &FOLLOW_PERIOD_in_standard_function13624);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) {
        	        	        PERIOD1018_tree = std::move(get_psrstate()->get_treeAdaptor()->create(PERIOD1018));
        	        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, PERIOD1018_tree);
        	        	        }


        	        	        this->followPush(FOLLOW_general_element_part_in_standard_function13626);
        	        	        general_element_part1019=general_element_part();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestandard_functionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, general_element_part1019.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulestandard_functionEx; /* Prevent compiler warnings */
    rulestandard_functionEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end standard_function */

/**
 * $ANTLR start stantard_function_enabling_over
 * OracleDML.g:1212:1: stantard_function_enabling_over :{...}? => REGULAR_ID -> FUNCTION_ENABLING_OVER[$REGULAR_ID] ;
 */
OracleDML::stantard_function_enabling_over_return
OracleDML::stantard_function_enabling_over()
{
    OracleDML::stantard_function_enabling_over_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* REGULAR_ID1020 = NULL;

    ImplTraits::TreeTypePtr REGULAR_ID1020_tree;
    RewriteRuleTokenStream<ImplTraits> stream_REGULAR_ID(get_psrstate()->get_treeAdaptor(), "token REGULAR_ID");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1213:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_OVER[$REGULAR_ID] )
        // OracleDML.g:1213:10: {...}? => REGULAR_ID
        {
            if ( !((enablesOverClause(LT(1)->getText()))) )
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "enablesOverClause(LT(1)->getText())" );
                    ex->set_ruleName( "stantard_function_enabling_over" );


            }

            REGULAR_ID1020 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_stantard_function_enabling_over13651);
            if  (this->hasException())
            {
                goto rulestantard_function_enabling_overEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_REGULAR_ID.add(REGULAR_ID1020);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1213:62: -> FUNCTION_ENABLING_OVER[$REGULAR_ID]
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(FUNCTION_ENABLING_OVER, REGULAR_ID1020));
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestantard_function_enabling_overEx; /* Prevent compiler warnings */
    rulestantard_function_enabling_overEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end stantard_function_enabling_over */

/**
 * $ANTLR start stantard_function_enabling_using
 * OracleDML.g:1216:1: stantard_function_enabling_using :{...}? => REGULAR_ID -> FUNCTION_ENABLING_USING[$REGULAR_ID] ;
 */
OracleDML::stantard_function_enabling_using_return
OracleDML::stantard_function_enabling_using()
{
    OracleDML::stantard_function_enabling_using_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* REGULAR_ID1021 = NULL;

    ImplTraits::TreeTypePtr REGULAR_ID1021_tree;
    RewriteRuleTokenStream<ImplTraits> stream_REGULAR_ID(get_psrstate()->get_treeAdaptor(), "token REGULAR_ID");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1217:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_USING[$REGULAR_ID] )
        // OracleDML.g:1217:10: {...}? => REGULAR_ID
        {
            if ( !((enablesUsingClause(LT(1)->getText()))) )
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "enablesUsingClause(LT(1)->getText())" );
                    ex->set_ruleName( "stantard_function_enabling_using" );


            }

            REGULAR_ID1021 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_stantard_function_enabling_using13679);
            if  (this->hasException())
            {
                goto rulestantard_function_enabling_usingEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_REGULAR_ID.add(REGULAR_ID1021);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1217:63: -> FUNCTION_ENABLING_USING[$REGULAR_ID]
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(FUNCTION_ENABLING_USING, REGULAR_ID1021));
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestantard_function_enabling_usingEx; /* Prevent compiler warnings */
    rulestantard_function_enabling_usingEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end stantard_function_enabling_using */

/**
 * $ANTLR start stantard_function_enabling_within_or_over
 * OracleDML.g:1220:1: stantard_function_enabling_within_or_over :{...}? => REGULAR_ID -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID] ;
 */
OracleDML::stantard_function_enabling_within_or_over_return
OracleDML::stantard_function_enabling_within_or_over()
{
    OracleDML::stantard_function_enabling_within_or_over_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* REGULAR_ID1022 = NULL;

    ImplTraits::TreeTypePtr REGULAR_ID1022_tree;
    RewriteRuleTokenStream<ImplTraits> stream_REGULAR_ID(get_psrstate()->get_treeAdaptor(), "token REGULAR_ID");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1221:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID] )
        // OracleDML.g:1221:10: {...}? => REGULAR_ID
        {
            if ( !((enablesWithinOrOverClause(LT(1)->getText()))) )
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "enablesWithinOrOverClause(LT(1)->getText())" );
                    ex->set_ruleName( "stantard_function_enabling_within_or_over" );


            }

            REGULAR_ID1022 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over13707);
            if  (this->hasException())
            {
                goto rulestantard_function_enabling_within_or_overEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_REGULAR_ID.add(REGULAR_ID1022);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1221:70: -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID]
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(FUNCTION_ENABLING_WITHIN_OR_OVER, REGULAR_ID1022));
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestantard_function_enabling_within_or_overEx; /* Prevent compiler warnings */
    rulestantard_function_enabling_within_or_overEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end stantard_function_enabling_within_or_over */

/**
 * $ANTLR start stantard_function_pedictions
 * OracleDML.g:1224:1: stantard_function_pedictions :{...}? => REGULAR_ID -> PREDICTION_FUNCTION[$REGULAR_ID] ;
 */
OracleDML::stantard_function_pedictions_return
OracleDML::stantard_function_pedictions()
{
    OracleDML::stantard_function_pedictions_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* REGULAR_ID1023 = NULL;

    ImplTraits::TreeTypePtr REGULAR_ID1023_tree;
    RewriteRuleTokenStream<ImplTraits> stream_REGULAR_ID(get_psrstate()->get_treeAdaptor(), "token REGULAR_ID");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1225:5: ({...}? => REGULAR_ID -> PREDICTION_FUNCTION[$REGULAR_ID] )
        // OracleDML.g:1225:10: {...}? => REGULAR_ID
        {
            if ( !((isStandardPredictionFunction(LT(1)->getText()))) )
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "isStandardPredictionFunction(LT(1)->getText())" );
                    ex->set_ruleName( "stantard_function_pedictions" );


            }

            REGULAR_ID1023 =  this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_stantard_function_pedictions13735);
            if  (this->hasException())
            {
                goto rulestantard_function_pedictionsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }
             
            if ( this->get_backtracking()==0 ) stream_REGULAR_ID.add(REGULAR_ID1023);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1225:73: -> PREDICTION_FUNCTION[$REGULAR_ID]
            {
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, get_psrstate()->get_treeAdaptor()->create(PREDICTION_FUNCTION, REGULAR_ID1023));
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulestantard_function_pedictionsEx; /* Prevent compiler warnings */
    rulestantard_function_pedictionsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end stantard_function_pedictions */

/**
 * $ANTLR start over_clause
 * OracleDML.g:1228:1: over_clause : over_key ^ LEFT_PAREN ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN ;
 */
OracleDML::over_clause_return
OracleDML::over_clause()
{
    OracleDML::over_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1025 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1029 = NULL;
    OracleDML_OracleDMLKeys::over_key_return over_key1024;
    ImplTraits::TreeTypePtr::pointer over_key1024_last = NULL;
    OracleDML::query_partition_clause_return query_partition_clause1026;
    ImplTraits::TreeTypePtr::pointer query_partition_clause1026_last = NULL;
    OracleDML::order_by_clause_return order_by_clause1027;
    ImplTraits::TreeTypePtr::pointer order_by_clause1027_last = NULL;
    OracleDML::windowing_clause_return windowing_clause1028;
    ImplTraits::TreeTypePtr::pointer windowing_clause1028_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1025_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1029_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1229:5: ( over_key ^ LEFT_PAREN ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN )
        // OracleDML.g:1229:10: over_key ^ LEFT_PAREN ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_over_key_in_over_clause13760);
            over_key1024=over_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleover_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(over_key1024.tree, root_0);

            LEFT_PAREN1025 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_over_clause13771);
            if  (this->hasException())
            {
                goto ruleover_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN1025_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1025));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1025_tree);
            }


            // OracleDML.g:1231:13: ( query_partition_clause )?
            {
                ANTLR_UINT32 alt329=2;
                {
                    ANTLR_UINT32 LA329_0 = this->LA(1);
                    if ( (LA329_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "PARTITION")))
                    {
                        alt329=1;
                    }
                }
                switch (alt329)
                {
            	case 1:
            	    // OracleDML.g:1231:13: query_partition_clause
            	    {
            	        this->followPush(FOLLOW_query_partition_clause_in_over_clause13785);
            	        query_partition_clause1026=query_partition_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleover_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, query_partition_clause1026.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:1232:13: ( order_by_clause ( windowing_clause )? )?
            {
                ANTLR_UINT32 alt331=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_ORDER:
                    	{
                    		alt331=1;
                    	}
                        break;
                }

                switch (alt331)
                {
            	case 1:
            	    // OracleDML.g:1232:14: order_by_clause ( windowing_clause )?
            	    {
            	        this->followPush(FOLLOW_order_by_clause_in_over_clause13801);
            	        order_by_clause1027=order_by_clause();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleover_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, order_by_clause1027.tree);


            	        // OracleDML.g:1232:30: ( windowing_clause )?
            	        {
            	            ANTLR_UINT32 alt330=2;
            	            {
            	                ANTLR_UINT32 LA330_0 = this->LA(1);
            	                if ( (LA330_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "RANGE"))||((toUpper(LT(1)->getText()) == "ROWS")))))
            	                {
            	                    alt330=1;
            	                }
            	            }
            	            switch (alt330)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1232:30: windowing_clause
            	        	    {
            	        	        this->followPush(FOLLOW_windowing_clause_in_over_clause13803);
            	        	        windowing_clause1028=windowing_clause();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleover_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, windowing_clause1028.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            RIGHT_PAREN1029 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_over_clause13816);
            if  (this->hasException())
            {
                goto ruleover_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN1029_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1029));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1029_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleover_clauseEx; /* Prevent compiler warnings */
    ruleover_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end over_clause */

/**
 * $ANTLR start windowing_clause
 * OracleDML.g:1236:1: windowing_clause : windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements ) -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) ) -> ^( windowing_type ( windowing_elements )+ ) ;
 */
OracleDML::windowing_clause_return
OracleDML::windowing_clause()
{
    OracleDML::windowing_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::windowing_type_return windowing_type1030;
    ImplTraits::TreeTypePtr::pointer windowing_type1030_last = NULL;
    OracleDML_OracleDMLKeys::between_key_return between_key1031;
    ImplTraits::TreeTypePtr::pointer between_key1031_last = NULL;
    OracleDML::windowing_elements_return windowing_elements1032;
    ImplTraits::TreeTypePtr::pointer windowing_elements1032_last = NULL;
    OracleDML_OracleDMLKeys::and_key_return and_key1033;
    ImplTraits::TreeTypePtr::pointer and_key1033_last = NULL;
    OracleDML::windowing_elements_return windowing_elements1034;
    ImplTraits::TreeTypePtr::pointer windowing_elements1034_last = NULL;
    OracleDML::windowing_elements_return windowing_elements1035;
    ImplTraits::TreeTypePtr::pointer windowing_elements1035_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_windowing_type(get_psrstate()->get_treeAdaptor(), "rule windowing_type");
    RewriteRuleSubtreeStream<ImplTraits> stream_between_key(get_psrstate()->get_treeAdaptor(), "rule between_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_and_key(get_psrstate()->get_treeAdaptor(), "rule and_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_windowing_elements(get_psrstate()->get_treeAdaptor(), "rule windowing_elements");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1238:5: ( windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements ) -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) ) -> ^( windowing_type ( windowing_elements )+ ) )
        // OracleDML.g:1238:10: windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements )
        {
            this->followPush(FOLLOW_windowing_type_in_windowing_clause13844);
            windowing_type1030=windowing_type();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewindowing_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                windowing_type1030_last = windowing_type1030.tree.get();
                stream_windowing_type.add(windowing_type1030.tree);
            }

            // OracleDML.g:1239:5: ( between_key windowing_elements and_key windowing_elements | windowing_elements )
            {
                ANTLR_UINT32 alt332=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_BETWEEN:
                	{
                		alt332=1;
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case REGULAR_ID:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURRENT:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt332=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 332 );
                    ex->set_state( 0 );


                    goto rulewindowing_clauseEx;

                }

                switch (alt332)
                {
            	case 1:
            	    // OracleDML.g:1239:10: between_key windowing_elements and_key windowing_elements
            	    {
            	        this->followPush(FOLLOW_between_key_in_windowing_clause13855);
            	        between_key1031=between_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            between_key1031_last = between_key1031.tree.get();
            	            stream_between_key.add(between_key1031.tree);
            	        }

            	        this->followPush(FOLLOW_windowing_elements_in_windowing_clause13857);
            	        windowing_elements1032=windowing_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            windowing_elements1032_last = windowing_elements1032.tree.get();
            	            stream_windowing_elements.add(windowing_elements1032.tree);
            	        }

            	        this->followPush(FOLLOW_and_key_in_windowing_clause13859);
            	        and_key1033=and_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            and_key1033_last = and_key1033.tree.get();
            	            stream_and_key.add(and_key1033.tree);
            	        }

            	        this->followPush(FOLLOW_windowing_elements_in_windowing_clause13861);
            	        windowing_elements1034=windowing_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            windowing_elements1034_last = windowing_elements1034.tree.get();
            	            stream_windowing_elements.add(windowing_elements1034.tree);
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {
            	            mode = 1;
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1240:10: windowing_elements
            	    {
            	        this->followPush(FOLLOW_windowing_elements_in_windowing_clause13874);
            	        windowing_elements1035=windowing_elements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewindowing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            windowing_elements1035_last = windowing_elements1035.tree.get();
            	            stream_windowing_elements.add(windowing_elements1035.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: between_key, windowing_elements, windowing_elements, windowing_type, windowing_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1241:5: -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) )
            if (mode == 1) {
            	// OracleDML.g:1241:20: ^( windowing_type ^( between_key ( windowing_elements )+ ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_windowing_type.nextNode(), root_1);
            	// OracleDML.g:1241:37: ^( between_key ( windowing_elements )+ )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_between_key.nextNode(), root_2);
            	if ( !(stream_windowing_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "windowing_elements empty" );
            		goto rulewindowing_clauseEx;
            	}
            	while ( stream_windowing_elements.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_windowing_elements.nextTree());
            	}
            	stream_windowing_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1242:5: -> ^( windowing_type ( windowing_elements )+ )
            {
            	// OracleDML.g:1242:8: ^( windowing_type ( windowing_elements )+ )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_windowing_type.nextNode(), root_1);
            	if ( !(stream_windowing_elements.hasNext()) ) {
            		ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, REWRITE_EARLY_EXCEPTION, StreamType>( this->get_rec(), "windowing_elements empty" );
            		goto rulewindowing_clauseEx;
            	}
            	while ( stream_windowing_elements.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_windowing_elements.nextTree());
            	}
            	stream_windowing_elements.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulewindowing_clauseEx; /* Prevent compiler warnings */
    rulewindowing_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end windowing_clause */

/**
 * $ANTLR start windowing_type
 * OracleDML.g:1245:1: windowing_type : ( rows_key | range_key );
 */
OracleDML::windowing_type_return
OracleDML::windowing_type()
{
    OracleDML::windowing_type_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::rows_key_return rows_key1036;
    ImplTraits::TreeTypePtr::pointer rows_key1036_last = NULL;
    OracleDML_OracleDMLKeys::range_key_return range_key1037;
    ImplTraits::TreeTypePtr::pointer range_key1037_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1246:5: ( rows_key | range_key )

            ANTLR_UINT32 alt333;

            alt333=2;

            {
                ANTLR_UINT32 LA333_0 = this->LA(1);
                if ( (LA333_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "RANGE"))||((toUpper(LT(1)->getText()) == "ROWS")))))
                {
                    {
                        ANTLR_UINT32 LA333_1 = this->LA(2);
                        if ( ((toUpper(LT(1)->getText()) == "ROWS")))
                        {
                            alt333=1;
                        }
                        else if ( ((toUpper(LT(1)->getText()) == "RANGE")))
                        {
                            alt333=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 333 );
                            ex->set_state( 1 );


                            goto rulewindowing_typeEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 333 );
                    ex->set_state( 0 );


                    goto rulewindowing_typeEx;

                }
            }
            switch (alt333)
            {
        	case 1:
        	    // OracleDML.g:1246:10: rows_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_rows_key_in_windowing_type13933);
        	        rows_key1036=rows_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, rows_key1036.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1247:10: range_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_range_key_in_windowing_type13944);
        	        range_key1037=range_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_typeEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, range_key1037.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulewindowing_typeEx; /* Prevent compiler warnings */
    rulewindowing_typeEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end windowing_type */

/**
 * $ANTLR start windowing_elements
 * OracleDML.g:1250:1: windowing_elements : ( unbounded_key ^ preceding_key | current_key ^ row_key | concatenation_wrapper ( preceding_key ^| following_key ^) );
 */
OracleDML::windowing_elements_return
OracleDML::windowing_elements()
{
    OracleDML::windowing_elements_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::unbounded_key_return unbounded_key1038;
    ImplTraits::TreeTypePtr::pointer unbounded_key1038_last = NULL;
    OracleDML_OracleDMLKeys::preceding_key_return preceding_key1039;
    ImplTraits::TreeTypePtr::pointer preceding_key1039_last = NULL;
    OracleDML_OracleDMLKeys::current_key_return current_key1040;
    ImplTraits::TreeTypePtr::pointer current_key1040_last = NULL;
    OracleDML_OracleDMLKeys::row_key_return row_key1041;
    ImplTraits::TreeTypePtr::pointer row_key1041_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1042;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1042_last = NULL;
    OracleDML_OracleDMLKeys::preceding_key_return preceding_key1043;
    ImplTraits::TreeTypePtr::pointer preceding_key1043_last = NULL;
    OracleDML_OracleDMLKeys::following_key_return following_key1044;
    ImplTraits::TreeTypePtr::pointer following_key1044_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1251:5: ( unbounded_key ^ preceding_key | current_key ^ row_key | concatenation_wrapper ( preceding_key ^| following_key ^) )

            ANTLR_UINT32 alt335;

            alt335=3;

            switch ( this->LA(1) )
            {
            case REGULAR_ID:
            	{
            		{
            		    ANTLR_UINT32 LA335_1 = this->LA(2);
            		    if ( (LA335_1 == REGULAR_ID))
            		    {
            		        {
            		            ANTLR_UINT32 LA335_4 = this->LA(3);
            		            if ( ((toUpper(LT(1)->getText()) == "UNBOUNDED")))
            		            {
            		                alt335=1;
            		            }
            		            else if ( (true))
            		            {
            		                alt335=3;
            		            }
            		            else
            		            {
            		                if (this->get_backtracking()>0)
            		                {
            		                    this->set_failedflag( true );
            		                    return retval;
            		                }


            		                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		                ex->set_decisionNum( 335 );
            		                ex->set_state( 4 );


            		                goto rulewindowing_elementsEx;

            		            }
            		        }
            		    }
            		    else if ( (LA335_1 == MINUS_SIGN || LA335_1 == PLUS_SIGN))
            		    {
            		        alt335=3;
            		    }
            		    else if ( (LA335_1 == PLSQL_NON_RESERVED_CONNECT_BY_ROOT || LA335_1 == SQL92_RESERVED_ALL || LA335_1 == SQL92_RESERVED_DISTINCT || LA335_1 == SQL92_RESERVED_PRIOR) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt335=3;
            		    }
            		    else if ( (LA335_1 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "INTERVAL"))||(( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))))
            		    {
            		        alt335=3;
            		    }
            		    else if ( (LA335_1 == SQL92_RESERVED_CASE))
            		    {
            		        alt335=3;
            		    }
            		    else if ( (LA335_1 == PLSQL_NON_RESERVED_CAST || LA335_1 == SQL92_RESERVED_ANY || LA335_1 == SQL92_RESERVED_EXISTS) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt335=3;
            		    }
            		    else if ( (LA335_1 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "INTERVAL"))||(( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))))
            		    {
            		        alt335=3;
            		    }
            		    else if ( (LA335_1 == BINDVAR || LA335_1 == COLON))
            		    {
            		        alt335=3;
            		    }
            		    else if ( (LA335_1 == APPROXIMATE_NUM_LIT || LA335_1 == EXACT_NUM_LIT || LA335_1 == SQL92_RESERVED_DATE || LA335_1 == UNSIGNED_INTEGER) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt335=3;
            		    }
            		    else if ( (((LA335_1 >= CHAR_STRING) && (LA335_1 <= CHAR_STRING_PERL)) || LA335_1 == NATIONAL_CHAR_STRING_LIT))
            		    {
            		        alt335=3;
            		    }
            		    else if ( (LA335_1 == SQL92_RESERVED_DEFAULT || LA335_1 == SQL92_RESERVED_FALSE || LA335_1 == SQL92_RESERVED_NULL || LA335_1 == SQL92_RESERVED_TRUE) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
            		    {
            		        alt335=3;
            		    }
            		    else if ( (LA335_1 == ASTERISK || LA335_1 == CONCATENATION_OP || ((LA335_1 >= LEFT_BRACKET) && (LA335_1 <= LEFT_PAREN)) || LA335_1 == PERIOD || LA335_1 == PLSQL_NON_RESERVED_MULTISET || LA335_1 == SOLIDUS || LA335_1 == VERTICAL_BAR))
            		    {
            		        alt335=3;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return retval;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 335 );
            		        ex->set_state( 1 );


            		        goto rulewindowing_elementsEx;

            		    }
            		}
            	}
                break;
            case SQL92_RESERVED_CURRENT:
            	{
            		alt335=2;
            	}
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CAST:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
            	{
            		alt335=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 335 );
                ex->set_state( 0 );


                goto rulewindowing_elementsEx;

            }

            switch (alt335)
            {
        	case 1:
        	    // OracleDML.g:1251:10: unbounded_key ^ preceding_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_unbounded_key_in_windowing_elements13964);
        	        unbounded_key1038=unbounded_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(unbounded_key1038.tree, root_0);

        	        this->followPush(FOLLOW_preceding_key_in_windowing_elements13967);
        	        preceding_key1039=preceding_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, preceding_key1039.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1252:10: current_key ^ row_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_current_key_in_windowing_elements13978);
        	        current_key1040=current_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(current_key1040.tree, root_0);

        	        this->followPush(FOLLOW_row_key_in_windowing_elements13981);
        	        row_key1041=row_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, row_key1041.tree);


        	    }
        	    break;
        	case 3:
        	    // OracleDML.g:1253:10: concatenation_wrapper ( preceding_key ^| following_key ^)
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_concatenation_wrapper_in_windowing_elements13992);
        	        concatenation_wrapper1042=concatenation_wrapper();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewindowing_elementsEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1042.tree);


        	        // OracleDML.g:1253:32: ( preceding_key ^| following_key ^)
        	        {
        	            ANTLR_UINT32 alt334=2;
        	            {
        	                ANTLR_UINT32 LA334_0 = this->LA(1);
        	                if ( (LA334_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "FOLLOWING"))||((toUpper(LT(1)->getText()) == "PRECEDING")))))
        	                {
        	                    {
        	                        ANTLR_UINT32 LA334_1 = this->LA(2);
        	                        if ( ((toUpper(LT(1)->getText()) == "PRECEDING")))
        	                        {
        	                            alt334=1;
        	                        }
        	                        else if ( ((toUpper(LT(1)->getText()) == "FOLLOWING")))
        	                        {
        	                            alt334=2;
        	                        }
        	                        else
        	                        {
        	                            if (this->get_backtracking()>0)
        	                            {
        	                                this->set_failedflag( true );
        	                                return retval;
        	                            }


        	                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                            ex->set_decisionNum( 334 );
        	                            ex->set_state( 1 );


        	                            goto rulewindowing_elementsEx;

        	                        }
        	                    }
        	                }
        	                else
        	                {
        	                    if (this->get_backtracking()>0)
        	                    {
        	                        this->set_failedflag( true );
        	                        return retval;
        	                    }


        	                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 334 );
        	                    ex->set_state( 0 );


        	                    goto rulewindowing_elementsEx;

        	                }
        	            }
        	            switch (alt334)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1253:33: preceding_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_preceding_key_in_windowing_elements13995);
        	        	        preceding_key1043=preceding_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulewindowing_elementsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(preceding_key1043.tree, root_0);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // OracleDML.g:1253:48: following_key ^
        	        	    {
        	        	        this->followPush(FOLLOW_following_key_in_windowing_elements13998);
        	        	        following_key1044=following_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulewindowing_elementsEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(following_key1044.tree, root_0);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulewindowing_elementsEx; /* Prevent compiler warnings */
    rulewindowing_elementsEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end windowing_elements */

/**
 * $ANTLR start using_clause
 * OracleDML.g:1256:1: using_clause : using_key ^ ( ASTERISK | using_element ( COMMA ! using_element )* ) ;
 */
OracleDML::using_clause_return
OracleDML::using_clause()
{
    OracleDML::using_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* ASTERISK1046 = NULL;
    ImplTraits::CommonTokenType const* COMMA1048 = NULL;
    OracleDML_OracleDMLKeys::using_key_return using_key1045;
    ImplTraits::TreeTypePtr::pointer using_key1045_last = NULL;
    OracleDML::using_element_return using_element1047;
    ImplTraits::TreeTypePtr::pointer using_element1047_last = NULL;
    OracleDML::using_element_return using_element1049;
    ImplTraits::TreeTypePtr::pointer using_element1049_last = NULL;
    ImplTraits::TreeTypePtr ASTERISK1046_tree;
    ImplTraits::TreeTypePtr COMMA1048_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1257:5: ( using_key ^ ( ASTERISK | using_element ( COMMA ! using_element )* ) )
        // OracleDML.g:1257:10: using_key ^ ( ASTERISK | using_element ( COMMA ! using_element )* )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_using_key_in_using_clause14020);
            using_key1045=using_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleusing_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(using_key1045.tree, root_0);

            // OracleDML.g:1258:5: ( ASTERISK | using_element ( COMMA ! using_element )* )
            {
                ANTLR_UINT32 alt337=2;
                switch ( this->LA(1) )
                {
                case ASTERISK:
                	{
                		alt337=1;
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case REGULAR_ID:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_IN:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt337=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 337 );
                    ex->set_state( 0 );


                    goto ruleusing_clauseEx;

                }

                switch (alt337)
                {
            	case 1:
            	    // OracleDML.g:1258:10: ASTERISK
            	    {
            	        ASTERISK1046 =  this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_using_clause14032);
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        ASTERISK1046_tree = std::move(get_psrstate()->get_treeAdaptor()->create(ASTERISK1046));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, ASTERISK1046_tree);
            	        }


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1259:10: using_element ( COMMA ! using_element )*
            	    {
            	        this->followPush(FOLLOW_using_element_in_using_clause14043);
            	        using_element1047=using_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, using_element1047.tree);


            	        // OracleDML.g:1259:24: ( COMMA ! using_element )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt336=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt336=1;
            	            	}
            	                break;

            	            }

            	            switch (alt336)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1259:25: COMMA ! using_element
            	        	    {
            	        	        COMMA1048 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_using_clause14046);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleusing_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	        this->followPush(FOLLOW_using_element_in_using_clause14049);
            	        	        using_element1049=using_element();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleusing_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, using_element1049.tree);


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop336;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop336: ; /* Jump out to here if this rule does not match */


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleusing_clauseEx; /* Prevent compiler warnings */
    ruleusing_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end using_clause */

/**
 * $ANTLR start using_element
 * OracleDML.g:1263:1: using_element : ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )? -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? ) ;
 */
OracleDML::using_element_return
OracleDML::using_element()
{
    OracleDML::using_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::in_key_return in_key1050;
    ImplTraits::TreeTypePtr::pointer in_key1050_last = NULL;
    OracleDML_OracleDMLKeys::out_key_return out_key1051;
    ImplTraits::TreeTypePtr::pointer out_key1051_last = NULL;
    OracleDML_OracleDMLKeys::out_key_return out_key1052;
    ImplTraits::TreeTypePtr::pointer out_key1052_last = NULL;
    OracleDML::select_list_elements_return select_list_elements1053;
    ImplTraits::TreeTypePtr::pointer select_list_elements1053_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1054;
    ImplTraits::TreeTypePtr::pointer column_alias1054_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_column_alias(get_psrstate()->get_treeAdaptor(), "rule column_alias");
    RewriteRuleSubtreeStream<ImplTraits> stream_out_key(get_psrstate()->get_treeAdaptor(), "rule out_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_select_list_elements(get_psrstate()->get_treeAdaptor(), "rule select_list_elements");
    RewriteRuleSubtreeStream<ImplTraits> stream_in_key(get_psrstate()->get_treeAdaptor(), "rule in_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1264:5: ( ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )? -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? ) )
        // OracleDML.g:1264:10: ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )?
        {
            // OracleDML.g:1264:10: ( in_key ( out_key )? | out_key )?
            {
                ANTLR_UINT32 alt339=3;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_IN:
                    	{
                    		alt339=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA339_2 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "OUT")))
                    		    {
                    		        alt339=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt339)
                {
            	case 1:
            	    // OracleDML.g:1264:11: in_key ( out_key )?
            	    {
            	        this->followPush(FOLLOW_in_key_in_using_element14078);
            	        in_key1050=in_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            in_key1050_last = in_key1050.tree.get();
            	            stream_in_key.add(in_key1050.tree);
            	        }

            	        // OracleDML.g:1264:18: ( out_key )?
            	        {
            	            ANTLR_UINT32 alt338=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		{
            	                		    ANTLR_UINT32 LA338_1 = this->LA(2);
            	                		    if ( ((toUpper(LT(1)->getText()) == "OUT")))
            	                		    {
            	                		        alt338=1;
            	                		    }
            	                		}
            	                	}
            	                    break;
            	            }

            	            switch (alt338)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1264:18: out_key
            	        	    {
            	        	        this->followPush(FOLLOW_out_key_in_using_element14080);
            	        	        out_key1051=out_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleusing_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            out_key1051_last = out_key1051.tree.get();
            	        	            stream_out_key.add(out_key1051.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1264:27: out_key
            	    {
            	        this->followPush(FOLLOW_out_key_in_using_element14083);
            	        out_key1052=out_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            out_key1052_last = out_key1052.tree.get();
            	            stream_out_key.add(out_key1052.tree);
            	        }

            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_select_list_elements_in_using_element14087);
            select_list_elements1053=select_list_elements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleusing_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                select_list_elements1053_last = select_list_elements1053.tree.get();
                stream_select_list_elements.add(select_list_elements1053.tree);
            }

            // OracleDML.g:1264:58: ( column_alias )?
            {
                ANTLR_UINT32 alt340=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_AS:
                    	{
                    		alt340=1;
                    	}
                        break;
                    case INTRODUCER:
                    	{
                    		alt340=1;
                    	}
                        break;
                    case REGULAR_ID:
                    	{
                    		alt340=1;
                    	}
                        break;
                    case DELIMITED_ID:
                    	{
                    		alt340=1;
                    	}
                        break;
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case NATIONAL_CHAR_STRING_LIT:
                    	{
                    		alt340=1;
                    	}
                        break;
                }

                switch (alt340)
                {
            	case 1:
            	    // OracleDML.g:1264:58: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_using_element14089);
            	        column_alias1054=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleusing_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            column_alias1054_last = column_alias1054.tree.get();
            	            stream_column_alias.add(column_alias1054.tree);
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: out_key, column_alias, in_key, select_list_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1265:9: -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? )
            {
            	// OracleDML.g:1265:12: ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(ELEMENT, "ELEMENT"), root_1);
            	// OracleDML.g:1265:22: ( in_key )?
            	if ( stream_in_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_in_key.nextTree());
            	}
            	stream_in_key.reset();

            	// OracleDML.g:1265:30: ( out_key )?
            	if ( stream_out_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_out_key.nextTree());
            	}
            	stream_out_key.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_select_list_elements.nextTree());
            	// OracleDML.g:1265:60: ( column_alias )?
            	if ( stream_column_alias.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_column_alias.nextTree());
            	}
            	stream_column_alias.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto ruleusing_elementEx; /* Prevent compiler warnings */
    ruleusing_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end using_element */

/**
 * $ANTLR start collect_order_by_part
 * OracleDML.g:1268:1: collect_order_by_part : order_key ^ by_key ! concatenation_wrapper ;
 */
OracleDML::collect_order_by_part_return
OracleDML::collect_order_by_part()
{
    OracleDML::collect_order_by_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::order_key_return order_key1055;
    ImplTraits::TreeTypePtr::pointer order_key1055_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key1056;
    ImplTraits::TreeTypePtr::pointer by_key1056_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1057;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1057_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1269:5: ( order_key ^ by_key ! concatenation_wrapper )
        // OracleDML.g:1269:10: order_key ^ by_key ! concatenation_wrapper
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_order_key_in_collect_order_by_part14135);
            order_key1055=order_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecollect_order_by_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(order_key1055.tree, root_0);

            this->followPush(FOLLOW_by_key_in_collect_order_by_part14138);
            by_key1056=by_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecollect_order_by_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_concatenation_wrapper_in_collect_order_by_part14141);
            concatenation_wrapper1057=concatenation_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecollect_order_by_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1057.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecollect_order_by_partEx; /* Prevent compiler warnings */
    rulecollect_order_by_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end collect_order_by_part */

/**
 * $ANTLR start within_or_over_part
 * OracleDML.g:1272:1: within_or_over_part : ( within_key ^ group_key ! LEFT_PAREN order_by_clause RIGHT_PAREN | over_clause );
 */
OracleDML::within_or_over_part_return
OracleDML::within_or_over_part()
{
    OracleDML::within_or_over_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1060 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1062 = NULL;
    OracleDML_OracleDMLKeys::within_key_return within_key1058;
    ImplTraits::TreeTypePtr::pointer within_key1058_last = NULL;
    OracleDML_OracleDMLKeys::group_key_return group_key1059;
    ImplTraits::TreeTypePtr::pointer group_key1059_last = NULL;
    OracleDML::order_by_clause_return order_by_clause1061;
    ImplTraits::TreeTypePtr::pointer order_by_clause1061_last = NULL;
    OracleDML::over_clause_return over_clause1063;
    ImplTraits::TreeTypePtr::pointer over_clause1063_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1060_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1062_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1273:5: ( within_key ^ group_key ! LEFT_PAREN order_by_clause RIGHT_PAREN | over_clause )

            ANTLR_UINT32 alt341;

            alt341=2;

            {
                ANTLR_UINT32 LA341_0 = this->LA(1);
                if ( (LA341_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "OVER"))||((toUpper(LT(1)->getText()) == "WITHIN")))))
                {
                    {
                        ANTLR_UINT32 LA341_1 = this->LA(2);
                        if ( (LA341_1 == SQL92_RESERVED_GROUP) && ((toUpper(LT(1)->getText()) == "WITHIN")))
                        {
                            alt341=1;
                        }
                        else if ( (LA341_1 == LEFT_PAREN) && ((toUpper(LT(1)->getText()) == "OVER")))
                        {
                            alt341=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 341 );
                            ex->set_state( 1 );


                            goto rulewithin_or_over_partEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 341 );
                    ex->set_state( 0 );


                    goto rulewithin_or_over_partEx;

                }
            }
            switch (alt341)
            {
        	case 1:
        	    // OracleDML.g:1273:10: within_key ^ group_key ! LEFT_PAREN order_by_clause RIGHT_PAREN
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_within_key_in_within_or_over_part14161);
        	        within_key1058=within_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(within_key1058.tree, root_0);

        	        this->followPush(FOLLOW_group_key_in_within_or_over_part14164);
        	        group_key1059=group_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        LEFT_PAREN1060 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_within_or_over_part14167);
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        LEFT_PAREN1060_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1060));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1060_tree);
        	        }


        	        this->followPush(FOLLOW_order_by_clause_in_within_or_over_part14169);
        	        order_by_clause1061=order_by_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, order_by_clause1061.tree);


        	        RIGHT_PAREN1062 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_within_or_over_part14171);
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) {
        	        RIGHT_PAREN1062_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1062));
        	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1062_tree);
        	        }


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1274:10: over_clause
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_over_clause_in_within_or_over_part14182);
        	        over_clause1063=over_clause();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulewithin_or_over_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, over_clause1063.tree);


        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulewithin_or_over_partEx; /* Prevent compiler warnings */
    rulewithin_or_over_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end within_or_over_part */

/**
 * $ANTLR start cost_matrix_clause
 * OracleDML.g:1277:1: cost_matrix_clause : cost_key ^ ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list ) ;
 */
OracleDML::cost_matrix_clause_return
OracleDML::cost_matrix_clause()
{
    OracleDML::cost_matrix_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1067 = NULL;
    ImplTraits::CommonTokenType const* COMMA1069 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1071 = NULL;
    OracleDML_OracleDMLKeys::cost_key_return cost_key1064;
    ImplTraits::TreeTypePtr::pointer cost_key1064_last = NULL;
    OracleDML_OracleDMLKeys::model_key_return model_key1065;
    ImplTraits::TreeTypePtr::pointer model_key1065_last = NULL;
    OracleDML_OracleDMLKeys::auto_key_return auto_key1066;
    ImplTraits::TreeTypePtr::pointer auto_key1066_last = NULL;
    OracleDML_OracleDMLCommons::cost_class_name_return cost_class_name1068;
    ImplTraits::TreeTypePtr::pointer cost_class_name1068_last = NULL;
    OracleDML_OracleDMLCommons::cost_class_name_return cost_class_name1070;
    ImplTraits::TreeTypePtr::pointer cost_class_name1070_last = NULL;
    OracleDML_OracleDMLKeys::values_key_return values_key1072;
    ImplTraits::TreeTypePtr::pointer values_key1072_last = NULL;
    OracleDML::expression_list_return expression_list1073;
    ImplTraits::TreeTypePtr::pointer expression_list1073_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1067_tree;
    ImplTraits::TreeTypePtr COMMA1069_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1071_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1278:5: ( cost_key ^ ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list ) )
        // OracleDML.g:1278:10: cost_key ^ ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_cost_key_in_cost_matrix_clause14202);
            cost_key1064=cost_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecost_matrix_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(cost_key1064.tree, root_0);

            // OracleDML.g:1279:5: ( model_key ( auto_key )? | LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list )
            {
                ANTLR_UINT32 alt344=2;
                switch ( this->LA(1) )
                {
                case PLSQL_NON_RESERVED_MODEL:
                	{
                		alt344=1;
                	}
                    break;
                case LEFT_PAREN:
                	{
                		alt344=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 344 );
                    ex->set_state( 0 );


                    goto rulecost_matrix_clauseEx;

                }

                switch (alt344)
                {
            	case 1:
            	    // OracleDML.g:1279:10: model_key ( auto_key )?
            	    {
            	        this->followPush(FOLLOW_model_key_in_cost_matrix_clause14214);
            	        model_key1065=model_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, model_key1065.tree);


            	        // OracleDML.g:1279:20: ( auto_key )?
            	        {
            	            ANTLR_UINT32 alt342=2;
            	            {
            	                ANTLR_UINT32 LA342_0 = this->LA(1);
            	                if ( (LA342_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "AUTO")))
            	                {
            	                    alt342=1;
            	                }
            	            }
            	            switch (alt342)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1279:20: auto_key
            	        	    {
            	        	        this->followPush(FOLLOW_auto_key_in_cost_matrix_clause14216);
            	        	        auto_key1066=auto_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecost_matrix_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, auto_key1066.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1280:10: LEFT_PAREN cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN values_key ! expression_list
            	    {
            	        LEFT_PAREN1067 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_cost_matrix_clause14228);
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        LEFT_PAREN1067_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1067));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1067_tree);
            	        }


            	        this->followPush(FOLLOW_cost_class_name_in_cost_matrix_clause14230);
            	        cost_class_name1068=cost_class_name();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cost_class_name1068.tree);


            	        // OracleDML.g:1280:37: ( COMMA ! cost_class_name )*

            	        for (;;)
            	        {
            	            ANTLR_UINT32 alt343=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt343=1;
            	            	}
            	                break;

            	            }

            	            switch (alt343)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1280:38: COMMA ! cost_class_name
            	        	    {
            	        	        COMMA1069 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_cost_matrix_clause14233);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecost_matrix_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	        this->followPush(FOLLOW_cost_class_name_in_cost_matrix_clause14236);
            	        	        cost_class_name1070=cost_class_name();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulecost_matrix_clauseEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, cost_class_name1070.tree);


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop343;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop343: ; /* Jump out to here if this rule does not match */


            	        RIGHT_PAREN1071 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_cost_matrix_clause14240);
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) {
            	        RIGHT_PAREN1071_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1071));
            	        get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1071_tree);
            	        }


            	        this->followPush(FOLLOW_values_key_in_cost_matrix_clause14242);
            	        values_key1072=values_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_expression_list_in_cost_matrix_clause14258);
            	        expression_list1073=expression_list();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecost_matrix_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_list1073.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulecost_matrix_clauseEx; /* Prevent compiler warnings */
    rulecost_matrix_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end cost_matrix_clause */

/**
 * $ANTLR start xml_passing_clause
 * OracleDML.g:1285:1: xml_passing_clause : passing_key ^ ( by_key ! value_key )? expression_wrapper ( column_alias )? ( COMMA ! expression_wrapper ( column_alias )? ) ;
 */
OracleDML::xml_passing_clause_return
OracleDML::xml_passing_clause()
{
    OracleDML::xml_passing_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* COMMA1079 = NULL;
    OracleDML_OracleDMLKeys::passing_key_return passing_key1074;
    ImplTraits::TreeTypePtr::pointer passing_key1074_last = NULL;
    OracleDML_OracleDMLKeys::by_key_return by_key1075;
    ImplTraits::TreeTypePtr::pointer by_key1075_last = NULL;
    OracleDML_OracleDMLKeys::value_key_return value_key1076;
    ImplTraits::TreeTypePtr::pointer value_key1076_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper1077;
    ImplTraits::TreeTypePtr::pointer expression_wrapper1077_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1078;
    ImplTraits::TreeTypePtr::pointer column_alias1078_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper1080;
    ImplTraits::TreeTypePtr::pointer expression_wrapper1080_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1081;
    ImplTraits::TreeTypePtr::pointer column_alias1081_last = NULL;
    ImplTraits::TreeTypePtr COMMA1079_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1286:5: ( passing_key ^ ( by_key ! value_key )? expression_wrapper ( column_alias )? ( COMMA ! expression_wrapper ( column_alias )? ) )
        // OracleDML.g:1286:10: passing_key ^ ( by_key ! value_key )? expression_wrapper ( column_alias )? ( COMMA ! expression_wrapper ( column_alias )? )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_passing_key_in_xml_passing_clause14284);
            passing_key1074=passing_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_passing_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(passing_key1074.tree, root_0);

            // OracleDML.g:1286:23: ( by_key ! value_key )?
            {
                ANTLR_UINT32 alt345=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_BY:
                    	{
                    		alt345=1;
                    	}
                        break;
                }

                switch (alt345)
                {
            	case 1:
            	    // OracleDML.g:1286:24: by_key ! value_key
            	    {
            	        this->followPush(FOLLOW_by_key_in_xml_passing_clause14288);
            	        by_key1075=by_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_passing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_value_key_in_xml_passing_clause14291);
            	        value_key1076=value_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_passing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, value_key1076.tree);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_expression_wrapper_in_xml_passing_clause14307);
            expression_wrapper1077=expression_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_passing_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper1077.tree);


            // OracleDML.g:1287:32: ( column_alias )?
            {
                ANTLR_UINT32 alt346=2;
                switch ( this->LA(1) )
                {
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case NATIONAL_CHAR_STRING_LIT:
                    case REGULAR_ID:
                    case SQL92_RESERVED_AS:
                    	{
                    		alt346=1;
                    	}
                        break;
                }

                switch (alt346)
                {
            	case 1:
            	    // OracleDML.g:1287:32: column_alias
            	    {
            	        this->followPush(FOLLOW_column_alias_in_xml_passing_clause14309);
            	        column_alias1078=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_passing_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias1078.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:1287:46: ( COMMA ! expression_wrapper ( column_alias )? )
            // OracleDML.g:1287:47: COMMA ! expression_wrapper ( column_alias )?
            {
                COMMA1079 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_xml_passing_clause14313);
                if  (this->hasException())
                {
                    goto rulexml_passing_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }


                this->followPush(FOLLOW_expression_wrapper_in_xml_passing_clause14316);
                expression_wrapper1080=expression_wrapper();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulexml_passing_clauseEx;
                }
                if (this->hasFailed())
                {
                    return retval;
                }

                if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper1080.tree);


                // OracleDML.g:1287:73: ( column_alias )?
                {
                    ANTLR_UINT32 alt347=2;
                    switch ( this->LA(1) )
                    {
                        case CHAR_STRING:
                        case CHAR_STRING_PERL:
                        case DELIMITED_ID:
                        case INTRODUCER:
                        case NATIONAL_CHAR_STRING_LIT:
                        case SQL92_RESERVED_AS:
                        	{
                        		alt347=1;
                        	}
                            break;
                        case REGULAR_ID:
                        	{
                        		{
                        		    ANTLR_UINT32 LA347_3 = this->LA(2);
                        		    if ( (!( ((((toUpper(LT(1)->getText()) == "RETURNING"))||((toUpper(LT(1)->getText()) == "COLUMNS")))) )))
                        		    {
                        		        alt347=1;
                        		    }
                        		}
                        	}
                            break;
                    }

                    switch (alt347)
                    {
                	case 1:
                	    // OracleDML.g:1287:73: column_alias
                	    {
                	        this->followPush(FOLLOW_column_alias_in_xml_passing_clause14318);
                	        column_alias1081=column_alias();

                	        this->followPop();
                	        if  (this->hasException())
                	        {
                	            goto rulexml_passing_clauseEx;
                	        }
                	        if (this->hasFailed())
                	        {
                	            return retval;
                	        }

                	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias1081.tree);


                	    }
                	    break;

                    }
                }

            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_passing_clauseEx; /* Prevent compiler warnings */
    rulexml_passing_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_passing_clause */

/**
 * $ANTLR start xml_attributes_clause
 * OracleDML.g:1290:1: xml_attributes_clause : xmlattributes_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ;
 */
OracleDML::xml_attributes_clause_return
OracleDML::xml_attributes_clause()
{
    OracleDML::xml_attributes_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1083 = NULL;
    ImplTraits::CommonTokenType const* COMMA1089 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1091 = NULL;
    OracleDML_OracleDMLKeys::xmlattributes_key_return xmlattributes_key1082;
    ImplTraits::TreeTypePtr::pointer xmlattributes_key1082_last = NULL;
    OracleDML_OracleDMLKeys::entityescaping_key_return entityescaping_key1084;
    ImplTraits::TreeTypePtr::pointer entityescaping_key1084_last = NULL;
    OracleDML_OracleDMLKeys::noentityescaping_key_return noentityescaping_key1085;
    ImplTraits::TreeTypePtr::pointer noentityescaping_key1085_last = NULL;
    OracleDML_OracleDMLKeys::schemacheck_key_return schemacheck_key1086;
    ImplTraits::TreeTypePtr::pointer schemacheck_key1086_last = NULL;
    OracleDML_OracleDMLKeys::noschemacheck_key_return noschemacheck_key1087;
    ImplTraits::TreeTypePtr::pointer noschemacheck_key1087_last = NULL;
    OracleDML::xml_multiuse_expression_element_return xml_multiuse_expression_element1088;
    ImplTraits::TreeTypePtr::pointer xml_multiuse_expression_element1088_last = NULL;
    OracleDML::xml_multiuse_expression_element_return xml_multiuse_expression_element1090;
    ImplTraits::TreeTypePtr::pointer xml_multiuse_expression_element1090_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1083_tree;
    ImplTraits::TreeTypePtr COMMA1089_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1091_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1291:5: ( xmlattributes_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN )
        // OracleDML.g:1291:10: xmlattributes_key ^ LEFT_PAREN ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_xmlattributes_key_in_xml_attributes_clause14340);
            xmlattributes_key1082=xmlattributes_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_attributes_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlattributes_key1082.tree, root_0);

            LEFT_PAREN1083 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_xml_attributes_clause14351);
            if  (this->hasException())
            {
                goto rulexml_attributes_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN1083_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1083));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1083_tree);
            }


            // OracleDML.g:1293:13: ( entityescaping_key | noentityescaping_key )?
            {
                ANTLR_UINT32 alt348=3;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA348_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "ENTITYESCAPING")))
                    		    {
                    		        alt348=1;
                    		    }
                    		    else if ( ((toUpper(LT(1)->getText()) == "NOENTITYESCAPING")))
                    		    {
                    		        alt348=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt348)
                {
            	case 1:
            	    // OracleDML.g:1293:14: entityescaping_key
            	    {
            	        this->followPush(FOLLOW_entityescaping_key_in_xml_attributes_clause14366);
            	        entityescaping_key1084=entityescaping_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, entityescaping_key1084.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1293:33: noentityescaping_key
            	    {
            	        this->followPush(FOLLOW_noentityescaping_key_in_xml_attributes_clause14368);
            	        noentityescaping_key1085=noentityescaping_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, noentityescaping_key1085.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:1294:13: ( schemacheck_key | noschemacheck_key )?
            {
                ANTLR_UINT32 alt349=3;
                switch ( this->LA(1) )
                {
                    case REGULAR_ID:
                    	{
                    		{
                    		    ANTLR_UINT32 LA349_1 = this->LA(2);
                    		    if ( ((toUpper(LT(1)->getText()) == "SCHEMACHECK")))
                    		    {
                    		        alt349=1;
                    		    }
                    		    else if ( ((toUpper(LT(1)->getText()) == "NOSCHEMACHECK")))
                    		    {
                    		        alt349=2;
                    		    }
                    		}
                    	}
                        break;
                }

                switch (alt349)
                {
            	case 1:
            	    // OracleDML.g:1294:14: schemacheck_key
            	    {
            	        this->followPush(FOLLOW_schemacheck_key_in_xml_attributes_clause14385);
            	        schemacheck_key1086=schemacheck_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, schemacheck_key1086.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1294:30: noschemacheck_key
            	    {
            	        this->followPush(FOLLOW_noschemacheck_key_in_xml_attributes_clause14387);
            	        noschemacheck_key1087=noschemacheck_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, noschemacheck_key1087.tree);


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14403);
            xml_multiuse_expression_element1088=xml_multiuse_expression_element();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_attributes_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_multiuse_expression_element1088.tree);


            // OracleDML.g:1295:45: ( COMMA ! xml_multiuse_expression_element )*

            for (;;)
            {
                ANTLR_UINT32 alt350=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt350=1;
                	}
                    break;

                }

                switch (alt350)
                {
            	case 1:
            	    // OracleDML.g:1295:46: COMMA ! xml_multiuse_expression_element
            	    {
            	        COMMA1089 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_xml_attributes_clause14406);
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause14409);
            	        xml_multiuse_expression_element1090=xml_multiuse_expression_element();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_attributes_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_multiuse_expression_element1090.tree);


            	    }
            	    break;

            	default:
            	    goto loop350;	/* break out of the loop */
            	    break;
                }
            }
            loop350: ; /* Jump out to here if this rule does not match */


            RIGHT_PAREN1091 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14421);
            if  (this->hasException())
            {
                goto rulexml_attributes_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN1091_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1091));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1091_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_attributes_clauseEx; /* Prevent compiler warnings */
    rulexml_attributes_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_attributes_clause */

/**
 * $ANTLR start xml_namespaces_clause
 * OracleDML.g:1299:1: xml_namespaces_clause : xmlnamespaces_key ^ LEFT_PAREN ( concatenation_wrapper column_alias )? ( COMMA ! concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN ;
 */
OracleDML::xml_namespaces_clause_return
OracleDML::xml_namespaces_clause()
{
    OracleDML::xml_namespaces_clause_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* LEFT_PAREN1093 = NULL;
    ImplTraits::CommonTokenType const* COMMA1096 = NULL;
    ImplTraits::CommonTokenType const* RIGHT_PAREN1100 = NULL;
    OracleDML_OracleDMLKeys::xmlnamespaces_key_return xmlnamespaces_key1092;
    ImplTraits::TreeTypePtr::pointer xmlnamespaces_key1092_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1094;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1094_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1095;
    ImplTraits::TreeTypePtr::pointer column_alias1095_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1097;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1097_last = NULL;
    OracleDML_OracleDMLCommons::column_alias_return column_alias1098;
    ImplTraits::TreeTypePtr::pointer column_alias1098_last = NULL;
    OracleDML::xml_general_default_part_return xml_general_default_part1099;
    ImplTraits::TreeTypePtr::pointer xml_general_default_part1099_last = NULL;
    ImplTraits::TreeTypePtr LEFT_PAREN1093_tree;
    ImplTraits::TreeTypePtr COMMA1096_tree;
    ImplTraits::TreeTypePtr RIGHT_PAREN1100_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1300:5: ( xmlnamespaces_key ^ LEFT_PAREN ( concatenation_wrapper column_alias )? ( COMMA ! concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN )
        // OracleDML.g:1300:10: xmlnamespaces_key ^ LEFT_PAREN ( concatenation_wrapper column_alias )? ( COMMA ! concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14441);
            xmlnamespaces_key1092=xmlnamespaces_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_namespaces_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(xmlnamespaces_key1092.tree, root_0);

            LEFT_PAREN1093 =  this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14452);
            if  (this->hasException())
            {
                goto rulexml_namespaces_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            LEFT_PAREN1093_tree = std::move(get_psrstate()->get_treeAdaptor()->create(LEFT_PAREN1093));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, LEFT_PAREN1093_tree);
            }


            // OracleDML.g:1302:13: ( concatenation_wrapper column_alias )?
            {
                ANTLR_UINT32 alt351=2;
                switch ( this->LA(1) )
                {
                    case APPROXIMATE_NUM_LIT:
                    case BINDVAR:
                    case CHAR_STRING:
                    case CHAR_STRING_PERL:
                    case COLON:
                    case DELIMITED_ID:
                    case EXACT_NUM_LIT:
                    case INTRODUCER:
                    case LEFT_PAREN:
                    case MINUS_SIGN:
                    case NATIONAL_CHAR_STRING_LIT:
                    case PLSQL_NON_RESERVED_CAST:
                    case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                    case PLUS_SIGN:
                    case REGULAR_ID:
                    case SQL92_RESERVED_ALL:
                    case SQL92_RESERVED_ANY:
                    case SQL92_RESERVED_CASE:
                    case SQL92_RESERVED_DATE:
                    case SQL92_RESERVED_DISTINCT:
                    case SQL92_RESERVED_EXISTS:
                    case SQL92_RESERVED_FALSE:
                    case SQL92_RESERVED_NULL:
                    case SQL92_RESERVED_PRIOR:
                    case SQL92_RESERVED_TRUE:
                    case UNSIGNED_INTEGER:
                    	{
                    		alt351=1;
                    	}
                        break;
                    case SQL92_RESERVED_DEFAULT:
                    	{
                    		alt351=1;
                    	}
                        break;
                }

                switch (alt351)
                {
            	case 1:
            	    // OracleDML.g:1302:14: concatenation_wrapper column_alias
            	    {
            	        this->followPush(FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14467);
            	        concatenation_wrapper1094=concatenation_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1094.tree);


            	        this->followPush(FOLLOW_column_alias_in_xml_namespaces_clause14469);
            	        column_alias1095=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias1095.tree);


            	    }
            	    break;

                }
            }

            // OracleDML.g:1303:17: ( COMMA ! concatenation_wrapper column_alias )*

            for (;;)
            {
                ANTLR_UINT32 alt352=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt352=1;
                	}
                    break;

                }

                switch (alt352)
                {
            	case 1:
            	    // OracleDML.g:1303:18: COMMA ! concatenation_wrapper column_alias
            	    {
            	        COMMA1096 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_xml_namespaces_clause14490);
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14493);
            	        concatenation_wrapper1097=concatenation_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1097.tree);


            	        this->followPush(FOLLOW_column_alias_in_xml_namespaces_clause14495);
            	        column_alias1098=column_alias();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, column_alias1098.tree);


            	    }
            	    break;

            	default:
            	    goto loop352;	/* break out of the loop */
            	    break;
                }
            }
            loop352: ; /* Jump out to here if this rule does not match */


            // OracleDML.g:1304:13: ( ( default_key )=> xml_general_default_part )?
            {
                ANTLR_UINT32 alt353=2;
                {
                    ANTLR_UINT32 LA353_0 = this->LA(1);
                    if ( (LA353_0 == SQL92_RESERVED_DEFAULT) && (this->msynpred( antlr3::ClassForwarder<synpred50_OracleDML>() )))
                    {
                        alt353=1;
                    }
                }
                switch (alt353)
                {
            	case 1:
            	    // OracleDML.g:1304:14: ( default_key )=> xml_general_default_part
            	    {
            	        this->followPush(FOLLOW_xml_general_default_part_in_xml_namespaces_clause14517);
            	        xml_general_default_part1099=xml_general_default_part();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_namespaces_clauseEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, xml_general_default_part1099.tree);


            	    }
            	    break;

                }
            }

            RIGHT_PAREN1100 =  this->matchToken(RIGHT_PAREN, &FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause14529);
            if  (this->hasException())
            {
                goto rulexml_namespaces_clauseEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) {
            RIGHT_PAREN1100_tree = std::move(get_psrstate()->get_treeAdaptor()->create(RIGHT_PAREN1100));
            get_psrstate()->get_treeAdaptor()->addChild(root_0, RIGHT_PAREN1100_tree);
            }


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_namespaces_clauseEx; /* Prevent compiler warnings */
    rulexml_namespaces_clauseEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_namespaces_clause */

/**
 * $ANTLR start xml_table_column
 * OracleDML.g:1308:1: xml_table_column : xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? ) -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? ) ;
 */
OracleDML::xml_table_column_return
OracleDML::xml_table_column()
{
    OracleDML::xml_table_column_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLCommons::xml_column_name_return xml_column_name1101;
    ImplTraits::TreeTypePtr::pointer xml_column_name1101_last = NULL;
    OracleDML_OracleDMLKeys::for_key_return for_key1102;
    ImplTraits::TreeTypePtr::pointer for_key1102_last = NULL;
    OracleDML_OracleDMLKeys::ordinality_key_return ordinality_key1103;
    ImplTraits::TreeTypePtr::pointer ordinality_key1103_last = NULL;
    OracleDML_OracleDMLCommons::type_spec_return type_spec1104;
    ImplTraits::TreeTypePtr::pointer type_spec1104_last = NULL;
    OracleDML_OracleDMLKeys::path_key_return path_key1105;
    ImplTraits::TreeTypePtr::pointer path_key1105_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1106;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1106_last = NULL;
    OracleDML::xml_general_default_part_return xml_general_default_part1107;
    ImplTraits::TreeTypePtr::pointer xml_general_default_part1107_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_type_spec(get_psrstate()->get_treeAdaptor(), "rule type_spec");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation_wrapper(get_psrstate()->get_treeAdaptor(), "rule concatenation_wrapper");
    RewriteRuleSubtreeStream<ImplTraits> stream_xml_column_name(get_psrstate()->get_treeAdaptor(), "rule xml_column_name");
    RewriteRuleSubtreeStream<ImplTraits> stream_path_key(get_psrstate()->get_treeAdaptor(), "rule path_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_ordinality_key(get_psrstate()->get_treeAdaptor(), "rule ordinality_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_xml_general_default_part(get_psrstate()->get_treeAdaptor(), "rule xml_general_default_part");
    RewriteRuleSubtreeStream<ImplTraits> stream_for_key(get_psrstate()->get_treeAdaptor(), "rule for_key");

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1309:5: ( xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? ) -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? ) )
        // OracleDML.g:1309:10: xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? )
        {
            this->followPush(FOLLOW_xml_column_name_in_xml_table_column14549);
            xml_column_name1101=xml_column_name();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_table_columnEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                xml_column_name1101_last = xml_column_name1101.tree.get();
                stream_xml_column_name.add(xml_column_name1101.tree);
            }

            // OracleDML.g:1310:5: ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? )
            {
                ANTLR_UINT32 alt356=2;
                switch ( this->LA(1) )
                {
                case SQL92_RESERVED_FOR:
                	{
                		alt356=1;
                	}
                    break;
                case DELIMITED_ID:
                case REGULAR_ID:
                case SQL92_RESERVED_DATE:
                	{
                		alt356=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 356 );
                    ex->set_state( 0 );


                    goto rulexml_table_columnEx;

                }

                switch (alt356)
                {
            	case 1:
            	    // OracleDML.g:1310:10: for_key ordinality_key
            	    {
            	        this->followPush(FOLLOW_for_key_in_xml_table_column14560);
            	        for_key1102=for_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_table_columnEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            for_key1102_last = for_key1102.tree.get();
            	            stream_for_key.add(for_key1102.tree);
            	        }

            	        this->followPush(FOLLOW_ordinality_key_in_xml_table_column14562);
            	        ordinality_key1103=ordinality_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_table_columnEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            ordinality_key1103_last = ordinality_key1103.tree.get();
            	            stream_ordinality_key.add(ordinality_key1103.tree);
            	        }

            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1311:10: type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )?
            	    {
            	        this->followPush(FOLLOW_type_spec_in_xml_table_column14573);
            	        type_spec1104=type_spec();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_table_columnEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            type_spec1104_last = type_spec1104.tree.get();
            	            stream_type_spec.add(type_spec1104.tree);
            	        }

            	        // OracleDML.g:1311:20: ( path_key concatenation_wrapper )?
            	        {
            	            ANTLR_UINT32 alt354=2;
            	            {
            	                ANTLR_UINT32 LA354_0 = this->LA(1);
            	                if ( (LA354_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "PATH")))
            	                {
            	                    alt354=1;
            	                }
            	            }
            	            switch (alt354)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1311:21: path_key concatenation_wrapper
            	        	    {
            	        	        this->followPush(FOLLOW_path_key_in_xml_table_column14576);
            	        	        path_key1105=path_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_table_columnEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            path_key1105_last = path_key1105.tree.get();
            	        	            stream_path_key.add(path_key1105.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_concatenation_wrapper_in_xml_table_column14578);
            	        	        concatenation_wrapper1106=concatenation_wrapper();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_table_columnEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            concatenation_wrapper1106_last = concatenation_wrapper1106.tree.get();
            	        	            stream_concatenation_wrapper.add(concatenation_wrapper1106.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	        // OracleDML.g:1311:54: ( ( default_key )=> xml_general_default_part )?
            	        {
            	            ANTLR_UINT32 alt355=2;
            	            {
            	                ANTLR_UINT32 LA355_0 = this->LA(1);
            	                if ( (LA355_0 == SQL92_RESERVED_DEFAULT) && (this->msynpred( antlr3::ClassForwarder<synpred51_OracleDML>() )))
            	                {
            	                    alt355=1;
            	                }
            	            }
            	            switch (alt355)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1311:55: ( default_key )=> xml_general_default_part
            	        	    {
            	        	        this->followPush(FOLLOW_xml_general_default_part_in_xml_table_column14588);
            	        	        xml_general_default_part1107=xml_general_default_part();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_table_columnEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            xml_general_default_part1107_last = xml_general_default_part1107.tree.get();
            	        	            stream_xml_general_default_part.add(xml_general_default_part1107.tree);
            	        	        }

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: concatenation_wrapper, ordinality_key, xml_general_default_part, xml_column_name, type_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1313:9: -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? )
            {
            	// OracleDML.g:1313:12: ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_COLUMN, "XML_COLUMN"), root_1);
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_xml_column_name.nextTree());
            	// OracleDML.g:1313:41: ( ordinality_key )?
            	if ( stream_ordinality_key.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_ordinality_key.nextTree());
            	}
            	stream_ordinality_key.reset();

            	// OracleDML.g:1313:57: ( type_spec )?
            	if ( stream_type_spec.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_type_spec.nextTree());
            	}
            	stream_type_spec.reset();

            	// OracleDML.g:1313:68: ( concatenation_wrapper )?
            	if ( stream_concatenation_wrapper.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_concatenation_wrapper.nextTree());
            	}
            	stream_concatenation_wrapper.reset();

            	// OracleDML.g:1313:91: ( xml_general_default_part )?
            	if ( stream_xml_general_default_part.hasNext() ) {
            		get_psrstate()->get_treeAdaptor()->addChild(root_1, stream_xml_general_default_part.nextTree());
            	}
            	stream_xml_general_default_part.reset();

            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_table_columnEx; /* Prevent compiler warnings */
    rulexml_table_columnEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_table_column */

/**
 * $ANTLR start xml_general_default_part
 * OracleDML.g:1316:1: xml_general_default_part : default_key ^ concatenation_wrapper ;
 */
OracleDML::xml_general_default_part_return
OracleDML::xml_general_default_part()
{
    OracleDML::xml_general_default_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::default_key_return default_key1108;
    ImplTraits::TreeTypePtr::pointer default_key1108_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1109;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1109_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1317:5: ( default_key ^ concatenation_wrapper )
        // OracleDML.g:1317:10: default_key ^ concatenation_wrapper
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_default_key_in_xml_general_default_part14644);
            default_key1108=default_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_general_default_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(default_key1108.tree, root_0);

            this->followPush(FOLLOW_concatenation_wrapper_in_xml_general_default_part14647);
            concatenation_wrapper1109=concatenation_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_general_default_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1109.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_general_default_partEx; /* Prevent compiler warnings */
    rulexml_general_default_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_general_default_part */

/**
 * $ANTLR start xml_multiuse_expression_element
 * OracleDML.g:1320:1: xml_multiuse_expression_element : expression ( as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation ) )? -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) ) -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) ) -> ^( XML_ELEMENT ^( EXPR expression ) ) ;
 */
OracleDML::xml_multiuse_expression_element_return
OracleDML::xml_multiuse_expression_element()
{
    OracleDML::xml_multiuse_expression_element_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML::expression_return expression1110;
    ImplTraits::TreeTypePtr::pointer expression1110_last = NULL;
    OracleDML_OracleDMLKeys::as_key_return as_key1111;
    ImplTraits::TreeTypePtr::pointer as_key1111_last = NULL;
    OracleDML_OracleDMLCommons::id_expression_return id_expression1112;
    ImplTraits::TreeTypePtr::pointer id_expression1112_last = NULL;
    OracleDML_OracleDMLKeys::evalname_key_return evalname_key1113;
    ImplTraits::TreeTypePtr::pointer evalname_key1113_last = NULL;
    OracleDML::concatenation_return concatenation1114;
    ImplTraits::TreeTypePtr::pointer concatenation1114_last = NULL;
    RewriteRuleSubtreeStream<ImplTraits> stream_expression(get_psrstate()->get_treeAdaptor(), "rule expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_evalname_key(get_psrstate()->get_treeAdaptor(), "rule evalname_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_id_expression(get_psrstate()->get_treeAdaptor(), "rule id_expression");
    RewriteRuleSubtreeStream<ImplTraits> stream_as_key(get_psrstate()->get_treeAdaptor(), "rule as_key");
    RewriteRuleSubtreeStream<ImplTraits> stream_concatenation(get_psrstate()->get_treeAdaptor(), "rule concatenation");

    /* Initialize rule variables
     */

        int mode = 0;    
    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1322:5: ( expression ( as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation ) )? -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) ) -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) ) -> ^( XML_ELEMENT ^( EXPR expression ) ) )
        // OracleDML.g:1322:10: expression ( as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation ) )?
        {
            this->followPush(FOLLOW_expression_in_xml_multiuse_expression_element14675);
            expression1110=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexml_multiuse_expression_elementEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) 
            {
                expression1110_last = expression1110.tree.get();
                stream_expression.add(expression1110.tree);
            }

            // OracleDML.g:1322:21: ( as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation ) )?
            {
                ANTLR_UINT32 alt358=2;
                switch ( this->LA(1) )
                {
                    case SQL92_RESERVED_AS:
                    	{
                    		alt358=1;
                    	}
                        break;
                }

                switch (alt358)
                {
            	case 1:
            	    // OracleDML.g:1322:22: as_key ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation )
            	    {
            	        this->followPush(FOLLOW_as_key_in_xml_multiuse_expression_element14678);
            	        as_key1111=as_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexml_multiuse_expression_elementEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) 
            	        {
            	            as_key1111_last = as_key1111.tree.get();
            	            stream_as_key.add(as_key1111.tree);
            	        }

            	        // OracleDML.g:1322:29: ( id_expression[T_UNKNOWN,T_USE] | evalname_key concatenation )
            	        {
            	            ANTLR_UINT32 alt357=2;
            	            switch ( this->LA(1) )
            	            {
            	            case REGULAR_ID:
            	            	{
            	            		{
            	            		    ANTLR_UINT32 LA357_1 = this->LA(2);
            	            		    if ( (LA357_1 == COMMA || LA357_1 == RIGHT_PAREN))
            	            		    {
            	            		        alt357=1;
            	            		    }
            	            		    else if ( (LA357_1 == APPROXIMATE_NUM_LIT || LA357_1 == BINDVAR || ((LA357_1 >= CHAR_STRING) && (LA357_1 <= CHAR_STRING_PERL)) || LA357_1 == COLON || LA357_1 == DELIMITED_ID || LA357_1 == EXACT_NUM_LIT || LA357_1 == INTRODUCER || LA357_1 == LEFT_PAREN || LA357_1 == MINUS_SIGN || LA357_1 == NATIONAL_CHAR_STRING_LIT || ((LA357_1 >= PLSQL_NON_RESERVED_CAST) && (LA357_1 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)) || LA357_1 == PLUS_SIGN || LA357_1 == REGULAR_ID || LA357_1 == SQL92_RESERVED_ALL || LA357_1 == SQL92_RESERVED_ANY || LA357_1 == SQL92_RESERVED_CASE || LA357_1 == SQL92_RESERVED_DATE || LA357_1 == SQL92_RESERVED_DEFAULT || LA357_1 == SQL92_RESERVED_DISTINCT || ((LA357_1 >= SQL92_RESERVED_EXISTS) && (LA357_1 <= SQL92_RESERVED_FALSE)) || LA357_1 == SQL92_RESERVED_NULL || LA357_1 == SQL92_RESERVED_PRIOR || LA357_1 == SQL92_RESERVED_TRUE || LA357_1 == UNSIGNED_INTEGER) && ((toUpper(LT(1)->getText()) == "EVALNAME")))
            	            		    {
            	            		        alt357=2;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return retval;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 357 );
            	            		        ex->set_state( 1 );


            	            		        goto rulexml_multiuse_expression_elementEx;

            	            		    }
            	            		}
            	            	}
            	                break;
            	            case DELIMITED_ID:
            	            	{
            	            		alt357=1;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return retval;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 357 );
            	                ex->set_state( 0 );


            	                goto rulexml_multiuse_expression_elementEx;

            	            }

            	            switch (alt357)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1322:30: id_expression[T_UNKNOWN,T_USE]
            	        	    {
            	        	        this->followPush(FOLLOW_id_expression_in_xml_multiuse_expression_element14681);
            	        	        id_expression1112=id_expression(T_UNKNOWN, T_USE);

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_multiuse_expression_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            id_expression1112_last = id_expression1112.tree.get();
            	        	            stream_id_expression.add(id_expression1112.tree);
            	        	        }

            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            mode = 1;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // OracleDML.g:1322:73: evalname_key concatenation
            	        	    {
            	        	        this->followPush(FOLLOW_evalname_key_in_xml_multiuse_expression_element14686);
            	        	        evalname_key1113=evalname_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_multiuse_expression_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            evalname_key1113_last = evalname_key1113.tree.get();
            	        	            stream_evalname_key.add(evalname_key1113.tree);
            	        	        }

            	        	        this->followPush(FOLLOW_concatenation_in_xml_multiuse_expression_element14688);
            	        	        concatenation1114=concatenation();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexml_multiuse_expression_elementEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) 
            	        	        {
            	        	            concatenation1114_last = concatenation1114.tree.get();
            	        	            stream_concatenation.add(concatenation1114.tree);
            	        	        }

            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            mode = 2;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

            // AST REWRITE
            // elements: expression, concatenation, expression, expression, evalname_key, id_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( this->get_backtracking()==0 ) {
            retval.tree = std::move(root_0);
            RewriteRuleSubtreeStream<ImplTraits> stream_retval(get_psrstate()->get_treeAdaptor(), "rule retval",retval.tree); // retval

            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());
            // 1323:9: -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) )
            if (mode == 1) {
            	// OracleDML.g:1323:25: ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ELEMENT, "XML_ELEMENT"), root_1);
            	// OracleDML.g:1323:39: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:1323:58: ^( XML_ALIAS[$as_key.start] id_expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ALIAS, (as_key1111.start)), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_id_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1324:9: -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) )
            if (mode == 2) {
            	// OracleDML.g:1324:25: ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ELEMENT, "XML_ELEMENT"), root_1);
            	// OracleDML.g:1324:39: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	// OracleDML.g:1324:58: ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ALIAS, (as_key1111.start)), root_2);
            	// OracleDML.g:1324:85: ^( evalname_key ^( EXPR concatenation ) )
            	{
            	ImplTraits::TreeTypePtr root_3 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_3 = get_psrstate()->get_treeAdaptor()->becomeRoot(stream_evalname_key.nextNode(), root_3);
            	// OracleDML.g:1324:100: ^( EXPR concatenation )
            	{
            	ImplTraits::TreeTypePtr root_4 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_4 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_4);
            	get_psrstate()->get_treeAdaptor()->addChild(root_4, stream_concatenation.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_3, root_4);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, root_3);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }

            else // 1325:9: -> ^( XML_ELEMENT ^( EXPR expression ) )
            {
            	// OracleDML.g:1325:12: ^( XML_ELEMENT ^( EXPR expression ) )
            	{
            	ImplTraits::TreeTypePtr root_1 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_1 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(XML_ELEMENT, "XML_ELEMENT"), root_1);
            	// OracleDML.g:1325:26: ^( EXPR expression )
            	{
            	ImplTraits::TreeTypePtr root_2 = get_psrstate()->get_treeAdaptor()->nilNode();
            	root_2 = get_psrstate()->get_treeAdaptor()->becomeRoot(get_psrstate()->get_treeAdaptor()->create(EXPR, "EXPR"), root_2);
            	get_psrstate()->get_treeAdaptor()->addChild(root_2, stream_expression.nextTree());
            	get_psrstate()->get_treeAdaptor()->addChild(root_1, root_2);
            	}
            	get_psrstate()->get_treeAdaptor()->addChild(root_0, root_1);
            	}
            }


            //retval.tree = std::move(root_0);
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexml_multiuse_expression_elementEx; /* Prevent compiler warnings */
    rulexml_multiuse_expression_elementEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xml_multiuse_expression_element */

/**
 * $ANTLR start xmlroot_param_version_part
 * OracleDML.g:1328:1: xmlroot_param_version_part : version_key ^ ( no_key value_key | expression_wrapper ) ;
 */
OracleDML::xmlroot_param_version_part_return
OracleDML::xmlroot_param_version_part()
{
    OracleDML::xmlroot_param_version_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::version_key_return version_key1115;
    ImplTraits::TreeTypePtr::pointer version_key1115_last = NULL;
    OracleDML_OracleDMLKeys::no_key_return no_key1116;
    ImplTraits::TreeTypePtr::pointer no_key1116_last = NULL;
    OracleDML_OracleDMLKeys::value_key_return value_key1117;
    ImplTraits::TreeTypePtr::pointer value_key1117_last = NULL;
    OracleDML::expression_wrapper_return expression_wrapper1118;
    ImplTraits::TreeTypePtr::pointer expression_wrapper1118_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1329:5: ( version_key ^ ( no_key value_key | expression_wrapper ) )
        // OracleDML.g:1329:10: version_key ^ ( no_key value_key | expression_wrapper )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_version_key_in_xmlroot_param_version_part14799);
            version_key1115=version_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlroot_param_version_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(version_key1115.tree, root_0);

            // OracleDML.g:1329:23: ( no_key value_key | expression_wrapper )
            {
                ANTLR_UINT32 alt359=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    ANTLR_UINT32 LA359_1 = this->LA(2);
                		    if ( (LA359_1 == REGULAR_ID))
                		    {
                		        {
                		            ANTLR_UINT32 LA359_3 = this->LA(3);
                		            if ( ((toUpper(LT(1)->getText()) == "NO")))
                		            {
                		                alt359=1;
                		            }
                		            else if ( (true))
                		            {
                		                alt359=2;
                		            }
                		            else
                		            {
                		                if (this->get_backtracking()>0)
                		                {
                		                    this->set_failedflag( true );
                		                    return retval;
                		                }


                		                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		                ex->set_decisionNum( 359 );
                		                ex->set_state( 3 );


                		                goto rulexmlroot_param_version_partEx;

                		            }
                		        }
                		    }
                		    else if ( (LA359_1 == MINUS_SIGN || LA359_1 == PLUS_SIGN))
                		    {
                		        alt359=2;
                		    }
                		    else if ( (LA359_1 == PLSQL_NON_RESERVED_CONNECT_BY_ROOT || LA359_1 == SQL92_RESERVED_ALL || LA359_1 == SQL92_RESERVED_DISTINCT || LA359_1 == SQL92_RESERVED_PRIOR) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
                		    {
                		        alt359=2;
                		    }
                		    else if ( (LA359_1 == DELIMITED_ID) && ((((toUpper(LT(1)->getText()) == "INTERVAL"))||(( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))))
                		    {
                		        alt359=2;
                		    }
                		    else if ( (LA359_1 == SQL92_RESERVED_CASE))
                		    {
                		        alt359=2;
                		    }
                		    else if ( (LA359_1 == PLSQL_NON_RESERVED_CAST || LA359_1 == SQL92_RESERVED_ANY || LA359_1 == SQL92_RESERVED_EXISTS) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
                		    {
                		        alt359=2;
                		    }
                		    else if ( (LA359_1 == INTRODUCER) && ((((toUpper(LT(1)->getText()) == "INTERVAL"))||(( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))))
                		    {
                		        alt359=2;
                		    }
                		    else if ( (LA359_1 == BINDVAR || LA359_1 == COLON))
                		    {
                		        alt359=2;
                		    }
                		    else if ( (LA359_1 == APPROXIMATE_NUM_LIT || LA359_1 == EXACT_NUM_LIT || LA359_1 == SQL92_RESERVED_DATE || LA359_1 == UNSIGNED_INTEGER) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
                		    {
                		        alt359=2;
                		    }
                		    else if ( (((LA359_1 >= CHAR_STRING) && (LA359_1 <= CHAR_STRING_PERL)) || LA359_1 == NATIONAL_CHAR_STRING_LIT))
                		    {
                		        alt359=2;
                		    }
                		    else if ( (LA359_1 == SQL92_RESERVED_DEFAULT || LA359_1 == SQL92_RESERVED_FALSE || LA359_1 == SQL92_RESERVED_NULL || LA359_1 == SQL92_RESERVED_TRUE) && (( ((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) && ((toUpper(LT(1)->getText()) == "NEW")) )))
                		    {
                		        alt359=2;
                		    }
                		    else if ( (LA359_1 == ASTERISK || LA359_1 == CARRET_OPERATOR_PART || LA359_1 == COMMA || LA359_1 == CONCATENATION_OP || LA359_1 == EQUALS_OP || LA359_1 == EXCLAMATION_OPERATOR_PART || ((LA359_1 >= GREATER_THAN_OP) && (LA359_1 <= GREATER_THAN_OR_EQUALS_OP)) || ((LA359_1 >= LEFT_BRACKET) && (LA359_1 <= LEFT_PAREN)) || ((LA359_1 >= LESS_THAN_OP) && (LA359_1 <= LESS_THAN_OR_EQUALS_OP)) || LA359_1 == NOT_EQUAL_OP || LA359_1 == PERIOD || LA359_1 == PLSQL_NON_RESERVED_MULTISET || LA359_1 == RIGHT_PAREN || LA359_1 == SOLIDUS || LA359_1 == SQL92_RESERVED_AND || LA359_1 == SQL92_RESERVED_BETWEEN || LA359_1 == SQL92_RESERVED_IN || ((LA359_1 >= SQL92_RESERVED_IS) && (LA359_1 <= SQL92_RESERVED_NOT)) || LA359_1 == SQL92_RESERVED_OR || LA359_1 == VERTICAL_BAR))
                		    {
                		        alt359=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return retval;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 359 );
                		        ex->set_state( 1 );


                		        goto rulexmlroot_param_version_partEx;

                		    }
                		}
                	}
                    break;
                case APPROXIMATE_NUM_LIT:
                case BINDVAR:
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case COLON:
                case DELIMITED_ID:
                case EXACT_NUM_LIT:
                case INTRODUCER:
                case LEFT_PAREN:
                case MINUS_SIGN:
                case NATIONAL_CHAR_STRING_LIT:
                case PLSQL_NON_RESERVED_CAST:
                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                case PLUS_SIGN:
                case SQL92_RESERVED_ALL:
                case SQL92_RESERVED_ANY:
                case SQL92_RESERVED_CASE:
                case SQL92_RESERVED_CURSOR:
                case SQL92_RESERVED_DATE:
                case SQL92_RESERVED_DEFAULT:
                case SQL92_RESERVED_DISTINCT:
                case SQL92_RESERVED_EXISTS:
                case SQL92_RESERVED_FALSE:
                case SQL92_RESERVED_NOT:
                case SQL92_RESERVED_NULL:
                case SQL92_RESERVED_PRIOR:
                case SQL92_RESERVED_TRUE:
                case UNSIGNED_INTEGER:
                	{
                		alt359=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 359 );
                    ex->set_state( 0 );


                    goto rulexmlroot_param_version_partEx;

                }

                switch (alt359)
                {
            	case 1:
            	    // OracleDML.g:1329:24: no_key value_key
            	    {
            	        this->followPush(FOLLOW_no_key_in_xmlroot_param_version_part14803);
            	        no_key1116=no_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_version_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, no_key1116.tree);


            	        this->followPush(FOLLOW_value_key_in_xmlroot_param_version_part14805);
            	        value_key1117=value_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_version_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, value_key1117.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1329:41: expression_wrapper
            	    {
            	        this->followPush(FOLLOW_expression_wrapper_in_xmlroot_param_version_part14807);
            	        expression_wrapper1118=expression_wrapper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_version_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, expression_wrapper1118.tree);


            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlroot_param_version_partEx; /* Prevent compiler warnings */
    rulexmlroot_param_version_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlroot_param_version_part */

/**
 * $ANTLR start xmlroot_param_standalone_part
 * OracleDML.g:1332:1: xmlroot_param_standalone_part : standalone_key ^ ( yes_key | no_key ( value_key )? ) ;
 */
OracleDML::xmlroot_param_standalone_part_return
OracleDML::xmlroot_param_standalone_part()
{
    OracleDML::xmlroot_param_standalone_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::standalone_key_return standalone_key1119;
    ImplTraits::TreeTypePtr::pointer standalone_key1119_last = NULL;
    OracleDML_OracleDMLKeys::yes_key_return yes_key1120;
    ImplTraits::TreeTypePtr::pointer yes_key1120_last = NULL;
    OracleDML_OracleDMLKeys::no_key_return no_key1121;
    ImplTraits::TreeTypePtr::pointer no_key1121_last = NULL;
    OracleDML_OracleDMLKeys::value_key_return value_key1122;
    ImplTraits::TreeTypePtr::pointer value_key1122_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1333:5: ( standalone_key ^ ( yes_key | no_key ( value_key )? ) )
        // OracleDML.g:1333:10: standalone_key ^ ( yes_key | no_key ( value_key )? )
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_standalone_key_in_xmlroot_param_standalone_part14828);
            standalone_key1119=standalone_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlroot_param_standalone_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(standalone_key1119.tree, root_0);

            // OracleDML.g:1333:26: ( yes_key | no_key ( value_key )? )
            {
                ANTLR_UINT32 alt361=2;
                {
                    ANTLR_UINT32 LA361_0 = this->LA(1);
                    if ( (LA361_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "NO"))||((toUpper(LT(1)->getText()) == "YES")))))
                    {
                        {
                            ANTLR_UINT32 LA361_1 = this->LA(2);
                            if ( ((toUpper(LT(1)->getText()) == "YES")))
                            {
                                alt361=1;
                            }
                            else if ( ((toUpper(LT(1)->getText()) == "NO")))
                            {
                                alt361=2;
                            }
                            else
                            {
                                if (this->get_backtracking()>0)
                                {
                                    this->set_failedflag( true );
                                    return retval;
                                }


                                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                ex->set_decisionNum( 361 );
                                ex->set_state( 1 );


                                goto rulexmlroot_param_standalone_partEx;

                            }
                        }
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return retval;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 361 );
                        ex->set_state( 0 );


                        goto rulexmlroot_param_standalone_partEx;

                    }
                }
                switch (alt361)
                {
            	case 1:
            	    // OracleDML.g:1333:27: yes_key
            	    {
            	        this->followPush(FOLLOW_yes_key_in_xmlroot_param_standalone_part14832);
            	        yes_key1120=yes_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_standalone_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, yes_key1120.tree);


            	    }
            	    break;
            	case 2:
            	    // OracleDML.g:1333:35: no_key ( value_key )?
            	    {
            	        this->followPush(FOLLOW_no_key_in_xmlroot_param_standalone_part14834);
            	        no_key1121=no_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulexmlroot_param_standalone_partEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }

            	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, no_key1121.tree);


            	        // OracleDML.g:1333:42: ( value_key )?
            	        {
            	            ANTLR_UINT32 alt360=2;
            	            switch ( this->LA(1) )
            	            {
            	                case REGULAR_ID:
            	                	{
            	                		alt360=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt360)
            	            {
            	        	case 1:
            	        	    // OracleDML.g:1333:42: value_key
            	        	    {
            	        	        this->followPush(FOLLOW_value_key_in_xmlroot_param_standalone_part14836);
            	        	        value_key1122=value_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulexmlroot_param_standalone_partEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }

            	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, value_key1122.tree);


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlroot_param_standalone_partEx; /* Prevent compiler warnings */
    rulexmlroot_param_standalone_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlroot_param_standalone_part */

/**
 * $ANTLR start xmlserialize_param_enconding_part
 * OracleDML.g:1336:1: xmlserialize_param_enconding_part : encoding_key ^ concatenation_wrapper ;
 */
OracleDML::xmlserialize_param_enconding_part_return
OracleDML::xmlserialize_param_enconding_part()
{
    OracleDML::xmlserialize_param_enconding_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::encoding_key_return encoding_key1123;
    ImplTraits::TreeTypePtr::pointer encoding_key1123_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1124;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1124_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1337:5: ( encoding_key ^ concatenation_wrapper )
        // OracleDML.g:1337:10: encoding_key ^ concatenation_wrapper
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_encoding_key_in_xmlserialize_param_enconding_part14858);
            encoding_key1123=encoding_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlserialize_param_enconding_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(encoding_key1123.tree, root_0);

            this->followPush(FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part14861);
            concatenation_wrapper1124=concatenation_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlserialize_param_enconding_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1124.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlserialize_param_enconding_partEx; /* Prevent compiler warnings */
    rulexmlserialize_param_enconding_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlserialize_param_enconding_part */

/**
 * $ANTLR start xmlserialize_param_version_part
 * OracleDML.g:1340:1: xmlserialize_param_version_part : version_key ^ concatenation_wrapper ;
 */
OracleDML::xmlserialize_param_version_part_return
OracleDML::xmlserialize_param_version_part()
{
    OracleDML::xmlserialize_param_version_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    OracleDML_OracleDMLKeys::version_key_return version_key1125;
    ImplTraits::TreeTypePtr::pointer version_key1125_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1126;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1126_last = NULL;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        // OracleDML.g:1341:5: ( version_key ^ concatenation_wrapper )
        // OracleDML.g:1341:10: version_key ^ concatenation_wrapper
        {
            root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


            this->followPush(FOLLOW_version_key_in_xmlserialize_param_version_part14881);
            version_key1125=version_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlserialize_param_version_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(version_key1125.tree, root_0);

            this->followPush(FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part14884);
            concatenation_wrapper1126=concatenation_wrapper();

            this->followPop();
            if  (this->hasException())
            {
                goto rulexmlserialize_param_version_partEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }

            if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1126.tree);


        }

    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlserialize_param_version_partEx; /* Prevent compiler warnings */
    rulexmlserialize_param_version_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlserialize_param_version_part */

/**
 * $ANTLR start xmlserialize_param_ident_part
 * OracleDML.g:1344:1: xmlserialize_param_ident_part : ( no_key indent_key | indent_key ^ ( size_key ! EQUALS_OP ! concatenation_wrapper )? );
 */
OracleDML::xmlserialize_param_ident_part_return
OracleDML::xmlserialize_param_ident_part()
{
    OracleDML::xmlserialize_param_ident_part_return retval(this);


    ImplTraits::TreeTypePtr root_0;

    ImplTraits::CommonTokenType const* EQUALS_OP1131 = NULL;
    OracleDML_OracleDMLKeys::no_key_return no_key1127;
    ImplTraits::TreeTypePtr::pointer no_key1127_last = NULL;
    OracleDML_OracleDMLKeys::indent_key_return indent_key1128;
    ImplTraits::TreeTypePtr::pointer indent_key1128_last = NULL;
    OracleDML_OracleDMLKeys::indent_key_return indent_key1129;
    ImplTraits::TreeTypePtr::pointer indent_key1129_last = NULL;
    OracleDML_OracleDMLKeys::size_key_return size_key1130;
    ImplTraits::TreeTypePtr::pointer size_key1130_last = NULL;
    OracleDML::concatenation_wrapper_return concatenation_wrapper1132;
    ImplTraits::TreeTypePtr::pointer concatenation_wrapper1132_last = NULL;
    ImplTraits::TreeTypePtr EQUALS_OP1131_tree;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(this);


 
    {
        {
            //  OracleDML.g:1345:5: ( no_key indent_key | indent_key ^ ( size_key ! EQUALS_OP ! concatenation_wrapper )? )

            ANTLR_UINT32 alt363;

            alt363=2;

            {
                ANTLR_UINT32 LA363_0 = this->LA(1);
                if ( (LA363_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "NO")))))
                {
                    {
                        ANTLR_UINT32 LA363_1 = this->LA(2);
                        if ( (LA363_1 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "NO")))))
                        {
                            {
                                ANTLR_UINT32 LA363_2 = this->LA(3);
                                if ( (LA363_2 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "INDENT"))||((toUpper(LT(1)->getText()) == "NO")))))
                                {
                                    {
                                        ANTLR_UINT32 LA363_4 = this->LA(4);
                                        if ( (LA363_4 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "NO")))
                                        {
                                            alt363=1;
                                        }
                                        else if ( (LA363_4 == RIGHT_PAREN) && ((toUpper(LT(1)->getText()) == "INDENT")))
                                        {
                                            alt363=2;
                                        }
                                        else
                                        {
                                            if (this->get_backtracking()>0)
                                            {
                                                this->set_failedflag( true );
                                                return retval;
                                            }


                                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                            ex->set_decisionNum( 363 );
                                            ex->set_state( 4 );


                                            goto rulexmlserialize_param_ident_partEx;

                                        }
                                    }
                                }
                                else if ( (LA363_2 == RIGHT_PAREN) && ((toUpper(LT(1)->getText()) == "NO")))
                                {
                                    alt363=1;
                                }
                                else
                                {
                                    if (this->get_backtracking()>0)
                                    {
                                        this->set_failedflag( true );
                                        return retval;
                                    }


                                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                                    ex->set_decisionNum( 363 );
                                    ex->set_state( 2 );


                                    goto rulexmlserialize_param_ident_partEx;

                                }
                            }
                        }
                        else if ( (LA363_1 == RIGHT_PAREN || LA363_1 == SQL92_RESERVED_SIZE) && ((toUpper(LT(1)->getText()) == "INDENT")))
                        {
                            alt363=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return retval;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 363 );
                            ex->set_state( 1 );


                            goto rulexmlserialize_param_ident_partEx;

                        }
                    }
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return retval;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 363 );
                    ex->set_state( 0 );


                    goto rulexmlserialize_param_ident_partEx;

                }
            }
            switch (alt363)
            {
        	case 1:
        	    // OracleDML.g:1345:10: no_key indent_key
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_no_key_in_xmlserialize_param_ident_part14904);
        	        no_key1127=no_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulexmlserialize_param_ident_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, no_key1127.tree);


        	        this->followPush(FOLLOW_indent_key_in_xmlserialize_param_ident_part14906);
        	        indent_key1128=indent_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulexmlserialize_param_ident_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, indent_key1128.tree);


        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1346:10: indent_key ^ ( size_key ! EQUALS_OP ! concatenation_wrapper )?
        	    {
        	        root_0 = std::move(get_psrstate()->get_treeAdaptor()->nilNode());


        	        this->followPush(FOLLOW_indent_key_in_xmlserialize_param_ident_part14917);
        	        indent_key1129=indent_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulexmlserialize_param_ident_partEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }

        	        if ( this->get_backtracking()==0 ) root_0 = get_psrstate()->get_treeAdaptor()->becomeRoot(indent_key1129.tree, root_0);

        	        // OracleDML.g:1346:22: ( size_key ! EQUALS_OP ! concatenation_wrapper )?
        	        {
        	            ANTLR_UINT32 alt362=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SQL92_RESERVED_SIZE:
        	                	{
        	                		alt362=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt362)
        	            {
        	        	case 1:
        	        	    // OracleDML.g:1346:23: size_key ! EQUALS_OP ! concatenation_wrapper
        	        	    {
        	        	        this->followPush(FOLLOW_size_key_in_xmlserialize_param_ident_part14921);
        	        	        size_key1130=size_key();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulexmlserialize_param_ident_partEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        EQUALS_OP1131 =  this->matchToken(EQUALS_OP, &FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part14924);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulexmlserialize_param_ident_partEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }


        	        	        this->followPush(FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part14927);
        	        	        concatenation_wrapper1132=concatenation_wrapper();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulexmlserialize_param_ident_partEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return retval;
        	        	        }

        	        	        if ( this->get_backtracking()==0 ) get_psrstate()->get_treeAdaptor()->addChild(root_0, concatenation_wrapper1132.tree);


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }//...
    // This is where rules clean up and exit
    //
    goto rulexmlserialize_param_ident_partEx; /* Prevent compiler warnings */
    rulexmlserialize_param_ident_partEx: ;
    retval.call_stop_placeholder(this);


    if ( this->get_backtracking()==0 ) {
    retval.tree = get_psrstate()->get_treeAdaptor()->rulePostProcessing(root_0);
    get_psrstate()->get_treeAdaptor()->setTokenBoundaries(retval.tree, retval.start, retval.stop);
    }

    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
            //TODO
            //retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(input, retval.start, input.LT(-1));
            retval.tree = get_psrstate()->get_treeAdaptor()->errorNode(NULL, retval.start, LT(-1));
        }
    return retval;
}
/* $ANTLR end xmlserialize_param_ident_part */

// $ANTLR start synpredRule synpred1_OracleDML
void OracleDML::msynpred1_OracleDML_fragment(  )
{
    // OracleDML.g:156:28: ( order_key ( siblings_key )? by_key )
    // OracleDML.g:156:29: order_key ( siblings_key )? by_key
    {
        this->followPush(FOLLOW_order_key_in_synpred1_OracleDML1009);
        order_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred1_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:156:39: ( siblings_key )?
        {
            ANTLR_UINT32 alt364=2;
            {
                ANTLR_UINT32 LA364_0 = this->LA(1);
                if ( (LA364_0 == REGULAR_ID) && ((toUpper(LT(1)->getText()) == "SIBLINGS")))
                {
                    alt364=1;
                }
            }
            switch (alt364)
            {
        	case 1:
        	    // OracleDML.g:156:39: siblings_key
        	    {
        	        this->followPush(FOLLOW_siblings_key_in_synpred1_OracleDML1011);
        	        siblings_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred1_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

        this->followPush(FOLLOW_by_key_in_synpred1_OracleDML1014);
        by_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred1_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred1_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred1_OracleDMLEx: ;
}
// $ANTLR end synpred1_OracleDML

// $ANTLR start synpredRule synpred2_OracleDML
void OracleDML::msynpred2_OracleDML_fragment(  )
{
    {
        //  OracleDML.g:200:10: ( distinct_key | unique_key | all_key )

        ANTLR_UINT32 alt365;

        alt365=3;

        switch ( this->LA(1) )
        {
        case SQL92_RESERVED_DISTINCT:
        	{
        		alt365=1;
        	}
            break;
        case SQL92_RESERVED_UNIQUE:
        	{
        		alt365=2;
        	}
            break;
        case SQL92_RESERVED_ALL:
        	{
        		alt365=3;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 365 );
            ex->set_state( 0 );


            goto rulesynpred2_OracleDMLEx;

        }

        switch (alt365)
        {
    	case 1:
    	    // OracleDML.g:200:11: distinct_key
    	    {
    	        this->followPush(FOLLOW_distinct_key_in_synpred2_OracleDML1499);
    	        distinct_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred2_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;
    	case 2:
    	    // OracleDML.g:200:24: unique_key
    	    {
    	        this->followPush(FOLLOW_unique_key_in_synpred2_OracleDML1501);
    	        unique_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred2_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;
    	case 3:
    	    // OracleDML.g:200:35: all_key
    	    {
    	        this->followPush(FOLLOW_all_key_in_synpred2_OracleDML1503);
    	        all_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred2_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;

        }
    }

goto rulesynpred2_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred2_OracleDMLEx: ;
}
// $ANTLR end synpred2_OracleDML

// $ANTLR start synpredRule synpred3_OracleDML
void OracleDML::msynpred3_OracleDML_fragment(  )
{
    // OracleDML.g:224:10: ( tableview_name PERIOD ASTERISK )
    // OracleDML.g:224:11: tableview_name PERIOD ASTERISK
    {
        this->followPush(FOLLOW_tableview_name_in_synpred3_OracleDML1816);
        tableview_name();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred3_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



         this->matchToken(PERIOD, &FOLLOW_PERIOD_in_synpred3_OracleDML1818);
        if  (this->hasException())
        {
            goto rulesynpred3_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



         this->matchToken(ASTERISK, &FOLLOW_ASTERISK_in_synpred3_OracleDML1820);
        if  (this->hasException())
        {
            goto rulesynpred3_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred3_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred3_OracleDMLEx: ;
}
// $ANTLR end synpred3_OracleDML

// $ANTLR start synpredRule synpred4_OracleDML
void OracleDML::msynpred4_OracleDML_fragment(  )
{
    // OracleDML.g:243:10: ( LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:243:11: LEFT_PAREN ( select_key | with_key )
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred4_OracleDML1977);
        if  (this->hasException())
        {
            goto rulesynpred4_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:243:22: ( select_key | with_key )
        {
            ANTLR_UINT32 alt366=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt366=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt366=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 366 );
                ex->set_state( 0 );


                goto rulesynpred4_OracleDMLEx;

            }

            switch (alt366)
            {
        	case 1:
        	    // OracleDML.g:243:23: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred4_OracleDML1980);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred4_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:243:34: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred4_OracleDML1982);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred4_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred4_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred4_OracleDMLEx: ;
}
// $ANTLR end synpred4_OracleDML

// $ANTLR start synpredRule synpred5_OracleDML
void OracleDML::msynpred5_OracleDML_fragment(  )
{
    // OracleDML.g:244:10: ( LEFT_PAREN )
    // OracleDML.g:244:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred5_OracleDML2007);
        if  (this->hasException())
        {
            goto rulesynpred5_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred5_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred5_OracleDMLEx: ;
}
// $ANTLR end synpred5_OracleDML

// $ANTLR start synpredRule synpred6_OracleDML
void OracleDML::msynpred6_OracleDML_fragment(  )
{
    // OracleDML.g:245:10: ( only_key LEFT_PAREN )
    // OracleDML.g:245:11: only_key LEFT_PAREN
    {
        this->followPush(FOLLOW_only_key_in_synpred6_OracleDML2038);
        only_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred6_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred6_OracleDML2040);
        if  (this->hasException())
        {
            goto rulesynpred6_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred6_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred6_OracleDMLEx: ;
}
// $ANTLR end synpred6_OracleDML

// $ANTLR start synpredRule synpred7_OracleDML
void OracleDML::msynpred7_OracleDML_fragment(  )
{
    // OracleDML.g:284:10: ( LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:284:11: LEFT_PAREN ( select_key | with_key )
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred7_OracleDML2462);
        if  (this->hasException())
        {
            goto rulesynpred7_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:284:22: ( select_key | with_key )
        {
            ANTLR_UINT32 alt367=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt367=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt367=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 367 );
                ex->set_state( 0 );


                goto rulesynpred7_OracleDMLEx;

            }

            switch (alt367)
            {
        	case 1:
        	    // OracleDML.g:284:23: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred7_OracleDML2465);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred7_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:284:34: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred7_OracleDML2467);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred7_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred7_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred7_OracleDMLEx: ;
}
// $ANTLR end synpred7_OracleDML

// $ANTLR start synpredRule synpred8_OracleDML
void OracleDML::msynpred8_OracleDML_fragment(  )
{
    // OracleDML.g:285:10: ( LEFT_PAREN )
    // OracleDML.g:285:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred8_OracleDML2489);
        if  (this->hasException())
        {
            goto rulesynpred8_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred8_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred8_OracleDMLEx: ;
}
// $ANTLR end synpred8_OracleDML

// $ANTLR start synpredRule synpred9_OracleDML
void OracleDML::msynpred9_OracleDML_fragment(  )
{
    // OracleDML.g:323:18: ( select_key )
    // OracleDML.g:323:19: select_key
    {
        this->followPush(FOLLOW_select_key_in_synpred9_OracleDML2960);
        select_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred9_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred9_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred9_OracleDMLEx: ;
}
// $ANTLR end synpred9_OracleDML

// $ANTLR start synpredRule synpred10_OracleDML
void OracleDML::msynpred10_OracleDML_fragment(  )
{
    // OracleDML.g:324:18: ( any_key )
    // OracleDML.g:324:19: any_key
    {
        this->followPush(FOLLOW_any_key_in_synpred10_OracleDML2986);
        any_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred10_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred10_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred10_OracleDMLEx: ;
}
// $ANTLR end synpred10_OracleDML

// $ANTLR start synpredRule synpred11_OracleDML
void OracleDML::msynpred11_OracleDML_fragment(  )
{
    // OracleDML.g:340:10: ( LEFT_PAREN )
    // OracleDML.g:340:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred11_OracleDML3191);
        if  (this->hasException())
        {
            goto rulesynpred11_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred11_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred11_OracleDMLEx: ;
}
// $ANTLR end synpred11_OracleDML

// $ANTLR start synpredRule synpred12_OracleDML
void OracleDML::msynpred12_OracleDML_fragment(  )
{
    // OracleDML.g:370:14: ( LEFT_PAREN )
    // OracleDML.g:370:15: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred12_OracleDML3564);
        if  (this->hasException())
        {
            goto rulesynpred12_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred12_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred12_OracleDMLEx: ;
}
// $ANTLR end synpred12_OracleDML

// $ANTLR start synpredRule synpred13_OracleDML
void OracleDML::msynpred13_OracleDML_fragment(  )
{
    // OracleDML.g:389:9: ( group_key )
    // OracleDML.g:389:10: group_key
    {
        this->followPush(FOLLOW_group_key_in_synpred13_OracleDML3795);
        group_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred13_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred13_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred13_OracleDMLEx: ;
}
// $ANTLR end synpred13_OracleDML

// $ANTLR start synpredRule synpred14_OracleDML
void OracleDML::msynpred14_OracleDML_fragment(  )
{
    // OracleDML.g:391:25: ( COMMA group_by_elements )
    // OracleDML.g:391:26: COMMA group_by_elements
    {
         this->matchToken(COMMA, &FOLLOW_COMMA_in_synpred14_OracleDML3821);
        if  (this->hasException())
        {
            goto rulesynpred14_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_group_by_elements_in_synpred14_OracleDML3823);
        group_by_elements();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred14_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred14_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred14_OracleDMLEx: ;
}
// $ANTLR end synpred14_OracleDML

// $ANTLR start synpredRule synpred15_OracleDML
void OracleDML::msynpred15_OracleDML_fragment(  )
{
    // OracleDML.g:395:9: ( having_key )
    // OracleDML.g:395:10: having_key
    {
        this->followPush(FOLLOW_having_key_in_synpred15_OracleDML3875);
        having_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred15_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred15_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred15_OracleDMLEx: ;
}
// $ANTLR end synpred15_OracleDML

// $ANTLR start synpredRule synpred16_OracleDML
void OracleDML::msynpred16_OracleDML_fragment(  )
{
    // OracleDML.g:398:25: ( COMMA group_by_elements )
    // OracleDML.g:398:26: COMMA group_by_elements
    {
         this->matchToken(COMMA, &FOLLOW_COMMA_in_synpred16_OracleDML3906);
        if  (this->hasException())
        {
            goto rulesynpred16_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_group_by_elements_in_synpred16_OracleDML3908);
        group_by_elements();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred16_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred16_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred16_OracleDMLEx: ;
}
// $ANTLR end synpred16_OracleDML

// $ANTLR start synpredRule synpred17_OracleDML
void OracleDML::msynpred17_OracleDML_fragment(  )
{
    {
        //  OracleDML.g:421:10: ( rollup_key | cube_key )

        ANTLR_UINT32 alt368;

        alt368=2;

        {
            ANTLR_UINT32 LA368_0 = this->LA(1);
            if ( (LA368_0 == REGULAR_ID) && ((((toUpper(LT(1)->getText()) == "ROLLUP"))||((toUpper(LT(1)->getText()) == "CUBE")))))
            {
                {
                    ANTLR_UINT32 LA368_1 = this->LA(2);
                    if ( ((toUpper(LT(1)->getText()) == "ROLLUP")))
                    {
                        alt368=1;
                    }
                    else if ( ((toUpper(LT(1)->getText()) == "CUBE")))
                    {
                        alt368=2;
                    }
                    else
                    {
                        if (this->get_backtracking()>0)
                        {
                            this->set_failedflag( true );
                            return ;
                        }


                        ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 368 );
                        ex->set_state( 1 );


                        goto rulesynpred17_OracleDMLEx;

                    }
                }
            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }


                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 368 );
                ex->set_state( 0 );


                goto rulesynpred17_OracleDMLEx;

            }
        }
        switch (alt368)
        {
    	case 1:
    	    // OracleDML.g:421:11: rollup_key
    	    {
    	        this->followPush(FOLLOW_rollup_key_in_synpred17_OracleDML4127);
    	        rollup_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred17_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;
    	case 2:
    	    // OracleDML.g:421:22: cube_key
    	    {
    	        this->followPush(FOLLOW_cube_key_in_synpred17_OracleDML4129);
    	        cube_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred17_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;

        }
    }

goto rulesynpred17_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred17_OracleDMLEx: ;
}
// $ANTLR end synpred17_OracleDML

// $ANTLR start synpredRule synpred18_OracleDML
void OracleDML::msynpred18_OracleDML_fragment(  )
{
    // OracleDML.g:422:10: ( LEFT_PAREN )
    // OracleDML.g:422:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred18_OracleDML4145);
        if  (this->hasException())
        {
            goto rulesynpred18_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred18_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred18_OracleDMLEx: ;
}
// $ANTLR end synpred18_OracleDML

// $ANTLR start synpredRule synpred19_OracleDML
void OracleDML::msynpred19_OracleDML_fragment(  )
{
    // OracleDML.g:487:34: ( all_key )
    // OracleDML.g:487:35: all_key
    {
        this->followPush(FOLLOW_all_key_in_synpred19_OracleDML4812);
        all_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred19_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred19_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred19_OracleDMLEx: ;
}
// $ANTLR end synpred19_OracleDML

// $ANTLR start synpredRule synpred20_OracleDML
void OracleDML::msynpred20_OracleDML_fragment(  )
{
    // OracleDML.g:627:13: ( when_key matched_key )
    // OracleDML.g:627:14: when_key matched_key
    {
        this->followPush(FOLLOW_when_key_in_synpred20_OracleDML6179);
        when_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred20_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_matched_key_in_synpred20_OracleDML6181);
        matched_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred20_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred20_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred20_OracleDMLEx: ;
}
// $ANTLR end synpred20_OracleDML

// $ANTLR start synpredRule synpred21_OracleDML
void OracleDML::msynpred21_OracleDML_fragment(  )
{
    // OracleDML.g:629:13: ( when_key not_key matched_key )
    // OracleDML.g:629:14: when_key not_key matched_key
    {
        this->followPush(FOLLOW_when_key_in_synpred21_OracleDML6211);
        when_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred21_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_not_key_in_synpred21_OracleDML6213);
        not_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred21_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_matched_key_in_synpred21_OracleDML6215);
        matched_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred21_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred21_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred21_OracleDMLEx: ;
}
// $ANTLR end synpred21_OracleDML

// $ANTLR start synpredRule synpred22_OracleDML
void OracleDML::msynpred22_OracleDML_fragment(  )
{
    // OracleDML.g:722:10: ( LEFT_PAREN )
    // OracleDML.g:722:11: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred22_OracleDML7117);
        if  (this->hasException())
        {
            goto rulesynpred22_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred22_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred22_OracleDMLEx: ;
}
// $ANTLR end synpred22_OracleDML

// $ANTLR start synpredRule synpred23_OracleDML
void OracleDML::msynpred23_OracleDML_fragment(  )
{
    // OracleDML.g:732:34: ( unlimited_key )
    // OracleDML.g:732:35: unlimited_key
    {
        this->followPush(FOLLOW_unlimited_key_in_synpred23_OracleDML7208);
        unlimited_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred23_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred23_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred23_OracleDMLEx: ;
}
// $ANTLR end synpred23_OracleDML

// $ANTLR start synpredRule synpred24_OracleDML
void OracleDML::msynpred24_OracleDML_fragment(  )
{
    // OracleDML.g:744:12: ( LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:744:13: LEFT_PAREN ( select_key | with_key )
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred24_OracleDML7366);
        if  (this->hasException())
        {
            goto rulesynpred24_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:744:24: ( select_key | with_key )
        {
            ANTLR_UINT32 alt369=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt369=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt369=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 369 );
                ex->set_state( 0 );


                goto rulesynpred24_OracleDMLEx;

            }

            switch (alt369)
            {
        	case 1:
        	    // OracleDML.g:744:25: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred24_OracleDML7369);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred24_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:744:38: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred24_OracleDML7373);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred24_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred24_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred24_OracleDMLEx: ;
}
// $ANTLR end synpred24_OracleDML

// $ANTLR start synpredRule synpred25_OracleDML
void OracleDML::msynpred25_OracleDML_fragment(  )
{
    // OracleDML.g:792:10: ( cursor_key LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:792:11: cursor_key LEFT_PAREN ( select_key | with_key )
    {
        this->followPush(FOLLOW_cursor_key_in_synpred25_OracleDML7816);
        cursor_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred25_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred25_OracleDML7818);
        if  (this->hasException())
        {
            goto rulesynpred25_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:792:33: ( select_key | with_key )
        {
            ANTLR_UINT32 alt370=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt370=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt370=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 370 );
                ex->set_state( 0 );


                goto rulesynpred25_OracleDMLEx;

            }

            switch (alt370)
            {
        	case 1:
        	    // OracleDML.g:792:34: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred25_OracleDML7821);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred25_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:792:45: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred25_OracleDML7823);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred25_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred25_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred25_OracleDMLEx: ;
}
// $ANTLR end synpred25_OracleDML

// $ANTLR start synpredRule synpred26_OracleDML
void OracleDML::msynpred26_OracleDML_fragment(  )
{
    // OracleDML.g:894:10: ( ( LEFT_PAREN )+ ( select_key | with_key ) )
    // OracleDML.g:894:11: ( LEFT_PAREN )+ ( select_key | with_key )
    {
        // OracleDML.g:894:11: ( LEFT_PAREN )+
        {
            int cnt371=0;

            for (;;)
            {
                ANTLR_UINT32 alt371=2;
        	switch ( this->LA(1) )
        	{
        	case LEFT_PAREN:
        		{
        			alt371=1;
        		}
        	    break;

        	}

        	switch (alt371)
        	{
        	    case 1:
        	        // OracleDML.g:894:11: LEFT_PAREN
        	        {
        	             this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred26_OracleDML9167);
        	            if  (this->hasException())
        	            {
        	                goto rulesynpred26_OracleDMLEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return ;
        	            }



        	        }
        	        break;

        	    default:

        		if ( cnt371 >= 1 )
        		{
        		    goto loop371;
        		}
        		if (this->get_backtracking()>0)
        		{
        		    this->set_failedflag( true );
        		    return ;
        		}

        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto rulesynpred26_OracleDMLEx;
        	}
        	cnt371++;
            }
            loop371: ;	/* Jump to here if this rule does not match */
        }

        // OracleDML.g:894:23: ( select_key | with_key )
        {
            ANTLR_UINT32 alt372=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt372=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt372=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 372 );
                ex->set_state( 0 );


                goto rulesynpred26_OracleDMLEx;

            }

            switch (alt372)
            {
        	case 1:
        	    // OracleDML.g:894:24: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred26_OracleDML9171);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred26_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:894:35: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred26_OracleDML9173);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred26_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred26_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred26_OracleDMLEx: ;
}
// $ANTLR end synpred26_OracleDML

// $ANTLR start synpredRule synpred27_OracleDML
void OracleDML::msynpred27_OracleDML_fragment(  )
{
    // OracleDML.g:932:10: ( interval_expression )
    // OracleDML.g:932:11: interval_expression
    {
        this->followPush(FOLLOW_interval_expression_in_synpred27_OracleDML9614);
        interval_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred27_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred27_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred27_OracleDMLEx: ;
}
// $ANTLR end synpred27_OracleDML

// $ANTLR start synpredRule synpred28_OracleDML
void OracleDML::msynpred28_OracleDML_fragment(  )
{
    // OracleDML.g:951:11: ( any_key )
    // OracleDML.g:951:12: any_key
    {
        this->followPush(FOLLOW_any_key_in_synpred28_OracleDML9854);
        any_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred28_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred28_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred28_OracleDMLEx: ;
}
// $ANTLR end synpred28_OracleDML

// $ANTLR start synpredRule synpred29_OracleDML
void OracleDML::msynpred29_OracleDML_fragment(  )
{
    // OracleDML.g:951:59: ( any_key )
    // OracleDML.g:951:60: any_key
    {
        this->followPush(FOLLOW_any_key_in_synpred29_OracleDML9869);
        any_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred29_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred29_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred29_OracleDMLEx: ;
}
// $ANTLR end synpred29_OracleDML

// $ANTLR start synpredRule synpred30_OracleDML
void OracleDML::msynpred30_OracleDML_fragment(  )
{
    // OracleDML.g:980:18: ( select_key )
    // OracleDML.g:980:19: select_key
    {
        this->followPush(FOLLOW_select_key_in_synpred30_OracleDML10223);
        select_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred30_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred30_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred30_OracleDMLEx: ;
}
// $ANTLR end synpred30_OracleDML

// $ANTLR start synpredRule synpred31_OracleDML
void OracleDML::msynpred31_OracleDML_fragment(  )
{
    // OracleDML.g:981:18: ( LEFT_PAREN )
    // OracleDML.g:981:19: LEFT_PAREN
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred31_OracleDML10247);
        if  (this->hasException())
        {
            goto rulesynpred31_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred31_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred31_OracleDMLEx: ;
}
// $ANTLR end synpred31_OracleDML

// $ANTLR start synpredRule synpred36_OracleDML
void OracleDML::msynpred36_OracleDML_fragment(  )
{
    // OracleDML.g:1001:10: ({...}? => new_key unary_expression )
    // OracleDML.g:1001:10: {...}? => new_key unary_expression
    {
        if ( !((LT(1)->getText() == "NEW" && LT(2)->getText() != ".")) )
        {
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "LT(1)->getText() == \"NEW\" && LT(2)->getText() != \".\"" );
                ex->set_ruleName( "synpred36_OracleDML" );


        }

        this->followPush(FOLLOW_new_key_in_synpred36_OracleDML10457);
        new_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred36_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_unary_expression_in_synpred36_OracleDML10460);
        unary_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred36_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred36_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred36_OracleDMLEx: ;
}
// $ANTLR end synpred36_OracleDML

// $ANTLR start synpredRule synpred38_OracleDML
void OracleDML::msynpred38_OracleDML_fragment(  )
{
    // OracleDML.g:1003:10: ( all_key unary_expression )
    // OracleDML.g:1003:10: all_key unary_expression
    {
        this->followPush(FOLLOW_all_key_in_synpred38_OracleDML10485);
        all_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred38_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_unary_expression_in_synpred38_OracleDML10488);
        unary_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred38_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred38_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred38_OracleDMLEx: ;
}
// $ANTLR end synpred38_OracleDML

// $ANTLR start synpredRule synpred39_OracleDML
void OracleDML::msynpred39_OracleDML_fragment(  )
{
    // OracleDML.g:1004:10: ({...}? case_statement[false] )
    // OracleDML.g:1004:10: {...}? case_statement[false]
    {
        if ( !(((LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE))) )
        {
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            	ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), "(LA(1) == SQL92_RESERVED_CASE || LA(2) == SQL92_RESERVED_CASE)" );
                ex->set_ruleName( "synpred39_OracleDML" );


        }

        this->followPush(FOLLOW_case_statement_in_synpred39_OracleDML10501);
        case_statement(false);

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred39_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred39_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred39_OracleDMLEx: ;
}
// $ANTLR end synpred39_OracleDML

// $ANTLR start synpredRule synpred40_OracleDML
void OracleDML::msynpred40_OracleDML_fragment(  )
{
    // OracleDML.g:1005:10: ( quantified_expression )
    // OracleDML.g:1005:10: quantified_expression
    {
        this->followPush(FOLLOW_quantified_expression_in_synpred40_OracleDML10513);
        quantified_expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred40_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred40_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred40_OracleDMLEx: ;
}
// $ANTLR end synpred40_OracleDML

// $ANTLR start synpredRule synpred41_OracleDML
void OracleDML::msynpred41_OracleDML_fragment(  )
{
    // OracleDML.g:1006:10: ( standard_function )
    // OracleDML.g:1006:10: standard_function
    {
        this->followPush(FOLLOW_standard_function_in_synpred41_OracleDML10524);
        standard_function();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred41_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred41_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred41_OracleDMLEx: ;
}
// $ANTLR end synpred41_OracleDML

// $ANTLR start synpredRule synpred42_OracleDML
void OracleDML::msynpred42_OracleDML_fragment(  )
{
    // OracleDML.g:1015:10: ( ( label_name )? case_key when_key )
    // OracleDML.g:1015:11: ( label_name )? case_key when_key
    {
        // OracleDML.g:1015:11: ( label_name )?
        {
            ANTLR_UINT32 alt373=2;
            switch ( this->LA(1) )
            {
                case DELIMITED_ID:
                case REGULAR_ID:
                	{
                		alt373=1;
                	}
                    break;
            }

            switch (alt373)
            {
        	case 1:
        	    // OracleDML.g:1015:11: label_name
        	    {
        	        this->followPush(FOLLOW_label_name_in_synpred42_OracleDML10581);
        	        label_name();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred42_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

        this->followPush(FOLLOW_case_key_in_synpred42_OracleDML10584);
        case_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred42_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_when_key_in_synpred42_OracleDML10586);
        when_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred42_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred42_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred42_OracleDMLEx: ;
}
// $ANTLR end synpred42_OracleDML

// $ANTLR start synpredRule synpred43_OracleDML
void OracleDML::msynpred43_OracleDML_fragment(  )
{
    // OracleDML.g:1056:10: ( table_element outer_join_sign )
    // OracleDML.g:1056:11: table_element outer_join_sign
    {
        this->followPush(FOLLOW_table_element_in_synpred43_OracleDML10954);
        table_element();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred43_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        this->followPush(FOLLOW_outer_join_sign_in_synpred43_OracleDML10956);
        outer_join_sign();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred43_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred43_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred43_OracleDMLEx: ;
}
// $ANTLR end synpred43_OracleDML

// $ANTLR start synpredRule synpred45_OracleDML
void OracleDML::msynpred45_OracleDML_fragment(  )
{
    // OracleDML.g:1058:10: ( constant )
    // OracleDML.g:1058:10: constant
    {
        this->followPush(FOLLOW_constant_in_synpred45_OracleDML10985);
        constant();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred45_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred45_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred45_OracleDMLEx: ;
}
// $ANTLR end synpred45_OracleDML

// $ANTLR start synpredRule synpred46_OracleDML
void OracleDML::msynpred46_OracleDML_fragment(  )
{
    // OracleDML.g:1059:10: ( general_element )
    // OracleDML.g:1059:10: general_element
    {
        this->followPush(FOLLOW_general_element_in_synpred46_OracleDML10996);
        general_element();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred46_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred46_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred46_OracleDMLEx: ;
}
// $ANTLR end synpred46_OracleDML

// $ANTLR start synpredRule synpred47_OracleDML
void OracleDML::msynpred47_OracleDML_fragment(  )
{
    {
        //  OracleDML.g:1062:15: ( select_key | with_key )

        ANTLR_UINT32 alt374;

        alt374=2;

        switch ( this->LA(1) )
        {
        case SQL92_RESERVED_SELECT:
        	{
        		alt374=1;
        	}
            break;
        case SQL92_RESERVED_WITH:
        	{
        		alt374=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 374 );
            ex->set_state( 0 );


            goto rulesynpred47_OracleDMLEx;

        }

        switch (alt374)
        {
    	case 1:
    	    // OracleDML.g:1062:17: select_key
    	    {
    	        this->followPush(FOLLOW_select_key_in_synpred47_OracleDML11036);
    	        select_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred47_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;
    	case 2:
    	    // OracleDML.g:1062:30: with_key
    	    {
    	        this->followPush(FOLLOW_with_key_in_synpred47_OracleDML11040);
    	        with_key();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred47_OracleDMLEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }



    	    }
    	    break;

        }
    }

goto rulesynpred47_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred47_OracleDMLEx: ;
}
// $ANTLR end synpred47_OracleDML

// $ANTLR start synpredRule synpred48_OracleDML
void OracleDML::msynpred48_OracleDML_fragment(  )
{
    // OracleDML.g:1084:12: ( LEFT_PAREN ( select_key | with_key ) )
    // OracleDML.g:1084:13: LEFT_PAREN ( select_key | with_key )
    {
         this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred48_OracleDML11319);
        if  (this->hasException())
        {
            goto rulesynpred48_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:1084:24: ( select_key | with_key )
        {
            ANTLR_UINT32 alt375=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt375=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt375=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 375 );
                ex->set_state( 0 );


                goto rulesynpred48_OracleDMLEx;

            }

            switch (alt375)
            {
        	case 1:
        	    // OracleDML.g:1084:25: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred48_OracleDML11322);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred48_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1084:36: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred48_OracleDML11324);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred48_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred48_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred48_OracleDMLEx: ;
}
// $ANTLR end synpred48_OracleDML

// $ANTLR start synpredRule synpred49_OracleDML
void OracleDML::msynpred49_OracleDML_fragment(  )
{
    // OracleDML.g:1100:15: ( multiset_key ( LEFT_PAREN )+ ( select_key | with_key ) )
    // OracleDML.g:1100:16: multiset_key ( LEFT_PAREN )+ ( select_key | with_key )
    {
        this->followPush(FOLLOW_multiset_key_in_synpred49_OracleDML11641);
        multiset_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred49_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



        // OracleDML.g:1100:29: ( LEFT_PAREN )+
        {
            int cnt376=0;

            for (;;)
            {
                ANTLR_UINT32 alt376=2;
        	switch ( this->LA(1) )
        	{
        	case LEFT_PAREN:
        		{
        			alt376=1;
        		}
        	    break;

        	}

        	switch (alt376)
        	{
        	    case 1:
        	        // OracleDML.g:1100:29: LEFT_PAREN
        	        {
        	             this->matchToken(LEFT_PAREN, &FOLLOW_LEFT_PAREN_in_synpred49_OracleDML11643);
        	            if  (this->hasException())
        	            {
        	                goto rulesynpred49_OracleDMLEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return ;
        	            }



        	        }
        	        break;

        	    default:

        		if ( cnt376 >= 1 )
        		{
        		    goto loop376;
        		}
        		if (this->get_backtracking()>0)
        		{
        		    this->set_failedflag( true );
        		    return ;
        		}

        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< OracleDMLImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto rulesynpred49_OracleDMLEx;
        	}
        	cnt376++;
            }
            loop376: ;	/* Jump to here if this rule does not match */
        }

        // OracleDML.g:1100:41: ( select_key | with_key )
        {
            ANTLR_UINT32 alt377=2;
            switch ( this->LA(1) )
            {
            case SQL92_RESERVED_SELECT:
            	{
            		alt377=1;
            	}
                break;
            case SQL92_RESERVED_WITH:
            	{
            		alt377=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< OracleDMLImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 377 );
                ex->set_state( 0 );


                goto rulesynpred49_OracleDMLEx;

            }

            switch (alt377)
            {
        	case 1:
        	    // OracleDML.g:1100:42: select_key
        	    {
        	        this->followPush(FOLLOW_select_key_in_synpred49_OracleDML11647);
        	        select_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred49_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;
        	case 2:
        	    // OracleDML.g:1100:53: with_key
        	    {
        	        this->followPush(FOLLOW_with_key_in_synpred49_OracleDML11649);
        	        with_key();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesynpred49_OracleDMLEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }



        	    }
        	    break;

            }
        }

    }


goto rulesynpred49_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred49_OracleDMLEx: ;
}
// $ANTLR end synpred49_OracleDML

// $ANTLR start synpredRule synpred50_OracleDML
void OracleDML::msynpred50_OracleDML_fragment(  )
{
    // OracleDML.g:1304:14: ( default_key )
    // OracleDML.g:1304:15: default_key
    {
        this->followPush(FOLLOW_default_key_in_synpred50_OracleDML14513);
        default_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred50_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred50_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred50_OracleDMLEx: ;
}
// $ANTLR end synpred50_OracleDML

// $ANTLR start synpredRule synpred51_OracleDML
void OracleDML::msynpred51_OracleDML_fragment(  )
{
    // OracleDML.g:1311:55: ( default_key )
    // OracleDML.g:1311:56: default_key
    {
        this->followPush(FOLLOW_default_key_in_synpred51_OracleDML14584);
        default_key();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred51_OracleDMLEx;
        }
        if (this->hasFailed())
        {
            return ;
        }



    }


goto rulesynpred51_OracleDMLEx; /* Prevent compiler warnings */
rulesynpred51_OracleDMLEx: ;
}
// $ANTLR end synpred51_OracleDML
	// Delegated methods that appear to be a part of this
	// parser
	//
    OracleDML_OracleDMLKeys::advise_key_return OracleDML::advise_key()
    {
        return m_gOracleDMLKeys->advise_key();
    }

    OracleDML_OracleDMLKeys::serveroutput_key_return OracleDML::serveroutput_key()
    {
        return m_gOracleDMLKeys->serveroutput_key();
    }

    OracleDML_OracleDMLKeys::instr_key_return OracleDML::instr_key()
    {
        return m_gOracleDMLKeys->instr_key();
    }

    OracleDML_OracleDMLCommons::collection_name_return OracleDML::collection_name()
    {
        return m_gOracleDMLCommons->collection_name();
    }

    OracleDML_OracleDMLKeys::alter_key_return OracleDML::alter_key()
    {
        return m_gOracleDMLKeys->alter_key();
    }

    OracleDML_OracleDMLKeys::multiset_key_return OracleDML::multiset_key()
    {
        return m_gOracleDMLKeys->multiset_key();
    }

    OracleDML_OracleDMLKeys::noorder_key_return OracleDML::noorder_key()
    {
        return m_gOracleDMLKeys->noorder_key();
    }

    OracleDML_OracleDMLKeys::binary_double_nan_key_return OracleDML::binary_double_nan_key()
    {
        return m_gOracleDMLKeys->binary_double_nan_key();
    }

    OracleDML_OracleDMLKeys::servererror_key_return OracleDML::servererror_key()
    {
        return m_gOracleDMLKeys->servererror_key();
    }

    OracleDML_OracleDMLKeys::none_key_return OracleDML::none_key()
    {
        return m_gOracleDMLKeys->none_key();
    }

    OracleDML_OracleDMLKeys::rowidtochar_key_return OracleDML::rowidtochar_key()
    {
        return m_gOracleDMLKeys->rowidtochar_key();
    }

    OracleDML_OracleDMLKeys::continue_key_return OracleDML::continue_key()
    {
        return m_gOracleDMLKeys->continue_key();
    }

    OracleDML_OracleDMLKeys::aggregate_key_return OracleDML::aggregate_key()
    {
        return m_gOracleDMLKeys->aggregate_key();
    }

    OracleDML_OracleDMLKeys::position_key_return OracleDML::position_key()
    {
        return m_gOracleDMLKeys->position_key();
    }

    OracleDML_OracleDMLKeys::size_key_return OracleDML::size_key()
    {
        return m_gOracleDMLKeys->size_key();
    }

    OracleDML_OracleDMLKeys::depth_key_return OracleDML::depth_key()
    {
        return m_gOracleDMLKeys->depth_key();
    }

    OracleDML_OracleDMLCommons::where_clause_return OracleDML::where_clause()
    {
        return m_gOracleDMLCommons->where_clause();
    }

    OracleDML_OracleDMLKeys::exclusive_key_return OracleDML::exclusive_key()
    {
        return m_gOracleDMLKeys->exclusive_key();
    }

    OracleDML_OracleDMLKeys::reuse_key_return OracleDML::reuse_key()
    {
        return m_gOracleDMLKeys->reuse_key();
    }

    OracleDML_OracleDMLKeys::row_key_return OracleDML::row_key()
    {
        return m_gOracleDMLKeys->row_key();
    }

    OracleDML_OracleDMLKeys::cost_key_return OracleDML::cost_key()
    {
        return m_gOracleDMLKeys->cost_key();
    }

    OracleDML_OracleDMLKeys::self_key_return OracleDML::self_key()
    {
        return m_gOracleDMLKeys->self_key();
    }

    OracleDML_OracleDMLKeys::sqlerror_key_return OracleDML::sqlerror_key()
    {
        return m_gOracleDMLKeys->sqlerror_key();
    }

    OracleDML_OracleDMLKeys::hextoraw_key_return OracleDML::hextoraw_key()
    {
        return m_gOracleDMLKeys->hextoraw_key();
    }

    OracleDML_OracleDMLKeys::values_key_return OracleDML::values_key()
    {
        return m_gOracleDMLKeys->values_key();
    }

    OracleDML_OracleDMLKeys::sqrt_key_return OracleDML::sqrt_key()
    {
        return m_gOracleDMLKeys->sqrt_key();
    }

    OracleDML_OracleDMLKeys::dec_key_return OracleDML::dec_key()
    {
        return m_gOracleDMLKeys->dec_key();
    }

    OracleDML_OracleDMLCommons::main_model_name_return OracleDML::main_model_name()
    {
        return m_gOracleDMLCommons->main_model_name();
    }

    OracleDML_OracleDMLKeys::version_key_return OracleDML::version_key()
    {
        return m_gOracleDMLKeys->version_key();
    }

    OracleDML_OracleDMLKeys::no_key_return OracleDML::no_key()
    {
        return m_gOracleDMLKeys->no_key();
    }

    OracleDML_OracleDMLKeys::reverse_key_return OracleDML::reverse_key()
    {
        return m_gOracleDMLKeys->reverse_key();
    }

    OracleDML_OracleDMLKeys::and_key_return OracleDML::and_key()
    {
        return m_gOracleDMLKeys->and_key();
    }

    OracleDML_OracleDMLKeys::to_number_key_return OracleDML::to_number_key()
    {
        return m_gOracleDMLKeys->to_number_key();
    }

    OracleDML_OracleDMLKeys::uid_key_return OracleDML::uid_key()
    {
        return m_gOracleDMLKeys->uid_key();
    }

    OracleDML_OracleDMLKeys::upsert_key_return OracleDML::upsert_key()
    {
        return m_gOracleDMLKeys->upsert_key();
    }

    OracleDML_OracleDMLKeys::leading_key_return OracleDML::leading_key()
    {
        return m_gOracleDMLKeys->leading_key();
    }

    OracleDML_OracleDMLCommons::table_alias_return OracleDML::table_alias()
    {
        return m_gOracleDMLCommons->table_alias();
    }

    OracleDML_OracleDMLKeys::xmlelement_key_return OracleDML::xmlelement_key()
    {
        return m_gOracleDMLKeys->xmlelement_key();
    }

    OracleDML_OracleDMLKeys::unpivot_key_return OracleDML::unpivot_key()
    {
        return m_gOracleDMLKeys->unpivot_key();
    }

    OracleDML_OracleDMLKeys::xmlroot_key_return OracleDML::xmlroot_key()
    {
        return m_gOracleDMLKeys->xmlroot_key();
    }

    OracleDML_OracleDMLKeys::default_key_return OracleDML::default_key()
    {
        return m_gOracleDMLKeys->default_key();
    }

    OracleDML_OracleDMLKeys::percent_notfound_key_return OracleDML::percent_notfound_key()
    {
        return m_gOracleDMLKeys->percent_notfound_key();
    }

    OracleDML_OracleDMLKeys::minvalue_key_return OracleDML::minvalue_key()
    {
        return m_gOracleDMLKeys->minvalue_key();
    }

    OracleDML_OracleDMLKeys::binary_integer_key_return OracleDML::binary_integer_key()
    {
        return m_gOracleDMLKeys->binary_integer_key();
    }

    OracleDML_OracleDMLKeys::collate_key_return OracleDML::collate_key()
    {
        return m_gOracleDMLKeys->collate_key();
    }

    OracleDML_OracleDMLKeys::in_key_return OracleDML::in_key()
    {
        return m_gOracleDMLKeys->in_key();
    }

    OracleDML_OracleDMLKeys::rename_key_return OracleDML::rename_key()
    {
        return m_gOracleDMLKeys->rename_key();
    }

    OracleDML_OracleDMLKeys::current_time_key_return OracleDML::current_time_key()
    {
        return m_gOracleDMLKeys->current_time_key();
    }

    OracleDML_OracleDMLKeys::start_key_return OracleDML::start_key()
    {
        return m_gOracleDMLKeys->start_key();
    }

    OracleDML_OracleDMLCommons::precision_part_return OracleDML::precision_part()
    {
        return m_gOracleDMLCommons->precision_part();
    }

    OracleDML_OracleDMLKeys::associate_key_return OracleDML::associate_key()
    {
        return m_gOracleDMLKeys->associate_key();
    }

    OracleDML_OracleDMLKeys::like2_key_return OracleDML::like2_key()
    {
        return m_gOracleDMLKeys->like2_key();
    }

    OracleDML_OracleDMLKeys::resumable_key_return OracleDML::resumable_key()
    {
        return m_gOracleDMLKeys->resumable_key();
    }

    OracleDML_OracleDMLKeys::indexed_key_return OracleDML::indexed_key()
    {
        return m_gOracleDMLKeys->indexed_key();
    }

    OracleDML_OracleDMLKeys::xmlcast_key_return OracleDML::xmlcast_key()
    {
        return m_gOracleDMLKeys->xmlcast_key();
    }

    OracleDML_OracleDMLKeys::least_key_return OracleDML::least_key()
    {
        return m_gOracleDMLKeys->least_key();
    }

    OracleDML_OracleDMLKeys::suspend_key_return OracleDML::suspend_key()
    {
        return m_gOracleDMLKeys->suspend_key();
    }

    OracleDML_OracleDMLKeys::a_key_return OracleDML::a_key()
    {
        return m_gOracleDMLKeys->a_key();
    }

    OracleDML_OracleDMLKeys::rollup_key_return OracleDML::rollup_key()
    {
        return m_gOracleDMLKeys->rollup_key();
    }

    OracleDML_OracleDMLKeys::before_key_return OracleDML::before_key()
    {
        return m_gOracleDMLKeys->before_key();
    }

    OracleDML_OracleDMLCommons::link_name_return OracleDML::link_name()
    {
        return m_gOracleDMLCommons->link_name();
    }

    OracleDML_OracleDMLKeys::c_key_return OracleDML::c_key()
    {
        return m_gOracleDMLKeys->c_key();
    }

    OracleDML_OracleDMLKeys::binary_double_infinity_key_return OracleDML::binary_double_infinity_key()
    {
        return m_gOracleDMLKeys->binary_double_infinity_key();
    }

    OracleDML_OracleDMLKeys::committed_key_return OracleDML::committed_key()
    {
        return m_gOracleDMLKeys->committed_key();
    }

    OracleDML_OracleDMLKeys::asc_key_return OracleDML::asc_key()
    {
        return m_gOracleDMLKeys->asc_key();
    }

    OracleDML_OracleDMLKeys::oid_key_return OracleDML::oid_key()
    {
        return m_gOracleDMLKeys->oid_key();
    }

    OracleDML_OracleDMLKeys::cascade_key_return OracleDML::cascade_key()
    {
        return m_gOracleDMLKeys->cascade_key();
    }

    OracleDML_OracleDMLCommons::argument_return OracleDML::argument()
    {
        return m_gOracleDMLCommons->argument();
    }

    OracleDML_OracleDMLKeys::urowid_key_return OracleDML::urowid_key()
    {
        return m_gOracleDMLKeys->urowid_key();
    }

    OracleDML_OracleDMLKeys::automatic_key_return OracleDML::automatic_key()
    {
        return m_gOracleDMLKeys->automatic_key();
    }

    OracleDML_OracleDMLKeys::guard_key_return OracleDML::guard_key()
    {
        return m_gOracleDMLKeys->guard_key();
    }

    OracleDML_OracleDMLKeys::enable_key_return OracleDML::enable_key()
    {
        return m_gOracleDMLKeys->enable_key();
    }

    OracleDML_OracleDMLKeys::xmlforest_key_return OracleDML::xmlforest_key()
    {
        return m_gOracleDMLKeys->xmlforest_key();
    }

    OracleDML_OracleDMLKeys::cast_key_return OracleDML::cast_key()
    {
        return m_gOracleDMLKeys->cast_key();
    }

    OracleDML_OracleDMLKeys::validate_key_return OracleDML::validate_key()
    {
        return m_gOracleDMLKeys->validate_key();
    }

    OracleDML_OracleDMLKeys::inout_key_return OracleDML::inout_key()
    {
        return m_gOracleDMLKeys->inout_key();
    }

    OracleDML_OracleDMLKeys::unique_key_return OracleDML::unique_key()
    {
        return m_gOracleDMLKeys->unique_key();
    }

    OracleDML_OracleDMLKeys::binary_float_nan_key_return OracleDML::binary_float_nan_key()
    {
        return m_gOracleDMLKeys->binary_float_nan_key();
    }

    OracleDML_OracleDMLKeys::at_key_return OracleDML::at_key()
    {
        return m_gOracleDMLKeys->at_key();
    }

    OracleDML_OracleDMLCommons::savepoint_name_return OracleDML::savepoint_name()
    {
        return m_gOracleDMLCommons->savepoint_name();
    }

    OracleDML_OracleDMLKeys::old_key_return OracleDML::old_key()
    {
        return m_gOracleDMLKeys->old_key();
    }

    OracleDML_OracleDMLKeys::octet_length_key_return OracleDML::octet_length_key()
    {
        return m_gOracleDMLKeys->octet_length_key();
    }

    OracleDML_OracleDMLKeys::search_key_return OracleDML::search_key()
    {
        return m_gOracleDMLKeys->search_key();
    }

    OracleDML_OracleDMLKeys::mode_key_return OracleDML::mode_key()
    {
        return m_gOracleDMLKeys->mode_key();
    }

    OracleDML_OracleDMLKeys::customdatum_key_return OracleDML::customdatum_key()
    {
        return m_gOracleDMLKeys->customdatum_key();
    }

    OracleDML_OracleDMLKeys::each_key_return OracleDML::each_key()
    {
        return m_gOracleDMLKeys->each_key();
    }

    OracleDML_OracleDMLKeys::dbtimezone_key_return OracleDML::dbtimezone_key()
    {
        return m_gOracleDMLKeys->dbtimezone_key();
    }

    OracleDML_OracleDMLKeys::nulls_key_return OracleDML::nulls_key()
    {
        return m_gOracleDMLKeys->nulls_key();
    }

    OracleDML_OracleDMLKeys::xmlquery_key_return OracleDML::xmlquery_key()
    {
        return m_gOracleDMLKeys->xmlquery_key();
    }

    OracleDML_OracleDMLKeys::to_char_key_return OracleDML::to_char_key()
    {
        return m_gOracleDMLKeys->to_char_key();
    }

    OracleDML_OracleDMLKeys::trunc_key_return OracleDML::trunc_key()
    {
        return m_gOracleDMLKeys->trunc_key();
    }

    OracleDML_OracleDMLKeys::call_key_return OracleDML::call_key()
    {
        return m_gOracleDMLKeys->call_key();
    }

    OracleDML_OracleDMLKeys::end_key_return OracleDML::end_key()
    {
        return m_gOracleDMLKeys->end_key();
    }

    OracleDML_OracleDMLCommons::attribute_name_return OracleDML::attribute_name()
    {
        return m_gOracleDMLCommons->attribute_name();
    }

    OracleDML_OracleDMLKeys::some_key_return OracleDML::some_key()
    {
        return m_gOracleDMLKeys->some_key();
    }

    OracleDML_OracleDMLKeys::serializable_key_return OracleDML::serializable_key()
    {
        return m_gOracleDMLKeys->serializable_key();
    }

    OracleDML_OracleDMLKeys::log_key_return OracleDML::log_key()
    {
        return m_gOracleDMLKeys->log_key();
    }

    OracleDML_OracleDMLKeys::noentityescaping_key_return OracleDML::noentityescaping_key()
    {
        return m_gOracleDMLKeys->noentityescaping_key();
    }

    OracleDML_OracleDMLKeys::zone_key_return OracleDML::zone_key()
    {
        return m_gOracleDMLKeys->zone_key();
    }

    OracleDML_OracleDMLKeys::corrupt_xid_key_return OracleDML::corrupt_xid_key()
    {
        return m_gOracleDMLKeys->corrupt_xid_key();
    }

    OracleDML_OracleDMLCommons::constraint_name_return OracleDML::constraint_name()
    {
        return m_gOracleDMLCommons->constraint_name();
    }

    OracleDML_OracleDMLKeys::encoding_key_return OracleDML::encoding_key()
    {
        return m_gOracleDMLKeys->encoding_key();
    }

    OracleDML_OracleDMLKeys::query_key_return OracleDML::query_key()
    {
        return m_gOracleDMLKeys->query_key();
    }

    OracleDML_OracleDMLKeys::identified_key_return OracleDML::identified_key()
    {
        return m_gOracleDMLKeys->identified_key();
    }

    OracleDML_OracleDMLKeys::compatibility_key_return OracleDML::compatibility_key()
    {
        return m_gOracleDMLKeys->compatibility_key();
    }

    OracleDML_OracleDMLKeys::to_key_return OracleDML::to_key()
    {
        return m_gOracleDMLKeys->to_key();
    }

    OracleDML_OracleDMLKeys::following_key_return OracleDML::following_key()
    {
        return m_gOracleDMLKeys->following_key();
    }

    OracleDML_OracleDMLKeys::substring_key_return OracleDML::substring_key()
    {
        return m_gOracleDMLKeys->substring_key();
    }

    OracleDML_OracleDMLKeys::date_key_return OracleDML::date_key()
    {
        return m_gOracleDMLKeys->date_key();
    }

    OracleDML_OracleDMLCommons::respect_or_ignore_nulls_return OracleDML::respect_or_ignore_nulls()
    {
        return m_gOracleDMLCommons->respect_or_ignore_nulls();
    }

    OracleDML_OracleDMLKeys::canonical_key_return OracleDML::canonical_key()
    {
        return m_gOracleDMLKeys->canonical_key();
    }

    OracleDML_OracleDMLKeys::language_key_return OracleDML::language_key()
    {
        return m_gOracleDMLKeys->language_key();
    }

    OracleDML_OracleDMLKeys::both_key_return OracleDML::both_key()
    {
        return m_gOracleDMLKeys->both_key();
    }

    OracleDML_OracleDMLKeys::increment_key_return OracleDML::increment_key()
    {
        return m_gOracleDMLKeys->increment_key();
    }

    OracleDML_OracleDMLKeys::drop_key_return OracleDML::drop_key()
    {
        return m_gOracleDMLKeys->drop_key();
    }

    OracleDML_OracleDMLCommons::type_spec_return OracleDML::type_spec()
    {
        return m_gOracleDMLCommons->type_spec();
    }

    OracleDML_OracleDMLKeys::bulk_key_return OracleDML::bulk_key()
    {
        return m_gOracleDMLKeys->bulk_key();
    }

    OracleDML_OracleDMLKeys::create_key_return OracleDML::create_key()
    {
        return m_gOracleDMLKeys->create_key();
    }

    OracleDML_OracleDMLKeys::insert_key_return OracleDML::insert_key()
    {
        return m_gOracleDMLKeys->insert_key();
    }

    OracleDML_OracleDMLKeys::snapshot_key_return OracleDML::snapshot_key()
    {
        return m_gOracleDMLKeys->snapshot_key();
    }

    OracleDML_OracleDMLKeys::use_key_return OracleDML::use_key()
    {
        return m_gOracleDMLKeys->use_key();
    }

    OracleDML_OracleDMLKeys::hour_key_return OracleDML::hour_key()
    {
        return m_gOracleDMLKeys->hour_key();
    }

    OracleDML_OracleDMLKeys::truncate_key_return OracleDML::truncate_key()
    {
        return m_gOracleDMLKeys->truncate_key();
    }

    OracleDML_OracleDMLKeys::indices_key_return OracleDML::indices_key()
    {
        return m_gOracleDMLKeys->indices_key();
    }

    OracleDML_OracleDMLKeys::from_key_return OracleDML::from_key()
    {
        return m_gOracleDMLKeys->from_key();
    }

    OracleDML_OracleDMLKeys::reject_key_return OracleDML::reject_key()
    {
        return m_gOracleDMLKeys->reject_key();
    }

    OracleDML_OracleDMLKeys::cross_key_return OracleDML::cross_key()
    {
        return m_gOracleDMLKeys->cross_key();
    }

    OracleDML_OracleDMLKeys::timestamp_tz_unconstrained_key_return OracleDML::timestamp_tz_unconstrained_key()
    {
        return m_gOracleDMLKeys->timestamp_tz_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::nocopy_key_return OracleDML::nocopy_key()
    {
        return m_gOracleDMLKeys->nocopy_key();
    }

    OracleDML_OracleDMLCommons::datatype_return OracleDML::datatype()
    {
        return m_gOracleDMLCommons->datatype();
    }

    OracleDML_OracleDMLKeys::authid_key_return OracleDML::authid_key()
    {
        return m_gOracleDMLKeys->authid_key();
    }

    OracleDML_OracleDMLKeys::evalname_key_return OracleDML::evalname_key()
    {
        return m_gOracleDMLKeys->evalname_key();
    }

    OracleDML_OracleDMLKeys::day_key_return OracleDML::day_key()
    {
        return m_gOracleDMLKeys->day_key();
    }

    OracleDML_OracleDMLKeys::upper_key_return OracleDML::upper_key()
    {
        return m_gOracleDMLKeys->upper_key();
    }

    OracleDML_OracleDMLKeys::bit_length_key_return OracleDML::bit_length_key()
    {
        return m_gOracleDMLKeys->bit_length_key();
    }

    OracleDML_OracleDMLKeys::timezone_abbr_key_return OracleDML::timezone_abbr_key()
    {
        return m_gOracleDMLKeys->timezone_abbr_key();
    }

    OracleDML_OracleDMLKeys::by_key_return OracleDML::by_key()
    {
        return m_gOracleDMLKeys->by_key();
    }

    OracleDML_OracleDMLCommons::table_element_return OracleDML::table_element()
    {
        return m_gOracleDMLCommons->table_element();
    }

    OracleDML_OracleDMLKeys::binary_float_max_normal_key_return OracleDML::binary_float_max_normal_key()
    {
        return m_gOracleDMLKeys->binary_float_max_normal_key();
    }

    OracleDML_OracleDMLKeys::dimension_key_return OracleDML::dimension_key()
    {
        return m_gOracleDMLKeys->dimension_key();
    }

    OracleDML_OracleDMLKeys::map_key_return OracleDML::map_key()
    {
        return m_gOracleDMLKeys->map_key();
    }

    OracleDML_OracleDMLKeys::result_key_return OracleDML::result_key()
    {
        return m_gOracleDMLKeys->result_key();
    }

    OracleDML_OracleDMLKeys::trailing_key_return OracleDML::trailing_key()
    {
        return m_gOracleDMLKeys->trailing_key();
    }

    OracleDML_OracleDMLKeys::binary_float_key_return OracleDML::binary_float_key()
    {
        return m_gOracleDMLKeys->binary_float_key();
    }

    OracleDML_OracleDMLKeys::goto_key_return OracleDML::goto_key()
    {
        return m_gOracleDMLKeys->goto_key();
    }

    OracleDML_OracleDMLKeys::noschemacheck_key_return OracleDML::noschemacheck_key()
    {
        return m_gOracleDMLKeys->noschemacheck_key();
    }

    OracleDML_OracleDMLKeys::month_key_return OracleDML::month_key()
    {
        return m_gOracleDMLKeys->month_key();
    }

    OracleDML_OracleDMLKeys::ref_key_return OracleDML::ref_key()
    {
        return m_gOracleDMLKeys->ref_key();
    }

    OracleDML_OracleDMLKeys::double_key_return OracleDML::double_key()
    {
        return m_gOracleDMLKeys->double_key();
    }

    OracleDML_OracleDMLKeys::value_key_return OracleDML::value_key()
    {
        return m_gOracleDMLKeys->value_key();
    }

    OracleDML_OracleDMLKeys::procedure_key_return OracleDML::procedure_key()
    {
        return m_gOracleDMLKeys->procedure_key();
    }

    OracleDML_OracleDMLKeys::dense_rank_key_return OracleDML::dense_rank_key()
    {
        return m_gOracleDMLKeys->dense_rank_key();
    }

    OracleDML_OracleDMLKeys::exception_init_key_return OracleDML::exception_init_key()
    {
        return m_gOracleDMLKeys->exception_init_key();
    }

    OracleDML_OracleDMLKeys::indicator_key_return OracleDML::indicator_key()
    {
        return m_gOracleDMLKeys->indicator_key();
    }

    OracleDML_OracleDMLKeys::select_key_return OracleDML::select_key()
    {
        return m_gOracleDMLKeys->select_key();
    }

    OracleDML_OracleDMLKeys::disable_key_return OracleDML::disable_key()
    {
        return m_gOracleDMLKeys->disable_key();
    }

    OracleDML_OracleDMLKeys::for_key_return OracleDML::for_key()
    {
        return m_gOracleDMLKeys->for_key();
    }

    OracleDML_OracleDMLKeys::yminterval_unconstrained_key_return OracleDML::yminterval_unconstrained_key()
    {
        return m_gOracleDMLKeys->yminterval_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::exceptions_key_return OracleDML::exceptions_key()
    {
        return m_gOracleDMLKeys->exceptions_key();
    }

    OracleDML_OracleDMLKeys::rollback_key_return OracleDML::rollback_key()
    {
        return m_gOracleDMLKeys->rollback_key();
    }

    OracleDML_OracleDMLKeys::model_key_return OracleDML::model_key()
    {
        return m_gOracleDMLKeys->model_key();
    }

    OracleDML_OracleDMLKeys::timezone_hour_key_return OracleDML::timezone_hour_key()
    {
        return m_gOracleDMLKeys->timezone_hour_key();
    }

    OracleDML_OracleDMLKeys::segment_key_return OracleDML::segment_key()
    {
        return m_gOracleDMLKeys->segment_key();
    }

    OracleDML_OracleDMLKeys::object_key_return OracleDML::object_key()
    {
        return m_gOracleDMLKeys->object_key();
    }

    OracleDML_OracleDMLKeys::sqldata_key_return OracleDML::sqldata_key()
    {
        return m_gOracleDMLKeys->sqldata_key();
    }

    OracleDML_OracleDMLKeys::raise_key_return OracleDML::raise_key()
    {
        return m_gOracleDMLKeys->raise_key();
    }

    OracleDML_OracleDMLKeys::breadth_key_return OracleDML::breadth_key()
    {
        return m_gOracleDMLKeys->breadth_key();
    }

    OracleDML_OracleDMLKeys::result_cache_key_return OracleDML::result_cache_key()
    {
        return m_gOracleDMLKeys->result_cache_key();
    }

    OracleDML_OracleDMLKeys::comment_key_return OracleDML::comment_key()
    {
        return m_gOracleDMLKeys->comment_key();
    }

    OracleDML_OracleDMLKeys::system_key_return OracleDML::system_key()
    {
        return m_gOracleDMLKeys->system_key();
    }

    OracleDML_OracleDMLKeys::nclob_key_return OracleDML::nclob_key()
    {
        return m_gOracleDMLKeys->nclob_key();
    }

    OracleDML_OracleDMLKeys::analyze_key_return OracleDML::analyze_key()
    {
        return m_gOracleDMLKeys->analyze_key();
    }

    OracleDML_OracleDMLKeys::varchar_key_return OracleDML::varchar_key()
    {
        return m_gOracleDMLKeys->varchar_key();
    }

    OracleDML_OracleDMLKeys::while_key_return OracleDML::while_key()
    {
        return m_gOracleDMLKeys->while_key();
    }

    OracleDML_OracleDMLKeys::positiven_key_return OracleDML::positiven_key()
    {
        return m_gOracleDMLKeys->positiven_key();
    }

    OracleDML_OracleDMLKeys::work_key_return OracleDML::work_key()
    {
        return m_gOracleDMLKeys->work_key();
    }

    OracleDML_OracleDMLKeys::main_key_return OracleDML::main_key()
    {
        return m_gOracleDMLKeys->main_key();
    }

    OracleDML_OracleDMLKeys::real_key_return OracleDML::real_key()
    {
        return m_gOracleDMLKeys->real_key();
    }

    OracleDML_OracleDMLKeys::over_key_return OracleDML::over_key()
    {
        return m_gOracleDMLKeys->over_key();
    }

    OracleDML_OracleDMLKeys::overriding_key_return OracleDML::overriding_key()
    {
        return m_gOracleDMLKeys->overriding_key();
    }

    OracleDML_OracleDMLKeys::like_key_return OracleDML::like_key()
    {
        return m_gOracleDMLKeys->like_key();
    }

    OracleDML_OracleDMLKeys::keep_key_return OracleDML::keep_key()
    {
        return m_gOracleDMLKeys->keep_key();
    }

    OracleDML_OracleDMLKeys::timestamp_unconstrained_key_return OracleDML::timestamp_unconstrained_key()
    {
        return m_gOracleDMLKeys->timestamp_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::xmlnamespaces_key_return OracleDML::xmlnamespaces_key()
    {
        return m_gOracleDMLKeys->xmlnamespaces_key();
    }

    OracleDML_OracleDMLKeys::on_key_return OracleDML::on_key()
    {
        return m_gOracleDMLKeys->on_key();
    }

    OracleDML_OracleDMLKeys::unbounded_key_return OracleDML::unbounded_key()
    {
        return m_gOracleDMLKeys->unbounded_key();
    }

    OracleDML_OracleDMLKeys::body_key_return OracleDML::body_key()
    {
        return m_gOracleDMLKeys->body_key();
    }

    OracleDML_OracleDMLKeys::present_key_return OracleDML::present_key()
    {
        return m_gOracleDMLKeys->present_key();
    }

    OracleDML_OracleDMLKeys::declare_key_return OracleDML::declare_key()
    {
        return m_gOracleDMLKeys->declare_key();
    }

    OracleDML_OracleDMLKeys::partition_key_return OracleDML::partition_key()
    {
        return m_gOracleDMLKeys->partition_key();
    }

    OracleDML_OracleDMLCommons::label_name_return OracleDML::label_name()
    {
        return m_gOracleDMLCommons->label_name();
    }

    OracleDML_OracleDMLKeys::passing_key_return OracleDML::passing_key()
    {
        return m_gOracleDMLKeys->passing_key();
    }

    OracleDML_OracleDMLKeys::soundex_key_return OracleDML::soundex_key()
    {
        return m_gOracleDMLKeys->soundex_key();
    }

    OracleDML_OracleDMLKeys::chartorowid_key_return OracleDML::chartorowid_key()
    {
        return m_gOracleDMLKeys->chartorowid_key();
    }

    OracleDML_OracleDMLKeys::true_key_return OracleDML::true_key()
    {
        return m_gOracleDMLKeys->true_key();
    }

    OracleDML_OracleDMLKeys::force_key_return OracleDML::force_key()
    {
        return m_gOracleDMLKeys->force_key();
    }

    OracleDML_OracleDMLKeys::rawtohex_key_return OracleDML::rawtohex_key()
    {
        return m_gOracleDMLKeys->rawtohex_key();
    }

    OracleDML_OracleDMLKeys::member_key_return OracleDML::member_key()
    {
        return m_gOracleDMLKeys->member_key();
    }

    OracleDML_OracleDMLKeys::naturaln_key_return OracleDML::naturaln_key()
    {
        return m_gOracleDMLKeys->naturaln_key();
    }

    OracleDML_OracleDMLKeys::cursor_key_return OracleDML::cursor_key()
    {
        return m_gOracleDMLKeys->cursor_key();
    }

    OracleDML_OracleDMLKeys::static_key_return OracleDML::static_key()
    {
        return m_gOracleDMLKeys->static_key();
    }

    OracleDML_OracleDMLKeys::raw_key_return OracleDML::raw_key()
    {
        return m_gOracleDMLKeys->raw_key();
    }

    OracleDML_OracleDMLKeys::treat_key_return OracleDML::treat_key()
    {
        return m_gOracleDMLKeys->treat_key();
    }

    OracleDML_OracleDMLKeys::system_user_key_return OracleDML::system_user_key()
    {
        return m_gOracleDMLKeys->system_user_key();
    }

    OracleDML_OracleDMLKeys::ascii_key_return OracleDML::ascii_key()
    {
        return m_gOracleDMLKeys->ascii_key();
    }

    OracleDML_OracleDMLKeys::columns_key_return OracleDML::columns_key()
    {
        return m_gOracleDMLKeys->columns_key();
    }

    OracleDML_OracleDMLKeys::session_key_return OracleDML::session_key()
    {
        return m_gOracleDMLKeys->session_key();
    }

    OracleDML_OracleDMLCommons::exception_name_return OracleDML::exception_name()
    {
        return m_gOracleDMLCommons->exception_name();
    }

    OracleDML_OracleDMLKeys::ceil_key_return OracleDML::ceil_key()
    {
        return m_gOracleDMLKeys->ceil_key();
    }

    OracleDML_OracleDMLKeys::follows_key_return OracleDML::follows_key()
    {
        return m_gOracleDMLKeys->follows_key();
    }

    OracleDML_OracleDMLKeys::variance_key_return OracleDML::variance_key()
    {
        return m_gOracleDMLKeys->variance_key();
    }

    OracleDML_OracleDMLKeys::percent_type_key_return OracleDML::percent_type_key()
    {
        return m_gOracleDMLKeys->percent_type_key();
    }

    OracleDML_OracleDMLKeys::sequence_key_return OracleDML::sequence_key()
    {
        return m_gOracleDMLKeys->sequence_key();
    }

    OracleDML_OracleDMLCommons::aggregate_function_name_return OracleDML::aggregate_function_name()
    {
        return m_gOracleDMLCommons->aggregate_function_name();
    }

    OracleDML_OracleDMLKeys::revoke_key_return OracleDML::revoke_key()
    {
        return m_gOracleDMLKeys->revoke_key();
    }

    OracleDML_OracleDMLKeys::option_key_return OracleDML::option_key()
    {
        return m_gOracleDMLKeys->option_key();
    }

    OracleDML_OracleDMLKeys::after_key_return OracleDML::after_key()
    {
        return m_gOracleDMLKeys->after_key();
    }

    OracleDML_OracleDMLKeys::current_date_key_return OracleDML::current_date_key()
    {
        return m_gOracleDMLKeys->current_date_key();
    }

    OracleDML_OracleDMLKeys::relies_on_key_return OracleDML::relies_on_key()
    {
        return m_gOracleDMLKeys->relies_on_key();
    }

    OracleDML_OracleDMLKeys::yes_key_return OracleDML::yes_key()
    {
        return m_gOracleDMLKeys->yes_key();
    }

    OracleDML_OracleDMLKeys::percent_rowcount_key_return OracleDML::percent_rowcount_key()
    {
        return m_gOracleDMLKeys->percent_rowcount_key();
    }

    OracleDML_OracleDMLKeys::clob_key_return OracleDML::clob_key()
    {
        return m_gOracleDMLKeys->clob_key();
    }

    OracleDML_OracleDMLKeys::number_key_return OracleDML::number_key()
    {
        return m_gOracleDMLKeys->number_key();
    }

    OracleDML_OracleDMLKeys::max_key_return OracleDML::max_key()
    {
        return m_gOracleDMLKeys->max_key();
    }

    OracleDML_OracleDMLKeys::having_key_return OracleDML::having_key()
    {
        return m_gOracleDMLKeys->having_key();
    }

    OracleDML_OracleDMLKeys::char_cs_key_return OracleDML::char_cs_key()
    {
        return m_gOracleDMLKeys->char_cs_key();
    }

    OracleDML_OracleDMLKeys::definer_key_return OracleDML::definer_key()
    {
        return m_gOracleDMLKeys->definer_key();
    }

    OracleDML_OracleDMLKeys::table_key_return OracleDML::table_key()
    {
        return m_gOracleDMLKeys->table_key();
    }

    OracleDML_OracleDMLKeys::sysdate_key_return OracleDML::sysdate_key()
    {
        return m_gOracleDMLKeys->sysdate_key();
    }

    OracleDML_OracleDMLKeys::execute_key_return OracleDML::execute_key()
    {
        return m_gOracleDMLKeys->execute_key();
    }

    OracleDML_OracleDMLKeys::binary_double_min_normal_key_return OracleDML::binary_double_min_normal_key()
    {
        return m_gOracleDMLKeys->binary_double_min_normal_key();
    }

    OracleDML_OracleDMLKeys::sets_key_return OracleDML::sets_key()
    {
        return m_gOracleDMLKeys->sets_key();
    }

    OracleDML_OracleDMLKeys::nav_key_return OracleDML::nav_key()
    {
        return m_gOracleDMLKeys->nav_key();
    }

    OracleDML_OracleDMLKeys::oradata_key_return OracleDML::oradata_key()
    {
        return m_gOracleDMLKeys->oradata_key();
    }

    OracleDML_OracleDMLKeys::min_key_return OracleDML::min_key()
    {
        return m_gOracleDMLKeys->min_key();
    }

    OracleDML_OracleDMLKeys::where_key_return OracleDML::where_key()
    {
        return m_gOracleDMLKeys->where_key();
    }

    OracleDML_OracleDMLCommons::type_name_return OracleDML::type_name()
    {
        return m_gOracleDMLCommons->type_name();
    }

    OracleDML_OracleDMLKeys::outer_key_return OracleDML::outer_key()
    {
        return m_gOracleDMLKeys->outer_key();
    }

    OracleDML_OracleDMLCommons::bind_variable_return OracleDML::bind_variable()
    {
        return m_gOracleDMLCommons->bind_variable();
    }

    OracleDML_OracleDMLKeys::nested_key_return OracleDML::nested_key()
    {
        return m_gOracleDMLKeys->nested_key();
    }

    OracleDML_OracleDMLKeys::hash_key_return OracleDML::hash_key()
    {
        return m_gOracleDMLKeys->hash_key();
    }

    OracleDML_OracleDMLKeys::local_key_return OracleDML::local_key()
    {
        return m_gOracleDMLKeys->local_key();
    }

    OracleDML_OracleDMLKeys::immediate_key_return OracleDML::immediate_key()
    {
        return m_gOracleDMLKeys->immediate_key();
    }

    OracleDML_OracleDMLCommons::rollback_segment_name_return OracleDML::rollback_segment_name()
    {
        return m_gOracleDMLCommons->rollback_segment_name();
    }

    OracleDML_OracleDMLKeys::convert_key_return OracleDML::convert_key()
    {
        return m_gOracleDMLKeys->convert_key();
    }

    OracleDML_OracleDMLKeys::second_key_return OracleDML::second_key()
    {
        return m_gOracleDMLKeys->second_key();
    }

    OracleDML_OracleDMLKeys::grant_key_return OracleDML::grant_key()
    {
        return m_gOracleDMLKeys->grant_key();
    }

    OracleDML_OracleDMLKeys::variable_key_return OracleDML::variable_key()
    {
        return m_gOracleDMLKeys->variable_key();
    }

    OracleDML_OracleDMLKeys::bfile_key_return OracleDML::bfile_key()
    {
        return m_gOracleDMLKeys->bfile_key();
    }

    OracleDML_OracleDMLKeys::count_key_return OracleDML::count_key()
    {
        return m_gOracleDMLKeys->count_key();
    }

    OracleDML_OracleDMLKeys::decompose_key_return OracleDML::decompose_key()
    {
        return m_gOracleDMLKeys->decompose_key();
    }

    OracleDML_OracleDMLKeys::integer_key_return OracleDML::integer_key()
    {
        return m_gOracleDMLKeys->integer_key();
    }

    OracleDML_OracleDMLKeys::constraints_key_return OracleDML::constraints_key()
    {
        return m_gOracleDMLKeys->constraints_key();
    }

    OracleDML_OracleDMLKeys::fetch_key_return OracleDML::fetch_key()
    {
        return m_gOracleDMLKeys->fetch_key();
    }

    OracleDML_OracleDMLKeys::to_date_key_return OracleDML::to_date_key()
    {
        return m_gOracleDMLKeys->to_date_key();
    }

    OracleDML_OracleDMLKeys::wellformed_key_return OracleDML::wellformed_key()
    {
        return m_gOracleDMLKeys->wellformed_key();
    }

    OracleDML_OracleDMLKeys::between_key_return OracleDML::between_key()
    {
        return m_gOracleDMLKeys->between_key();
    }

    OracleDML_OracleDMLKeys::schemacheck_key_return OracleDML::schemacheck_key()
    {
        return m_gOracleDMLKeys->schemacheck_key();
    }

    OracleDML_OracleDMLKeys::false_key_return OracleDML::false_key()
    {
        return m_gOracleDMLKeys->false_key();
    }

    OracleDML_OracleDMLKeys::the_key_return OracleDML::the_key()
    {
        return m_gOracleDMLKeys->the_key();
    }

    OracleDML_OracleDMLKeys::package_key_return OracleDML::package_key()
    {
        return m_gOracleDMLKeys->package_key();
    }

    OracleDML_OracleDMLKeys::ordinality_key_return OracleDML::ordinality_key()
    {
        return m_gOracleDMLKeys->ordinality_key();
    }

    OracleDML_OracleDMLKeys::percent_rowtype_key_return OracleDML::percent_rowtype_key()
    {
        return m_gOracleDMLKeys->percent_rowtype_key();
    }

    OracleDML_OracleDMLCommons::concatenation_op_return OracleDML::concatenation_op()
    {
        return m_gOracleDMLCommons->concatenation_op();
    }

    OracleDML_OracleDMLCommons::reference_model_name_return OracleDML::reference_model_name()
    {
        return m_gOracleDMLCommons->reference_model_name();
    }

    OracleDML_OracleDMLKeys::byte_key_return OracleDML::byte_key()
    {
        return m_gOracleDMLKeys->byte_key();
    }

    OracleDML_OracleDMLKeys::read_key_return OracleDML::read_key()
    {
        return m_gOracleDMLKeys->read_key();
    }

    OracleDML_OracleDMLKeys::dsinterval_unconstrained_key_return OracleDML::dsinterval_unconstrained_key()
    {
        return m_gOracleDMLKeys->dsinterval_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::new_key_return OracleDML::new_key()
    {
        return m_gOracleDMLKeys->new_key();
    }

    OracleDML_OracleDMLKeys::limit_key_return OracleDML::limit_key()
    {
        return m_gOracleDMLKeys->limit_key();
    }

    OracleDML_OracleDMLKeys::signtype_key_return OracleDML::signtype_key()
    {
        return m_gOracleDMLKeys->signtype_key();
    }

    OracleDML_OracleDMLKeys::merge_key_return OracleDML::merge_key()
    {
        return m_gOracleDMLKeys->merge_key();
    }

    OracleDML_OracleDMLKeys::forall_key_return OracleDML::forall_key()
    {
        return m_gOracleDMLKeys->forall_key();
    }

    OracleDML_OracleDMLKeys::with_key_return OracleDML::with_key()
    {
        return m_gOracleDMLKeys->with_key();
    }

    OracleDML_OracleDMLCommons::trigger_name_return OracleDML::trigger_name()
    {
        return m_gOracleDMLCommons->trigger_name();
    }

    OracleDML_OracleDMLKeys::plan_key_return OracleDML::plan_key()
    {
        return m_gOracleDMLKeys->plan_key();
    }

    OracleDML_OracleDMLKeys::like4_key_return OracleDML::like4_key()
    {
        return m_gOracleDMLKeys->like4_key();
    }

    OracleDML_OracleDMLKeys::pivot_key_return OracleDML::pivot_key()
    {
        return m_gOracleDMLKeys->pivot_key();
    }

    OracleDML_OracleDMLKeys::parallel_key_return OracleDML::parallel_key()
    {
        return m_gOracleDMLKeys->parallel_key();
    }

    OracleDML_OracleDMLKeys::instead_key_return OracleDML::instead_key()
    {
        return m_gOracleDMLKeys->instead_key();
    }

    OracleDML_OracleDMLKeys::array_key_return OracleDML::array_key()
    {
        return m_gOracleDMLKeys->array_key();
    }

    OracleDML_OracleDMLKeys::nothing_key_return OracleDML::nothing_key()
    {
        return m_gOracleDMLKeys->nothing_key();
    }

    OracleDML_OracleDMLKeys::external_key_return OracleDML::external_key()
    {
        return m_gOracleDMLKeys->external_key();
    }

    OracleDML_OracleDMLKeys::type_key_return OracleDML::type_key()
    {
        return m_gOracleDMLKeys->type_key();
    }

    OracleDML_OracleDMLKeys::concat_key_return OracleDML::concat_key()
    {
        return m_gOracleDMLKeys->concat_key();
    }

    OracleDML_OracleDMLKeys::off_key_return OracleDML::off_key()
    {
        return m_gOracleDMLKeys->off_key();
    }

    OracleDML_OracleDMLKeys::or_key_return OracleDML::or_key()
    {
        return m_gOracleDMLKeys->or_key();
    }

    OracleDML_OracleDMLKeys::disassociate_key_return OracleDML::disassociate_key()
    {
        return m_gOracleDMLKeys->disassociate_key();
    }

    OracleDML_OracleDMLKeys::timestamp_ltz_unconstrained_key_return OracleDML::timestamp_ltz_unconstrained_key()
    {
        return m_gOracleDMLKeys->timestamp_ltz_unconstrained_key();
    }

    OracleDML_OracleDMLKeys::versions_key_return OracleDML::versions_key()
    {
        return m_gOracleDMLKeys->versions_key();
    }

    OracleDML_OracleDMLCommons::cursor_name_return OracleDML::cursor_name()
    {
        return m_gOracleDMLCommons->cursor_name();
    }

    OracleDML_OracleDMLKeys::wait_key_return OracleDML::wait_key()
    {
        return m_gOracleDMLKeys->wait_key();
    }

    OracleDML_OracleDMLKeys::binary_double_max_normal_key_return OracleDML::binary_double_max_normal_key()
    {
        return m_gOracleDMLKeys->binary_double_max_normal_key();
    }

    OracleDML_OracleDMLKeys::when_key_return OracleDML::when_key()
    {
        return m_gOracleDMLKeys->when_key();
    }

    OracleDML_OracleDMLKeys::floor_key_return OracleDML::floor_key()
    {
        return m_gOracleDMLKeys->floor_key();
    }

    OracleDML_OracleDMLKeys::scn_key_return OracleDML::scn_key()
    {
        return m_gOracleDMLKeys->scn_key();
    }

    OracleDML_OracleDMLKeys::set_key_return OracleDML::set_key()
    {
        return m_gOracleDMLKeys->set_key();
    }

    OracleDML_OracleDMLKeys::returning_key_return OracleDML::returning_key()
    {
        return m_gOracleDMLKeys->returning_key();
    }

    OracleDML_OracleDMLKeys::lpad_key_return OracleDML::lpad_key()
    {
        return m_gOracleDMLKeys->lpad_key();
    }

    OracleDML_OracleDMLKeys::else_key_return OracleDML::else_key()
    {
        return m_gOracleDMLKeys->else_key();
    }

    OracleDML_OracleDMLKeys::specification_key_return OracleDML::specification_key()
    {
        return m_gOracleDMLKeys->specification_key();
    }

    OracleDML_OracleDMLKeys::ddl_key_return OracleDML::ddl_key()
    {
        return m_gOracleDMLKeys->ddl_key();
    }

    OracleDML_OracleDMLKeys::subpartition_key_return OracleDML::subpartition_key()
    {
        return m_gOracleDMLKeys->subpartition_key();
    }

    OracleDML_OracleDMLCommons::numeric_return OracleDML::numeric()
    {
        return m_gOracleDMLCommons->numeric();
    }

    OracleDML_OracleDMLKeys::shutdown_key_return OracleDML::shutdown_key()
    {
        return m_gOracleDMLKeys->shutdown_key();
    }

    OracleDML_OracleDMLKeys::standalone_key_return OracleDML::standalone_key()
    {
        return m_gOracleDMLKeys->standalone_key();
    }

    OracleDML_OracleDMLKeys::long_key_return OracleDML::long_key()
    {
        return m_gOracleDMLKeys->long_key();
    }

    OracleDML_OracleDMLKeys::database_key_return OracleDML::database_key()
    {
        return m_gOracleDMLKeys->database_key();
    }

    OracleDML_OracleDMLKeys::function_key_return OracleDML::function_key()
    {
        return m_gOracleDMLKeys->function_key();
    }

    OracleDML_OracleDMLCommons::procedure_name_return OracleDML::procedure_name()
    {
        return m_gOracleDMLCommons->procedure_name();
    }

    OracleDML_OracleDMLKeys::mlslabel_key_return OracleDML::mlslabel_key()
    {
        return m_gOracleDMLKeys->mlslabel_key();
    }

    OracleDML_OracleDMLCommons::char_set_name_return OracleDML::char_set_name()
    {
        return m_gOracleDMLCommons->char_set_name();
    }

    OracleDML_OracleDMLKeys::cube_key_return OracleDML::cube_key()
    {
        return m_gOracleDMLKeys->cube_key();
    }

    OracleDML_OracleDMLCommons::sequence_name_return OracleDML::sequence_name()
    {
        return m_gOracleDMLCommons->sequence_name();
    }

    OracleDML_OracleDMLKeys::including_key_return OracleDML::including_key()
    {
        return m_gOracleDMLKeys->including_key();
    }

    OracleDML_OracleDMLKeys::avg_key_return OracleDML::avg_key()
    {
        return m_gOracleDMLKeys->avg_key();
    }

    OracleDML_OracleDMLKeys::schema_key_return OracleDML::schema_key()
    {
        return m_gOracleDMLKeys->schema_key();
    }

    OracleDML_OracleDMLKeys::nchar_key_return OracleDML::nchar_key()
    {
        return m_gOracleDMLKeys->nchar_key();
    }

    OracleDML_OracleDMLKeys::xml_key_return OracleDML::xml_key()
    {
        return m_gOracleDMLKeys->xml_key();
    }

    OracleDML_OracleDMLKeys::transaction_key_return OracleDML::transaction_key()
    {
        return m_gOracleDMLKeys->transaction_key();
    }

    OracleDML_OracleDMLKeys::agent_key_return OracleDML::agent_key()
    {
        return m_gOracleDMLKeys->agent_key();
    }

    OracleDML_OracleDMLKeys::round_key_return OracleDML::round_key()
    {
        return m_gOracleDMLKeys->round_key();
    }

    OracleDML_OracleDMLKeys::except_key_return OracleDML::except_key()
    {
        return m_gOracleDMLKeys->except_key();
    }

    OracleDML_OracleDMLKeys::partial_key_return OracleDML::partial_key()
    {
        return m_gOracleDMLKeys->partial_key();
    }

    OracleDML_OracleDMLKeys::entityescaping_key_return OracleDML::entityescaping_key()
    {
        return m_gOracleDMLKeys->entityescaping_key();
    }

    OracleDML_OracleDMLKeys::timestamp_key_return OracleDML::timestamp_key()
    {
        return m_gOracleDMLKeys->timestamp_key();
    }

    OracleDML_OracleDMLKeys::session_user_key_return OracleDML::session_user_key()
    {
        return m_gOracleDMLKeys->session_user_key();
    }

    OracleDML_OracleDMLKeys::siblings_key_return OracleDML::siblings_key()
    {
        return m_gOracleDMLKeys->siblings_key();
    }

    OracleDML_OracleDMLKeys::smallint_key_return OracleDML::smallint_key()
    {
        return m_gOracleDMLKeys->smallint_key();
    }

    OracleDML_OracleDMLKeys::within_key_return OracleDML::within_key()
    {
        return m_gOracleDMLKeys->within_key();
    }

    OracleDML_OracleDMLKeys::debug_key_return OracleDML::debug_key()
    {
        return m_gOracleDMLKeys->debug_key();
    }

    OracleDML_OracleDMLKeys::connect_key_return OracleDML::connect_key()
    {
        return m_gOracleDMLKeys->connect_key();
    }

    OracleDML_OracleDMLKeys::timezone_region_key_return OracleDML::timezone_region_key()
    {
        return m_gOracleDMLKeys->timezone_region_key();
    }

    OracleDML_OracleDMLCommons::parameter_name_return OracleDML::parameter_name()
    {
        return m_gOracleDMLCommons->parameter_name();
    }

    OracleDML_OracleDMLCommons::not_equal_op_return OracleDML::not_equal_op()
    {
        return m_gOracleDMLCommons->not_equal_op();
    }

    OracleDML_OracleDMLCommons::function_argument_return OracleDML::function_argument()
    {
        return m_gOracleDMLCommons->function_argument();
    }

    OracleDML_OracleDMLKeys::modify_key_return OracleDML::modify_key()
    {
        return m_gOracleDMLKeys->modify_key();
    }

    OracleDML_OracleDMLKeys::inner_key_return OracleDML::inner_key()
    {
        return m_gOracleDMLKeys->inner_key();
    }

    OracleDML_OracleDMLKeys::statistics_key_return OracleDML::statistics_key()
    {
        return m_gOracleDMLKeys->statistics_key();
    }

    OracleDML_OracleDMLKeys::startup_key_return OracleDML::startup_key()
    {
        return m_gOracleDMLKeys->startup_key();
    }

    OracleDML_OracleDMLCommons::keep_clause_return OracleDML::keep_clause()
    {
        return m_gOracleDMLCommons->keep_clause();
    }

    OracleDML_OracleDMLKeys::savepoint_key_return OracleDML::savepoint_key()
    {
        return m_gOracleDMLKeys->savepoint_key();
    }

    OracleDML_OracleDMLKeys::xmlagg_key_return OracleDML::xmlagg_key()
    {
        return m_gOracleDMLKeys->xmlagg_key();
    }

    OracleDML_OracleDMLKeys::character_length_key_return OracleDML::character_length_key()
    {
        return m_gOracleDMLKeys->character_length_key();
    }

    OracleDML_OracleDMLKeys::character_key_return OracleDML::character_key()
    {
        return m_gOracleDMLKeys->character_key();
    }

    OracleDML_OracleDMLKeys::nomaxvalue_key_return OracleDML::nomaxvalue_key()
    {
        return m_gOracleDMLKeys->nomaxvalue_key();
    }

    OracleDML_OracleDMLKeys::restrict_references_key_return OracleDML::restrict_references_key()
    {
        return m_gOracleDMLKeys->restrict_references_key();
    }

    OracleDML_OracleDMLKeys::xmlparse_key_return OracleDML::xmlparse_key()
    {
        return m_gOracleDMLKeys->xmlparse_key();
    }

    OracleDML_OracleDMLKeys::simple_integer_key_return OracleDML::simple_integer_key()
    {
        return m_gOracleDMLKeys->simple_integer_key();
    }

    OracleDML_OracleDMLKeys::int_key_return OracleDML::int_key()
    {
        return m_gOracleDMLKeys->int_key();
    }

    OracleDML_OracleDMLCommons::query_name_return OracleDML::query_name()
    {
        return m_gOracleDMLCommons->query_name();
    }

    OracleDML_OracleDMLKeys::module_key_return OracleDML::module_key()
    {
        return m_gOracleDMLKeys->module_key();
    }

    OracleDML_OracleDMLKeys::range_key_return OracleDML::range_key()
    {
        return m_gOracleDMLKeys->range_key();
    }

    OracleDML_OracleDMLKeys::current_timestamp_key_return OracleDML::current_timestamp_key()
    {
        return m_gOracleDMLKeys->current_timestamp_key();
    }

    OracleDML_OracleDMLKeys::under_key_return OracleDML::under_key()
    {
        return m_gOracleDMLKeys->under_key();
    }

    OracleDML_OracleDMLKeys::char_length_key_return OracleDML::char_length_key()
    {
        return m_gOracleDMLKeys->char_length_key();
    }

    OracleDML_OracleDMLKeys::mod_key_return OracleDML::mod_key()
    {
        return m_gOracleDMLKeys->mod_key();
    }

    OracleDML_OracleDMLKeys::decrement_key_return OracleDML::decrement_key()
    {
        return m_gOracleDMLKeys->decrement_key();
    }

    OracleDML_OracleDMLKeys::numeric_key_return OracleDML::numeric_key()
    {
        return m_gOracleDMLKeys->numeric_key();
    }

    OracleDML_OracleDMLKeys::if_key_return OracleDML::if_key()
    {
        return m_gOracleDMLKeys->if_key();
    }

    OracleDML_OracleDMLKeys::xmltable_key_return OracleDML::xmltable_key()
    {
        return m_gOracleDMLKeys->xmltable_key();
    }

    OracleDML_OracleDMLKeys::referencing_key_return OracleDML::referencing_key()
    {
        return m_gOracleDMLKeys->referencing_key();
    }

    OracleDML_OracleDMLKeys::respect_key_return OracleDML::respect_key()
    {
        return m_gOracleDMLKeys->respect_key();
    }

    OracleDML_OracleDMLKeys::xmlserialize_key_return OracleDML::xmlserialize_key()
    {
        return m_gOracleDMLKeys->xmlserialize_key();
    }

    OracleDML_OracleDMLCommons::id_return OracleDML::id(int toraTokenType, int usageType)
    {
        return m_gOracleDMLCommons->id(toraTokenType, usageType);
    }

    OracleDML_OracleDMLKeys::update_key_return OracleDML::update_key()
    {
        return m_gOracleDMLKeys->update_key();
    }

    OracleDML_OracleDMLKeys::content_key_return OracleDML::content_key()
    {
        return m_gOracleDMLKeys->content_key();
    }

    OracleDML_OracleDMLKeys::sum_key_return OracleDML::sum_key()
    {
        return m_gOracleDMLKeys->sum_key();
    }

    OracleDML_OracleDMLKeys::nocycle_key_return OracleDML::nocycle_key()
    {
        return m_gOracleDMLKeys->nocycle_key();
    }

    OracleDML_OracleDMLKeys::then_key_return OracleDML::then_key()
    {
        return m_gOracleDMLKeys->then_key();
    }

    OracleDML_OracleDMLKeys::errors_key_return OracleDML::errors_key()
    {
        return m_gOracleDMLKeys->errors_key();
    }

    OracleDML_OracleDMLKeys::constant_key_return OracleDML::constant_key()
    {
        return m_gOracleDMLKeys->constant_key();
    }

    OracleDML_OracleDMLKeys::compound_key_return OracleDML::compound_key()
    {
        return m_gOracleDMLKeys->compound_key();
    }

    OracleDML_OracleDMLKeys::connect_by_root_key_return OracleDML::connect_by_root_key()
    {
        return m_gOracleDMLKeys->connect_by_root_key();
    }

    OracleDML_OracleDMLCommons::function_argument_modeling_return OracleDML::function_argument_modeling()
    {
        return m_gOracleDMLCommons->function_argument_modeling();
    }

    OracleDML_OracleDMLKeys::constraint_key_return OracleDML::constraint_key()
    {
        return m_gOracleDMLKeys->constraint_key();
    }

    OracleDML_OracleDMLCommons::constant_return OracleDML::constant()
    {
        return m_gOracleDMLCommons->constant();
    }

    OracleDML_OracleDMLCommons::id_expression_return OracleDML::id_expression(int toraTokenType, int usageType)
    {
        return m_gOracleDMLCommons->id_expression(toraTokenType, usageType);
    }

    OracleDML_OracleDMLKeys::float_key_return OracleDML::float_key()
    {
        return m_gOracleDMLKeys->float_key();
    }

    OracleDML_OracleDMLKeys::minute_key_return OracleDML::minute_key()
    {
        return m_gOracleDMLKeys->minute_key();
    }

    OracleDML_OracleDMLKeys::desc_key_return OracleDML::desc_key()
    {
        return m_gOracleDMLKeys->desc_key();
    }

    OracleDML_OracleDMLKeys::chr_key_return OracleDML::chr_key()
    {
        return m_gOracleDMLKeys->chr_key();
    }

    OracleDML_OracleDMLKeys::library_key_return OracleDML::library_key()
    {
        return m_gOracleDMLKeys->library_key();
    }

    OracleDML_OracleDMLKeys::sample_key_return OracleDML::sample_key()
    {
        return m_gOracleDMLKeys->sample_key();
    }

    OracleDML_OracleDMLKeys::return_key_return OracleDML::return_key()
    {
        return m_gOracleDMLKeys->return_key();
    }

    OracleDML_OracleDMLKeys::measures_key_return OracleDML::measures_key()
    {
        return m_gOracleDMLKeys->measures_key();
    }

    OracleDML_OracleDMLKeys::role_key_return OracleDML::role_key()
    {
        return m_gOracleDMLKeys->role_key();
    }

    OracleDML_OracleDMLKeys::binary_float_min_normal_key_return OracleDML::binary_float_min_normal_key()
    {
        return m_gOracleDMLKeys->binary_float_min_normal_key();
    }

    OracleDML_OracleDMLKeys::deterministic_key_return OracleDML::deterministic_key()
    {
        return m_gOracleDMLKeys->deterministic_key();
    }

    OracleDML_OracleDMLKeys::cache_key_return OracleDML::cache_key()
    {
        return m_gOracleDMLKeys->cache_key();
    }

    OracleDML_OracleDMLKeys::open_key_return OracleDML::open_key()
    {
        return m_gOracleDMLKeys->open_key();
    }

    OracleDML_OracleDMLKeys::xmlattributes_key_return OracleDML::xmlattributes_key()
    {
        return m_gOracleDMLKeys->xmlattributes_key();
    }

    OracleDML_OracleDMLKeys::out_key_return OracleDML::out_key()
    {
        return m_gOracleDMLKeys->out_key();
    }

    OracleDML_OracleDMLKeys::percent_isopen_key_return OracleDML::percent_isopen_key()
    {
        return m_gOracleDMLKeys->percent_isopen_key();
    }

    OracleDML_OracleDMLKeys::defaults_key_return OracleDML::defaults_key()
    {
        return m_gOracleDMLKeys->defaults_key();
    }

    OracleDML_OracleDMLKeys::isolation_key_return OracleDML::isolation_key()
    {
        return m_gOracleDMLKeys->isolation_key();
    }

    OracleDML_OracleDMLKeys::nan_key_return OracleDML::nan_key()
    {
        return m_gOracleDMLKeys->nan_key();
    }

    OracleDML_OracleDMLKeys::empty_key_return OracleDML::empty_key()
    {
        return m_gOracleDMLKeys->empty_key();
    }

    OracleDML_OracleDMLKeys::group_key_return OracleDML::group_key()
    {
        return m_gOracleDMLKeys->group_key();
    }

    OracleDML_OracleDMLKeys::match_key_return OracleDML::match_key()
    {
        return m_gOracleDMLKeys->match_key();
    }

    OracleDML_OracleDMLKeys::translate_key_return OracleDML::translate_key()
    {
        return m_gOracleDMLKeys->translate_key();
    }

    OracleDML_OracleDMLKeys::nowait_key_return OracleDML::nowait_key()
    {
        return m_gOracleDMLKeys->nowait_key();
    }

    OracleDML_OracleDMLKeys::collect_key_return OracleDML::collect_key()
    {
        return m_gOracleDMLKeys->collect_key();
    }

    OracleDML_OracleDMLKeys::power_key_return OracleDML::power_key()
    {
        return m_gOracleDMLKeys->power_key();
    }

    OracleDML_OracleDMLKeys::sign_key_return OracleDML::sign_key()
    {
        return m_gOracleDMLKeys->sign_key();
    }

    OracleDML_OracleDMLKeys::audit_key_return OracleDML::audit_key()
    {
        return m_gOracleDMLKeys->audit_key();
    }

    OracleDML_OracleDMLKeys::reference_key_return OracleDML::reference_key()
    {
        return m_gOracleDMLKeys->reference_key();
    }

    OracleDML_OracleDMLCommons::outer_join_sign_return OracleDML::outer_join_sign()
    {
        return m_gOracleDMLCommons->outer_join_sign();
    }

    OracleDML_OracleDMLKeys::likec_key_return OracleDML::likec_key()
    {
        return m_gOracleDMLKeys->likec_key();
    }

    OracleDML_OracleDMLKeys::binary_float_infinity_key_return OracleDML::binary_float_infinity_key()
    {
        return m_gOracleDMLKeys->binary_float_infinity_key();
    }

    OracleDML_OracleDMLCommons::index_name_return OracleDML::index_name()
    {
        return m_gOracleDMLCommons->index_name();
    }

    OracleDML_OracleDMLKeys::check_key_return OracleDML::check_key()
    {
        return m_gOracleDMLKeys->check_key();
    }

    OracleDML_OracleDMLKeys::nextval_key_return OracleDML::nextval_key()
    {
        return m_gOracleDMLKeys->nextval_key();
    }

    OracleDML_OracleDMLKeys::dump_key_return OracleDML::dump_key()
    {
        return m_gOracleDMLKeys->dump_key();
    }

    OracleDML_OracleDMLCommons::xml_column_name_return OracleDML::xml_column_name()
    {
        return m_gOracleDMLCommons->xml_column_name();
    }

    OracleDML_OracleDMLKeys::include_key_return OracleDML::include_key()
    {
        return m_gOracleDMLKeys->include_key();
    }

    OracleDML_OracleDMLKeys::matched_key_return OracleDML::matched_key()
    {
        return m_gOracleDMLKeys->matched_key();
    }

    OracleDML_OracleDMLKeys::java_key_return OracleDML::java_key()
    {
        return m_gOracleDMLKeys->java_key();
    }

    OracleDML_OracleDMLKeys::varchar2_key_return OracleDML::varchar2_key()
    {
        return m_gOracleDMLKeys->varchar2_key();
    }

    OracleDML_OracleDMLKeys::of_key_return OracleDML::of_key()
    {
        return m_gOracleDMLKeys->of_key();
    }

    OracleDML_OracleDMLKeys::noaudit_key_return OracleDML::noaudit_key()
    {
        return m_gOracleDMLKeys->noaudit_key();
    }

    OracleDML_OracleDMLKeys::global_key_return OracleDML::global_key()
    {
        return m_gOracleDMLKeys->global_key();
    }

    OracleDML_OracleDMLKeys::begin_key_return OracleDML::begin_key()
    {
        return m_gOracleDMLKeys->begin_key();
    }

    OracleDML_OracleDMLKeys::abs_key_return OracleDML::abs_key()
    {
        return m_gOracleDMLKeys->abs_key();
    }

    OracleDML_OracleDMLKeys::ltrim_key_return OracleDML::ltrim_key()
    {
        return m_gOracleDMLKeys->ltrim_key();
    }

    OracleDML_OracleDMLKeys::share_key_return OracleDML::share_key()
    {
        return m_gOracleDMLKeys->share_key();
    }

    OracleDML_OracleDMLCommons::general_element_return OracleDML::general_element()
    {
        return m_gOracleDMLCommons->general_element();
    }

    OracleDML_OracleDMLKeys::case_key_return OracleDML::case_key()
    {
        return m_gOracleDMLKeys->case_key();
    }

    OracleDML_OracleDMLKeys::updated_key_return OracleDML::updated_key()
    {
        return m_gOracleDMLKeys->updated_key();
    }

    OracleDML_OracleDMLKeys::extract_key_return OracleDML::extract_key()
    {
        return m_gOracleDMLKeys->extract_key();
    }

    OracleDML_OracleDMLKeys::substitutable_key_return OracleDML::substitutable_key()
    {
        return m_gOracleDMLKeys->substitutable_key();
    }

    OracleDML_OracleDMLKeys::extend_key_return OracleDML::extend_key()
    {
        return m_gOracleDMLKeys->extend_key();
    }

    OracleDML_OracleDMLCommons::greater_than_or_equals_op_return OracleDML::greater_than_or_equals_op()
    {
        return m_gOracleDMLCommons->greater_than_or_equals_op();
    }

    OracleDML_OracleDMLKeys::rowid_key_return OracleDML::rowid_key()
    {
        return m_gOracleDMLKeys->rowid_key();
    }

    OracleDML_OracleDMLKeys::invalidate_key_return OracleDML::invalidate_key()
    {
        return m_gOracleDMLKeys->invalidate_key();
    }

    OracleDML_OracleDMLKeys::success_key_return OracleDML::success_key()
    {
        return m_gOracleDMLKeys->success_key();
    }

    OracleDML_OracleDMLKeys::rtrim_key_return OracleDML::rtrim_key()
    {
        return m_gOracleDMLKeys->rtrim_key();
    }

    OracleDML_OracleDMLKeys::varying_key_return OracleDML::varying_key()
    {
        return m_gOracleDMLKeys->varying_key();
    }

    OracleDML_OracleDMLKeys::pls_integer_key_return OracleDML::pls_integer_key()
    {
        return m_gOracleDMLKeys->pls_integer_key();
    }

    OracleDML_OracleDMLKeys::single_key_return OracleDML::single_key()
    {
        return m_gOracleDMLKeys->single_key();
    }

    OracleDML_OracleDMLKeys::join_key_return OracleDML::join_key()
    {
        return m_gOracleDMLKeys->join_key();
    }

    OracleDML_OracleDMLKeys::elsif_key_return OracleDML::elsif_key()
    {
        return m_gOracleDMLKeys->elsif_key();
    }

    OracleDML_OracleDMLKeys::deferred_key_return OracleDML::deferred_key()
    {
        return m_gOracleDMLKeys->deferred_key();
    }

    OracleDML_OracleDMLKeys::timezone_minute_key_return OracleDML::timezone_minute_key()
    {
        return m_gOracleDMLKeys->timezone_minute_key();
    }

    OracleDML_OracleDMLKeys::order_key_return OracleDML::order_key()
    {
        return m_gOracleDMLKeys->order_key();
    }

    OracleDML_OracleDMLKeys::context_key_return OracleDML::context_key()
    {
        return m_gOracleDMLKeys->context_key();
    }

    OracleDML_OracleDMLCommons::native_datatype_element_return OracleDML::native_datatype_element()
    {
        return m_gOracleDMLCommons->native_datatype_element();
    }

    OracleDML_OracleDMLKeys::last_value_key_return OracleDML::last_value_key()
    {
        return m_gOracleDMLKeys->last_value_key();
    }

    OracleDML_OracleDMLKeys::last_key_return OracleDML::last_key()
    {
        return m_gOracleDMLKeys->last_key();
    }

    OracleDML_OracleDMLKeys::into_key_return OracleDML::into_key()
    {
        return m_gOracleDMLKeys->into_key();
    }

    OracleDML_OracleDMLKeys::initcap_key_return OracleDML::initcap_key()
    {
        return m_gOracleDMLKeys->initcap_key();
    }

    OracleDML_OracleDMLKeys::unknown_key_return OracleDML::unknown_key()
    {
        return m_gOracleDMLKeys->unknown_key();
    }

    OracleDML_OracleDMLCommons::into_clause_return OracleDML::into_clause()
    {
        return m_gOracleDMLCommons->into_clause();
    }

    OracleDML_OracleDMLKeys::logon_key_return OracleDML::logon_key()
    {
        return m_gOracleDMLKeys->logon_key();
    }

    OracleDML_OracleDMLKeys::ignore_key_return OracleDML::ignore_key()
    {
        return m_gOracleDMLKeys->ignore_key();
    }

    OracleDML_OracleDMLKeys::serially_reusable_key_return OracleDML::serially_reusable_key()
    {
        return m_gOracleDMLKeys->serially_reusable_key();
    }

    OracleDML_OracleDMLKeys::lower_key_return OracleDML::lower_key()
    {
        return m_gOracleDMLKeys->lower_key();
    }

    OracleDML_OracleDMLKeys::nvl_key_return OracleDML::nvl_key()
    {
        return m_gOracleDMLKeys->nvl_key();
    }

    OracleDML_OracleDMLCommons::implementation_type_name_return OracleDML::implementation_type_name()
    {
        return m_gOracleDMLCommons->implementation_type_name();
    }

    OracleDML_OracleDMLKeys::seed_key_return OracleDML::seed_key()
    {
        return m_gOracleDMLKeys->seed_key();
    }

    OracleDML_OracleDMLKeys::xmlcolattval_key_return OracleDML::xmlcolattval_key()
    {
        return m_gOracleDMLKeys->xmlcolattval_key();
    }

    OracleDML_OracleDMLCommons::tableview_name_return OracleDML::tableview_name()
    {
        return m_gOracleDMLCommons->tableview_name();
    }

    OracleDML_OracleDMLKeys::document_key_return OracleDML::document_key()
    {
        return m_gOracleDMLKeys->document_key();
    }

    OracleDML_OracleDMLKeys::batch_key_return OracleDML::batch_key()
    {
        return m_gOracleDMLKeys->batch_key();
    }

    OracleDML_OracleDMLKeys::nchar_cs_key_return OracleDML::nchar_cs_key()
    {
        return m_gOracleDMLKeys->nchar_cs_key();
    }

    OracleDML_OracleDMLKeys::distinct_key_return OracleDML::distinct_key()
    {
        return m_gOracleDMLKeys->distinct_key();
    }

    OracleDML_OracleDMLKeys::using_key_return OracleDML::using_key()
    {
        return m_gOracleDMLKeys->using_key();
    }

    OracleDML_OracleDMLKeys::show_key_return OracleDML::show_key()
    {
        return m_gOracleDMLKeys->show_key();
    }

    OracleDML_OracleDMLKeys::year_key_return OracleDML::year_key()
    {
        return m_gOracleDMLKeys->year_key();
    }

    OracleDML_OracleDMLKeys::parallel_enable_key_return OracleDML::parallel_enable_key()
    {
        return m_gOracleDMLKeys->parallel_enable_key();
    }

    OracleDML_OracleDMLKeys::corresponding_key_return OracleDML::corresponding_key()
    {
        return m_gOracleDMLKeys->corresponding_key();
    }

    OracleDML_OracleDMLKeys::as_key_return OracleDML::as_key()
    {
        return m_gOracleDMLKeys->as_key();
    }

    OracleDML_OracleDMLCommons::function_argument_analytic_return OracleDML::function_argument_analytic()
    {
        return m_gOracleDMLCommons->function_argument_analytic();
    }

    OracleDML_OracleDMLCommons::multiset_op_return OracleDML::multiset_op()
    {
        return m_gOracleDMLCommons->multiset_op();
    }

    OracleDML_OracleDMLKeys::settings_key_return OracleDML::settings_key()
    {
        return m_gOracleDMLKeys->settings_key();
    }

    OracleDML_OracleDMLKeys::pipelined_key_return OracleDML::pipelined_key()
    {
        return m_gOracleDMLKeys->pipelined_key();
    }

    OracleDML_OracleDMLKeys::natural_key_return OracleDML::natural_key()
    {
        return m_gOracleDMLKeys->natural_key();
    }

    OracleDML_OracleDMLKeys::corrupt_xid_all_key_return OracleDML::corrupt_xid_all_key()
    {
        return m_gOracleDMLKeys->corrupt_xid_all_key();
    }

    OracleDML_OracleDMLKeys::lock_key_return OracleDML::lock_key()
    {
        return m_gOracleDMLKeys->lock_key();
    }

    OracleDML_OracleDMLKeys::statement_id_key_return OracleDML::statement_id_key()
    {
        return m_gOracleDMLKeys->statement_id_key();
    }

    OracleDML_OracleDMLKeys::sessiontimezone_key_return OracleDML::sessiontimezone_key()
    {
        return m_gOracleDMLKeys->sessiontimezone_key();
    }

    OracleDML_OracleDMLKeys::char_key_return OracleDML::char_key()
    {
        return m_gOracleDMLKeys->char_key();
    }

    OracleDML_OracleDMLKeys::until_key_return OracleDML::until_key()
    {
        return m_gOracleDMLKeys->until_key();
    }

    OracleDML_OracleDMLCommons::function_name_return OracleDML::function_name()
    {
        return m_gOracleDMLCommons->function_name();
    }

    OracleDML_OracleDMLKeys::whenever_key_return OracleDML::whenever_key()
    {
        return m_gOracleDMLKeys->whenever_key();
    }

    OracleDML_OracleDMLCommons::column_alias_return OracleDML::column_alias()
    {
        return m_gOracleDMLCommons->column_alias();
    }

    OracleDML_OracleDMLKeys::xmlexists_key_return OracleDML::xmlexists_key()
    {
        return m_gOracleDMLKeys->xmlexists_key();
    }

    OracleDML_OracleDMLKeys::xmlpi_key_return OracleDML::xmlpi_key()
    {
        return m_gOracleDMLKeys->xmlpi_key();
    }

    OracleDML_OracleDMLKeys::auto_key_return OracleDML::auto_key()
    {
        return m_gOracleDMLKeys->auto_key();
    }

    OracleDML_OracleDMLKeys::nocache_key_return OracleDML::nocache_key()
    {
        return m_gOracleDMLKeys->nocache_key();
    }

    OracleDML_OracleDMLKeys::rpad_key_return OracleDML::rpad_key()
    {
        return m_gOracleDMLKeys->rpad_key();
    }

    OracleDML_OracleDMLKeys::skip_key_return OracleDML::skip_key()
    {
        return m_gOracleDMLKeys->skip_key();
    }

    OracleDML_OracleDMLKeys::grouping_key_return OracleDML::grouping_key()
    {
        return m_gOracleDMLKeys->grouping_key();
    }

    OracleDML_OracleDMLKeys::coalesce_key_return OracleDML::coalesce_key()
    {
        return m_gOracleDMLKeys->coalesce_key();
    }

    OracleDML_OracleDMLKeys::not_key_return OracleDML::not_key()
    {
        return m_gOracleDMLKeys->not_key();
    }

    OracleDML_OracleDMLKeys::maxvalue_key_return OracleDML::maxvalue_key()
    {
        return m_gOracleDMLKeys->maxvalue_key();
    }

    OracleDML_OracleDMLKeys::indent_key_return OracleDML::indent_key()
    {
        return m_gOracleDMLKeys->indent_key();
    }

    OracleDML_OracleDMLKeys::stddev_key_return OracleDML::stddev_key()
    {
        return m_gOracleDMLKeys->stddev_key();
    }

    OracleDML_OracleDMLKeys::left_key_return OracleDML::left_key()
    {
        return m_gOracleDMLKeys->left_key();
    }

    OracleDML_OracleDMLKeys::exception_key_return OracleDML::exception_key()
    {
        return m_gOracleDMLKeys->exception_key();
    }

    OracleDML_OracleDMLKeys::hide_key_return OracleDML::hide_key()
    {
        return m_gOracleDMLKeys->hide_key();
    }

    OracleDML_OracleDMLCommons::general_element_part_return OracleDML::general_element_part()
    {
        return m_gOracleDMLCommons->general_element_part();
    }

    OracleDML_OracleDMLKeys::oserror_key_return OracleDML::oserror_key()
    {
        return m_gOracleDMLKeys->oserror_key();
    }

    OracleDML_OracleDMLKeys::statement_key_return OracleDML::statement_key()
    {
        return m_gOracleDMLKeys->statement_key();
    }

    OracleDML_OracleDMLKeys::link_key_return OracleDML::link_key()
    {
        return m_gOracleDMLKeys->link_key();
    }

    OracleDML_OracleDMLKeys::save_key_return OracleDML::save_key()
    {
        return m_gOracleDMLKeys->save_key();
    }

    OracleDML_OracleDMLKeys::any_key_return OracleDML::any_key()
    {
        return m_gOracleDMLKeys->any_key();
    }

    OracleDML_OracleDMLCommons::less_than_or_equals_op_return OracleDML::less_than_or_equals_op()
    {
        return m_gOracleDMLCommons->less_than_or_equals_op();
    }

    OracleDML_OracleDMLKeys::level_key_return OracleDML::level_key()
    {
        return m_gOracleDMLKeys->level_key();
    }

    OracleDML_OracleDMLKeys::rules_key_return OracleDML::rules_key()
    {
        return m_gOracleDMLKeys->rules_key();
    }

    OracleDML_OracleDMLKeys::right_key_return OracleDML::right_key()
    {
        return m_gOracleDMLKeys->right_key();
    }

    OracleDML_OracleDMLKeys::minus_key_return OracleDML::minus_key()
    {
        return m_gOracleDMLKeys->minus_key();
    }

    OracleDML_OracleDMLKeys::write_key_return OracleDML::write_key()
    {
        return m_gOracleDMLKeys->write_key();
    }

    OracleDML_OracleDMLKeys::intersect_key_return OracleDML::intersect_key()
    {
        return m_gOracleDMLKeys->intersect_key();
    }

    OracleDML_OracleDMLKeys::constructor_key_return OracleDML::constructor_key()
    {
        return m_gOracleDMLKeys->constructor_key();
    }

    OracleDML_OracleDMLKeys::precision_key_return OracleDML::precision_key()
    {
        return m_gOracleDMLKeys->precision_key();
    }

    OracleDML_OracleDMLKeys::subtype_key_return OracleDML::subtype_key()
    {
        return m_gOracleDMLKeys->subtype_key();
    }

    OracleDML_OracleDMLKeys::loop_key_return OracleDML::loop_key()
    {
        return m_gOracleDMLKeys->loop_key();
    }

    OracleDML_OracleDMLKeys::nominvalue_key_return OracleDML::nominvalue_key()
    {
        return m_gOracleDMLKeys->nominvalue_key();
    }

    OracleDML_OracleDMLKeys::instantiable_key_return OracleDML::instantiable_key()
    {
        return m_gOracleDMLKeys->instantiable_key();
    }

    OracleDML_OracleDMLKeys::record_key_return OracleDML::record_key()
    {
        return m_gOracleDMLKeys->record_key();
    }

    OracleDML_OracleDMLCommons::record_name_return OracleDML::record_name()
    {
        return m_gOracleDMLCommons->record_name();
    }

    OracleDML_OracleDMLKeys::commit_key_return OracleDML::commit_key()
    {
        return m_gOracleDMLKeys->commit_key();
    }

    OracleDML_OracleDMLKeys::length_key_return OracleDML::length_key()
    {
        return m_gOracleDMLKeys->length_key();
    }

    OracleDML_OracleDMLKeys::dml_key_return OracleDML::dml_key()
    {
        return m_gOracleDMLKeys->dml_key();
    }

    OracleDML_OracleDMLKeys::explain_key_return OracleDML::explain_key()
    {
        return m_gOracleDMLKeys->explain_key();
    }

    OracleDML_OracleDMLKeys::final_key_return OracleDML::final_key()
    {
        return m_gOracleDMLKeys->final_key();
    }

    OracleDML_OracleDMLKeys::locked_key_return OracleDML::locked_key()
    {
        return m_gOracleDMLKeys->locked_key();
    }

    OracleDML_OracleDMLKeys::preceding_key_return OracleDML::preceding_key()
    {
        return m_gOracleDMLKeys->preceding_key();
    }

    OracleDML_OracleDMLCommons::package_name_return OracleDML::package_name()
    {
        return m_gOracleDMLCommons->package_name();
    }

    OracleDML_OracleDMLKeys::binary_float_max_subnormal_key_return OracleDML::binary_float_max_subnormal_key()
    {
        return m_gOracleDMLKeys->binary_float_max_subnormal_key();
    }

    OracleDML_OracleDMLKeys::binary_double_min_subnormal_key_return OracleDML::binary_double_min_subnormal_key()
    {
        return m_gOracleDMLKeys->binary_double_min_subnormal_key();
    }

    OracleDML_OracleDMLKeys::decimal_key_return OracleDML::decimal_key()
    {
        return m_gOracleDMLKeys->decimal_key();
    }

    OracleDML_OracleDMLCommons::variable_name_return OracleDML::variable_name()
    {
        return m_gOracleDMLCommons->variable_name();
    }

    OracleDML_OracleDMLKeys::user_key_return OracleDML::user_key()
    {
        return m_gOracleDMLKeys->user_key();
    }

    OracleDML_OracleDMLKeys::failure_key_return OracleDML::failure_key()
    {
        return m_gOracleDMLKeys->failure_key();
    }

    OracleDML_OracleDMLCommons::current_of_clause_return OracleDML::current_of_clause()
    {
        return m_gOracleDMLCommons->current_of_clause();
    }

    OracleDML_OracleDMLCommons::partition_extension_clause_return OracleDML::partition_extension_clause()
    {
        return m_gOracleDMLCommons->partition_extension_clause();
    }

    OracleDML_OracleDMLKeys::rows_key_return OracleDML::rows_key()
    {
        return m_gOracleDMLKeys->rows_key();
    }

    OracleDML_OracleDMLKeys::substr_key_return OracleDML::substr_key()
    {
        return m_gOracleDMLKeys->substr_key();
    }

    OracleDML_OracleDMLKeys::decode_key_return OracleDML::decode_key()
    {
        return m_gOracleDMLKeys->decode_key();
    }

    OracleDML_OracleDMLKeys::warning_key_return OracleDML::warning_key()
    {
        return m_gOracleDMLKeys->warning_key();
    }

    OracleDML_OracleDMLKeys::pragma_key_return OracleDML::pragma_key()
    {
        return m_gOracleDMLKeys->pragma_key();
    }

    OracleDML_OracleDMLKeys::logoff_key_return OracleDML::logoff_key()
    {
        return m_gOracleDMLKeys->logoff_key();
    }

    OracleDML_OracleDMLKeys::varray_key_return OracleDML::varray_key()
    {
        return m_gOracleDMLKeys->varray_key();
    }

    OracleDML_OracleDMLKeys::submultiset_key_return OracleDML::submultiset_key()
    {
        return m_gOracleDMLKeys->submultiset_key();
    }

    OracleDML_OracleDMLKeys::userenv_key_return OracleDML::userenv_key()
    {
        return m_gOracleDMLKeys->userenv_key();
    }

    OracleDML_OracleDMLKeys::current_key_return OracleDML::current_key()
    {
        return m_gOracleDMLKeys->current_key();
    }

    OracleDML_OracleDMLKeys::time_key_return OracleDML::time_key()
    {
        return m_gOracleDMLKeys->time_key();
    }

    OracleDML_OracleDMLKeys::iterate_key_return OracleDML::iterate_key()
    {
        return m_gOracleDMLKeys->iterate_key();
    }

    OracleDML_OracleDMLKeys::trim_key_return OracleDML::trim_key()
    {
        return m_gOracleDMLKeys->trim_key();
    }

    OracleDML_OracleDMLKeys::data_key_return OracleDML::data_key()
    {
        return m_gOracleDMLKeys->data_key();
    }

    OracleDML_OracleDMLKeys::unlimited_key_return OracleDML::unlimited_key()
    {
        return m_gOracleDMLKeys->unlimited_key();
    }

    OracleDML_OracleDMLKeys::escape_key_return OracleDML::escape_key()
    {
        return m_gOracleDMLKeys->escape_key();
    }

    OracleDML_OracleDMLKeys::is_key_return OracleDML::is_key()
    {
        return m_gOracleDMLKeys->is_key();
    }

    OracleDML_OracleDMLKeys::vsize_key_return OracleDML::vsize_key()
    {
        return m_gOracleDMLKeys->vsize_key();
    }

    OracleDML_OracleDMLKeys::cycle_key_return OracleDML::cycle_key()
    {
        return m_gOracleDMLKeys->cycle_key();
    }

    OracleDML_OracleDMLKeys::delete_key_return OracleDML::delete_key()
    {
        return m_gOracleDMLKeys->delete_key();
    }

    OracleDML_OracleDMLKeys::first_value_key_return OracleDML::first_value_key()
    {
        return m_gOracleDMLKeys->first_value_key();
    }

    OracleDML_OracleDMLKeys::element_key_return OracleDML::element_key()
    {
        return m_gOracleDMLKeys->element_key();
    }

    OracleDML_OracleDMLKeys::nvarchar2_key_return OracleDML::nvarchar2_key()
    {
        return m_gOracleDMLKeys->nvarchar2_key();
    }

    OracleDML_OracleDMLKeys::attribute_key_return OracleDML::attribute_key()
    {
        return m_gOracleDMLKeys->attribute_key();
    }

    OracleDML_OracleDMLKeys::first_key_return OracleDML::first_key()
    {
        return m_gOracleDMLKeys->first_key();
    }

    OracleDML_OracleDMLKeys::sequential_key_return OracleDML::sequential_key()
    {
        return m_gOracleDMLKeys->sequential_key();
    }

    OracleDML_OracleDMLCommons::quoted_string_return OracleDML::quoted_string()
    {
        return m_gOracleDMLCommons->quoted_string();
    }

    OracleDML_OracleDMLCommons::column_name_return OracleDML::column_name()
    {
        return m_gOracleDMLCommons->column_name();
    }

    OracleDML_OracleDMLKeys::binary_float_min_subnormal_key_return OracleDML::binary_float_min_subnormal_key()
    {
        return m_gOracleDMLKeys->binary_float_min_subnormal_key();
    }

    OracleDML_OracleDMLKeys::prior_key_return OracleDML::prior_key()
    {
        return m_gOracleDMLKeys->prior_key();
    }

    OracleDML_OracleDMLKeys::all_key_return OracleDML::all_key()
    {
        return m_gOracleDMLKeys->all_key();
    }

    OracleDML_OracleDMLKeys::interval_key_return OracleDML::interval_key()
    {
        return m_gOracleDMLKeys->interval_key();
    }

    OracleDML_OracleDMLKeys::current_user_key_return OracleDML::current_user_key()
    {
        return m_gOracleDMLKeys->current_user_key();
    }

    OracleDML_OracleDMLCommons::alias_quoted_string_return OracleDML::alias_quoted_string(int toraTokenType, int usageType)
    {
        return m_gOracleDMLCommons->alias_quoted_string(toraTokenType, usageType);
    }

    OracleDML_OracleDMLKeys::only_key_return OracleDML::only_key()
    {
        return m_gOracleDMLKeys->only_key();
    }

    OracleDML_OracleDMLKeys::greatest_key_return OracleDML::greatest_key()
    {
        return m_gOracleDMLKeys->greatest_key();
    }

    OracleDML_OracleDMLKeys::percent_found_key_return OracleDML::percent_found_key()
    {
        return m_gOracleDMLKeys->percent_found_key();
    }

    OracleDML_OracleDMLKeys::autonomous_transaction_key_return OracleDML::autonomous_transaction_key()
    {
        return m_gOracleDMLKeys->autonomous_transaction_key();
    }

    OracleDML_OracleDMLKeys::db_role_change_key_return OracleDML::db_role_change_key()
    {
        return m_gOracleDMLKeys->db_role_change_key();
    }

    OracleDML_OracleDMLKeys::string_key_return OracleDML::string_key()
    {
        return m_gOracleDMLKeys->string_key();
    }

    OracleDML_OracleDMLKeys::close_key_return OracleDML::close_key()
    {
        return m_gOracleDMLKeys->close_key();
    }

    OracleDML_OracleDMLKeys::blob_key_return OracleDML::blob_key()
    {
        return m_gOracleDMLKeys->blob_key();
    }

    OracleDML_OracleDMLKeys::national_key_return OracleDML::national_key()
    {
        return m_gOracleDMLKeys->national_key();
    }

    OracleDML_OracleDMLKeys::replace_key_return OracleDML::replace_key()
    {
        return m_gOracleDMLKeys->replace_key();
    }

    OracleDML_OracleDMLKeys::compile_key_return OracleDML::compile_key()
    {
        return m_gOracleDMLKeys->compile_key();
    }

    OracleDML_OracleDMLKeys::exit_key_return OracleDML::exit_key()
    {
        return m_gOracleDMLKeys->exit_key();
    }

    OracleDML_OracleDMLKeys::boolean_key_return OracleDML::boolean_key()
    {
        return m_gOracleDMLKeys->boolean_key();
    }

    OracleDML_OracleDMLKeys::parent_key_return OracleDML::parent_key()
    {
        return m_gOracleDMLKeys->parent_key();
    }

    OracleDML_OracleDMLKeys::path_key_return OracleDML::path_key()
    {
        return m_gOracleDMLKeys->path_key();
    }

    OracleDML_OracleDMLKeys::nullif_key_return OracleDML::nullif_key()
    {
        return m_gOracleDMLKeys->nullif_key();
    }

    OracleDML_OracleDMLKeys::parameters_key_return OracleDML::parameters_key()
    {
        return m_gOracleDMLKeys->parameters_key();
    }

    OracleDML_OracleDMLKeys::binary_double_key_return OracleDML::binary_double_key()
    {
        return m_gOracleDMLKeys->binary_double_key();
    }

    OracleDML_OracleDMLKeys::exists_key_return OracleDML::exists_key()
    {
        return m_gOracleDMLKeys->exists_key();
    }

    OracleDML_OracleDMLKeys::index_key_return OracleDML::index_key()
    {
        return m_gOracleDMLKeys->index_key();
    }

    OracleDML_OracleDMLKeys::full_key_return OracleDML::full_key()
    {
        return m_gOracleDMLKeys->full_key();
    }

    OracleDML_OracleDMLKeys::union_key_return OracleDML::union_key()
    {
        return m_gOracleDMLKeys->union_key();
    }

    OracleDML_OracleDMLKeys::cluster_key_return OracleDML::cluster_key()
    {
        return m_gOracleDMLKeys->cluster_key();
    }

    OracleDML_OracleDMLKeys::exclude_key_return OracleDML::exclude_key()
    {
        return m_gOracleDMLKeys->exclude_key();
    }

    OracleDML_OracleDMLKeys::binary_double_max_subnormal_key_return OracleDML::binary_double_max_subnormal_key()
    {
        return m_gOracleDMLKeys->binary_double_max_subnormal_key();
    }

    OracleDML_OracleDMLKeys::name_key_return OracleDML::name_key()
    {
        return m_gOracleDMLKeys->name_key();
    }

    OracleDML_OracleDMLKeys::null_key_return OracleDML::null_key()
    {
        return m_gOracleDMLKeys->null_key();
    }

    OracleDML_OracleDMLKeys::trigger_key_return OracleDML::trigger_key()
    {
        return m_gOracleDMLKeys->trigger_key();
    }

    OracleDML_OracleDMLCommons::cost_class_name_return OracleDML::cost_class_name()
    {
        return m_gOracleDMLCommons->cost_class_name();
    }

    OracleDML_OracleDMLKeys::positive_key_return OracleDML::positive_key()
    {
        return m_gOracleDMLKeys->positive_key();
    }

    OracleDML_OracleDMLKeys::inline_key_return OracleDML::inline_key()
    {
        return m_gOracleDMLKeys->inline_key();
    }

    OracleDML_OracleDMLKeys::infinite_key_return OracleDML::infinite_key()
    {
        return m_gOracleDMLKeys->infinite_key();
    }

    OracleDML_OracleDMLKeys::add_key_return OracleDML::add_key()
    {
        return m_gOracleDMLKeys->add_key();
    }

    OracleDML_OracleDMLKeys::bit_key_return OracleDML::bit_key()
    {
        return m_gOracleDMLKeys->bit_key();
    }

    OracleDML_OracleDMLKeys::timeout_key_return OracleDML::timeout_key()
    {
        return m_gOracleDMLKeys->timeout_key();
    }

    OracleDML_OracleDMLKeys::block_key_return OracleDML::block_key()
    {
        return m_gOracleDMLKeys->block_key();
    }

/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool OracleDML::msynpred( antlr3::ClassForwarder< synpred41_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred41_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred46_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred46_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred25_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred25_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred24_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred24_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred28_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred28_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred20_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred20_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred23_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred23_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred16_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred16_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred50_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred50_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred42_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred42_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred39_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred39_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred12_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred12_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred31_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred31_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred38_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred38_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred15_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred15_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred13_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred13_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred17_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred17_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred18_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred18_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred4_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred4_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred6_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred6_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred3_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred3_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred48_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred48_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred47_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred47_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred11_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred11_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred2_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred2_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred30_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred30_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred5_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred5_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred10_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred10_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred40_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred40_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred45_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred45_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred9_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred9_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred8_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred8_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred21_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred21_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred19_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred19_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred22_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred22_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred43_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred43_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred51_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred51_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred1_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred1_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred36_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred36_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred49_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred49_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred26_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred26_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred14_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred14_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred29_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred29_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred27_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred27_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool OracleDML::msynpred( antlr3::ClassForwarder< synpred7_OracleDML >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred7_OracleDML_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

}

/* End of code
 * =============================================================================
 */
